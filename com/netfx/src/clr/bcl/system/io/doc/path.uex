<docs>
	<doc for="Path.DirectorySeparatorChar">
		<summary>
			<para> Provides a platform-specific character used to separate
      directory levels in a path string that reflects a hierarchical file system organization.
      </para>
		</summary>
		<remarks>
			<para>The character stored in this field cannot be in <see cref="System.IO.Path.InvalidPathChars"/>. <see cref="System.IO.Path.AltDirectorySeparatorChar"/> and <see langword="DirectorySeparatorChar"/> are both valid for separating directory levels in a path string. </para>
			<para> The value of this field is a slash ("/") on Unix, and a backslash ("\") on the Windows and Macintosh operating systems. </para>
		</remarks>
		<example>
			<para> The following example demonstrates the use of the
   <see langword="DirectorySeparatorChar"/> field.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="13"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.AltDirectorySeparatorChar">
		<summary>
			<para> Provides a platform-specific alternate character used to
      separate directory levels in a path string that reflects a hierarchical file system
      organization.
      </para>
		</summary>
		<remarks>
			<para> The character stored in this field cannot be in <see cref="System.IO.Path.InvalidPathChars"/>. This field can be set to the same value as <see cref="System.IO.Path.DirectorySeparatorChar"/>. <see langword="AltDirectorySeparatorChar"/> and
<see langword="DirectorySeparatorChar"/> are both valid for separating directory levels in
   a path string.
   </para>
			<para>The value of this field is a backslash ('\') on Unix, and a slash ('/') on
   Windows and Macintosh operating systems. </para>
		</remarks>
		<example>
			<para> The following example demonstrates a use of the
   <see langword="AltDirectorySeparatorChar"/> field.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="13"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.VolumeSeparatorChar">
		<summary>
			<para> Provides a platform-specific volume separator character.
      </para>
		</summary>
		<remarks>
			<para> The value of this field is a colon (':') on Windows and Macintosh, and a slash ('/') on Unix
      operating systems. This is most useful for parsing paths such as
      "c:\windows" or "MacVolume:System Folder".
      </para>
		</remarks>
		<example>
			<para> The following example demonstrates the use of
      the <see langword="VolumeSeparatorChar"/> field.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="13"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.InvalidPathChars">
		<summary>
			<para> Provides a platform-specific array of characters that
      cannot be specified in path string arguments passed to members of
      the <see cref="System.IO.Path"/>
      class.
      </para>
		</summary>
		<value>
			<para>A character array of invalid path characters for the current platform.</para>
		</value>
		<remarks>
			<para> This array is not guaranteed to contain the complete set
      of characters that are invalid in file and directory names.
      The full set of invalid characters can vary by file system. For example, on
      Windows-based desktop platforms, invalid
      path characters might include quote ("), less than (&lt;), greater than (&gt;),
      pipe (|), backspace (\b), null (\0), and Unicode characters 16 through 18 and 20 through 25.</para>
		</remarks>
		<example>
			<para> The following example demonstrates the use of
      the <see langword="InvalidPathChars"/> property.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="13"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.PathSeparator">
		<summary>
			<para> A platform-specific separator character used to
      separate path strings in environment variables.
      </para>
		</summary>
		<remarks>
			<para> On Windows-based desktop platforms, the value of this field is the semicolon (;) by default, but might vary on other platforms.
      </para>
		</remarks>
		<example>
			<para> The following example demonstrates the use of
      the <see langword="PathSeparator"/> field.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="13"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path">
		<summary>
			<para>Performs operations on <see cref="System.String"/> instances that contain
   file or directory path information. These operations are performed in a cross-platform manner.</para>
		</summary>
		<remarks>
			<para>The .NET Framework does not support direct access to physical disks through
      paths that are device names, such as "\\.\PHYSICALDRIVE0 ".</para>
			<para>A path is a string that provides the location of a file
      or directory. A path does not necessarily point to a location on disk; for
      example, a path might map to a location in memory or on a device. The exact format
      of a path is determined by the current platform. For example, on some systems, a
      path can start with a drive or volume letter, while this element is not present
      in other systems. On some systems, file paths can contain extensions, which
      indicate the type of information stored in the file. The format of a file
      name extension is platform-dependent; for example, some systems limit extensions to
      three characters, and others do not. The current platform also determines the
      set of characters used to separate the elements of a path, and the set of
      characters that cannot be used when specifying paths. Because of these
      differences, the fields of the <see langword="Path"/> class as well as the exact
      behavior of some members of the <see langword="Path"/> class are platform-dependent.</para>
			<para>A path can contain absolute or relative location information. Absolute paths
      fully specify a location: the file or directory can be uniquely identified
      regardless of the current location. Relative paths specify a partial location:
      the current location is used as the starting point when locating a file
      specified with a relative path. To determine the current directory, call
   <see cref="System.IO.Directory.GetCurrentDirectory" qualify="true"/>. </para>
			<para>Most members of the <see langword="Path"/> class do not interact with the file system and
   do not verify the existence of the file specified by a path string.
<see langword="Path"/> 
class members that modify a path string, such as <see cref="System.IO.Path.ChangeExtension"/>, have no effect on
names of files in the file system. <see langword="Path"/>
members do, however,
validate the contents of a specified path string, and throw an <see cref="System.ArgumentException"/> if the
string contains characters that are not valid in path strings, as defined in
<see cref="System.IO.Path.InvalidPathChars"/>. For example, on Windows-based desktop 
platforms, invalid path characters might include quote ("), less than
(&lt;), greater than (&gt;), pipe (|), backspace (\b), null (\0), and Unicode characters 16 through 18 and 20
through 25. </para>
			<para>The members of the <see langword="Path"/> class enable
you to quickly and easily perform common operations such as determining whether
a file name extension is part of a path, and combining two strings into one path
name.</para>
			<para>All members of the <see langword="Path"/>
class are static and can therefore be called without having an instance of a path.</para>
			<note type="note">
   In members that accept a path as
   an input string, that path must be well-formed or an exception is raised. For
   example, if a path is fully qualified but begins with a space, the path is not
   trimmed in methods of the class. Therefore, the path is malformed and an
   exception is raised. Similarly, a path or a combination of paths cannot be fully
   qualified twice. For example, "c:\temp c:\windows" also raises an exception in
   most cases. Ensure that your paths are well-formed when using methods that
   accept a path string.
</note>
			<para> In members that accept a path, the path can refer to a file or just
   a directory. The specified path can also refer to a relative path or a
   Universal Naming Convention (UNC) path for a server and share name. For example, all
   the following are acceptable paths:</para>
			<list type="bullet"><item>
					<term>
      
      "c:\\MyDir\\MyFile.txt" in C#, or
      "c:\MyDir\MyFile.txt" in Visual Basic.</term>
				</item>
				<item>
					<term>
      
      "c:\\MyDir" in C#, or "c:\MyDir" in Visual Basic.</term>
				</item>
				<item>
					<term>
      
      "MyDir\\MySubdir" in C#, or "MyDir\MySubDir" in
      Visual Basic.</term>
				</item>
				<item>
					<term>
      
      "\\\\MyServer\\MyShare"
      in C#, or "\\MyServer\MyShare" in Visual Basic.</term>
				</item>
			</list>
			<para> Because all these operations are performed on strings, it
   is impossible to verify that the results are valid in all scenarios. For
   example, the <see cref="System.IO.Path.GetExtension"/> method
   parses a string that you pass to it and returns the extension from that string.
   However, this does not mean that a file with that extension exists on the disk.</para>
			<para> For an example of using this class, see the Example 
   section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath"/></description>
				</item>
				<item>
					<term> Retrieve the file name and extension from a path.</term>
					<description><see cref="System.IO.Path.GetFileName"/></description>
				</item>
				<item>
					<term> Retrieve only the file name from a path.</term>
					<description><see cref="System.IO.Path.GetFileNameWithoutExtension"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension"/></description>
				</item>
				<item>
					<term>Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates some of the main members of the
   <see langword="Path "/>class.</para>
			<codelink SampleID="path class" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="Path.ChangeExtension">
		<summary>
			<para>Changes the extension of a path string.</para>
		</summary>
		<param name="path">The path information to modify. The path cannot contain any of the characters defined in <see cref="System.IO.Path.InvalidPathChars"/>.</param>
		<param name="extension">The new extension (with a leading period). Specify <see langword="null"/> to remove an existing extension from <paramref name="path"/> .</param>
		<returns>
			<para> A string containing the modified path information.</para>
			<para>On Windows-based desktop platforms, if
   <paramref name="path"/> is <see langword="null"/> or an empty string (""), the path
      information is returned unmodified. If <paramref name="extension"/>
      is <see langword="null"/>, the returned string contains the specified path
      with its extension removed. If <paramref name="path"/> has no extension, and
   <paramref name="extension"/> is not <see langword="null"/>, the returned path string
      contains <paramref name="extension"/> appended to the end of <paramref name="path"/> .</para>
		</returns>
		<exception cref="System.ArgumentException">The path contains one or more of the invalid characters defined in <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<remarks>
			<para>If neither <paramref name="path"/> nor
<paramref name="extension"/> contains a period (.), <see langword="ChangeExtension"/> 
adds
the period.</para>
			<para>The <paramref name="extension"/> parameter can contain multiple
periods and any valid path characters, and can be any length. If
<paramref name="extension"/> is <see langword="null"/>, the returned string contains the 
contents of <paramref name="path"/> with the last period and all characters following
it removed.</para>
			<para>If <paramref name="extension"/> is an empty string, the
returned path string contains the contents of <paramref name="path"/> with any characters
following the last period removed.</para>
			<para>If <paramref name="path"/> does not have an
extension and <paramref name="extension"/> is not <see langword="null"/> , the
returned string contains <paramref name="path"/> followed
by <paramref name="extension"/> .</para>
			<para>If <paramref name="extension"/> is not <see langword="null"/> and
does not contain a leading period, the period is added.</para>
			<para>If <paramref name="path"/> contains a multiple extension
separated by multiple periods, the returned string contains the contents of
<paramref name="path"/> with the last period and all characters following it replaced 
by <paramref name="extension"/>. For example, if <paramref name="path"/> is
"\Dir1\examples\pathtests.csx.txt" and <paramref name="extension"/> is "cs", the
modified path is "\Dir1\examples\pathtests.csx.cs".</para>
			<para> It is not
   possible to verify that the returned results are valid in all scenarios. For
   example, if <paramref name="path"/> is empty, <paramref name="extension"/> is appended.</para>
			<para> For an example of using this method, see the Example 
   section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath"/></description>
				</item>
				<item>
					<term> Retrieve only the file name from a path.</term>
					<description><see cref="System.IO.Path.GetFileNameWithoutExtension"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para> The following example demonstrates a use of the
   <see langword="ChangeExtension"/> method.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.GetDirectoryName">
		<summary>
			<para>Returns the directory information for the specified path string.</para>
		</summary>
		<param name="path">The path of a file or directory.</param>
		<returns>
			<para>A <see cref="System.String"/> containing directory
   information for <paramref name="path"/>, or <see langword="null"/> if <paramref name="path"/> denotes a
   root directory, is the empty string (""), or is <see langword="null"/>.
   Returns <see cref="System.String.Empty" qualify="true"/> if <paramref name="path"/> does not contain directory information.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="path"/> contains invalid characters, is empty, or contains only white spaces.</exception>
		<remarks>
			<para>The string returned by this method consists of all
      characters between the first and last <see cref="System.IO.Path.DirectorySeparatorChar"/> or <see cref="System.IO.Path.AltDirectorySeparatorChar"/> character in path. The first separator character is included, but the last separator character
      is not included in the returned string.</para>
			<para> For an example of using this method, see the Example 
      section below. The
      following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath"/></description>
				</item>
				<item>
					<term> Retrieve only the file name from a path.</term>
					<description><see cref="System.IO.Path.GetFileNameWithoutExtension"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates using
      the <see langword="GetDirectoryName"/> method on a Windows-based desktop
      platform.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="3"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.GetExtension">
		<summary>
			<para>Returns the extension of the specified path string.</para>
		</summary>
		<param name="path">The path string from which to get the extension.</param>
		<returns>
			<para>A <see cref="System.String"/> containing the extension of
   the specified path (including the "."), <see langword="null"/> ,
   or <see cref="System.String.Empty"/>. If
<paramref name="path"/> is <see langword="null"/>, <see langword="GetExtension "/>returns <see langword="null"/>. If <paramref name="path"/> does not have extension 
   information, <see langword="GetExtension"/>
   returns <see langword="Empty"/> .</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="path"/> contains one or more of the invalid characters defined in <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<remarks>
			<para>The extension of <paramref name="path"/> is obtained by searching
<paramref name="path"/> for
   a period (.), starting with the last character in path and continuing toward
   the start of path. If a period is found before a <see cref="System.IO.Path.DirectorySeparatorChar"/> or <see cref="System.IO.Path.AltDirectorySeparatorChar"/>
   character, the returned string
   contains the period and the characters after it; otherwise, <see cref="System.String.Empty"/> is
   returned.</para>
			<para> For an example of using this method, see the Example 
   section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath"/></description>
				</item>
				<item>
					<term> Retrieve the file name and extension from a path.</term>
					<description><see cref="System.IO.Path.GetFileName"/></description>
				</item>
				<item>
					<term> Retrieve only the file name from a path.</term>
					<description><see cref="System.IO.Path.GetFileNameWithoutExtension"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates using the
   <see langword="GetExtension"/> method on a Windows-based desktop platform.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="4"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.GetFullPath">
		<summary>
			<para>Returns the absolute path for the specified path string.</para>
		</summary>
		<param name="path">The file or directory for which to obtain absolute path information</param>
		<returns>
			<para>A string containing the fully qualified location of
   <paramref name="path"/> , such as "C:\MyFile.txt".</para>
		</returns>
		<exception cref="System.ArgumentException"><para><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</para>
			<para>-or-</para>
			<para>The system could not retrieve the absolute path.</para></exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permissions.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> contains a colon (":").</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<remarks>
			<para>The .NET Framework does not support direct access to physical disks through paths
      that are device names, such as "\\.\PHYSICALDRIVE0
      ". </para>
			<para>The absolute path includes all information required to locate a file or
      directory on a system. </para>
			<para>The file or directory specified by <paramref name="path"/> is not required to exist. For example,
   if c:\temp\newdir is the current directory, calling <see langword="GetFullPath"/>
   on a file name such as test.txt returns c:\temp\newdir\test.txt. The file need
   not exist. </para>
			<para>However, if <paramref name="path"/> does exist, the
caller must have permission to obtain path information for <paramref name="path"/>. Note that unlike most members of the <see cref="System.IO.Path"/> class, this method accesses the
file system. </para>
			<para>This method uses current directory and current volume
   information to fully qualify <paramref name="path"/>. If you only
   specify a file name in <paramref name="path"/> , <see langword="GetFullPath"/> returns
   the fully qualified path of the current directory. </para>
			<para>If you pass in a short file name, it is not expanded to a long file
   name. </para>
			<para> For an example of using this method, see the Example 
   section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension"/></description>
				</item>
				<item>
					<term> Retrieve only the file name from a path.</term>
					<description><see cref="System.IO.Path.GetFileNameWithoutExtension"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension"/></description>
				</item>
				<item>
					<term>Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the path. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates the
   <see langword="GetFullPath"/>
   method on a Windows-based desktop
   platform.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="7"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.GetFileName">
		<summary>
			<para>Returns the file name and extension of the specified path string.</para>
		</summary>
		<param name="path">The path string from which to obtain the file name and extension.</param>
		<returns>
			<para>A <see cref="System.String"/> consisting of the characters after the last directory
   character in <paramref name="path"/>. If the last character of <paramref name="path"/> is a
   directory or
   volume separator character, this method returns <see cref="System.String.Empty"/>. If <paramref name="path"/> is
<see langword="null"/>, this method returns <see langword="null"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="path"/> contains one or more of the invalid characters defined in <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<remarks>
			<para> The returned value is
   <see langword="null"/> if the file path is
   <see langword="null"/>
   .</para>
			<para>The separator characters used to determine the start of the file name are
<see cref="System.IO.Path.DirectorySeparatorChar"/> and <see cref="System.IO.Path.AltDirectorySeparatorChar"/>.</para>
			<para> For an example of using this method, see the Example 
   section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath"/></description>
				</item>
				<item>
					<term> Retrieve only the file name from a path.</term>
					<description><see cref="System.IO.Path.GetFileNameWithoutExtension"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates the behavior of the
   <see langword="GetFileName"/> method on a Windows-based desktop platform.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="5"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.GetFileNameWithoutExtension">
		<summary>
			<para>Returns the file name of the specified path string without the extension.</para>
		</summary>
		<param name="path">The path of the file.</param>
		<returns>
			<para>A <see cref="System.String"/> containing the string
   returned by <see cref="System.IO.Path.GetFileName"/>, minus the last period (.) and all characters following it.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="path"/> contains one or more of the invalid characters defined in <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<remarks>
			<para>This method does not verify that the path or file name exists.</para>
			<para> For an example of using this method, see the Example 
      section below. The
      following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath"/></description>
				</item>
				<item>
					<term> Retrieve the file name and extension from a path.</term>
					<description><see cref="System.IO.Path.GetFileName"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para> The following example demonstrates a use of
      the <see langword="GetFileNameWithoutExtension"/> method.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="6"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.GetPathRoot">
		<summary>
			<para>Gets the root directory information of the specified path.</para>
		</summary>
		<param name="path">The path from which to obtain root directory information.</param>
		<returns>
			<para>A string containing the root directory of <paramref name="path"/>, such as "C:\", or
<see langword="null"/> if <paramref name="path"/> is 
<see langword="null"/>, or an empty string if <paramref name="path"/> does not contain root
   directory information. </para>
		</returns>
		<exception cref="System.ArgumentException"><para><paramref name="path"/> contains one or more of the invalid characters defined in <see cref="System.IO.Path.InvalidPathChars"/> .</para>
			<para>-or-</para>
			<para><see cref="System.String.Empty" qualify="true"/> was passed to <paramref name="path"/>.</para></exception>
		<remarks>
			<para>The .NET Framework does not support direct access to physical disks through paths
      that are device names, such as "\\.\PHYSICALDRIVE0 ". </para>
			<para>This method does not verify that the path or file name exists. </para>
			<para>Possible patterns for the string returned by this method are as follows:</para>
			<list type="bullet"><item>
					<term>
         
         An empty string (<paramref name="path"/>
         specified a relative path on the current drive or volume).</term>
				</item>
				<item>
					<term>
         
         "/" (<paramref name="path"/> specified an
         absolute path on the current drive).</term>
				</item>
				<item>
					<term>
         
         "X:" (<paramref name="path"/> specified a
         relative path on a drive, where X represents a drive or volume letter).</term>
				</item>
				<item>
					<term>
         
         "X:/" (<paramref name="path"/> specified an absolute path on a given drive).</term>
				</item>
			</list>
			<para> For an example of using this method, see the Example 
   section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath"/></description>
				</item>
				<item>
					<term> Retrieve the file name and extension from a path.</term>
					<description><see cref="System.IO.Path.GetFileName"/></description>
				</item>
				<item>
					<term> Retrieve only the file name from a path.</term>
					<description><see cref="System.IO.Path.GetFileNameWithoutExtension"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para> The following example demonstrates a use of
      the <see langword="GetPathRoot"/> method.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="8"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.GetTempPath">
		<summary>
			<para>Returns the path of the current system's temporary folder.</para>
		</summary>
		<returns>
			<para>A <see cref="System.String"/> containing the path information of a temporary
   directory.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The caller does not have the required permissions.</exception>
		<remarks>
			<para>The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath"/></description>
				</item>
				<item>
					<term> Retrieve the file name and extension from a path.</term>
					<description><see cref="System.IO.Path.GetFileName"/></description>
				</item>
				<item>
					<term> Retrieve only the file name from a path.</term>
					<description><see cref="System.IO.Path.GetFileNameWithoutExtension"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension"/></description>
				</item>
				<item>
					<term>Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for unrestricted access to environment variables. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.GetTempFileName">
		<summary>
			<para> Returns a unique temporary file name and creates a zero-byte file by
      that name on disk.
      </para>
		</summary>
		<returns>
			<para> A <see cref="System.String"/> containing the name of the temporary file.
   </para>
		</returns>
		<remarks>
			<para>The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath"/></description>
				</item>
				<item>
					<term> Retrieve the file name and extension from a path.</term>
					<description><see cref="System.IO.Path.GetFileName"/></description>
				</item>
				<item>
					<term> Retrieve only the file name from a path.</term>
					<description><see cref="System.IO.Path.GetFileNameWithoutExtension"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.HasExtension">
		<summary>
			<para>Determines whether a path includes a file name extension.</para>
		</summary>
		<param name="path">The path to search for an extension.</param>
		<returns>
			<para><see langword="true"/> if the
   characters that follow the last directory separator (\\ or /)
   or volume separator (:) in the path include a period (.) followed by
   one or more characters; otherwise, <see langword="false"/>
   .</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="path"/> contains one or more of the invalid characters defined in <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<remarks>
			<para>Starting from the end of <paramref name="path"/>, this method
   searches for a period (.) followed by at least one character. If this pattern
   is found before a <see cref="System.IO.Path.DirectorySeparatorChar"/>, <see cref="System.IO.Path.AltDirectorySeparatorChar"/>, or <see cref="System.IO.Path.VolumeSeparatorChar"/> character is encountered, this method returns
<see langword="true"/>
.</para>
			<para> For an example of using this method, see the Example 
   section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath"/></description>
				</item>
				<item>
					<term> Retrieve the file name and extension from a path.</term>
					<description><see cref="System.IO.Path.GetFileName"/></description>
				</item>
				<item>
					<term> Retrieve only the file name from a path.</term>
					<description><see cref="System.IO.Path.GetFileNameWithoutExtension"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension"/></description>
				</item>
				<item>
					<term>Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para> The following example demonstrates the use of the
   <see langword="HasExtension"/> method.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="11"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.IsPathRooted">
		<summary>
			<para>Gets a value indicating whether the specified path string contains absolute or
      relative path information.</para>
		</summary>
		<param name="path">The path to test.</param>
		<returns>
			<para><see langword="true"/> if
<paramref name="path"/> contains an absolute path; otherwise, 
<see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="path"/> contains one or more of the invalid characters defined in <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<remarks>
			<para>This method does not verify that the path or file name exists. </para>
			<para><see langword="IsPathRooted"/> returns <see langword="true"/> for <paramref name="path"/>
strings such as "\\MyDir\\MyFile.txt" and "C:\\MyDir". It
returns <see langword="false"/> for <paramref name="path"/> strings such as "MyDir".</para>
			<para> For an example of using this method, see the Example 
   section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates a use of the <see langword="IsPathRooted"/>
property.</para>
			<codelink SampleID="System.IO.Path Members" SnippetID="12"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Path.Combine">
		<summary>
			<para>Combines two
      path strings.</para>
		</summary>
		<param name="path1">The first path.</param>
		<param name="path2">The second path.</param>
		<returns>
			<para> A string containing the combined paths. If one of the
      specified paths is a zero-length string, this method returns the other path. If
   <paramref name="path2"/> contains an absolute path, this method returns
   <paramref name="path2"/>
   .</para>
		</returns>
		<exception cref="System.ArgumentException"><para>
				<paramref name="path1"/> or <paramref name="path2"/> contain one or more of the invalid characters defined in <see cref="System.IO.Path.InvalidPathChars"/>.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="path1"/> or <paramref name="path2"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>If <paramref name="path1"/> does not end with a valid separator
   character as defined in <see cref="System.IO.Path.DirectorySeparatorChar"/>, <see cref="System.IO.Path.AltDirectorySeparatorChar"/>, or <see cref="System.IO.Path.VolumeSeparatorChar"/>, <see langword="DirectorySeparatorChar"/> is appended
   to <paramref name="path1"/> before concatenation.</para>
			<para>If <paramref name="path2 "/>does not include a root (for example, if <paramref name="path2
"/>does not start with a separator character or a drive specification), the
result is a concatenation of the two paths, with an intervening separator character.
If <paramref name="path2 "/>includes a root, <paramref name="path2"/> is returned.</para>
			<para> Because the parameters are not
   parsed if they have white space, if <paramref name="path2"/> is " c:\\ ", this will be appended
   to <paramref name="path1"/> instead of returning only <paramref name="path2"/>
   . </para>
			<para>Not all invalid characters for directory and file names are interpreted as
   unacceptable by the <see langword="Combine"/> method, because you can use these
   characters for search wildcard characters. For example, while <c>Path.Combine("c:\\", "*.txt")</c> might be invalid if you
were to create a file from it, it is valid as a search string. It is therefore
successfully interpreted by the <see langword="Combine"/> method.</para>
			<para> For an example of using this method, see the Example 
   section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath"/></description>
				</item>
				<item>
					<term> Retrieve the file name and extension from a path.</term>
					<description><see cref="System.IO.Path.GetFileName"/></description>
				</item>
				<item>
					<term> Retrieve only the file name from a path.</term>
					<description><see cref="System.IO.Path.GetFileNameWithoutExtension"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension"/></description>
				</item>
				<item>
					<term>Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates using the
   <see langword="Combine"/> method on a Windows-based
      desktop platform.</para>
			<codelink SampleID="pathcombine" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
</docs>
