<docs>
	<doc for="DirectoryInfo.ToString">
		<summary>
			<para>Returns the original path that was passed by the user.</para>
		</summary>
		<returns>
			<para>Returns the original path that was passed by the user.</para>
		</returns>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo">
		<summary>
			<para> Exposes instance methods for creating, moving, and enumerating through directories
      and subdirectories.</para>
		</summary>
		<remarks>
			<para>Use the <see cref="System.IO.DirectoryInfo"/> class for typical operations such as copying, moving, 
   renaming, creating, and deleting directories.</para>
			<para>If you are going to reuse an object several times, consider using the 
   instance method of <see cref="System.IO.DirectoryInfo"/> instead of the corresponding static methods of the
<see cref="System.IO.Directory"/> 
class, because a security check will not always be necessary.</para>
			<note type="note">
   In members that accept a path as
   an input string, that path must be well-formed or an exception is raised. For
   example, if a path is fully qualified but begins with a space, the path is not
   trimmed in methods of the class. Therefore, the path is malformed and an
   exception is raised. Similarly, a path or a combination of paths cannot be fully
   qualified twice. For example, "c:\temp c:\windows" also raises an exception in
   most cases. Ensure that your paths are well-formed when using methods that
   accept a path string.
</note>
			<para>In members that accept a path, the path can refer to a file or just a
   directory. The specified path can also refer to a relative path or a Universal
   Naming Convention (UNC) path for a server and share name. For example, all
   the following are acceptable paths:</para>
			<list type="bullet"><item>
					<term>
      
      "c:\\MyDir\\MyFile.txt" in C#, or
      "c:\MyDir\MyFile.txt" in Visual Basic.</term>
				</item>
				<item>
					<term>
      
      "c:\\MyDir" in C#, or "c:\MyDir" in Visual Basic.</term>
				</item>
				<item>
					<term>
      
      "MyDir\\MySubdir" in C#, or "MyDir\MySubDir" in
      Visual Basic.</term>
				</item>
				<item>
					<term>
      
      "\\\\MyServer\\MyShare"
      
      in C#, or "\\MyServer\MyShare" in Visual Basic.</term>
				</item>
			</list>
			<para>By default, full read/write access to new directories is granted to all
   users.</para>
			<para>For an example of using this class, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates some of the main members of the
   <see langword="DirectoryInfo"/> class.</para>
			<codelink SampleID="DirInfo Class Example" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.File"/>
		<seealso cref="System.IO.FileSystemInfo.Attributes"/>
		<seealso cref="System.IO.Directory"/>
		<seealso cref="System.IO.Path"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="DirectoryInfo.Name">
		<summary>
			<para> Gets the name of this <see cref="System.IO.DirectoryInfo"/> instance.</para>
		</summary>
		<value>
			<para> The directory name.</para>
		</value>
		<remarks>
			<para>This <see langword="Name"/> property returns only
   the name of the directory, such as "Bin." To get the full path, such as "c:\public\Bin", use the <see cref="System.IO.FileSystemInfo.FullName"/> property.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath" qualify="true"/></description>
				</item>
				<item>
					<term> Change the extension of a
      file.</term>
					<description><see cref="System.IO.Path.ChangeExtension" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve only the file name from a 
      path.</term>
					<description><see cref="System.IO.Path.GetFileNameWithoutExtension" qualify="true"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para> The following example displays the name of the
      current <see langword="DirectoryInfo"/> instance
      only.</para>
			<codelink SampleID="Classic DirectoryInfo.Name Example" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.FileSystemInfo.FullName"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.Parent">
		<summary>
			<para> Gets the parent directory of a specified subdirectory.</para>
		</summary>
		<value>
			<para> The parent directory, or
   <see langword="null "/>
   if the path is null or if the file path denotes a root (such as
   "\", "C:", or * "\\server\share").</para>
		</value>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>For an example of using this method, see the Example section below. The
      following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from files and directories and for access to the path. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates referring to the parent directory of a
      specified directory.</para>
			<codelink SampleID="directoryinfoparent" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.CreateSubdirectory">
		<summary>
			<para>Creates a subdirectory or subdirectories on the specified
      path. The specified path can be relative to this instance of the <see cref="System.IO.DirectoryInfo"/> class.</para>
		</summary>
		<param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
		<returns>
			<para> The
      last directory specified in <paramref name="path"/> . </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="path "/>does not specify a valid file path or contains invalid <see langword="DirectoryInfo"/> characters.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/> .</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.IOException"><para>The subdirectory cannot be created.</para>
			<para>-or-</para>
			<para>A file or directory already has the name specified by <paramref name="path"/> .</para></exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.The specified path, file name, or both are too long. Paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>Any and all directories specified in <paramref name="path"/>
are created, unless some part of <paramref name="path"/> is invalid. The <paramref name="path
"/>parameter specifies a directory path, not a file
path. If the subdirectory already exists, this method does nothing.</para>
			<note type="note">
   Path names are limited to 248
   characters.
</note>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates creating a subdirectory. In this sample,
      the created directories are removed once created. Therefore, to test this
      sample, comment out the delete lines in the code.</para>
			<codelink SampleID="directoryinfocreatesub" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.Create">
		<summary>
			<para>Creates a directory.</para>
		</summary>
		<exception cref="System.IO.IOException">The directory cannot be created.</exception>
		<remarks>
			<para>If the directory already exists, this method does nothing.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example checks if a specified directory
      exists, creates the directory if it does not exist, and deletes the directory. </para>
			<codelink SampleID="DirInfo Create" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.Exists">
		<summary>
			<para>Gets a value indicating whether the directory exists.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the directory exists; otherwise,
<see langword="false "/> .</para>
		</value>
		<remarks>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates a use of the <see langword="Exists"/>
property in the context of copying a source directory to a target directory.</para>
			<codelink SampleID="DirectoryInfo Usage Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.GetFiles">
		<overload>
			<para>Returns a file list from the current directory.</para>
		</overload>
		<summary>
			<para>Returns a file list from the current directory matching
      the given <paramref name="searchPattern"/>
      , such as "*.txt".</para>
		</summary>
		<param name="searchPattern">The search string, such as "*.txt".</param>
		<returns>
			<para> An array of type <see cref="System.IO.FileInfo"/> .</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/> .</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>Wild cards are permitted. For example, the <paramref name="searchPattern"/> string "*.txt" searches for all file names
   having an extension of "txt". The
<paramref name="searchPattern"/> 
string "s*" searches for all file names beginning with the letter "s". If there
are no files, or no files that match the <paramref name="searchPattern"/> string in the <see cref="System.IO.DirectoryInfo"/>
, this method returns an empty array.</para>
			<para>The matching behavior of <paramref name="searchPattern"/> when the extension is exactly
three characters long is different from when the extension is more than three
characters long. A <paramref name="searchPattern"/> of exactly three characters returns
files having an extension of three or more characters. A <paramref name="searchPattern"/>
of one, two, or more than three characters returns only files having extensions
of exactly that length.</para>
			<para>The following list shows the behavior of different lengths for
   the <paramref name="searchPattern"/> parameter:</para>
			<list type="bullet"><item>
					<term>
      
      "*.abc" returns files having an extension of .abc,
      .abcd, .abcde, .abcdef, and so on.</term>
				</item>
				<item>
					<term>
      
      "*.abcd" returns only files having an extension of
      .abcd.</term>
				</item>
				<item>
					<term>
      
      "*.abcde" returns only files having an extension of
      .abcde.</term>
				</item>
				<item>
					<term>
      
      "*.abcdef" returns only files having an extension of .abcdef.</term>
				</item>
			</list>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Get file attributes.</term>
					<description><see cref="System.IO.File.GetAttributes"/></description>
				</item>
				<item>
					<term> Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the path and for reading from files and directories. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<para>The following example counts the directories and files
      that contain the specified letter. </para>
			<codelink SampleID="DirInfo GetFiles2" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.GetDirectories">
		<overload>
			<para>Returns the subdirectories of the current directory.</para>
		</overload>
		<summary>
			<para>Returns the subdirectories of the current directory.</para>
		</summary>
		<returns>
			<para>An array of <see cref="System.IO.DirectoryInfo"/> objects.</para>
		</returns>
		<exception cref="System.IO.DirectoryNotFoundException">The path encapsulated in the <see langword="DirectoryInfo"/> object is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para>If there are no subdirectories, this method returns only the root directory. This method is not
      recursive.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading directories. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example retrieves all the directories in the root directory and
      displays the directory names. </para>
			<codelink SampleID="directoryinfogetdirectories" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.GetDirectories1">
		<summary>
			<para>Returns an array of directories in the current <see cref="System.IO.DirectoryInfo"/>
matching the given search
criteria.</para>
		</summary>
		<param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
		<returns>
			<para>An array of type <see langword="DirectoryInfo"/> matching <paramref name="searchPattern"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/> .</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The path encapsulated in the <see langword="DirectoryInfo"/> object is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>Wild cards are permitted. For example, the <paramref name="searchPattern"/> string "*t"
   searches for all directory names in <paramref name="path"/> ending with the letter "t". The
<paramref name="searchPattern"/> string "s*" searches for all directory names in <paramref name="path"/> 
beginning with the letter "s".</para>
			<para>The string ".." can only be used in <paramref name="searchPattern"/> if it is specified as a part of
a valid directory name, such as in the directory name "a..b". It cannot be used
to move up the directory hierarchy.</para>
			<para>If there are no subdirectories, or no subdirectories are found that match
<paramref name="searchPattern"/>, this method returns only the root directory.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from files and directories and for access to the path. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<para> The following example counts the directories

      in a path that contain the specified letter. </para>
			<codelink SampleID="DirInfo GetDirs2" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.Root">
		<summary>
			<para>Gets the root portion of a path.</para>
		</summary>
		<value>
			<para>A <see cref="System.IO.DirectoryInfo"/> object representing the root of a path.</para>
		</value>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>For an example of using this method, see the Example section below. The
      following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a 
         path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName" qualify="true"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term>See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories" qualify="true"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.DirectoryInfo.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from files and directories and for access to the path. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates how to determine the root location of a
      specified directory.</para>
			<codelink SampleID="directoryinforoot" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.MoveTo">
		<summary>
			<para>Moves a <see cref="System.IO.DirectoryInfo"/> instance
   and its contents to a new path.</para>
		</summary>
		<param name="destDirName">The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.</param>
		<exception cref="System.ArgumentNullException"><para><paramref name="destDirName"/> is <see langword="null"/>.</para>
			<para>-or-</para>
			<para>The directory being moved and the destination directory have the same name.</para></exception>
		<exception cref="System.ArgumentException"><paramref name="destDirName"/> is an empty string (''").</exception>
		<exception cref="System.IO.IOException">An attempt was made to move a directory to a different volume, or <paramref name="destDirName"/> already exists.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>This method throws an <see cref="System.IO.IOException"/> if, for example, you try to move
   c:\mydir to c:\public, and c:\public already exists. You must specify
   "c:\\public\\mydir" as the <paramref name="destDirName"/> parameter, or
   specify a new directory name such as "c:\\newdir".</para>
			<para>This method permits moving a directory to a read-only
   directory. The read/write attribute of neither directory is affected.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term>Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term>Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term>Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">Write flag required for write permission to the destination directory.</permission>
		<example>
			<para>The following example demonstrates moving a directory.</para>
			<codelink SampleID="directoryinfomoveto" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<keyword term="renaming directories"/>
	</doc>
	<doc for="DirectoryInfo.Delete">
		<overload>
			<para> Deletes a <see cref="System.IO.DirectoryInfo"/> and its contents from a path.
   </para>
		</overload>
		<summary>
			<para> Deletes this <see cref="System.IO.DirectoryInfo"/> if it is
   empty.
   </para>
		</summary>
		<exception cref="System.IO.IOException">The directory is not empty. </exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission. </exception>
		<remarks>
			<para>For an example of using this method, see the Example section below. The
      following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing directories. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example throws an exception if you attempt
      to delete a directory that is not empty.</para>
			<codelink SampleID="DirInfo Delete1" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.Delete1">
		<summary>
			<para>Deletes this instance of a <see cref="System.IO.DirectoryInfo"/>,
   specifying whether to delete subdirectories and files.</para>
		</summary>
		<param name="recursive"><see langword="true"/> to delete this directory, its subdirectories, and all files; otherwise, <see langword="false"/> .</param>
		<exception cref="System.IO.IOException"><para>The directory is read-only.</para>
			<para>-or-</para>
			<para>The directory contains one or more files or subdirectories and <paramref name="recursive"/> is <see langword="false"/> .</para></exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>If the <see langword="DirectoryInfo"/> has no files or subdirectories, this
   method deletes the <see langword="DirectoryInfo"/> even if <paramref name="recursive"/> is
<see langword="false"/>. Attempting to delete a <see langword="DirectoryInfo"/> 
that is not empty when <paramref name="recursive"/> is <see langword="false"/> throws an
<see cref="System.IO.IOException"/>.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">Write flag required for write permission to the <see langword="DirectoryInfo"/> and subdirectories to be deleted.</permission>
		<example>
			<para>The following example demonstrates deleting a directory.
      Because the directory is removed, first comment out the <see langword="Delete"/>
      line to test that the
      directory exists. Then uncomment the same line of code to test that the
      directory was removed successfully.</para>
			<codelink SampleID="directoryinfodelete" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.DirectoryInfo">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.DirectoryInfo"/> class on the specified path.</para>
		</summary>
		<param name="path">A string specifying the path on which to create the <see langword="DirectoryInfo"/> .</param>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/> .</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> contains invalid characters such as ", &lt;, &gt;, or |.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.The specified path, file name, or both are too long. Paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<remarks>
			<para>This constructor does not check if a directory exists. This constructor is a
      placeholder for a string that is used to access the disk in subsequent
      operations.</para>
			<para>The <paramref name="path "/>parameter can be a file name, including
   a file on a Universal Naming Convention (UNC) share.</para>
			<note type="caution">
   When you compile a set of characters with
   a particular cultural setting and retrieve those same characters with a
   different cultural setting, the characters might not be interpretable, and could
   cause an exception to be
   thrown.
</note>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from files and directories. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example uses this constructor to create 
      the specified directory and subdirectory and demonstrates that a directory
      that contains subdirectories cannot be deleted. </para>
			<codelink SampleID="DirInfo Ctor" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.GetFiles1">
		<summary>
			<para>Returns a file list from the current directory.</para>
		</summary>
		<returns>
			<para> An array of type <see cref="System.IO.FileInfo"/> .</para>
		</returns>
		<exception cref="System.IO.DirectoryNotFoundException">The path is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para>If there are no files in the <see cref="System.IO.DirectoryInfo"/> , this method returns an empty array.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Get file attributes.</term>
					<description><see cref="System.IO.File.GetAttributes"/></description>
				</item>
				<item>
					<term> Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading directories. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para> The following example retrieves files from a
      specified directory.</para>
			<codelink SampleID="directoryinfogetfiles" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.GetFileSystemInfos">
		<overload>
			<para>Retrieves an array of strongly typed <see cref="System.IO.FileSystemInfo"/> objects.</para>
		</overload>
		<summary>
			<para>Retrieves an array of strongly typed <see cref="System.IO.FileSystemInfo"/> objects matching the
   specified search criteria.</para>
		</summary>
		<param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
		<returns>
			<para>An array of strongly typed
   <see langword="FileSystemInfo"/>
   objects matching the search criteria.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="searchPattern "/>is <see langword="null"/> .</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>Wild cards are permitted. For example, the <paramref name="searchPattern"/> string "*t"
   searches for all directory names in <paramref name="path"/> ending with the letter "t". The
<paramref name="searchPattern"/> string "s*" searches for all directory names in <paramref name="path"/> 
beginning with the letter "s".</para>
The
string
".." can only be used in <paramref name="searchPattern"/> if it is
specified as a part of a valid directory name, such as in the directory name
"a..b". It cannot be used to move up the directory hierarchy.
If there are no files or directories, or no files or directories that match
the <paramref name="searchPattern"/> string in the <see cref="System.IO.DirectoryInfo"/> , this
method returns an empty array.
<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
				<item>
					<term> Get file attributes.</term>
					<description><see cref="System.IO.File.GetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from files and directories and for access to the path. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<para>The following example counts the files and directories
      that match the specified search pattern. </para>
			<codelink SampleID="DirInfo GetFileSysInfos2" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.FileSystemInfo"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="DirectoryInfo.GetFileSystemInfos1">
		<summary>
			<para> Returns an array of strongly typed <see cref="System.IO.FileSystemInfo"/>
entries listing all the files and directories.</para>
		</summary>
		<returns>
			<para> An array of strongly typed <see cref="System.IO.FileSystemInfo"/> entries.
   </para>
		</returns>
		<exception cref="System.IO.DirectoryNotFoundException">The path is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para>If there are no files or directories in the <see cref="System.IO.DirectoryInfo"/>,
   this method returns an empty array.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
				<item>
					<term> Get file attributes.</term>
					<description><see cref="System.IO.File.GetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para> The following example counts the files and directories
      in a path.</para>
			<codelink SampleID="DirInfo GetFileSysInfos1" SnippetID="1"/>
			<para>The following example demonstrates listing the contents of a directory and 
sorting them by size. If the directory has subdirectories, they are listed 
first.</para>
			<codelink SampleID="FSizeSort" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.FileSystemInfo"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
</docs>
