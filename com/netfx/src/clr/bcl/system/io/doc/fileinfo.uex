<docs>
	<doc for="FileInfo.ToString">
		<summary>
			<para> Returns the fully qualified path as a string.</para>
		</summary>
		<returns>
			<para>A string representing the fully qualified path.</para>
		</returns>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="FileInfo.CreateText">
		<summary>
			<para>Creates a <see cref="System.IO.StreamWriter"/> that writes a new text file.</para>
		</summary>
		<returns>
			<para>A new <see langword="StreamWriter"/> .</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The file name is a directory.</exception>
		<exception cref="System.IO.IOException">The disk is read-only.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>By default, full read/write access to new files is granted to all users.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates the <see langword="CreateText"/>
method.</para>
			<codelink SampleID="finfo createtext" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.StreamWriter"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="FileInfo.AppendText">
		<summary>
			<para>Creates a <see cref="System.IO.StreamWriter"/> that appends text to the file represented by
   this instance of the <see cref="System.IO.FileInfo"/> .</para>
		</summary>
		<returns>
			<para>A new <see langword="StreamWriter"/>.</para>
		</returns>
		<remarks>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and appending to files. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Append" qualify="true"/></permission>
		<example>
			<para>The following example appends text to a file and reads
      from the file.</para>
			<codelink SampleID="finfo appendtext" SnippetID="1"/>
			<para>The following example demonstrates appending text to the end of a file and
 also displays the result of the append operation to the console. The first time
 this routine is called, the file is created if it does not exist. After that,
 the specified text is appended to the file.</para>
			<codelink SampleID="fileinfoappendtext" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.StreamWriter"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="FileInfo.CopyTo">
		<overload>
			<para>Copies an existing file
      to a new file.</para>
		</overload>
		<summary>
			<para>Copies an existing file
      to a new file, disallowing the overwriting of an existing file.</para>
		</summary>
		<param name="destFileName">The name of the new file to copy to.</param>
		<returns>
			<para>A new file with a
      fully
      qualified path.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters.</exception>
		<exception cref="System.IO.IOException">An error occurs, or the destination file already exists.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="destFileName"/> is <see langword="null"/>.</exception>
		<exception cref="System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.NotSupportedException"><paramref name="destFileName"/> contains a colon (:) in the middle of the string.</exception>
		<remarks>
			<para> Use the <see topic="frlrfSystemIOFileInfoClassCopyToTopic2" title="CopyTo(String, Boolean)"/> method
   to allow overwriting of an existing file.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates both overloads of the <see langword="CopyTo "/>method.</para>
			<codelink SampleID="finfo copyto2" SnippetID="1"/>
			<para>The following example demonstrates copying one file to
 another file, throwing an exception if the destination file already exists.</para>
			<codelink SampleID="FileInfoCopyTo1" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="FileInfo.Create">
		<summary>
			<para>Creates a file.</para>
		</summary>
		<returns>
			<para>A new file.</para>
		</returns>
		<remarks>
			<para>By default, full read/write access to new files is granted to all users.</para>
			<para> This method is a wrapper for the functionality
      provided by <see cref="System.IO.File.Create" qualify="true"/>.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example creates a reference to a file, and
      then creates the file on disk using <see langword="FileInfo.Create()"/> . </para>
			<codelink SampleID="fileinfodelete" SnippetID="1"/>
			<para>The following example creates a file, adds some text to it, and reads from 
the file.</para>
			<codelink SampleID="finfo create" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="FileInfo.CopyTo1">
		<summary>
			<para>Copies an existing file
      to a new file, allowing the overwriting of an existing file.</para>
		</summary>
		<param name="destFileName">The name of the new file to copy to.</param>
		<param name="overwrite"><see langword="true"/> to allow an existing file to be overwritten; otherwise, <see langword="false"/> .</param>
		<returns>
			<para>A new file, or an overwrite of an existing file if
      <paramref name="overwrite"/> is <see langword="true"/>. If the file exists and
      <paramref name="overwrite"/> is <see langword="false"/>, an <see cref="System.IO.IOException"/>
   is thrown.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters.</exception>
		<exception cref="System.IO.IOException">An error occurs, or the destination file already exists and <paramref name="overwrite"/> is <see langword="false"/> .</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="destFileName"/> is <see langword="null"/>.</exception>
		<exception cref="System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.NotSupportedException"><paramref name="destFileName"/> contains a colon (:) in the middle of the string.</exception>
		<remarks>
			<para> Use this method to allow or prevent overwriting of an
      existing file. Use the <see topic="frlrfSystemIOFileInfoClassCopyToTopic1" title="CopyTo(String)"/> method to prevent
      overwriting of an existing file by default.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates both overloads of the <see langword="CopyTo "/>method.</para>
			<codelink SampleID="finfo copyto2" SnippetID="1"/>
			<para>The following example demonstrates copying one file to another file, 
specifying whether to overwrite a file that already exists.</para>
			<codelink SampleID="fileinfocopyto" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="FileInfo.Delete">
		<summary>
			<para>Permanently deletes a file.</para>
		</summary>
		<exception cref="System.IO.IOException">The target file is open or memory-mapped on a computer running Microsoft Windows NT.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<exception cref="System.UnauthorizedAccessException">The path is a directory.</exception>
		<remarks>
			<para>If the file does not exist, this method does nothing.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term>See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term>Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<platnote platform="NT4"><see langword="Delete"/> does not delete a file that is open for normal I/O or a file that is memory-mapped.
</platnote>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates the
      <see langword="Delete"/> method. </para>
			<codelink SampleID="finfo delete" SnippetID="1"/>
			<para>The following example creates, closes, and deletes a file.</para>
			<codelink SampleID="fileinfodelete" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="FileInfo.OpenText">
		<summary>
			<para>Creates a <see cref="System.IO.StreamReader"/>
with UTF8 encoding that reads from an existing text file.</para>
		</summary>
		<returns>
			<para>A new <see langword="StreamReader"/>
with UTF8 encoding.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<exception cref="System.IO.FileNotFoundException">The file is not found.</exception>
		<exception cref="System.UnauthorizedAccessException"><paramref name="path"/> is read-only or is a directory.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example reads text from
      a file.</para>
			<codelink SampleID="finfo opentext" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.Encoding.UTF8"/>
		<seealso cref="System.IO.StreamReader"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="FileInfo.Open">
		<overload>
			<para>Opens a file with various read/write and sharing privileges.</para>
		</overload>
		<summary>
			<para>Opens a file in the specified mode.</para>
		</summary>
		<param name="mode">A <see cref="System.IO.FileMode"/> constant specifying the mode (for example, <see langword="Open"/> or <see langword="Append"/> ) in which to open the file. </param>
		<returns>
			<para>A file opened in the specified mode,
      with read/write access and unshared.</para>
		</returns>
		<exception cref="System.IO.FileNotFoundException">The file is not found.</exception>
		<exception cref="System.UnauthorizedAccessException">The file is read-only or is a directory.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.IOException">The file is already open.</exception>
		<remarks>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to and reading from files. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/> and <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example opens a file, adds some
      information to the file, and reads the file. </para>
			<codelink SampleID="finfo open1" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="FileInfo.Open1">
		<summary>
			<para>Opens a file in the specified mode
      with read, write, or read/write access.</para>
		</summary>
		<param name="mode">A <see cref="System.IO.FileMode"/> constant specifying the mode (for example, <see langword="Open"/> or <see langword="Append"/> ) in which to open the file. </param>
		<param name="access">A <see cref="System.IO.FileAccess"/> constant specifying whether to open the file with <see langword="Read"/>, <see langword="Write"/>, or <see langword="ReadWrite"/> file access.</param>
		<returns>
			<para>A <see cref="System.IO.FileStream"/> object opened in the specified mode
   and access, and unshared.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path "/>is empty or contains only white spaces.</exception>
		<exception cref="System.IO.FileNotFoundException">The file is not found.</exception>
		<exception cref="System.ArgumentNullException">One or more arguments is <see langword="null"/> .</exception>
		<exception cref="System.UnauthorizedAccessException"><paramref name="path"/> is read-only or is a directory.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.IOException">The file is already open.</exception>
		<remarks>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to and reading from files. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/> and <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example opens a file as read-only and
      reads from the file. </para>
			<codelink SampleID="finfo open2" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="FileInfo.OpenRead">
		<overload>
			<para>Creates a read-only <see cref="System.IO.FileStream"/> around a file.</para>
		</overload>
		<summary>
			<para>Creates a read-only <see cref="System.IO.FileStream"/> .</para>
		</summary>
		<returns>
			<para>A new read-only <see cref="System.IO.FileStream"/> object.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException"><paramref name="path"/> is read-only or is a directory.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.IOException">The file is already open.</exception>
		<remarks>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example opens a file as read-only and
      reads from
      it.</para>
			<codelink SampleID="finfo openread" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="FileInfo.OpenWrite">
		<summary>
			<para>Creates a write-only <see cref="System.IO.FileStream"/> .</para>
		</summary>
		<returns>
			<para>A new write-only unshared <see cref="System.IO.FileStream"/> object.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException"><paramref name="path"/> is read-only or is a directory.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para>For an example of using this method, see the Example section below. The
      following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example opens a file for writing and then reads
      from the file.</para>
			<codelink SampleID="finfo openwrite" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="FileInfo">
		<summary>
			<para>Provides instance methods for the creation, copying,
      deletion, moving, and opening of files, and aids in the creation of <see cref="System.IO.FileStream"/>
      
      objects.</para>
		</summary>
		<remarks>
			<para>Use the <see cref="System.IO.FileInfo"/> class for typical operations such as copying, moving, renaming, creating, opening, deleting, and appending to files.</para>
			<para>Many of the <see cref="System.IO.FileInfo"/> methods return other I/O types when you create or open files. You can use these other types to futher manipulate a file. For more information, see specific <see cref="System.IO.FileInfo"/> members such as <see cref="System.IO.FileInfo.Open"/>, <see cref="System.IO.FileInfo.OpenRead"/> , <see cref="System.IO.FileInfo.OpenText"/>, <see cref="System.IO.FileInfo.CreateText"/>, or <see cref="System.IO.FileInfo.Create"/>.</para>
			<para> If you are going to reuse an object several times, consider using the instance method of <see cref="System.IO.FileInfo"/> instead of the corresponding static methods of the
<see cref="System.IO.File"/> class, because a security check will not always be necessary.</para>
			<para>By default, full read/write access to new files is granted to all users.</para>
			<para>The following table describes the enumerations that are used to customize the behavior of various <see cref="System.IO.FileInfo"/> methods.</para>
			<list type="table">
				<listheader>
					<term>Enumeration</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see cref="System.IO.FileAccess"/></term>
					<description>Specifies read and write access to a file.</description>
				</item>
				<item>
					<term><see cref="System.IO.FileShare"/></term>
					<description>Specifies the level of access permitted for a file that is already in use.</description>
				</item>
				<item>
					<term><see cref="System.IO.FileMode"/></term>
					<description>Specifies whether the contents of an existing file are preserved or overwritten, and whether requests to create an existing file cause an exception. </description>
				</item>
			</list>
			<note type="note">
   In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, "c:\temp c:\windows" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.
</note>
			<para>In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:</para>
			<list type="bullet"><item>
					<term>
      "c:\\MyDir\\MyFile.txt" in C#, or
      "c:\MyDir\MyFile.txt" in Visual Basic.</term>
				</item>
				<item>
					<term>
      "c:\\MyDir" in C#, or "c:\MyDir" in Visual Basic.</term>
				</item>
				<item>
					<term>
      "MyDir\\MySubdir" in C#, or "MyDir\MySubDir" in Visual
      Basic.</term>
				</item>
				<item>
					<term>
      "\\\\MyServer\\MyShare" in C#, or "\\MyServer\MyShare" in Visual Basic.</term>
				</item>
			</list>
			<para>For an example of using this class, see the Example section below. The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description><para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description><para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description><para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description><para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description><para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve the file name and extension from a path.</term>
					<description><see cref="System.IO.Path.GetFileName" qualify="true"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension" qualify="true"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates some of the main members of the
   <see langword="FileInfo"/> class.</para>
			<codelink SampleID="finfo class" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="FileInfo.FileInfo">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.FileInfo"/> class, which
   acts as a wrapper for a file path.</para>
		</summary>
		<param name="fileName">The fully qualified name of the new file, or the relative file name.</param>
		<exception cref="System.ArgumentNullException"><paramref name=" fileName"/> is <see langword="null"/> .</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters.</exception>
		<exception cref="System.UnauthorizedAccessException">Access to <paramref name="fileName"/> is denied.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.NotSupportedException"><paramref name="fileName"/> contains a colon (:) in the middle of the string.</exception>
		<remarks>
			<para>You can specify either the fully qualified or the relative file name, but the
      security check gets the fully qualified name.</para>
			<para>For an example of using this method, see the Example section below. The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description><para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description><para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description><para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description><para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description><para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve the file name and extension from a path.</term>
					<description><see cref="System.IO.Path.GetFileName" qualify="true"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension" qualify="true"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example uses this constructor to 
      create two files, which are then written to, read from, copied, and
      deleted.</para>
			<codelink SampleID="finfo ctor" SnippetID="1"/>
			<para>The following example opens an existing file or creates a file, appends text
 to the file, and displays the results.</para>
			<codelink SampleID="fileinfomain" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="FileInfo.Name">
		<summary>
			<para>Gets the name of the file.</para>
		</summary>
		<value>
			<para>The name of the file.</para>
		</value>
		<remarks>
			<para>For an example of using this property, see the Example section below. The
      following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve the file name and extension from a
      path.</term>
					<description><see cref="System.IO.Path.GetFileName" qualify="true"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName" qualify="true"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example uses the <see langword="Name"/> property to
   display the names of files in the current directory.</para>
			<codelink SampleID="fileinfoname" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="FileInfo.DirectoryName">
		<summary>
			<para> Gets a string representing the directory's full path.</para>
		</summary>
		<value>
			<para>A string
      representing the directory's full path.</para>
		</value>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentNullException"><see langword="null"/> was passed in for the directory name.</exception>
		<remarks>
			<para>To get the parent directory as a <see cref="System.IO.DirectoryInfo"/> object, use the <see cref="System.IO.FileInfo.Directory"/> property.</para>
			<para>For an example of using this property, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve only the file name from a path.</term>
					<description><see cref="System.IO.Path.GetFileNameWithoutExtension" qualify="true"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name from a path.</term>
					<description><see cref="System.IO.Path.GetDirectoryName" qualify="true"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<para>The following example retrieves the full path of the 
      specified file.</para>
			<codelink SampleID="System.IO.FileInfo members" SnippetID="3"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="FileInfo.Directory">
		<summary>
			<para>Gets an instance of the parent directory.</para>
		</summary>
		<value>
			<para>A <see cref="System.IO.DirectoryInfo"/> object
   representing the parent directory of this file.</para>
		</value>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>To get the parent directory as a string, use the <see cref="System.IO.FileInfo.DirectoryName"/> property.</para>
			<para>For an example of using this property, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example opens or creates a file, determines its full path, and
      determines and displays the full contents of the directory.</para>
			<codelink SampleID="fileinfodirectory" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="FileInfo.Exists">
		<summary>
			<para>Gets a value indicating whether a file exists.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the file exists; <see langword="false "/>
if the file does not exist or if the file is a directory.</para>
		</value>
		<remarks>
			<para>For an example of using this property, see the Example section below. The
      following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size
      of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description>
						<para><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></para></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description>
						<para><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></para></description>
				</item>
				<item>
					<term> Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example opens or creates a file, closes it, 
      deletes it, and then uses the <see cref="System.IO.FileInfo.Exists"/> property to ensure that the file has
      been deleted.</para>
			<codelink SampleID="fileinfoexists" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="FileInfo.Open2">
		<summary>
			<para>Opens a file in the specified mode with read, write, or
      read/write access and the specified sharing option.</para>
		</summary>
		<param name="mode">A <see cref="System.IO.FileMode"/> constant specifying the mode (for example, <see langword="Open"/> or <see langword="Append"/> ) in which to open the file. </param>
		<param name="access">A <see cref="System.IO.FileAccess"/> constant specifying whether to open the file with <see langword="Read"/>, <see langword="Write"/>, or <see langword="ReadWrite"/> file access. </param>
		<param name="share">A <see cref="System.IO.FileShare"/> constant specifying the type of access other <see langword="FileStream"/> objects have to this file.</param>
		<returns>
			<para>A <see cref="System.IO.FileStream"/> object opened with the specified
   mode, access, and sharing options.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path "/>is empty or contains only white spaces.</exception>
		<exception cref="System.IO.FileNotFoundException">The file is not found.</exception>
		<exception cref="System.ArgumentNullException">One or more arguments is <see langword="null"/> .</exception>
		<exception cref="System.UnauthorizedAccessException"><paramref name="path"/> is read-only or is a directory.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.IOException">The file is already open.</exception>
		<remarks>
			<para>For an example of using this method, see the Example section below. The
      following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to and reading from files. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/> and <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates opening a file for reading and writing,
      but disallowing access to other users or processes.</para>
			<codelink SampleID="fileinfoopen" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="FileInfo.MoveTo">
		<summary>
			<para>Moves a specified file to a new location, providing the option to specify a
      new file name.</para>
		</summary>
		<param name="destFileName">The path to move the file to, which can specify a different file name.</param>
		<exception cref="System.IO.IOException">An I/O error occurs, such as the destination file already exists or the destination device is not ready.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="destFileName "/>is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters. </exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<exception cref="System.UnauthorizedAccessException"><paramref name="destFileName"/> is read-only or is a directory.</exception>
		<exception cref="System.IO.FileNotFoundException">The file is not found.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.NotSupportedException"><paramref name="destFileName"/> contains a colon (:) in the middle of the string.</exception>
		<remarks>
			<para>This method works across disk volumes. For example, the file c:\MyFile.txt
      can be moved to d:\public and renamed NewFile.txt.</para>
			<para>For an example of using this method, see the Example section below. The
      following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates moving a file to a
      different location and renaming the file.</para>
			<codelink SampleID="fileinfomoveto" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<keyword term="renaming files"/>
	</doc>
	<doc for="FileInfo.Length">
		<summary>
			<para> Gets the size of the current file.</para>
		</summary>
		<value>
			<para> The size of the current file.</para>
		</value>
		<exception cref="System.IO.IOException"><see cref="System.IO.FileSystemInfo.Refresh"/> cannot update the state of the file or directory.</exception>
		<exception cref="System.IO.FileNotFoundException"><para>The file does not exist.</para>
			<para>-or-</para>
			<para>The <see langword="Length"/> property is called for a directory.</para></exception>
		<remarks>
			<para>This property value is <see langword="null "/>if the file
   system containing the file does not support this information.</para>
			<para>For an example of using this property, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description>
						<para><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></para></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description>
						<para><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></para></description>
				</item>
				<item>
					<term> Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example displays the size of the specified
      files.</para>
			<codelink SampleID="FileLength" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
</docs>
