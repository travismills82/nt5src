<docs>
	<doc for="MemoryStream.Close">
		<summary>
			<para>Closes the stream for reading and writing.</para>
		</summary>
		<remarks>
			<para>This method overrides <see cref="System.IO.Stream.Close"/>
.</para>
			<para>The buffer is still available on a <see cref="System.IO.MemoryStream"/> once the stream
has been closed.</para>
			<para>Flushing the stream will not flush its underlying encoder unless you
   explicitly call <see cref="System.IO.MemoryStream.Flush"/> or <see langword="Close"/>. Setting
<see cref="System.IO.StreamWriter.AutoFlush"/> to <see langword="true"/> means that data 
   will be flushed from the buffer to the stream, but the encoder state will not be
   flushed. This allows the encoder to keep its state (partial characters) so that
   it can encode the next block of characters correctly. This scenario affects UTF8
   and UTF7 where certain characters can only be encoded after the encoder receives
   the adjacent character or characters.</para>
			<para>Attempting to manipulate a stream after it has been
   closed might throw an <see cref="System.ObjectDisposedException"/>
   .</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream">
		<summary>
			<para> Creates a stream whose backing store is memory.</para>
		</summary>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>The <see langword="MemoryStream"/>
class creates streams that have memory as a backing store instead of
a disk or a network connection. <see langword="MemoryStream "/>encapsulates data stored
as an unsigned byte array that is initialized upon creation of a
<see langword="MemoryStream "/>object,
or the array can be created as empty. The encapsulated data is directly accessible
in memory. Memory streams can reduce the need for temporary buffers and files
in an application.</para>
			<para>The
<paramref name="current position"/> of a 
   stream is the position at which the next read or write operation could take
   place. The current position can be retrieved or set through the <see cref="System.IO.MemoryStream.Seek"/>
   method. When a new instance of <see cref="System.IO.MemoryStream"/>
   
   is created, the current position is set to
   zero.</para>
			<para>Memory streams created with an unsigned byte array
   provide a non-resizable stream view of the data, and can only be written to.
   When using a byte array, you can neither append to
   nor shrink the stream, although you might be able to modify
   the existing contents depending on the parameters passed into the constructor. Empty memory streams are
   resizable, and can be written to and read from.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.MemoryStream">
		<overload>
			<para>Initializes a new instance of the <see cref="System.IO.MemoryStream"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.MemoryStream"/> class with an
   expandable capacity initialized to zero.</para>
		</summary>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>The <see cref="System.IO.MemoryStream.CanRead"/>, <see cref="System.IO.MemoryStream.CanSeek"/>, and <see cref="System.IO.MemoryStream.CanWrite"/> properties are all set to
<see langword="true"/>
.</para>
			<para>The capacity of the current
   stream automatically increases when you use the <see cref="System.IO.MemoryStream.SetLength"/>
   method to set the length to a value larger than the capacity of the current
   stream.</para>
			<para>This constructor
   exposes the underlying stream, which <see cref="System.IO.MemoryStream.GetBuffer"/>
   returns.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.MemoryStream1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.MemoryStream"/> class with an expandable capacity initialized as specified.</para>
		</summary>
		<param name="capacity">The initial size of the internal array in bytes.</param>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="capacity"/> is negative.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>The <see cref="System.IO.MemoryStream.CanRead"/>, <see cref="System.IO.MemoryStream.CanSeek"/>, and <see cref="System.IO.MemoryStream.CanWrite"/> properties
   are all set to <see langword="true"/>
   .</para>
			<para>The capacity automatically increases when you use the <see cref="System.IO.MemoryStream.SetLength"/>
method to set the length to a value larger than the capacity of the current
stream. Except for a <see langword="MemoryStream"/>
constructed with a byte[] parameter, write operations at
the end of a <see langword="MemoryStream"/> expand the
<see langword="MemoryStream"/>
.</para>
			<para>This constructor exposes the underlying stream that <see cref="System.IO.MemoryStream.GetBuffer"/>
returns.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.MemoryStream2">
		<summary>
			<para>Initializes a new non-resizable instance of the <see cref="System.IO.MemoryStream"/> class based on the specified byte array.</para>
		</summary>
		<param name="buffer">The array of unsigned bytes from which to create the current stream.</param>
		<exception cref="System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/> .</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>The <see cref="System.IO.MemoryStream.CanRead"/>, <see cref="System.IO.MemoryStream.CanSeek"/>, and <see cref="System.IO.MemoryStream.CanWrite"/> properties
   are all set to <see langword="true"/>. <see cref="System.IO.MemoryStream.Capacity"/>
   is set to the length of the specified byte array. The new
   stream can be written to, but is not resizable.</para>
			<para>The length of the stream cannot be set to a value greater than
   the initial length of the specified byte array; however, the stream can be
   truncated (see <see cref="System.IO.MemoryStream.SetLength"/>).</para>
			<para>This constructor does not expose the underlying stream. <see cref="System.IO.MemoryStream.GetBuffer"/> throws
<see cref="System.UnauthorizedAccessException"/>.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.MemoryStream3">
		<summary>
			<para>Initializes a new non-resizable instance of the <see cref="System.IO.MemoryStream"/> class
   based on the specified byte array with the <see cref="System.IO.MemoryStream.CanWrite"/> property set as specified.</para>
		</summary>
		<param name="buffer">The array of unsigned bytes from which to create this stream.</param>
		<param name="writable">The setting of the <see cref="System.IO.MemoryStream.CanWrite"/> property, which determines whether the stream supports writing.</param>
		<exception cref="System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/> .</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>The <see cref="System.IO.MemoryStream.CanRead"/> and <see cref="System.IO.MemoryStream.CanSeek"/> properties
   are both set to <see langword="true"/>. <see cref="System.IO.MemoryStream.Capacity"/> is set to the length of
   the specified byte array.</para>
			<para>The length of the stream cannot be set to a value greater than
   the initial length of the specified byte array; however, the stream can be
   truncated (see <see cref="System.IO.MemoryStream.SetLength"/>).</para>
			<para>This constructor does not expose the underlying stream. <see cref="System.IO.MemoryStream.GetBuffer"/>
throws <see cref="System.UnauthorizedAccessException"/>.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.MemoryStream4">
		<summary>
			<para>Initializes a new non-resizable instance of the <see cref="System.IO.MemoryStream"/> class based on the specified region
   (index) of a byte array.</para>
		</summary>
		<param name="buffer">The array of unsigned bytes from which to create this stream.</param>
		<param name="index">The index into <paramref name="buffer"/> at which the stream begins.</param>
		<param name="count">The length of the stream in bytes.</param>
		<exception cref="System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
		<exception cref="System.ArgumentException">The sum of <paramref name="index"/> and <paramref name="count"/> is greater than the length of <paramref name="buffer"/>.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>The <see cref="System.IO.MemoryStream.CanRead"/>, <see cref="System.IO.MemoryStream.CanSeek"/>, and <see cref="System.IO.MemoryStream.CanWrite"/> properties
   are all set to <see langword="true"/> , but the capacity cannot be changed.
<see cref="System.IO.MemoryStream.Capacity"/> 
is set to <paramref name="count"/>
.</para>
			<para>The length of the stream cannot be set to a value greater than
   the initial length of the specified byte array; however, the stream can be
   truncated (see <see cref="System.IO.MemoryStream.SetLength"/>).</para>
			<para>This constructor does not expose the underlying stream. <see cref="System.IO.MemoryStream.GetBuffer"/>
throws <see cref="System.UnauthorizedAccessException"/>. However, you can
write to the stream.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.MemoryStream5">
		<summary>
			<para>Initializes a new non-resizable instance of the <see cref="System.IO.MemoryStream"/> class
   based on the specified region of a byte array, with the <see cref="System.IO.MemoryStream.CanWrite"/>
   property set as specified.</para>
		</summary>
		<param name="buffer">The array of unsigned bytes from which to create this stream.</param>
		<param name="index">The index in <paramref name="buffer"/> at which the stream begins.</param>
		<param name="count">The length of the stream in bytes.</param>
		<param name="writable">The setting of the <see cref="System.IO.MemoryStream.CanWrite"/> property, which determines whether the stream supports writing.</param>
		<exception cref="System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> are negative.</exception>
		<exception cref="System.ArgumentException">The sum of <paramref name="index"/> and <paramref name="count"/> is greater than the length of <paramref name="buffer"/>.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>The <see cref="System.IO.MemoryStream.CanRead"/> and <see cref="System.IO.MemoryStream.CanSeek"/> properties are both
   set to <see langword="true"/>. <see cref="System.IO.MemoryStream.Capacity"/> is set to
<paramref name="count"/>.</para>
			<para>The length of the stream cannot be set to a value greater than
   the initial length of the specified byte array; however, the stream can be
   truncated (see <see cref="System.IO.MemoryStream.SetLength"/>).</para>
			<para>This constructor does not expose the underlying stream. <see cref="System.IO.MemoryStream.GetBuffer"/> throws <see cref="System.UnauthorizedAccessException"/>. However, you can write to
the stream if <paramref name="writable"/> is <see langword="true"/> .</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.MemoryStream6">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.MemoryStream"/> class
   based on the specified region of a byte array, with the <see cref="System.IO.MemoryStream.CanWrite"/> property set
   as specified, and the ability to call <see cref="System.IO.MemoryStream.GetBuffer"/> set as specified.</para>
		</summary>
		<param name="buffer">The array of unsigned bytes from which to create this stream.</param>
		<param name="index">The index into <paramref name="buffer"/> at which the stream begins.</param>
		<param name="count">The length of the stream in bytes.</param>
		<param name="writable">The setting of the <see cref="System.IO.MemoryStream.CanWrite"/> property, which determines whether the stream supports writing.</param>
		<param name="publiclyVisible"><see langword="true"/> to enable <see cref="System.IO.MemoryStream.GetBuffer"/>, which returns the unsigned byte array from which the stream was created; otherwise, <see langword="false"/>.</param>
		<exception cref="System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative.</exception>
		<exception cref="System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>The <see cref="System.IO.MemoryStream.CanRead"/> and <see cref="System.IO.MemoryStream.CanSeek"/> properties are both
   set to <see langword="true"/>. <see cref="System.IO.MemoryStream.Capacity"/> is set to
<paramref name="count"/>.</para>
			<para>The new stream instance can be written to, but
   the <see cref="System.IO.MemoryStream.Capacity"/>
   of the underlying byte array cannot be
   changed. The length of the stream cannot be set to a value greater than
   the initial length of the specified byte array; however, the stream can be
   truncated (see <see cref="System.IO.MemoryStream.SetLength"/>).</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.CanRead">
		<summary>
			<para>Gets a value indicating whether the current stream supports reading.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the stream
   is open.</para>
		</value>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>If a class derived from <see cref="System.IO.Stream"/> does not support reading, calls to the <see cref="System.IO.MemoryStream.Read"/> and
<see cref="System.IO.MemoryStream.ReadByte"/> methods throw a <see cref="System.NotSupportedException"/>.</para>
			<para>If the stream is closed, this property returns <see langword="false"/> .</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.CanSeek">
		<summary>
			<para>Gets a value indicating whether the current stream
      supports seeking.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the stream
   is open.</para>
		</value>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>If a class derived from <see cref="System.IO.Stream"/> does not support seeking, calls to <see cref="System.IO.MemoryStream.Length"/>,
<see cref="System.IO.MemoryStream.SetLength"/>, <see cref="System.IO.MemoryStream.Position"/>, and <see cref="System.IO.MemoryStream.Seek"/> 
throw a <see cref="System.NotSupportedException"/> .</para>
			<para>If the stream is closed, this property returns <see langword="false"/>.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.CanWrite">
		<summary>
			<para>Gets a value indicating whether the current stream
      supports writing.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the stream supports writing;
   otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>If a class derived from <see cref="System.IO.Stream"/> does not support writing, a call to <see cref="System.IO.Stream.SetLength"/>,
<see cref="System.IO.Stream.Write"/>, or <see cref="System.IO.Stream.WriteByte"/> throws a <see cref="System.NotSupportedException"/> 
.</para>
			<para>If the stream is closed, this property returns <see langword="false"/> .</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.Flush">
		<summary>
			<para>Overrides <see cref="System.IO.Stream.Flush" qualify="true"/>
so that no action is performed.</para>
		</summary>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>This method overrides <see cref="System.IO.Stream.Flush"/>
.</para>
			<para>Since any data written to a <see cref="System.IO.MemoryStream"/>
is written into RAM, this
method is redundant.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.GetBuffer">
		<summary>
			<para>Returns the
      array of unsigned bytes from which this stream was created.</para>
		</summary>
		<returns>
			<para>The byte array from which this stream was created, or the
      underlying array if a byte array was not provided to the <see cref="System.IO.MemoryStream"/>
      constructor during
      construction of the current instance.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The <see langword="MemoryStream"/> instance was not created with a publicly visible buffer.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>To create a <see langword="MemoryStream"/> instance with a publicly visible
   buffer, use <see topic="frlrfSystemIOMemoryStreamClassctorTopic1" title="MemoryStream()"/>, <see topic="frlrfSystemIOMemoryStreamClassctorTopic7" title="MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)"/>, or
<see topic="frlrfSystemIOMemoryStreamClassctorTopic3" title="MemoryStream(Int32)"/> . If the current stream is
   resizable, two calls to this method do not return the same array if the
   underlying byte array is resized between calls. For additional information, see
<see cref="System.IO.MemoryStream.Capacity"/> 
.</para>
			<note type="note">
   This method works when the memory stream
   
   is closed.
</note>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.Capacity">
		<summary>
			<para>Gets or sets the number of bytes allocated for this
      stream.</para>
		</summary>
		<value>
			<para>The length of the usable portion of the buffer for the stream.</para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException">A capacity is set that is negative or less than the current length of the stream.</exception>
		<exception cref="System.ObjectDisposedException">The current stream is closed.</exception>
		<exception cref="System.NotSupportedException"><see langword="set"/> is invoked on a stream whose capacity cannot be modified.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para><see langword="Capacity"/> is the buffer length for
   system-provided byte arrays. <see langword="Capacity"/> cannot be set to a
   value less than the current length of the stream.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.Length">
		<summary>
			<para> Gets the length of the stream in bytes.</para>
		</summary>
		<value>
			<para>The length of the stream in bytes.</para>
		</value>
		<exception cref="System.ObjectDisposedException">The stream is closed.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.Position">
		<summary>
			<para>Gets or sets the current position within the stream.</para>
		</summary>
		<value>
			<para>The current position within the stream.</para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException">The position is set to a negative value or a value greater than <see cref="System.Int32.MaxValue"/>.</exception>
		<exception cref="System.ObjectDisposedException">The stream is closed.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.ReadByte">
		<summary>
			<para> Reads a byte from the current stream.
      </para>
		</summary>
		<returns>
			<para>The byte cast to a <see cref="System.Int32"/>
, or -1 if the end of the stream has been
reached.</para>
		</returns>
		<exception cref="System.ObjectDisposedException">The current stream instance is closed.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>This method overrides <see cref="System.IO.Stream.ReadByte"/>
.</para>
			<para>If
   the read operation is successful, the current position within the stream is
   advanced by one byte. If an exception occurs, the current position within the
   stream is unchanged.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.Seek">
		<summary>
			<para> Sets the position within the current stream to
      the specified value.</para>
		</summary>
		<param name="offset">The new position within the stream. This is relative to the <paramref name="loc "/> parameter, and can be positive or negative.</param>
		<param name="loc">A value of type <see cref="System.IO.SeekOrigin"/> , which acts as the seek reference point.</param>
		<returns>
			<para>The new position within the stream, calculated by
      combining the initial reference point and the offset.</para>
		</returns>
		<exception cref="System.IO.IOException">Seeking is attempted before the beginning of the stream.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="offset"/> is greater than <see cref="System.Int32.MaxValue"/>.</exception>
		<exception cref="System.ArgumentException">There is an invalid <see langword="SeekOrigin"/>.</exception>
		<exception cref="System.ObjectDisposedException">The current stream instance is closed.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>This method overrides <see cref="System.IO.Stream.Seek"/>
.</para>
			<para> Seeking to any location beyond the length
   of the stream is supported.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.SetLength">
		<summary>
			<para>Sets the length of the current stream to the specified value.</para>
		</summary>
		<param name="value">The value at which to set the length.</param>
		<exception cref="System.NotSupportedException"><para>The current stream is not resizable and <paramref name="value"/> is larger than the current capacity.</para>
			<para>-or-</para>
			<para>The current stream does not support writing.</para></exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="value"/> is negative or is greater than the maximum length of the <see cref="System.IO.MemoryStream"/>, where the maximum length is(<see cref="System.Int32.MaxValue"/> - origin), and origin is the index into the underlying buffer at which the stream starts.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>This method overrides <see cref="System.IO.Stream.SetLength"/>
.</para>
			<para>If the specified value is less than the current length
   of the stream, the stream is truncated. If after the truncation the current
   position within the stream is past the end of the stream, the <see cref="System.IO.MemoryStream.ReadByte"/>
   method returns -1, the <see cref="System.IO.MemoryStream.Read"/> method reads zero bytes into the
   provided byte array, and <see cref="System.IO.MemoryStream.Write"/> and <see cref="System.IO.MemoryStream.WriteByte"/>
   
   methods append specified bytes at the end
   of the stream, increasing its length. If the specified value is
   larger than the current capacity and the stream is resizable, the capacity is
   increased, and the current position within the stream is unchanged. If the
   length is increased, the contents of the stream between the old and the new
   length are initialized to zeros.</para>
			<note type="note">
   A <see cref="System.IO.MemoryStream"/> instance must support writing for
   this method to work. Use the <see cref="System.IO.MemoryStream.CanWrite"/> property to
   determine whether the current instance supports writing. For additional
   information, see <see cref="System.IO.Stream.CanWrite"/>.
</note>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.ToArray">
		<summary>
			<para>Writes the entire stream contents to a byte array,
      regardless of the <see cref="System.IO.MemoryStream.Position"/> property.</para>
		</summary>
		<returns>
			<para> A new byte array.
      </para>
		</returns>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>This method returns a copy of the contents of
      the <see cref="System.IO.MemoryStream"/> as a byte array. If the
      current instance was constructed on a provided byte array, a copy of the section
      of the array to which this instance has access is returned. See the <see topic="frlrfSystemIOMemoryStreamClassctorTopic5" title="MemoryStream(Byte[], Int32, Int32)"/> constructor for details.</para>
			<note type="note">
      This method works when the <see cref="System.IO.MemoryStream"/> is closed.
      
   </note>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.Write">
		<summary>
			<para>Writes
      a block of bytes to the current stream using data read from buffer.</para>
		</summary>
		<param name="buffer">The buffer to write data from.</param>
		<param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing from.</param>
		<param name="count">The maximum number of bytes to write.</param>
		<exception cref="System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/> .</exception>
		<exception cref="System.NotSupportedException"><para>The stream does not support writing. For additional information see <see cref="System.IO.Stream.CanWrite"/> .</para>
			<para>-or-</para>
			<para> The current position is closer than <paramref name="count "/>bytes to the end of the stream, and the capacity cannot be modified.</para></exception>
		<exception cref="System.ArgumentException"><paramref name="offset"/> subtracted from the buffer length is less than <paramref name="count"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> are negative.</exception>
		<exception cref="System.IO.IOException">An I/O error occurs.</exception>
		<exception cref="System.ObjectDisposedException">The current stream instance is closed.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>This method overrides <see cref="System.IO.Stream.Write"/>
.</para>
			<para>The <paramref name="offset"/>
parameter gives the offset of the first byte in <paramref name="buffer"/> to write from, and the <paramref name="count"/>
parameter gives the number of bytes to write. If the write operation is
successful, the current position within the stream is advanced by the number of
bytes written. If an exception occurs, the current position within the stream
is unchanged.</para>
			<para>Except for a <see langword="MemoryStream"/> constructed
with a byte[] parameter, write operations at the end of a
<see langword="MemoryStream"/> expand the <see langword="MemoryStream"/>
.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.WriteByte">
		<summary>
			<para>Writes a byte to the current stream at the current position.</para>
		</summary>
		<param name="value">The byte to write.</param>
		<exception cref="System.NotSupportedException"><para>The stream does not support writing. For additional information see <see cref="System.IO.Stream.CanWrite"/> .</para>
			<para>-or-</para>
			<para> The current position is at the end of the stream, and the capacity cannot be modified.</para></exception>
		<exception cref="System.ObjectDisposedException">The current stream is closed.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>This method overrides <see cref="System.IO.Stream.WriteByte"/>.</para>
			<para>Except for a <see langword="MemoryStream"/> constructed
with a byte[] parameter, write operations at the end of a
<see langword="MemoryStream"/> expand the <see langword="MemoryStream"/>.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.WriteTo">
		<summary>
			<para>Writes the entire contents of this memory stream to another stream.</para>
		</summary>
		<param name="stream">The stream to write this memory stream to.</param>
		<exception cref="System.ArgumentNullException"><paramref name="stream"/> is <see langword="null"/> .</exception>
		<exception cref="System.ObjectDisposedException">The current or target stream is closed.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>When the current stream is open, this method is
      equivalent to calling <see cref="System.IO.Stream.Write" qualify="true"/>
      on the underlying buffer of this stream.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="MemoryStream.Read">
		<summary>
			<para>Reads a block of bytes from the current stream and
      writes the data to <paramref name="buffer"/>
      .</para>
		</summary>
		<param name="buffer">When this method returns, contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the characters read from the current stream.</param>
		<param name="offset">The byte offset in <paramref name="buffer"/> at which to begin reading.</param>
		<param name="count">The maximum number of bytes to read.</param>
		<returns>
			<para>The total number of bytes written into the
      buffer. This can be less than the number of bytes requested if that number of bytes
      are not currently available, or zero if the end of the stream is
      reached before any bytes are read.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="buffer "/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="offset "/>or <paramref name="count"/> is negative.</exception>
		<exception cref="System.ArgumentException"><paramref name="offset "/>subtracted from the buffer length is less than <paramref name="count"/>.</exception>
		<exception cref="System.ObjectDisposedException">The current stream instance is closed.</exception>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see
   <see topic="cpconwritingtexttofile"/>. For an
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>This method overrides <see cref="System.IO.Stream.Read"/>
.</para>
			<para>The <paramref name="offset"/> parameter gives the offset of the
first byte in <paramref name="buffer"/> to which data
from the current stream is written. The <paramref name="count"/>
parameter gives the maximum number of bytes to read from the current stream.
The returned value is the actual number of bytes read, or zero if the end of
the stream is reached.</para>
			<para> If the read operation is successful, the current position within the
   stream advances by the number of bytes read. If an exception occurs, the current
   position within the stream remains unchanged.</para>
			<para>The <see langword="Read"/> method will return zero
only if the end of the stream is reached. In all other cases,
<see langword="Read"/> always reads at least one byte from the stream before
returning. By definition, if no data is available from the stream upon a call to
<see langword="Read"/>, the <see langword="Read"/> method returns zero (the end of the stream is 
reached automatically). An implementation is free to return fewer bytes than
requested even if the end of the
stream has not been reached.</para>
			<para>Use <see cref="System.IO.BinaryReader"/>
for reading primitive data types.</para>
			<note type="caution">
   If
   the byte array specified in the <paramref name="buffer"/> parameter is the underlying buffer returned by
   the <see cref="System.IO.MemoryStream.GetBuffer"/>
   method, the array
   contents are overwritten, and no exception is thrown.
</note>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
</docs>
