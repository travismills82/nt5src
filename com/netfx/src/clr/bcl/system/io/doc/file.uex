<docs>
	<doc for="File.InternalCopy">
		<summary>
			<para>
       Copies a source file to a destination file, allowing a destination file of
       the same name as the source file to be overwritten.
    </para>
		</summary>
		<param name="sourceFileName">
    The name of the source file.
 </param>
		<param name=" destFileName">
    The name of the destination file.
 </param>
		<param name=" overwrite">
			<see langword="true"/> if the destination file is to be overwritten, <see langword="false"/> otherwise.
 </param>
		<returns>
			<para>
       A string representing the destination file name.
    </para>
		</returns>
		<exception cref="System.ArgumentException">
			<paramref name="sourceFileName "/>or <paramref name="destFileName "/>is an empty string ("").
 </exception>
		<exception cref="System.ArgumentNullException">
			<paramref name="sourceFileName "/>or <paramref name="destFileName "/>is <see langword="null"/>.
 </exception>
		<exception cref="System.Security.SecurityException">
    The caller does not have the required permission.
 </exception>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess.Read">
    Read permission for the source file.
 </permission>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess.Write">
    Write permission for the destination file.
 </permission>
	</doc>
	<doc for="File.OpenText">
		<summary>
			<para> Opens an existing UTF-8 encoded text file
      for reading.</para>
		</summary>
		<param name="path">The file to be opened for reading.</param>
		<returns>
			<para>A <see cref="System.IO.StreamReader"/> on the specified path.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>This method is equivalent to <see topic="frlrfSystemIOStreamReaderClassctorTopic2" title="StreamReader(String)"/>.</para>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example opens a text file for reading. </para>
			<codelink SampleID="file opentext" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="File.CreateText">
		<summary>
			<para> Creates or opens a file for writing UTF-8 encoded text.</para>
		</summary>
		<param name="path">The file to be opened for writing.</param>
		<returns>
			<para>A <see cref="System.IO.StreamWriter"/> that writes to the specified file
   using UTF-8 encoding.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>This method is equivalent to <see topic="frlrfSystemIOStreamWriterClassctorTopic4" title="StreamWriter(String, Boolean)"/>
with the <paramref name="append"/> parameter set to <see langword="false"/>. If the file specified by <paramref name="path"/> does not exist, it is created.
If the file does exist, its contents are overwritten. Additional threads are
permitted to read the file while it is open.</para>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example creates a file for text
      writing and reading. </para>
			<codelink SampleID="File CreateText" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="File.AppendText">
		<summary>
			<para>Creates a <see cref="System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file.</para>
		</summary>
		<param name="path">The path to the file to append to.</param>
		<returns>
			<para>A <see langword="StreamWriter"/> that
   appends UTF-8 encoded text to an existing file.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>This method is equivalent to <see topic="frlrfSystemIOStreamWriterClassctorTopic4" title="StreamWriter(String, Boolean)"/>. If the
   file specified by <paramref name="path"/> does not exist, it is
   created. If the file does exist, write operations to the <see cref="System.IO.StreamWriter"/> append
   text to the file. Additional threads are permitted to read the file while it is
   open.</para>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute
path information. Relative path information is interpreted as relative to the
current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for appending to the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Append" qualify="true"/></permission>
		<example>
			<para> The following example appends text to a file.</para>
			<codelink SampleID="File_AppendText" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.StreamWriter"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="File.Copy">
		<overload>
			<para>Copies an existing file to a new file.</para>
		</overload>
		<summary>
			<para>Copies an existing file to a new file. Overwriting a file of the same
      name is not allowed.</para>
		</summary>
		<param name="sourceFileName">The file to copy.</param>
		<param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><para><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</para>
			<para>-or-</para>
			<para><paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="sourceFileName"/> was not found.</exception>
		<exception cref="System.IO.IOException"><para><paramref name="destFileName"/> exists.</para>
			<para>-or-</para>
			<para>An I/O error has occurred.</para></exception>
		<exception cref="System.NotSupportedException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format.</exception>
		<remarks>
			<para>This method is equivalent to <see topic="frlrfSystemIOFileClassCopyTopic2" title="Copy(String, String, Boolean)"/>
with the <paramref name="overwrite"/> parameter set to <see langword="false"/>.</para>
			<para>The <paramref name="sourceFileName "/>and <paramref name="destFileName"/> arguments are permitted to specify
relative or absolute path information. Relative path information is interpreted
as relative to the current working directory. To obtain the current working
directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from <paramref name="sourceFileName"/> and writing to <paramref name="destFileName"/>. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example copies a file to the specified
      path, not allowing the overwriting of a target file of the same name. </para>
			<codelink SampleID="File Copy1" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="File.Create">
		<overload>
			<para>Creates a file in the specified path.</para>
		</overload>
		<summary>
			<para>Creates a file in the specified path.</para>
		</summary>
		<param name="path">The path and name of the file to create.</param>
		<returns>
			<para>A <see cref="System.IO.FileStream"/> that provides read/write
   access to the specified file.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException"><para>The caller does not have the required permission.</para>
			<para>-or-</para>
			<para><paramref name="path"/> specified a file that is read-only.</para></exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.IOException">An I/O error occurred while creating the file.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>This method is equivalent to <see topic="frlrfSystemIOFileClassCreateTopic2 " title="Create(String, Int32)"/> using the 
   default buffer
   size.</para>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>If the specified file does not exist, it is
   created; if it does exist and it is not read-only,
   the contents are overwritten. </para>
			<para>By default, full read/write access to new files is
   granted to all users. The file is opened with read/write access and must be closed before it can be
   opened by another application.</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example creates a file in the specified
      path, writes some information to the file, and reads from the file. </para>
			<codelink SampleID="File Create1" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="File.Create1">
		<summary>
			<para> Creates or overwrites the specified
      file.</para>
		</summary>
		<param name="path">The name of the file.</param>
		<param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
		<returns>
			<para>A new file with the specified buffer size.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException"><para>The caller does not have the required permission.</para>
			<para>-or-</para>
			<para><paramref name="path"/> specified a file that is read-only.</para></exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.IOException">An I/O error occurred while creating the file.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>This method is equivalent to <see topic="frlrfSystemIOFileStreamClassctorTopic8" title="FileStream(String, FileMode.Create, FileAccess.ReadWrite, FileShare.None, Int32)"/>. If the specified file does not exist, it is
created; if it does exist and it is not read-only, the contents are overwritten. </para>
			<para>By default, full read/write access to new files is
   granted to all users. The file is opened with read/write access and must be closed before it can be
   opened by another application.</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example creates a file with the specified buffer size. </para>
			<codelink SampleID="File Create2" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="File.Delete">
		<summary>
			<para> Deletes the specified file. An
      exception is not thrown if the specified file does not exist.</para>
		</summary>
		<param name="path">The name of the file to be deleted.</param>
		<exception cref="System.UnauthorizedAccessException"><para>The caller does not have the required permission.</para>
			<para>-or-</para>
			<para><paramref name="path"/> is a directory.</para>
			<para>-or-</para>
			<para><paramref name="path"/> specified a read-only file.</para></exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.IOException">The specified file is in use.</exception>
		<exception cref="System.UnauthorizedAccessException"><paramref name="path"/> is a directory.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term>See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term>Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<platnote platform="NT4"><see langword="Delete"/> does not delete a file that is open for normal I/O or a file that is memory mapped.
</platnote>
		<permission cref="System.Security.Permissions.FileIOPermission">for deleting the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example deletes a file from the specified path. </para>
			<codelink SampleID="File Delete" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.Open1">
		<summary>
			<para>Opens a <see cref="System.IO.FileStream"/> on the specified path, with the specified mode and
   access.</para>
		</summary>
		<param name="path">The file to open.</param>
		<param name="mode">A <see cref="System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
		<param name=" access">A <see cref="System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
		<returns>
			<para>An unshared <see cref="System.IO.FileStream"/> that provides access to the specified file, with
   the specified mode and access.</para>
		</returns>
		<exception cref="System.ArgumentException"><para><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</para>
			<para>-or-</para>
			<para><paramref name="access"/> specified <see langword="Read"/> and <paramref name="mode"/> specified <see langword="Create"/>, <see langword="CreateNew"/>, <see langword="Truncate"/>, or <see langword="Append"/>.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.IOException">An I/O error occurred while opening the file.</exception>
		<exception cref="System.UnauthorizedAccessException"><para><paramref name="path"/> specified a file that is read-only and <paramref name="access"/> is not <see langword="Read"/> .</para><para>-or-</para><para><paramref name="path"/> specified a directory.</para>
			<para>-or-</para>
			<para>The caller does not have the required permission.</para></exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="mode"/> or <paramref name="access"/> specified an invalid value.</exception>
		<exception cref="System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>This method is equivalent to
   <see topic="frlrfSystemIOFileStreamClassctorTopic6" title="FileStream(String, FileMode, FileAccess, FileShare.None)"/>
   .</para>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from and writing to the specified file. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para> The following example opens a file with read-only access.</para>
			<codelink SampleID="file open2" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.Open2">
		<summary>
			<para>Opens a <see cref="System.IO.FileStream"/> on the specified path, having the specified mode with read,
   write, or read/write access and the specified sharing option.</para>
		</summary>
		<param name="path">The file to open.</param>
		<param name="mode">A <see cref="System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
		<param name="access">A <see cref="System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
		<param name=" share">A <see cref="System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
		<returns>
			<para>A <see cref="System.IO.FileStream"/> on the specified path, having the specified mode with read,
   write, or read/write access and the specified sharing option.</para>
		</returns>
		<exception cref="System.ArgumentException"><para><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</para><para>-or-</para><para><paramref name="access"/> specified <see langword="Read"/> and <paramref name="mode"/> specified <see langword="Create"/>, <see langword="CreateNew"/>, <see langword="Truncate"/>, or <see langword="Append"/>.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.IOException">An I/O error occurred while opening the file.</exception>
		<exception cref="System.UnauthorizedAccessException"><para><paramref name="path"/> specified a file that is read-only and <paramref name="access"/> is not <see langword="Read"/> .</para><para>-or-</para><para><paramref name="path"/> specified a directory.</para>
			<para>-or-</para>
			<para>The caller does not have the required permission.</para></exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="mode"/>, <paramref name="access"/>, or <paramref name="share"/> specified an invalid value.</exception>
		<exception cref="System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>
.</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from and writing to the specified file. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example opens a file with read-only access and with file sharing disallowed.</para>
			<codelink SampleID="file open3" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.GetCreationTime">
		<summary>
			<para>Returns the creation date and time of the specified file or directory.</para>
		</summary>
		<param name="path">The file or directory for which to obtain creation date and time information.</param>
		<returns>
			<para>A <see cref="System.DateTime"/> structure set to the creation date and time for the
   specified file or directory. This value is expressed in local time.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.IOException"><paramref name="path"/> was not found.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>
.</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates <see langword="GetCreationTime"/>.</para>
			<codelink SampleID="File GetCreation" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.GetCreationTimeUtc">
		<summary>
			<para>Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.</para>
		</summary>
		<param name="path">The file or directory for which to obtain creation date and time information.</param>
		<returns>
			<para>A <see cref="System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.IOException"><paramref name="path"/> was not found.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The following table lists examples of other typical or 
      related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
            topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.GetLastAccessTime">
		<summary>
			<para>Returns the date and time the specified file or directory was last accessed.</para>
		</summary>
		<param name="path">The file or directory for which to obtain access date and time information.</param>
		<returns>
			<para>A <see cref="System.DateTime"/> structure set to
   the date and time that the specified file or directory was last accessed. This value is expressed in local time.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.IOException">The specified path was not found.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>
.</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates <see langword="GetLastAccessTime"/>.</para>
			<codelink SampleID="File GetLastAccess" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.GetLastAccessTimeUtc">
		<summary>
			<para>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.</para>
		</summary>
		<param name="path">The file or directory for which to obtain access date and time information.</param>
		<returns>
			<para>A <see cref="System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.IOException">The specified path was not found.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para> The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.GetLastWriteTime">
		<summary>
			<para>Returns the date and time the specified file or directory was last written to.</para>
		</summary>
		<param name="path">The file or directory for which to obtain write date and time information.</param>
		<returns>
			<para>A <see cref="System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.IOException">The specified path was not found.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates <see langword="GetLastWriteTime"/>.</para>
			<codelink SampleID="File GetLastWrite" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.GetLastWriteTimeUtc">
		<summary>
			<para>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.</para>
		</summary>
		<param name="path">The file or directory for which to obtain write date and time information.</param>
		<returns>
			<para>A <see cref="System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in UTC time.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.IOException">The specified path was not found.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para> The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.GetAttributes">
		<summary>
			<para>Gets the <see cref="System.IO.FileAttributes"/> of the file on the path.</para>
		</summary>
		<param name="path">The path to the file.</param>
		<returns>
			<para>The <see cref="System.IO.FileAttributes"/> of the file on the path, or -1 if the path or file is not found.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates the
   <see langword="GetAttributes"/> and <see langword="SetAttributes"/> methods by
      applying the <see langword="Archive "/>and <see langword="Hidden "/>attributes to a file. </para>
			<codelink SampleID="File GetAttributes" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.SetAttributes">
		<summary>
			<para>Sets the specified <see cref="System.IO.FileAttributes"/> of the file on the specified path.</para>
		</summary>
		<param name="path">The path to the file.</param>
		<param name=" fileAttributes">The desired <see cref="System.IO.FileAttributes"/>, such as <see langword="Hidden"/>, <see langword="ReadOnly"/>, <see langword="Normal"/>, and <see langword="Archive"/> .</param>
		<exception cref="System.ArgumentException"><paramref name="path"/> is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates the
   <see langword="GetAttributes"/> and <see langword="SetAttributes"/> methods by
      applying the <see langword="Archive "/>and <see langword="Hidden "/>attributes to a file. </para>
			<codelink SampleID="file setattributes" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.OpenRead">
		<summary>
			<para> Opens an
      existing file for reading.</para>
		</summary>
		<param name="path">The file to be opened for reading.</param>
		<returns>
			<para> A read-only <see cref="System.IO.FileStream"/> on the specified path.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.UnauthorizedAccessException"><para><paramref name="path"/> specified a directory.</para>
			<para>-or-</para>
			<para>The caller does not have the required permission.</para></exception>
		<exception cref="System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para> This method is equivalent to
   <see topic="frlrfSystemIOFileStreamClassctorTopic6" title="FileStream(String, FileMode.Open, FileAccess.Read, FileShare.Read)"/>.</para>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example opens a file for reading. </para>
			<codelink SampleID="file openread" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="File.OpenWrite">
		<summary>
			<para>Opens an existing file for writing.</para>
		</summary>
		<param name="path">The file to be opened for writing.</param>
		<returns>
			<para> A read/write, unshared <see cref="System.IO.FileStream"/> object on the
   specified path.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException"><para>The caller does not have the required permission.</para>
			<para>-or-</para>
			<para><paramref name="path"/> specified a read-only file or directory.</para></exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para> This method is equivalent to
   <see topic="frlrfSystemIOFileStreamClassctorTopic6" title="FileStream(String, FileMode.OpenOrCreate, FileAccess.Write, FileShare.None)"/> .</para>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>For an example of using this method, see the Example section below. The 
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this 
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example opens a file for reading and writing.</para>
			<codelink SampleID="file openwrite" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="File.Exists">
		<summary>
			<para> Determines whether the specified file exists.</para>
		</summary>
		<param name="path">The file to check.</param>
		<returns>
			<para><see langword="true"/> if the caller has the required
   permissions and <paramref name="path"/> contains the name of an existing file; otherwise,
<see langword="false"/>. This method also returns <see langword="false"/> if 
<paramref name="path"/> is <see langword="null"/> or a zero-length string. If the 
   caller does not have sufficient permissions to read the specified file, no
   exception is thrown and the method returns <see langword="false"/> regardless of
   the existence of <paramref name="path"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>
.</para>
			<para>If <paramref name="path"/> describes a directory,
this method returns <see langword="false"/>.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size
      of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description>
						<para><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></para></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description>
						<para><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></para></description>
				</item>
				<item>
					<term> Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example uses the <see langword="Exists"/>
method to ensure that a file is not overwritten. </para>
			<codelink SampleID="File Exists" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.Open">
		<overload>
			<para>Opens a <see cref="System.IO.FileStream"/> on the specified path.</para>
		</overload>
		<summary>
			<para>Opens a <see cref="System.IO.FileStream"/> on the specified path with read/write access.</para>
		</summary>
		<param name="path">The file to open.</param>
		<param name="mode">A <see cref="System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
		<returns>
			<para>A <see cref="System.IO.FileStream"/> opened in the specified mode and path, with
   read/write access and not shared.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.IOException">An I/O error occurred while opening the file.</exception>
		<exception cref="System.UnauthorizedAccessException"><para><paramref name="path"/> specified a file that is read-only.</para>
			<para>-or-</para>
			<para>This operation is not supported on the current platform. </para>
			<para>-or-</para>
			<para><paramref name="path"/> specified a directory.</para>
			<para>-or-</para>
			<para>The caller does not have the required permission.</para></exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="mode"/> specified an invalid value.</exception>
		<exception cref="System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>This method is equivalent to <see topic="frlrfSystemIOFileStreamClassctorTopic6" title="FileStream(String, FileMode, FileAccess.ReadWrite, FileShare.None)"/>. </para>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from and writing to the specified file. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example opens a file. If the file does not exist, it is not created. </para>
			<codelink SampleID="file open1" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.Move">
		<summary>
			<para> Moves a specified file to a new
      location, providing the option to specify a new file name.</para>
		</summary>
		<param name="sourceFileName">The name of the file to move.</param>
		<param name="destFileName">The new path for the file.</param>
		<exception cref="System.IO.IOException">The destination file already exists.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="sourceFileName "/>or <paramref name="destFileName "/>is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><paramref name="sourceFileName "/>or <paramref name="destFileName "/>is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="System.IO.Path.InvalidPathChars"/> . </exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="sourceFileName "/> was not found.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.NotSupportedException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format.</exception>
		<remarks>
			<para> This method works across disk volumes, and it does not throw an exception if the source and destination are the same.</para>
			<para>The <paramref name="sourceFileName "/>and <paramref name="destFileName"/> arguments are permitted to specify
   relative or absolute path information. Relative path information is interpreted
   as relative to the current working directory. To obtain the current working
   directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from <paramref name="sourceFileName"/> and writing to <paramref name="destFileName"/>. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example moves a file.</para>
			<codelink SampleID="File Move" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<keyword term="renaming files"/>
	</doc>
	<doc for="File">
		<summary>
			<para>Provides static methods for the creation, copying,
      deletion, moving, and opening of files, and aids in the creation of <see cref="System.IO.FileStream"/> objects.</para>
		</summary>
		<remarks>
			<para>Use the <see cref="System.IO.File"/> class for typical
   operations such as copying, moving, renaming, creating, opening, deleting, and
   appending to files. You can also use the <see cref="System.IO.File"/> class to get and set file attributes or <see cref="System.DateTime"/>
   
   information related to the creation, access, and
   writing of a file.</para>
			<para>Many of the <see cref="System.IO.File"/>
methods return other I/O types when you create or open files. You can use these
other types to futher manipulate a file. For more information, see specific
<see cref="System.IO.File"/> members such as 
<see cref="System.IO.File.OpenText"/>, <see cref="System.IO.File.CreateText"/>, or <see cref="System.IO.File.Create"/>.</para>
			<para>Because all <see cref="System.IO.File"/>
methods are static, it might be more efficient to use a <see cref="System.IO.File"/> method rather than a corresponding
<see cref="System.IO.FileInfo"/> instance 
method if you want to perform only one action. All <see cref="System.IO.File"/> methods require the path to the
file that you are manipulating.</para>
			<para> The static methods of the <see cref="System.IO.File"/> class perform security
checks on all methods. If you are going to reuse an object several times,
consider using the corresponding instance method of <see cref="System.IO.FileInfo"/> instead, because the security check
will not always be necessary.</para>
			<para>By default, full read/write access to new files is granted to all users.</para>
			<para>The following table describes the enumerations that are used to customize the
   behavior of various <see cref="System.IO.File"/> methods.</para>
			<list type="table">
				<listheader>
					<term>Enumeration</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see cref="System.IO.FileAccess"/></term>
					<description>Specifies read and write access to a
      file.</description>
				</item>
				<item>
					<term><see cref="System.IO.FileShare"/></term>
					<description>Specifies the level of access permitted for a file that is already in
   use.</description>
				</item>
				<item>
					<term><see cref="System.IO.FileMode"/></term>
					<description>Specifies whether the contents of an existing file are preserved or
   overwritten, and whether requests to create an existing file cause an
   exception. </description>
				</item>
			</list>
			<note type="note">
   In members that accept a path as an
   input string, that path must be well-formed or an exception is raised. For
   example, if a path is fully qualified but begins with a space, the path is not
   trimmed in methods of the class. Therefore, the path is malformed and
   an exception is raised. Similarly, a path or a combination of paths cannot be
   fully qualified twice. For example, "c:\temp c:\windows" also raises
   an exception in most cases. Ensure that your paths are well-formed when
   using methods that accept a path string.
</note>
			<para> In members that accept a path, the path can refer to a file or
   just a directory. The specified path can also refer to a relative path or
   a Universal Naming Convention (UNC) path for a server and share name. For example,
   all the following are acceptable paths:</para>
			<list type="bullet"><item>
					<term>
      
      "c:\\MyDir\\MyFile.txt" in C#, or
      "c:\MyDir\MyFile.txt" in Visual Basic.</term>
				</item>
				<item>
					<term>
      
      "c:\\MyDir" in C#, or "c:\MyDir" in Visual Basic.</term>
				</item>
				<item>
					<term>
      
      "MyDir\\MySubdir" in C#, or "MyDir\MySubDir" in Visual
      Basic.</term>
				</item>
				<item>
					<term>
      
      "\\\\MyServer\\MyShare"
      in C#, or "\\MyServer\MyShare" in Visual Basic.</term>
				</item>
			</list>
			<para>For an example of using this class, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Copy a file.</term>
					<description>
						<para><see cref="System.IO.File.Copy" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.CopyTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Retrieve a file extension.</term>
					<description><see cref="System.IO.Path.GetExtension" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath" qualify="true"/></description>
				</item>
				<item>
					<term> Retrieve the file name and extension from a path.</term>
					<description><see cref="System.IO.Path.GetFileName" qualify="true"/></description>
				</item>
				<item>
					<term> Change the extension of a file.</term>
					<description><see cref="System.IO.Path.ChangeExtension" qualify="true"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates some of the main members of the
   <see langword="File "/>class.</para>
			<codelink SampleID="File Class Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="File.SetCreationTime">
		<summary>
			<para>Sets the date and time the file was created.</para>
		</summary>
		<param name="path">The file for which to set the creation date and time information.</param>
		<param name=" creationTime">A <see cref="System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
		<exception cref="System.IO.FileNotFoundException">The specified path was not found.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.IOException">An I/O error occurred while performing the operation.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="creationTime"/> specifies a value outside the range of dates, times, or both permitted for this operation.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para> The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.SetCreationTimeUtc">
		<summary>
			<para>Sets the date and time, in coordinated universal time (UTC), that the file was created.</para>
		</summary>
		<param name="path">The file for which to set the creation date and time information.</param>
		<param name="creationTimeUtc">A <see cref="System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
		<exception cref="System.IO.FileNotFoundException">The specified path was not found.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.IOException">An I/O error occurred while performing the operation.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="creationTime"/> specifies a value outside the range of dates, times, or both permitted for this operation.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para> The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.SetLastAccessTime">
		<summary>
			<para>Sets the date and time the specified file was last accessed.</para>
		</summary>
		<param name="path">The file for which to set the access date and time information.</param>
		<param name="lastAccessTime">A <see cref="System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.FileNotFoundException">The specified path was not found.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>
.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example checks the file system for the
      specified file, creating it if necessary, and then sets and gets the last
      access time.</para>
			<codelink SampleID="file setlastaccess" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.SetLastAccessTimeUtc">
		<summary>
			<para>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</para>
		</summary>
		<param name="path">The file for which to set the access date and time information.</param>
		<param name="lastAccessTimeUtc">A <see cref="System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.FileNotFoundException">The specified path was not found.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para> The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.SetLastWriteTime">
		<summary>
			<para>Sets the date and time that the specified file was last written to.</para>
		</summary>
		<param name="path">The file for which to set the date and time information.</param>
		<param name="lastWriteTime">A <see cref="System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.FileNotFoundException">The specified path was not found.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example checks the file system for the
      specified file, creating the file if necessary, and then sets and gets the last
      write time of the file.</para>
			<codelink SampleID="file setlastwrite" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.SetLastWriteTimeUtc">
		<summary>
			<para>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</para>
		</summary>
		<param name="path">The file for which to set the date and time information.</param>
		<param name="lastWriteTimeUtc">A <see cref="System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.FileNotFoundException">The specified path was not found.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para> The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="File.Copy1">
		<summary>
			<para>Copies an existing file to a new file. Overwriting a file
      of the same name is allowed.</para>
		</summary>
		<param name="sourceFileName">The file to copy.</param>
		<param name="destFileName">The name of the destination file. This cannot be a directory.</param>
		<param name=" overwrite"><see langword="true"/> if the destination file can be overwritten; otherwise, <see langword="false"/>.</param>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><para><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</para><para>-or-</para><para><paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="sourceFileName"/> was not found.</exception>
		<exception cref="System.IO.IOException"><para><paramref name="destFileName"/> is read-only, or <paramref name="destFileName"/> exists and <paramref name="overwrite"/> is <see langword="false"/> .</para><para>-or-</para><para>An I/O error has occurred.</para></exception>
		<exception cref="System.NotSupportedException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format.</exception>
		<remarks>
			<para>The <paramref name="sourceFileName "/>and <paramref name="destFileName"/> arguments are permitted to specify relative
   or absolute path information. Relative path information is interpreted as
   relative to the current working directory.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from <paramref name="sourceFileName"/> and writing to <paramref name="destFileName"/>. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para> The following example copies a file to the specified path, allowing the
      overwriting of a target file of the same name.</para>
			<codelink SampleID="File Copy2" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
</docs>
