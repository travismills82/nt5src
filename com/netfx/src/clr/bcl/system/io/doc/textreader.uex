<docs>
	<doc for="TextReader.Close">
		<summary>
			<para>Closes the <see cref="System.IO.TextReader"/> and releases any system resources associated with the
<see langword="TextReader"/> .</para>
		</summary>
		<remarks>
			<para>This implementation of <see langword="Close"/> calls the <see cref="System.IO.StringReader.Dispose"/>
method passing a <see langword="true"/> value.</para>
			<para>Flushing the stream will not flush its underlying
   encoder unless you explicitly call <see langword="Close"/>. Setting <see cref="System.IO.StreamWriter.AutoFlush"/> to <see langword="true"/> means that data
   will be flushed from the buffer to the stream, but the encoder state will not be
   flushed. This allows the encoder to keep its state (partial characters) so that
   it can encode the next block of characters correctly. This scenario
   affects UTF8 and UTF7 where certain characters can only be encoded after
   the encoder receives the adjacent character or characters.</para>
			<para>Following a call to <see langword="Close"/>, any operations on the <see cref="System.IO.TextReader"/> might throw
exceptions. This default method is empty, but derived classes can override the
method to provide the appropriate functionality.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="TextReader.IDisposable.Dispose">
		<internalonly/>
		<summary>
			<para>Releases all resources used by the <see cref="System.IO.TextReader"/> .</para>
		</summary>
		<remarks>
			<para>Calling <see cref="System.IO.TextReader.Dispose"/> allows the resources used by the <see cref="System.IO.TextReader"/> to be
   reallocated for other purposes. For more information about <see cref="System.IO.TextReader.Dispose"/>,
   see <see topic="cpconCleaningUpUnmanagedResources"/>.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="TextReader.Dispose">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.IO.TextReader"/> and optionally
   releases the managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public <see langword="Dispose"/> method and the
<see cref="System.Object.Finalize"/> method. By default, this method specifies the 
<paramref name="disposing"/> parameter as <see langword="true"/>. <see cref="System.Object.Finalize"/> 
specifies the <paramref name="disposing"/> parameter as <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.IO.TextReader"/>
references. This method invokes the <see langword="Dispose"/> method of each
referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called 
   multiple times by other objects. When overriding this method, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to 
   implement this method, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see cref="System.IDisposable.Dispose" qualify="true"/> and <see cref="System.Object.Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="TextReader.Null">
		<summary>
			<para>Provides a <see langword="TextReader "/> with no data to read from.</para>
		</summary>
		<remarks>
			<para>Reading from the <see cref="System.IO.TextReader.Null"/> text reader is similar to reading from the
   end of a stream:</para>
			<para><see cref="System.IO.TextReader.Read"/> and <see cref="System.IO.TextReader.Peek"/> methods return -1.</para>
			<para><see cref="System.IO.TextReader.ReadBlock"/> method returns
zero.</para>
			<para><see cref="System.IO.TextReader.ReadLine"/> and <see cref="System.IO.TextReader.ReadToEnd"/> methods return
<see langword="null"/>.</para>
			<para> 
   The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="TextReader.TextReader">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.TextReader"/> class.</para>
		</summary>
		<remarks>
			<para>Use this constructor for derived classes.</para>
			<para> 
   The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="TextReader.Synchronized">
		<summary>
			<para>Creates a thread-safe wrapper around the specified
   <see langword="TextReader"/> .</para>
		</summary>
		<param name="reader">The <see langword="TextReader"/> to synchronize.</param>
		<returns>
			<para> A thread-safe <see cref="System.IO.TextReader"/> .</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="reader"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>The
      current method returns a class that wraps around the specified
   <see cref="System.IO.TextReader"/> instance and restricts access to it by multiple
      threads. All reads from the returned wrapper will be thread safe.</para>
			<para> 
   The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="TextReader">
		<summary>
			<para>Represents a reader that can read a sequential series of
      characters.</para>
		</summary>
		<remarks>
			<para><see cref="System.IO.TextReader"/> is the abstract 
   base class of <see cref="System.IO.StreamReader"/> and <see cref="System.IO.StringReader"/>, which read characters from
   streams and strings, respectively. Create an instance of <see cref="System.IO.TextReader"/>
   to open a text file for reading a specified range of characters, or to
   create a reader based on an existing stream. You can also use an instance of
<see cref="System.IO.TextReader"/> to read 
   text from a custom backing store using the same
   APIs you would use for a string or a
   stream.</para>
			<para>By default, a <see cref="System.IO.TextReader"/> is not thread
safe. See <see cref="System.IO.TextReader.Synchronized" qualify="true"/> for a thread-safe
wrapper.</para>
			<para>A derived class must minimally implement the <see cref="System.IO.TextReader.Peek"/> and <see cref="System.IO.TextReader.Read"/> methods in order to make a useful instance 
of <see cref="System.IO.TextReader"/> .</para>
			<para> 
   The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="TextReader.Peek">
		<summary>
			<para>Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it
      from the input stream.</para>
		</summary>
		<returns>
			<para>The next character to be read, or -1 if no more characters are available or the stream does not support
      seeking.</para>
		</returns>
		<exception cref="System.ObjectDisposedException">The <see cref="System.IO.TextReader"/> is closed.</exception>
		<exception cref="System.IO.IOException">An I/O error occurs.</exception>
		<remarks>
			<para>The current position of the <see cref="System.IO.TextReader"/> is not changed by this operation. The returned value is -1 if no
   more characters are available. The default implementation returns -1.</para>
			<para> The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="TextReader.Read">
		<overload>
			<para>Reads data from an input stream.</para>
		</overload>
		<summary>
			<para>Reads the next character from the input stream and
      advances the character position by one character.</para>
		</summary>
		<returns>
			<para>The next character from the input stream, or -1 if no more characters are available. The default
      implementation returns -1.</para>
		</returns>
		<exception cref="System.ObjectDisposedException">The <see cref="System.IO.TextReader"/> is closed.</exception>
		<exception cref="System.IO.IOException">An I/O error occurs.</exception>
		<remarks>
			<para>The following table lists examples of other typical or
      related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="TextReader.ReadToEnd">
		<summary>
			<para>Reads all characters from the current position to the
      end of the <see langword="TextReader"/>
      and returns them as one string.</para>
		</summary>
		<returns>
			<para>A string containing all characters from the current
      position to the end of the <see langword="TextReader"/>
      .</para>
		</returns>
		<exception cref="System.IO.IOException">An I/O error occurs.</exception>
		<exception cref="System.ObjectDisposedException">The <see cref="System.IO.TextReader"/> is closed.</exception>
		<exception cref="System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
		<exception cref="System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="System.Int32.MaxValue"/></exception>
		<remarks>
			<para>If
      the current method throws an <see cref="System.OutOfMemoryException"/>, the reader's
      position in the underlying <see cref="System.IO.Stream"/> is advanced by the number of
      characters the method was able to read, but the characters already read into the
      internal <see cref="System.IO.TextReader.ReadToEnd"/> buffer are discarded. Since the
      position of the reader in the stream cannot be changed, the characters already
      read are unrecoverable, and can be accessed only by reinitializing the
   <see cref="System.IO.TextReader"/>. If the initial position within the stream is
      unknown or the stream does not support seeking, the underlying
   <see cref="System.IO.Stream"/> also needs to
      be reinitialized.</para>
			<para> To avoid such a
      situation and produce robust code you should use the
   <see cref="System.IO.TextReader.Read"/> method and store the read characters in a
      preallocated buffer.</para>
			<para>The following table lists examples of other typical or
      related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="TextReader.ReadBlock">
		<summary>
			<para>Reads a maximum of count characters from the current
      stream and writes the data to <paramref name="buffer"/>, beginning at <paramref name="index"/>.</para>
		</summary>
		<param name="buffer">When this method returns, this parameter contains the specified character array with the values between <paramref name="index"/> and (<paramref name="index"/> + <paramref name="count"/> -1) replaced by the characters read from the current source.</param>
		<param name="index">The place in <paramref name="buffer "/> at which to begin writing.</param>
		<param name="count">The maximum number of characters to read.</param>
		<returns>
			<para>The number of characters that have been read. The number
      will be less than or equal to <paramref name="count"/>,
      depending on whether all input
      characters have been read.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="buffer "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The buffer length minus <paramref name="index "/>is less than <paramref name="count"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index "/>or <paramref name="count "/> is negative.</exception>
		<exception cref="System.ObjectDisposedException">The <see cref="System.IO.TextReader"/> is closed.</exception>
		<exception cref="System.IO.IOException">An I/O error occurs.</exception>
		<remarks>
			<para> The method blocks until either <paramref name="count"/>
characters are read, or all characters have been read. This is a blocking
version of <see cref="System.IO.TextReader.Read"/>.</para>
			<para>The following table lists examples of other typical or
   related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="TextReader.ReadLine">
		<summary>
			<para>Reads a line of characters from the current stream and returns
      the data as a string.</para>
		</summary>
		<returns>
			<para>The next line from the input stream, or
   <see langword="null"/> if
      all characters have been read.</para>
		</returns>
		<exception cref="System.IO.IOException">An I/O error occurs.</exception>
		<exception cref="System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
		<exception cref="System.ObjectDisposedException">The <see cref="System.IO.TextReader"/> is closed.</exception>
		<exception cref="System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="System.Int32.MaxValue"/></exception>
		<remarks>
			<para>A line is defined as a sequence of characters followed
      by a carriage return (0x000d), a line feed (0x000a), <see cref="System.Environment.NewLine" qualify="true"/>
      ,
      or the end of stream marker. The string that is returned does not contain the
      terminating carriage return and/or line feed. The returned value is
   <see langword="null"/>
   if the end of the
   input stream has been reached.</para>
			<para>If
   the current method throws an <see cref="System.OutOfMemoryException"/>, the reader's
   position in the underlying <see cref="System.IO.Stream"/> is advanced by the number of
   characters the method was able to read, but the characters already read into the
   internal <see cref="System.IO.TextReader.ReadLine"/> buffer are discarded. Since the
   position of the reader in the stream cannot be changed, the characters already
   read are unrecoverable, and can be accessed only by reinitializing the
<see cref="System.IO.TextReader"/>. If the initial position within the stream is 
   unknown or the stream does not support seeking, the underlying
<see cref="System.IO.Stream"/> also needs to 
   be reinitialized.</para>
			<para> To avoid such a
   situation and produce robust code you should use the
<see cref="System.IO.TextReader.Read"/> method and store the read characters in a 
   preallocated buffer.</para>
			<para>The following table lists examples of other typical or
   related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="TextReader.Read1">
		<summary>
			<para>Reads a maximum of <paramref name="count "/>characters from the
   current stream and writes the data to <paramref name="buffer"/>, beginning at
<paramref name="index"/>
.</para>
		</summary>
		<param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index"/> and (<paramref name="index"/> + <paramref name="count"/> - 1) replaced by the characters read from the current source.</param>
		<param name="index">The place in <paramref name="buffer "/> at which to begin writing.</param>
		<param name="count">The maximum number of characters to read. If the end of the stream is reached before <paramref name="count "/>of characters is read into <paramref name="buffer"/>, the current method returns.</param>
		<returns>
			<para>The number of characters that have been read. The number
      will be less than or equal to <paramref name="count"/> , depending on
      whether the data is available within the stream. This method returns
      zero if called when no
      more characters are left to read.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="buffer "/>is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentException">The buffer length minus <paramref name="index "/>is less than <paramref name="count"/> .</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index "/>or <paramref name="count "/> is negative.</exception>
		<exception cref="System.ObjectDisposedException">The <see cref="System.IO.TextReader"/> is closed.</exception>
		<exception cref="System.IO.IOException">An I/O error occurs.</exception>
		<remarks>
			<para>This method returns after either <paramref name="count"/>
characters are read or the end of the file is reached. <see cref="System.IO.TextReader.ReadBlock"/>
is a blocking version of this method.</para>
			<para>The following table lists examples of other typical or
   related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
</docs>
