<docs>
	<doc for="FileShare.None">
		<summary>
			<para>
       Declines sharing of the current file. Any request to open the file (by this
       process or another process) will fail until the file is closed.
    </para>
		</summary>
	</doc>
	<doc for="FileShare.Inheritable">
		<summary>
			<para> 
      Makes the file handle inheritable by child processes. This is not directly supported by Win32.</para>
		</summary>
	</doc>
	<doc for="FileShare.Read">
		<summary>
			<para> Allows subsequent opening of the file for reading. If this flag is not specified, any request
      to open the file for reading (by this process or another process) will
      fail until the file is closed. However, if this flag is specified additional permissions
      might still be needed to access the file.
      </para>
		</summary>
	</doc>
	<doc for="FileShare.Write">
		<summary>
			<para> Allows subsequent opening of the file for writing. If this flag is not specified, any request
      to open the file for writing (by this process or another process) will
      fail until the file is closed. However, if this flag is specified additional permissions
      might still be needed to access the file.
      </para>
		</summary>
	</doc>
	<doc for="FileShare.ReadWrite">
		<summary>
			<para> Allows subsequent opening of the file for reading or writing. If this flag is not
      specified, any request to open the file for writing or reading (by this process or
      another process) will fail until the file is closed. However, if this flag is
      specified additional
      permissions might still be needed to access the file.
      </para>
		</summary>
	</doc>
	<doc for="FileShare">
		<summary>
			<para>Contains constants for controlling the kind of
      access other FileStreams can have to the same file.</para>
		</summary>
		<remarks>
			<para>For an example of creating a file and writing text to a
      file, see <see topic="cpconwritingtexttofile"/>.
      For an example of reading text from a file, see
   <see topic="cpconreadingtextfromfile"/>. For an
      example of reading from and writing to a binary file, see
   <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>A typical use of this enumeration is to define whether
      two processes can simultaneously read from the same file. For example, if a file
      is opened and <see langword="FileShare.Read "/>is specified, other users
      can open the file for reading but not for writing.</para>
			<para>A <see langword="FileShare"/> parameter is specified in some of the
   constructors for <see cref="System.IO.FileStream"/>, <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>, and in some of the
<see langword="Open"/> methods of <see cref="System.IO.File"/> and <see cref="System.IO.FileInfo"/> to control how a file is opened.</para>
		</remarks>
		<example>
			<para>The following <see langword="FileStream"/> constructor opens an existing file and
   grants read-only access to other users (<see langword="FileShare.Read"/>).</para>
			<codelink SampleID="Classic FileAccess Example" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.File.Open" qualify="true"/>
		<seealso cref="System.IO.FileInfo.Open" qualify="true"/>
		<seealso cref="System.IO.FileStream"/>
		<seealso cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
</docs>
