<docs>
	<doc for="StringReader.Close">
		<summary>
			<para>Closes the <see cref="System.IO.StringReader"/>.</para>
		</summary>
		<remarks>
			<para>For an example of creating a file and writing text to a file, see 
   <see topic="cpconwritingtexttofile"/>. For an 
      example of reading text from a file, see <see topic="cpconreadingtextfromfile"/>. For an example of reading from and writing to
      a binary file, see <see topic="cpconReadingWritingToNewlyCreatedDataFile"/>.</para>
			<para>This method
      overrides the <see cref="System.IO.Stream.Close" qualify="true"/> method.</para>
			<para>This implementation of <see langword="Close"/> calls the
<see cref="System.IO.StringReader.Dispose"/> method passing a <see langword="true"/> 
value.</para>
			<para>Flushing the stream will not flush its underlying encoder unless you
   explicitly call <see langword="Close"/>. Setting <see cref="System.IO.StreamWriter.AutoFlush"/> to
<see langword="true"/> means that data will be flushed from the buffer to the 
   stream, but the encoder state will not be flushed. This allows the encoder to
   keep its state (partial characters) so that it can encode the next block of
   characters correctly. This scenario affects UTF8 and UTF7 where certain
   characters can only be encoded after the encoder receives the adjacent character
   or characters.</para>
			<para>Following a call to <see langword="Close"/> , other
methods might throw an exception.</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StringReader.Dispose">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.IO.StringReader"/> and optionally
   releases the managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>When
      the <paramref name="disposing"/> parameter is <see langword="true"/>, this method releases all
      resources held by any managed objects that this <see cref="System.IO.StringReader"/>
      references. This method invokes the <see langword="Dispose"/>method of each referenced
      object.</para>
			<note type="inheritinfo">
				<see cref="System.IO.StringReader.Dispose"/>
   can be called multiple times by other objects. When overriding
<see cref="System.IO.StringReader.Dispose"/>, be careful not to 
   reference objects that have been previously disposed in an earlier call to
<see cref="System.IO.StringReader.Dispose"/>. 
</note>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StringReader">
		<summary>
			<para> Implements a <see cref="System.IO.TextReader"/> that reads from a string.</para>
		</summary>
		<remarks>
			<para> The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso cref="System.IO.TextReader"/>
		<seealso cref="System.IO.StringWriter"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StringReader.StringReader">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.StringReader"/> class
   that
   reads from the specified string.</para>
		</summary>
		<param name="s">The string to which the <see cref="System.IO.StringReader"/> should be initialized.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="s"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>
   The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StringReader.Peek">
		<summary>
			<para> Returns the next available character but
      does not consume it.</para>
		</summary>
		<returns>
			<para>The next character to be read, or -1 if no more characters are available or the stream does not support
      seeking.</para>
		</returns>
		<exception cref="System.ObjectDisposedException">The current reader is closed.</exception>
		<remarks>
			<para>This method
      overrides the <see cref="System.IO.TextReader.Peek" qualify="true"/> method.</para>
			<para>The current position of the
   <see langword="StringReader"/> is not changed by this operation.</para>
			<para> The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StringReader.Read">
		<overload>
			<para>Reads the next character or next set of characters from the input string.</para>
		</overload>
		<summary>
			<para>Reads the next character from the input string and advances the character position by one character.</para>
		</summary>
		<returns>
			<para>The next character from the underlying string, or -1 if no more
      characters are available.</para>
		</returns>
		<exception cref="System.ObjectDisposedException">The current reader is closed.</exception>
		<remarks>
			<para>This method
      overrides the <see cref="System.IO.TextReader.Read" qualify="true"/> method.</para>
			<para>The following table lists examples of other typical or
      related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StringReader.Read1">
		<summary>
			<para>Reads a block of characters from the input string
      and advances the character position by <paramref name="count"/>.</para>
		</summary>
		<param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index"/> and (<paramref name="index"/> + <paramref name="count"/> - 1) replaced by the characters read from the current source.</param>
		<param name="index">The starting index in the buffer.</param>
		<param name="count">The number of characters to read.</param>
		<returns>
			<para>The total number of characters read into the buffer. This can be less
      than the number of characters requested if that many characters are not currently
      available, or zero if the end of the underlying string has been reached.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="buffer "/>is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentException">The buffer length minus <paramref name="index "/>is less than <paramref name="count"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index "/>or <paramref name="count "/> is negative.</exception>
		<exception cref="System.ObjectDisposedException">The current reader is closed.</exception>
		<remarks>
			<para>This
      method overrides <see cref="System.IO.TextReader.Read" qualify="true"/>.</para>
			<para>The method will read up to <paramref name="count"/> characters from the <see cref="System.IO.StringReader"/>
into the <paramref name="buffer"/> character array
starting at position <paramref name="index"/>. Returns the actual number of characters read,
or zero if the end of the string has been reached and no characters are
read.</para>
			<para>The following table lists examples of other typical or
   related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StringReader.ReadToEnd">
		<summary>
			<para>Reads the stream as a string, either in its entirety or from the current
      position to the end of the stream.</para>
		</summary>
		<returns>
			<para> The content from the current position to the end of the underlying
      string.</para>
		</returns>
		<exception cref="System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
		<exception cref="System.ObjectDisposedException">The current reader is closed.</exception>
		<remarks>
			<para>This method
      overrides the <see cref="System.IO.TextReader.ReadToEnd" qualify="true"/> method.</para>
			<para>If
      the current method throws an <see cref="System.OutOfMemoryException"/>, the reader's
      position in the underlying string is advanced by the number of
      characters the method was able to read, and the characters already read into the
      internal <see cref="System.IO.StringReader.ReadToEnd"/> buffer are discarded. Since the
      position of the reader in the string cannot be changed, the characters already
      read are unrecoverable, and can be accessed only by reinitializing the
   <see cref="System.IO.StringReader"/>. To avoid such a situation and produce
      robust code you should use the <see cref="System.IO.StringReader.Read"/> method and
      store the read characters in a preallocated buffer.</para>
			<para>The following table lists examples of other typical or
      related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StringReader.ReadLine">
		<summary>
			<para> Reads a line from the underlying string.
      </para>
		</summary>
		<returns>
			<para> The next line from the underlying string, or
   <see langword="null "/>
   if the end of
   the underlying string is reached.
   </para>
		</returns>
		<exception cref="System.ObjectDisposedException">The current reader is closed.</exception>
		<exception cref="System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
		<remarks>
			<para>This
      method overrides the <see cref="System.IO.TextReader.ReadLine" qualify="true"/> method.</para>
			<para> A line is defined as a sequence of characters followed
      by a carriage return ("\r"), a line feed ("\n"), or a carriage return
      immediately followed by a line feed. The resulting string does not contain the
      terminating carriage return and/or line feed. The returned value is <see langword="null "/>
      if the end of the underlying string has been reached.
      </para>
			<para>If
      the current method throws an <see cref="System.OutOfMemoryException"/>, the reader's
      position in the underlying string is advanced by the number of
      characters the method was able to read, and the characters already read into the
      internal <see cref="System.IO.StringReader.ReadLine"/> buffer are discarded. Since the
      position of the reader in the string cannot be changed, the characters already
      read are unrecoverable, and can be accessed only by reinitializing the
   <see cref="System.IO.StringReader"/>. To avoid such a situation and produce
      robust code you should use the <see cref="System.IO.StringReader.Read"/> method and
      store the read characters in a preallocated buffer.</para>
			<para>The following table lists examples of other typical or
      related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
</docs>
