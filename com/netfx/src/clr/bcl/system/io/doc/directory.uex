<docs>
	<doc for="Directory.InternalGetDirectoryRoot">
		<summary>
			<para>
       Gets the root of the specified subdirectory.
    </para>
		</summary>
		<param name="path">
    The path of the subdirectory.
 </param>
		<returns>
			<para>
       A string representing the root of the subdirectory, or
       null if <paramref name="path "/>is null.
    </para>
		</returns>
	</doc>
	<doc for="Directory.GetCreationTime">
		<summary>
			<para>Gets the creation date and time of a directory.</para>
		</summary>
		<param name="path">The path of the directory.</param>
		<returns>
			<para>A <see cref="System.DateTime"/> structure set to the creation date and time for the
   specified directory. This value is expressed in local time.</para>
		</returns>
		<exception cref="System.IO.IOException">The specified path was not found.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<remarks>
			<para> This method is equivalent to <see cref="System.IO.File.GetCreationTime" qualify="true"/> .</para>
			<para>The <paramref name="path"/>
parameter is permitted
to specify relative or absolute path information. Relative path information is
interpreted as relative to the current working directory. To obtain the current
working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example 
   section below. The following table lists examples of other typical or related
   I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading the specified file or directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example gets the creation time of the specified directory. </para>
			<codelink SampleID="Dir_GetCreation" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetLastWriteTime">
		<summary>
			<para>Returns the date and time the specified file or directory was last written to.</para>
		</summary>
		<param name="path">The file or directory for which to obtain modification date and time information.</param>
		<returns>
			<para>A <see cref="System.DateTime"/> structure set to the date and time the specified file or directory was last written to. This value is expressed in local time.</para>
		</returns>
		<exception cref="System.IO.IOException">The specified path was not found.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted
to specify relative or absolute path information. Relative path information is
interpreted as relative to the current working directory. To obtain the current
working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>
.</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example 
   section below. The following table lists examples of other typical or related
   I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term>Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term>Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete"/></para></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading the specified file or directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates <see langword="GetLastWriteTime"/>.</para>
			<codelink SampleID="Dir_GetLastWrite" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetLastAccessTime">
		<summary>
			<para>Returns the date and time the specified file or directory was last accessed.</para>
		</summary>
		<param name="path">The file or directory for which to obtain access date and time information.</param>
		<returns>
			<para>A <see cref="System.DateTime"/> structure set to the date and time the specified file or
   directory was last accessed. This value is expressed in local time.</para>
		</returns>
		<exception cref="System.IO.IOException">The specified path was not found.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.NotSupportedException">The <paramref name="path"/> parameter is in an invalid format.</exception>
		<remarks>
			<para>This method is identical to <see cref="System.IO.File.GetLastAccessTime" qualify="true"/>.</para>
			<para><see langword="GetLastAccessTime"/> throws an <see cref="System.IO.IOException"/> if the directory specified by <paramref name="path"/> does not exist.</para>
			<para>The <paramref name="path"/>
parameter is permitted
to specify relative or absolute path information. Relative path information is
interpreted as relative to the current working directory. To obtain the current
working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>
.</para>
			<para>The <paramref name="path "/>parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example 
   section below. The following table lists examples of other typical or related
   I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term>Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term>Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete"/></para></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading the specified file or directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates <see langword="GetLastAccessTime"/>.</para>
			<codelink SampleID="Dir_GetLastAccess" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetDirectories">
		<overload>
			<para>Gets the names of subdirectories in the specified directory.</para>
		</overload>
		<summary>
			<para>Gets the names of subdirectories in the specified directory.</para>
		</summary>
		<param name="path">The path for which an array of subdirectory names is returned.</param>
		<returns>
			<para>An array of type <see langword="String"/> containing the
   names of subdirectories in <paramref name="path"/> .</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.IOException"><paramref name="path"/> is a file name.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted
to specify relative or absolute path information. Relative path information is
interpreted as relative to the current working directory. To obtain the current
working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>This method is identical to <see topic="frlrfSystemIODirectoryClassGetDirectoriesTopic2" title="GetDirectories(String, String)"/> with the asterisk (*) specified as the search
pattern.</para>
			<para>The names returned by this method are prefixed with the directory information
   provided in <paramref name="path"/>. </para>
			<para>The <paramref name="path "/>parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">to access path information for the current directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<para>The following example takes an array of file or directory names on the
      command line, determines what kind of name it is, and processes it
      appropriately.</para>
			<codelink SampleID="Recursive file finder" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetFileSystemEntries">
		<overload>
			<para>Returns the names of all files and subdirectories in the specified directory.</para>
		</overload>
		<summary>
			<para>Returns the names of all files and subdirectories in the specified directory.</para>
		</summary>
		<param name="path">The directory for which file and subdirectory names are returned.</param>
		<returns>
			<para>A <see langword="String"/> array
   containing the names of file system entries in the specified directory.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><para><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.IOException"><paramref name="path"/> is a file name.</exception>
		<exception cref="System.IO.DirectoryNotFoundException"><para>The specified path is invalid, such as being on an unmapped drive.</para></exception>
		<remarks>
			<para>This method is identical to
   <see topic="frlrfSystemIODirectoryClassGetFileSystemEntriesTopic2" title="GetFileSystemEntries(String, String)"/> with the asterisk (*) specified as the search
      pattern.</para>
			<para>The <paramref name="path"/>
parameter is permitted
to specify relative or absolute path information. Relative path information is
interpreted as relative to the current working directory. To obtain the current
working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
				<item>
					<term> Get file attributes.</term>
					<description><see cref="System.IO.File.GetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<codelink SampleID="System.IO.Directory" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.FileSystemInfo"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetFileSystemEntries1">
		<summary>
			<para> Returns an array
      of file system entries matching the specified search criteria.</para>
		</summary>
		<param name="path">The path to be searched.</param>
		<param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>. The <paramref name="searchPattern"/> parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="System.IO.Path.DirectorySeparatorChar"/> or <see cref="System.IO.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="System.IO.Path.InvalidPathChars"/>.</param>
		<returns>
			<para>A <see langword="String"/> array of file system entries matching the search criteria.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><para><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</para><para>-or-</para><para><paramref name="searchPattern"/> does not contain a valid pattern.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> or <paramref name="searchPattern"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.IOException"><para><paramref name="path"/> is a file name.</para></exception>
		<exception cref="System.IO.DirectoryNotFoundException"><para>The specified path is invalid, such as being on an unmapped drive.</para></exception>
		<remarks>
			<para>The following wildcard specifiers are permitted in <paramref name="searchPattern"/>.</para>
			<list type="table">
				<listheader>
					<term>Wildcard character</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> *</term>
					<description>Zero or more characters.</description>
				</item>
				<item>
					<term> ?</term>
					<description>Exactly one character. </description>
				</item>
			</list>
			<para>Characters other than the wild card specifiers represent themselves. For example, the <paramref name="searchPattern"/> string
"*t" searches for all names in <paramref name="path"/> ending with the letter "t". The <paramref name="searchPattern"/> string "s*" searches for all names in
<paramref name="path"/> beginning with the letter "s".</para>
			<para>The matching behavior of <paramref name="searchPattern"/> when the extension is exactly
three characters long is different from when the extension is more than three
characters long. A <paramref name="searchPattern"/> of exactly three characters returns
files having an extension of three or more characters. A <paramref name="searchPattern"/> of
one, two, or more than three characters returns only files having extensions of
exactly that length.</para>
			<para>The following list shows the behavior of different lengths for the
<paramref name="searchPattern"/> parameter:</para>
			<list type="bullet"><item>
					<term>
      "*.abc" returns files having an extension of .abc,
      .abcd, .abcde, .abcdef, and so on.</term>
				</item>
				<item>
					<term>
      "*.abcd" returns only files having an extension of
      .abcd.</term>
				</item>
				<item>
					<term>
      "*.abcde" returns only files having an extension of
      .abcde.</term>
				</item>
				<item>
					<term>
      "*.abcdef" returns only files having an extension of .abcdef.</term>
				</item>
			</list>
			<para>The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
				<item>
					<term> Get file attributes.</term>
					<description><see cref="System.IO.File.GetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<codelink SampleID="System.IO.Directory" SnippetID="2"/>
		</example>
		<seealso cref="System.IO.FileSystemInfo"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetCurrentDirectory">
		<summary>
			<para> Gets the current working directory of the application.</para>
		</summary>
		<returns>
			<para>A string containing the path of the current working directory.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<remarks>
			<para>The current directory is distinct from the original directory, which is the
      one from which the process was started.</para>
			<para>For an example of using this method, see the Example section below. The
      following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates the
   <see langword="GetCurrentDirectory"/> method. </para>
			<codelink SampleID="Dir_GetCurDir" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.Delete">
		<overload>
			<para>Deletes a directory and its contents.</para>
		</overload>
		<summary>
			<para> Deletes an empty directory from a specified path.</para>
		</summary>
		<param name="path">The name of the empty directory to remove. This directory must be writable or empty.</param>
		<exception cref="System.IO.IOException">The directory specified by <paramref name="path"/> is read-only or is not empty.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para>This method behaves identically to <see topic="frlrfSystemIODirectoryClassDeleteTopic2" title="Delete(String, Boolean)"/> with
<see langword="false"/> specified.</para>
			<para>The
<paramref name="path"/> 
parameter is permitted to specify relative or absolute path information.
Relative path information is interpreted as relative to the current working
directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>This method throws an <see cref="System.IO.IOException"/> if
the directory specified in the <paramref name="path"/> parameter contains files or subdirectories.</para>
			<para>The
<paramref name="path"/> parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example deletes the
      specified directory or throws an exception if there are subdirectories. </para>
			<codelink SampleID="Dir_Delete1" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.Delete1">
		<summary>
			<para> Deletes the specified directory and, if indicated, any subdirectories in the directory.</para>
		</summary>
		<param name="path">The name of the directory to remove.</param>
		<param name="recursive"><see langword="true"/> to remove directories, subdirectories, and files in <paramref name="path"/>; otherwise, <see langword="false"/>.</param>
		<exception cref="System.IO.IOException">The directory specified by <paramref name="path"/> is read-only, or <paramref name="recursive"/> is <see langword="false"/> and <paramref name="path"/> is not an empty directory.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/> .</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/> .</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted
to specify relative or absolute path information. Relative path information is
interpreted as relative to the current working directory. To obtain the current
working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>The <paramref name="path "/>parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a file.</term>
					<description>
						<para><see cref="System.IO.File.Delete" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example creates and deletes the specified
      directory and subdirectories. </para>
			<codelink SampleID="Dir_Delete2" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetParent">
		<summary>
			<para>Retrieves the parent directory of the specified path, including both absolute and relative
      paths.</para>
		</summary>
		<param name="path">The path for which to retrieve the parent directory.</param>
		<returns>
			<para>The parent directory, or <see langword="null"/> if <paramref name="path"/> is the
   root directory, including the root of a UNC server or share name.</para>
		</returns>
		<exception cref="System.IO.IOException">The directory specified by <paramref name="path"/> is read-only.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path was not found.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute
path information. Relative path information is interpreted as relative to the
current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example section below. The
      following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from files or directories. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<codelink SampleID="System.IO.Directory" SnippetID="4"/>
		</example>
		<seealso cref="System.IO.DirectoryInfo"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetLogicalDrives">
		<summary>
			<para>Retrieves the names of the logical drives
      on this computer in the form "&lt;drive letter&gt;:\".</para>
		</summary>
		<returns>
			<para>The logical drives on this computer.</para>
		</returns>
		<exception cref="System.IO.IOException">An I/O error occurs (for example, a disk error).</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<remarks>
			<para>For an example of using this method, see the Example section below. The
      following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">to call unmanaged code, such as calling native code with PInvoke or COM interop. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<example>
			<codelink SampleID="System.IO.Directory" SnippetID="3"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.Move">
		<summary>
			<para>Moves a file or a directory and its contents to a new location.</para>
		</summary>
		<param name="sourceDirName">The path of the file or directory to move.</param>
		<param name="destDirName">The path to the new location for <paramref name="sourceDirName"/>.</param>
		<exception cref="System.IO.IOException"><para>An attempt was made to move a directory to a different volume</para>
			<para>-or-</para>
			<para>
				<paramref name="destDirName"/> already exists</para>
			<para>-or-</para>
			<para>The <paramref name="sourceDirName"/> and <paramref name="destDirName"/> parameters refer to the same file or directory.</para></exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="sourceDirName"/> or <paramref name="destDirName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="sourceDirName"/> or <paramref name="destDirName"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The path specified by <paramref name="sourceDirName"/> is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para>This method throws an <see langword="IOException"/> if, for example, you try
   to move c:\mydir to c:\public, and c:\public already exists. You must specify
   "c:\\public\\mydir" as the <paramref name="destDirName"/> parameter, or specify a new
   directory name such as "c:\\newdir".</para>
			<para>The <paramref name="sourceDirName "/>and <paramref name="destDirName"/> arguments are permitted to specify relative
or absolute path information. Relative path information is interpreted as
relative to the current working directory. To obtain the current working
directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term>Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term>Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term>Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from <paramref name="sourceDirName"/> and writing to <paramref name="sourceDirName"/> and <paramref name="destDirName"/>. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<codelink SampleID="System.IO.Directory" SnippetID="5"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<keyword term="renaming directories"/>
	</doc>
	<doc for="Directory.GetCreationTimeUtc">
		<summary>
			<para>Gets the creation date and time, in coordinated universal time (UTC) format, of a directory.</para>
		</summary>
		<param name="path">The path of the directory.</param>
		<returns>
			<para>A <see cref="System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</para>
		</returns>
		<exception cref="System.IO.IOException">The specified path was not found.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<remarks>
			<para> 
      The following table lists examples of other typical or related
      I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading the specified file or directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetLastWriteTimeUtc">
		<summary>
			<para>Returns the date and time, in universal coordinated time (UTC) format, that the specified file or directory was last written to.</para>
		</summary>
		<param name="path">The file or directory for which to obtain modification date and time information.</param>
		<returns>
			<para>A <see cref="System.DateTime"/> structure set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</para>
		</returns>
		<exception cref="System.IO.IOException">The specified path was not found.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<remarks>
			<para> 
      The following table lists examples of other typical or related
      I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete"/></para></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading the specified file or directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetLastAccessTimeUtc">
		<summary>
			<para>Returns the date and time, in universal coordinated time (UTC) format, that the specified file or directory was last accessed.</para>
		</summary>
		<param name="path">The file or directory for which to obtain access date and time information.</param>
		<returns>
			<para>A <see cref="System.DateTime"/> structure set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</para>
		</returns>
		<exception cref="System.IO.IOException">The specified path was not found.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.NotSupportedException">The <paramref name="path"/> parameter is in an invalid format.</exception>
		<remarks>
			<para> 
      The following table lists examples of other typical or related
      I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete"/></para></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading the specified file or directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.SetCurrentDirectory">
		<summary>
			<para>Sets the application's current working directory to the specified directory.</para>
		</summary>
		<param name="path">The path to which the current working directory is set.</param>
		<exception cref="System.IO.IOException">An IO error occurred.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission to access unmanaged code.</exception>
		<exception cref="System.IO.FileNotFoundException">The specified path was not found.</exception>
		<remarks>
			<para>When the application terminates, the working directory is restored to its original location
      (the directory where the process was started).</para>
			<para>The <paramref name="path"/>
parameter is permitted
to specify relative or absolute path information. Relative path information is
interpreted as relative to the current working directory. To obtain the current
working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>
.</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para> The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to files or directories. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.Exists">
		<summary>
			<para>Determines whether the given path refers to an existing
      directory
      on disk.</para>
		</summary>
		<param name="path">The path to test.</param>
		<returns>
			<para><see langword="true "/>
if <paramref name="path"/> refers to an existing directory; otherwise, <see langword="false "/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="path"/> argument is permitted to specify
   relative or absolute path information. Relative path information is interpreted
   as relative to the current working directory.</para>
			<para>The <paramref name="path "/>parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example takes an array of file or directory names on the
      command line, determines what kind of name it is, and processes it
      appropriately.</para>
			<codelink SampleID="Recursive file finder" SnippetID="2"/>
		</example>
		<seealso cref="System.IO.DirectoryInfo"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetFiles">
		<overload>
			<para> Returns the names of files in the specified directory.</para>
		</overload>
		<summary>
			<para> Returns the names of files in the specified directory.</para>
		</summary>
		<param name="path">The directory from which to retrieve the files.</param>
		<returns>
			<para>A <see langword="String"/> array of file names in the specified directory.</para>
		</returns>
		<exception cref="System.IO.IOException"><paramref name="path"/> is a file name.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para> This method is identical to
   <see topic="frlrfSystemIODirectoryClassGetFilesTopic2" title="GetFiles(String, String)"/> with
      the
      asterisk (*) specified as the search pattern.</para>
			<para> The <paramref name="path"/>
parameter is permitted
to specify relative or absolute path information. Relative path information is
interpreted as relative to the current working directory. To obtain the current
working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example section below. The


   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term>Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories 
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term>Get file attributes.</term>
					<description><see cref="System.IO.File.GetAttributes"/></description>
				</item>
				<item>
					<term> Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<codelink SampleID="Recursive file finder" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetDirectoryRoot">
		<summary>
			<para>Returns the volume information,
      root information, or both for the specified path.</para>
		</summary>
		<param name="path">The path of a file or directory.</param>
		<returns>
			<para>A string containing the volume information, root
      information, or both for the specified path.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<remarks>
			<para>This method obtains the fully qualified path name of <paramref name="path"/>, as returned by <see cref="System.IO.Path.GetFullPath"/>,
   and returns root directory information. The specified path is not required
   to exist.</para>
			<para> The <paramref name="path"/>
parameter is permitted
to specify relative or absolute path information. Relative path information is
interpreted as relative to the current working directory. To obtain the current
working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>
.</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para> The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Retrieve only the directory name.</term>
					<description><see cref="System.IO.Path.GetDirectoryName"/></description>
				</item>
				<item>
					<term> Retrieve the fully qualified path of a file.</term>
					<description><see cref="System.IO.Path.GetFullPath"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetFiles1">
		<summary>
			<para>Returns the names of files in the
      specified directory that match the
      specified search pattern.</para>
		</summary>
		<param name="path">The directory to search.</param>
		<param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="System.IO.Path.DirectorySeparatorChar"/> or <see cref="System.IO.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="System.IO.Path.InvalidPathChars"/>.</param>
		<returns>
			<para>A <see langword="String"/> array
   containing the names of files in the specified directory that match
   the specified search pattern.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><para><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</para><para>-or-</para><para><paramref name="searchPattern "/> does not contain a valid pattern.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> or <paramref name="searchPattern"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para>The following wildcard specifiers are permitted in 
   <paramref name="searchPattern"/>.</para>
			<list type="table">
				<listheader>
					<term>Wildcard character</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> *</term>
					<description>Zero or more characters.</description>
				</item>
				<item>
					<term> ?</term>
					<description>Exactly one character. </description>
				</item>
			</list>
			<para>Characters other than the wild card specifiers represent 
      themselves. For example, the <paramref name="searchPattern"/> string
      "*t" searches for all names in <paramref name="path"/> ending with the letter "t".
      The <paramref name="searchPattern"/> string "s*" searches for all names in
   <paramref name="path"/> beginning with the letter "s".</para>
			<para>The matching behavior of <paramref name="searchPattern"/> when the extension is exactly three characters long is different from when the 
   extension is more than three characters long. A <paramref name="searchPattern"/> of
   exactly three characters returns files having an extension of three or more
   characters. A <paramref name="searchPattern"/> of
   one, two, or more than three characters returns only files having extensions of
   exactly that length.</para>
			<para>The following list shows the behavior of different 
   lengths for the <paramref name="searchPattern"/> parameter:</para>
			<list type="bullet"><item>
					<term>
      
      "*.abc" returns files having an extension of .abc,
      .abcd, .abcde, .abcdef, and so on.</term>
				</item>
				<item>
					<term>
      
      "*.abcd" returns only files having an extension of
      .abcd.</term>
				</item>
				<item>
					<term>
      
      "*.abcde" returns only files having an extension of
      .abcde.</term>
				</item>
				<item>
					<term>
      
      "*.abcdef" returns only files having an extension of .abcdef.</term>
				</item>
			</list>
			<para>The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>The <paramref name="path"/> paramenter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Rename or move a file.</term>
					<description>
						<para><see cref="System.IO.File.Move" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
				<item>
					<term> Get file attributes.</term>
					<description><see cref="System.IO.File.GetAttributes"/></description>
				</item>
				<item>
					<term> Set file attributes.</term>
					<description><see cref="System.IO.File.SetAttributes"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<para>The following example counts the number of files
      that begin with the specified letter. </para>
			<codelink SampleID="Dir_GetFiles2" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.SetCreationTime">
		<summary>
			<para>Sets the creation date and time for the specified file or directory.</para>
		</summary>
		<param name="path">The file or directory for which to set the creation date and time information.</param>
		<param name=" creationTime">A <see cref="System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
		<exception cref="System.IO.FileNotFoundException">The specified path was not found. </exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="creationTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted
to specify relative or absolute path information. Relative path information is
interpreted as relative to the current working directory. To obtain the current
working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>
.</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para> The following table lists examples of other typical or related
   I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete"/></para></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<platnote platform="Win95, Win98, Win98SE">These operating systems do not support this method.
</platnote>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file or directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.SetCreationTimeUtc">
		<summary>
			<para>Sets the creation date and time, in universal coordinated time (UTC) format, for the specified file or directory.</para>
		</summary>
		<param name="path">The file or directory for which to set the creation date and time information.</param>
		<param name="creationTimeUtc">A <see cref="System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
		<exception cref="System.IO.FileNotFoundException">The specified path was not found. </exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="creationTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
		<remarks>
			<para>The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para> The following table lists examples of other typical or related
   I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete"/></para></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<platnote platform="Win95, Win98, Win98SE">These operating systems do not support this method.
</platnote>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file or directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.SetLastWriteTime">
		<summary>
			<para>Sets the date and time a directory was last written to.</para>
		</summary>
		<param name="path">The path of the directory.</param>
		<param name=" lastWriteTime">The date and time the directory was last written to. This value is expressed in local time.</param>
		<exception cref="System.IO.FileNotFoundException">The specified path was not found.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted
to specify relative or absolute path information. Relative path information is
interpreted as relative to the current working directory. To obtain the current
working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example
   section below. The following table lists examples of other typical or related
   I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete"/></para></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<platnote platform="Win95, Win98, Win98SE">These operating systems do not support this method.
</platnote>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file or directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates <see langword="SetLastWriteTime"/>.</para>
			<codelink SampleID="Dir_SetLastWrite" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.SetLastWriteTimeUtc">
		<summary>
			<para>Sets the date and time, in universal coordinated time
      (UTC) format, that a directory was last written to.</para>
		</summary>
		<param name="path">The path of the directory.</param>
		<param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time.</param>
		<exception cref="System.IO.FileNotFoundException">The specified path was not found.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<remarks>
			<para>The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para> The following table lists examples of other typical or related
   I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete"/></para></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<platnote platform="Win95, Win98, Win98SE">These operating systems do not support this method.
</platnote>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file or directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.SetLastAccessTime">
		<summary>
			<para>Sets the date and time the specified file or directory was last accessed.</para>
		</summary>
		<param name="path">The file or directory for which to set the access date and time information.</param>
		<param name="lastAccessTime">A <see cref="System.DateTime"/> containing the value to set for the access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
		<exception cref="System.IO.FileNotFoundException">The specified path was not found.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<remarks>
			<para>The <paramref name="path"/>
parameter is permitted
to specify relative or absolute path information. Relative path information is
interpreted as relative to the current working directory. To obtain the current
working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>
.</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example
   section below. The following table lists examples of other typical or related
   I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete"/></para></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<platnote platform="Win95, Win98, Win98SE">These operating systems do not support this method.
</platnote>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file or directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates <see langword="SetLastAccessTime"/>.</para>
			<codelink SampleID="Dir_SetLastAccess" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.SetLastAccessTimeUtc">
		<summary>
			<para>Sets the date and time, in universal coordinated time (UTC) format, that the specified file or directory was last accessed.</para>
		</summary>
		<param name="path">The file or directory for which to set the access date and time information.</param>
		<param name="lastAccessTimeUtc">A <see cref="System.DateTime"/> containing the value to set for the access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
		<exception cref="System.IO.FileNotFoundException">The specified path was not found.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<remarks>
			<para>The <paramref name="path"/> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/> .</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para> The following table lists examples of other typical or related
   I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description><see cref="System.IO.Directory"/></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete"/></para></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
			</list>
		</remarks>
		<platnote platform="Win95, Win98, Win98SE">These operating systems do not support this method.
</platnote>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to the specified file or directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.CreateDirectory">
		<summary>
			<para>Creates all directories and subdirectories as specified by <paramref name="path"/>
.</para>
		</summary>
		<param name="path">The directory path to create.</param>
		<returns>
			<para>A <see cref="System.IO.DirectoryInfo"/>
as specified by <paramref name="path"/>.</para>
		</returns>
		<exception cref="System.IO.IOException">The directory specified by <paramref name="path"/> is read-only or is not empty.</exception>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.NotSupportedException">Creating a directory with only the colon (:) character was attempted. </exception>
		<remarks>
			<para>Any and all directories specified in <paramref name="path"/> are
   created, unless they already exist or unless some part of <paramref name="path"/> is
   invalid. The <paramref name="path "/>parameter specifies a directory path, not a file path.</para>
Creating a directory with only the colon (:)
character is not supported, and will cause a
<see langword="NotSupportedException"/> to be thrown.
<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading from files or directories. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example creates and deletes the specified directory.</para>
			<codelink SampleID="Dir_CreateDir" SnippetID="1"/>
			<para>To create the directory C:\Users\User1\Public\Html when
 the current directory is C:\Users\User1, use any of
 the following calls
 to ensure that the backslash is interpreted properly.</para>
			<para>In Visual Basic:</para>
			<code>
Directory.CreateDirectory("Public\Html") 
    Directory.CreateDirectory("\Users\User1\Public\Html") 
    Directory.CreateDirectory("c:\Users\User1\Public\Html")
</code>
			<para> In C#:</para>
			<code>
Directory.CreateDirectory("Public\\Html");
    Directory.CreateDirectory("\\Users\\User1\\Public\\Html");
    Directory.CreateDirectory("c:\\Users\\User1\\Public\\Html");
</code>
			<para>In C++:</para>
			<code>
Directory::CreateDirectory("Public\\Html");
    Directory::CreateDirectory("\\Users\\User1\\Public\\Html");
    Directory::CreateDirectory("c:\\Users\\User1\\Public\\Html");
</code>
		</example>
		<seealso cref="System.IO.DirectoryInfo"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory.GetDirectories1">
		<summary>
			<para>Gets an array of directories matching the
      specified search pattern from the current directory.</para>
		</summary>
		<param name="path">The path to search.</param>
		<param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="System.IO.Path.DirectorySeparatorChar"/> or <see cref="System.IO.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="System.IO.Path.InvalidPathChars"/>.</param>
		<returns>
			<para>A <see langword="String"/> array of
   directories matching the search pattern.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException"><para><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</para>
			<para>-or-</para>
			<para><paramref name="searchPattern"/> does not contain a valid pattern.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="path"/> or <paramref name="searchPattern"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.IOException"><paramref name="path"/> is a file name.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<remarks>
			<para>The following wildcard specifiers are permitted in
   <paramref name="searchPattern"/>.</para>
			<list type="table">
				<listheader>
					<term>Wildcard character</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> *</term>
					<description>Zero or more characters.</description>
				</item>
				<item>
					<term> ?</term>
					<description>Exactly one character. </description>
				</item>
			</list>
			<para> Characters other than the wildcard specifiers represent
      themselves. For example, the <paramref name="searchPattern"/> string
      "*t" searches for all names in <paramref name="path"/> ending with the letter "t".
      The <paramref name="searchPattern"/> string "s*" searches for all names in
   <paramref name="path"/>
   beginning with the letter "s".</para>
			<para>The <paramref name="path"/>
parameter is permitted to specify relative or absolute
path information. Relative path information is interpreted as relative to the
current working directory. To obtain the current working directory, see <see cref="System.IO.Directory.GetCurrentDirectory"/>.</para>
			<para>The <paramref name="path"/> parameter is not case-sensitive.</para>
			<para>For an example of using this method, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See all the files in all subdirectories
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<para>The following example counts the number of
      directories in a path that begin with the specified letter. </para>
			<codelink SampleID="Dir_GetDirs2" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="Directory">
		<summary>
			<para> Exposes static methods for creating, moving, and enumerating through directories
      and subdirectories.</para>
		</summary>
		<remarks>
			<para>Use the <see cref="System.IO.Directory"/> class for typical operations such as copying, moving,
   renaming, creating, and deleting directories. You can also use the <see cref="System.IO.Directory"/> class to get and set
<see cref="System.DateTime"/> information related to the 
   creation, access, and writing of a directory.</para>
			<para>Because all <see cref="System.IO.Directory"/> methods are static, it might be more efficient to use
a <see cref="System.IO.File"/> method rather than a
corresponding <see cref="System.IO.DirectoryInfo"/> instance method if you
want to perform only one action. Most
<see cref="System.IO.Directory"/> methods require the path to the directory that you 
are manipulating.</para>
			<para>The static methods of the
<see cref="System.IO.Directory"/> class perform security checks on all methods. If you 
   are going to reuse an object several times, consider using the corresponding
   instance method of <see cref="System.IO.DirectoryInfo"/> instead, because
   the security check will not always be necessary.</para>
			<note type="note">
   In members that accept a path as
   an input string, that path must be well-formed or an exception is raised. For
   example, if a path is fully qualified but begins with a space, the path is not
   trimmed in methods of the class. Therefore, the path is malformed and an
   exception is raised. Similarly, a path or a combination of paths cannot be fully
   qualified twice. For example, "c:\temp c:\windows" also raises an exception in
   most cases. Ensure that your paths are well-formed when using methods that
   accept a path string.
</note>
			<para>In members that accept a path, the path can refer to a file or just a
   directory. The specified path can also refer to a relative path or a Universal
   Naming Convention (UNC) path for a server and share name. For example, all
   the following are acceptable paths:</para>
			<list type="bullet"><item>
					<term>
      
      "c:\\MyDir" in C#, or "c:\MyDir" in Visual Basic.</term>
				</item>
				<item>
					<term>
      
      "MyDir\\MySubdir" in C#, or "MyDir\MySubDir" in
      Visual Basic.</term>
				</item>
				<item>
					<term>
      
      "\\\\MyServer\\MyShare"
      in C#, or "\\MyServer\MyShare" in
      Visual
      Basic.</term>
				</item>
			</list>
			<para>By default, full read/write access to new directories is granted to all
   users.</para>
			<para>For an example of using this class, see the Example section below. The
   following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Copy a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Rename or move a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Move" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.MoveTo" qualify="true"/></para></description>
				</item>
				<item>
					<term> Delete a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.Delete" qualify="true"/></para>
						<para><see cref="System.IO.DirectoryInfo.Delete" qualify="true"/></para></description>
				</item>
				<item>
					<term> Create a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.CreateDirectory"/></para>
						<para><see cref="System.IO.FileInfo.Directory"/></para></description>
				</item>
				<item>
					<term> Create a subdirectory.</term>
					<description><see cref="System.IO.DirectoryInfo.CreateSubdirectory"/></description>
				</item>
				<item>
					<term> See the files in a directory.</term>
					<description><see cref="System.IO.FileInfo.Name"/></description>
				</item>
				<item>
					<term> See the subdirectories of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory.GetDirectories"/></para>
						<para><see cref="System.IO.DirectoryInfo.GetDirectories"/></para></description>
				</item>
				<item>
					<term> See all the files in all subdirectories
      of a directory.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Find the size of a directory.</term>
					<description>
						<para><see cref="System.IO.Directory"/></para></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description><see cref="System.IO.File.Exists"/></description>
				</item>
				<item>
					<term> Sort files in a directory by size.</term>
					<description><see cref="System.IO.DirectoryInfo.GetFileSystemInfos"/></description>
				</item>
				<item>
					<term> Determine if a directory exists.</term>
					<description><see cref="System.IO.Directory.Exists"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example determines whether a specified
      directory exists, deletes it if it does, and creates it if it does not. This
      example then moves the directory, creates a file in the directory, and counts
      the files in the directory.</para>
			<codelink SampleID="Directory Class Example" SnippetID="1"/>
			<codelink SampleID="showdirsize" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.File"/>
		<seealso cref="System.IO.DirectoryInfo"/>
		<seealso cref="System.IO.FileInfo"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
</docs>
