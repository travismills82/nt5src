<docs>
	<doc for="StackFrame.StackFrame">
		<overload>
			<para> Initializes a new <see cref="System.Diagnostics.StackFrame"/> object.
   </para>
		</overload>
		<summary>
			<para>Initializes a new <see cref="System.Diagnostics.StackFrame"/> 
object.</para>
		</summary>
	</doc>
	<doc for="StackFrame">
		<summary>
			<para> Provides information about a <see cref="System.Diagnostics.StackFrame"/>, which represents a function call on the
   call stack for the current thread.</para>
		</summary>
		<remarks>
			<para>A <see cref="System.Diagnostics.StackFrame"/> is
   created and pushed on the call stack for every function call made during the
   execution of a thread. The stack frame always includes <see cref="System.Reflection.MethodBase"/>
   information, and optionally includes file name, line
   number, and column number information.</para>
			<see cref="System.Diagnostics.StackFrame"/> information will be most informative
with Debug build configurations. By default, Debug builds include debug
symbols, while Release builds do not. The debug symbols contain most of the file,
method name, line number, and column information used in
constructing <see cref="System.Diagnostics.StackFrame"/> objects.
</remarks>
		<example>
			<para> The following code example demonstrates how to create and use a
   <see cref="System.Diagnostics.StackFrame"/>
   .</para>
			<codelink SampleID="StackFrameSample1" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.StackTrace"/>
	</doc>
	<doc for="StackFrame.StackFrame1">
		<summary>
			<para>Initializes a new <see cref="System.Diagnostics.StackFrame"/> object, optionally
   capturing source information.</para>
		</summary>
		<param name="fNeedFileInfo"><see langword="true"/> to capture the file name, line number and column number; otherwise, <see langword="false"/>. </param>
		<example>
			<para>The following code example demonstrates how to create a <see cref="System.Diagnostics.StackFrame"/>
using this constructor.</para>
			<codelink SampleID="StackFrameSample1" SnippetID="2"/>
		</example>
	</doc>
	<doc for="StackFrame.StackFrame2">
		<summary>
			<para> Initializes a new <see cref="System.Diagnostics.StackFrame"/> object that corresponds to a
   frame above the current stack frame.</para>
		</summary>
		<param name="skipFrames">The number of frames up the stack to skip. </param>
		<example>
			<para>The following code example demonstrates how to create a <see cref="System.Diagnostics.StackFrame"/>
using this constructor. </para>
			<codelink SampleID="StackFrameSample1" SnippetID="3"/>
		</example>
	</doc>
	<doc for="StackFrame.StackFrame3">
		<summary>
			<para>Initializes a new <see cref="System.Diagnostics.StackFrame"/> object that corresponds to a frame above the current
   stack frame, optionally capturing source information. </para>
		</summary>
		<param name="skipFrames">The number of frames up the stack to skip.</param>
		<param name=" fNeedFileInfo"><see langword="true"/> to capture the file name, line number and column number; otherwise, <see langword="false"/>.</param>
		<example>
			<para>The following code example demonstrates how to create a <see cref="System.Diagnostics.StackFrame"/> using this constructor.</para>
			<codelink SampleID="StackFrameSample1" SnippetID="4"/>
		</example>
	</doc>
	<doc for="StackFrame.StackFrame4">
		<summary>
			<para> Initializes a new <see cref="System.Diagnostics.StackFrame"/> object
   that only contains the given file name and line number. </para>
		</summary>
		<param name="fileName">The given file name. </param>
		<param name="lineNumber">The line number in the specified file. </param>
		<remarks>
			<para>Use this constructor when you do not want to use the debugger's line mapping
      logic.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates how to create a <see cref="System.Diagnostics.StackFrame"/> using this constructor.</para>
			<codelink SampleID="StackFrameSample1" SnippetID="5"/>
		</example>
	</doc>
	<doc for="StackFrame.StackFrame5">
		<summary>
			<para> Initializes a new <see cref="System.Diagnostics.StackFrame"/>
object that only contains the given file name,
line number, and column number. </para>
		</summary>
		<param name="fileName">The given file name.</param>
		<param name=" lineNumber">The line number in the specified file.</param>
		<param name=" colNumber">The column number in the specified file.</param>
		<remarks>
			<para>Use this constructor when you do not want to use the debugger's line mapping
      logic.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates how to create a <see cref="System.Diagnostics.StackFrame"/> using this constructor.</para>
			<codelink SampleID="StackFrameSample1" SnippetID="6"/>
		</example>
	</doc>
	<doc for="StackFrame.OFFSET_UNKNOWN">
		<summary>
			<para>Defines the value returned from <see cref="System.Diagnostics.StackFrame.GetNativeOffset"/> or <see cref="System.Diagnostics.StackFrame.GetILOffset"/> when the native or Microsoft intermediate language (MSIL) offset is
   unknown. This field is constant.</para>
		</summary>
		<remarks>
			<para> The value of this constant is negative one (-1).</para>
		</remarks>
	</doc>
	<doc for="StackFrame.GetNativeOffset">
		<summary>
			<para> Gets the offset from the start of the native just-in-time
      (JIT)-compiled code for the method being executed. The generation of
      this debugging information is controlled by the <see cref="System.Diagnostics.DebuggableAttribute"/>
      .
      </para>
		</summary>
		<returns>
			<para> The offset from the start of the JIT-compiled code for
      the method being executed.
      </para>
		</returns>
		<example>
			<para>The following code example demonstrates how you can use
      the <see cref="System.Diagnostics.StackFrame.GetNativeOffset"/> method.</para>
			<codelink SampleID="StackFrameSample1" SnippetID="7"/>
		</example>
		<seealso cref="System.Diagnostics.DebuggableAttribute"/>
	</doc>
	<doc for="StackFrame.GetILOffset">
		<summary>
			<para> Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing.
      This offset might be an approximation depending on whether the just-in-time (JIT) compiler
      is generating debugging code or not. The generation of
      this debugging information is controlled by the <see cref="System.Diagnostics.DebuggableAttribute"/>
      .
      </para>
		</summary>
		<returns>
			<para> The offset from the start of the MSIL code for the method that is
      executing.
      </para>
		</returns>
		<example>
			<para>The following code example demonstrates how you can use the <see cref="System.Diagnostics.StackFrame.GetILOffset"/> method.</para>
			<codelink SampleID="StackFrameSample1" SnippetID="7"/>
		</example>
		<seealso cref="System.Diagnostics.DebuggableAttribute"/>
	</doc>
	<doc for="StackFrame.GetFileName">
		<summary>
			<para> Gets the file name that contains the code that is executing.
      This information is typically extracted from the debugging symbols for the
      executable.
      </para>
		</summary>
		<returns>
			<para> The file name.
      </para>
			<para>-or-</para>
			<para><see langword="null"/> if the file name cannot be determined. </para>
		</returns>
		<example>
			<para>The following code example demonstrates how you can use the <see cref="System.Diagnostics.StackFrame.GetFileName"/> method.</para>
			<codelink SampleID="StackFrameSample1" SnippetID="7"/>
		</example>
	</doc>
	<doc for="StackFrame.GetFileLineNumber">
		<summary>
			<para> Gets the line number in the file that contains the code that
      is executing. This information is typically extracted from the debugging symbols for
      the executable.
      </para>
		</summary>
		<returns>
			<para> The file line number.
      </para>
			<para>-or-</para>
			<para>Zero if the file line number cannot be determined. </para>
		</returns>
		<example>
			<para>The following code example demonstrates how you can use the <see cref="System.Diagnostics.StackFrame.GetFileLineNumber"/> method.</para>
			<codelink SampleID="StackFrameSample1" SnippetID="7"/>
		</example>
	</doc>
	<doc for="StackFrame.GetFileColumnNumber">
		<summary>
			<para> Gets the column number in the file that contains the
      code that is executing. This information is typically extracted from the debugging
      symbols for the executable.</para>
		</summary>
		<returns>
			<para> The file column
      number. </para>
			<para>-or-</para>
			<para> Zero if the file column number cannot be determined. </para>
		</returns>
		<example>
			<para>The following code example demonstrates how you can use the <see cref="System.Diagnostics.StackFrame.GetFileColumnNumber"/> method.</para>
			<codelink SampleID="StackFrameSample1" SnippetID="7"/>
		</example>
	</doc>
	<doc for="StackFrame.ToString">
		<summary>
			<para> Builds a readable representation of the stack trace.
      </para>
		</summary>
		<returns>
			<para> Returns a readable representation.
      </para>
		</returns>
		<example>
			<para>The following code example demonstrates how you can use the <see cref="System.Diagnostics.StackFrame.ToString"/> method.</para>
			<codelink SampleID="StackFrameSample1" SnippetID="3"/>
		</example>
	</doc>
	<doc for="StackFrame.GetMethod">
		<summary>
			<para> Gets the method in which the frame is executing.
      </para>
		</summary>
		<returns>
			<para> The method in which the frame is executing.
      </para>
		</returns>
		<example>
			<para>The following code example demonstrates how you can use 
      the <see cref="System.Diagnostics.StackFrame.GetMethod"/>
      method.</para>
			<codelink SampleID="StackTraceSample2" SnippetID="3"/>
		</example>
	</doc>
</docs>
