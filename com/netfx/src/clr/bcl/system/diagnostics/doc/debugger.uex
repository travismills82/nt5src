<docs>
	<doc for="Debugger">
		<summary>
			<para> Enables communication with a debugger. This class cannot be inherited.
      </para>
		</summary>
	</doc><doc for="Debugger.DefaultCategory">
		<summary>
			<para> Represents the default category of message with a constant.
 </para>
		</summary>
		<remarks>
			<para>The value of this default constant is <see langword="null"/>. <see cref="System.Diagnostics.Debugger.DefaultCategory"/> is used by <see cref="System.Diagnostics.Debugger.Log"/>.</para>
		</remarks>
	</doc><doc for="Debugger.Log">
		<summary>
			<para> Posts a message for the attached debugger.
 </para>
		</summary>
		<param name="level">A description of the importance of the message. </param>
		<param name="category">The category of the message. </param>
		<param name="message">The message to show. </param>
		<remarks>
 If there is no debugger attached, this method has no
 effect. The debugger might or might not report the message, depending upon its
 settings.
</remarks>
	</doc><doc for="Debugger.IsAttached">
		<summary>
			<para>Gets a value that indicates whether a debugger is attached to the process.</para>
		</summary>
		<value>
			<para><see langword="true"/> if a debugger is attached;
   otherwise, <see langword="false"/>
   .
   </para>
		</value>
	</doc><doc for="Debugger.Break">
		<summary>
			<para> Signals a breakpoint to an attached debugger.
      </para>
		</summary>
		<exception cref="System.Security.SecurityException">The <see cref="System.Security.Permissions.UIPermission" qualify="true"/> is not set to break into the debugger.</exception>
		<remarks>
			<para> If no debugger is attached, users are asked if they
      want to attach a debugger. If yes, the debugger is started. If a debugger
      is attached, the debugger is signaled with a user breakpoint event, and the debugger suspends execution of the process
      just as if a debugger breakpoint had been hit.
      </para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for permission to break in the debugger. Associated enumeration:<see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
	</doc><doc for="Debugger.Launch">
		<summary>
			<para> Launches and attaches a debugger to the process.
      </para>
		</summary>
		<returns>
			<para><see langword="true"/> if the startup is successful or if
   the debugger is already attached; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.Security.SecurityException">The <see cref="System.Security.Permissions.UIPermission" qualify="true"/> is not set to start the debugger.</exception>
		<remarks>
			<para> If a debugger is already attached, nothing happens.
      </para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for permission to start a debugger. Associated enumeration:<see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<seealso cref="System.Security.Permissions.UIPermission" qualify="true"/>
	</doc><doc for="Debugger.IsLogging">
		<summary>
			<para> Checks to see if logging is enabled by an attached debugger.
      </para>
		</summary>
		<returns>
			<para><see langword="true"/> if a debugger is attached and
   logging is enabled; otherwise, <see langword="false. "/>The attached debugger is the registered
   managed debugger in the <see langword="DbgManagedDebugger"/>
   registry key. For more information on this key, see <see topic="cpconenablingjit-attachdebugging"/>.</para>
		</returns>
	</doc></docs>
