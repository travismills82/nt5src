<docs>
	<doc for="ISymbolDocumentWriter.SetSource">
		<summary>
			<para> Stores the raw source for a document in the symbol store.
      </para>
		</summary>
		<param name="source">The document source represented as unsigned bytes. </param>
		<remarks>
			<para> An array of unsigned bytes is used instead of character data to
      accommodate a wider variety of sources.
      </para>
		</remarks>
	</doc><doc for="ISymbolDocumentWriter.SetCheckSum">
		<summary>
			<para> Sets checksum information.
 </para>
		</summary>
		<param name="algorithmId">The GUID representing the algorithm ID. </param>
		<param name="checkSum">The checksum. </param>
		<remarks>
			<para> Sets the checksum for the document.</para>
		</remarks>
	</doc><doc for="ISymbolDocumentWriter">
		<summary>
			<para> Represents a document referenced by a symbol store.
      </para>
		</summary>
		<remarks>
			<para> A document is defined by a URL and a document type GUID.
      Optionally, the document source can be stored in the symbol store.
      </para>
			<note type="note">
      This interface is the managed
      counterpart of the <see langword="ISymUnmanagedDocumentWriter"/> interface,
      defined in the Debug Reference (located in the %\Microsoft.NET\Framework
      SDK\Tool Developers Guide\Docs directory). The unmanaged Symbol Store interfaces
      described in the Debug Reference provide an alternative set of unmanaged APIs
      for writing and manipulating symbolic information.
      
   </note>
		</remarks>
		<example>
			<para>The following code example demonstrates how an <see cref="System.Diagnostics.SymbolStore.ISymbolDocumentWriter"/> can be obtained when
   calling <see cref="Reflection.Emit.ModuleBuilder.DefineDocument"/>.</para>
			<codelink SampleID="ModuleBuilder_DefineDocument" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.SymbolStore.ISymbolWriter"/>
		<seealso cref="System.Reflection.Emit.ILGenerator.MarkSequencePoint" qualify="true"/>
		<seealso cref="System.Reflection.Emit.ModuleBuilder.DefineDocument" qualify="true"/>
	</doc>
</docs>
