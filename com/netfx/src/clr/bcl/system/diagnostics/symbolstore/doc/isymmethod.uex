<docs>
	<doc for="ISymbolMethod.GetNamespace">
		<summary>
			<para>
       Gets the namespace that the current method is defined within.
    </para>
		</summary>
		<returns>
			<para>
       The namespace that the current method is defined within.
    </para>
		</returns>
	</doc>
	<doc for="ISymbolMethod.Token">
		<summary>
			<para> Gets the <see cref="System.Diagnostics.SymbolStore.SymbolToken"/> containing the metadata for the current method.
   </para>
		</summary>
		<value>
			<para> The metadata token for the current method.
      </para>
		</value>
		<seealso cref="System.Diagnostics.SymbolStore.SymbolToken"/>
	</doc><doc for="ISymbolMethod.SequencePointCount">
		<summary>
			<para> Gets a count of the sequence points in the method.
      </para>
		</summary>
		<value>
			<para> The count of the sequence points in the method.
      </para>
		</value>
	</doc><doc for="ISymbolMethod.RootScope">
		<summary>
			<para> Gets the root lexical scope for the current method. This scope
      encloses the entire method.
      </para>
		</summary>
		<value>
			<para>The root lexical scope that encloses the entire method.</para>
		</value>
		<seealso topic="cpconemittingsymbolicinformationwithreflectionemit"/>
	</doc><doc for="ISymbolMethod.GetOffset">
		<summary>
			<para> Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified
      position.
      </para>
		</summary>
		<param name="document">The document for which the offset is requested. </param>
		<param name="line">The document line corresponding to the offset. </param>
		<param name="column">The document column corresponding to the offset. </param>
		<returns>
			<para> The
      offset within the specified document.
      </para>
		</returns>
		<remarks>
			<para> The parameters are returned
      in the order that they are defined within the signature of the
      method.
      </para>
		</remarks>
	</doc><doc for="ISymbolMethod.GetParameters">
		<summary>
			<para> Gets the parameters for the current method.
      </para>
		</summary>
		<returns>
			<para> The array of parameters for the current method.
      </para>
		</returns>
		<remarks>
			<para> The parameters are returned in the order that they are defined within the signature
      of the method.
      </para>
		</remarks>
	</doc><doc for="ISymbolMethod.GetSourceStartEnd">
		<summary>
			<para> Gets the start and end positions for the source of the current method.
      </para>
		</summary>
		<param name="docs">The starting and ending source documents. </param>
		<param name="lines">The starting and ending lines in the corresponding source documents. </param>
		<param name="columns">The starting and ending columns in the corresponding source documents. </param>
		<returns>
			<para><see langword="true"/> if the positions were defined;
   otherwise, <see langword="false"/> .
   </para>
		</returns>
		<remarks>
			<para> The first array position is the start, and the second is the end.
      </para>
		</remarks>
	</doc><doc for="ISymbolMethod.GetSequencePoints">
		<summary>
			<para> Gets the sequence points for the current method.
      </para>
		</summary>
		<param name="offsets">The array of byte offsets from the beginning of the method for the sequence points. </param>
		<param name="documents">The array of documents in which the sequence points are located. </param>
		<param name="lines">The array of lines in the documents at which the sequence points are located. </param>
		<param name="columns">The array of columns in the documents at which the sequence points are located. </param>
		<param name="endLines">The array of lines in the documents at which the sequence points end. </param>
		<param name="endColumns">The array of columns in the documents at which the sequence points end. </param>
		<remarks>
			<para> The sequence points are sorted by offset and are for all 
      documents in the method. Use <see cref="System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount"/>
      to retrieve the count of all sequence points and create arrays of the proper
      size.
      </para>
			<para><see cref="System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints"/> verifies the size of each array and
   places the sequence point information into each. If any array is
<see langword="null"/>
, the data for that array is not returned.</para>
		</remarks>
	</doc><doc for="ISymbolMethod.GetScope">
		<summary>
			<para> Returns the most enclosing lexical scope when given an offset within
      a method.
      </para>
		</summary>
		<param name="offset">The byte offset within the method of the lexical scope. </param>
		<returns>
			<para> The most enclosing lexical scope for the given byte offset within
      the method.
      </para>
		</returns>
		<remarks>
			<para> You can use the <see cref="System.Diagnostics.SymbolStore.ISymbolMethod.GetScope"/> method to start local variable searches.
   </para>
		</remarks>
		<seealso topic="cpconemittingsymbolicinformationwithreflectionemit"/>
	</doc><doc for="ISymbolMethod.GetRanges">
		<summary>
			<para> Gets an array
      of start and end offset pairs that correspond to the ranges
      of Microsoft intermediate language (MSIL) that a given position covers within this method.
      </para>
		</summary>
		<param name="document">The document for which the offset is requested. </param>
		<param name="line">The document line corresponding to the ranges. </param>
		<param name="column">The document column corresponding to the ranges. </param>
		<returns>
			<para> An array of start and end offset pairs.
      </para>
		</returns>
		<remarks>
			<para>The array is an array of integers in the format {{start1, end1},
      {start2, end2}...}. The number of range pairs is the length of the array divided
      by 2. </para>
		</remarks>
	</doc><doc for="ISymbolMethod">
		<summary>
			<para> Represents a method within a symbol store.
      </para>
		</summary>
		<remarks>
			<para> The <see cref="System.Diagnostics.SymbolStore.ISymbolMethod"/> interface provides access 
   only to the symbol-related attributes of a method, such as sequence points, lexical
   scopes, and parameter information. Use it with the <see cref="System.Reflection"/> classes to read the type-related attributes of a
   
   method.
   </para>
			<note type="note">
   This interface is the managed
   counterpart of the <see langword="ISymUnmanagedMethod"/> interface, defined
   in the Debug Reference (located in the %\Microsoft.NET\Framework SDK\Tool
   Developers Guide\Docs directory). The unmanaged Symbol Store interfaces
   described in the Debug Reference provide an alternative set of unmanaged APIs
   for writing and manipulating symbolic information.
   
</note>
		</remarks>
		<seealso cref="System.Diagnostics.SymbolStore.ISymbolReader"/>
		<seealso cref="System.Diagnostics.SymbolStore.ISymbolScope"/>
		<seealso topic="cpconemittingsymbolicinformationwithreflectionemit"/>
	</doc>
</docs>
