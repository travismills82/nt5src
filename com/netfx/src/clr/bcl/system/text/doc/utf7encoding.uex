<docs>
	<doc for="UTF7Encoding.CodePage">
		<summary>
			<para>
       Gets the code page identifier of the current instance of
       encoding.
    </para>
		</summary>
		<value>
			<list type="table">
				<listheader>
					<term>
             Value
          </term>
					<description>
             Meaning
          </description>
				</listheader>
				<item>
					<term>
             -1
          </term>
					<description>
             The encoding does not represent a code page.
          </description>
				</item>
				<item>
					<term>
             0-65535
          </term>
					<description>
             The code page identifier for the encoding
          </description>
				</item>
			</list>
		</value>
		<remarks>
			<para>
       The returned value is 65000.
    </para>
		</remarks>
	</doc>
	<doc for="UTF7Encoding.Decoder.GetCharCount">
		<summary>
			<para>
       Returns the number of characters produced by decoding a specified
       range of bytes in an array.
    </para>
		</summary>
		<param name="bytes">
    The byte array to decode.
 </param>
		<param name="index">
    The starting index of the byte array to decode.
 </param>
		<param name="count">
    The number of bytes to decode.
 </param>
		<returns>
			<para>
       The number of characters produced by decoding a range of bytes in
       the specified byte array.
    </para>
		</returns>
		<exception cref="System.ArgumentException">The bytes argument is null.
 </exception>
		<exception cref="System.ArgumentException">The index and count arguments do not denote a valid range in the byte array.
 </exception>
	</doc>
	<doc for="UTF7Encoding">
		<summary>
			<para> Represents a UTF-7 encoding of Unicode characters.
      </para>
		</summary>
		<remarks>
			<para> This class encodes Unicode characters using UCS
      Transformation Format, 7-bit form (UTF-7). This encoding supports all Unicode
      character values. Surrogate pairs are encoded as two separate surrogate code points.</para>
			<para>UTF-7 encoding was originally invented to efficiently transmit Unicode
      characters through e-mail systems optimized for US-ASCII text messages.</para>
			<para> This class contains the <see cref="System.Text.UTF7Encoding.GetCharCount"/> method that reports the number of Unicode
   characters that result from decoding an array of bytes, and the <see cref="System.Text.UTF7Encoding.GetChars"/> method
   that actually decodes an array of bytes. The <see cref="System.Text.UTF7Encoding.GetByteCount"/> method reports the number of bytes that
   result from encoding arrays of Unicode characters, and the <see cref="System.Text.UTF7Encoding.GetBytes"/>
   
   method actually encodes characters into an array of
   bytes.</para>
			<para>The <see cref="System.Text.UTF7Encoding.GetDecoder"/> method obtains an object to convert (decode) UTF-7
encoded bytes into Unicode characters, whereas the <see cref="System.Text.UTF7Encoding.GetEncoder"/> method obtains an object to convert (encode)
Unicode characters into UTF-7 encoded bytes. </para>
			<para> This class inherits from the <see cref="System.Text.Encoding"/>
class.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use a <see cref="System.Text.UTF7Encoding"/> to 
   encode a string of Unicode characters and store them in the byte array <c>encodedBytes</c>. Notice that when
<c>encodedBytes</c> is decoded back 
to a string there is no loss of data.</para>
			<codelink SampleID="System.Text.UTF7Encoding Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.Decoder"/>
		<seealso cref="System.Text.Encoder"/>
	</doc>
	<doc for="UTF7Encoding.UTF7Encoding">
		<overload>
			<para> Initializes a new instance of the <see cref="System.Text.UTF7Encoding"/> class.
   </para>
		</overload>
		<summary>
			<para> Initializes a new instance of the <see cref="System.Text.UTF7Encoding"/>
class.</para>
		</summary>
		<remarks>
			<para> By default, this constructor does not request optional
      characters be allowed in an encoding.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a new <see cref="System.Text.UTF7Encoding"/> 
instance and display the encoding name to the console.</para>
			<codelink SampleID="System.Text.UTF7Encoding.ctor1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UTF7Encoding.UTF7Encoding1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Text.UTF7Encoding"/> class, and specifies whether optional characters are
   allowed in an encoding.</para>
		</summary>
		<param name="allowOptionals">If <see langword="true"/>, optional characters are allowed in an encoding; otherwise, optional characters are not allowed.</param>
		<remarks>
			<para>When <paramref name="allowOptionals"/> is <see langword="true"/>, Unicode code points are
   encoded with a corresponding optional character instead of a modified base 64
   character. </para>
			<para>The optional characters are exclamation point ('!'), backward slash ('\'),
   virgule ('|'), double quote ('"'), sharp sign ('#'), dollar sign ('$'), percent
   sign ('%'), ampersand ('&amp;'), asterisk ('*'), semicolon (';'), left angle
   bracket ('&lt;'), right angle bracket ('&gt;'), left curly bracket ('{'), right
   curly bracket ('}'), left square bracket ('['), right square bracket (']'),
   equal sign ('= '), at sign ('@'), circumflex ('^'), underscore ('_'), and grave
   accent ('`').</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a new <see cref="System.Text.UTF7Encoding"/> 
instance that allows optional characters.</para>
			<codelink SampleID="System.Text.UTF7Encoding.ctor2 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UTF7Encoding.GetByteCount">
		<overload>
			<para>Calculates the number of bytes required to store the results of encoding a set of characters from a specified Unicode character array.</para>
		</overload>
		<summary>
			<para>Calculates the number of bytes required to store the results of encoding a
      range of characters from a specified Unicode character array.</para>
		</summary>
		<param name="chars">The Unicode character array to encode. </param>
		<param name="index">The index of the first character in <paramref name="chars"/> to encode. </param>
		<param name="count">The number of characters to encode. </param>
		<returns>
			<para> The number of bytes required to encode a range of
      characters in <paramref name="chars"/>.
      </para>
		</returns>
		<exception cref="System.ArgumentException"><para>Return value is greater than <see cref="System.Int32.MaxValue"/>.</para>
			<para>-or-</para>
			<para><paramref name="chars"/> contains an invalid Unicode surrogate pair.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="chars "/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="index"/> or <paramref name="count"/> is less than zero. </para>
			<para>-or-</para>
			<para><paramref name="index"/> plus <paramref name="count"/> is greater than the length of <paramref name="chars"/>.</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UTF7Encoding.GetByteCount"/> to calculate exactly, or <see cref="System.Text.UTF7Encoding.GetMaxByteCount"/> to
   calculate at most, the array size required by the <see cref="System.Text.UTF7Encoding.GetBytes"/>
   method to store encoded characters.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF7Encoding.GetByteCount"/> method to return the number of bytes required to 
   encode the array of Unicode characters <c>chars</c> using a <see cref="System.Text.UTF7Encoding"/>.</para>
			<codelink SampleID="System.Text.UTF7Encoding.GetByteCount Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UTF7Encoding.GetBytes">
		<overload>
			<para> Encodes a set of elements from a Unicode character array, and stores the results in a set of elements in a byte array.</para>
		</overload>
		<summary>
			<para> Encodes a specified range of elements from a Unicode character
      array, and stores the results in a specified range of elements in a byte array.
      </para>
		</summary>
		<param name="chars">The character array to encode. </param>
		<param name="charIndex">The index of the first character in <paramref name="chars"/> to encode. </param>
		<param name="charCount">The number of characters to encode. </param>
		<param name="bytes">The byte array where the encoded results are stored. </param>
		<param name="byteIndex">The index of the first character in <paramref name="bytes"/> where the encoded results are stored. </param>
		<returns>
			<para> The number of bytes stored in <paramref name="bytes"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="chars"/> or <paramref name="bytes"/> parameter is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><para>The <paramref name="charIndex"/>, <paramref name="charCount"/>, or <paramref name="byteIndex "/>parameter is less than zero.</para>
			<para>-or-</para><para> The sum of <paramref name="charIndex "/>and <paramref name="charCount "/>is greater than the length of <paramref name="chars"/>.</para>
			<para>-or-</para><para>
				<paramref name="byteIndex "/>is greater than the length of <paramref name="bytes"/>.</para></exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="byteIndex"/> is equal to the length of <paramref name="bytes"/>.</para>
			<para>-or-</para><para>No bytes have been stored in <paramref name="bytes"/>.</para>
			<para>-or-</para>
			<para>An invalid high or low member of a surrogate pair was encountered during encoding.</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UTF7Encoding.GetByteCount"/> to calculate exactly, or <see cref="System.Text.UTF7Encoding.GetMaxByteCount"/> to calculate at most, the array size required by the <see cref="System.Text.UTF7Encoding.GetBytes"/> method to store encoded characters.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF7Encoding.GetBytes"/> method to encode a range of elements from the 
   Unicode character array <c>chars</c>
and store the encoded bytes in a range of elements in the byte array <c>bytes</c>. The <see cref="System.Text.UTF7Encoding.GetByteCount"/> method is used to determine the number of bytes
required to store the encoded elements.</para>
			<codelink SampleID="System.Text.UTF7Encoding.GetBytes Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF7Encoding.GetByteCount"/>
		<seealso cref="System.Text.UTF7Encoding.GetMaxByteCount"/>
	</doc>
	<doc for="UTF7Encoding.GetCharCount">
		<overload>
			<para> Calculates the number of characters that would result from decoding a set of elements in a byte array.</para>
		</overload>
		<summary>
			<para> Calculates the number of characters that would result from decoding a specified range
      of elements in a byte array.
      </para>
		</summary>
		<param name="bytes">The byte array to decode. </param>
		<param name="index">The index of the first byte in <paramref name="bytes"/> to decode. </param>
		<param name="count">The number of bytes to decode. </param>
		<returns>
			<para> The number of characters that would result from decoding
      the specified range of elements in <paramref name="bytes"/>.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="bytes "/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index "/>and <paramref name="count "/>do not denote a valid range in <paramref name="bytes"/>.</exception>
		<remarks>
			<para>Use <see cref="System.Text.UTF7Encoding.GetCharCount"/> to calculate exactly, or <see cref="System.Text.UTF7Encoding.GetMaxCharCount"/> to
   calculate at most, the array size required by the <see cref="System.Text.UTF7Encoding.GetChars"/>
   method to store decoded bytes.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF7Encoding.GetCharCount"/> method to return the number of characters that 
   would result from decoding a range of elements in the byte array <c>bytes</c> using a <see cref="System.Text.UTF7Encoding"/>.</para>
			<codelink SampleID="System.Text.UnicodeEncoding.GetCharCount Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UTF7Encoding.GetChars">
		<overload>
			<para>Decodes a set of elements from a specified byte array, and stores them in a specified set of elements in a Unicode character array.</para>
		</overload>
		<summary>
			<para> Decodes a range of elements from a specified byte array, and stores them in a specified range of elements in a Unicode character array.
      </para>
		</summary>
		<param name="bytes">The byte array to decode. </param>
		<param name="byteIndex">The index of the first element in <paramref name="bytes"/> to decode. </param>
		<param name="byteCount">The number of elements to decode. </param>
		<param name="chars">The character array where the decoded results are stored. </param>
		<param name="charIndex">The index of the first element in <paramref name="chars"/> to store decoded results. </param>
		<returns>
			<para> The number of characters stored in <paramref name="chars"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>
				<paramref name="bytes "/>or <paramref name="chars "/> is <see langword="null"/>. </para></exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="byteIndex"/>, <paramref name="byteCount"/>, or <paramref name="charIndex"/> is less than zero.</para><para> -or-</para><para>
				<paramref name="byteIndex "/>plus <paramref name="byteCount "/>is greater than the length of <paramref name="bytes"/>.</para><para> -or-</para><para><paramref name="charIndex"/> is greater than the length of <paramref name="chars"/>.</para></exception>
		<exception cref="System.ArgumentException"><paramref name="bytes"/> contains an invalid sequence of bytes, and the <see cref="M:System.Text.UTF7Encoding.#ctor"/> constructor for this instance specified throwing an exception when invalid bytes are detected.</exception>
		<remarks>
			<para>Use <see cref="System.Text.UTF7Encoding.GetCharCount"/> to calculate exactly, or <see cref="System.Text.UTF7Encoding.GetMaxCharCount"/> to calculate at most, the array size required by the <see cref="System.Text.UTF7Encoding.GetChars"/> method to store decoded bytes.</para>
			<para>Unlike <see cref="System.Text.UTF8Encoding"/>, <see cref="System.Text.UTF7Encoding"/> does
not provide error detection. When invalid bytes are encountered, <see cref="System.Text.UTF7Encoding"/>
generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F,
the byte value is zero-extended into a Unicode character, the result is stored
in the <paramref name="chars"/> array, and any shift sequence is terminated. For
example, if the byte to encode is hexadecimal 0x81, the result character is
U+0081.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF7Encoding.GetChars"/> method to decode a range of elements in the byte 
   array <c>bytes</c> and store the
result in the character array <c>chars</c>. The <see cref="System.Text.UTF7Encoding.GetCharCount"/> method is used to calculate the
number of characters needed to store the decoded elements.</para>
			<codelink SampleID="System.Text.UTF7Encoding.GetChars Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF7Encoding.GetCharCount"/>
		<seealso cref="System.Text.UTF7Encoding.GetMaxCharCount"/>
		<seealso cref="System.Text.Encoding.GetChars"/>
	</doc>
	<doc for="UTF7Encoding.GetDecoder">
		<summary>
			<para> Obtains a decoder that can convert a UTF-7 encoded
      sequence of bytes into a sequence of characters.
      </para>
		</summary>
		<returns>
			<para> A <see cref="System.Text.Decoder"/>
.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Text.UTF7Encoding.GetChars"/>
method converts (decodes) adjacent blocks of bytes into adjacent blocks of
characters. The <see cref="System.Text.UTF7Encoding.GetDecoder"/> method returns a <see cref="System.Text.Decoder"/> that maintains state information between calls so
it can correctly decode UTF-7 byte sequences that span blocks. The <see cref="System.Text.Decoder"/> preserves trailing
bytes at the end of the blocks and uses the trailing
bytes in the next decoding operation.</para>
			<para><see cref="System.Text.UTF7Encoding.GetDecoder"/> and <see cref="System.Text.UTF7Encoding.GetEncoder"/> are useful in network transmission
and file operations, since those operations often deal with blocks of data instead of a complete stream.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF7Encoding.GetDecoder"/> method to obtain a decoder to convert the UTF-7 
   encoded bytes in <c>bytes</c> into a
sequence of characters in <c>chars</c>.</para>
			<codelink SampleID="System.Text.UTF7Encoding.GetDecoder Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF7Encoding.GetCharCount"/>
		<seealso cref="System.Text.UTF7Encoding.GetChars"/>
	</doc>
	<doc for="UTF7Encoding.GetMaxByteCount">
		<summary>
			<para> Calculates the maximum number of bytes required to encode a specified
      number of characters.
      </para>
		</summary>
		<param name="charCount">The number of characters to encode. </param>
		<returns>
			<para> The maximum number of bytes required to encode
   <paramref name="charCount"/> number of
      characters.
      </para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="charCount"/> is less than zero.</para>
			<para>-or-</para>
			<para><paramref name="charCount"/> is too large to store as type <see cref="System.Int32"/>. </para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UTF7Encoding.GetByteCount"/> to calculate exactly, or <see cref="System.Text.UTF7Encoding.GetMaxByteCount"/> to calculate at most, the array size required by the <see cref="System.Text.UTF7Encoding.GetBytes"/> method to store encoded characters.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use 
      the <see cref="System.Text.UTF7Encoding.GetMaxByteCount"/> method to return the maximum number of bytes
      required to encode a specified number of characters stored in the variable <c>charCount</c>
   .</para>
			<codelink SampleID="System.Text.UTF7Encoding.GetMaxByteCount Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF7Encoding.GetBytes"/>
		<seealso cref="System.Text.Encoder.GetBytes"/>
	</doc>
	<doc for="UTF7Encoding.GetMaxCharCount">
		<summary>
			<para> Calculates the maximum number of characters that can result from decoding a specified
      number of bytes.
      </para>
		</summary>
		<param name="byteCount">The number of bytes to decode. </param>
		<returns>
			<para> The maximum number of characters that can result from decoding
   <paramref name="byteCount"/>
   number of bytes.
   </para>
		</returns>
		<remarks>
			<para>Use <see cref="System.Text.UTF7Encoding.GetCharCount"/> to calculate exactly, or <see cref="System.Text.UTF7Encoding.GetMaxCharCount"/> to calculate at most, the array size required by the <see cref="System.Text.UTF7Encoding.GetChars"/> method to store decoded bytes.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use 
      the <see cref="System.Text.UTF7Encoding.GetMaxCharCount"/> method to return the maximum number of characters
      that can result from decoding a specified number of bytes stored in the variable
      <c>byteCount</c>.</para>
			<codelink SampleID="System.Text.UTF7Encoding.GetMaxCharCount Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF7Encoding.GetChars"/>
		<seealso cref="System.Text.Decoder.GetChars"/>
	</doc>
	<doc for="UTF7Encoding.GetEncoder">
		<summary>
			<para> Obtains an encoder that can convert a sequence of
      characters into a UTF-7 encoded sequence of bytes.
      </para>
		</summary>
		<returns>
			<para> An <see cref="System.Text.Encoder"/>
.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Text.UTF7Encoding.GetBytes"/> method converts (encodes) adjacent
   blocks of characters into adjacent blocks of bytes. The <see cref="System.Text.UTF7Encoding.GetEncoder"/> method returns an <see cref="System.Text.Encoder"/> that maintains state information between calls so it can correctly encode characters that span blocks.</para>
			<para><see cref="System.Text.UTF7Encoding.GetDecoder"/> and <see cref="System.Text.UTF7Encoding.GetEncoder"/> are useful in network
transmission and file operations, since those operations often deal with blocks
of data instead of a complete stream.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF7Encoding.GetEncoder"/> method to obtain an encoder to convert a sequence
   of characters in <c>chars</c> into a
UTF-7 encoded sequence of bytes in <c>bytes</c>.</para>
			<codelink SampleID="System.Text.UTF7Encoding.GetEncoder Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF7Encoding.GetByteCount"/>
		<seealso cref="System.Text.UTF7Encoding.GetBytes"/>
	</doc>
</docs>
