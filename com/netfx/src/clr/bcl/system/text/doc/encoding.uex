<docs>
	<doc for="Encoding.GetMaxByteCount">
		<summary>
			<para>
       When overridden in a derived class,
       returns the maximum number of bytes required to encode a given
       number of characters.
    </para>
		</summary>
		<param name="charCount">
    The number of characters to encode.
 </param>
		<returns>
			<para>
       The maximum number of bytes required for encoding a given
       number of characters.
    </para>
		</returns>
		<remarks>
			<para>
				<see cref="System.Text.Encoding.GetMaxByteCount"/> can be used to determine an 
       appropriate buffer size for byte arrays passed to the <see cref="System.Text.Encoding.GetBytes"/>
       of this encoding.
    </para>
			<para>
       All encoding must guarantee that no buffer overflow exceptions
       will occur if buffers are sized according to the results of this method.
    </para>
		</remarks>
	</doc>
	<doc for="Encoding.GetMaxCharCount">
		<summary>
			<para>
       When overridden in a derived class,
       returns the maximum number of characters produced by decoding a
       given number of bytes.
    </para>
		</summary>
		<param name="byteCount">
    The number of bytes to encode.
 </param>
		<returns>
			<para>
       The maximum number of characters produced by decoding a
       specified number of bytes.
    </para>
		</returns>
		<remarks>
			<para>
       This method can be used to determine an appropriate
       buffer size for character arrays passed to <see cref="System.Text.Encoding.GetChars"/>
       or a <see cref="System.Text.Decoder"/>
       for this encoding. All
       encoding must guarantee that no buffer overflow exceptions will occur if
       buffers are sized according to the results of this method.
    </para>
		</remarks>
	</doc>
	<doc for="Encoding.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer hash code.</para>
		</returns>
	</doc><doc for="Encoding.Encoding">
		<overload>
			<para> Initializes a new instance of the <see cref="System.Text.Encoding"/> class.
   </para>
		</overload>
		<summary>
			<para> Initializes a new instance of the <see cref="System.Text.Encoding"/> class.
   </para>
		</summary>
	</doc><doc for="Encoding.Equals">
		<summary>
			<para>Determines whether the current instance and the 
      specified <see cref="System.Object"/> represent the same type and value.</para>
		</summary>
		<param name="value">The <see cref="System.Object"/> to compare to the current instance.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> represents the same type and value as 
   the current instance; otherwise,
<see langword="false"/>. <see langword="false"/> if <paramref name="value"/> is 
<see langword="null"/> or is not an instance of <see cref="System.Text.Encoding"/>.</para>
		</returns>
	</doc><doc for="Encoding.UTF8">
		<summary>
			<para> Gets an encoding for the UTF-8 format.
      </para>
		</summary>
		<value>
			<para>An encoding for the UTF-8 format. </para>
		</value>
	</doc><doc for="Encoding.CodePage">
		<summary>
			<para> When overridden in a derived class, gets the code
      page identifier of this encoding.
      </para>
		</summary>
		<value>
			<para>The code page identifier of this encoding. </para>
		</value>
		<remarks>
			<para> This property must be implemented or overridden.
      </para>
		</remarks>
		<seealso cref="M:System.Text.Encoding.#ctor"/>
	</doc><doc for="Encoding.Default">
		<summary>
			<para> Gets an encoding for the system's current ANSI code page.
      </para>
		</summary>
		<value>
			<para>An encoding for the system's current ANSI code page. </para>
		</value>
		<remarks>
			<para>You can also retrieve your system's current ANSI code page with the Win32 API 
      GetACP() method. </para>
		</remarks>
	</doc><doc for="Encoding.WindowsCodePage">
		<summary>
			<para> Gets the Windows operating system code page that most closely corresponds to
      this encoding.
      </para>
		</summary>
		<value>
			<para>The Windows operating system code page that most closely corresponds to this encoding. </para>
		</value>
	</doc><doc for="Encoding.HeaderName">
		<summary>
			<para> Gets the name
      for this encoding that can be used with mail agent header tags.
      </para>
		</summary>
		<value>
			<para>The name for this encoding that can be used with mail agent header tags. </para>
		</value>
		<remarks>
			<para>For example, if this encoding is equivalent to <see cref="System.Text.UTF8Encoding"/>, this
   property returns "utf-8". </para>
			<para> If the encoding cannot be used, the string is empty. </para>
		</remarks>
	</doc><doc for="Encoding.Unicode">
		<summary>
			<para> Gets an encoding for the Unicode format in little-endian
      byte order.
      </para>
		</summary>
		<value>
			<para> An encoding for the Unicode format in little-endian byte order. </para>
		</value>
		<remarks>
			<para>Unicode characters can be stored in two different byte orders: big-endian and little-endian. On little-endian platforms such as Intel machines, it is generally more efficient to store Unicode characters in little-endian byte order. However, many other platforms can store Unicode characters in big-endian byte order. </para>
			<para>Unicode files can be distinguished by the presence of the byte order mark (U+FEFF), which is represented as hexadecimal 0xFE 0xFF on big-endian platforms and hexadecimal 0xFF 0xFE on little-endian platforms. </para>
		</remarks>
	</doc><doc for="Encoding.Convert1">
		<summary>
			<para> Converts a range of bytes in a byte array from one encoding to
      another.
      </para>
		</summary>
		<param name="srcEncoding">The source of encoding. </param>
		<param name="dstEncoding">The destination of encoding. </param>
		<param name="bytes">The byte array to convert. </param>
		<param name="index">The starting index of the byte array to convert. </param>
		<param name="count">The number of bytes to convert. </param>
		<returns>
			<para> An array of type <see cref="System.Byte"/>
containing the result of the conversion.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><para><paramref name="srcEncoding"/>, <paramref name="dstEncoding"/>, or <paramref name="bytes"/> arguments are <see langword="null"/>. </para></exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the byte array. </exception>
		<remarks>
			<para> This method converts <paramref name="count"/>
bytes at the starting <paramref name="index"/> from <paramref name="srcEncoding"/> to <paramref name="dstEncoding"/>.</para>
		</remarks>
	</doc><doc for="Encoding.GetDecoder">
		<summary>
			<para> Returns a <see cref="System.Text.Decoder"/> for this encoding.
   </para>
		</summary>
		<returns>
			<para> Returns a <see cref="System.Text.Decoder"/> for this encoding. The <see cref="System.Text.Decoder"/>
can be used to decode a sequence of bytes into
characters.</para>
		</returns>
		<remarks>
			<para> Contrary to the <see cref="System.Text.Encoding.GetChars"/> methods, a <see cref="System.Text.Decoder"/>
can convert partial sequences of
bytes into partial sequences of characters by maintaining the appropriate state
between the conversions.</para>
			<para> This default implementation returns a <see cref="System.Text.Decoder"/> that
forwards calls to the <see cref="System.Text.Encoding.GetCharCount"/> and <see cref="System.Text.Encoding.GetChars"/>
methods to the corresponding methods of this encoding. Encodings that require
state to be maintained between successive conversions can override this
method and return an instance of an appropriate <see cref="System.Text.Decoder"/>
implementation.</para>
		</remarks>
		<seealso cref="System.Text.Encoding.GetCharCount"/>
		<seealso cref="System.Text.Encoding.GetChars"/>
	</doc><doc for="Encoding.GetEncoder">
		<summary>
			<para> An <see cref="System.Text.Encoder"/>
for this encoding.</para>
		</summary>
		<returns>
			<para> An <see cref="System.Text.Encoder"/> for this
   encoding. The <see cref="System.Text.Encoder"/>
   can be used to encode a sequence of
   characters into
   bytes.</para>
		</returns>
		<remarks>
			<para> Contrary to <see cref="System.Text.Encoding.GetBytes"/>, an <see cref="System.Text.Encoder"/> can convert partial
   sequences of characters into partial sequences of bytes by maintaining the
   appropriate state between the conversions.
   </para>
			<para> This default implementation returns an <see cref="System.Text.Encoder"/>
that forwards calls to <see cref="System.Text.Encoding.GetByteCount"/> and <see cref="System.Text.Encoding.GetBytes"/>
to the corresponding methods of this encoding. Encodings that require state
to be maintained between successive conversions can override this method and
return an instance of an appropriate <see cref="System.Text.Encoder"/>
implementation.</para>
		</remarks>
	</doc><doc for="Encoding.GetBytes1">
		<summary>
			<para> Encodes a range of characters from a character array into
      a byte array.
      </para>
		</summary>
		<param name="chars">The character array to encode. </param>
		<param name="index">The starting index of the character array to encode. </param>
		<param name="count">The number of characters to encode. </param>
		<returns>
			<para>A byte array containing the encoded representation of the specified range of 
      characters in <paramref name="chars"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="chars"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="index"/> and <paramref name="count"/> parameters do not denote a valid range in <paramref name="chars"/> . </exception>
		<seealso cref="System.Text.Encoding.GetByteCount"/>
		<seealso cref="System.Text.Encoding.GetMaxByteCount"/>
		<seealso cref="System.Text.Encoding.GetDecoder"/>
		<seealso cref="System.Text.Encoding.GetEncoder"/>
	</doc><doc for="Encoding.GetBytes">
		<overload>
			<para>Encodes all or part of a specified <see cref="System.String"/> or character array into a byte 
   array. </para>
		</overload>
		<summary>
			<para> Encodes a specified character array into a byte
      array.
      </para>
		</summary>
		<param name="chars">The character array to encode. </param>
		<returns>
			<para> A byte array containing the encoded representation of 
   <paramref name="chars"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="chars"/> is <see langword="null"/>. </exception>
		<seealso cref="System.Text.Encoding.GetByteCount"/>
		<seealso cref="System.Text.Encoding.GetMaxByteCount"/>
		<seealso cref="System.Text.Encoding.GetDecoder"/>
		<seealso cref="System.Text.Encoding.GetEncoder"/>
	</doc><doc for="Encoding.GetBytes3">
		<summary>
			<para> Encodes a specified <see cref="System.String"/> into an array of bytes.
   </para>
		</summary>
		<param name="s">The <see cref="System.String"/> to encode. </param>
		<returns>
			<para> A byte array 
      containing the encoded representation of the
      specified string.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> is <see langword="null"/>. </exception>
		<remarks>
			<para> The <see cref="System.Text.Encoding.GetBytes"/>
method maintains no state between conversions. The method is intended
for conversion of a complete block of
characters in one operation.</para>
		</remarks>
		<seealso cref="System.Text.Encoding.GetByteCount"/>
		<seealso cref="System.Text.Encoding.GetMaxByteCount"/>
		<seealso cref="System.Text.Encoding.GetDecoder"/>
		<seealso cref="System.Text.Encoding.GetEncoder"/>
	</doc><doc for="Encoding.GetChars">
		<overload>
			<para> Decodes a byte array into an array of characters.
      </para>
		</overload>
		<summary>
			<para> Decodes a byte array into an array of characters.
      </para>
		</summary>
		<param name="bytes">The byte array to decode. </param>
		<returns>
			<para> A character array containing the decoded character representation from 
      array <paramref name="bytes"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="bytes"/> is <see langword="null"/>. </exception>
		<remarks>
			<para><see cref="System.Text.Encoding.GetChars"/> assumes that the byte array contains
   all the bytes necessary to produce whole characters. If your bytes might be in
   multiple byte arrays (that is, the bytes corresponding to a single character
   might be at the end of one byte array and the beginning of another), use the
<see cref="System.Text.Decoder"/> 
class, which maintains state between
multiple calls.</para>
		</remarks>
		<seealso cref="System.Text.Encoding.GetCharCount"/>
		<seealso cref="System.Text.Encoding.GetMaxCharCount"/>
	</doc><doc for="Encoding.GetChars1">
		<summary>
			<para> Decodes a range of bytes from a byte array into a character array.
      </para>
		</summary>
		<param name="bytes">The byte array to decode. </param>
		<param name="index">The starting index of the byte array to decode. </param>
		<param name="count">The number of bytes to decode. </param>
		<returns>
			<para> A character array containing the decoded character 
      representation from a range of array <paramref name="bytes"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="bytes "/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index "/> and <paramref name="count "/> do not denote a valid range in the byte array. </exception>
		<remarks>
			<para><see cref="System.Text.Encoding.GetChars"/> assumes that the byte
   array contains all the bytes necessary to produce whole characters. If
   your bytes might be in multiple byte arrays (that is, the bytes
   corresponding to a single character might be at the end of one byte
   array and the beginning of another), use the <see cref="System.Text.Decoder"/>
   
   class, which maintains state between
   multiple calls.
   </para>
		</remarks>
		<seealso cref="System.Text.Encoding.GetCharCount"/>
		<seealso cref="System.Text.Encoding.GetMaxCharCount"/>
	</doc><doc for="Encoding.Encoding1">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Text.Encoding"/> class.
   </para>
		</summary>
		<param name="codePage">A code page value that corresponds to the preferred encoding.</param>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="codePage"/> is less than zero.</exception>
		<seealso cref="System.Text.Encoding.CodePage"/>
		<seealso cref="System.Text.Encoding.GetEncoding"/>
	</doc><doc for="Encoding.GetString">
		<overload>
			<para> Decodes the specified byte array into a string.
      </para>
		</overload>
		<summary>
			<para> Returns a string containing the decoded representation of the
      specified byte array.
      </para>
		</summary>
		<param name="bytes">The byte array to decode. </param>
		<returns>
			<para> A string containing the decoded representation of the specified
      byte array.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="bytes"/> parameter is <see langword="null"/>. </exception>
		<remarks>
			<para><see cref="System.Text.Encoding.GetString"/>assumes that the byte
   array contains all the bytes necessary to produce whole characters. If
   your bytes might be in multiple byte arrays (that is, the bytes
   corresponding to a single character might be at the end of one byte
   array and the beginning of another), use the <see cref="System.Text.Decoder"/>
   
   class, which will maintain state between
   multiple calls.
   </para>
		</remarks>
		<example>
			<para>The following code example demonstrates how to read a UTF8 encoded string 
      from binary file.</para>
			<codelink SampleID="System.Text.Encoding.GetString" SnippetID="1"/>
		</example>
	</doc><doc for="Encoding.GetString1">
		<summary>
			<para> Returns a string containing the decoded representation of a range
      of bytes in a byte array.
      </para>
		</summary>
		<param name="bytes">The byte array to decode. </param>
		<param name="index">The starting index of the byte array to decode. </param>
		<param name="count">The number of bytes to decode. </param>
		<returns>
			<para> A string containing the decoded representation of a range
      of bytes in the specified byte array.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="bytes "/>parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="index "/>and <paramref name="count "/>parameters do not denote a valid range in the byte array. </exception>
		<remarks>
			<para><see cref="System.Text.Encoding.GetString"/>assumes that the byte array contains all the bytes
   necessary to produce whole characters. If your bytes might be in multiple byte
   arrays (that is, the bytes corresponding to a single character might be at
   the end of one byte array and the beginning of another), use
   the <see cref="System.Text.Decoder"/> class, which will maintain state between multiple
   calls. </para>
		</remarks>
		<example>
			<para>The following code example demonstrates how to read a UTF8 encoded string from binary file.</para>
			<codelink SampleID="System.Text.Encoding.GetString" SnippetID="1"/>
		</example>
	</doc><doc for="Encoding.EncodingName">
		<summary>
			<para> Gets the human-readable description of the
      encoding.
      </para>
		</summary>
		<value>
			<para>The human-readable description of the encoding.</para>
		</value>
		<remarks>
			<para>An example of an <see cref="System.Text.Encoding.EncodingName"/> is Hebrew (DOS) for code page 862. </para>
		</remarks>
	</doc><doc for="Encoding.GetByteCount">
		<overload>
			<para> Calculates the number of bytes required to encode a specified
      character array.
      </para>
		</overload>
		<summary>
			<para> Calculates the number of bytes required to encode a specified
      character array.
      </para>
		</summary>
		<param name="chars">The character array to encode. </param>
		<returns>
			<para> The number of bytes needed to encode
   <paramref name="chars"/>.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="chars "/>is <see langword="null"/>.</exception>
		<remarks>
			<para><see cref="System.Text.Encoding.GetByteCount"/> can be used to determine the exact the number of bytes that will
   be produced from encoding the given array of characters. An appropriately sized
   buffer for that conversion can then be allocated. </para>
			<para>Alternatively, <see cref="System.Text.Encoding.GetMaxByteCount"/> can be used to determine the
maximum number of bytes that will be produced from converting a given number of
characters. A buffer of that size can then be reused for multiple conversions. </para>
			<para>The <see cref="System.Text.Encoding.GetByteCount"/> method generally uses less memory, whereas the
<see cref="System.Text.Encoding.GetMaxByteCount"/> method 
generally executes faster. </para>
		</remarks>
	</doc><doc for="Encoding.GetCharCount">
		<overload>
			<para> Calculates the number of characters produced by decoding an array of
      bytes.
      </para>
		</overload>
		<summary>
			<para> Calculates the number of characters produced by decoding an array of
      bytes.
      </para>
		</summary>
		<param name="bytes">The byte array to decode. </param>
		<returns>
			<para> The number of characters produced by decoding the
      specified byte array.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="bytes"/> is <see langword="null"/>. </exception>
		<remarks>
			<para>The <see cref="System.Text.Encoding.GetCharCount"/> method can be used to determine the exact
   the number of characters that will be produced from converting a given range of
   bytes. An appropriately sized buffer for that conversion can then be allocated. </para>
			<para>
   Alternatively, the <see cref="System.Text.Encoding.GetMaxCharCount"/>
   method can be used to determine the maximum number of characters that will
   produced for a given number of bytes. A buffer of that size can then be reused
   for multiple conversions. </para>
			<para>
   The <see cref="System.Text.Encoding.GetCharCount"/> method
   generally uses less memory, whereas  the
<see cref="System.Text.Encoding.GetMaxCharCount"/> method generally executes faster. </para>
		</remarks>
	</doc><doc for="Encoding.GetEncoding1">
		<overload>
			<para>Returns an <see cref="System.Text.Encoding"/> for the specified code page value or name.</para>
		</overload>
		<summary>
			<para>Returns an <see cref="System.Text.Encoding"/> that corresponds to the specified code page value.</para>
		</summary>
		<param name="codepage">A code page value that corresponds to the preferred encoding. </param>
		<returns>
			<para>The requested encoding.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="codepage"/> is less than zero or greater than 65535.</exception>
		<exception cref="System.NotSupportedException"><paramref name="codepage"/> is not supported by the current regional options of the computer executing this method.</exception>
		<remarks>
			<para> The <see cref="System.Text.Encoding.GetEncoding"/> method relies on the underlying platform to support most code pages.
   However, system support is supplied for the following cases: Specify code page
   0 for the default
   encoding, that is, the encoding specified
   in the regional settings for the computer executing this method; 1200 for
   little-endian Unicode (UTF-16LE); 1201 for big-endian Unicode (UTF-16BE); 1252 for Windows
   operating system (windows-1252); 65000 for UTF-7; 65001 for UTF-8; 20127
   for ASCII, and 54936 for GB18030 (Chinese Simplified).</para>
			<para> For example, the encoding for the windows-1252 code page (code
   page value 1252) can be created by the following C# code:</para>
			<para><c>Encoding enc = Encoding.GetEncoding(1252);</c>
			</para>
			<para> A specific code page might not be supported by certain
   platforms. For
   example, the Japanese shift-jis code page (code page
   932) might not be supported in the United States version of Windows 98. In that
   case, the <see cref="System.Text.Encoding.GetEncoding"/>
   
   method throws <see cref="System.NotSupportedException"/> when the following
   C# code is executed:</para>
			<para><c>Encoding enc = Encoding.GetEncoding(932);</c>
			</para>
		</remarks>
	</doc><doc for="Encoding.GetEncoding">
		<summary>
			<para>Returns an <see cref="System.Text.Encoding"/> for the specified name.</para>
		</summary>
		<param name="name">The name of an <see cref="System.Text.Encoding"/>. </param>
		<returns>
			<para>The requested encoding.</para>
		</returns>
		<exception cref="System.NotSupportedException">The <paramref name="name"/> encoding is not supported by the current regional options of the computer executing this method.</exception>
		<remarks>
			<para>The <see cref="System.Text.Encoding.GetEncoding"/> method relies on the underlying platform to support most code pages. However, system support is supplied for
   the following cases: The default encoding, that is, the encoding specified in the
   regional settings for the computer executing this method; little-endian Unicode (UTF-16LE); big-endian
   Unicode (UTF-16BE); Windows operating system (windows-1252); UTF-7; UTF-8; ASCII, and GB18030 (Chinese Simplified).</para>
			<para>Specify one of the names listed in the following table to obtain
   the system supported encoding with the corresponding code page.</para>
			<list type="table">
				<listheader>
					<term>code page</term>
					<description>name</description>
				</listheader>
				<item>
					<term> 1200</term>
					<description> "UTF-16LE", "utf-16", "ucs-2",
         "unicode", or "ISO-10646-UCS-2" </description>
				</item>
				<item>
					<term> 1201</term>
					<description> "UTF-16BE" or "unicodeFFFE"</description>
				</item>
				<item>
					<term> 1252</term>
					<description>"windows-1252"</description>
				</item>
				<item>
					<term> 65000</term>
					<description> "utf-7",
         "csUnicode11UTF7", "unicode-1-1-utf-7", "unicode-2-0-utf-7",
         "x-unicode-1-1-utf-7", or "x-unicode-2-0-utf-7"</description>
				</item>
				<item>
					<term> 65001</term>
					<description>"utf-8", "unicode-1-1-utf-8", "unicode-2-0-utf-8",
         "x-unicode-1-1-utf-8", or "x-unicode-2-0-utf-8"</description>
				</item>
				<item>
					<term> 20127</term>
					<description>"us-ascii", "us", "ascii", "ANSI_X3.4-1968",
         "ANSI_X3.4-1986", "cp367", "csASCII", "IBM367", "iso-ir-6",
         "ISO646-US", or "ISO_646.irv:1991"</description>
				</item>
				<item>
					<term> 54936</term>
					<description>"GB18030"</description>
				</item>
			</list>
			<para>A specific code page might not be supported by certain platforms. For example, the Japanese shift-jis code page (code page 932) might not be supported in the United States version of Windows 98. In that case, the <see cref="System.Text.Encoding.GetEncoding"/> method throws <see cref="System.NotSupportedException"/> when the following C# code is executed:</para>
			<para><c>Encoding enc = Encoding.GetEncoding("shift-jis");</c>
			</para>
		</remarks>
	</doc><doc for="Encoding.GetByteCount2">
		<summary>
			<para>Calculates the number of bytes required to encode the
      specified <see cref="System.String"/>.</para>
		</summary>
		<param name="s">The <see cref="System.String"/> to encode.</param>
		<returns>
			<para>The number of bytes required to encode <paramref name="s"/>. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> is null.</exception>
		<remarks>
			<para><see cref="System.Text.Encoding.GetByteCount"/> can be used to determine the exact the
   number of bytes that will be produced from encoding the given
<see cref="System.String"/>. An appropriately 
   sized buffer for that conversion can then be allocated. </para>
			<para>Alternatively, <see cref="System.Text.Encoding.GetMaxByteCount"/> can be used to determine the maximum
number of bytes that will be produced from converting a given
<see cref="System.String"/>. A buffer of that 
size can then be reused for multiple conversions. </para>
			<para>The <see cref="System.Text.Encoding.GetByteCount"/> method generally uses less memory, whereas
the <see cref="System.Text.Encoding.GetMaxByteCount"/> method generally executes faster. </para>
		</remarks>
	</doc>
	<doc for="Encoding.GetBytes2">
		<summary>
			<para> When overridden in a derived class, encodes a
      range of characters from a character array into a byte array.
      </para>
		</summary>
		<param name="chars">The character array to encode. </param>
		<param name="charIndex">The starting index of the character array to encode. </param>
		<param name="charCount">The number of characters to encode. </param>
		<param name="bytes">The byte array where the resulting encoding is stored. </param>
		<param name="byteIndex">The starting index of the resulting encoding in the byte array. </param>
		<returns>
			<para> The number of bytes stored in array <paramref name="bytes"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="bytes"/> does not contain sufficient space to store the encoded characters.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="chars"/> or <paramref name="bytes"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="charIndex"/>, <paramref name="charCount "/>or <paramref name="byteIndex "/>is less than zero. </para>
			<para>-or-</para>
			<para><paramref name="charIndex "/>+ <paramref name="charCount "/>is greater than the length of <paramref name="chars"/>. </para></exception>
		<remarks>
			<para> Encodes a range of characters in a character array into a
      range of bytes in a byte array. An exception occurs if the byte
      array is not large enough to hold the complete encoding of the
      characters.
      </para>
			<para><see cref="System.Text.Encoding.GetByteCount"/> can be used to determine the exact number of bytes
   that will be produced for a given range of characters. Alternatively, <see cref="System.Text.Encoding.GetMaxByteCount"/> can be used to determine the maximum
   number of bytes that will be produced for a given number of characters,
   regardless of the actual character values. </para>
		</remarks>
		<seealso cref="System.Text.Encoding.GetByteCount"/>
		<seealso cref="System.Text.Encoding.GetMaxByteCount"/>
		<seealso cref="System.Text.Encoding.GetDecoder"/>
		<seealso cref="System.Text.Encoding.GetEncoder"/>
	</doc>
	<doc for="Encoding.GetBytes4">
		<summary>
			<para> Encodes the specified range of a <see cref="System.String"/> into the specified range of a byte array.</para>
		</summary>
		<param name="s">A <see cref="System.String"/> to encode.</param>
		<param name=" charIndex">The first index of <paramref name="s"/> from which to encode. </param>
		<param name=" charCount">The number of characters of <paramref name="s"/> to encode. </param>
		<param name=" bytes">The byte array to encode into. </param>
		<param name=" byteIndex">The first index of <paramref name="bytes"/> to encode into. </param>
		<returns>
			<para>The number of encoded bytes in array <paramref name="bytes"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="bytes"/> does not contain sufficient space to store the encoded characters.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> or <paramref name="bytes"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="charIndex"/>, <paramref name="charCount"/>, or <paramref name="byteIndex"/> is less than zero.</para>
			<para>-or-</para>
			<para><paramref name="charIndex"/> and <paramref name="charCount"/> do not specify a valid range in <paramref name="s "/>(that is, (<paramref name="charIndex"/> + <paramref name="charCount"/>) is greater than the length of <paramref name="s"/>).</para></exception>
	</doc>
	<doc for="Encoding.GetByteCount1">
		<summary>
			<para> When overridden in a derived class,
      returns the number of bytes required to encode a range of
      characters in the specified character array.
      </para>
		</summary>
		<param name="chars">The character array to encode. </param>
		<param name="index">The starting index of the character array to encode. </param>
		<param name="count">The number of characters to encode. </param>
		<returns>
			<para> The number of bytes required to encode the specified
      range of characters.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="chars "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="index "/>or <paramref name="count"/> is less than zero.</para>
			<para>-or-</para>
			<para><paramref name="index "/>and <paramref name="count "/>do not denote a valid range in the character array. </para></exception>
		<remarks>
			<para><see cref="System.Text.Encoding.GetByteCount"/> can be used to determine the exact the
   number of bytes that will be produced from encoding the given array of
   characters. An appropriately sized buffer for that conversion can then be
   allocated. </para>
			<para>Alternatively, <see cref="System.Text.Encoding.GetMaxByteCount"/> can be used to determine the maximum
number of bytes that will be produced from converting a given number of
characters. A buffer of that size can then be reused for multiple conversions. </para>
			<para>The <see cref="System.Text.Encoding.GetByteCount"/> method generally uses less memory, whereas
the <see cref="System.Text.Encoding.GetMaxByteCount"/> method generally executes faster. </para>
		</remarks>
	</doc>
	<doc for="Encoding.ASCII">
		<summary>
			<para> Gets an encoding for the ASCII (7 bit) character set.
      </para>
		</summary>
		<value>
			<para>An encoding for the ASCII (7 bit) character set. </para>
		</value>
		<remarks>
			<para>ASCII characters are limited to the lowest 128 Unicode
      characters, from U+0000 to U+007f.
      </para>
		</remarks>
		<example>
			<codelink SampleID="System.Text.Encoding.ASCII Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Encoding.BigEndianUnicode">
		<summary>
			<para> Gets an encoding for the Unicode format in the big-endian
      byte order.
      </para>
		</summary>
		<value>
			<para>An encoding for the Unicode format in the big-endian byte order. </para>
		</value>
		<remarks>
			<para> Unicode characters
      can be stored
      in two different byte orders: big-endian and little-endian.
      On little-endian platforms such as Intel machines, it is
      generally more efficient to store Unicode characters in little-endian order.
      However, many other platforms can store Unicode characters in big-endian order.
      </para>
			<para>Unicode files can be distinguished by the presence of the byte order mark
      (U+FEFF), which is represented as hexadecimal 0xFE 0xFF on big-endian
      platforms and hexadecimal 0xFF 0xFE on little-endian platforms. </para>
		</remarks>
		<example>
			<codelink SampleID="System.Text.Encoding.BigEndianUnicode" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Encoding.Convert">
		<overload>
			<para> Converts a byte array from one encoding to another.
      </para>
		</overload>
		<summary>
			<para> Converts a byte array from one encoding to another.
      </para>
		</summary>
		<param name="srcEncoding">The encoding that <paramref name="bytes"/> is in. </param>
		<param name="dstEncoding">The encoding desired for the returned byte array. </param>
		<param name="bytes">The bytes to convert. </param>
		<returns>
			<para> An array of type <see cref="System.Byte"/> containing the result
   of the conversion.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="srcEncoding"/>, <paramref name="dstEncoding"/>, or <paramref name="bytes"/> is <see langword="null"/>. </exception>
		<remarks>
			<para> The bytes in the byte array are converted from
   <paramref name="srcEncoding"/> to <paramref name="dstEncoding"/>.
      </para>
		</remarks>
		<example>
			<codelink SampleID="System.Text.Encoding.Convert Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Encoding.GetPreamble">
		<summary>
			<para>Returns a set of bytes used at the beginning of a stream to determine
      which encoding a file was created with. This can include the
      Unicode byte order mark.</para>
		</summary>
		<returns>
			<para>The bytes at the beginning of a stream, which typically comprise the byte
      order mark.</para>
		</returns>
		<remarks>
			<para>The preamble can be the Unicode byte order mark (U+FEFF written in
      the appropriate encoding) or any other type of identifying marks.
      This method can return an empty byte array.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Text.Encoding.GetPreamble Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Encoding.IsBrowserDisplay">
		<summary>
			<para>Gets an indication whether this encoding can be used for
      display by browser clients.</para>
		</summary>
		<value>
			<para><see langword="true"/> if this encoding can be used for
   display; otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>For example, this property returns <see langword="true"/>
for code page 1252 (windows-1252), but <see langword="false"/> for code page 437
(IBM-437).</para>
		</remarks>
		<example>
			<codelink SampleID="System.Text.Encoding.IsBrowserDisplay Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Encoding.IsBrowserSave">
		<summary>
			<para>Gets an indication whether this encoding can be used for
      saving by browser clients.</para>
		</summary>
		<value>
			<para><see langword="true"/> if this encoding can be used for saving by browser
   clients; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>For example, this property returns <see langword="true"/> for code page 1252 (windows-1252), but <see langword="false"/> for code page 437 (IBM-437).</para>
		</remarks>
		<example>
			<codelink SampleID="System.Text.Encoding.IsBrowserDisplay Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Encoding.IsMailNewsDisplay">
		<summary>
			<para>Gets and indication whether this encoding can be used
      for display by mail and news clients.</para>
		</summary>
		<value>
			<para><see langword="true"/> if this encoding can be used for
   displaying by mail and news clients; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>For example, this property returns <see langword="true"/> for code page 1252 (windows-1252), but <see langword="false"/> for code page 437 (IBM-437).</para>
		</remarks>
		<example>
			<codelink SampleID="System.Text.Encoding.IsBrowserDisplay Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Encoding.IsMailNewsSave">
		<summary>
			<para>Gets an indication whether this encoding can be used for
      saving by mail and news clients.</para>
		</summary>
		<value>
			<para><see langword="true"/> if this encoding can be used for
   saving by mail and news clients; otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>For example, this property returns <see langword="true"/> for code page 1252 (windows-1252), but <see langword="false"/> for code page 437 (IBM-437).</para>
		</remarks>
		<example>
			<codelink SampleID="System.Text.Encoding.IsBrowserDisplay Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Encoding.GetCharCount1">
		<summary>
			<para> When overridden in a derived class, calculates the number of characters produced by
      decoding a specified range of elements in an array of bytes.
      </para>
		</summary>
		<param name="bytes">The byte array to decode. </param>
		<param name="index">The starting index where decoding begins. </param>
		<param name="count">The number of bytes to decode. </param>
		<returns>
			<para> The number of characters produced by decoding a range of
      bytes in the specified byte array.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="bytes"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the byte array. </exception>
		<remarks>
			<para> The <see cref="System.Text.Encoding.GetCharCount"/> method can be used to determine the exact
   the number of characters that will be produces from converting a given range of
   bytes. An appropriately sized buffer for that conversion can
   then be
   allocated.
   </para>
			<para> Alternatively, the <see cref="System.Text.Encoding.GetMaxCharCount"/>
method can be used to determine the maximum number of characters that will
produced for a given number of bytes. A buffer of that size can then be reused
for multiple conversions. </para>
			<para>The <see cref="System.Text.Encoding.GetCharCount"/> method generally uses less memory, whereas
the <see cref="System.Text.Encoding.GetMaxCharCount"/> method generally executes faster. </para>
		</remarks>
		<example>
			<codelink SampleID="System.Text.Encoding.Convert Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Encoding.GetChars2">
		<summary>
			<para> When overridden in a derived class,
      decodes a range of bytes in a byte array into a range of
      characters in a character array.
      </para>
		</summary>
		<param name="bytes">The byte array to decode. </param>
		<param name="byteIndex">The starting index of the byte array to decode. </param>
		<param name="byteCount">The number of bytes to decode. </param>
		<param name="chars">The character array where the resulting decoding is stored. </param>
		<param name="charIndex">The starting index of the resulting decoding in the character array. </param>
		<returns>
			<para> The number of characters stored in the character array.
      </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="chars "/>does not contain sufficient space to store the decoded characters.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="bytes "/> or <paramref name="chars "/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="byteIndex"/>, <paramref name="byteCount"/>, or <paramref name="charIndex "/> is less than zero. </para>
			<para>-or-</para>
			<para><paramref name="byteIndex "/>+ <paramref name="byteCount "/>is greater than the length of <paramref name="bytes"/>. </para>
			<para>-or-</para>
			<para><paramref name="charIndex "/>is greater than the length of <paramref name="chars"/>. </para></exception>
		<remarks>
			<para> The <see cref="System.Text.Encoding.GetChars"/>
method maintains no state between conversions. The method is intended for
conversions of complete blocks of bytes and characters in one operation. If your
bytes might be in multiple byte arrays (that is, the bytes corresponding to a
single character might be at the end of one byte array and the beginning of
another), use the <see cref="System.Text.Decoder"/>
class, which will maintain state between
multiple calls.</para>
			<para> The <see cref="System.Text.Encoding.GetChars"/>
method requires the caller to provide the destination buffer and ensure that the
buffer is large enough to hold the entire result of the conversion. An application can use <see cref="System.Text.Encoding.GetCharCount"/> or <see cref="System.Text.Encoding.GetMaxCharCount"/> to calculate
the required size
of the destination buffer.</para>
			<para> You can use this method to determine the exact number of
   characters that will be produced for a given range of bytes. Alternatively, the
<see cref="System.Text.Encoding.GetMaxCharCount"/>
method can be used to determine the
maximum number of characters that will be produced for a given number of bytes,
regardless of the actual byte values.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Text.Encoding.Convert Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.Encoding.GetCharCount"/>
		<seealso cref="System.Text.Encoding.GetMaxCharCount"/>
	</doc>
	<doc for="Encoding.BodyName">
		<summary>
			<para> Gets the name
      for this encoding that can be used with mail agent body tags.
      </para>
		</summary>
		<value>
			<para>The name for this encoding that can be used with mail agent body tags. </para>
		</value>
		<remarks>
			<para>For example, if this encoding is equivalent to <see cref="System.Text.UTF8Encoding"/>, this property returns "utf-8". </para>
			<para> If the encoding cannot be used, the property value is the empty string (""). </para>
		</remarks>
		<example>
			<codelink SampleID="System.Text.Encoding.UTF7 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Encoding.UTF7">
		<summary>
			<para> Gets an encoding for the UTF-7 format.
      </para>
		</summary>
		<value>
			<para>An encoding for the UTF-7 format. </para>
		</value>
		<example>
			<codelink SampleID="System.Text.Encoding.UTF7 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Encoding.WebName">
		<summary>
			<para> Gets the name registered with the Internet Assigned Numbers Authority (IANA) for this encoding.
      </para>
		</summary>
		<value>
			<para> The IANA name for this encoding. </para>
		</value>
		<example>
			<codelink SampleID="System.Text.Encoding.WebName" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Encoding">
		<summary>
			<para> Represents a character
      encoding.</para>
		</summary>
		<remarks>
			<para>Methods are provided to convert arrays and strings of Unicode characters to and from arrays
      of bytes encoded for a target
      code page.</para>
			<para>A number of <see cref="System.Text.Encoding"/> implementations are provided in the <see cref="System.Text" qualify="true"/> namespace,
   including:</para>
			<para>The <see cref="System.Text.ASCIIEncoding"/>
class
encodes Unicode characters as single 7-bit ASCII characters. This encoding only
supports character values between U+0000 and U+007F.</para>
			<para>The <see cref="System.Text.UnicodeEncoding"/>
class encodes each Unicode character as two
consecutive bytes. Both little-endian (code page 1200) and big-endian (code
page 1201) byte orders are supported.</para>
			<para>The <see cref="System.Text.UTF7Encoding"/>
class encodes Unicode characters using the UTF-7
encoding (UTF-7 stands for UCS Transformation Format, 7-bit form). This
encoding supports all Unicode character values, and can also be accessed as
code page 65000.</para>
			<para>The <see cref="System.Text.UTF8Encoding"/>
class encodes Unicode characters using the UTF-8
encoding (UTF-8 stands for UCS Transformation Format, 8-bit form). This
encoding supports all Unicode character values, and can also be accessed as
code page 65001.</para>
			<para>Use the <see cref="System.Text.Encoding.GetEncoding"/> method with a code page or name
parameter to obtain other encodings.</para>
			<para> When the data to be converted is
   only available in sequential blocks (such as data read from a stream), an application
   can use a <see cref="System.Text.Decoder"/> or an <see cref="System.Text.Encoder"/> to perform the conversion. This
   is also useful when the amount of data is so large that it needs to be divided
   into smaller blocks. Decoders and encoders are obtained using the <see cref="System.Text.Encoding.GetDecoder"/> and <see cref="System.Text.Encoding.GetEncoder"/> methods. An application can use the
   properties of this class such as <see cref="System.Text.Encoding.ASCII"/>,
<see cref="System.Text.Encoding.Default"/>, <see cref="System.Text.Encoding.Unicode"/>, <see cref="System.Text.Encoding.UTF7"/>, and
<see cref="System.Text.Encoding.UTF8"/> to obtain encodings. Applications can initialize new instances 
   of <see langword="Encoding"/>
   objects through the <see cref="System.Text.ASCIIEncoding"/>, <see cref="System.Text.UnicodeEncoding"/>, <see cref="System.Text.UTF7Encoding"/>, and
<see cref="System.Text.UTF8Encoding"/>
classes.</para>
			<para>Through an encoding, the <see cref="System.Text.Encoding.GetBytes"/> method
is used to convert arrays of Unicode characters to arrays of bytes, and the
<see cref="System.Text.Encoding.GetChars"/> method is used to convert arrays of bytes 
to arrays of Unicode characters. The <see cref="System.Text.Encoding.GetBytes"/> and <see cref="System.Text.Encoding.GetChars"/> methods maintain no state
between conversions.</para>
			<para>The core <see cref="System.Text.Encoding.GetBytes"/> and <see cref="System.Text.Encoding.GetChars"/> methods require the caller to
provide the destination buffer and
ensure that the buffer is large enough to hold the entire result of
the conversion. An application can use one of the following methods to calculate the required size
of the destination buffer.</para>
			<list type="number"><item>
					<term>
      
      The <see cref="System.Text.Encoding.GetByteCount"/> and <see cref="System.Text.Encoding.GetCharCount"/> methods can be used to compute the exact
      size of the result of a particular conversion, and an appropriately sized
      buffer for that conversion can then be allocated.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.Text.Encoding.GetMaxByteCount"/> and <see cref="System.Text.Encoding.GetMaxCharCount"/> methods can
      be used to compute the maximum possible size of a conversion of a given number
      of bytes or characters, and a buffer of that size can then be reused for
      multiple conversions.</term>
				</item>
			</list>
			<para>The first method generally uses less memory, whereas the second
   method generally executes faster.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Text.Encoding.Convert Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
