<docs>
   <doc for="CodePageEncoding">
 <remarks>
    <para>
       The CodePageEncoding class implements a
       set of methods for translating between Unicode and a specific Windows code
       page, which is referred to as the ANSI code page. The code page is the mapping
       between character glyphs (shapes) and the 1-byte or 2-byte numeric values that
       are used to represent them.
    </para>
    <para>
       Any installed code page can be accessed through this encoding,
       and conversions are performed using the WideCharToMultiByte
       and MultiByteToWideChar Windows API
       functions.
    </para>
    <para>
       This class implements the <see cref='System.Text.Encoding'/>
       abstract base class.
    </para>
 </remarks>
   </doc>
   <doc for="CodePageEncoding.CodePageEncoding">
 <summary>
    <para>
       Initializes a new instance of the CodePageEncoding
       class.
    </para>
 </summary>
    <param name='codepage'>
    The NLS [RB1] code page identifier.
 </param>
   </doc>
   <doc for="CodePageEncoding.GetByteCount">
 <summary>
    <para>
       Returns the number of bytes required to encode a range of
       characters in the specified array.
    </para>
 </summary>
    <param name='chars'>
    The character array to encode.
 </param>
 <param name='index'>
    The starting index of the character array to encode.[RB2]
 </param>
 <param name='count'>
    The number of characters to encode.
 </param>
 <returns>
    <para>
       The number of bytes required to encode a range of characters in
       the specified character array.
    </para>
 </returns>
    <exception cref='System.ArgumentException'>The chars argument is null.
 </exception>
 <exception cref='System.ArgumentException'>The index and count arguments do not denote a valid range in the character array.
 </exception>
 <remarks>
    <para>
       This method overrides Encoding.GetByteCount.
    </para>
 </remarks>
   </doc>
   <doc for="CodePageEncoding.GetBytes">
 <summary>
    <para>
       Encodes a range of an array of characters into an array of bytes
       and returns the number bytes stored in the array.
    </para>
 </summary>
    <param name='chars'>
    The character array to encode.
 </param>
 <param name='charIndex'>
    The starting index of the character array to encode.[RB3]
 </param>
 <param name='charCount'>
    The number of characters to encode.
 </param>
 <param name='bytes'>
    The byte array to encode into.
 </param>
 <param name='byteIndex'>
    The starting index of the resulting encoding in the byte array.
 </param>
 <returns>
    <para>
       The number of bytes stored into the byte array.
    </para>
 </returns>
    <exception cref='System.ArgumentException'>The chars or bytes arguments are null.
 </exception>
 <exception cref='System.ArgumentException'>The charIndex and charCount arguments do not denote a valid range in the character array.
 </exception>
 <exception cref='System.ArgumentException'>The <paramref name='byteIndex'/> or charIndex arguments are not a valid index.[RB4] 
 </exception>
 <exception cref='System.ArgumentException'>The byteIndex argument is less than 0.
 </exception>
 <exception cref='System.ArgumentException'>The byteIndex argument is greater than the length of the byte array.
 </exception>
 <exception cref='System.ArgumentException'>The <paramref name='bytes'/> argument is not large enough to hold the encoding of the characters.
 </exception>
 <exception cref='System.ArgumentException'>The byteIndex argument is equal to the length of the byte array.
 </exception>
 <exception cref='System.ArgumentException'>No bytes have been stored into the byte array.
 </exception>
 <remarks>
    <para>
       This method overrides Encoding.GetBytes.
    </para>
    <para>
       The GetByteCount method can be used to
       determine the exact number of bytes that will be produced for a specified range
       of characters. Alternatively, the GetMaxByteCount
       method can be used to determine the maximum number of bytes that will be
       produced for a specified number of characters, regardless of the actual character
       values.
    </para>
 </remarks>
   </doc>
   <doc for="CodePageEncoding.GetCharCount">
 <summary>
    <para>
       Returns the number of characters produced by decoding a specified
       range of bytes.
    </para>
 </summary>
    <param name='bytes'>
    The byte array to decode.
 </param>
 <param name='index'>
    The starting index of the byte array to decode.
 </param>
 <param name='count'>
    The number of bytes to decode.
 </param>
 <returns>
    <para>
       The number of characters produced by decoding a range of bytes in
       the specified byte array.
    </para>
 </returns>
    <exception cref='System.ArgumentException'>The bytes argument is null.
 </exception>
 <exception cref='System.ArgumentException'>The index and count arguments do not denote a valid range in the byte array.
 </exception>
 <remarks>
    <para>
       This method overrides Encoding.GetCharCount.
    </para>
 </remarks>
   </doc>
   <doc for="CodePageEncoding.GetChars">
 <summary>
    <para>
       Decodes a range of an array of bytes into an array of characters
       and returns the number characters stored in the array.
    </para>
 </summary>
    <param name='bytes'>
    The byte array to decode.
 </param>
 <param name='byteIndex'>
    The starting index of the byte array to decode.
 </param>
 <param name='byteCount'>
    The number of bytes to decode.
 </param>
 <param name='chars'>
    The character array to decode into.
 </param>
 <param name='charIndex'>
    The starting index of the resulting decoding in the character array.
 </param>
 <returns>
    <para>
       The number of characters stored into the character array.
    </para>
 </returns>
 <exception cref='System.ArgumentException'>The bytes or chars arguments are null.
 </exception>
 <exception cref='System.ArgumentException'>The byteIndex and byteCount arguments do not denote a valid range in the byte array.
 </exception>
 <exception cref='System.ArgumentException'>The <paramref name='charIndex'/> or <paramref name=' byteIndex'/> arguments are not a valid index.
 </exception>
 <exception cref='System.ArgumentException'>The charIndex argument is less than 0.
 </exception>
 <exception cref='System.ArgumentException'>The charIndex argument is greater than length of the character array.
 </exception>
 <exception cref='System.ArgumentException'>The <paramref name='chars'/> argument is not large enough to hold the decoding of the bytes.
 </exception>
 <exception cref='System.ArgumentException'> The charIndex argument is equal to the length of the character array.
 </exception>
 <exception cref='System.ArgumentException'>. No characters have been stored into the character array.
 </exception>
 <remarks>
    <para>
       This method overrides Encoding.GetChars.
    </para>
    <para>
       The GetCharCount method can be used to
       determine the exact number of characters that will be produced for a specified
       range of bytes. Alternatively, the GetMaxCharCount method
       can be used to determine the maximum number of characters that will be produced
       for a specified number of bytes, regardless of the actual byte values.
    </para>
 </remarks>
   </doc>
   <doc for="CodePageEncoding.GetDecoder">
 <summary>
    <para>
       Gets a decoder object for the current instance of encoding.
    </para>
 </summary>
 <returns>
    <para>
       A decoder object for the current encoding.
    </para>
 </returns>
 <remarks>
    <para>
       The decoder object can be
       used to decode a sequence of bytes into a sequence of characters.[RB8]
    </para>
    <para>
       Contrary to the CodePageEncoding.GetChars
       family of methods, a decoder can convert partial sequences of bytes into
       partial sequences of characters by maintaining the appropriate state between
       the conversions.
    </para>
    <para>
       This default implementation returns a decoder that simply
       forwards calls to the GetCharCount and GetChars methods of this encoding. Encoding that requires
       state to be maintained between successive conversions should override this
       method and return a new instance of an appropriate decoder implementation.
    </para>
 </remarks>
   </doc>
   <doc for="CodePageEncoding.GetMaxByteCount">
 <summary>
    <para>
       Gets the maximum number of bytes required to encode a specified
       number of characters.
    </para>
 </summary>
    <param name='charCount'>
    The number of characters to encode.
 </param>
 <returns>
    <para>
       The maximum number of bytes required for the encoding of a specified
       number of characters.
    </para>
 </returns>
 <remarks>
    <para>
       This method can be used to determine an appropriate buffer size
       for byte arrays passed to the CodePageEncoding.GetBytes
       or Encoder.GetBytes methods for this encoding.
    </para>
    <para>
       All encoding must guarantee that no buffer overflow exceptions
       will occur if buffers are sized according to the results of this method.
    </para>
 </remarks>
   </doc>
   <doc for="CodePageEncoding.GetMaxCharCount">
 <summary>
    <para>
       Gets the maximum number of characters produced from decoding a specified
       number of bytes.
    </para>
 </summary>
    <param name='byteCount'>
    Number of bytes to decode.
 </param>
 <returns>
    <para>
       The maximum number of characters produced from decoding a
       specified number of bytes.
    </para>
 </returns>
 <remarks>
    <para>
       This method can be used to determine an appropriate buffer size
       for character arrays passed to the CodePageEncoding.GetChars
       or Decoder.GetChars methods for this encoding.
    </para>
    <para>
       All encoding must guarantee that no buffer overflow exceptions
       will occur if buffers are sized according to the results of this method.
    </para>
 </remarks>
   </doc>
   <doc for="CodePageEncoding.Decoder.GetCharCount">
 <summary>
    <para>
       Returns the number of characters produced by decoding a specified
       range of bytes.
    </para>
 </summary>
    <param name='bytes'>
    The byte array to decode.
 </param>
 <param name='index'>
    The starting index of the byte array to decode.
 </param>
 <param name='count'>
    The number of bytes to decode.
 </param>
 <returns>
    <para>
       The number of characters produced by decoding a range of bytes in
       the specified byte array.
    </para>
 </returns>
    <exception cref='System.ArgumentException'>The bytes argument is null.
 </exception>
 <exception cref='System.ArgumentException'>The index and count arguments do not denote a valid range in the byte array.
 </exception>
 <remarks>
    <para>
       This method overrides Encoding.GetCharCount.
    </para>
 </remarks>
   </doc>
</docs>

