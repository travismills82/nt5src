<docs>
	
	<doc for="UTF8Encoding.UTF8Decoder.GetCharCount">
		<summary>
			<para>
       Returns the number of characters produced by decoding a specified
       range of bytes in an array.
    </para>
		</summary>
		<param name="bytes">
    The byte array to decode.
 </param>
		<param name="index">
    The starting index of the byte array to decode.
 </param>
		<param name="count">
    The number of bytes to decode.
 </param>
		<returns>
			<para>
       The number of characters produced by decoding a range of bytes in
       the specified byte array.
    </para>
		</returns>
		<exception cref="System.ArgumentException">The bytes argument is null.
 </exception>
		<exception cref="System.ArgumentException">The index and count arguments do not denote a valid range in the byte array.
 </exception>
		<remarks>
			<para>
       Overrides Encoder.GetCharCount.
    </para>
		</remarks>
	</doc>
	<doc for="UTF8Encoding.UTF8Encoding">
		<overload>
			<para> Initializes a new instance of the <see cref="System.Text.UTF8Encoding"/> class.
   </para>
		</overload>
		<summary>
			<para> Initializes a new instance of the <see cref="System.Text.UTF8Encoding"/>
class.</para>
		</summary>
		<remarks>
			<para> By default, this constructor does not request that a Unicode byte
      order mark prefix encoded characters, and this constructor does not request an exception be thrown
      when an invalid encoding is detected.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a new <see cref="System.Text.UTF8Encoding"/> 
instance and display the encoding name to the console.</para>
			<codelink SampleID="System.Text.UTF8Encoding.ctor1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF8Encoding.GetPreamble"/>
	</doc>
	<doc for="UTF8Encoding.UTF8Encoding1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Text.UTF8Encoding"/> class. A parameter specifies whether to prefix an encoding with a Unicode byte order mark.</para>
		</summary>
		<param name="encoderShouldEmitUTF8Identifier"><see langword="true"/> to specify that a Unicode byte order mark prefix be emitted when encoding; otherwise, <see langword="false"/>.</param>
		<remarks>
			<para> By default, this constructor does not request an exception be thrown when an invalid encoding is detected.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a new 
   <see cref="System.Text.UTF8Encoding"/> instance specifying 
      that a Unicode byte order mark prefix should be emitted when encoding.
      The <see cref="System.Text.UTF8Encoding.GetPreamble"/> method is used to return the Unicode byte order
      mark prefix and it is displayed to the console. Notice that a <see cref="System.Text.UTF8Encoding"/> created using the default constructor does not have
      a Unicode byte order mark prefix. </para>
			<codelink SampleID="System.Text.UTF8Encoding.ctor2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF8Encoding.GetPreamble"/>
	</doc>
	<doc for="UTF8Encoding.Equals">
		<summary>
			<para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
		</summary>
		<param name=" value">An object to compare with this instance or <see langword="null"/>.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is an instance of <see cref="System.Text.UTF8Encoding"/>
and equals the value of this instance; otherwise, <see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF8Encoding.Equals"/> 
method to test whether this instance of a <see cref="System.Text.UTF8Encoding"/> is equal to a different instance
of a <see cref="System.Text.UTF8Encoding"/>. Four instances of a <see cref="System.Text.UTF8Encoding"/>are
created and compared and the results of the comparisons are displayed to the
console.</para>
			<codelink SampleID="System.Text.UTF8Encoding.Equals Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UTF8Encoding.GetByteCount">
		<overload>
			<para>Calculates the number of bytes required to store the
      results of encoding a set of characters from a specified <see cref="System.String"/> or Unicode character array.</para>
		</overload>
		<summary>
			<para>Calculates the number of bytes required to store the results of encoding a
      set of characters from a specified Unicode character array.</para>
		</summary>
		<param name="chars">The Unicode character array to encode. </param>
		<param name="index">The index of the first character in <paramref name="chars"/> to encode. </param>
		<param name="count">The number of characters to encode. </param>
		<returns>
			<para> The number of bytes required to encode the range in
   <paramref name="chars"/> from <paramref name="index"/> to <paramref name="index"/> + <paramref name="count"/> - 1.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="chars "/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="index"/> or <paramref name="count"/> is less than zero. </para>
			<para>-or-</para>
			<para><paramref name="index"/> plus <paramref name="count"/> is greater than the length of <paramref name="chars"/>.</para>
			<para>-or-</para>
			<para>Return value overflowed.</para></exception>
		<exception cref="System.ArgumentException"><para><paramref name="chars"/> contains an invalid sequence of characters and the <see cref="M:System.Text.UTF8Encoding.#ctor"/> constructor for this instance specified throwing an exception when an invalid encoding is detected.</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UTF8Encoding.GetByteCount"/> to calculate exactly, or <see cref="System.Text.UTF8Encoding.GetMaxByteCount"/> to
   calculate at most, the array size required by the <see cref="System.Text.UTF8Encoding.GetBytes"/>
   method to store encoded characters.</para>
			<para>If error detection is turned off and an invalid surrogate sequence is
   detected, the invalid characters are ignored and do not affect the return value,
   and no exception is thrown.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF8Encoding.GetByteCount"/> method to return the number of bytes required to 
   encode the array of Unicode characters <c>chars</c> using <see cref="System.Text.UTF8Encoding"/>.</para>
			<codelink SampleID="System.Text.UTF8Encoding.GetByteCount1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UTF8Encoding.GetBytes">
		<overload>
			<para>Encodes a specified range of characters from a Unicode character array or a <see cref="System.String"/> and stores the results
   in a specified byte array. </para>
		</overload>
		<summary>
			<para> Encodes a specified range of elements from a Unicode character
      array and stores the results in a specified range of elements in a byte array.
      </para>
		</summary>
		<param name="chars">The character array to encode. </param>
		<param name="charIndex">The index of the first character in <paramref name="chars"/> to encode. </param>
		<param name="charCount">The number of characters to encode. </param>
		<param name="bytes">The byte array where the encoded results are stored. </param>
		<param name="byteIndex">The index of the first element in <paramref name="bytes"/> where the encoded results are stored. </param>
		<returns>
			<para> The number of bytes stored in <paramref name="bytes"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="chars"/> or <paramref name="bytes"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="charIndex"/>, <paramref name="charCount"/>, or <paramref name="byteIndex "/> is less than zero.</para>
			<para>-or-</para><para> The sum of <paramref name="charIndex "/>and <paramref name="charCount "/>is greater than the length of <paramref name="chars"/>.</para>
			<para>-or-</para><para>
				<paramref name="byteIndex "/>is greater than the length of <paramref name="bytes"/>.</para></exception>
		<exception cref="System.ArgumentException"><para><paramref name="bytes "/>does not contain sufficient space to store the encoded characters.</para>
			<para>-or-</para><para>An invalid high or low member of a surrogate pair was encountered during encoding.</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UTF8Encoding.GetByteCount"/> to calculate exactly, or <see cref="System.Text.UTF8Encoding.GetMaxByteCount"/> to calculate at most, the array size required by the <see cref="System.Text.UTF8Encoding.GetBytes"/> method to store encoded characters.</para>
			<para>If error detection is turned off and an invalid surrogate sequence is
   detected, the invalid characters are ignored and do not affect the return value,
   and no exception is thrown.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF8Encoding.GetBytes"/> method to encode a range of elements from the 
   Unicode character array <c>chars</c>
and store the encoded bytes in a range of elements in the byte array <c>bytes</c>. The <see cref="System.Text.UTF8Encoding.GetByteCount"/> method is used to determine the number of bytes
required to store the encoded elements.</para>
			<codelink SampleID="System.Text.UTF8Encoding.GetBytes1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF8Encoding.GetByteCount"/>
		<seealso cref="System.Text.UTF8Encoding.GetMaxByteCount"/>
	</doc>
	<doc for="UTF8Encoding.GetCharCount">
		<overload>
			<para> Calculates the number of characters that would result from decoding a set of elements in a byte array.</para>
		</overload>
		<summary>
			<para> Calculates the number of characters that would result from decoding a specified range
      of elements in a byte array.
      </para>
		</summary>
		<param name="bytes">The byte array to decode. </param>
		<param name="index">The index of the first byte in <paramref name="bytes"/> to decode. </param>
		<param name="count">The number of bytes to decode. </param>
		<returns>
			<para> The number of characters that would result from decoding
      the specified range of elements in <paramref name="bytes"/>.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="bytes "/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="index"/> or <paramref name="count"/> is less than zero.</para>
			<para>-or-</para>
			<para><paramref name="index"/> plus <paramref name="count"/> is greater than the length of <paramref name="bytes"/>.</para></exception>
		<exception cref="System.ArgumentException">An invalid surrogate pair sequence was detected, and the <see cref="M:System.Text.UTF8Encoding.#ctor"/> constructor for this instance specified throwing an exception when an invalid encoding is detected.</exception>
		<remarks>
			<para>Use <see cref="System.Text.UTF8Encoding.GetCharCount"/> to calculate exactly, or <see cref="System.Text.UTF8Encoding.GetMaxCharCount"/> to
   calculate at most, the array size required by the <see cref="System.Text.UTF8Encoding.GetChars"/>
   method to store decoded bytes.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF8Encoding.GetCharCount"/> method to return the number of characters that 
   would result from decoding a range of elements in the byte array <c>bytes</c> using a <see cref="System.Text.UTF8Encoding"/>.</para>
			<codelink SampleID="System.Text.UTF8Encoding.GetCharCount Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UTF8Encoding.GetChars">
		<overload>
			<para>Decodes a set of elements from a specified byte array and stores the result into a specified set of elements in a Unicode character array.</para>
		</overload>
		<summary>
			<para> Decodes a range of elements from a specified byte array and stores the result into a specified range of elements in a Unicode character array.
      </para>
		</summary>
		<param name="bytes">The byte array to decode. </param>
		<param name="byteIndex">The index of the first element in <paramref name="bytes"/> to decode. </param>
		<param name="byteCount">The number of elements to decode. </param>
		<param name="chars">The character array where the decoded results are stored. </param>
		<param name="charIndex">The index of the first element in <paramref name="chars"/> to store decoded results. </param>
		<returns>
			<para> The number of characters stored in <paramref name="chars"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>
				<paramref name="bytes "/>or <paramref name="chars "/> is <see langword="null"/>. </para></exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="byteIndex"/>, <paramref name="byteCount"/>, or <paramref name="charIndex"/> is less than zero.</para><para> -or-</para><para>
				<paramref name="byteIndex "/>plus <paramref name="byteCount "/>is greater than the length of <paramref name="bytes"/>.</para><para> -or-</para><para><paramref name="charIndex"/> is greater than the length of <paramref name="chars"/>.</para></exception>
		<exception cref="System.ArgumentException"><para><paramref name="bytes"/> contains an invalid sequence of bytes, and the <see cref="M:System.Text.UTF8Encoding.#ctor"/> constructor for this instance specified throwing an exception when an invalid encoding is detected.</para>
			<para>-or-</para>
			<para><paramref name="chars"/> does not contain sufficient space to store the decoded characters.</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UTF8Encoding.GetCharCount"/> to calculate exactly, or <see cref="System.Text.UTF8Encoding.GetMaxCharCount"/> to calculate at most, the array size required by the <see cref="System.Text.UTF8Encoding.GetChars"/> method to store decoded bytes.</para>
			<para>If error detection is turned off and an invalid UTF-8 byte sequence is
   detected, the invalid bytes are ignored and are not encoded into <paramref name="chars"/>,
   and no exception is thrown.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF8Encoding.GetChars"/> method to decode a range of elements in the byte 
   array <c>bytes</c> and store the
result in the character array <c>chars</c>. The <see cref="System.Text.UTF8Encoding.GetCharCount"/> method is used to calculate the
number of characters needed to store the decoded elements.</para>
			<codelink SampleID="System.Text.UTF8Encoding.GetChars Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF8Encoding.GetCharCount"/>
		<seealso cref="System.Text.UTF8Encoding.GetMaxCharCount"/>
		<seealso cref="System.Text.Encoding.GetChars"/>
	</doc>
	<doc for="UTF8Encoding.GetDecoder">
		<summary>
			<para> Obtains a decoder that can convert a UTF-8 encoded sequence
      of bytes into a sequence of Unicode characters.
      </para>
		</summary>
		<returns>
			<para> A <see cref="System.Text.Decoder"/>
.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Text.Decoder.GetChars" qualify="true"/> method converts adjacent blocks of bytes into adjacent blocks of characters, in a manner similar to the <see cref="System.Text.UTF8Encoding.GetChars"/> method. However, a <see cref="System.Text.Decoder"/> maintains state information between calls so it can correctly decode byte sequences that span blocks.</para>
			<para>If this <see cref="M:System.Text.UTF8Encoding.#ctor"/> is constructed with error detection turned on
(that is, the throwOnInvalidBytes parameter is <see langword="true"/>), the
<see cref="System.Text.Decoder"/> returned by this method also has error detection 
turned on. If an error is detected, the decoder is in an undefined state and
should not be reused. Use error detection if you intend to stop processing after
an error is encountered. Otherwise, if you intend to continue processing after an error is found, do not use error detection.</para>
			<para>The <see cref="System.Text.UTF8Encoding.GetDecoder"/>
method obtains a <see cref="System.Text.Decoder"/> that preserves trailing bytes at the end of decoded
blocks and uses the trailing bytes in the next decoding operation. <see cref="System.Text.UTF8Encoding.GetDecoder"/> and <see cref="System.Text.UTF8Encoding.GetEncoder"/>
are useful for network transmission and
file operations since those operations often deal with blocks of data instead of a
complete
stream.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF8Encoding.GetDecoder"/> method to obtain a UTF-8 decoder. The decoder is 
   used to convert a sequence of bytes in <c>bytes</c> into a sequence of characters in <c>chars</c>.</para>
			<codelink SampleID="System.Text.UTF8Encoding.GetDecoder Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF8Encoding.GetCharCount"/>
		<seealso cref="System.Text.UTF8Encoding.GetChars"/>
	</doc>
	<doc for="UTF8Encoding.GetEncoder">
		<summary>
			<para> Obtains an encoder that can convert a sequence of Unicode
      characters into a UTF-8 encoded sequence of bytes.
      </para>
		</summary>
		<returns>
			<para> An <see cref="System.Text.Encoder"/>
.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Text.Encoder.GetBytes" qualify="true"/> method converts adjacent blocks of characters into adjacent blocks of bytes, in a manner similar to the <see cref="System.Text.UTF8Encoding.GetBytes"/> method. However, an <see cref="System.Text.Encoder"/> maintains state information between calls so it can correctly encode characters that span blocks.</para>
			<para>If this <see cref="M:System.Text.UTF8Encoding.#ctor"/> is constructed with error detection
turned on (that is, the throwOnInvalidBytes parameter is <see langword="true"/>),
the <see cref="System.Text.Encoder"/>
returned by this method also has error detection turned on.</para>
			<para>The <see cref="System.Text.UTF8Encoding.GetEncoder"/> method obtains an <see cref="System.Text.Encoder"/> that
preserves trailing characters (such as a high-surrogate), at the end of a block
and uses the trailing Unicode characters in the next encoding operation. <see cref="System.Text.UTF8Encoding.GetDecoder"/> and <see cref="System.Text.UTF8Encoding.GetEncoder"/> are useful for network transmission
and file operations since those operations often deal with blocks of data
instead of a complete stream.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF8Encoding.GetEncoder"/> method to obtain an encoder to convert a sequence 
   of characters in <c>chars</c> into a
UTF-8 encoded sequence of bytes in <c>bytes</c>.</para>
			<codelink SampleID="System.Text.UTF8Encoding.GetEncoder Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF8Encoding.GetByteCount"/>
		<seealso cref="System.Text.UTF8Encoding.GetBytes"/>
	</doc>
	<doc for="UTF8Encoding.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer hash code.</para>
		</returns>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF8Encoding.GetHashCode"/> method to return a hashcode for an instance of a 
<see cref="System.Text.UTF8Encoding"/>. Notice that the hashcode returned by this method 
   varies depending on the constructor used to create the <see cref="System.Text.UTF8Encoding"/>.</para>
			<codelink SampleID="System.Text.UTF8Encoding.GetHashCode Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UTF8Encoding.GetMaxByteCount">
		<summary>
			<para> Calculates the maximum number of bytes required to encode a specified
      number of characters.
      </para>
		</summary>
		<param name="charCount">The number of characters to encode. </param>
		<returns>
			<para> The maximum number of bytes required to encode
   <paramref name="charCount"/> number of
      characters.
      </para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="charCount"/> is less than zero.</para>
			<para>-or-</para>
			<para><paramref name="charCount"/> is too large to store as type <see cref="System.Int32"/>.</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UTF8Encoding.GetByteCount"/> to calculate exactly, or <see cref="System.Text.UTF8Encoding.GetMaxByteCount"/> to calculate at most, the array size required by the <see cref="System.Text.UTF8Encoding.GetBytes"/> method to store encoded characters.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the 
   <see cref="System.Text.UTF8Encoding.GetMaxByteCount"/> method to return the maximum number of bytes 
      required to encode a specified number of characters stored in the variable <c>charCount</c>.</para>
			<codelink SampleID="System.Text.utf8encoding.getmaxbytecount example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF8Encoding.GetBytes"/>
		<seealso cref="System.Text.Encoder.GetBytes"/>
	</doc>
	<doc for="UTF8Encoding.GetMaxCharCount">
		<summary>
			<para> Calculates the maximum number of characters that can result from decoding a specified
      number of bytes.
      </para>
		</summary>
		<param name="byteCount">The number of bytes to decode. </param>
		<returns>
			<para> The maximum number of characters that can result from decoding
   <paramref name="byteCount"/>
   number of bytes.
   </para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="byteCount"/> is less than zero.</exception>
		<remarks>
			<para>Use <see cref="System.Text.UTF8Encoding.GetCharCount"/> to calculate exactly, or <see cref="System.Text.UTF8Encoding.GetMaxCharCount"/> to calculate at most, the array size required by the <see cref="System.Text.UTF8Encoding.GetChars"/> method to store decoded bytes.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF8Encoding.GetMaxCharCount"/> method to return the maximum number of characters 
   that can result from decoding a specified number of bytes stored in the variable
   <c>byteCount</c>.</para>
			<codelink SampleID="System.Text.UTF8Encoding.GetMaxCharCount Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF8Encoding.GetChars"/>
		<seealso cref="System.Text.Decoder.GetChars"/>
	</doc>
	<doc for="UTF8Encoding.GetPreamble">
		<summary>
			<para> Returns a Unicode byte order mark encoded in UTF-8 format, if the constructor for this instance
      requested byte order mark support.</para>
		</summary>
		<returns>
			<para>A byte array containing the Unicode byte order mark (U+FEFF), encoded as hexadecimal 0xEF, 0xBB, 0xBF, if the
      constructor for this instance requested a UTF-8 identifier be emitted; otherwise, a
      byte array of length zero.</para>
		</returns>
		<remarks>
			<para> The byte order mark, when concatenated before the
      beginning of an encoded sequence of bytes, enables classes like <see cref="System.IO.StreamReader" qualify="true"/> determine whether subsequent bytes are encoded in UTF-8 format. </para>
			<para>Concatenate this return value to the beginning of a UTF-8 encoded sequence of bytes if the constructor for this instance requested support for a byte order mark.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF8Encoding.GetPreamble"/> method to return the Unicode byte order mark 
   encoded in UTF-8 format for an instance of a <see cref="System.Text.UTF8Encoding"/> that requested byte order mark support when it was created.
   Notice that the default constructor for a <see cref="System.Text.UTF8Encoding"/> does
   not provide a preamble.</para>
			<codelink SampleID="System.Text.UTF8Encoding.GetPreamble Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UTF8Encoding.GetByteCount1">
		<summary>
			<para> Calculates the number of bytes required to store the results of
      encoding the characters from a specified <see cref="System.String"/>.</para>
		</summary>
		<param name="chars">The <see cref="System.String"/> to encode. </param>
		<returns>
			<para> The number of bytes required to encode the characters in
   <paramref name="chars"/>.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="chars "/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para><paramref name="chars"/> contains an invalid Unicode surrogate character , and the <see cref="M:System.Text.UTF8Encoding.#ctor"/> constructor for this instance specified throwing an exception when an invalid encoding is detected.</para></exception>
		<exception cref="System.ArgumentOutOfRangeException"><para>Return value is greater than <see cref="System.Int32.MaxValue"/> .</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UTF8Encoding.GetByteCount"/> to calculate exactly, or <see cref="System.Text.UTF8Encoding.GetMaxByteCount"/> to calculate at most, the array size required by the <see cref="System.Text.UTF8Encoding.GetBytes"/> method to store encoded characters.</para>
			<para>If error detection is turned off and an invalid surrogate sequence is
   detected, the invalid characters are ignored and do not affect the return value,
   and no exception is thrown.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF8Encoding.GetByteCount"/> method to 
   return the number of bytes required to encode the <see cref="System.String"/>
				<c>chars</c> using a <see cref="System.Text.UTF8Encoding"/>.</para>
			<codelink SampleID="System.Text.UTF8Encoding.GetByteCount2 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UTF8Encoding.GetBytes2">
		<summary>
			<para> Encodes the characters from a specified <see cref="System.String"/>
and returns the results in a byte array.</para>
		</summary>
		<param name="s">The string of characters to encode. </param>
		<returns>
			<para>A byte array that contains the encoded characters from
   <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>An invalid high or low member of a surrogate pair was encountered during encoding, and the <see cref="M:System.Text.UTF8Encoding.#ctor"/> constructor for this instance specified throwing an exception when an invalid encoding is detected.</para></exception>
		<remarks>
			<para>If error detection is turned off and an invalid surrogate sequence is
      detected, the invalid characters are ignored and are not encoded into the
      returned byte array, and no exception is thrown.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF8Encoding.GetBytes"/> method to 
   encode the characters in the <see cref="System.String"/>
				<c>chars</c> and return the results in the
   byte array <c>bytes</c> using a
<see cref="System.Text.UTF8Encoding"/>. The number of bytes used to encode <c>chars</c> and the encoded bytes are 
displayed to the console.</para>
			<codelink SampleID="System.Text.UTF8Encoding.GetBytes2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF8Encoding.GetByteCount"/>
		<seealso cref="System.Text.UTF8Encoding.GetMaxByteCount"/>
	</doc>
	<doc for="UTF8Encoding.GetBytes1">
		<summary>
			<para> Encodes a specified range of characters from a <see cref="System.String"/>
and stores the results in a specified range of elements in a byte array.</para>
		</summary>
		<param name="s">The string of characters to encode. </param>
		<param name="charIndex">The index of the first character in <paramref name="s"/> to encode. </param>
		<param name="charCount">The number of characters to encode. </param>
		<param name="bytes">The byte array where the encoded results are stored. </param>
		<param name="byteIndex">The index of the first element in <paramref name="bytes"/> where the encoded results are stored. </param>
		<returns>
			<para> The number of bytes stored in <paramref name="bytes"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> or <paramref name="bytes"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="charIndex"/>, <paramref name="charCount"/>, or <paramref name="byteIndex"/> is less than zero.</para>
			<para>-or-</para><para><paramref name="charIndex"/> plus <paramref name="charCount"/> is greater than the length of <paramref name="s"/>.</para>
			<para>-or-</para><para>
				<paramref name="byteIndex"/> is greater than the length of <paramref name="bytes"/>.</para></exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="byteIndex"/> is equal to the length of <paramref name="bytes"/>.</para>
			<para>-or-</para><para>No bytes have been stored in <paramref name="bytes"/>.</para>
			<para>-or-</para>
			<para>An invalid high or low member of a surrogate pair was encountered during encoding.</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UTF8Encoding.GetByteCount"/> to calculate exactly, or <see cref="System.Text.UTF8Encoding.GetMaxByteCount"/> to calculate at most, the array size required by the <see cref="System.Text.UTF8Encoding.GetBytes"/> method to store encoded characters.</para>
			<para>If error detection is turned off and an invalid surrogate sequence is
   detected, the invalid characters are ignored and do not affect the return value,
   and no exception is thrown.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UTF8Encoding.GetBytes"/> method to 
   encode a range of characters from the <see cref="System.String"/>
				<c>chars</c> and store the encoded
   bytes in a range of elements in the byte array <c>bytes</c>. The <see cref="System.Text.UTF8Encoding.GetByteCount"/> method is used to determine the number of bytes
required to store the encoded characters.</para>
			<codelink SampleID="System.Text.UTF8Encoding.GetBytes3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UTF8Encoding.GetByteCount"/>
		<seealso cref="System.Text.UTF8Encoding.GetMaxByteCount"/>
	</doc>
	<doc for="UTF8Encoding">
		<summary>
			<para> Represents a UTF-8 encoding of Unicode characters.
      </para>
		</summary>
		<remarks>
			<para> This class encodes Unicode characters using UCS
      Transformation Format, 8-bit form (UTF-8). This encoding supports all Unicode
      character values and surrogates.
      For more information regarding
      surrogate pairs, see <see cref="System.Globalization.UnicodeCategory"/>.</para>
			<para> This class contains the <see cref="System.Text.UTF8Encoding.GetCharCount"/> method that reports the number of Unicode
   characters that result from decoding an array of bytes, and the <see cref="System.Text.UTF8Encoding.GetChars"/> method
   that actually decodes an array of bytes. The <see cref="System.Text.UTF8Encoding.GetByteCount"/> method reports the number of bytes that result from
   encoding strings or arrays of Unicode characters, and the <see cref="System.Text.UTF8Encoding.GetBytes"/> method actually encodes characters into an array of
   bytes.</para>
			<para>The <see cref="System.Text.UTF8Encoding.GetDecoder"/> method obtains an object to
convert (decode) UTF-8 encoded bytes into
Unicode characters, while the <see cref="System.Text.UTF8Encoding.GetEncoder"/> method
obtains an object to convert (encode) Unicode characters into UTF-8 encoded
bytes. The <see cref="System.Text.UTF8Encoding.GetPreamble"/>
method
can obtain a Unicode byte order mark, which when prefixed to a series of bytes,
indicates how those bytes are encoded. </para>
			<para>UTF-8 encodes Unicode characters with a variable number
   of bytes per character. This encoding is optimized for the lower 127 ASCII
   characters, yielding an efficient mechanism to encode English in an
   international way. The UTF-8 identifier is the Unicode byte order mark,
   hexadecimal 0xFEFF, which
   is
   represented in UTF-8 as hexadecimal 0xEF 0xBB 0xBF. The byte order mark is used to
   distinguish UTF-8 text from other encodings. </para>
			<para>This class offers an error detection feature that can be 
   turned on when you create an instance of the class using the <see cref="M:System.Text.UTF8Encoding.#ctor"/>
   constructor that
   takes a <paramref name="throwOnInvalidBytes"/> parameter. To turn on error
   detection, set the value of <paramref name="throwOnInvalidBytes "/>
   
   to true. For security reasons, it is
   recommended that you use this constructor. </para>
			<para> Certain
   methods in this class, such as <see cref="System.Text.UTF8Encoding.GetChars"/>, check for
   invalid sequences of surrogate pairs. If error detection is turned on and an
   invalid sequence is found, <see cref="System.ArgumentException"/> is thrown. If error
   detection is not turned on and an invalid sequence is found, no exception is
   thrown and execution continues in a manner defined by that method. </para>
			<para> The error detection feature also works during decoding
   operations. If error detection is on and an invalid byte sequence is found,
<see cref="System.ArgumentException"/> is thrown. Examples of invalid byte sequence are invalid
   leading or trailing UTF-8 bytes, UTF-8 byte sequence consisting of more than four bytes, and
   the non-shortest form as defined in Unicode 3.0.1. When error detection is off, invalid bytes are discarded.</para>
			<para> This class inherits from the <see cref="System.Text.Encoding"/> class. </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use a <see cref="System.Text.UTF8Encoding"/> to
   encode a string of Unicode characters and store them in the byte array <c>encodedBytes</c>. Notice that when
<c>encodedBytes</c> is decoded back 
to a string there is no loss of data.</para>
			<codelink SampleID="System.Text.UTF8Encoding Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.Decoder"/>
		<seealso cref="System.Text.Encoder"/>
	</doc>
	<doc for="UTF8Encoding.UTF8Encoding2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Text.UTF8Encoding"/> class. Parameters specify whether to prefix an encoding with
   a Unicode byte order mark, and whether to throw an exception when an
   invalid encoding is detected.</para>
		</summary>
		<param name="encoderShouldEmitUTF8Identifier"><see langword="true"/> to specify that a Unicode byte order mark prefix be emitted when encoding; otherwise, <see langword="false"/>.</param>
		<param name=" throwOnInvalidBytes"><see langword="true"/> to specify that an exception be thrown when an invalid encoding is detected; otherwise, <see langword="false"/>.</param>
		<remarks>
			<para>If <paramref name="throwOnInvalidBytes"/> is
<see langword="true"/>, a method that detects an invalid byte sequence throws 
<see cref="System.ArgumentException" qualify="true"/>; otherwise, the method does 
   not throw an exception and the invalid sequence is ignored. For security
   reasons, it is recommended that you use this constructor to create an instance
   of the <see cref="System.Text.UTF8Encoding"/>
   
   class and turn on error detection by setting
<paramref name="throwOnInvalidBytes"/> to <see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a new <see cref="System.Text.UTF8Encoding"/>
instance specifying that a Unicode byte order mark prefix should not be emitted
when encoding and an exception should be thrown when an invalid encoding is
detected. The behavior of this constructor is compared to the default
constructor for a <see cref="System.Text.UTF8Encoding"/> which does not throw an exception when an invalid
encoding is detected.</para>
			<codelink SampleID="System.Text.UTF8Encoding.ctor3 Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
