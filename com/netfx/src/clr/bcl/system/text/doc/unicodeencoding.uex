<docs>
	
	
	<doc for="UnicodeEncoding.UnicodeEncoding">
		<overload>
			<para> Initializes a new instance of the <see cref="System.Text.UnicodeEncoding"/>
class.</para>
		</overload>
		<summary>
			<para> Initializes
      a new instance of the <see cref="System.Text.UnicodeEncoding"/>
      class.
      </para>
		</summary>
		<remarks>
			<para> By default, this constructor requests little-endian byte ordering and byte
      order mark support.
      </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a 
      new <see cref="System.Text.UnicodeEncoding"/>
      instance and display the encoding name to the console.</para>
			<codelink SampleID="System.Text.UnicodeEncoding.ctor Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UnicodeEncoding.UnicodeEncoding1">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Text.UnicodeEncoding"/> class, specifying whether to support little-endian
   or big-endian byte ordering and the Unicode
   byte order mark.</para>
		</summary>
		<param name="bigEndian"><see langword="true"/> to support big-endian byte ordering when encoding, or <see langword="false"/> to support little-endian byte ordering. </param>
		<param name="byteOrderMark"><see langword="true"/> to include the Unicode byte order mark when encoding, or <see langword="false"/> to not include the Unicode byte order mark. </param>
		<remarks>
			<para>The <paramref name="byteOrderMark"/> parameter is used to determine the return value of
   the <see cref="System.Text.UnicodeEncoding.GetPreamble"/> method.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a 
      new <see cref="System.Text.UnicodeEncoding"/>
      instance specifying whether to support little-endian or big-endian byte
      ordering and the Unicode byte order mark. Depending on the values of the
   <paramref name="bigEndian"/> and <paramref name="byteOrderMark"/> parameters, the <see cref="System.Text.UnicodeEncoding"/>
   instance behaves differently.</para>
			<codelink SampleID="System.Text.UnicodeEncoding.ctor2 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UnicodeEncoding.Equals">
		<summary>
			<para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
		</summary>
		<param name=" value">An object to compare with this instance or <see langword="null"/>.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is an instance of <see langword="UnicodeEncoding"/>
and equals the value of this instance; otherwise, <see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UnicodeEncoding.Equals"/> method to test whether this instance of 
   a <see cref="System.Text.UnicodeEncoding"/> is equal to a different instance of a <see cref="System.Text.UnicodeEncoding"/>.
   Five instances of a <see cref="System.Text.UnicodeEncoding"/> are created and compared and the results of the
   comparisons are displayed to the console.</para>
			<codelink SampleID="System.Text.UnicodeEncoding.ctor2 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UnicodeEncoding.GetBytes2">
		<summary>
			<para> Encodes the characters from a specified <see cref="System.String"/>
and returns the results in a byte array.</para>
		</summary>
		<param name="s">The string of characters to encode. </param>
		<returns>
			<para>A byte array that contains the encoded characters from
   <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> is <see langword="null"/>. </exception>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UnicodeEncoding.GetBytes"/> method to encode the characters in the <see cref="System.String"/>
				<c>chars</c> and return the results in the 
byte array <c>bytes</c> using a
<see cref="System.Text.UnicodeEncoding"/>. The number of bytes 
used to encode <c>chars</c> and the
encoded bytes are displayed to the console.</para>
			<codelink SampleID="System.Text.UnicodeEncoding.GetBytes2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UnicodeEncoding.GetByteCount"/>
		<seealso cref="System.Text.UnicodeEncoding.GetMaxByteCount"/>
	</doc>
	<doc for="UnicodeEncoding.GetByteCount1">
		<summary>
			<para> Calculates the number of bytes required to store the results of
      encoding the characters from a specified <see cref="System.String"/>.</para>
		</summary>
		<param name="s">The <see cref="System.String"/> to encode. </param>
		<returns>
			<para> The number of bytes required to encode the characters in
   <paramref name="s"/>.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>Return value is greater than <see cref="System.Int32.MaxValue"/>.</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UnicodeEncoding.GetByteCount"/> to calculate exactly, or <see cref="System.Text.UnicodeEncoding.GetMaxByteCount"/> to calculate at most, the array size required by the <see cref="System.Text.UnicodeEncoding.GetBytes"/> method to store encoded characters.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use 
      the <see cref="System.Text.UnicodeEncoding.GetByteCount"/> method
      to return the number of bytes required to encode the <see cref="System.String"/>
				<c>chars</c>
   using a <see cref="System.Text.UnicodeEncoding"/>
   .</para>
			<codelink SampleID="System.Text.UnicodeEncoding.GetByteCount2 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UnicodeEncoding">
		<summary>
			<para>Represents a UTF-16 encoding of Unicode characters. </para>
		</summary>
		<remarks>
			<para> This class encodes Unicode characters in Unicode
      Transformation Format, 16-bit encoding form (UTF-16); that is, the character is
      encoded in a 16-bit field consisting of two consecutive bytes. An extension
      mechanism, using pairs of fields called surrogates, enables another 2<superscript term="20"/>
      characters to be
      
      encoded.
      </para>
			<para> The two bytes of an encoded character are stored in either little-endian or big-endian
      byte order depending on the computer architecture. In big-endian architectures the most significant byte is written and
      read first, while in little-endian architectures the
      least significant byte is written and read first.
      </para>
			<para> A UTF-16 encoding
      can be prefixed by a byte order mark (U+FEFF) to indicate the byte order
      used.
      It is assumed that the encoding is big-endian if the byte order mark
      is hexadecimal 0xFEFF, and little-endian if the byte order mark is hexadecimal 0xFFFE. (A
      byte order mark can also precede files encoded in UTF-8 format, but in that case
      the byte order mark just indicates UTF-8 encoding; it does not indicate byte order.
      For more information, see the <see cref="System.Text.UTF8Encoding"/>
      
      class.)
      </para>
			<para>This class contains a constructor, <see cref="M:System.Text.UnicodeEncoding.#ctor"/>, that can specify whether an encoding
   is little-endian or big-endian, and whether a byte order mark is used.</para>
			<para>This class contains the <see cref="System.Text.UnicodeEncoding.GetCharCount"/> method that reports the number of
Unicode characters that result from decoding an array of bytes, and the <see cref="System.Text.UnicodeEncoding.GetChars"/> method that actually decodes an array
of bytes. The <see cref="System.Text.UnicodeEncoding.GetByteCount"/> method reports the number of bytes
that result from encoding strings or arrays of Unicode characters, and the
<see cref="System.Text.UnicodeEncoding.GetBytes"/> method actually encodes characters 
into an array of bytes.</para>
			<para>The <see cref="System.Text.UnicodeEncoding.GetDecoder"/> method obtains an object to decode
bytes. The <see cref="System.Text.UnicodeEncoding.GetPreamble"/> method can obtain
an encoded Unicode byte order mark.</para>
			<para>For more information about Unicode, see the Unicode
   Standard at www.unicode.org.</para>
			<para> This class implements the <see cref="System.Text.Encoding"/>
abstract base class.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to 
      encode the string of Unicode characters <c>unicodeString</c> into the byte array <c>encodedBytes</c>
   using a <see cref="System.Text.UnicodeEncoding"/>. The byte array is decoded back
   into a string to demonstrate that there is no loss of data.</para>
			<codelink SampleID="System.Text.UnicodeEncoding Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UnicodeEncoding.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer hash code.</para>
		</returns>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UnicodeEncoding.GetHashCode"/> method to return a hashcode for an instance of 
   a <see cref="System.Text.UnicodeEncoding"/>. Notice that regardless of how a <see cref="System.Text.UnicodeEncoding"/> is
   created, all instances return the same hash code.</para>
			<codelink SampleID="System.Text.UnicodeEncoding.GetHashCode Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UnicodeEncoding.GetMaxByteCount">
		<summary>
			<para> Calculates the maximum number of bytes required to encode a specified
      number of characters.
      </para>
		</summary>
		<param name="charCount">The number of characters to encode. </param>
		<returns>
			<para> The maximum number of bytes required to encode
   <paramref name="charCount"/> number of
      characters.
      </para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="charCount"/> is less than zero.</para>
			<para>-or-</para>
			<para><paramref name="charCount "/>is too large to store as type <see cref="System.Int32"/> .</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UnicodeEncoding.GetByteCount"/> to calculate exactly, or <see cref="System.Text.UnicodeEncoding.GetMaxByteCount"/> to calculate at most, the array size required by the <see cref="System.Text.UnicodeEncoding.GetBytes"/> method to store encoded characters.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UnicodeEncoding.GetMaxByteCount"/> method to return the maximum number of bytes 
   required to encode a specified number of characters stored in the variable <c>charCount</c>.</para>
			<codelink SampleID="System.Text.UnicodeEncoding.GetMaxByteCount Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UnicodeEncoding.GetBytes"/>
		<seealso cref="System.Text.Encoder.GetBytes"/>
	</doc>
	<doc for="UnicodeEncoding.GetMaxCharCount">
		<summary>
			<para> Calculates the maximum number of characters that can result from decoding a specified
      number of bytes.
      </para>
		</summary>
		<param name="byteCount">The number of bytes to decode. </param>
		<returns>
			<para> The maximum number of characters that can result from decoding
   <paramref name="byteCount"/>
   number of bytes.
   </para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="byteCount"/> &lt; 0.</para>
			<para>-or-</para>
			<para><paramref name="byteCount "/>is too large to store as type <see cref="System.Int32"/> .</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UnicodeEncoding.GetCharCount"/> to calculate exactly, or <see cref="System.Text.UnicodeEncoding.GetMaxCharCount"/> to calculate at most, the array size required by the <see cref="System.Text.UnicodeEncoding.GetChars"/> method to store decoded characters.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Text.UnicodeEncoding.GetMaxCharCount"/> method to return the maximum number of characters 
   that can result from decoding a specified number of bytes stored in the variable
   <c>byteCount</c>.</para>
			<codelink SampleID="System.Text.UnicodeEncoding.GetMaxCharCount Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UnicodeEncoding.GetChars"/>
		<seealso cref="System.Text.Decoder.GetChars"/>
	</doc>
	<doc for="UnicodeEncoding.GetBytes1">
		<summary>
			<para> Encodes a specified range of characters from a <see cref="System.String"/>
and stores the results into a specified range of elements in a byte array.</para>
		</summary>
		<param name="s">The string of characters to encode. </param>
		<param name="charIndex">The index of the first character in <paramref name="s"/> to encode. </param>
		<param name="charCount">The number of characters to encode. </param>
		<param name="bytes">The byte array where the encoded results are stored. </param>
		<param name="byteIndex">The index of the first element in <paramref name="bytes"/> where the encoded results are stored. </param>
		<returns>
			<para> The number of bytes stored in <paramref name="bytes"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> or <paramref name="bytes"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><para>
				<paramref name="charIndex"/>, <paramref name="charCount "/>or <paramref name="byteIndex "/> is less than zero.</para>
			<para>-or-</para><para> The sum of <paramref name="charIndex "/>and <paramref name="charCount "/>is greater than the length of <paramref name="s"/>.</para>
			<para>-or-</para><para>
				<paramref name="byteIndex "/>is greater than the length of <paramref name="bytes"/>.</para></exception>
		<exception cref="System.ArgumentException"><para><paramref name="bytes "/>does not contain sufficient space to store the encoded characters.</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UnicodeEncoding.GetByteCount"/> to calculate exactly, or <see cref="System.Text.UnicodeEncoding.GetMaxByteCount"/> to calculate at most, the array size required by the <see cref="System.Text.UnicodeEncoding.GetBytes"/> method to store encoded characters.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the 
   <see cref="System.Text.UnicodeEncoding.GetBytes"/> method to encode a range of characters from
      the <see cref="System.String"/>
				<c>chars</c> and store the encoded
      bytes in a range of elements in the byte array <c>bytes</c>. The <see cref="System.Text.UnicodeEncoding.GetByteCount"/> method is used to determine the number of bytes required
   to store the encoded characters.</para>
			<codelink SampleID="System.Text.UnicodeEncoding.GetBytes3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UnicodeEncoding.GetByteCount"/>
		<seealso cref="System.Text.UnicodeEncoding.GetMaxByteCount"/>
	</doc>
	<doc for="UnicodeEncoding.GetCharCount">
		<overload>
			<para> Calculates the number of characters that would result from decoding the elements in a byte array.</para>
		</overload>
		<summary>
			<para> Calculates the number of characters that would result from decoding a specified range
      of elements in a byte array.
      </para>
		</summary>
		<param name="bytes">The byte array to decode. </param>
		<param name="index">The index of the first byte in <paramref name="bytes"/> to decode. </param>
		<param name="count">The number of bytes to decode. </param>
		<returns>
			<para> The number of characters that would result from decoding
      the specified range of elements in <paramref name="bytes"/>.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="bytes "/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index "/>and <paramref name="count "/>do not denote a valid range in <paramref name="bytes"/>.</exception>
		<remarks>
			<para>Use <see cref="System.Text.UnicodeEncoding.GetCharCount"/> to calculate exactly, or <see cref="System.Text.UnicodeEncoding.GetMaxCharCount"/> to
   calculate at most, the array size required by the <see cref="System.Text.UnicodeEncoding.GetChars"/>
   method to store decoded characters.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the 
   <see cref="System.Text.UnicodeEncoding.GetCharCount"/> method to return the number of characters that would
      result from decoding a range of elements in the byte array <c>bytes</c> using a <see cref="System.Text.UnicodeEncoding"/>.</para>
			<codelink SampleID="System.Text.UnicodeEncoding.GetCharCount Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UnicodeEncoding.GetChars">
		<overload>
			<para> Decodes the elements from a specified byte array and stores them as elements in a specified Unicode character array.</para>
		</overload>
		<summary>
			<para> Decodes a range of elements from a specified byte array and stores them as elements in a specified Unicode character array.
      </para>
		</summary>
		<param name="bytes">The byte array to decode. </param>
		<param name="byteIndex">The index of the first element in <paramref name="bytes"/> to decode. </param>
		<param name="byteCount">The number of elements to decode. </param>
		<param name="chars">The character array in which the decoded results are stored. </param>
		<param name="charIndex">The index of the first element in <paramref name="chars"/> to store decoded results. </param>
		<returns>
			<para> The number of characters stored in <paramref name="chars"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>
				<paramref name="bytes "/>or <paramref name="chars "/> is <see langword="null"/>. </para></exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="byteIndex"/>, <paramref name="byteCount"/>, or <paramref name="charIndex"/> is less than zero.</para><para> -or-</para><para>
				<paramref name="byteIndex "/>plus <paramref name="byteCount "/>is greater than the length of <paramref name="bytes"/>.</para><para> -or-</para><para><paramref name="charIndex"/> is greater than the length of <paramref name="chars"/>.</para></exception>
		<exception cref="System.ArgumentException"><paramref name="chars"/> does not contain sufficient space to store the decoded characters.</exception>
		<remarks>
			<para>Use <see cref="System.Text.UnicodeEncoding.GetCharCount"/> to calculate exactly, or <see cref="System.Text.UnicodeEncoding.GetMaxCharCount"/> to calculate at most, the array size required by the <see cref="System.Text.UnicodeEncoding.GetChars"/> method to store decoded characters.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the 
   <see cref="System.Text.UnicodeEncoding.GetChars"/>
   method to decode a range of elements in the byte array <c>bytes</c> and store the result in the character array
<c>chars</c>. The <see cref="System.Text.UnicodeEncoding.GetCharCount"/> method is used to calculate the number of characters 
needed to store the decoded elements.</para>
			<codelink SampleID="System.Text.UnicodeEncoding.GetChars Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UnicodeEncoding.GetCharCount"/>
		<seealso cref="System.Text.UnicodeEncoding.GetMaxCharCount"/>
		<seealso cref="System.Text.Encoding.GetChars"/>
	</doc>
	<doc for="UnicodeEncoding.GetDecoder">
		<summary>
			<para> Obtains a decoder that can convert a UTF-16 encoded
      sequence of bytes into a sequence of characters.
      </para>
		</summary>
		<returns>
			<para> A <see cref="System.Text.Decoder"/>
.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Text.Decoder.GetChars" qualify="true"/> method converts adjacent blocks of bytes into adjacent blocks of characters, in a manner similar to the <see cref="System.Text.UnicodeEncoding.GetChars"/> method. However, a <see cref="System.Text.Decoder"/> maintains state information between calls so it can correctly decode byte sequences that span blocks.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the 
   <see cref="System.Text.UnicodeEncoding.GetDecoder"/> method to obtain a Unicode decoder. The decoder is used
      to convert a sequence of encoded bytes in <c>bytes </c>into a sequence of characters in <c>chars</c>. </para>
			<codelink SampleID="System.Text.UnicodeEncoding.GetDecoder Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UnicodeEncoding.GetCharCount"/>
		<seealso cref="System.Text.UnicodeEncoding.GetChars"/>
	</doc>
	<doc for="UnicodeEncoding.GetPreamble">
		<summary>
			<para> Returns a Unicode byte order mark
      encoded in big-endian or little-endian format, if the constructor for this instance
      requested byte order mark support.</para>
		</summary>
		<returns>
			<para> If the constructor for this instance did not request
      byte order mark support, that is the byteOrderMark parameter of the <see cref="M:System.Text.UnicodeEncoding.#ctor"/> constructor is <see langword="false"/>
      , then a byte array of length zero.</para>
			<para>Otherwise, if the constructor requested big-endian byte
      order mark support then a byte array whose elements contain hexadecimal 0xFE,
      0xFF; or if the constructor requested little-endian byte order mark support then
      a byte array whose elements contain hexadecimal 0xFF, 0xFE.</para>
		</returns>
		<remarks>
			<para> The byte order mark (U+FEFF), when concatenated to the
      beginning of a UTF-16 encoding, enables a class like <see cref="System.IO.StreamReader" qualify="true"/> to deduce whether the remainder of the encoding is in big-endian or little-endian format. </para>
			<para> Concatenate this return value to the beginning of a UTF-16 encoding if the constructor for this instance requested support for a byte order mark.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use
      the <see cref="System.Text.UnicodeEncoding.GetPreamble"/> method to return the Unicode byte order mark in
      big-endian or little-endian format for an instance of a <see cref="System.Text.UnicodeEncoding"/>. </para>
			<codelink SampleID="System.Text.UnicodeEncoding.GetPreamble Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UnicodeEncoding.CharSize">
		<summary>
			<para> Represents the Unicode version 2.0 character size in bytes.
      </para>
		</summary>
		<remarks>
			<para>The value of this field is a 32-bit signed constant, with a value of two.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to return the 
      value of <see cref="System.Text.UnicodeEncoding.CharSize"/> and display it to the console.</para>
			<codelink SampleID="System.Text.UnicodeEncoding.CharSize Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UnicodeEncoding.GetByteCount">
		<overload>
			<para>Calculates the number of bytes required to store the
      results of encoding a set of characters from a specified <see cref="System.String"/> or Unicode character array.</para>
		</overload>
		<summary>
			<para>Calculates the number of bytes required to store the results of encoding a
      set of characters from a specified Unicode character array.</para>
		</summary>
		<param name="chars">The Unicode character array to encode. </param>
		<param name="index">The index of the first character in <paramref name="chars"/> to encode. </param>
		<param name="count">The number of characters to encode. </param>
		<returns>
			<para> The number of bytes required to encode the range in
   <paramref name="chars"/> from <paramref name="index"/> to <paramref name="index"/> + <paramref name="count"/> - 1.
      </para>
		</returns>
		<exception cref="System.ArgumentException"><para>Return value is greater than <see cref="System.Int32.MaxValue"/>.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="chars "/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><para> index is less than zero. </para>
			<para>-or-</para>
			<para>count is less than zero.</para>
			<para>-or-</para>
			<para><paramref name="index"/> plus <paramref name="count"/> is greater than the length of <paramref name="chars"/>.</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UnicodeEncoding.GetByteCount"/> to calculate exactly, or <see cref="System.Text.UnicodeEncoding.GetMaxByteCount"/> to
   calculate at most, the array size required by the <see cref="System.Text.UnicodeEncoding.GetBytes"/>
   method to store encoded characters.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use
      the <see cref="System.Text.UnicodeEncoding.GetByteCount"/> method
      to return the number of bytes required to encode the array of Unicode characters
      <c>chars</c>
      using <see cref="System.Text.UnicodeEncoding"/>
      .</para>
			<codelink SampleID="System.Text.UnicodeEncoding.GetByteCount1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UnicodeEncoding.GetBytes">
		<overload>
			<para>Encodes a specified range of characters from a Unicode character array or a <see cref="System.String"/> and stores the results
   into a specified byte array. </para>
		</overload>
		<summary>
			<para> Encodes a specified range of elements from a Unicode character
      array and stores the results into a specified range of elements in a byte array.
      </para>
		</summary>
		<param name="chars">The character array to encode. </param>
		<param name="charIndex">The index of the first character in <paramref name="chars"/> to encode. </param>
		<param name="charCount">The number of characters to encode. </param>
		<param name="bytes">The byte array where the encoded results are stored. </param>
		<param name="byteIndex">The index of the first element in <paramref name="bytes"/> where the encoded results are stored. </param>
		<returns>
			<para> The number of bytes stored in <paramref name="bytes"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="chars"/> or <paramref name="bytes"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><para>
				<paramref name="charIndex"/>, <paramref name="charCount "/>or <paramref name="byteIndex "/> is less than zero.</para>
			<para>-or-</para><para> The sum of <paramref name="charIndex "/>and <paramref name="charCount "/>is greater than the length of <paramref name="chars"/>.</para>
			<para>-or-</para><para>
				<paramref name="byteIndex "/>is greater than the length of <paramref name="bytes"/>.</para></exception>
		<exception cref="System.ArgumentException"><para><paramref name="bytes "/>does not contain sufficient space to store the encoded characters.</para></exception>
		<remarks>
			<para>Use <see cref="System.Text.UnicodeEncoding.GetByteCount"/> to calculate exactly, or <see cref="System.Text.UnicodeEncoding.GetMaxByteCount"/> to calculate at most, the array size required by the <see cref="System.Text.UnicodeEncoding.GetBytes"/> method to store encoded characters.</para>
		</remarks>
		<example>
			<para> The following example demonstrates how to encode a
      range of elements from the Unicode character array <c>chars</c> and store the encoded bytes in a range of elements
   in the byte array <c>bytes</c>. The <see cref="System.Text.UnicodeEncoding.GetByteCount"/>
method is used to determine the number of bytes
required to store the encoded elements.</para>
			<codelink SampleID="System.Text.UnicodeEncoding.GetBytes1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.UnicodeEncoding.GetByteCount"/>
		<seealso cref="System.Text.UnicodeEncoding.GetMaxByteCount"/>
	</doc>
</docs>
