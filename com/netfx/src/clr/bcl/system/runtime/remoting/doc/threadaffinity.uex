<docs>
	<doc for="ThreadAffinityAttribute.IsContextOK">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ThreadAffinityAttribute.GetPropertiesForNewContext">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ThreadAffinityAttribute.GetServerContextSink">
		<summary>
			<para>
       Takes the first sink in the chain of sinks composed so far and
       chains its message sink in front of the chain formed.
    </para>
		</summary>
		<param name="nextSink">
    The chain of sinks composed so far.
 </param>
		<returns>
			<para>
       Return a Context Message Sink.
    </para>
		</returns>
	</doc>
	<doc for="ThreadAffinityAttribute.GetClientContextSink">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ThreadAffinityAttribute.NOT_SUPPORTED">
		<summary>
			<para> Flag that indicates that the class should not be instantiated in a 
      context that has <see cref="System.Runtime.Remoting.Contexts.ThreadAffinityAttribute"/> .
      </para>
		</summary>
	</doc>
	<doc for="ThreadAffinityAttribute.SUPPORTED">
		<summary>
			<para> Flag that indicates that the class does not care if the context 
      has <see cref="System.Runtime.Remoting.Contexts.ThreadAffinityAttribute"/> or not.
      </para>
		</summary>
	</doc>
	<doc for="ThreadAffinityAttribute.REQUIRED">
		<summary>
			<para> Flag that indicates that the class should be instantiated in a 
      context that has <see cref="System.Runtime.Remoting.Contexts.ThreadAffinityAttribute"/> .
      </para>
		</summary>
	</doc>
	<doc for="ThreadAffinityAttribute.REQUIRES_NEW">
		<summary>
			<para> Flag that indicates that the class should be instantiated in a 
      context with a new instance of <see cref="System.Runtime.Remoting.Contexts.ThreadAffinityAttribute"/>
      property each
      time.
      </para>
		</summary>
	</doc>
	<doc for="ThreadAffinityAttribute.ThreadAffinityAttribute">
		<overload>
			<para> Initializes a new instance of the <see cref="System.Runtime.Remoting.Contexts.ThreadAffinityAttribute"/> class.
   </para>
		</overload>
		<summary>
			<para> Initializes a new instance of the <see cref="System.Runtime.Remoting.Contexts.ThreadAffinityAttribute"/> 
class with defaultvalues.</para>
		</summary>
		<remarks>
			<para>flag=REQUIRED and reentract=false.</para>
		</remarks>
	</doc>
	<doc for="ThreadAffinityAttribute.ThreadAffinityAttribute1">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Runtime.Remoting.Contexts.ThreadAffinityAttribute"/> class
   </para>
		</summary>
		<param name="bReEntrant">
			<see langword="true"/> if reentrant, otherwise false </param>
	</doc>
	<doc for="ThreadAffinityAttribute.ThreadAffinityAttribute2">
		<param name="flag">One the ThreadAffinity flags. </param>
		<remarks>
			<para>reEntrant = false. </para>
		</remarks>
	</doc>
	<doc for="ThreadAffinityAttribute.ThreadAffinityAttribute3">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Runtime.Remoting.Contexts.ThreadAffinityAttribute"/> class with the given flag and reentrant. (??????????)
   </para>
		</summary>
		<param name="flag">One the ThreadAffinity flags </param>
		<param name="bReEntrant">true if reentrant, otherwise false </param>
	</doc>
	<doc for="ThreadAffinityAttribute.Finalize">
		<summary>
			<para>Frees the resources of the current <see cref="System.Runtime.Remoting.Contexts.ThreadAffinityAttribute"/> before it is reclaimed by the 
   Garbage Collector (GC). </para>
		</summary>
	</doc>
	<doc for="ThreadAffinityAttribute.Freeze">
		<summary>
			<para>Called when the context is frozen.</para>
		</summary>
		<param name="ctx">The context to freeze.</param>
		<remarks>
			<para>Context properties cannot be added after the context has been frozen.</para>
		</remarks>
	</doc><doc for="ThreadAffinityAttribute">
		<summary>
			<para>Ensures that only a single thread is executing within the context with this
      property.</para>
			<para>Note: this class has been deprecated.</para>
		</summary>
		<remarks>
			<para> The thread affinity context property provides a similar
      capability as the <see cref="System.Runtime.Remoting.Contexts.SynchronizationAttribute"/> with the
      further constraint that only a single thread is allow to execute within the
      context or synchronization domain at any time. This is useful for objects that
      could hold onto OS resources that should only be accessed from a particular
      thread and only that thread. Thread affinity is useful when users want to always
      access the object on the same thread. Certain user interface resources
      should only be accessed on the same thread, on which they were created.
      </para>
			<para> An instance of this property in a context enforces a thread
      affinity domain for the context (and all contexts that share the same
      instance). This means that for all contexts sharing an instance of this
      property, all methods on objects resident in those contexts will execute on the
      same thread for the lifetime of the objects.
      </para>
			<para> This is done by contributing message sinks that intercept and
      serialize in-coming calls.
      </para>
			<para> If the property is marked for reentrancy, then call-outs are
      intercepted too. The call-out interception allows other waiting calls to enter
      the thread affinity domain.
      </para>
		</remarks>
		<example>
			<para>The following code sample shows how to use the <see cref="System.Runtime.Remoting.Contexts.ThreadAffinityAttribute"/>:</para>
			<codelink SampleID="Classic ThreadAffinityAttribute Example" SnippetID="1"/>
		</example>
	</doc></docs>
