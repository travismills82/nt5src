<docs>
	<doc for="ObjectHandle">
		<summary>
			<para>Wraps marshal by value object references, allowing
      them to be returned through an indirection.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.ObjectHandle"/> class is used to pass an object (in a
   wrapped state) between multiple application domains without loading the metadata
   for the wrapped object in each <see cref="System.AppDomain"/>
   through which the <see cref="System.Runtime.Remoting.ObjectHandle"/> travels. Thus, the <see cref="System.Runtime.Remoting.ObjectHandle"/> class gives the caller control of
   when the <see cref="System.Type"/> of the remote object is loaded into a domain.</para>
		</remarks>
		<example>
			<para>The following code example shows how to create an object in another <see cref="System.AppDomain"/>, and retrieve
   a proxy to the object from an <see cref="System.Runtime.Remoting.ObjectHandle"/>. In this example, you can assume that the
   code of the <see langword="MyType"/> class is compiled into an assembly called
   "ObjectHandleAssembly".</para>
			<codelink SampleID="ObjectHandle" SnippetID="1"/>
		</example>
	</doc><doc for="ObjectHandle.ObjectHandle">
		<summary>
			<para>Initializes an instance of the <see cref="System.Runtime.Remoting.ObjectHandle"/> class, wrapping the given object
<paramref name="o"/> .</para>
		</summary>
		<param name="o">The object that is wrapped by the new <see cref="System.Runtime.Remoting.ObjectHandle"/> .</param>
	</doc><doc for="ObjectHandle.Unwrap">
		<summary>
			<para>Returns the wrapped object.</para>
		</summary>
		<returns>
			<para>The wrapped object.</para>
		</returns>
		<remarks>
			<note type="cnotes">
      An <see cref="System.Runtime.Remoting.ObjectHandle"/> is a remoted <see cref="System.MarshalByRefObject"/> that is
      tracked by the remoting lifetime service. A call to the current
      method can fail if the lifetime lease on the <see cref="System.Runtime.Remoting.ObjectHandle"/> expires.
      
   </note>
		</remarks>
		<example>
			<para>The following code example demonstrates how to activate an object in another
   <see cref="System.AppDomain"/>,
      retrieve a proxy to it with the <see cref="System.Runtime.Remoting.ObjectHandle.Unwrap"/> method, and use the
      proxy to access the remote object.</para>
			<codelink SampleID="ObjectHandle" SnippetID="2"/>
		</example>
	</doc><doc for="ObjectHandle.InitializeLifetimeService">
		<summary>
			<para>Initializes the lifetime lease of the wrapped object.</para>
		</summary>
		<returns>
			<para>An initialized <see cref="System.Runtime.Remoting.Lifetime.ILease"/> that allows
   you to control the lifetime of the wrapped object.</para>
		</returns>
	</doc></docs>
