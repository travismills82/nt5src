<docs>
	<doc for="IClientResponseChannelSinkStack">
		<summary>
			<para>Provides the stack functionality for a stack of client response channel sinks that must be 
      invoked during an asynchronous message response decoding.</para>
		</summary>
	</doc><doc for="ClientChannelSinkStack.ClientChannelSinkStack">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.ClientChannelSinkStack"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.ClientChannelSinkStack"/> class with default values.</para>
		</summary>
	</doc><doc for="ClientChannelSinkStack.Pop">
		<summary>
			<para>Pops the information associated with all the sinks from the sink stack up to and including the specified sink.</para>
		</summary>
		<param name="sink">The sink to remove and return from the sink stack.</param>
		<exception cref="System.Runtime.Remoting.RemotingException">The current sink stack is empty, or the specified sink was never pushed onto the current stack.</exception>
		<returns>
			<para> Information generated on the request side and associated with the
 specified sink.</para>
		</returns>
	</doc><doc for="ServerChannelSinkStack.Pop">
		<summary>
			<para>Pops the information associated with all the sinks from the sink stack up to and including the specified sink.</para>
		</summary>
		<param name="sink">The sink to remove and return from the sink stack.</param>
		<exception cref="System.Runtime.Remoting.RemotingException">The current sink stack is empty, or the specified sink was never pushed onto the current stack.</exception>
		<returns>
			<para> Information generated on the request side and associated with the
 specified sink.</para>
		</returns>
	</doc><doc for="ServerChannelSinkStack.StoreAndDispatch"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IServerChannelSinkStack">
		<summary>
			<para> 
 Provides the stack functionality for a stack of server channel sinks.</para>
		</summary>
	</doc><doc for="IServerChannelSinkStack.Store">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IServerChannelSinkStack.StoreAndDispatch">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IServerChannelSinkStack.ServerCallback">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ServerChannelSinkStack.Store">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
		<param name="sink"></param>
		<param name=" state"></param>
		<exception cref="System.Runtime.Remoting.RemotingException">The current sink stack is empty, or the specified sink was never pushed onto the current stack.</exception>
	</doc><doc for="IServerResponseChannelSinkStack">
		<summary>
			<para> 
 Provides the stack functionality for a stack of server response
 channel sinks.</para>
		</summary>
	</doc><doc for="IServerResponseChannelSinkStack.AsyncProcessResponse">
		<internalonly/>
		<summary>
			<para>Requests asynchronous processing of a method call on the sinks in the current
 sink stack.</para>
		</summary>
		<param name="headers">The headers retrieved from the server response stream.</param>
		<param name=" stream">The stream coming back from the transport sink.</param>
		<remarks>
			<para>This method initializes asynchronous processing on the top sink in the
 current sink stack. For additional information, see <see cref="System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse" qualify="true"/>.</para>
		</remarks>
	</doc><doc for="ServerChannelSinkStack.AsyncProcessResponse">
		<nodoc/>
		<summary>
			<para>Requests asynchronous processing of a method call on the sinks in the current
 sink stack.</para>
		</summary>
		<param name="headers">The headers retrieved from the server response stream.</param>
		<param name=" stream">The stream coming back from the transport sink.</param>
		<exception cref="System.Runtime.Remoting.RemotingException">The current sink stack is empty.</exception>
		<remarks>
			<para>This method initializes asynchronous processing on the top sink in the
 current sink stack. For additional information, see <see cref="System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse" qualify="true"/>.</para>
		</remarks>
	</doc><doc for="ServerChannelSinkStack.ServerCallback">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ClientChannelSinkStack.ClientChannelSinkStack1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.ClientChannelSinkStack"/> class with the specified reply sink.</para>
		</summary>
		<param name="replySink">The <see cref="System.Runtime.Remoting.Messaging.IMessageSink"/> that the current stack can use to reply to messages.</param>
	</doc><doc for="ClientChannelSinkStack.AsyncProcessResponse">
		<summary>
			<para>Requests asynchronous processing of a method call on the sinks in the current
 sink stack.</para>
		</summary>
		<param name="headers">The headers retrieved from the server response stream.</param>
		<param name=" stream"> The stream returning from the transport sink.</param>
		<exception cref="System.Runtime.Remoting.RemotingException">The current sink stack is empty.</exception>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.ClientChannelSinkStack.AsyncProcessResponse"/> method initializes asynchronous processing on the top sink in the
 current sink stack. For additional information, see <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessResponse" qualify="true"/>.</para>
		</remarks>
	</doc><doc for="ClientChannelSinkStack.DispatchReplyMessage">
		<summary>
			<para>Dispatches the specified reply message on the reply sink.</para>
		</summary>
		<param name="msg">The <see cref="System.Runtime.Remoting.Messaging.IMessage"/> to dispatch.</param>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.ClientChannelSinkStack.DispatchReplyMessage"/> method dispatches the specified message to the server through the reply
 sink specified in the constructor of the current sink stack. If the current sink
 stack was created without a reply sink, the message is not transmitted, and no
 new exception is thrown.</para>
		</remarks>
	</doc><doc for="ClientChannelSinkStack.DispatchException">
		<summary>
			<para>Dispatches the specified exception on the reply sink.</para>
		</summary>
		<param name="e">The exception to dispatch to the server.</param>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.ClientChannelSinkStack.DispatchException"/> method dispatches the specified exception to the
 server through the reply sink specified in the constructor of the current sink
 stack. If the current sink stack was created without a reply
 sink, the exception is not transmitted, and no new exception is thrown.</para>
		</remarks>
	</doc><doc for="IClientChannelSinkStack">
		<summary>
			<para>Provides functionality for a stack of client channel sinks that must be
 invoked during an asynchronous message response decoding.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkStack"/> is used during processing
 of responses to Asynchronous Calls. </para>
			<para>During a synchronous call, the <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage" qualify="true"/> method is called when a
message is outbound to the server. Each sink in the sink chain calls
the <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage"/> method on
the next sink until the call reaches the Transport Sink at the end of the chain. From there the
message is transported to the server. </para>
			<para>When the formatter sink is called through the <see cref="System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage"/> method, it dispatches the call
asynchronously by calling <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest"/> on the next channel sink. A
stack of reply sinks is needed to process the response. Any sink that wants to process
the response needs to push itself to the client channel sink stack inside of
<see cref="System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest"/> 
.</para>
		</remarks>
		<seealso cref="T:System.Runtime.Remoting.Channels.IClientChannelSink"/>
	</doc><doc for="ServerChannelSinkStack.GetResponseStream">
		<summary>
			<para>Returns the <see cref="System.IO.Stream"/> onto which the specified message is
   to be serialized.</para>
		</summary>
		<param name="msg">The message to be serialized onto the requested stream.</param>
		<param name=" headers">The headers retrieved from the server response stream.</param>
		<returns>
			<para>The <see cref="System.IO.Stream"/>
onto which the specified message is to be serialized.</para>
		</returns>
		<exception cref="System.Runtime.Remoting.RemotingException">The sink stack is empty.</exception>
		<remarks>
			<para>This method returns the stream returned by the <see cref="System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream" qualify="true"/> called with 
   the <paramref name="msg"/> and <paramref name="headers"/>
   parameters ( <see cref="System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream"/> (<paramref name="msg"/>, <paramref name="headers"/>) ) on the top sink in the current
   sink stack. The top sink in the sink stack remains unchanged.</para>
		</remarks>
	</doc><doc for="ClientChannelSinkStack.Push">
		<summary>
			<para>Pushes the specified sink and information associated with it onto the sink
      stack.</para>
		</summary>
		<param name="sink">The sink to push onto the sink stack.</param>
		<param name=" state">Information generated on the request side that is needed on the response side.</param>
		<remarks>
			<note type="note">
      The information generated on
      the request side and specified in the <paramref name="state "/>parameter is returned in the
   <paramref name="state"/> parameter of the <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessResponse"/> method on 
      the corresponding sink.
   </note>
		</remarks>
	</doc><doc for="ServerChannelSinkStack.Push">
		<summary>
			<para>Pushes the specified sink and information associated with it onto the sink
      stack.</para>
		</summary>
		<param name="sink">The sink to push onto the sink stack.</param>
		<param name=" state">Information generated on the request side that is needed on the response side.</param>
		<remarks>
			<note type="note">
      The
      information generated on the request side and specified in the <paramref name="state
      "/> parameter is returned in the
   <paramref name="state"/> parameter of the <see cref="System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse"/> method on 
      the corresponding sink.
   </note>
		</remarks>
	</doc><doc for="IClientChannelSinkStack.Push">
		<summary>
			<para>Pushes the specified sink and information associated with it onto the sink
      stack.</para>
		</summary>
		<param name="sink">The sink to push onto the sink stack.</param>
		<param name=" state">Information generated on the request side that is needed on the response side.</param>
		<remarks>
			<note type="note">
      The information
      generated on the request side and specified in the <paramref name="state "/>parameter is
      returned in the <paramref name="state"/> parameter of the <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessResponse"/> method on
      the corresponding sink.
      </note>
		</remarks>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IClientChannelSinkStack.Pop">
		<summary>
			<para>Pops the information associated with all the sinks from the sink stack up to and including the specified sink.</para>
		</summary>
		<param name="sink">The sink to remove and return from the sink stack.</param>
		<returns>
			<para> Information generated on the request side and associated with the
      specified sink.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IClientResponseChannelSinkStack.AsyncProcessResponse">
		<summary>
			<para>Requests asynchronous processing of a method call on the sinks in the current
      sink stack.</para>
		</summary>
		<param name="headers">The headers retrieved from the server response stream.</param>
		<param name=" stream">The stream coming back from the transport sink.</param>
		<exception cref="System.Runtime.Remoting.RemotingException">The current sink stack is empty.</exception>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack.AsyncProcessResponse"/> method initializes asynchronous processing on the top sink in the
   current sink stack. For additional information, see <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessResponse" qualify="true"/>.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IClientResponseChannelSinkStack.DispatchReplyMessage">
		<summary>
			<para>Dispatches the specified reply message on the reply sink.</para>
		</summary>
		<param name="msg">The <see cref="System.Runtime.Remoting.Messaging.IMessage"/> to dispatch.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack.DispatchReplyMessage"/> method dispatches the specified message to the server through the reply
   sink specified in the constructor of the current sink stack. If the current sink
   stack was created without a reply sink, the message is not transmitted, and no
   new exception is thrown.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IClientResponseChannelSinkStack.DispatchException">
		<summary>
			<para>Dispatches the specified exception on the reply sink.</para>
		</summary>
		<param name="e">The exception to dispatch to the server.</param>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack.DispatchException"/> method dispatches the specified exception to the
   server through the reply sink specified in the constructor of the current sink
   stack. If the current sink stack was created without a reply
   sink, the exception is not transmitted, and no new exception is thrown.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IServerChannelSinkStack.Push">
		<summary>
			<para>Pushes the specified sink and information associated with it onto the sink stack.</para>
		</summary>
		<param name="sink">The sink to push onto the sink stack.</param>
		<param name=" state">Information generated on the request side that is needed on the response side.</param>
		<remarks>
			<note type="note">
      The information generated on
      the request side and specified in the <paramref name="state "/>parameter is returned in
      the <paramref name="state"/> parameter of the <see cref="System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse"/> method on
      the corresponding sink.
      </note>
		</remarks>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IServerChannelSinkStack.Pop">
		<summary>
			<para>Pops the information associated with all the sinks from the sink stack up to and including the specified sink.</para>
		</summary>
		<param name="sink">The sink to remove and return from the sink stack.</param>
		<returns>
			<para> Information generated on the request side and associated with the
      specified sink.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IServerResponseChannelSinkStack.GetResponseStream">
		<summary>
			<para>Returns the <see cref="System.IO.Stream"/> onto which the specified message is
   to be serialized.</para>
		</summary>
		<param name="msg">The message to be serialized onto the requested stream.</param>
		<param name=" headers">The headers retrieved from the server response stream.</param>
		<returns>
			<para>The <see cref="System.IO.Stream"/>
onto which the specified message is to be serialized.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="ServerChannelSinkStack">
		<summary>
			<para> Holds the stack of server channel sinks.</para>
		</summary>
		<remarks>
			<note type="note">
      This class makes a link demand. A SecurityException is thrown if the immediate caller does not have infrastructure permission. See <see topic="cpconLinkDemands"/> for more information.
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="ClientChannelSinkStack">
		<summary>
			<para>Holds the stack of client channel sinks that must be
      invoked during an asynchronous message response decoding.</para>
		</summary>
		<remarks>
			<note type="note">
      This class makes a link demand. A SecurityException is thrown if the immediate caller does not have infrastructure permission. See <see topic="cpconLinkDemands"/> for more information.
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
</docs>
