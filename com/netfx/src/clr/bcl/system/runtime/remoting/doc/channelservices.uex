<docs>
	<doc for="ChannelServices">
		<summary>
			<para> Provides static methods to aid with remoting channel
      registration, resolution, and URL discovery. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para> Channels transport messages between applications across remoting boundaries such as
      AppDomains, processes, and computers. These crossings can be inbound and outbound. A channel can listen
      on an endpoint for inbound messages, send to an endpoint for outbound messages,
      or both. This provides an extensibility point in the runtime to plug in
      a wide range protocols, even though the runtime might not be at the other end
      of the channel. Run-time objects can be used to expose a wide range of semantics and
      entities. The channel provides the extensibility point to convert the messages
      to and from the specific protocols. </para>
			<para>Channels must expose the <see cref="System.Runtime.Remoting.Channels.IChannel"/> interface,
   which provides informational properties such as the <see cref="System.Runtime.Remoting.Channels.IChannel.ChannelName"/> and <see cref="System.Runtime.Remoting.Channels.IChannel.ChannelPriority"/>. Channels are registered using
   the <see cref="System.Runtime.Remoting.Channels.ChannelServices.RegisterChannel" qualify="true"/> method. Channels can
   also be loaded from the remoting configuration. (See <see topic="gnconchanneltemplate"/>
   for details.)</para>
			<para>On the client side, messages are handed off to the
   client channel sink chain after they traverse the client <see cref="System.Runtime.Remoting.Contexts.Context"/> chain. The first channel sink
   is typically an <see cref="System.Runtime.Remoting.Channels.IClientFormatterSink"/>, which
   serializes the message into a stream that is passed down the
   channel sink chain to the client transport sink. The client transport sink then
   writes this stream out to the wire. </para>
			<para> On the server side, the server transport sink reads requests off the wire
   and passes the request stream to the server channel sink chain. The server
   formatter sink at the end of this chain will deserialize the request into a
   message. It will then hand this message off to the Remoting infrastructure, which
   will dispatch it to the server <see cref="System.Runtime.Remoting.Contexts.Context"/> chain. </para>
		</remarks>
		<seealso topic="cpconapplicationdomains"/>
	</doc>
	<doc for="ChannelServices.RegisterChannel">
		<summary>
			<para> Registers a channel with the channel services.</para>
		</summary>
		<param name="chnl">The channel to register.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="chnl "/>parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Remoting.RemotingException">The channel has already been registered.</exception>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.ChannelServices.RegisterChannel"/> method takes in the <see cref="System.Runtime.Remoting.Channels.IChannel"/> interface from a channel
   object. The channel's <see cref="System.Runtime.Remoting.Channels.IChannel.ChannelName"/> must either be
   unique, or the channel must be anonymous. A channel is anonymous if
   the <see cref="System.Runtime.Remoting.Channels.IChannel.ChannelName" qualify="true"/> is set to
   either <see langword="null"/> or <see cref="System.String.Empty"/> by using
   the <see langword="name "/>
   configuration property.</para>
			<note type="note">
   You cannot register two channels with
   the same name in an <see cref="System.AppDomain"/>. By default, the name of
   an <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel"/> is "http", and the name
   of a <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel"/> is "tcp". Therefore,
   if you want to register two channels of the same type, you must specify a
   different name for one of them through configuration properties.
</note>
			<para>For more information on channel configuration
   properties, see <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel"/>, and <see topic="gnconchanneltemplate"/>.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. </exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="HttpChannel" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ChannelServices.UnregisterChannel">
		<summary>
			<para>Unregisters
      a particular channel from the registered channels list.</para>
		</summary>
		<param name="chnl">The channel to unregister.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="chnl "/>parameter is <see langword="null"/> .</exception>
		<exception cref="System.Runtime.Remoting.RemotingException">The channel is not registered.</exception>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. </exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="ChannelServices_RegisteredChannels" SnippetID="3"/>
		</example>
	</doc>
	<doc for="ChannelServices.RegisteredChannels">
		<summary>
			<para> Gets a list of currently registered channels.</para>
		</summary>
		<value>
			<para> An array of all the currently registered channels.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="ChannelServices_RegisteredChannels" SnippetID="2"/>
		</example>
	</doc>
	<doc for="ChannelServices.GetChannel">
		<summary>
			<para> Returns a registered channel with the specified
      name.</para>
		</summary>
		<param name="name">The channel name.</param>
		<returns>
			<para>An interface to a registered channel, or
   <see langword="null"/>
   if
   the channel is not registered.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="ChannelServices_GetChannel" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ChannelServices.GetUrlsForObject">
		<summary>
			<para> Returns an array of all the URLs that can be used to reach the specified object.</para>
		</summary>
		<param name="obj">The object to retrieve the URL array for.</param>
		<returns>
			<para> An array of strings containing
      the URLs that can be used to remotely identify the object, or
   <see langword="null"/> if none were
      found.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="ChannelServices_RegisteredChannels" SnippetID="4"/>
		</example>
	</doc>
	<doc for="ChannelServices.GetChannelSinkProperties">
		<summary>
			<para> Returns an <see cref="System.Collections.IDictionary"/>
of properties for a given proxy.</para>
		</summary>
		<param name="obj">The proxy to retrieve properties for.</param>
		<returns>
			<para>An interface to the dictionary of properties or
   <see langword="null"/> if
      no properties were found.</para>
		</returns>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. </exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="ChannelServices_GetChannel" SnippetID="2"/>
		</example>
	</doc>
	<doc for="ChannelServices.DispatchMessage">
		<summary>
			<para>Dispatches incoming remote calls.</para>
		</summary>
		<param name="sinkStack">The stack of server channel sinks that the message already traversed.</param>
		<param name=" msg">The message to dispatch.</param>
		<param name=" replyMsg">When this method returns, contains an <see cref="System.Runtime.Remoting.Messaging.IMessage"/> that holds the reply from the server to the message contained in the <paramref name="msg "/>parameter. This parameter is passed uninitialized.</param>
		<returns>
			<para>A <see cref="System.Runtime.Remoting.Channels.ServerProcessing"/> that gives the status of the
   server message processing.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="msg"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>This method is used by channels to dispatch incoming remote calls.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="ChannelServices.SyncDispatchMessage">
		<summary>
			<para> Synchronously
      dispatches the incoming message to the server-side chain(s) based on the URI
      embedded in the message.</para>
		</summary>
		<param name="msg">The message to dispatch.</param>
		<returns>
			<para> A reply message is returned by the call to the server-side chain.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="msg"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="ChannelServices_SyncDispatchMessage" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ChannelServices.AsyncDispatchMessage">
		<summary>
			<para> Asynchronously dispatches the given message to the server-side chain(s) based on the URI
      embedded in the message.</para>
		</summary>
		<param name=" msg">The message to dispatch.</param>
		<param name="replySink">The sink that will process the return message if it is not <see langword="null"/>.</param>
		<returns>
			<para>An <see cref="System.Runtime.Remoting.Messaging.IMessageCtrl"/> object used to control the
   asynchronously dispatched message.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="msg"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para> The current method returns
      immediately, whether the server processed the specified message or not.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="ChannelServices.CreateServerChannelSinkChain">
		<summary>
			<para>Creates a channel sink chain for the specified channel.</para>
		</summary>
		<param name="provider">The first provider in the chain of sink providers that will create the channel sink chain.</param>
		<param name=" channel">The <see cref="System.Runtime.Remoting.Channels.IChannelReceiver"/> for which to create the channel sink chain.</param>
		<returns>
			<para>A new channel sink chain for the specified channel.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
</docs>
