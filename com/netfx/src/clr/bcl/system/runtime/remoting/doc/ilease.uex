<docs>
	<doc for="ILease.Register">
		<overload>
			<para>Registers a sponsor for the lease.</para>
		</overload>
		<summary>
			<para> Registers a sponsor for the lease, and renews it by the
      specified <see cref="System.TimeSpan"/>
      .</para>
		</summary>
		<param name=" obj">The callback object of the sponsor.</param>
		<param name="renewalTime">The length of time to renew the lease by.</param>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="ILease.Register1">
		<summary>
			<para>Registers a sponsor for the lease without renewing the
      lease.</para>
		</summary>
		<param name="obj">The callback object of the sponsor. </param>
		<remarks>
			<para> If a sponsor is registered with the current method, the lease
      is not renewed. </para>
		</remarks>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="ILease.Unregister">
		<summary>
			<para>Removes a sponsor from the sponsor list.</para>
		</summary>
		<param name="obj">The lease sponsor to unregister.</param>
		<returns>
			<para> After this method is called, the lease state changes to expired and
      the object is collected by the garbage collector.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="ILease.Renew">
		<summary>
			<para>Renews a lease for the specified time.</para>
		</summary>
		<param name="renewalTime">The length of time to renew the lease by.</param>
		<returns>
			<para> The new expiration time of the lease.</para>
		</returns>
		<remarks>
			<para>The lease time is set to the maximum of the <see cref="System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime"/> or the current time plus the
   renewal time.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="ILease">
		<summary>
			<para> Defines a lifetime lease object that is used by the remoting
      lifetime service.</para>
		</summary>
		<remarks>
			<para>Distributed garbage collection controls when server applications can be deleted.
      Traditionally, distributed garbage collection uses reference counts and pinging
      for control. This works well when there are a few clients per object, but
      does not work well when there are thousands of clients per each object. The
      lifetime service can assume the function of a traditional distributed garbage
      collector, and scales well when the number of clients increases.</para>
			<para>The lifetime service associates a lease with each remotely activated
      object. When the lease expires, the object is removed. A lease can specify
      that an object has an infinite lifetime. </para>
			<para> Each <see cref="System.AppDomain"/>
contains a lease
manager that administers the leases in the domain. The lease manager periodically examines the
leases for time expiration. If a lease has expired, it can either be canceled
by removing its reference to the lease,
or renewed by invoking one
or more of the lease's sponsors.</para>
			<para> A lease contains properties that determine its policies, and
   methods that renew the lease time. The lease exposes the <see cref="System.Runtime.Remoting.Lifetime.ILease"/>
   interface.</para>
		</remarks>
		<example>
			<para lang="VB, C#">The following example consists of three assemblies: a client, a server,
      and a library shared by the client and server. Compile the library first,
      then the client and server. The following commands compile the Visual Basic
      files; to compile the C# files, use the csc command and .cs file
      extensions. The file names shown are only suggestions.</para>
			<code>
vbc /t:library ILeaseShare.vb
vbc /r:ILeaseShare.dll ILeaseServer.vb
vbc /r:ILeaseShare.dll /r:System.Runtime.Remoting.dll ILeaseClient.vb
   </code>
			<para lang="VB, C#">It is not necessary to use all Visual Basic files or all C# files; once
      compiled, the assemblies work together regardless of the
      source language. To run the example, open two command windows. Run the
      server first, then run the client. If you place the client and server in
      separate folders, you must place a copy of the shared library in each
      folder.</para>
			<para lang="VB, C#">The following code is for the shared library.</para>
			<codelink SampleID="ILease_ILease" SnippetID="5"/>
			<para lang="VB, C#">The following code is for the client assembly.</para>
			<codelink SampleID="ILease_ILease" SnippetID="1"/>
			<para lang="VB, C#">The following code is for the server assembly.</para>
			<codelink SampleID="ILease_ILease" SnippetID="4"/>
		</example>
	</doc>
	<doc for="ILease.RenewOnCallTime">
		<summary>
			<para>Gets or sets the amount of time by which a call to the
      remote object increases the <see cref="System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime"/>
      .</para>
		</summary>
		<value>
			<para>The amount of time by which a call to the remote object
      increases the <see cref="System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime"/>
      .
      
   </para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</exception>
		<remarks>
			<para>The lifetime service adds <see cref="System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime"/> to
<see cref="System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime"/> every time that a call 
   is made on the object.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para lang="VB, C#">The 
      following example uses <see cref="System.Runtime.Remoting.RemotingServices.GetLifetimeService" qualify="true"/> to
      obtain an object that implements the <see cref="System.Runtime.Remoting.Lifetime.ILease"/> interface. To
      compile and run this example, you need the complete client, server, and shared
      library code found in the example for <see cref="System.Runtime.Remoting.Lifetime.ILease"/>.</para>
			<codelink SampleID="ILease_ILease" SnippetID="3"/>
		</example>
	</doc>
	<doc for="ILease.SponsorshipTimeout">
		<summary>
			<para>Gets or sets the amount of time to wait
      for a sponsor to return with a lease renewal time.</para>
		</summary>
		<value>
			<para>The amount of time to wait for a sponsor to return with
      a lease renewal time.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</exception>
		<remarks>
			<para>If the <see cref="System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout"/> is <see cref="System.TimeSpan.Zero" qualify="true"/>, then
   this lease will not take sponsors.</para>
			<para>If a sponsor does not respond to a call to renew a lease within the time-out
   period, it is assumed to be dead and is removed from the list of sponsors for
   the current lease.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para lang="VB, C#">The 
      following example uses <see cref="System.Runtime.Remoting.RemotingServices.GetLifetimeService" qualify="true"/> to
      obtain an object that implements the <see cref="System.Runtime.Remoting.Lifetime.ILease"/> interface. To
      compile and run this example, you need the complete client, server, and shared
      library code found in the example for <see cref="System.Runtime.Remoting.Lifetime.ILease"/>.</para>
			<codelink SampleID="ILease_ILease" SnippetID="3"/>
		</example>
	</doc>
	<doc for="ILease.InitialLeaseTime">
		<summary>
			<para>Gets or sets the initial time for the lease.</para>
		</summary>
		<value>
			<para>The initial time for the lease.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</exception>
		<remarks>
			<para>If the <see cref="System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime"/> property is set to
<see cref="System.TimeSpan.Zero" qualify="true"/> , then the 
   lease will never time out and the object associated with it will have an infinite lifetime.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para lang="VB, C#">The 
      following example uses <see cref="System.Runtime.Remoting.RemotingServices.GetLifetimeService" qualify="true"/> to
      obtain an object that implements the <see cref="System.Runtime.Remoting.Lifetime.ILease"/> interface. To
      compile and run this example, you need the complete client, server, and shared
      library code found in the example for <see cref="System.Runtime.Remoting.Lifetime.ILease"/>.</para>
			<codelink SampleID="ILease_ILease" SnippetID="3"/>
		</example>
	</doc>
	<doc for="ILease.CurrentLeaseTime">
		<summary>
			<para> Gets the amount of time remaining on the lease.
      </para>
		</summary>
		<value>
			<para>The amount of time remaining on the lease. </para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para lang="VB, C#">The 
      following example uses <see cref="System.Runtime.Remoting.RemotingServices.GetLifetimeService" qualify="true"/> to
      obtain an object that implements the <see cref="System.Runtime.Remoting.Lifetime.ILease"/> interface. To
      compile and run this example, you need the complete client, server, and shared
      library code found in the example for <see cref="System.Runtime.Remoting.Lifetime.ILease"/>.</para>
			<codelink SampleID="ILease_ILease" SnippetID="3"/>
		</example>
	</doc>
	<doc for="ILease.CurrentState">
		<summary>
			<para>Gets the current <see cref="System.Runtime.Remoting.Lifetime.LeaseState"/> of the lease.</para>
		</summary>
		<value>
			<para>The current <see cref="System.Runtime.Remoting.Lifetime.LeaseState"/> of the lease.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para lang="VB, C#">The 
      following example uses <see cref="System.Runtime.Remoting.RemotingServices.GetLifetimeService" qualify="true"/> to
      obtain an object that implements the <see cref="System.Runtime.Remoting.Lifetime.ILease"/> interface. To
      compile and run this example, you need the complete client, server, and shared
      library code found in the example for <see cref="System.Runtime.Remoting.Lifetime.ILease"/>.</para>
			<codelink SampleID="ILease_ILease" SnippetID="3"/>
		</example>
		<seealso cref="System.Runtime.Remoting.Lifetime.LeaseState"/>
	</doc>
</docs>
