<docs>
	<doc for="new_appdomain.new_appdomain">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="new_appdomain.IsContextOK">
		<summary>
		</summary>
		<param name=" ctx">
		</param>
		<param name="msg">
		</param>
	</doc>
	<doc for="new_appdomain.GetPropertiesForNewContext">
		<summary>
		</summary>
		<param name="ctorMsg">
		</param>
	</doc>
	<doc for="new_appdomain.DoSimpleXADActivation">
		<summary>
		</summary>
		<param name="msg">
		</param>
	</doc>
	<doc for="new_appdomain.activator.Activate">
		<summary>
		</summary>
		<param name="msg">
		</param>
	</doc>
	<doc for="new_appdomain.activator.LoadAssembly">
		<summary>
		</summary>
		<param name="an">
		</param>
	</doc>
	<doc for="MBR.MyAppDomain">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CB.MyAppDomain">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ContextAttribute.ContextAttribute">
		<summary>
   Creates an instance of the <see cref="System.Runtime.Remoting.Contexts.ContextAttribute"/> class with the specified name.
</summary>
		<param name="name">The name of the context attribute. </param>
		<remarks>
			<note type="inheritinfo">
      The derived class must
      call: base(name);
   </note>
		</remarks>
	</doc><doc for="ContextAttribute.GetHashCode">
		<summary>
			<para>Returns the hashcode for this instance of <see cref="System.Runtime.Remoting.Contexts.ContextAttribute"/> .</para>
		</summary>
		<returns>
			<para>The hashcode for this instance of <see cref="System.Runtime.Remoting.Contexts.ContextAttribute"/> .</para>
		</returns>
	</doc><doc for="ContextProperty.Name">
		<summary>
			<para> Gets the name of the <see cref="System.Runtime.Remoting.Contexts.ContextProperty"/>.
   </para>
		</summary>
		<value>
			<para>
      The name of the <see cref="System.Runtime.Remoting.Contexts.ContextProperty"/>
      .</para>
		</value>
	</doc><doc for="ContextProperty.Property">
		<summary>
   Gets the object representing the property of a context.
</summary>
		<value>
			<para>The object representing the property of a context.</para>
		</value>
	</doc><doc for="IContextProperty.Name">
		<summary>
			<para> Gets the name of the property under which it will be added to the context.
      </para>
		</summary>
		<value>
			<para>The name of the property.</para>
		</value>
	</doc><doc for="IContextProperty.Freeze">
		<summary>
			<para> Called when the context is frozen.
      </para>
		</summary>
		<param name="newContext">The context to freeze. </param>
		<remarks>
			<para>Context properties cannot be added after the context has 
      been frozen.</para>
		</remarks>
	</doc><doc for="ContextAttribute.AttributeName">
		<summary>
			<para> Indicates the name of the context attribute.
      </para>
		</summary>
	</doc><doc for="ContextAttribute.Freeze">
		<summary>
			<para>Called when the context is frozen.</para>
		</summary>
		<param name="newContext">The context to freeze.</param>
		<remarks>
			<para>Context properties cannot be added after the context has been frozen.</para>
		</remarks>
	</doc><doc for="ContextAttribute.IsNewContextOK">
		<summary>
			<para>Returns a Boolean value indicating whether the context property is OK with
      the new context. </para>
		</summary>
		<param name="newCtx">The new <see cref="System.Runtime.Remoting.Contexts.Context"/> in which the <see cref="System.Runtime.Remoting.Contexts.ContextProperty"/> has been created. </param>
		<returns>
			<para><see langword="true"/> if the context property is OK with the new context; <see langword="false"/> otherwise. </para>
		</returns>
		<remarks>
			<para>Once all the context properties have been added to the 
      new context, they are all asked whether they are OK in the new context. The
      context property could look at the other context properties in <see cref="System.Runtime.Remoting.Contexts.Context.ContextProperties" qualify="true"/> of the new context, and
      determine whether it is compatible with these other context properties.</para>
			<note type="note">
      Default implementation of the method returns <see langword="true"/>.
   </note>
		</remarks>
	</doc><doc for="ContextAttribute.GetPropertiesForNewContext">
		<summary>
			<para>Adds the current context property to the given <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/>
				<paramref name="ctorMsg"/> . </para>
		</summary>
		<param name="ctorMsg">The <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/> to which to add the context property.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="ctorMsg"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Contexts.ContextAttribute"/> is an 
   implementation of an <see cref="System.Runtime.Remoting.Contexts.IContextProperty"/>. The <see cref="System.Runtime.Remoting.Contexts.ContextAttribute.GetPropertiesForNewContext"/> method adds the property to
   the given <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/>
   so that when the message is received, the new object
   could be created in the required context environment.</para>
		</remarks>
	</doc><doc for="IContextProperty.IsNewContextOK">
		<summary>
			<para> Returns a Boolean value indicating whether the context property is OK
      with the new context.
      </para>
		</summary>
		<param name="newCtx">The new <see cref="System.Runtime.Remoting.Contexts.Context"/> in which the <see cref="System.Runtime.Remoting.Contexts.ContextProperty"/> has been created. </param>
		<returns>
			<para><see langword="true"/> if the 
   context property can coexist with the other context properties
   in the given context; <see langword="false"/>
   otherwise.
   </para>
		</returns>
		<remarks>
			<para> Once all the context properties have been added to the
      new context, they are all asked whether they are OK in the new context. The
      context property could look at the other context properties from the parameter
      new context and determine whether it is compatible with these other context
      properties. Returns <see langword="false"/>
      
      if not OK in the
      context.
      </para>
		</remarks>
	</doc><doc for="IContextAttribute">
		<summary>
			<para>Identifies a context attribute.</para>
		</summary>
		<remarks>
			<para> An <see cref="System.Runtime.Remoting.Contexts.IContextAttribute"/> is 
   exposed from all context attributes. The attributes contribute a property which
   resides in a context and enforces a specific policy for the objects created in
   that context. For more information about using attributes, see <see topic="cpconExtendingMetadataUsingAttributes"/>
   
   .
   </para>
		</remarks>
	</doc><doc for="IContextAttribute.IsContextOK">
		<summary>
			<para> Returns a Boolean value indicating whether the specified 
   <see cref="System.Runtime.Remoting.Contexts.Context"/> meets
      the context attribute's requirements.
      </para>
		</summary>
		<param name="ctx">The context to check against the current context attribute. </param>
		<param name="msg">The construction call, parameters of which need to be checked against the current context. </param>
		<returns>
			<para><see langword="true"/> if the passed in context is OK;
   otherwise, <see langword="false"/>.</para>
		</returns>
	</doc><doc for="new_appdomain">
		<summary>
			<para>Temporary debug class, activated only when a special
      compiler parameter is used (SIMPLEXAACTIVATION).</para>
		</summary>
	</doc><doc for="new_appdomain.activator">
		<summary>
			<para>Temporary debug class, activated only when a special
      compiler parameter is used (SIMPLEXAACTIVATION).</para>
		</summary>
	</doc><doc for="MBR">
		<summary>
			<para>Temporary debug class, activated only when a special
      compiler parameter is used (SIMPLEXAACTIVATION).</para>
		</summary>
	</doc><doc for="CB">
		<summary>
			<para>Temporary debug class, activated only when a special
      compiler parameter is used (SIMPLEXAACTIVATION).</para>
		</summary>
	</doc><doc for="IContextAttribute.GetPropertiesForNewContext">
		<summary>
			<para> Returns context properties to the caller in the given
   <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/> .
      </para>
		</summary>
		<param name="msg">The <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/> to which to add the context properties. </param>
		<remarks>
			<para>The attribute can add context properties directly to the
   <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage.ContextProperties"/> list in the
   <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/>. The default implementation
      in the <see cref="System.Runtime.Remoting.Contexts.ContextAttribute"/> class will add this to the
      context property list. Context attributes are free to override <see cref="System.Runtime.Remoting.Contexts.IContextAttribute.GetPropertiesForNewContext"/> and can
      implement their own behaviour - for example they can add to the list a new class that implements the context
      property.</para>
		</remarks>
	</doc><doc for="ContextProperty">
		<summary>
			<para>Holds the name-value pair of the property name and the object representing
      the property of a context.</para>
		</summary>
		<remarks>
			<para>The properties that make up the context are provided by
      various automatic services and are set up by the activation services at the time a <see cref="System.Runtime.Remoting.Contexts.Context"/> is
      created.
      Each property is itself a managed object. Depending upon whether properties
      contribute message sinks or not, they are considered Active or
      Passive.</para>
		</remarks>
	</doc><doc for="IContextProperty">
		<summary>
			<para> Gathers naming information from the context property and
      determines whether the new context is ok for the context property.
      </para>
		</summary>
		<remarks>
			<para>This interface is exposed by the property contributed to a context by an
      attribute. By default, it is also implemented by the <see cref="System.Runtime.Remoting.Contexts.ContextAttribute"/> base
      class which <see cref="System.Runtime.Remoting.Contexts.Context"/>
      attribute classes can extend from.</para>
		</remarks>
	</doc><doc for="IContextPropertyActivator.CollectFromClientContext">
		<summary>
			<para> 
      Called
      on each client context property that has this interface, before the construction
      request leaves the client.
      </para>
		</summary>
		<param name="msg">An <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/>.</param>
		<remarks>
			<para>The context property can examine and manipulate the contents of the <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/>.</para>
		</remarks>
	</doc><doc for="IContextPropertyActivator.CollectFromServerContext">
		<summary>
			<para> 
      Called on each server context property that has this interface, before the
      construction response leaves the server for the client.
      </para>
		</summary>
		<param name="msg">An <see cref="System.Runtime.Remoting.Activation.IConstructionReturnMessage"/>.</param>
		<remarks>
			<para>The context property can examine and manipulate the contents of the <see cref="System.Runtime.Remoting.Activation.IConstructionReturnMessage"/>. </para>
		</remarks>
	</doc><doc for="IContextPropertyActivator.DeliverServerContextToClientContext">
		<summary>
			<para> 
      Called on each client context property that has this interface, when
      the construction request returns to the client from the
      server.
      </para>
		</summary>
		<param name="msg">An <see cref="System.Runtime.Remoting.Activation.IConstructionReturnMessage"/>.</param>
		<remarks>
			<para>The context property can examine the contents of the <see cref="System.Runtime.Remoting.Activation.IConstructionReturnMessage"/>. </para>
		</remarks>
	</doc><doc for="ContextAttribute.Name">
		<summary>
			<para>Gets the name of the context attribute.</para>
		</summary>
		<value>
			<para>The name of the context attribute.</para>
		</value>
		<remarks>
			<para>Default implementation of this property provides <see cref="System.Runtime.Remoting.Contexts.ContextAttribute.AttributeName"/> as the property name.</para>
			<note type="inheritinfo">
   The current property
   must not be overridden in any user derived class. The current <see cref="System.Runtime.Remoting.Contexts.ContextAttribute.Equals" qualify="true"/> and <see cref="System.Runtime.Remoting.Contexts.ContextAttribute.GetHashCode" qualify="true"/> method implementations depend
   on the default functionality. If you wish to provide advanced behavior for
   a class extending the <see cref="System.Runtime.Remoting.Contexts.ContextAttribute"/> and override the <see cref="System.Runtime.Remoting.Contexts.ContextAttribute.Name" qualify="true"/> property, you have to also
   override the default implementation of the <see cref="System.Runtime.Remoting.Contexts.ContextAttribute.Equals"/> and <see cref="System.Runtime.Remoting.Contexts.ContextAttribute.GetHashCode"/> methods.
</note>
		</remarks>
	</doc><doc for="ContextAttribute.Equals">
		<summary>
   Returns a Boolean value indicating whether this instance is equal to the
   specified object.
</summary>
		<param name="o">The object to compare with this instance.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="o "/>is not <see langword="null"/>, and if the
   attribute names are equivalent; <see langword="false"/>
   otherwise.</para>
		</returns>
	</doc><doc for="ContextAttribute">
		<summary>
			<para>Provides the default implementations of <see cref="System.Runtime.Remoting.Contexts.IContextAttribute"/> and <see cref="System.Runtime.Remoting.Contexts.IContextProperty"/>.</para>
		</summary>
		<remarks>
			<para><see cref="System.Runtime.Remoting.Contexts.ContextAttribute"/> is the root for all context
 attributes. Simple <see cref="System.Runtime.Remoting.Contexts.Context"/>
 properties can be derived from
<see cref="System.Runtime.Remoting.Contexts.ContextAttribute"/> with the context attribute and 
 the context property being in the class. For more specialized or more
 sophisticated needs the context attribute can derive from <see cref="System.Runtime.Remoting.Contexts.ContextAttribute"/> and the context property can be
 split into a separated class. For more information about using attributes,
 see <see topic="cpconExtendingMetadataUsingAttributes"/>.</para>
			<note type="inheritinfo">
 The <see cref="System.Runtime.Remoting.Contexts.ContextAttribute.Name"/> property must not be
 overridden in any user derived class. The current <see cref="System.Runtime.Remoting.Contexts.ContextAttribute.Equals" qualify="true"/> and <see cref="System.Runtime.Remoting.Contexts.ContextAttribute.GetHashCode" qualify="true"/> method implementations depend
 on the default functionality. If you wish to provide advanced behavior for
 a class extending the <see cref="System.Runtime.Remoting.Contexts.ContextAttribute"/> and override the <see cref="System.Runtime.Remoting.Contexts.ContextAttribute.Name" qualify="true"/> property, you have to also
 override the default implementation of the <see cref="System.Runtime.Remoting.Contexts.ContextAttribute.Equals"/> and <see cref="System.Runtime.Remoting.Contexts.ContextAttribute.GetHashCode"/> methods.
</note>
		</remarks>
	</doc><doc for="IContextPropertyActivator.DeliverClientContextToServerContext">
		<summary>
			<para>DeliverClientContextToServerContext</para>
		</summary>
		<param name="msg">An <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/>.</param>
		<remarks>
			<para> The current method is called
      on each server context property that implements the <see cref="System.Runtime.Remoting.Contexts.IContextPropertyActivator"/>
      interface when a construction request arrives at a server. This allows
      the context property to examine the contents of each <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/>. </para>
		</remarks>
	</doc><doc for="ContextAttribute.IsContextOK">
		<summary>
			<para>Returns a Boolean value indicating whether the context parameter meets the
      context attribute's requirements. </para>
		</summary>
		<param name=" ctx">The context in which to check.</param>
		<param name="ctorMsg"></param>
		<returns>
			<para><see langword="true"/> if the passed in context is OK; <see langword="false "/>otherwise.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="ctx"/> or <paramref name="ctorMsg"/> parameter is <see langword="null"/>.</exception>
	</doc><doc for="IContextPropertyActivator">
		<summary>
			<para> Indicates that the implementing property is interested in participating
      in activation and might not have provided a message sink.</para>
		</summary>
		<remarks>
			<para>The<see cref="System.Runtime.Remoting.Contexts.IContextPropertyActivator"/> interface is
   exposed on all <see cref="System.Runtime.Remoting.Contexts.Context"/> properties that are interested
   in participating in activation and that might have not provided a message sink.
   Client <see cref="System.Runtime.Remoting.Contexts.Context"/> properties send information in
   the construction message that their counterparts at the remote site could look
   for during activation. </para>
			<para><see cref="System.Runtime.Remoting.Contexts.IContextPropertyActivator"/> is also used
to collect information from the client and server context property and to
deliver information from the server context properties to the client context
properties when returning to the client <see cref="System.Runtime.Remoting.Contexts.Context"/>
. </para>
		</remarks>
	</doc><doc for="IContextPropertyActivator.IsOKToActivate">
		<summary>
			<para>Indicates whether it is all right to activate the object 
      type indicated in the <paramref name="msg"/>
      parameter.</para>
		</summary>
		<param name="msg">An <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/>.</param>
		<returns>
			<para> A Boolean value indicating whether the requested
      type can be activated.</para>
		</returns>
	</doc></docs>
