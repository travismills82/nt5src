<docs>
	<doc for="IMethodMessage">
		<summary>
			<para>Defines the method message interface.</para>
		</summary>
		<remarks>
			<para> A method message is used
      to send information to and from remote methods. For example, messages
      used for remote method calls implement the <see cref="System.Runtime.Remoting.Messaging.IMethodMessage"/> interface.</para>
		</remarks>
		<example>
			<para>The following example code shows a custom proxy that 
      overrides <see langword="RealProxy.Invoke "/>in order to write the message information to
      the console and return immediately without making a remote call.</para>
			<codelink SampleID="IMethodMessage_MethodName" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IMethodReturnMessage">
		<summary>
			<para>Defines the method call return message interface.</para>
		</summary>
		<remarks>
			<para> A method call return message represents the response to
      a method call on an object at the end of the message sink. An <see cref="System.Runtime.Remoting.Messaging.IMethodReturnMessage"/> is generated as a result of a method called on a remote object, and is used
      to return the results of the method call back to the caller.</para>
		</remarks>
		<example>
			<para>The following example code shows a custom proxy that 
      overrides <see langword="RealProxy.Invoke"/> in order to write the return message
      information to the console.</para>
			<codelink SampleID="IMethodReturnMessage_ReturnValue" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IMethodMessage.Uri">
		<summary>
			<para> Gets the URI of the specific object that the
      call is destined for.</para>
		</summary>
		<value>
			<para>The URI of the remote object that contains the
      invoked method.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IMethodMessage.MethodName">
		<summary>
			<para> Gets the name of the invoked method.</para>
		</summary>
		<value>
			<para> The name of the invoked method.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para>The following example code shows a custom proxy that
      overrides <see langword="RealProxy.Invoke "/>in order to write the name of the method to the
      console.</para>
			<codelink SampleID="IMethodMessage_MethodName" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IMethodMessage.TypeName">
		<summary>
			<para>Gets the full <see cref="System.Type"/> name of the specific object that the call is destined for.</para>
		</summary>
		<value>
			<para>The full <see cref="System.Type"/>
name of the specific object that the call is destined for.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IMethodMessage.MethodSignature">
		<summary>
			<para> Gets an object containing the method signature.</para>
		</summary>
		<value>
			<para> An object containing the method signature.</para>
		</value>
		<remarks>
			<para> All the current implementations of <see cref="System.Runtime.Remoting.Messaging.IMethodMessage"/> return an
   array of <see cref="System.Type"/>
   objects containing the parameter types of the method.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IMethodMessage.ArgCount">
		<summary>
			<para>Gets the number of arguments passed to the method.</para>
		</summary>
		<value>
			<para>The number of arguments passed to the method.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para>The following example code shows a custom proxy that
      overrides <see langword="RealProxy.Invoke "/>in order to write the message information to
      the console, using the <see langword="ArgCount"/> property to iterate through the
      arguments.</para>
			<codelink SampleID="IMethodMessage_MethodName" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IMethodMessage.GetArgName">
		<summary>
			<para>Gets the name of the argument passed to the method.</para>
		</summary>
		<param name="index"> The number of the requested argument.</param>
		<returns>
			<para>The name of the specified argument passed to the method, or
      <see langword="null"/> if the current method is not implemented.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IMethodMessage.GetArg">
		<summary>
			<para>Gets a specific argument as an <see cref="System.Object"/> .</para>
		</summary>
		<param name="argNum">The number of the requested argument.</param>
		<returns>
			<para>The argument passed to the method.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IMethodMessage.Args">
		<summary>
			<para> Gets an array of arguments passed to the method.</para>
		</summary>
		<value>
			<para>An <see cref="System.Object"/> array containing
   the arguments
   passed to the method.</para>
		</value>
		<remarks>
			<para>Although the <see cref="System.Runtime.Remoting.Messaging.IMethodMessage.Args"/> property is redundant since the same functionality can be
   achieved through the <see cref="System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount"/> and
<see cref="System.Runtime.Remoting.Messaging.IMethodMessage.GetArg"/>, there might be performance
   optimization available if the implementer understands when all the arguments
   will be retrieved. </para>
		</remarks>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
		</example>
	</doc>
	<doc for="IMethodMessage.HasVarArgs">
		<summary>
			<para> Gets a value indicating whether the message has variable arguments.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the method
   can accept a variable number of arguments; otherwise,
<see langword="false"/> .</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para>The following example code shows a custom proxy that
      overrides <see langword="RealProxy.Invoke "/>in order to write the message information to
      the console, including whether the method call has variable
      arguments. </para>
			<codelink SampleID="IMethodMessage_MethodName" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IMethodMessage.LogicalCallContext">
		<summary>
			<para>Gets the <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/>
for the current method call.</para>
		</summary>
		<value>
			<para>Gets the <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/>
for the current
method call.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para>The following example code shows how to use the
      <see langword="LogicalCallContext "/>property to determine whether any values are
      attached to the logical thread.</para>
			<codelink SampleID="IMethodMessage_LogicalCallContext" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IMethodMessage.MethodBase">
		<summary>
			<para>Gets the <see cref="System.Reflection.MethodBase"/> of the called method.</para>
		</summary>
		<value>
			<para>The <see cref="System.Reflection.MethodBase"/> of the called method.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</exception>
		<remarks>
			<para>This information is not transmitted to a remote
      location, but is used to cache the method base after it has been looked up
      once.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IMethodCallMessage.InArgCount">
		<summary>
			<para>Gets the number of arguments in the call that are not
      marked as <see langword="out"/> parameters.</para>
		</summary>
		<value>
			<para>The number of arguments in the call that are not marked
      as <see langword="out"/> parameters.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para>The following example code shows a custom proxy that overrides RealProxy.Invoke
      in order to write the call message information to the
      console.</para>
			<codelink SampleID="IMethodCallMessage_GetInArg" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IMethodCallMessage.GetInArg">
		<summary>
			<para> Returns the specified argument that is not marked as an<see langword=" out"/> parameter.</para>
		</summary>
		<param name="argNum">The number of the requested <see langword="in"/> argument.</param>
		<returns>
			<para> The requested argument that is not marked as an<see langword=" out"/> parameter.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IMethodReturnMessage.OutArgCount">
		<summary>
			<para>Gets the number of arguments in the method call marked
      as <see langword="ref"/> or <see langword="out"/> parameters.</para>
		</summary>
		<value>
			<para>The number of arguments in the method call marked as
      <see langword="ref"/> or <see langword="out"/> parameters.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para>The following example code shows a custom proxy that
      overrides <see langword="RealProxy.Invoke"/> in order to write the return message
      information to the console.</para>
			<codelink SampleID="IMethodReturnMessage_ReturnValue" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IMethodReturnMessage.GetOutArgName">
		<summary>
			<para> Returns the name of the specified argument marked as a
      <see langword="ref"/> or an <see langword="out"/> parameter.</para>
		</summary>
		<param name="index">The number of the requested argument name.</param>
		<returns>
			<para> The argument name, or
      <see langword="null"/> if the current method is not implemented.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IMethodReturnMessage.GetOutArg">
		<summary>
			<para>Returns the specified argument marked as a
      <see langword="ref"/> or an <see langword="out"/> parameter.</para>
		</summary>
		<param name="argNum">The number of the requested argument.</param>
		<returns>
			<para>The specified argument marked as a <see langword="ref"/> or an <see langword="out"/> parameter.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IMethodReturnMessage.Exception">
		<summary>
			<para>Gets the exception thrown during the method call.</para>
		</summary>
		<value>
			<para>The exception object for the method call, or
      <see langword="null"/> if the method did not throw an exception.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para>The following example code shows a custom proxy that
      overrides RealProxy.Invoke in order to write the return message information,
      including whether the method threw an exception.</para>
			<codelink SampleID="IMethodReturnMessage_Exception" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IMethodReturnMessage.ReturnValue">
		<summary>
			<para>Gets the return value of the method call.</para>
		</summary>
		<value>
			<para>The return value of the method call.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call 

through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IMethodCallMessage">
		<summary>
			<para>Defines the method call message interface.</para>
		</summary>
		<remarks>
			<para>An <see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage"/> is generated as a result of a
   method called on a remote object, and is used to transport details about the
   remote method call to the server side.</para>
		</remarks>
		<example>
			<codelink SampleID="IMethodCallMessage_GetInArg" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IMethodCallMessage.GetInArgName">
		<summary>
			<para> Returns the name of the specified argument that is not
      marked as an<see langword=" out"/> parameter.</para>
		</summary>
		<param name="index">The number of the requested <see langword="in"/> argument.</param>
		<returns>
			<para>The name of a specific argument that is not marked as an<see langword=" out"/> parameter.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IMethodCallMessage.InArgs">
		<summary>
			<para>Gets an array of arguments that are not marked as<see langword=" out"/> parameters.</para>
		</summary>
		<value>
			<para>An array of arguments that are not marked as<see langword=" out"/> parameters.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</exception>
		<remarks>
			<para>Although the <see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgs"/> property is redundant since the same
   functionality can be achieved with the <see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgCount"/> and <see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArg"/> methods, there might be
   performance optimization available if the implementer understands when all
   the arguments will be retrieved.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="IMethodCallMessage_GetInArg" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IMethodReturnMessage.OutArgs">
		<summary>
			<para>Returns the specified argument marked as a
   <see langword="ref"/> or an <see langword="out"/> parameter.</para>
		</summary>
		<value>
			<para>The specified argument marked as a <see langword="ref"/> or an <see langword="out"/> parameter.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</exception>
		<remarks>
			<para>Although the <see cref="System.Runtime.Remoting.Messaging.IMethodReturnMessage.OutArgs"/> property is redundant since the same
   functionality can be achieved through the <see cref="System.Runtime.Remoting.Messaging.IMethodReturnMessage.OutArgCount"/> field and <see cref="System.Runtime.Remoting.Messaging.IMethodReturnMessage.GetOutArg"/> method, there might
   be performance optimization available if the implementer understands when
   all the arguments will be retrieved.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="IMethodReturnMessage_ReturnValue" SnippetID="2"/>
		</example>
	</doc>
</docs>
