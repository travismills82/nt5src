<docs>
	<doc for="EnterpriseServicesHelper.CreateConstructionReturnMessage">
		<summary>
			<para>Constructs a <see cref="System.Runtime.Remoting.Messaging.ReturnMessage"/> from the
   specified <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/> .</para>
		</summary>
		<param name="ctorMsg">A construction call to the object from which the new <see cref="System.Runtime.Remoting.Messaging.ReturnMessage"/> instance is returning.</param>
		<param name=" retObj">An <see cref="System.Runtime.Remoting.ObjRef"/> representing the object constructed with the construction call in <paramref name="ctorMsg"/> .</param>
		<returns>
   An <see cref="System.Runtime.Remoting.Activation.IConstructionReturnMessage"/> returned from the
   construction call specified in the <paramref name="ctorMsg"/> parameter.
</returns>
	</doc><doc for="EnterpriseServicesHelper">
		<summary>
			<para>Provides APIs needed for communication and operation
      with unmanaged classes outside of the <see cref="System.AppDomain"/> . This class cannot be inherited.</para>
		</summary>
		<remarks>
			<note type="note">
      This class makes a link demand. A SecurityException is thrown if the immediate caller does not have
      infrastructure permission. See <see topic="cpconLinkDemands"/> for more information.
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="EnterpriseServicesHelper.WrapIUnknownWithComObject">
		<summary>
			<para>Wraps the specified <see langword="IUnknown"/> COM interface with a <see topic="cpconruntimecallablewrapper"/>
(RCW).</para>
		</summary>
		<param name="punk">A pointer to the <see langword="IUnknown"/> COM interface to wrap.</param>
		<returns>
			<para> The RCW where the specified
   <see langword="IUnknown"/>
   is wrapped. </para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have UnmanagedCode permission.</exception>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Services.EnterpriseServicesHelper.WrapIUnknownWithComObject"/> method is
   similar to the <see cref="System.Runtime.InteropServices.Marshal.GetObjectForIUnknown" qualify="true"/> method, but
   does not attempt to maintain the identity of the unmanaged object. For
   example, two calls with the same <see langword="IUnknown "/>to the current method
   will return two different RCWs, but two calls to the <see cref="System.Runtime.InteropServices.Marshal.GetObjectForIUnknown"/> method with the same
<see langword="IUnknown"/> will return the same RCW.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="EnterpriseServicesHelper.SwitchWrappers">
		<summary>
			<para>Switches a <see topic="cpconcomcallablewrapper"/> (CCW) from
   one instance of a class to another instance of the same class.</para>
		</summary>
		<param name="oldcp">A proxy representing the old instance of a class referenced by a CCW.</param>
		<param name=" newcp">A proxy representing the new instance of a class referenced by a CCW.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have UnmanagedCode permission.</exception>
		<remarks>
			<note type="caution">
      This method can cause unwanted
      behavior. Before calling it, the user must ensure that this is a thread-safe
      operation, and that a
      call is not being made through the CCW to one of the instances
      of the class.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
</docs>
