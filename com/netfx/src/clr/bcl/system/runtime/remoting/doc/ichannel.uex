<docs>
	<doc for="BaseChannelWithProperties.BaseChannelWithProperties">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.BaseChannelWithProperties"/> class.</para>
		</summary>
	</doc>
	<doc for="ServerProcessing.Complete">
		<summary>
			<para>The server synchronously processed the message.</para>
		</summary>
	</doc>
	<doc for="TransportHeaders.GetEnumerator">
		<summary>
			<para>Returns an enumerator of the stored transport headers.</para>
		</summary>
		<returns>
			<para>An enumerator of the stored transport headers.</para>
		</returns>
	</doc>
	<doc for="TransportHeaders.TransportHeaders">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.TransportHeaders"/> class.</para>
		</summary>
	</doc>
	<doc for="BaseChannelObjectWithProperties.IsFixedSize">
		<summary>
			<para> Gets a Boolean value indicating
 whether the number of properties that can be entered into the current channel
 object is fixed.</para>
		</summary>
		<value>
			<para>A Boolean value indicating whether the number of properties that can be
 entered into the current channel object is fixed.</para>
		</value>
		<remarks>
			<para>In the current implementation <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.IsFixedSize"/> returns
<see langword="true"/>.</para>
		</remarks>
	</doc><doc for="SinkProviderData.Children">
		<summary>
			<para>Gets a list of the child <see cref="System.Runtime.Remoting.Channels.SinkProviderData"/> nodes.</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.IList"/> of the child <see cref="System.Runtime.Remoting.Channels.SinkProviderData"/> nodes.</para>
		</value>
	</doc><doc for="SinkProviderData.SinkProviderData">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.SinkProviderData"/> class.</para>
		</summary>
		<param name="name"> The name of the sink provider that the data in the current <see cref="System.Runtime.Remoting.Channels.SinkProviderData"/> object is associated with.</param>
	</doc><doc for="SinkProviderData.Name">
		<summary>
			<para> Gets the name of the sink provider that the data
 in the current <see cref="System.Runtime.Remoting.Channels.SinkProviderData"/>
 object is associated with.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> with the name of the XML node that the data in the
 current <see cref="System.Runtime.Remoting.Channels.SinkProviderData"/> object is associated with.</para>
		</value>
	</doc><doc for="SinkProviderData.Properties">
		<summary>
			<para>Gets a dictionary through which properties on the sink provider
 can be accessed.</para>
		</summary>
		<value>
			<para>A dictionary through which properties on the sink provider can be accessed.</para>
		</value>
	</doc><doc for="ChannelDataStore.this">
		<summary>
			<para>Gets or sets the data object associated with the
 specified key for the implementing channel.</para>
		</summary>
		<param name="key"> The key the data object is associated with.</param>
		<value>
			<para>The specified data object for the implementing channel.</para>
		</value>
	</doc><doc for="ServerProcessing.OneWay">
		<summary>
			<para>The message was dispatched and no response can be sent.</para>
		</summary>
	</doc><doc for="ServerProcessing.Async">
		<summary>
			<para>The call was dispatched asynchronously, which
 indicates that the sink must store response data on the stack for later processing.</para>
		</summary>
	</doc><doc for="BaseChannelObjectWithProperties.IsReadOnly">
		<summary>
			<para> Gets a Boolean value
 indicating whether the collection of properties in the current channel object is read-only.</para>
		</summary>
		<value>
			<para> A Boolean value indicating whether the collection of properties
 in the current channel object is read-only.</para>
		</value>
		<remarks>
			<para> In the current implementation <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.IsReadOnly"/> returns
<see langword="false"/>.</para>
		</remarks>
	</doc><doc for="BaseChannelObjectWithProperties.Add">
		<summary>
			<para>The current method must not be implemented because it
 does not apply to the way <see cref="System.Collections.IDictionary"/> is being used in this case, and because
 <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.IsFixedSize"/> returns
 <see langword="true"/> .</para>
		</summary>
		<param name="key">Indicates the key associated with the object contained in the <paramref name="value"/> parameter.</param>
		<param name=" value"> Indicates the value to add.</param>
		<exception cref="System.NotSupportedException">The method was called.</exception>
	</doc><doc for="BaseChannelObjectWithProperties.Clear">
		<summary>
			<para>The current method must not be implemented because it
 does not apply to the way <see cref="System.Collections.IDictionary"/> is being used in this case, and because
 <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.IsFixedSize"/> returns
 <see langword="true"/> .</para>
		</summary>
		<exception cref="System.NotSupportedException">The method was called.</exception>
	</doc><doc for="BaseChannelObjectWithProperties.Remove">
		<summary>
			<para>The current method must not be implemented because it
 does not apply to the way <see cref="System.Collections.IDictionary"/> is being used in this case, and because
 <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.IsFixedSize"/> returns
 <see langword="true"/> .</para>
		</summary>
		<param name="key"> The key that the object being removed is associated with.</param>
		<exception cref="System.NotSupportedException">The method was called.</exception>
	</doc><doc for="BaseChannelObjectWithProperties.CopyTo">
		<summary>
			<para>The current method is not supported by the <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties"/> .</para>
		</summary>
		<param name="array">The array to copy the properties to.</param>
		<param name=" index"> The index where to begin copying.</param>
		<exception cref="System.NotSupportedException">The method was called.</exception>
	</doc><doc for="BaseChannelObjectWithProperties.SyncRoot">
		<summary>
			<para> Gets an object that is used to synchronize access to
 the <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties"/> .</para>
		</summary>
		<value>
			<para> An object that is used to synchronize access to the
 <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties"/> .</para>
		</value>
		<remarks>
			<para>The current implementation of <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.SyncRoot"/> returns a reference to the
 current instance of <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties"/>.</para>
		</remarks>
	</doc><doc for="BaseChannelObjectWithProperties.IsSynchronized">
		<summary>
			<para> Gets a value indicating whether the current dictionary of channel
 object properties is synchronized.</para>
		</summary>
		<value>
			<para> A Boolean value indicating whether the current dictionary of channel
 object properties is synchronized.</para>
		</value>
		<remarks>
			<para>The current implementation of <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.IsSynchronized"/> returns
<see langword="false"/>.</para>
		</remarks>
	</doc><doc for="ChannelDataStore.ChannelDataStore">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.ChannelDataStore"/> class
   with the URIs that the current channel maps to.</para>
		</summary>
		<param name="channelURIs"> An array of channel URIs that the current channel maps to.</param>
	</doc><doc for="ChannelDataStore.ChannelUris">
		<summary>
			<para> Gets or sets an array of channel URIs that the
      current channel maps to.</para>
		</summary>
		<value>
			<para> An array of channel URIs that the current channel maps to.</para>
		</value>
	</doc><doc for="IServerChannelSink">
		<summary>
			<para>Provides methods used for security and transport sinks.</para>
		</summary>
		<remarks>
			<para> Channel sinks provide a plug-in point that allows access to the
      underlying messages flowing through the channel as well as the stream used by the
      transport mechanism to send messages to a remote object. Channel sinks are linked
      together in a chain of channel sink providers, and all channel messages flow through
      this chain of sinks before the message is serialized and transported.</para>
		</remarks>
	</doc><doc for="IServerChannelSink.NextChannelSink">
		<summary>
			<para>Gets the next server channel sink in the server sink chain.</para>
		</summary>
		<value>
			<para>The next server channel sink in the server sink chain.</para>
		</value>
		<remarks>
			<para> Channel sinks are linked together in a chain of sink providers, and
      all channel messages flow through this chain before the message is
      serialized and transported.</para>
		</remarks>
	</doc><doc for="TransportHeaders.this">
		<summary>
			<para>Gets or sets a transport header that is associated with
      the given key.</para>
		</summary>
		<param name="key">The <see cref="System.String"/> that the requested header is associated with.</param>
		<value>
			<para>A transport header that is associated with the given
      key, or <see langword="null"/> if the key was not found.</para>
		</value>
		<remarks>
			<para>The <paramref name="key"/> parameter must be a <see cref="System.String"/>.</para>
		</remarks>
	</doc><doc for="BaseChannelObjectWithProperties.Keys">
		<summary>
			<para>When implemented by a derived class, gets an <see cref="System.Collections.ICollection"/> of keys that the channel
   object properties are associated with.</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.ICollection"/> of keys that the channel object properties
   are associated with.</para>
		</value>
		<remarks>
			<note type="inheritinfo">
      It is necessary to
      implement the current property for the derived channel sink to function.
      
   </note>
		</remarks>
	</doc><doc for="BaseChannelObjectWithProperties.Values">
		<summary>
			<para> Gets an <see cref="System.Collections.ICollection"/>
of the values of the properties associated with the current channel object.</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.ICollection"/> of the values of the properties associated
   with the current channel object.</para>
		</value>
	</doc><doc for="BaseChannelObjectWithProperties.Contains">
		<summary>
			<para> Returns a Boolean value indicating whether the current
      channel object contains a property associated with the specified key.</para>
		</summary>
		<param name="key">The key the requested property is associated with.</param>
		<returns>
			<para>A Boolean value indicating whether the current channel object contains a
      property associated with the specified key.</para>
		</returns>
		<remarks>
		</remarks>
	</doc><doc for="BaseChannelObjectWithProperties.GetEnumerator">
		<summary>
			<para> Returns an <see cref="System.Collections.IDictionaryEnumerator"/> that enumerates over all the properties
   associated with the current channel object.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IDictionaryEnumerator"/> that enumerates over all
   the properties associated with the current channel object.</para>
		</returns>
	</doc><doc for="BaseChannelObjectWithProperties.Count">
		<summary>
			<para> Gets the number of properties
      associated with the current channel object.</para>
		</summary>
		<value>
			<para> The number of properties associated with the current channel object.</para>
		</value>
	</doc><doc for="BaseChannelObjectWithProperties.IEnumerable.GetEnumerator">
		<summary>
			<para> Returns an <see cref="System.Collections.IEnumerator"/> that enumerates over all the properties
   associated with the current channel object.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> that enumerates over all
   the properties associated with the current channel object.</para>
		</returns>
	</doc><doc for="BaseChannelObjectWithProperties.this">
		<summary>
			<para>Gets or sets the property associated with the specified key.</para>
		</summary>
		<param name="key">The key the requested property is associated with.</param>
		<value>
			<para>The property associated with the specified key.</para>
		</value>
		<exception cref="System.NotImplementedException">The property is called.</exception>
		<remarks>
			<note type="inheritinfo">
      It is necessary to implement the
      current property for the derived channel sink to function.
      
   </note>
		</remarks>
	</doc><doc for="BaseChannelWithProperties.SinksWithProperties">
		<summary>
			<para>Indicates the top channel sink in the channel sink stack.</para>
		</summary>
		<remarks>
			<para> Channel sinks provide a plug-in point that allows access to the
      underlying messages flowing through the channel as well as the stream used by the
      transport mechanism to send messages to a remote object. Channel sinks are linked
      together in a chain of channel sink providers, and all channel messages flow through
      this chain of sinks before the messages are serialized and transported.</para>
		</remarks>
	</doc><doc for="IServerFormatterSinkProvider">
		<summary>
			<para>Marks a server channel sink provider as a server
      formatter sink provider.</para>
		</summary>
		<remarks>
			<para>An <see cref="System.Runtime.Remoting.Channels.IServerFormatterSinkProvider"/> creates server formatter
   sinks for the server channel through which remoting messages flow.</para>
			<note type="note">
   To use a &lt;formatter&gt; tag instead of a &lt;provider&gt; tag within a configuration file, the
   server channel sink provider must implement the <see cref="System.Runtime.Remoting.Channels.IClientFormatterSinkProvider"/> interface instead of
<see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/>. For additional 
   information on remoting configuration, see <see topic="cpconchannelformatterconfigurationproperties"/> and <see topic="gnconremotingsettingsschema"/>.
</note>
			<para>Some formatter sink implementations use Runtime Formatters (<see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> and <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter"/>). Other
implementations can use their own means to transform the channel message into
the stream. On the return journey the formatter sink will transform the message
stream back into the channel message elements (return message). </para>
		</remarks>
	</doc>
	<doc for="IChannelReceiver.ChannelData">
		<summary>
			<para> Gets the channel-specific data.</para>
		</summary>
		<value>
			<para>The channel data.</para>
		</value>
		<remarks>
			<para>This property is used when <see cref="System.Runtime.Remoting.RemotingServices.Marshal" qualify="true"/> is called and an <see cref="System.Runtime.Remoting.ObjRef"/> is created.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IChannelReceiverHook.ChannelScheme">
		<summary>
   Gets the type of listener to hook into.
</summary>
		<value>
			<para>The type of listener to hook into (for example, "http").</para>
		</value>
		<remarks>
			<para>This value is not case-sensitive. </para>
		</remarks>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IChannelReceiverHook.WantsToListen">
		<summary>
			<para>Gets a Boolean value indicating whether <see cref="System.Runtime.Remoting.Channels.IChannelReceiverHook"/> needs to be hooked into the
   outside listener service. </para>
		</summary>
		<value>
			<para>A Boolean value indicating whether <see cref="System.Runtime.Remoting.Channels.IChannelReceiverHook"/> needs to be hooked into the
   outside listener service.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IChannelReceiverHook.ChannelSinkChain">
		<summary>
			<para> Gets the channel sink chain that the current channel is using.
      </para>
		</summary>
		<value>
			<para>The channel sink chain that the current channel is using. </para>
		</value>
		<example>
			<codelink SampleID="HttpChannel.ChannelSinkChain" SnippetID="1"/>
		</example>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IChannelReceiverHook.AddHookChannelUri">
		<summary>
			<para>Adds a URI on which the channel hook will listen.</para>
		</summary>
		<param name="channelUri">A URI on which the channel hook will listen.</param>
		<remarks>
			<note type="note">
      Client code should not call this
      method directly.
      
      </note>
		</remarks>
		<example>
			<codelink SampleID="HttpChannel.AddHookChannelUri" SnippetID="1"/>
		</example>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IClientChannelSink.NextChannelSink">
		<summary>
			<para>Gets the next client channel sink in the client sink chain.</para>
		</summary>
		<value>
			<para>The next client channel sink in the client sink chain.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para> Channel sinks are linked together in a chain of sink providers
      and all channel messages flow through this chain before they are
      serialized and transported.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IChannelSinkBase.Properties">
		<summary>
			<para>Gets a dictionary through which properties on the sink
      can be accessed.</para>
		</summary>
		<value>
			<para>A dictionary through which properties on the sink can be
      accessed, or <see langword="null"/> if the channel sink does not support properties.</para>
		</value>
		<remarks>
			<para> If a property is not present in this channel
      sink, it delegates the property access request to the next sink in the chain.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IChannelDataStore.ChannelUris">
		<summary>
			<para> Gets an array of channel URIs to which the current channel maps.</para>
		</summary>
		<value>
			<para> An array of channel URIs to which the current channel maps.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IChannelDataStore.this">
		<summary>
			<para>Gets or sets the data object associated with the
      specified key for the implementing channel.</para>
		</summary>
		<param name="key"> The key the data object is associated with.</param>
		<value>
			<para>The specified data object for the implementing channel.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="TransportHeaders">
		<summary>
			<para> Stores a collection of headers used in the channel sinks.</para>
		</summary>
		<remarks>
			<para> You can use the <see langword="foreach"/> statement to
   iterate over the contents of the header list that contains objects of type
<see cref="System.Collections.DictionaryEntry"/>. Keys to the headers are required to be strings, and
   comparisons are done on a case-insensitive basis. </para>
			<note type="note">
   This class makes a
   link demand and an inheritance demand at the
   class level. A <see cref="System.Security.SecurityException"/> is thrown when
   either the immediate caller or the derived class does not have infrastructure permission. For details about security demands, see <see topic="cpconLinkDemands"/> and <see topic="cpconInheritanceDemands"/>.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.InheritanceDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="BaseChannelWithProperties.Properties">
		<summary>
			<para>Gets an <see cref="System.Collections.IDictionary"/> of the channel properties
   associated with the current channel object.</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.IDictionary"/> of the channel properties associated with the
   current channel object.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>Channel properties are used to configure the channel at run time.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IChannel">
		<summary>
			<para> Provides conduits for messages that cross remoting
      boundaries.
      </para>
		</summary>
		<remarks>
			<para> Remoting boundaries can be <see cref="System.Runtime.Remoting.Contexts.Context"/>s, <see cref="System.AppDomain"/>s, processes, or computers. An application can cross these
   boundaries only by using
   channels. These crossings can be inbound and outbound. A channel can
   listen on an endpoint for inbound messages, send to an endpoint for outbound
   messages, or both. This provides an extensibility point in the runtime to plug
   in a wide range protocols, even though the runtime might not be at the other end
   of the channel.
   </para>
			<para> Run-time objects can be used to represent a wide and rich set
   of semantics and entities. The channel provides the extensibility point to
   convert the messages to and from the specific protocols. If there are runtimes at
   both ends of the channel, a virtual channel is created between the two ends,
   in order to connect the client and server sink chains on either side of the
   boundary.</para>
			<para> The client part of the channel is located at the end of a client context sink
   chain. The server part of the channel is located at the start of the server
   context sink chain. Messages are delivered to the client channel using the <see cref="System.Runtime.Remoting.Messaging.IMessageSink"/> interface, travel through the
   channel, and are then received by the server channel. The server channel
   delivers the message to the first
   server context sink.
   </para>
			<para> Channels must expose the <see cref="System.Runtime.Remoting.Channels.IChannel"/> interface, which provides
informational properties such as the <see cref="System.Runtime.Remoting.Channels.IChannel.ChannelName"/> and <see cref="System.Runtime.Remoting.Channels.IChannel.ChannelPriority"/> properties.
Channels can be registered using the <see cref="System.Runtime.Remoting.Channels.ChannelServices.RegisterChannel" qualify="true"/>
method.</para>
		</remarks>
	</doc>
	<doc for="IChannel.ChannelPriority">
		<summary>
			<para>Gets the priority of the channel.</para>
		</summary>
		<value>
			<para>An integer indication the priority of the channel.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>Higher numbers indicate higher priority, so a channel with priority of 50 has
      a higher priority than a channel with priority 25. The cross appdomain channel
      has a priority of 100. </para>
			<para>Client channels with higher priority are given the first chance to connect to
      a remote object specified by a URL or a particular channel data entry from an
   <see cref="System.Runtime.Remoting.ObjRef"/>. </para>
			<para>For server channels, the priority indicates the order in which their channel
      data will appear in an <see cref="System.Runtime.Remoting.ObjRef"/>, which in turn affects the order in
      which clients will try to connect to the server object. If the server is
      listening on an HTTP channel with priority 50 and a TCP channel with priority 25
      and the client has registered both an HTTP and TCP channel, then the client
      will use the HTTP channel to talk to the server. </para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="HttpServerChannel_Server_Client" SnippetID="5"/>
		</example>
		<seealso cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel"/>
		<seealso cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel"/>
		<seealso cref="T:System.Runtime.Remoting.Channels.Http.HttpClientChannel"/>
		<seealso cref="T:System.Runtime.Remoting.Channels.TCP.TcpChannel"/>
		<seealso cref="T:System.Runtime.Remoting.Channels.TCP.TcpServerChannel"/>
		<seealso cref="T:System.Runtime.Remoting.Channels.TCP.TcpClientChannel"/>
	</doc>
	<doc for="IChannel.ChannelName">
		<summary>
			<para>Gets the name of the channel.</para>
		</summary>
		<value>
			<para>The name of the channel.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="HttpServerChannel_Server_Client" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IChannel.Parse">
		<summary>
			<para>Returns the object URI as an out parameter, and the URI
      of the current channel as the return value.</para>
		</summary>
		<param name="url">The URL of the object.</param>
		<param name=" objectURI">When this method returns, contains a <see cref="System.String"/> that holds the object URI. This parameter is passed uninitialized.</param>
		<returns>
			<para>The URI of the current channel, or <see langword="null "/>if the URI does not belong to this channel.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="HttpServerChannel_Server_Client" SnippetID="5"/>
		</example>
		<seealso cref="T:System.Uri"/>
	</doc>
	<doc for="IChannelSender">
		<summary>
			<para> Provides required functions and properties for the sender
      channels.
      </para>
		</summary>
		<remarks>
			<para>The sending side of channels must expose the <see cref="System.Runtime.Remoting.Channels.IChannelSender"/> interface. </para>
		</remarks>
		<example>
			<codelink SampleID="IChannelSender" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IChannelSender.CreateMessageSink">
		<summary>
			<para>Returns a channel message sink that delivers messages to the specified URL
      or channel data object. </para>
		</summary>
		<param name="url">The URL to which the new sink will deliver messages. Can be <see langword="null"/> .</param>
		<param name="remoteChannelData">The channel data object of the remote host to which the new sink will deliver messages. Can be <see langword="null"/> .</param>
		<param name="objectURI">When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized.</param>
		<returns>
			<para>A channel message sink that delivers messages to the
      specified URL or channel data object, or <see langword="null "/> if the
      channel cannot connect to the given endpoint.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink"/> method returns a channel message sink that delivers messages to either the
   specified URL or the channel data object. If the <paramref name="uri "/>parameter is
<see langword="null"/>, the<see langword=" "/>
				<paramref name="remoteChannelData"/>
parameter is used
as a target for the sink. Either the <paramref name="url"/> parameter or the
<paramref name="remoteChannelData"/> parameter can be <see langword="null"/>, but not 
both.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="IChannelSender" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IChannelReceiver">
		<summary>
			<para>Provides required functions and properties for the receiver channels. </para>
		</summary>
		<remarks>
			<para>The receiving side of channels must expose the <see cref="System.Runtime.Remoting.Channels.IChannelReceiver"/> interface.</para>
		</remarks>
		<example>
			<codelink SampleID="IChannelReceiver_StartListening_ChannelData" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IChannelReceiver.GetUrlsForUri">
		<summary>
			<para> Returns an array of all the URLs for a
      URI.</para>
		</summary>
		<param name="objectURI">The URI for which URLs are required. </param>
		<returns>
			<para>An array of the URLs.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>This method is used by the
   <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject" qualify="true"/> method.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="IChannelReceiver_StartListening_ChannelData" SnippetID="3"/>
		</example>
	</doc>
	<doc for="IChannelReceiver.StartListening">
		<summary>
			<para> Instructs the current channel to start listening for requests.</para>
		</summary>
		<param name="data">Optional initialization information.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>The data object can be used to pass specific initialization state to the
      channel.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="IChannelReceiver_StartListening_ChannelData" SnippetID="4"/>
		</example>
	</doc>
	<doc for="IChannelReceiver.StopListening">
		<summary>
			<para> Instructs the
      current channel to stop listening for requests.</para>
		</summary>
		<param name="data">Optional state information for the channel.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>The data object can be used to pass the specific state to the channel.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="HttpServerChannel_Server_Client" SnippetID="3"/>
		</example>
	</doc>
	<doc for="IChannelReceiverHook">
		<summary>
			<para> Indicates that the implementing channel
      wants to hook into the outside listener service.
      </para>
		</summary>
		<example>
			<codelink SampleID="IChannelReceiverHook_ChannelScheme" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IClientChannelSinkProvider">
		<summary>
			<para> Creates client channel sinks for the client channel through which remoting
      messages flow.</para>
		</summary>
		<remarks>
			<para>Channel sinks are connected to a client channel through implementations of the
   <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/>
   interface. All the remoting client
   channels provide constructors that take an <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> as a parameter.</para>
			<para> Channel sink providers are stored in a chain, and
   the user is responsible for chaining all channel sink providers together before
   passing the outer one to the channel constructor. <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> provides a property called
<see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider.Next"/> for 
   this purpose. </para>
			<para> When multiple channel sink providers are specified in a
   configuration file, the remoting infrastructure will chain them together in the order they are
   found in the configuration file. The channel sink providers will be created when
   the channel is created during the <see cref="System.Runtime.Remoting.RemotingConfiguration.Configure" qualify="true"/>
   call.</para>
		</remarks>
		<example>
			<codelink SampleID="ServerProcessing_LoggingSinks_Create" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IClientChannelSinkProvider.CreateSink">
		<summary>
			<para>Creates
      a sink chain.</para>
		</summary>
		<param name="channel">Channel for which the current sink chain is being constructed. </param>
		<param name="url">The URL of the object to connect to. This parameter can be <see langword="null"/> if the connection is based entirely on the information contained in the <paramref name="remoteChannelData"/> parameter. </param>
		<param name="remoteChannelData"><para>A channel data object describing a channel on the remote server. </para></param>
		<returns>
			<para> The first sink of the newly formed channel sink chain,
      or <see langword="null"/> indicating that this provider will not or cannot provide a connection for this endpoint.
      </para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>When the <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider.CreateSink"/>
method is called, it creates its own channel
sink, forwards the <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider.CreateSink"/>
call to the next sink provider in the chain (if there is one), and ensures that
the next sink and the current one are linked together.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="ServerProcessing_LoggingSinks_Create" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IClientChannelSinkProvider.Next">
		<summary>
			<para> Gets or sets the
      next sink provider in the channel sink provider chain.
      
   </para>
		</summary>
		<value>
			<para>The next sink provider in the channel sink provider chain.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="ServerProcessing_LoggingSinks_Create" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IServerChannelSinkProvider">
		<summary>
			<para> Creates server channel sinks for the server channel through which
      remoting messages flow.</para>
		</summary>
		<remarks>
			<para>Channel sinks are connected to a server channel through implementations of the
   <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> interface. All the remoting
      server channels provide constructors that take an <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> as a parameter.</para>
			<para> Channel sink providers are stored in a chain, and
      the user is responsible for chaining all channel sink providers together before
      passing the outer one to the channel constructor. <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> provides a property called
   <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider.Next"/> for this purpose. </para>
			<para> When multiple channel sink providers are specified in
      a configuration file, the remoting infrastructure will chain them together in the
      order they are found in the configuration file. The channel sink providers are
      created at the same time as the channel, during a <see cref="System.Runtime.Remoting.RemotingConfiguration.Configure" qualify="true"/> call.</para>
			<para>After the <see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage"/> is generated,
   .NET Framework searches through the list of registered channels to find one that can
   process the call. Once an appropriate channel has been found, the channel sink
   is retrieved from the channel, and the <see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage"/> is
   forwarded to the sink for processing.</para>
		</remarks>
	</doc>
	<doc for="IServerChannelSinkProvider.GetChannelData">
		<summary>
			<para> Returns the channel data for the channel that the
      current sink is associated with.</para>
		</summary>
		<param name="channelData">An <see cref="System.Runtime.Remoting.Channels.IChannelDataStore"/> object in which the channel data is to be returned.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="IServerChannelSinkProvider_CreateSink" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IServerChannelSinkProvider.CreateSink">
		<summary>
			<para>Creates a sink chain.
      </para>
		</summary>
		<param name="channel">The channel for which to create the channel sink chain.</param>
		<returns>
			<para>The first sink of the newly formed channel sink chain, or
   <see langword="null"/> , indicating that this provider will not or cannot provide
      a connection for this endpoint. </para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="SoapClientFormatterSinkProvider_Next_Create" SnippetID="3"/>
		</example>
	</doc>
	<doc for="IServerChannelSinkProvider.Next">
		<summary>
			<para> Gets or sets the
      next sink provider in the channel sink provider chain.
      
   </para>
		</summary>
		<value>
			<para>The next sink provider in the channel sink provider chain.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="SinkProviders" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IClientFormatterSinkProvider">
		<summary>
			<para>Marks a client channel sink provider as a client
      formatter sink provider.</para>
		</summary>
		<remarks>
			<para>An <see cref="System.Runtime.Remoting.Channels.IClientFormatterSinkProvider"/>
creates
client
formatter sinks for the client channel through which remoting messages flow.
The first sink on the client side must implement both the <see cref="System.Runtime.Remoting.Messaging.IMessageSink"/>
and <see cref="System.Runtime.Remoting.Channels.IClientChannelSink"/>interfaces, or the
<see cref="System.Runtime.Remoting.Channels.IClientFormatterSink"/> interface. </para>
			<note type="note">
   To use a &lt;formatter&gt; tag instead of a &lt;provider&gt; tag within a
   configuration file, the client channel sink provider must implement the <see cref="System.Runtime.Remoting.Channels.IClientFormatterSinkProvider"/> interface instead of merely
<see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/>. 
   For additional information on remoting configuration, see
<see topic="cpconchannelformatterconfigurationproperties"/> and <see topic="gnconremotingsettingsschema"/>.
</note>
			<para>Some formatter sink implementations use Runtime Formatters (<see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> and <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter"/>). Other
implementations can use their own means to transform the channel message into
the stream. On the return journey the formatter sink will transform the message
stream back into the channel message elements (return message). </para>
		</remarks>
		<example>
		</example>
	</doc>
	<doc for="IClientChannelSink">
		<summary>
			<para>Provides required functions and properties for client channel sinks.</para>
		</summary>
		<remarks>
			<para> Channel sinks provide a plug-in point that allows access to
      the underlying messages flowing through the channel as well as the stream used by
      the transport mechanism to send messages to a remote object. Channel sinks are
      linked together in a chain of channel sink providers and all channel messages flow
      through this chain of sinks before they are serialized and transported.</para>
		</remarks>
		<seealso topic="cpconsinkssinkchains"/>
	</doc>
	<doc for="IClientChannelSink.ProcessMessage">
		<summary>
			<para> Requests message processing from the current sink. </para>
		</summary>
		<param name=" msg">The message to process.</param>
		<param name=" requestHeaders">The headers to add to the outgoing message heading to the server.</param>
		<param name=" requestStream">The stream headed to the transport sink.</param>
		<param name=" responseHeaders">When this method returns, contains an <see cref="System.Runtime.Remoting.Channels.ITransportHeaders"/> interface that holds the headers that the server returned. This parameter is passed uninitialized.</param>
		<param name=" responseStream">When this method returns, contains a <see cref="System.IO.Stream"/> coming back from the transport sink. This parameter is passed uninitialized.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="ServerProcessing_LoggingSinks_Create" SnippetID="3"/>
		</example>
		<seealso topic="cpconsinkssinkchains"/>
	</doc>
	<doc for="IClientChannelSink.AsyncProcessRequest">
		<summary>
			<para>Requests asynchronous processing of a method call on the current sink.</para>
		</summary>
		<param name="sinkStack">A stack of channel sinks that called this sink.</param>
		<param name=" msg">The message to process.</param>
		<param name=" headers">The headers to add to the outgoing message heading to the server.</param>
		<param name=" stream">The stream headed to the transport sink.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="SoapClientFormatterSinkProvider_BaseChannelSinkWithProperties" SnippetID="2"/>
		</example>
		<seealso topic="cpconsinkssinkchains"/>
	</doc>
	<doc for="IClientChannelSink.AsyncProcessResponse">
		<summary>
			<para>Requests asynchronous processing of a response to a method call on the
      current sink.</para>
		</summary>
		<param name="sinkStack">A stack of sinks that called this sink.</param>
		<param name=" state">Information generated on the request side that is associated with this sink.</param>
		<param name=" headers">The headers retrieved from the server response stream.</param>
		<param name=" stream">The stream coming back from the transport sink.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="CommonTransportKeys" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IClientChannelSink.GetRequestStream">
		<summary>
			<para>Returns the <see cref="System.IO.Stream"/> onto which
   the provided message is to be serialized.</para>
		</summary>
		<param name="msg">The <see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage"/> containing details about the method call.</param>
		<param name="headers">The headers to add to the outgoing message heading to the server.</param>
		<returns>
			<para>The <see cref="System.IO.Stream"/> onto which the provided
   message is to be serialized.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.GetRequestStream"/> method is
   called by the formatter sink before it serializes the message.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<seealso topic="cpconsinkssinkchains"/>
	</doc>
	<doc for="ServerProcessing">
		<summary>
			<para>Indicates the status of the server message processing.</para>
		</summary>
		<example>
			<codelink SampleID="ServerProcessing_LoggingSinks_Create" SnippetID="3"/>
		</example>
	</doc>
	<doc for="IServerChannelSink.ProcessMessage">
		<summary>
			<para> Requests message processing from the current sink.</para>
		</summary>
		<param name="sinkStack">A stack of channel sinks that called the current sink.</param>
		<param name="requestMsg">The message that contains the request.</param>
		<param name="requestHeaders">Headers retrieved from the incoming message from the client.</param>
		<param name="requestStream">The stream that needs to be to processed and passed on to the deserialization sink.</param>
		<param name="responseMsg">When this method returns, contains an <see cref="System.Runtime.Remoting.Messaging.IMessage"/> that holds the response message. This parameter is passed uninitialized.</param>
		<param name="responseHeaders">When this method returns, contains an <see cref="System.Runtime.Remoting.Channels.ITransportHeaders"/> that holds the headers that are to be added to return message heading to the client. This parameter is passed uninitialized. </param>
		<param name="responseStream">When this method returns, contains a <see cref="System.IO.Stream"/> that is heading back to the transport sink. This parameter is passed uninitialized. </param>
		<returns>
			<para>A <see cref="System.Runtime.Remoting.Channels.ServerProcessing"/> status value
   that provides information about how message was processed.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>The job of a proxy is to convert a method call invoked
      on it into a message object. This message object, which implements the
   <see cref="System.Runtime.Remoting.Messaging.IMessage"/> interface, is passed from the
      client end to the server end by invoking <see cref="System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage"/> on message sink
      objects. Message sinks
      are chained together in the sense that every message sink is
      responsible for calling <see cref="System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage"/> on the next
      message sink after it has performed its work. For instance, a synchronization
      related message sink can cause a lock to be acquired or released, and then
      delegated further to the downstream message sink.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IServerChannelSink.AsyncProcessResponse">
		<summary>
			<para>Requests processing from the current sink of the response from a method call
      sent asynchronously.</para>
		</summary>
		<param name="sinkStack">A stack of sinks leading back to the server transport sink.</param>
		<param name="state">Information generated on the request side that is associated with this sink.</param>
		<param name="msg">The response message.</param>
		<param name="headers">The headers to add to the return message heading to the client.</param>
		<param name="stream">The stream heading back to the transport sink.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>The <paramref name="state "/>parameter contains information that was pushed onto the
   channel sink stack and associated with the current sink.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="CommonTransportKeys" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IServerChannelSink.GetResponseStream">
		<summary>
			<para>Returns the <see cref="System.IO.Stream"/> onto which the provided
   response message is to be serialized.</para>
		</summary>
		<param name="sinkStack">A stack of sinks leading back to the server transport sink.</param>
		<param name=" state">The state that has been pushed to the stack by this sink.</param>
		<param name=" msg">The response message to serialize. </param>
		<param name=" headers">The headers to put in the response stream to the client.</param>
		<returns>
			<para>The <see cref="System.IO.Stream"/> onto which the provided
   response message is to be serialized.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>This method is called when a response stream needs to be created.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IChannelSinkBase">
		<summary>
			<para>Provides the base interface for channel sinks.</para>
		</summary>
		<remarks>
			<para> Channel sinks provide a plug-in point that allows
      access to the underlying messages flowing through the channel as well as the stream
      used by the transport mechanism to send messages to a remote object. Channel
      sinks are linked together in a chain of sink providers and all channel messages
      flow through this chain before the message is serialized and transported.</para>
		</remarks>
	</doc>
	<doc for="IClientFormatterSink">
		<summary>
			<para>Marks a sink as a client formatter sink that serializes
      messages into a stream.</para>
		</summary>
		<remarks>
			<para>Formatter sinks must implement both <see cref="System.Runtime.Remoting.Messaging.IMessageSink"/> and <see cref="System.Runtime.Remoting.Channels.IClientChannelSink"/>. <see cref="System.Runtime.Remoting.Channels.IClientFormatterSink"/>
combines these into one interface.</para>
		</remarks>
		<seealso topic="cpconsinkssinkchains"/>
	</doc>
	<doc for="IChannelDataStore">
		<summary>
			<para>Stores channel data for the remoting channels.</para>
		</summary>
		<remarks>
			<para>Channels that want to use the channel sink architecture must implement this
      interface on their ChannelData object.</para>
		</remarks>
		<example>
			<codelink SampleID="IChannelDataStore_Item" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ChannelDataStore">
		<summary>
			<para>Stores channel data for the remoting channels.</para>
		</summary>
		<remarks>
			<note type="note">
      This class makes a
      link demand and an inheritance demand at the
      class level. A <see cref="System.Security.SecurityException"/> is thrown when
      either the immediate caller or the derived class does not have infrastructure permission. For details about security demands, see <see topic="cpconLinkDemands"/> and <see topic="cpconInheritanceDemands"/>.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.InheritanceDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="ITransportHeaders">
		<summary>
			<para> Stores a collection of headers used in the channel sinks.</para>
		</summary>
		<example>
			<codelink SampleID="ITransportHeaders_Item" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ITransportHeaders.this">
		<summary>
			<para>Gets or sets a transport header associated with the given key.</para>
		</summary>
		<param name="key">The key the requested transport header is associated with.</param>
		<value>
			<para>A transport header associated with the given key.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para>If a stored header is set to <see langword="null"/>, the key-value pair is
   removed.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="ITransportHeaders_Item" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ITransportHeaders.GetEnumerator">
		<summary>
			<para>Returns an <see cref="System.Collections.IEnumerator"/> that iterates over all
   entries in the <see cref="System.Runtime.Remoting.Channels.ITransportHeaders"/> object.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> that iterates over all entries in the
<see cref="System.Runtime.Remoting.Channels.ITransportHeaders"/> object.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="ITransportHeaders_Item" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SinkProviderData">
		<summary>
			<para>Stores sink provider data for sink providers.</para>
		</summary>
		<remarks>
			<para>The sink provider data is a tree structure of
      configuration information stored in the <see topic="gnconprovidertemplate"/>
      configuration nodes. All sink providers must have a constructor that accepts
      an <see cref="System.Collections.IDictionary"/> of properties and an
   <see cref="System.Collections.ICollection"/> of these structures if they want to be used
      from a configuration file. </para>
		</remarks>
		<example>
			<codelink SampleID="SinkProviderData" SnippetID="1"/>
		</example>
	</doc>
	<doc for="BaseChannelSinkWithProperties">
		<summary>
			<para>Provides a base implementation for channel sinks that
      want to expose a dictionary interface to their properties.</para>
		</summary>
		<remarks>
			<para>Channel sinks provide a plug-in point that allows access to the underlying
      messages flowing through the channel as well as the stream used by the transport
      mechanism to send messages to a remote object. Channel sinks are linked together
      in a chain of channel sink providers, and all channel messages flow through this
      chain of sinks before the message is serialized and transported.</para>
			<note type="note">
      This class makes a
      link demand and an inheritance demand at the
      class level. A <see cref="System.Security.SecurityException"/> is thrown when
      either the immediate caller or the derived class does not have infrastructure permission. For details about security demands, see <see topic="cpconLinkDemands"/> and <see topic="cpconInheritanceDemands"/>.
      
   </note>
			<note type="inheritinfo">
      When you inherit from
   <see cref="System.Runtime.Remoting.Channels.BaseChannelSinkWithProperties"/> ,
      you must implement the <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.Keys"/>
      property and the <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.this"/>
      property.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.InheritanceDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="SoapClientFormatterSinkProvider_BaseChannelSinkWithProperties" SnippetID="2"/>
		</example>
	</doc>
	<doc for="BaseChannelSinkWithProperties.BaseChannelSinkWithProperties">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.BaseChannelSinkWithProperties"/> class.</para>
		</summary>
		<remarks>
			<para>Channel sinks are linked together in a chain of channel sink providers and
      all channel messages flow through this chain of sinks before the message is
      serialized and transported.</para>
		</remarks>
		<example>
			<codelink SampleID="SoapClientFormatterSinkProvider_BaseChannelSinkWithProperties" SnippetID="2"/>
		</example>
	</doc>
	<doc for="BaseChannelWithProperties">
		<summary>
			<para>Provides a base implementation for channels that want to expose a dictionary
      interface to their properties.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.BaseChannelWithProperties"/>
class handles the
complexity of asking the sinks in a channel sink chain for their
properties. After the channel constructs its sink chain (if applicable) it must
set the <see cref="System.Runtime.Remoting.Channels.BaseChannelWithProperties.SinksWithProperties"/>
property. </para>
			<note type="note">
   This class makes a
   link demand and an inheritance demand at the
   class level. A <see cref="System.Security.SecurityException"/> is thrown when
   either the immediate caller or the derived class does not have infrastructure permission. For details about security demands, see <see topic="cpconLinkDemands"/> and <see topic="cpconInheritanceDemands"/>.
</note>
			<note type="inheritinfo">
   When you inherit from
<see cref="System.Runtime.Remoting.Channels.BaseChannelWithProperties"/> , 
   you must implement the <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.Keys"/>
   property and the <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.this"/>
   property.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.InheritanceDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="BaseChannelObjectWithProperties">
		<summary>
			<para>Provides a base implementation of a channel object that wants to provide a dictionary interface to
      its properties.</para>
		</summary>
		<remarks>
			<para><see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties"/> is the base class for <see cref="System.Runtime.Remoting.Channels.BaseChannelWithProperties"/> and <see cref="System.Runtime.Remoting.Channels.BaseChannelSinkWithProperties"/>. <see cref="System.Runtime.Remoting.Channels.BaseChannelWithProperties"/> and <see cref="System.Runtime.Remoting.Channels.BaseChannelSinkWithProperties"/> can be used as
   the base classes for channels and channel sinks that want to provide
   named properties. </para>
			<para><see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties"/>
handles the complex task of
asking a channel object for its properties. </para>
			<note type="note">
   This class makes a
   link demand and an inheritance demand at the
   class level. A <see cref="System.Security.SecurityException"/> is thrown when
   either the immediate caller or the derived class does not have infrastructure permission. For details about security demands, see <see topic="cpconLinkDemands"/> and <see topic="cpconInheritanceDemands"/>.
</note>
			<note type="inheritinfo">
   When you inherit from
<see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties"/>, you must override the <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.Keys"/> property and the <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.this"/>
property.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.InheritanceDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="CommonTransportKeys" SnippetID="1"/>
		</example>
	</doc>
	<doc for="BaseChannelObjectWithProperties.Properties">
		<summary>
			<para>Gets an <see cref="System.Collections.IDictionary"/> of the channel properties
   associated with the current channel object.</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.IDictionary"/> of the channel properties associated with the
   current channel object.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<remarks>
			<para> Channels properties are used to configure the channel at run time.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="BaseChannelObjectWithProperties.BaseChannelObjectWithProperties">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties"/> class.</para>
		</summary>
		<example>
			<codelink SampleID="CommonTransportKeys" SnippetID="1"/>
		</example>
	</doc>
</docs>
