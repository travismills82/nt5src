<docs>
	<doc for="LogicalCallContext.FreeNamedDataSlot">
		<summary>
			<para>Empties a data slot with the specified name.</para>
		</summary>
		<param name="name">The name of the data slot to empty.</param>
	</doc><doc for="LogicalCallContext.GetData">
		<summary>
			<para>Retrieves an object associated with the specified name 
      from the current instance.</para>
		</summary>
		<param name="name">The name of the item in the call context.</param>
		<returns>
			<para>The object in the logical call context associated with the specified name.</para>
		</returns>
	</doc><doc for="LogicalCallContext.SetData">
		<summary>
			<para>Stores the specified object in the current instance, and associates it with
      the specified name.</para>
		</summary>
		<param name="name">The name with which to associate the new item in the call context.</param>
		<param name="data">The object to store in the call context.</param>
	</doc><doc for="ILogicalThreadAffinative">
		<summary>
			<para>Marks an object that can propagate outside of an <see cref="System.AppDomain"/> in a <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/> .</para>
		</summary>
		<remarks>
			<para>When a remote method call is made to an object in another <see cref="System.AppDomain"/>, the
   current <see cref="System.Runtime.Remoting.Messaging.CallContext"/> class generates a <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/> that travels along
   with the call to the remote location. Only objects that expose the <see cref="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative"/> interface and are stored in
   the <see cref="System.Runtime.Remoting.Messaging.CallContext"/> are propagated outside the
<see cref="System.AppDomain"/>. 
   Objects that do not support this interface are not transmitted in <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/> instances with remote method
   calls. </para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of the <see cref="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative"/> interface to transmit
<see topic="cpconprincipalidentityobjects"/> to a remote 
   location for identification. To view the code for the <see langword="HelloServiceClass "/>class used in the sample, see the example for the <see cref="System.Runtime.Remoting.Messaging.CallContext.GetData"/> method. To view the code
   for the server class used in this sample, see example for the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/> class. To view the
   code for the client class used in the sample, see the examplefor the <see cref="System.Runtime.Remoting.Messaging.CallContext"/> class.</para>
			<codelink SampleID="CallContext" SnippetID="2"/>
		</example>
	</doc><doc for="LogicalCallContext.Clone">
		<summary>
			<para>Creates a new object that is a copy of the current
      instance.</para>
		</summary>
		<returns>
			<para>A new object that is a copy of this instance.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext.Clone"/> method produces a deep copy
   of the current <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/> .</para>
		</remarks>
	</doc><doc for="LogicalCallContext.HasInfo">
		<summary>
			<para>Gets a value indicating whether the current <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/> contains information.</para>
		</summary>
		<value>
			<para>A Boolean value indicating whether the current <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/> contains information.</para>
		</value>
	</doc><doc for="CallContext.FreeNamedDataSlot">
		<summary>
			<para>Empties a data slot with the specified name.</para>
		</summary>
		<param name="name">The name of the data slot to empty.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para>The following code example shows a client creating a named data slot,
      calling a method on the remote object, displaying the value of the named
      data slot that was returned from the logical thread, and freeing that named data
      slot. </para>
			<codelink SampleID="CallContext_GetHeaders" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CallContext.GetData">
		<summary>
			<para>Retrieves an object with the specified name from the <see cref="System.Runtime.Remoting.Messaging.CallContext"/>
.</para>
		</summary>
		<param name="name">The name of the item in the call context.</param>
		<returns>
			<para>The object in the call context associated with the specified name.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para>The following code example demonstrates the use of the <see cref="System.Runtime.Remoting.Messaging.CallContext.GetData"/> method to transmit
<see topic="cpconprincipalidentityobjects"/> to a 
   remote location for identification. To view the code for the
<see langword="LogicalCallContextData "/>class used in this sample, see the 
   example for the <see cref="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative"/> interface. To
   view
   the code for the client class used in the sample, see the example for
   the <see cref="System.Runtime.Remoting.Messaging.CallContext"/>
   class. To view
   the code for the server class used in this sample, see example for the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/> class.</para>
			<codelink SampleID="CallContext" SnippetID="3"/>
		</example>
	</doc>
	<doc for="CallContext.SetData">
		<summary>
			<para>Stores a given object and associates it with
      the specified name.</para>
		</summary>
		<param name="name">The name with which to associate the new item in the call context.</param>
		<param name="data">The object to store in the call context.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para>The following code example demonstrates the use of the <see cref="System.Runtime.Remoting.Messaging.CallContext.SetData"/> method to transmit
<see topic="cpconprincipalidentityobjects"/> to a remote 
   location for identification. To view the code for the
<see langword="LogicalCallContextData "/>class used in this sample, see the 
   example for the <see cref="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative"/>
   interface. To view the code for the
<see langword="HelloServiceClass "/>class used in this sample, see the example for 
   the <see cref="System.Runtime.Remoting.Messaging.CallContext.GetData"/> method. To view the code
   for the server class used in this sample, see example for the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/> class.</para>
			<codelink SampleID="CallContext" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CallContext.GetHeaders">
		<summary>
			<para> Returns the headers that are sent along with the method call.</para>
		</summary>
		<returns>
			<para> The headers that are sent along with the method call.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para>The following code example sends headers to a remote
      method and prints the content of those headers to the console when the remote
      method returns.</para>
			<codelink SampleID="CallContext_GetHeaders" SnippetID="2"/>
		</example>
	</doc>
	<doc for="CallContext.SetHeaders">
		<summary>
			<para> Sets the headers that are sent along with the method call.</para>
		</summary>
		<param name="headers">An <see cref="System.Runtime.Remoting.Messaging.Header"/> array of the headers that are to be sent along with the method call.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para>The following example code shows the ease with which a
      header is put on the logical thread.</para>
			<codelink SampleID="CallContext_GetHeaders" SnippetID="3"/>
		</example>
	</doc>
	<doc for="LogicalCallContext">
		<summary>
			<para>Provides a set of properties that are carried with the execution code path
      during remote method calls.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/> class is a
   version of the <see cref="System.Runtime.Remoting.Messaging.CallContext"/>
   class that is used during method calls to remote application
   domains. The <see cref="System.Runtime.Remoting.Messaging.CallContext"/> is a specialized collection
   object similar to a thread local storage for method calls, and provides data
   slots that are unique to each logical thread of execution. The slots are not
   shared across call contexts on other logical threads. Objects can be added to
   the <see cref="System.Runtime.Remoting.Messaging.CallContext"/> as it travels down and up the execution code path,
   and examined by various objects along the path. </para>
			<para>When a remote method call is made to an object in another <see cref="System.AppDomain"/>, the <see cref="System.Runtime.Remoting.Messaging.CallContext"/> class generates a <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/> that travels along
with the remote call. Only objects that expose the <see cref="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative"/> interface and are stored in
the <see cref="System.Runtime.Remoting.Messaging.CallContext"/> are propagated outside the
<see cref="System.AppDomain"/> in a 
<see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/>. Objects that do not support 
this interface are not transmitted in <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/> instances
with remote method calls. </para>
			<note type="note">
   This class makes a link demand. A SecurityException is thrown if the immediate caller does not have
   infrastructure permission. See <see topic="cpconLinkDemands"/> for more information.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="LogicalCallContext.GetObjectData">
		<summary>
			<para>Populates a specified <see cref="System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize
   the current <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/> .</para>
		</summary>
		<param name="info">The <see cref="System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
		<param name=" context">The contextual information about the source or destination of the serialization.</param>
		<exception cref="System.ArgumentNullException"><paramref name="info "/> is <see langword="null"/>.</exception>
		<remarks>
			<para>The current method fills the provided <see cref="System.Runtime.Serialization.SerializationInfo"/> with all the data needed to
   recreate the <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/>.</para>
			<para>The current method is an implementation of <see cref="System.Runtime.Serialization.ISerializable.GetObjectData"/>.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">The immediate caller does not have SerializationFormatter 

permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/></permission><seealso cref="System.Runtime.Serialization.ISerializable"/>
	</doc>
	<doc for="CallContext">
		<summary>
			<para>Provides a set of properties that are carried with the execution code path.
      This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para><see cref="System.Runtime.Remoting.Messaging.CallContext"/> is a specialized collection
   object similar to a Thread Local Storage for method calls, and provides
   data slots that are unique to each logical thread of execution. The slots
   are not shared across call contexts on other logical threads. Objects can be added
   to the <see cref="System.Runtime.Remoting.Messaging.CallContext"/>
   as it travels down and back up the execution code path, and examined by various objects
   along the path. </para>
			<para>When a remote method call is made to an object in another
<see cref="System.AppDomain"/>, the 
<see cref="System.Runtime.Remoting.Messaging.CallContext"/> class generates a <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/> instance that travels along
   with the remote call. Only objects that expose the <see cref="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative"/>
   interface and are stored in the <see cref="System.Runtime.Remoting.Messaging.CallContext"/>
   are propagated outside the <see cref="System.AppDomain"/> in a <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/>. Objects that do not
   support this interface are not transmitted in <see cref="System.Runtime.Remoting.Messaging.LogicalCallContext"/>
   instances with
   remote method calls. </para>
			<note type="note">
   All methods in <see cref="System.Runtime.Remoting.Messaging.CallContext"/> are static and operate on the
   call context in the current <see cref="System.Threading.Thread"/>.
</note>
			<note type="note">
   This class makes a link demand. A SecurityException is thrown if the immediate caller does not have
   infrastructure permission. See <see topic="cpconLinkDemands"/> for more information.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<para>The following code example demonstrates the use of the
   <see cref="System.Runtime.Remoting.Messaging.CallContext"/> class to
      transmit <see topic="cpconprincipalidentityobjects"/> to a remote location for identification.
      To view the code for the <see langword="LogicalCallContextData "/>class used in this sample, see the example for the <see cref="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative"/> interface. To view the code
      for the <see langword="HelloServiceClass "/>class used in this sample, see
      the example for the <see cref="System.Runtime.Remoting.Messaging.CallContext.GetData"/> method. To view the
      code for the server class used in this sample, see example for the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/> class.</para>
			<codelink SampleID="CallContext" SnippetID="1"/>
		</example>
		<seealso cref="System.Runtime.Remoting.Messaging.Header"/>
	</doc>
</docs>
