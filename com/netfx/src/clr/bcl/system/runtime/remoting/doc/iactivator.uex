<docs>
	<doc for="IConstructionReturnMessage">
		<summary>
			<para>Identifies an <see cref="System.Runtime.Remoting.Messaging.IMethodReturnMessage"/> 
that is returned after attempting to activate a remote object.</para>
		</summary>
		<remarks>
			<para>The message implementing <see cref="System.Runtime.Remoting.Activation.IConstructionReturnMessage"/> returns the result of the
   construction request sent with the <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/>.</para>
		</remarks>
	</doc><doc for="IActivator">
		<summary>
			<para>Provides the basic functionality for a Remoting activator
      class.</para>
		</summary>
		<remarks>
			<para> Activators control and participate in the activation of marshal by
      reference objects. Some activators create contexts, whereas others create actual
      objects.</para>
			<note type="note">
      Activators use the <see cref="System.Runtime.Remoting.Activation.IActivator.NextActivator"/>
      
      property to form
      a hierarchy that must be observed.
      
   </note>
		</remarks>
		<seealso cref="T:System.Activator"/>
	</doc><doc for="IConstructionCallMessage">
		<summary>
			<para>Represents the construction call request of an object.</para>
		</summary>
		<remarks>
			<para>When the user creates an instance of a new client-activated object by calling <see langword="new "/>or <see cref="System.Activator.CreateInstance" qualify="true"/> and before the thread returns to the user code, an
<see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/> 
is sent to the remote application. When the construction message arrives
at the remote application, it is processed by a remoting Activator (either the
default one, or one that is specified in the <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage.Activator"/>
property) and a new object is created. The remoting application then
returns an <see cref="System.Runtime.Remoting.Activation.IConstructionReturnMessage"/> to the local
application. The <see cref="System.Runtime.Remoting.Activation.IConstructionReturnMessage"/>
contains an instance of <see cref="System.Runtime.Remoting.ObjRef"/>
which is a package of information about the remote object. The remoting
infrastructure converts the <see cref="System.Runtime.Remoting.ObjRef"/>
instance into a proxy to the
remote object which is returned to the user code.</para>
		</remarks>
	</doc><doc for="ActivatorLevel">
		<summary>
			<para>Defines the appropriate position for an <see cref="System.Activator"/> in the chain of activators.</para>
		</summary>
		<remarks>
			<para> The design of activators allows for more than
      one activator to participate in the activation process, and additional activators
      can be added to the chain by using <see cref="System.Runtime.Remoting.Activation.IActivator.NextActivator" qualify="true"/>. Since each activator is
      responsible for calling the next one in the chain, an activator can position itself
      anywhere in the chain. The <see cref="System.Runtime.Remoting.Activation.ActivatorLevel"/> enumerator helps
      activators find the appropriate position in the chain.</para>
		</remarks>
	</doc><doc for="ActivatorLevel.Construction">
		<summary>
			<para>Constructs a blank object and runs the constructor.</para>
		</summary>
	</doc><doc for="ActivatorLevel.Context">
		<summary>
			<para>Finds or creates a suitable context.</para>
		</summary>
	</doc><doc for="ActivatorLevel.AppDomain">
		<summary>
			<para>Finds or creates an <see cref="System.AppDomain"/> .</para>
		</summary>
	</doc><doc for="ActivatorLevel.Process">
		<summary>
			<para>Starts a process.</para>
		</summary>
	</doc><doc for="ActivatorLevel.Machine">
		<summary>
			<para>Finds a suitable computer.</para>
		</summary>
	</doc><doc for="IActivator.NextActivator">
		<summary>
			<para>Gets or sets the next activator in the chain.</para>
		</summary>
		<value>
			<para>The next activator in the chain.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IActivator.Activate">
		<summary>
			<para>Creates an instance of the object specified in the
      provided <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/>.</para>
		</summary>
		<param name="msg">The information about the object needed to activate it, stored in an <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/>.</param>
		<returns>
			<para>Status of the object activation contained in an <see cref="System.Runtime.Remoting.Activation.IConstructionReturnMessage"/>.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IActivator.Level">
		<summary>
			<para>Gets the <see cref="System.Runtime.Remoting.Activation.ActivatorLevel"/> where
   this activator is active.</para>
		</summary>
		<value>
			<para>The <see cref="System.Runtime.Remoting.Activation.ActivatorLevel"/> where
   this activator is active.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Activation.IActivator.Level"/> is used to locate the right
   position in the chain when adding an Activator.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IConstructionCallMessage.Activator">
		<summary>
			<para> Gets or sets the activator that
      activates the remote object.</para>
		</summary>
		<value>
			<para> The activator that activates the remote object.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<remarks>
			<para>
      A chain of activators arranged in a hierarchy typically complete the
      various tasks involved in the activation process. If you intend to plug in a
      custom activator then you should traverse the activator hierarchy and plug
      in your activator at the appropriate location. Use the
      <see cref="System.Runtime.Remoting.Activation.IActivator.NextActivator" qualify="true"/> property on the
      activator returned by the current property to traverse the chain of activators. </para>
			<para> If you add your own activator in the activator chain in
      the message on the client side, if deemed necessary the activator will be
      serialized and transported to the server side. For this reason, custom activators
      should be fairly lightweight in terms of serialization requirements.</para>
		</remarks>
	</doc>
	<doc for="IConstructionCallMessage.CallSiteActivationAttributes">
		<summary>
			<para>Gets the call site activation attributes.</para>
		</summary>
		<value>
			<para>The call site activation attributes.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage.CallSiteActivationAttributes"/>
indexer allows you to specify additional attributes to use during object
activation. The user specifies the <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage.CallSiteActivationAttributes"/> in the
<paramref name="activationAttributes"/> parameter to <see cref="System.Activator.CreateInstance" qualify="true"/>
.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IConstructionCallMessage.ActivationTypeName">
		<summary>
			<para> Gets the full type name of the remote type to activate.</para>
		</summary>
		<value>
			<para> The full type name of the remote type to activate.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IConstructionCallMessage.ActivationType">
		<summary>
			<para>Gets the type of the remote object to activate.</para>
		</summary>
		<value>
			<para>The type
      of the remote object to activate.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="IConstructionCallMessage.ContextProperties">
		<summary>
			<para>Gets a list of context properties that define the context in which the object is
      to be created.</para>
		</summary>
		<value>
			<para>A list of context properties of the context in which to construct the object.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<remarks>
			<para>A new object's context is generally chosen based on metadata attributes of
      the class. The context selection mechanism is extensible through custom attributes,
      also known as static context properties, which are compiled into the class metadata.
      When activating an object remotely the <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage.ContextProperties"/>
      contain the list of properties that were contributed by various attributes in
      the construction call message. These properties are used to create the
      context in which the server object is
      activated. </para>
		</remarks>
		<seealso cref="System.Runtime.Remoting.Contexts.Context"/>
	</doc>
</docs>
