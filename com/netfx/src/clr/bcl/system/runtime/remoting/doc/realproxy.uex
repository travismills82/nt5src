<docs>
	<doc for="RealProxy.PropagateOutParameters">
		<summary>
   Propagate the out parameters to the stack.
</summary>
		<remarks>
			<para>This should be called once the call has finished. The input message 
      parameter should be the same as the one which was passed to the first sink to
      start the call.</para>
		</remarks>
	</doc><doc for="RealProxy.ReconnectServer">
		<summary>
			<para>Attaches the current proxy instance to the specified remote
      <see cref="System.MarshalByRefObject"/> .</para>
		</summary>
		<param name="s">The <see cref="System.MarshalByRefObject"/> that the current proxy instance represents.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have UnmanagedCode permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="RealProxy">
		<summary>
			<para> Provides base functionality for proxies.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Proxies.RealProxy"/> class is the <see langword="abstract"/> base class from which proxies must
   derive.</para>
			<para>A client that uses an object across any kind of a remoting boundary is
   actually using a transparent proxy for the object. The transparent proxy
   provides the illusion that the actual object resides in the client's space. It
   achieves this by forwarding calls made on it to the real object using the
   remoting infrastructure. </para>
			<para>The transparent proxy is itself housed by an instance of a managed runtime
   class of type <see cref="System.Runtime.Remoting.Proxies.RealProxy"/>. The <see cref="System.Runtime.Remoting.Proxies.RealProxy"/>
   implements a part of the
   functionality needed to forward the operations from the transparent proxy. Note that a
   proxy object inherits the associated semantics of managed objects such as garbage collection,
   support for fields and methods, and can be extended to form new classes. The proxy has a dual
   nature: it acts as an object of the same class as the remote object (transparent proxy),
   and it is a managed object itself. </para>
			<para>A proxy object can be used without regard to any remoting
   subdivisions within an <see cref="System.AppDomain"/>
   . </para>
			<note type="inheritinfo">
   When you inherit from
<see cref="System.Runtime.Remoting.Proxies.RealProxy"/>, you must override
   the <see cref="System.Runtime.Remoting.Proxies.RealProxy.Invoke"/> method.
   
</note>
			<note type="note">
   This class makes a
   link demand and an inheritance demand at the
   class level. A <see cref="System.Security.SecurityException"/> is thrown when
   either the immediate caller or the derived class does not have infrastructure permission. For details about security
   demands, see <see topic="cpconLinkDemands"/> and <see topic="cpconInheritanceDemands"/>.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.InheritanceDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="ChannelServices_SyncDispatchMessage" SnippetID="1"/>
		</example>
	</doc>
	<doc for="RealProxy.RealProxy">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Proxies.RealProxy"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Proxies.RealProxy"/> class that represents a
   remote object of the specified
<see cref="System.Type"/>.</para>
		</summary>
		<param name="classToProxy">The <see cref="System.Type"/> of the remote object for which to create a proxy.</param>
		<exception cref="System.ArgumentException"><paramref name="classToProxy"/> is not an interface, and is not derived from <see cref="System.MarshalByRefObject"/>.</exception>
		<remarks>
			<para> The current method creates a transparent proxy, which can be
      accessed through the <see cref="System.Runtime.Remoting.Proxies.RealProxy.GetTransparentProxy"/>
      method.</para>
			<para>A client that uses an object across any kind of a remoting boundary is
      actually using a transparent proxy for the object. The transparent proxy
      gives the impression that the actual object resides in the client's space. It
      achieves this by forwarding calls made on it to the real object using the
      remoting infrastructure. </para>
			<para> The transparent proxy is housed by an instance of a
      managed runtime class <see cref="System.Runtime.Remoting.Proxies.RealProxy"/>. The <see cref="System.Runtime.Remoting.Proxies.RealProxy"/>
      implements a part of the
      functionality needed to forward the operations from the transparent proxy. Note that a
      proxy object inherits the associated semantics of managed objects such as garbage collection,
      support for fields and methods, and can be extended to form new classes. The proxy has a dual
      nature: it acts as an object of the same class as the remote object (transparent
      proxy), and is a managed object itself. </para>
		</remarks>
		<example>
			<codelink SampleID="CustomProxy_Attribute_RealProxy" SnippetID="10"/>
		</example>
	</doc>
	<doc for="RealProxy.RealProxy1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Proxies.RealProxy"/> class.</para>
		</summary>
		<param name="classToProxy">The <see cref="System.Type"/> of the remote object for which to create a proxy.</param>
		<param name=" stub">A stub to associate with the new proxy instance.</param>
		<param name=" stubData">The stub data to set for the specified stub and the new proxy instance.</param>
		<exception cref="System.ArgumentException"><paramref name="classToProxy"/> is not an interface, and is not derived from <see cref="System.MarshalByRefObject"/>.</exception>
		<remarks>
			<para>The stub data is used by custom proxy users to decide what to do with an incoming method
      call. For example, the stub data might be information about the server's context
      that you can use to determine whether to execute the call locally, or
      send it through the remoting infrastructure.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for calling unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/>.</permission>
	</doc>
	<doc for="RealProxy.InitializeServerObject">
		<summary>
			<para>Initializes a new instance of the object <see cref="System.Type"/> of the remote
   object that the current instance of <see cref="System.Runtime.Remoting.Proxies.RealProxy"/> represents
   with the specified <see cref="System.Runtime.Remoting.Activation.IConstructionCallMessage"/> .</para>
		</summary>
		<param name="ctorMsg">A construction call message that contains the constructor parameters for the new instance of the remote object represented by the current <see cref="System.Runtime.Remoting.Proxies.RealProxy"/>. Can be <see langword="null"/>.</param>
		<returns>
			<para>The result of the construction request.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have UnmanagedCode permission.</exception>
		<remarks>
			<para>If the <paramref name="ctorMsg"/> parameter is
<see langword="null"/>, then the <see cref="System.Runtime.Remoting.Proxies.RealProxy.InitializeServerObject"/> method calls the default constructor for the new instance of the remote object represented by the current <see cref="System.Runtime.Remoting.Proxies.RealProxy"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<example>
			<codelink SampleID="CustomProxy_Attribute_RealProxy" SnippetID="5"/>
		</example>
	</doc>
	<doc for="RealProxy.GetServer">
		<summary>
			<para>Returns the server object represented by the current proxy instance.</para>
		</summary>
		<returns>
			<para>The server object represented by the current proxy instance.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have UnmanagedCode permission.</exception>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Proxies.RealProxy.GetUnwrappedServer"/> method is used in external
<see cref="System.Runtime.Remoting.Contexts.Context"/> same <see cref="System.AppDomain"/> scenarios.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="RealProxy.DisconnectServer">
		<summary>
			<para>Detaches the current proxy instance from the remote
      server object that it represents.</para>
		</summary>
		<returns>
			<para>The detached server object.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have UnmanagedCode permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="RealProxy.SetStubData">
		<summary>
			<para>Sets the stub data for the specified proxy.</para>
		</summary>
		<param name="rp">The proxy for which to set stub data.</param>
		<param name=" stubData">The new stub data.</param>
		<exception cref="System.Security.SecurityException">The immediate caller does not have UnmanagedCode permission.</exception>
		<remarks>
			<para>The stub data is used by custom proxy users to decide what to
      do with an incoming method call. For example, the stub data might
      be information about the server's context that you can use
      to determine whether to execute the call locally, or send it through the
      remoting infrastructure.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<example>
			<codelink SampleID="CustomProxy_Attribute_RealProxy" SnippetID="3"/>
		</example>
	</doc>
	<doc for="RealProxy.GetStubData">
		<summary>
			<para>Retrieves stub data stored for the specified proxy.</para>
		</summary>
		<param name="rp">The proxy for which stub data is requested.</param>
		<returns>
			<para>Stub data for the specified proxy.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The immediate caller does not have UnmanagedCode permission.</exception>
		<remarks>
			<para>The stub data is used by custom proxy users to decide what to do with an incoming method
      call. For example, the stub data might be information about the
      server's context that you can use to determine whether to execute the
      call locally, or send it through the remoting infrastructure.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<example>
			<codelink SampleID="CustomProxy_Attribute_RealProxy" SnippetID="9"/>
		</example>
	</doc>
	<doc for="RealProxy.GetProxiedType">
		<summary>
			<para>Returns the <see cref="System.Type"/> of the object that the current
   instance of <see cref="System.Runtime.Remoting.Proxies.RealProxy"/> represents.</para>
		</summary>
		<returns>
			<para> The <see cref="System.Type"/> of the object that the current instance of <see cref="System.Runtime.Remoting.Proxies.RealProxy"/> represents.
   </para>
		</returns>
		<example>
			<codelink SampleID="CustomProxy_Attribute_RealProxy" SnippetID="10"/>
		</example>
	</doc>
	<doc for="RealProxy.Invoke">
		<summary>
			<para>When overridden in a derived class, invokes the method
      specified in the provided <see cref="System.Runtime.Remoting.Messaging.IMessage"/> on the remote object
      represented by the current instance.</para>
		</summary>
		<param name="msg">An <see cref="System.Runtime.Remoting.Messaging.IMessage"/> containing an <see cref="System.Collections.IDictionary"/> of information about the method call. </param>
		<returns>
			<para>The message returned by the invoked method, containing the return value and any
   <see langword="out"/> or <see langword="ref"/>
   parameters.</para>
		</returns>
		<remarks>
			<para>When the transparent proxy backed by the <see cref="System.Runtime.Remoting.Proxies.RealProxy"/> is called, it delegates the
   calls to the <see cref="System.Runtime.Remoting.Proxies.RealProxy.Invoke"/> method. The <see cref="System.Runtime.Remoting.Proxies.RealProxy.Invoke"/> method transforms the
   message in the
<paramref name="msg"/> parameter into an <see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage"/>, and sends 
   it to the remote object represented by the current instance of <see cref="System.Runtime.Remoting.Proxies.RealProxy"/>. </para>
			<para> The <see cref="System.Runtime.Remoting.Messaging.IMessage"/> parameter provides a dictionary through the
<see cref="System.Runtime.Remoting.Messaging.IMessage.Properties" qualify="true"/> 
property. The dictionary contains name/value pairs of
information about the method call, such
as the name of the method called and its parameters. </para>
		</remarks>
		<example>
			<codelink SampleID="CustomProxy_Attribute_RealProxy" SnippetID="4"/>
		</example>
	</doc>
	<doc for="RealProxy.CreateObjRef">
		<summary>
			<para> Creates an <see cref="System.Runtime.Remoting.ObjRef"/> for the specified object type,
   and registers it with the remoting infrastructure as a client-activated object.</para>
		</summary>
		<param name="requestedType">The object type that an <see cref="System.Runtime.Remoting.ObjRef"/> is created for.</param>
		<returns>
			<para>A new instance of <see cref="System.Runtime.Remoting.ObjRef"/> created for
   the specified type.</para>
		</returns>
		<example>
			<codelink SampleID="CustomProxy_Attribute_RealProxy" SnippetID="6"/>
		</example>
		<seealso cref="System.Runtime.Remoting.RemotingConfiguration"/>
	</doc>
	<doc for="RealProxy.GetObjectData">
		<summary>
			<para>Adds the transparent proxy of the object represented by
      the current instance of <see cref="System.Runtime.Remoting.Proxies.RealProxy"/> to the specified <see cref="System.Runtime.Serialization.SerializationInfo"/> .</para>
		</summary>
		<param name="info">The <see cref="System.Runtime.Serialization.SerializationInfo"/> into which the transparent proxy is serialized.</param>
		<param name=" context">The source and destination of the serialization.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="obj "/>or <paramref name="info"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The immediate caller does not have SerializationFormatter permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/></permission>
		<example>
			<codelink SampleID="CustomProxy_Attribute_RealProxy" SnippetID="7"/>
		</example>
	</doc>
	<doc for="RealProxy.GetCOMIUnknown">
		<summary>
			<para>Requests an unmanaged reference to the object represented by the current
      proxy instance.</para>
		</summary>
		<param name="fIsMarshalled"><see langword="true"/> if the object reference is requested for marshaling to a remote location; <see langword="false"/> if the object reference is requested for communication with unmanaged objects in the current process through COM.</param>
		<returns>
			<para>A pointer to a <see topic="cpconcomcallablewrapper"/> if the object reference is requested for
   communication with unmanaged objects in the current process through COM, or a
   pointer to a cached or newly generated <see langword="IUnknown"/> COM interface
   if the object reference is requested for marshaling to a remote
   location.</para>
		</returns>
		<remarks>
			<para> If the proxy is requested for marshaling, then an <see langword="IUnknown "/>interface for the object represented by the current proxy instance is returned. If
   an <see langword="IUnknown"/> was previously cached by the <see cref="System.Runtime.Remoting.Proxies.RealProxy.SetCOMIUnknown"/> method, then that instance is
   returned; otherwise, a new instance is returned.</para>
			<para> If the proxy is requested not for marshaling but for
   communication with unmanaged objects in the current process, then a <see topic="cpconcomcallablewrapper"/> (CCW), which can be used in the current process for
   communication through COM, is returned.</para>
		</remarks>
		<example>
			<codelink SampleID="RealProxy_Sample" SnippetID="2"/>
		</example>
	</doc>
	<doc for="RealProxy.SetCOMIUnknown">
		<summary>
			<para>Stores an unmanaged proxy of the object represented by the current
      instance.</para>
		</summary>
		<param name="i">A pointer to the <see langword="IUnknown"/> interface for the object represented by the current proxy instance.</param>
		<remarks>
			<para>When an unmanaged proxy attempts to communicate with the common language runtime through COM, the runtime resolves
      the remote object represented by the unmanaged proxy. If the remote
      object is managed and also resides in a common language environment, then instead
      of communicating with it through distributed COM, the object is sent to the current
      process. </para>
			<para>If the remote object is not derived from <see cref="System.MarshalByRefObject"/>, then
   it is serialized and copied to the current location. If it is derived from
<see cref="System.MarshalByRefObject"/> 
, then it returns a transparent proxy, and
the remoting infrastructure caches the unmanaged proxy (the
<see langword="IUnknown"/> interface) in the transparent proxy for future 
use.</para>
		</remarks>
		<example>
			<codelink SampleID="RealProxy_Sample" SnippetID="3"/>
		</example>
	</doc>
	<doc for="RealProxy.SupportsInterface">
		<summary>
			<para> Requests a COM interface with
      the specified ID.</para>
		</summary>
		<param name="iid">A reference to the requested interface.</param>
		<returns>
			<para>A pointer to the requested interface.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Proxies.RealProxy.SupportsInterface"/> method allows the current proxy instance to
   implement additional COM interfaces on behalf of the server object that the
   current instance represents. The current method generates the requested
   interface, and returns a pointer to it. The types of COM interfaces that can be
   generated by this method depend on the proxy type, which in turn might depend on the
   type of the server object that the current proxy instance represents. </para>
			<para> For more information, see <see cref="System.Runtime.Remoting.Proxies.ProxyAttribute"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="RealProxy_Sample" SnippetID="1"/>
		</example>
	</doc>
	<doc for="RealProxy.GetTransparentProxy">
		<summary>
			<para> Returns the transparent proxy for the current instance
      of <see cref="System.Runtime.Remoting.Proxies.RealProxy"/>
      .
      </para>
		</summary>
		<returns>
			<para>The transparent proxy for the current proxy instance.</para>
		</returns>
		<example>
			<codelink SampleID="CustomProxy_Attribute_RealProxy" SnippetID="8"/>
		</example>
	</doc>
	<doc for="RealProxy.RealProxy2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Proxies.RealProxy"/> class with default values.</para>
		</summary>
		<example>
			<codelink SampleID="CustomProxy_Attribute_RealProxy" SnippetID="12"/>
		</example>
	</doc>
</docs>
