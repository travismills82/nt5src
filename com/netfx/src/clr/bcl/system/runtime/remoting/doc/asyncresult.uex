<docs>
	<doc for="AsyncResult.SetMessageCtrl"><nodoc/>
		<summary>
			<para>Public reserved. Sets the <see cref="System.Runtime.Remoting.Messaging.IMessageCtrl"/> object for
   the current method call which provides a way to control asynchronous messages
   once they have dispatched.</para>
		</summary>
		<param name="mc">The <see cref="System.Runtime.Remoting.Messaging.IMessageCtrl"/> object for the current method call.</param>
	</doc><doc for="AsyncResult.SyncProcessMessage">
		<nodoc/>
		<summary>
			<para> Public reserved.</para>
		</summary>
		<param name="msg">Public reserved.</param>
		<returns>
			<para>Public reserved.</para>
		</returns>
	</doc><doc for="AsyncResult.AsyncProcessMessage"><nodoc/>
		<summary>
			<para> Public reserved.</para>
		</summary>
		<param name="msg">The request <see cref="System.Runtime.Remoting.Messaging.IMessage"/>.</param>
		<param name=" replySink">The reply <see cref="System.Runtime.Remoting.Messaging.IMessageSink"/>.</param>
		<returns>
			<para>An <see cref="System.Runtime.Remoting.Messaging.IMessageCtrl"/>.</para>
		</returns>
	</doc><doc for="AsyncResult.NextSink"><nodoc/>
		<summary>
			<para>Public reserved. Gets the next message sink in the sink chain.</para>
		</summary>
		<value>
			<para>The next message sink in the sink chain.</para>
		</value>
		<remarks>
			<para>The current implementation of <see cref="System.Runtime.Remoting.Messaging.AsyncResult.NextSink"/> returns
<see langword="null"/>.</para>
		</remarks>
	</doc><doc for="AsyncResult.GetReplyMessage"><nodoc/>
		<summary>
			<para>Public reserved. Returns the reply message returned from a method call.</para>
		</summary>
		<returns>
			<para>The reply message returned from a method call.</para>
		</returns>
	</doc><doc for="AsyncResult.CompletedSynchronously">
		<summary>
			<para>Gets a value indicating whether the <see langword="BeginInvoke "/> call
   completed synchronously.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the 
<see langword="BeginInvoke"/> 
call completed synchronously;
otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>If it is detected that the <see langword="BeginInvoke"/> call completed
   synchronously in the <see cref="System.AsyncCallback"/> delegate, it is probable that the thread that called
   BeginInvoke is the current thread. Most providers of the <see cref="System.IAsyncResult"/> interface will not
   use the capability and will return a default <see langword="false"/>
   .</para>
			<para>Current implementation of <see cref="System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously"/> always returns
<see langword="false"/> .</para>
		</remarks>
	</doc><doc for="AsyncResult.IsCompleted">
		<summary>
			<para>Gets a value indicating whether the server has completed the call.</para>
		</summary>
		<value>
			<para><see langword="true"/> after the server has completed the call; otherwise,
<see langword="false"/> .</para>
		</value>
		<remarks>
			<para> The server must not use any client supplied
      resources outside of the agreed upon sharing semantics after it sets the <see cref="System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted"/> property to
   <see langword="true"/>. Thus, it is safe for the client to destroy the resources after
      the <see cref="System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted"/> property returns
   <see langword="true"/>
   
   .</para>
		</remarks>
	</doc><doc for="AsyncResult.AsyncDelegate">
		<summary>
			<para>Gets the delegate object on which the asynchronous call was invoked.</para>
		</summary>
		<value>
			<para>The delegate object on which the asynchronous call was invoked.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate"/> property can be cast to
   the actual class of the user-defined delegate. </para>
			<para> For example, if the user-defined delegate is of type <c>MyDelegate</c>, in order to
access <c>MyDelegate.EndInvoke</c>, the asynchronous delegate must be cast to <c>MyDelegate</c>. The
<c>MyDelegate.EndInvoke</c> can be called in the async callback function (of type <see cref="System.AsyncCallback"/>) to obtain
the results of the originally submitted <c>MyDelegate.BeginInvoke</c>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates how to get the delegate object on which
      the asynchronous call was invoked from the <see cref="System.Runtime.Remoting.Messaging.AsyncResult"/>. For the complete
      example code, see the example for the <see cref="System.Runtime.Remoting.Messaging.AsyncResult"/> class. </para>
			<codelink SampleID="AsyncResult.NewExamples" SnippetID="4"/>
		</example>
		<seealso topic="cpovrasynchronousdelegates"/>
	</doc><doc for="AsyncResult.AsyncState">
		<summary>
			<para>Gets the object provided as the last parameter of a
   <see langword="BeginInvoke"/>
   method call.</para>
		</summary>
		<value>
			<para>The object provided as the last parameter of a
   <see langword="BeginInvoke"/>
   method call.</para>
		</value>
		<remarks>
			<para>For more information about the
   <see langword="BeginInvoke"/> method, see <see topic="cpovrasynchronousdelegates"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates how the <see cref="System.Runtime.Remoting.Messaging.AsyncResult.AsyncState"/> property is used to get the
   last parameter of a <see langword="BeginInvoke"/> method call. For the
   complete example code, see the example for the <see cref="System.Runtime.Remoting.Messaging.AsyncResult"/> class.</para>
			<codelink SampleID="AsyncResult.NewExamples" SnippetID="4"/>
		</example>
		<seealso topic="cpovrasynchronousdelegates"/>
	</doc><doc for="AsyncResult.EndInvokeCalled">
		<summary>
			<para> Gets or sets a value indicating whether
   <see langword="EndInvoke"/>
   has been called on the current <see cref="System.Runtime.Remoting.Messaging.AsyncResult"/> .</para>
		</summary>
		<value>
			<para><see langword="true"/> if
<see langword="EndInvoke "/> has been called on the current <see cref="System.Runtime.Remoting.Messaging.AsyncResult"/>; 
   otherwise, <see langword="false"/>
   .</para>
		</value>
	</doc><doc for="AsyncResult">
		<summary>
			<para>Encapsulates
      the results of an asynchronous operation on an asynchronous delegate.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Messaging.AsyncResult"/> class is used in conjunction
   with asynchronous delegates. The <see cref="System.IAsyncResult"/> returned from the delegate's
<see langword="BeginInvoke"/> 
method can be cast to an <see cref="System.Runtime.Remoting.Messaging.AsyncResult"/> . The
<see cref="System.Runtime.Remoting.Messaging.AsyncResult"/> has the <see cref="System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate"/> property that 
holds the delegate object on which the async call was invoked. </para>
			<para>For more information about <see langword="BeginInvoke"/> and
asynchronous delegates, see <see topic="cpovrasynchronousdelegates"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of the <see cref="System.Runtime.Remoting.Messaging.AsyncResult"/> class to retrieve the results
   of an asynchronous operation on an asynchronous delegate.</para>
			<codelink SampleID="AsyncResult.NewExamples" SnippetID="1"/>
		</example>
		<seealso topic="cpovrasynchronousdelegates"/>
	</doc>
	<doc for="AsyncResult.AsyncWaitHandle">
		<summary>
			<para>Gets a <see cref="System.Threading.WaitHandle"/> that encapsulates
   Win32 synchronization handles, and allows the implementation of various
   synchronization schemes.</para>
		</summary>
		<value>
			<para>A <see cref="System.Threading.WaitHandle"/> that
   encapsulates Win32 synchronization handles, and allows the implementation of various synchronization
   schemes.</para>
		</value>
		<remarks>
			<para>The WaitHandle returned by this method is automatically 
      signaled when the asynchronous operation has completed. </para>
			<para>An object that implements <see cref="System.IAsyncResult"/> does not need to derive
   directly from the <see cref="System.Threading.WaitHandle"/> classes. <see cref="System.Threading.WaitHandle"/> wraps its
   synchronization primitive and must be signaled after
   the call is completed. This enables the client to wait for the call to
   complete instead polling for call status. The common language runtime supplies a number of
   waitable objects that mirror Win32 synchronization primitives such as <see cref="System.Threading.ManualResetEvent"/>, <see cref="System.Threading.AutoResetEvent"/> and <see cref="System.Threading.Mutex"/>. </para>
			<para><see cref="System.Threading.WaitHandle"/> supplies
methods
that support waiting for such synchronization objects
to become signaled with the any or all semantics, that is
<see cref="System.Threading.WaitHandle.WaitOne" qualify="true"/>, <see cref="System.Threading.WaitHandle.WaitAny"/> and <see cref="System.Threading.WaitHandle.WaitAll"/>. Such methods are context aware to 
avoid deadlocks. The <see cref="System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" qualify="true"/> can
be allocated eagerly or in lazy
manner. It is the choice of the <see cref="System.IAsyncResult"/>
implementer. </para>
			<para>Implementers of classes that return <see cref="System.IAsyncResult"/> must note
that the <see cref="System.IAsyncResult.AsyncWaitHandle"/> can be lazily allocated. Once allocated,
however, it should be kept alive until the user calls
<see langword="EndInvoke"/> 
. At
that time the object behind <see cref="System.IAsyncResult.AsyncWaitHandle"/>
can be recycled. </para>
			<note type="caution">
   The <see cref="System.Threading.WaitHandle"/> contained in the <see cref="System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle"/> property can be used to block
   the current thread until the asynchronous call is complete. However the
<see cref="System.Threading.WaitHandle"/> will 
   ignore the <see cref="System.AsyncCallback"/>, if one was specified during the
<see langword="BeginInvoke"/> call. Therefore, a situation 
   can occur where the application shuts down before the <see cref="System.AsyncCallback"/> has
   finished executing, even if a <see cref="System.Threading.WaitHandle"/> is used to block until the asynchronous call
   completion. For an example of such a situation, see the example for the
<see cref="System.Runtime.Remoting.Messaging.AsyncResult"/> class, and remove the <see cref="System.Threading.Thread.Sleep" qualify="true"/> statement. 
</note>
		</remarks>
		<example>
			<para>The following code example demonstrates how the <see cref="System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle"/> property is used
   to get a <see cref="System.Threading.WaitHandle"/> for an asynchronous call on a delegate. For the
   complete example code, see the example for the <see cref="System.Runtime.Remoting.Messaging.AsyncResult"/>
   class. Note that the <see langword="WaitHandle"/> is not explicitly signaled in
   this example. This is because implementors of <see langword="IAsyncResult"/> are
   responsible for signaling the <see langword="WaitHandle"/>
   obtained from this property.</para>
			<codelink SampleID="AsyncResult.NewExamples" SnippetID="8"/>
		</example>
		<seealso cref="T:System.Threading.WaitHandle"/>
	</doc>
</docs>
