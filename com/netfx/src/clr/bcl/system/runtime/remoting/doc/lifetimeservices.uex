<docs>
	<doc for="LifetimeServices">
		<summary>
			<para>Controls the .NET remoting lifetime services.</para>
		</summary>
		<remarks>
			<para> Distributed garbage collection is responsible for controlling the
      lifetimes of server applications, and for deleting them when their lifetimes have
      expired. Traditionally, distributed garbage collection uses reference counts and
      pinging for control. This works well when there are a few clients per object,
      but does not work well when there are thousands of clients per each object. The
      lifetime service can assume the function of a traditional distributed garbage
      collector, and scales well when the number of clients increases.</para>
			<para> The lifetime service associates a lease with each remotely activated object. When the lease
      expires, the object is removed.</para>
			<note type="note">
      This class makes a link demand. A SecurityException is thrown if the immediate caller does not have
      infrastructure permission. See <see topic="cpconLinkDemands"/> for more information.
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission Value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
		<example>
			<codelink SampleID="System.Runtime.Remoting.Lifetime" SnippetID="2"/>
		</example>
	</doc>
	<doc for="LifetimeServices.LeaseTime">
		<summary>
			<para> Gets or sets the initial lease time span for an <see cref="System.AppDomain"/>
.</para>
		</summary>
		<value>
			<para>The initial lease <see cref="System.TimeSpan"/> for objects that can have leases in the
<see cref="System.AppDomain"/> .</para>
		</value>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.</exception>
		<remarks>
			<para>The default lease time span is 5 minutes.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
	</doc>
	<doc for="LifetimeServices.RenewOnCallTime">
		<summary>
			<para> Gets or sets the amount of time by which the lease
      is extended every time a call comes in on the server object.</para>
		</summary>
		<value>
			<para>The <see cref="System.TimeSpan"/> by which a lifetime lease
   in the current <see cref="System.AppDomain"/> is extended after
   each call.</para>
		</value>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.</exception>
		<remarks>
			<para>The default renewal time by which a lifetime lease is extended is 2 minutes.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="ILease_ILease" SnippetID="3"/>
		</example>
	</doc>
	<doc for="LifetimeServices.SponsorshipTimeout">
		<summary>
			<para>Gets or sets the amount of time the lease manager waits for a sponsor to
      return with a lease renewal time.</para>
		</summary>
		<value>
			<para>The initial sponsorship time-out.</para>
		</value>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.</exception>
		<remarks>
			<para>The default time until a call to a sponsor is timed out is 2 minutes.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="ILease_ILease" SnippetID="3"/>
		</example>
	</doc>
	<doc for="LifetimeServices.LeaseManagerPollTime">
		<summary>
			<para> Gets or sets the time interval between each activation of
      the lease
      manager to clean up expired leases.
      </para>
		</summary>
		<value>
			<para> The default amount of time the lease manager
      sleeps after checking for expired leases.</para>
		</value>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.</exception>
		<remarks>
			<para>The current property defines the frequency at which the lease manager
      becomes active to clean up expired leases. For example, if <see cref="System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"/> is set to 100
      seconds, the lease list is inspected for cleanups and renewals every 100
      seconds.</para>
			<para>The default value of the <see cref="System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"/> property is 10 seconds.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
	</doc>
</docs>
