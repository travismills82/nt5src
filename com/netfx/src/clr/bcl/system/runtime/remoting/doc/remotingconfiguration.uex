<docs>
	<doc for="ActivatedClientTypeEntry.ActivatedClientTypeEntry">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.ActivatedClientTypeEntry"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.ActivatedClientTypeEntry"/> class with the given type name, 
   assembly name, and application URL.</para>
		</summary>
		<param name="typeName">The type name of the client activated type.</param>
		<param name=" assemblyName">The assembly name of the client activated type.</param>
		<param name=" appUrl">The URL of the application to activate the type in.</param>
	</doc><doc for="ActivatedClientTypeEntry.ApplicationUrl">
		<summary>
			<para>Gets the URL of the application to activate the type in.</para>
		</summary>
		<value>
			<para>The URL of the application to activate the type in.</para>
		</value>
	</doc><doc for="ActivatedClientTypeEntry.ObjectType">
		<summary>
			<para>Gets the <see cref="System.Type"/> of the client activated type.</para>
		</summary>
		<value>
			<para>Gets the <see cref="System.Type"/> of the client activated type.</para>
		</value>
	</doc><doc for="ActivatedClientTypeEntry.ActivatedClientTypeEntry1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.ActivatedClientTypeEntry"/> class with 
   the given <see cref="System.Type"/> and
   application URL.</para>
		</summary>
		<param name="type">The <see cref="System.Type"/> of the client activated type.</param>
		<param name=" appUrl">The URL of the application to activate the type in.</param>
		<remarks>
			<para>The assembly name of the type is derived from the
   <paramref name="type"/> parameter.</para>
		</remarks>
	</doc><doc for="ActivatedServiceTypeEntry.ActivatedServiceTypeEntry1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.ActivatedServiceTypeEntry"/> class with 
   the given <see cref="System.Type"/> .</para>
		</summary>
		<param name="type">The <see cref="System.Type"/> of the client activated service type.</param>
	</doc><doc for="TypeEntry.TypeEntry">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.TypeEntry"/> class.</para>
		</summary>
	</doc><doc for="RemotingConfiguration">
		<summary>
			<para>Provides various static methods for configuring the
      remoting infrastructure.</para>
		</summary>
	</doc><doc for="WellKnownClientTypeEntry.TypeName">
		<summary>
			<para>Gets the full type name of the object type configured to be a remote activated type.</para>
		</summary>
		<value>
			<para>The full type name of the object type configured to be a remote activated type.</para>
		</value>
	</doc><doc for="WellKnownClientTypeEntry.AssemblyName">
		<summary>
			<para>Gets the assembly name of the object type configured to
      be a remote activated type.</para>
		</summary>
		<value>
			<para> The assembly name of the object type configured to be a remote activated type.</para>
		</value>
	</doc><doc for="TypeEntry">
		<summary>
			<para>Implements a base class that holds the configuration information used to activate
      an instance of a remote type.</para>
		</summary>
	</doc><doc for="ActivatedClientTypeEntry.ContextAttributes">
		<summary>
			<para>Gets or sets the context attributes for the client-activated type.</para>
		</summary>
		<value>
			<para>The context attributes for the client activated type.</para>
		</value>
		<remarks>
			<para><see cref="System.Runtime.Remoting.Contexts.Context"/> attributes provide context
   properties which when added to a <see cref="System.Runtime.Remoting.Contexts.Context"/>
   can enforce policies such as
   synchronization or transactions.</para>
			<note type="note">
   At the moment this indexer is not
   implemented and operations on it will not produce any results.
</note>
		</remarks>
		<seealso cref="T:System.Runtime.Remoting.Contexts.Context"/>
		<seealso cref="T:System.Runtime.Remoting.Contexts.ContextAttribute"/>
		<seealso cref="T:System.Runtime.Remoting.Contexts.ContextProperty"/>
		<seealso cref="T:System.Runtime.Remoting.Contexts.IContextAttribute"/>
	</doc>
	<doc for="ActivatedClientTypeEntry.ToString">
		<summary>
			<para>Returns the type name, assembly name, and application
      URL of the client-activated type as a <see cref="System.String"/>.</para>
		</summary>
		<returns>
			<para>The type name, assembly name, and application URL of the
      client activated type as a <see cref="System.String"/> .</para>
		</returns>
	</doc>
	<doc for="ActivatedServiceTypeEntry.ActivatedServiceTypeEntry">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.ActivatedServiceTypeEntry"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.ActivatedServiceTypeEntry"/> class with
   the given type name and application URL.</para>
		</summary>
		<param name="typeName">The type name of the client-activated service type.</param>
		<param name="assemblyName">The assembly name of the client-activated service type.</param>
	</doc>
	<doc for="ActivatedServiceTypeEntry.ObjectType">
		<summary>
			<para>Gets the <see cref="System.Type"/> of the client-activated service type.</para>
		</summary>
		<value>
			<para>The <see cref="System.Type"/> of
   the client-activated service type.</para>
		</value>
	</doc>
	<doc for="ActivatedServiceTypeEntry.ToString">
		<summary>
			<para> Returns the type and assembly name
      of the client-activated service type as a <see cref="System.String"/> .</para>
		</summary>
		<returns>
			<para>The type and assembly name of the client-activated
      service type as a <see cref="System.String"/> .</para>
		</returns>
	</doc>
	<doc for="WellKnownClientTypeEntry.ObjectUrl">
		<summary>
			<para>Gets the URL of the server-activated client object.</para>
		</summary>
		<value>
			<para>The URL of the server-activated client object.</para>
		</value>
	</doc>
	<doc for="WellKnownClientTypeEntry.ObjectType">
		<summary>
			<para>Gets the <see cref="System.Type"/> of the server-activated client type.</para>
		</summary>
		<value>
			<para>Gets the <see cref="System.Type"/>
of the server-activated client type.</para>
		</value>
	</doc>
	<doc for="WellKnownClientTypeEntry.ApplicationUrl">
		<summary>
			<para>Gets or sets the URL of the application to
      activate the type in.</para>
		</summary>
		<value>
			<para>The URL of the application to activate the type in.</para>
		</value>
		<remarks>
			<para>The application URL is optional and should be set to the URL of the application
      corresponding to the server-activated object.</para>
		</remarks>
	</doc>
	<doc for="WellKnownClientTypeEntry.ToString">
		<summary>
			<para> Returns the full type name, assembly name, and object
      URL of the server-activated client type as a <see cref="System.String"/> .</para>
		</summary>
		<returns>
			<para> The full type name, assembly name, and object
      URL of the server-activated client type as a <see cref="System.String"/> .</para>
		</returns>
		<remarks>
			<para>If <see cref="System.Runtime.Remoting.WellKnownClientTypeEntry.ApplicationUrl"/><see langword=" "/>is not
<see langword="null"/>, it is returned at the end of the string.</para>
		</remarks>
	</doc>
	<doc for="WellKnownServiceTypeEntry.WellKnownServiceTypeEntry">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.WellKnownServiceTypeEntry"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.WellKnownServiceTypeEntry"/> class with the given type name,
   assembly name, object URI, and <see cref="System.Runtime.Remoting.WellKnownObjectMode"/> .</para>
		</summary>
		<param name="typeName">The full type name of the server-activated service type.</param>
		<param name=" assemblyName">The assembly name of the server-activated service type.</param>
		<param name=" objectUri"> The URI of the server-activated object.</param>
		<param name=" mode">The <see cref="System.Runtime.Remoting.WellKnownObjectMode"/> of the type, which defines how the object is activated.</param>
	</doc>
	<doc for="WellKnownServiceTypeEntry.WellKnownServiceTypeEntry1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.WellKnownServiceTypeEntry"/> class with the given <see cref="System.Type"/>, object URI, and <see cref="System.Runtime.Remoting.WellKnownObjectMode"/>.</para>
		</summary>
		<param name="type">The <see cref="System.Type"/> of the server-activated service type object.</param>
		<param name=" objectUri">The URI of the server-activated type.</param>
		<param name=" mode">The <see cref="System.Runtime.Remoting.WellKnownObjectMode"/> of the type, which defines how the object is activated.</param>
	</doc>
	<doc for="WellKnownServiceTypeEntry.ObjectUri">
		<summary>
			<para> Gets the URI of the well
      known service type.</para>
		</summary>
		<value>
			<para>The URI of the server-activated service type.</para>
		</value>
	</doc>
	<doc for="WellKnownServiceTypeEntry.Mode">
		<summary>
			<para>Gets the <see cref="System.Runtime.Remoting.WellKnownObjectMode"/> of the server-activated service type.</para>
		</summary>
		<value>
			<para>Gets the <see cref="System.Runtime.Remoting.WellKnownObjectMode"/> of the server-activated
   service type.</para>
		</value>
	</doc>
	<doc for="WellKnownServiceTypeEntry.ObjectType">
		<summary>
			<para>Gets the <see cref="System.Type"/> of the server-activated service type.</para>
		</summary>
		<value>
			<para>The <see cref="System.Type"/> of the server-activated service type.</para>
		</value>
	</doc>
	<doc for="WellKnownServiceTypeEntry.ContextAttributes">
		<summary>
			<para>Gets or sets the context attributes for the server-activated service type.</para>
		</summary>
		<value>
			<para>Gets or sets the context attributes for the server-activated service type.</para>
		</value>
		<remarks>
			<para>Context attributes provide context properties that, when
      added to a context,
      can enforce policies such as
      synchronization and transactions.</para>
			<note type="note">
      At the moment this indexer is not
      implemented and operations on it will not produce any results.
      
      </note>
		</remarks>
		<seealso cref="T:System.Runtime.Remoting.Contexts.Context"/>
		<seealso cref="T:System.Runtime.Remoting.Contexts.ContextAttribute"/>
		<seealso cref="T:System.Runtime.Remoting.Contexts.ContextProperty"/>
		<seealso cref="T:System.Runtime.Remoting.Contexts.IContextAttribute"/>
	</doc>
	<doc for="WellKnownServiceTypeEntry.ToString">
		<summary>
			<para>Returns the type name, assembly name, object URI
      and the <see cref="System.Runtime.Remoting.WellKnownObjectMode"/> of
      the server-activated server activated type as a <see cref="System.String"/> .</para>
		</summary>
		<returns>
			<para>The type name, assembly name, object URI and
      the <see cref="System.Runtime.Remoting.WellKnownObjectMode"/> of
      the server-activated server activated type as a <see cref="System.String"/> .</para>
		</returns>
	</doc>
	<doc for="WellKnownClientTypeEntry.WellKnownClientTypeEntry">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.WellKnownClientTypeEntry"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.WellKnownClientTypeEntry"/> class with
   the given type, assembly name, and URL.</para>
		</summary>
		<param name="typeName">The type name of the server-activated type.</param>
		<param name="assemblyName">The assembly name of the server-activated type.</param>
		<param name="objectUrl">The URL of the server-activated type.</param>
	</doc>
	<doc for="WellKnownClientTypeEntry.WellKnownClientTypeEntry1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.WellKnownClientTypeEntry"/> class with 
   the given type
   and URL.</para>
		</summary>
		<param name="type">The <see cref="System.Type"/> of the server-activated type.</param>
		<param name="objectUrl">The URL of the server-activated type.</param>
	</doc>
	<doc for="RemotingConfiguration.ApplicationName">
		<summary>
			<para> Gets or sets the name of a
      remoting application.
      </para>
		</summary>
		<value>
			<para>The name of a remoting application. </para>
		</value>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure Remoting types and channels. This exception is thrown only when setting the property value.</exception>
		<remarks>
			<para>An application name can be set only once, either through the current property
      or through a configuration file. If an application is running inside a hosted environment, such
      as Internet Information Services (IIS), this value might have already been set (usually
      to the virtual directory). The current property will return
   <see langword="null"/>
   if the application name has not
   been set.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates the use of the <see cref="System.Runtime.Remoting.RemotingConfiguration.ApplicationName"/> property to
   indicate the name of the remoting application. For the full example code,
   see examples for the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/> and <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType"/> methods.</para>
			<codelink SampleID="RemotingConfiguration.ServerActivation1" SnippetID="2"/>
			<para>The following example demonstrates how to access an object 
remoted from a named application.</para>
			<codelink SampleID="RemotingConfiguration.ServerActivation1" SnippetID="6"/>
		</example>
	</doc>
	<doc for="RemotingConfiguration.ApplicationId">
		<summary>
			<para>Gets the ID of the currently executing application.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> containing the ID of the currently executing application.</para>
		</value>
		<remarks>
			<para>The application ID is prepended to the URI of the objects created by the
      currently executing application.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="RemotingConfiguration.RegisterActivatedClientType">
		<overload>
			<para>Registers an object <see cref="System.Type"/> on the client end as a type that can be activated on
   the server.</para>
		</overload>
		<summary>
			<para>Registers an object <see cref="System.Type"/> on the client end as a type
   that can be activated on the server, using the given
   parameters to initialize a new instance of the <see cref="System.Runtime.Remoting.ActivatedClientTypeEntry"/> class.</para>
		</summary>
		<param name="type">The object <see cref="System.Type"/>.</param>
		<param name="appUrl">URL of the application where this type is activated. </param>
		<exception cref="System.ArgumentNullException">The <paramref name="typeName"/> or <paramref name="URI "/>parameter is <see langword="null"/> . </exception>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure Remoting types and channels.</exception>
		<remarks>
			<para>To create an instance of a client activated object on the
      server, you must know its <see cref="System.Type"/>
      , and it must be registered on the server end
      by using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/> method.
      To obtain a proxy for a new instance of the client activated
      object, the client must first register a channel with <see cref="System.Runtime.Remoting.Channels.ChannelServices"/> and then activate the object by
      calling <see langword="new"/>.</para>
			<para>To activate a client activated object type with the
   <see langword="new"/> keyword, you must first register the object type on
      the client end using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/> method. Calling the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/>
      method gives the remoting infrastructure the location of the remote
      application where <see langword="new"/> attempts to create it. If, on the
      other hand, you use the <see cref="System.Activator.CreateInstance" qualify="true"/> method to create a new
      instance of the client activated object, you must supply the remote
      application's URL as a parameter, so no prior registration on the client end is
      necessary. To supply the <see cref="System.Activator.CreateInstance" qualify="true"/> method with the URL of
      the server where you want to create the object, you must encapsulate the URL in
      an instance of the <see cref="System.Runtime.Remoting.Activation.UrlAttribute"/>
      class.</para>
			<para>For a detailed description of client activated objects see
   <see topic="cpconClientActivation"/></para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<para> The following example
      demonstrates registration of an object type on the client end as a type that
      can be activated on the server. For the server code that
      corresponds to the presented client code, see the example for the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/> method.</para>
			<codelink SampleID="RemotingConfiguration.ClientActivation" SnippetID="1"/>
		</example>
		<seealso cref="System.Runtime.Remoting.ActivatedClientTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.ActivatedServiceTypeEntry"/>
	</doc>
	<doc for="RemotingConfiguration.RegisterActivatedClientType1">
		<summary>
			<para>Registers an object <see cref="System.Type"/> recorded in the provided <see cref="System.Runtime.Remoting.ActivatedClientTypeEntry"/> on the client end as a
   type that can be activated on the server.</para>
		</summary>
		<param name="entry">Configuration settings for the client activated type.</param>
		<remarks>
			<para>To create an instance of a client activated object on the server, you must
      know its <see cref="System.Type"/>,
      and it must be registered on the server end by using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/> method. To obtain a
      proxy for a new instance of the client activated object, the client must first
      register a channel with <see cref="System.Runtime.Remoting.Channels.ChannelServices"/> and then activate the object
      by calling <see langword="new"/>.</para>
			<para>To activate a client activated object type with the
      <see langword="new"/> keyword, you must first register the object type on
      the client end using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/> method. Calling the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/>
      method gives the remoting infrastructure the location of the remote
      application where <see langword="new"/> attempts to create it. If, on the
      other hand, you use the <see cref="System.Activator.CreateInstance" qualify="true"/> method to create a new
      instance of the client activated object, you must supply the remote
      application's URL as a parameter, so no prior registration on the client end is
      necessary. To supply the <see cref="System.Activator.CreateInstance" qualify="true"/> method with the URL of
      the server where you want to create the object, you must encapsulate the URL in
      an instance of the <see cref="System.Runtime.Remoting.Activation.UrlAttribute"/> class.</para>
			<para>For a detailed description of client activated objects see
      <see topic="cpconClientActivation"/>.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have 

permission to configure Remoting types and channels.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<seealso cref="System.Runtime.Remoting.ActivatedClientTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.ActivatedServiceTypeEntry"/>
	</doc>
	<doc for="RemotingConfiguration.RegisterWellKnownClientType">
		<overload>
			<para>Registers an object <see cref="System.Type"/> on the client end as a well-known type (single call or singleton).</para>
		</overload>
		<summary>
			<para>Registers an object <see cref="System.Type"/> on the client end as a well-known type that
   can be activated on the server, using the given
   parameters to initialize a new instance of the <see cref="System.Runtime.Remoting.WellKnownClientTypeEntry"/> class.
   </para>
		</summary>
		<param name="type">The object <see cref="System.Type"/>.</param>
		<param name="objectUrl">URL of a well-known client object. </param>
		<remarks>
			<para>Any client that knows the URI of a registered well-known object can obtain a
      proxy for the object by registering the channel it prefers with <see cref="System.Runtime.Remoting.Channels.ChannelServices"/>, and activating the object by
      calling <see langword="new"/> or <see cref="System.Activator.GetObject" qualify="true"/>. To activate a well-known
      object with <see langword="new"/> , you must first register the well-known object
      type on the client using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/>
      method. Calling the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/>
      method gives the remoting infrastructure the location of the remote object,
      which allows the <see langword="new"/> keyword to create it. If, on the other
      hand, you use the <see cref="System.Activator.GetObject" qualify="true"/> method to activate the well-known object, you
      must supply it with the object's URL as an argument, so no prior registration on
      the client end is necessary.</para>
			<para>For a detailed description of well-known objects see
      <see topic="cpconServerActivation"/>.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have 

permission to configure Remoting types and channels.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates registration of an object type on the
      client end as a well-known type. For the server code that corresponds to the
      presented client code, see the example for the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType"/> method.</para>
			<codelink SampleID="RemotingConfiguration.ServerActivation1" SnippetID="5,6,7"/>
		</example>
		<seealso cref="System.Runtime.Remoting.WellKnownClientTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.WellKnownServiceTypeEntry"/>
	</doc>
	<doc for="RemotingConfiguration.RegisterWellKnownClientType1">
		<summary>
			<para>Registers an object <see cref="System.Type"/> recorded in the provided <see cref="System.Runtime.Remoting.WellKnownClientTypeEntry"/> on
   the client end as a well-known type that can be activated on the server.</para>
		</summary>
		<param name="entry">Configuration settings for the well-known type.</param>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure Remoting types and channels.</exception>
		<remarks>
			<para>Any client that knows the URI of a registered well-known object can obtain a proxy for the object by
      registering the channel it prefers with <see cref="System.Runtime.Remoting.Channels.ChannelServices"/>,
      and
      activating the object by calling <see langword="new"/> or <see cref="System.Activator.GetObject" qualify="true"/>.
      To activate a well-known object with <see langword="new"/> , you must
      first register the well-known object type on the client using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/> method. Calling the
   <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/> method
      gives the remoting infrastructure the location of the remote object, which
      allows the <see langword="new"/> keyword to create it. If, on the other hand, you
      use the <see cref="System.Activator.GetObject" qualify="true"/> method to activate the well-known object, you must
      supply it with the object's URL as an argument, so no prior registration on
      the client end is necessary.</para>
			<para>For a detailed description of well-known objects see
   <see topic="cpconServerActivation"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<seealso cref="System.Runtime.Remoting.WellKnownClientTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.WellKnownServiceTypeEntry"/>
	</doc>
	<doc for="RemotingConfiguration.ProcessId">
		<summary>
			<para>Gets the ID of the currently executing process.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> containing the ID of the currently executing process.</para>
		</value>
		<exception cref="System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for operating with infrastructure code. Demand value: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/></permission>
	</doc>
	<doc for="RemotingConfiguration.RegisterActivatedServiceType">
		<overload>
			<para>Registers an object <see cref="System.Type"/> on the service
   end as one that can be activated on request from a
   client.</para>
		</overload>
		<summary>
			<para>Registers a specified object type on the service end as a type that
      
      can be activated on request from a client.</para>
		</summary>
		<param name="type">The <see cref="System.Type"/> of object to register. </param>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</exception>
		<remarks>
			<para>To create an instance of a client activated object on the server, you must
      know its <see cref="System.Type"/>,
      and it must be registered on the server end by using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/> method. To obtain
      a proxy for a new instance of the client activated object, the client must first
      register a channel with <see cref="System.Runtime.Remoting.Channels.ChannelServices"/> and then activate the object
      by calling <see langword="new"/> or <see cref="System.Activator.CreateInstance" qualify="true"/>.</para>
			<para>To activate a client activated object type with the <see langword="new"/>
keyword, you must first register the object type on the client end using the
<see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/>method. Calling the 
<see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/> method 
gives the remoting infrastructure the location of the remote application, where
<see langword="new"/> attempts to create it. If, on the other hand, you use the 
<see cref="System.Activator.CreateInstance"/> method to create a new instance of the client 
activated object, you must supply the remote application's URL as a parameter,
so no prior registration on the client end is necessary. To supply the <see cref="System.Activator.CreateInstance"/>
method with the URL of the server where you want to create the object, you
must encapsulate the URL in an instance of the <see cref="System.Runtime.Remoting.Activation.UrlAttribute"/> class.</para>
			<para>For a detailed description of client activated objects see
<see topic="cpconClientActivation"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates registration of an object type on the
      server as a type that can be activated by the client. For the client code
      that corresponds to the presented server code, see the example for the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/> method.</para>
			<codelink SampleID="RemotingConfiguration.ClientActivation" SnippetID="2"/>
			<para>The following example shows the service object registered in the sample code 
above.</para>
			<codelink SampleID="RemotingConfiguration.ClientActivation" SnippetID="3"/>
		</example>
		<seealso cref="System.Runtime.Remoting.ActivatedServiceTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.ActivatedClientTypeEntry"/>
	</doc>
	<doc for="RemotingConfiguration.RegisterActivatedServiceType1">
		<summary>
			<para>Registers an object type recorded in the provided <see cref="System.Runtime.Remoting.ActivatedServiceTypeEntry"/> on the service end as one that can be activated on
   request from a client.</para>
		</summary>
		<param name="entry">Configuration settings for the client activated type. </param>
		<remarks>
			<para>To create an instance of a client activated object on the server, you must
      know its <see cref="System.Type"/>,
      and it must be registered on the server end by using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/> method. To obtain
      a proxy for a new instance of the client activated object, the client must first
      register a channel with <see cref="System.Runtime.Remoting.Channels.ChannelServices"/> and then activate the object
      by calling <see langword="new"/> or <see cref="System.Activator.CreateInstance" qualify="true"/>.</para>
			<para>To activate a client activated object type with the <see langword="new"/>
keyword, you must first register the object type on the client end using the
<see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/>method. Calling 
the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/> method gives the
remoting infrastructure the location of the remote application, where
<see langword="new"/> attempts to create it. If, on the other hand, you use the 
<see cref="System.Activator.CreateInstance"/> method to create a new instance of the client 
activated object, you must supply the remote application's URL as a parameter,
so no prior registration on the client end is necessary. To supply the <see cref="System.Activator.CreateInstance"/>
method with the URL of the server where you want to create the object, you must
encapsulate the URL in an instance of the <see cref="System.Runtime.Remoting.Activation.UrlAttribute"/> class.</para>
			<para>For a detailed description of client activated objects see
<see topic="cpconClientActivation"/>.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. </exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<seealso cref="System.Runtime.Remoting.ActivatedServiceTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.ActivatedClientTypeEntry"/>
	</doc>
	<doc for="RemotingConfiguration.RegisterWellKnownServiceType">
		<overload>
			<para>Registers an object <see cref="System.Type"/> on the service end as a well-known type (single
   call or singleton).</para>
		</overload>
		<summary>
			<para> Registers an object <see cref="System.Type"/> on the service end as a well-known type, using the
   given parameters to
   initialize a new instance of <see cref="System.Runtime.Remoting.WellKnownServiceTypeEntry"/>. </para>
		</summary>
		<param name="type">The object <see cref="System.Type"/>.</param>
		<param name="objectUri">The object URI.</param>
		<param name="mode">The activation mode of the well-known object type being registered. (See <see cref="System.Runtime.Remoting.WellKnownObjectMode"/> .) </param>
		<remarks>
			<para>Any client that knows the URI of a registered well-known object can obtain a
      proxy for the object by registering the channel it prefers with <see cref="System.Runtime.Remoting.Channels.ChannelServices"/>, and activating the object by
      calling <see langword="new"/> or the <see cref="System.Activator.GetObject" qualify="true"/> method. To activate a
      well-known object with <see langword="new"/>, you must first register the
      well-known object type on the client using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/> method.
      Calling the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/> method gives the
      remoting infrastructure the location of the remote object, which allows the
      <see langword="new"/> keyword to create it. If, on the other hand, you use the
      <see cref="System.Activator.GetObject" qualify="true"/> method to activate the well-known object, you
      must supply it with the object's URL as an argument, so no prior registration on
      the client end is necessary.</para>
			<para>When the call arrives at the server, the .NET Framework extracts the URI from the
      message, examines the remoting tables to locate the reference for the
      object that matches the URI, and then instantiates the object if necessary,
      forwarding the method call to the object. If the object is registered as <see cref="System.Runtime.Remoting.WellKnownObjectMode.SingleCall"/>, it is destroyed
      after the method call is completed. A new instance of the object is created for
      each method called. The only difference between <see cref="System.Activator.GetObject" qualify="true"/>
      and <see langword="new"/> is that the former allows you to specify a URL as a
      parameter, and the latter obtains the URL from the configuration.</para>
			<para>The remote object itself is not instantiated by the registration process.
      This only happens when a client attempts to call a method on the object or
      activates the object from the client side. </para>
			<para>For a detailed description of well-known objects see
      <see topic="cpconServerActivation"/>.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. </exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates registration of an object type on the
      server as a well-known object type. For the client code that corresponds to
      the presented server code, see the example for the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/> method.</para>
			<codelink SampleID="RemotingConfiguration.ServerActivation1" SnippetID="1,2,3"/>
			<para>The following example shows the service object registered in 
the sample code above.</para>
			<codelink SampleID="RemotingConfiguration.ServerActivation1" SnippetID="4"/>
		</example>
		<seealso cref="System.Runtime.Remoting.WellKnownServiceTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.WellKnownClientTypeEntry"/>
	</doc>
	<doc for="RemotingConfiguration.RegisterWellKnownServiceType1">
		<summary>
			<para>Registers an object <see cref="System.Type"/> recorded in the provided <see cref="System.Runtime.Remoting.WellKnownServiceTypeEntry"/> on the service end as a well-known type.</para>
		</summary>
		<param name="entry">Configuration settings for the well-known type.</param>
		<remarks>
			<para>Any client that knows the URI of a registered well-known object can obtain a proxy for the
      object by registering the channel it prefers with <see cref="System.Runtime.Remoting.Channels.ChannelServices"/>,
      and activating the object by
      calling <see langword="new"/>
      or the <see cref="System.Activator.GetObject" qualify="true"/> method. To activate a well-known
      object with <see langword="new"/> , you must first register the well-known
      object type on the client using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/> method. Calling the
      <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/> method
      gives the remoting infrastructure the location of the remote object, which
      allows the <see langword="new"/> keyword to create it. If, on the other hand, you
      use the <see cref="System.Activator.GetObject" qualify="true"/> method to activate the well-known object, you
      must supply it with the object's URL as an argument, so no prior registration on
      the client end is necessary.</para>
			<para>When the call arrives at the server, .NET Framework extracts the URI from the
      message, examines the remoting tables to locate the reference for the
      object that matches the URI, and then instantiates the object if necessary,
      forwarding the method call to the object. If the object is registered as <see cref="System.Runtime.Remoting.WellKnownObjectMode.SingleCall"/>, it is destroyed
      after the method call is completed. A new instance of the object is created for
      each method called. The only difference between <see cref="System.Activator.GetObject" qualify="true"/>
      and <see langword="new"/> is that the former allows you to specify a URL as a
      parameter, and the latter obtains the URL from the configuration.</para>
			<para> The remote object itself is not instantiated by
      the registration process. This only happens when a client attempts to call a
      method on the object or activates the object from the client side. </para>
			<para>For a detailed description of well-known objects see
      <see topic="cpconServerActivation"/>.</para>
		</remarks>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. </exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="CreateObjRef2" SnippetID="2"/>
		</example>
		<seealso cref="System.Runtime.Remoting.WellKnownServiceTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.WellKnownClientTypeEntry"/>
	</doc>
	<doc for="RemotingConfiguration.Configure">
		<summary>
			<para>Reads the configuration file and configures the remoting infrastructure.</para>
		</summary>
		<param name="filename">The name of the remoting configuration file. Can be <see langword="null"/> . </param>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure Remoting types and channels.</exception>
		<remarks>
			<para> Passing <see langword="null"/> as the
<paramref name="filename "/>parameter will cause default remoting initialization without
   requiring the existence of a configuration file.</para>
			<para>For configuration file syntax, see <see topic="gnconremotingsettingsschema"/>
.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="RemotingConfiguration_Configure_Client" SnippetID="1"/>
		</example>
		<seealso topic="gnconremotingsettingsschema"/>
	</doc>
	<doc for="RemotingConfiguration.CustomErrorsEnabled">
		<summary>
			<para> Indicates whether the server channels in this application domain return filtered or
      complete exception information to local or remote callers.</para>
		</summary>
		<param name="isLocalRequest"><see langword="true"/> to specify local callers; <see langword="false"/> to specify remote callers. </param>
		<returns>
			<para><see langword="true "/>if only
   filtered exception information is returned to local or remote callers, as
   specified by the <paramref name="isLocalRequest"/> parameter;<paramref name=" "/>
				<see langword="false "/> if complete exception information is returned.</para>
		</returns>
		<remarks>
			<para>Complete exception information includes the exact server exception and the
      server stack trace. Filtered information includes a standard remoting exception
      but no server stack trace.</para>
			<para>The <see langword="CustomErrorsEnabled"/> method reflects
   configuration settings that were either specified in the <see langword="mode "/>
   attribute of the
<see langword="&lt;customErrors&gt;"/> element of the application configuration file 
   or set programmatically when the server channel was configured. For more information about
   configuration options, see <see topic="cpconconfiguration"/>
   .</para>
			<para>The following table describes the three server channel property values that specify which callers receive
   exception information and what type of information
   they receive.</para>
			<list type="table">
				<listheader>
					<term>Value</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="off"/></term>
					<description> All callers receive complete exception
      information.</description>
				</item>
				<item>
					<term><see langword="on"/></term>
					<description>All callers receive filtered exception information.</description>
				</item>
				<item>
					<term><see langword="remoteOnly"/></term>
					<description> Local callers receive complete exception information; remote
   callers receive filtered exception information.</description>
				</item>
			</list>
The following table describes the
interaction of the <paramref name="isLocalRequest "/>parameter and the server channel property. <list type="table">
				<listheader>
					<term> Value</term>
					<description>isLocalRequest</description>
					<description>Return Value</description>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="on"/></term>
					<description><see langword="true"/></description>
					<description><see langword="true"/></description>
					<description>Local callers receive filtered exception
   information.</description>
				</item>
				<item>
					<term><see langword="on"/></term>
					<description><see langword="false"/></description>
					<description><see langword="true"/></description>
					<description>Remote callers receive filtered exception information.</description>
				</item>
				<item>
					<term><see langword="off"/></term>
					<description><see langword="true"/></description>
					<description><see langword="false"/></description>
					<description>Local callers receive complete exception
   information.</description>
				</item>
				<item>
					<term><see langword="off"/></term>
					<description><see langword="false"/></description>
					<description><see langword="false"/></description>
					<description>Remote callers receive complete exception information.</description>
				</item>
				<item>
					<term><see langword="remoteOnly"/></term>
					<description><see langword="true"/></description>
					<description><see langword="false"/></description>
					<description>Local callers receive complete exception
   information.</description>
				</item>
				<item>
					<term><see langword="remoteOnly"/></term>
					<description><see langword="false"/></description>
					<description><see langword="true"/></description>
					<description>Remote callers receive filtered exception
   information.</description>
				</item>
			</list>
For details on using application configuration files to control the
return of exception information to callers, see the <see langword="&lt;customErrors&gt;"/> element. For
detailed information about programmatically controlling the return of exception
information, see <see topic="cpconprogrammaticconfiguration"/>.
</remarks>
	</doc>
	<doc for="RemotingConfiguration.GetRegisteredActivatedServiceTypes">
		<summary>
			<para> Retrieves an array of object types
      registered on the service end that can be activated on request from a
      client.</para>
		</summary>
		<returns>
			<para> An array of object types registered on the service end
      that can be activated on request from a client.</para>
		</returns>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure Remoting types and channels.</exception>
		<remarks>
			<para>For a detailed description of client activated objects
      see <see topic="cpconClientActivation"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="RemotingConfiguration_GetRegisteredActivatedServer_Client" SnippetID="2"/>
		</example>
		<seealso cref="System.Runtime.Remoting.ActivatedServiceTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.ActivatedClientTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/>
		<seealso cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/>
	</doc>
	<doc for="RemotingConfiguration.GetRegisteredWellKnownServiceTypes">
		<summary>
			<para>Retrieves an array of object types registered on the
      service end as well-known types.</para>
		</summary>
		<returns>
			<para>An array of object types registered on the service end as well-known
      types.</para>
		</returns>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure Remoting types and channels.</exception>
		<remarks>
			<para>Well-known object types can be either single call
      or singleton. If an object type is single call, then a new instance of it
      is created each time a call from the client comes in. All calls to a
      singleton object are handled by one instance of that object.</para>
			<para>For a more detailed description of well-known objects see
   <see topic="cpconServerActivation"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="RemotingConfiguration_Configure_Client" SnippetID="2"/>
		</example>
		<seealso cref="System.Runtime.Remoting.WellKnownServiceTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.WellKnownClientTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType"/>
		<seealso cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/>
	</doc>
	<doc for="RemotingConfiguration.GetRegisteredActivatedClientTypes">
		<summary>
			<para>Retrieves an array of object types registered on the
      client as types that will be activated remotely.</para>
		</summary>
		<returns>
			<para> An array of object types registered on the client as types that
      will be activated remotely.</para>
		</returns>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure Remoting types and channels.</exception>
		<remarks>
			<para>For a detailed description of client activated objects
      see <see topic="cpconClientActivation"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<seealso cref="System.Runtime.Remoting.ActivatedServiceTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.ActivatedClientTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/>
		<seealso cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/>
	</doc>
	<doc for="RemotingConfiguration.GetRegisteredWellKnownClientTypes">
		<summary>
			<para>Retrieves an array of object types registered on the
      client end as well-known types.</para>
		</summary>
		<returns>
			<para>An array of object types registered on the client end as well-known types.</para>
		</returns>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure Remoting types and channels.</exception>
		<remarks>
			<para>Well-known object types can be either single call or singleton. If an object
      type is single call, then a new instance of it is created each time a call from
      the client comes in. All calls to a singleton object are handled by one instance
      of that object.</para>
			<para>For a more detailed description of well-known objects see
   <see topic="cpconServerActivation"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="RemotingConfiguration_GetRegisteredWellKnownClient_Client" SnippetID="1"/>
		</example>
		<seealso cref="System.Runtime.Remoting.WellKnownClientTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.WellKnownServiceTypeEntry"/>
		<seealso cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType"/>
		<seealso cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/>
	</doc>
	<doc for="RemotingConfiguration.IsRemotelyActivatedClientType">
		<overload>
			<para>Checks whether the specified object type is registered as a remotely
      activated client type.</para>
		</overload>
		<summary>
			<para>Checks whether the specified object <see cref="System.Type"/> is registered as a
   remotely activated client type.</para>
		</summary>
		<param name="svrType">The object type to check.</param>
		<returns>
			<para>The <see cref="System.Runtime.Remoting.ActivatedClientTypeEntry"/> corresponding to the
   specified object type.</para>
		</returns>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure Remoting types and channels.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="RemotingConfiguration_IsRemotelyActivatedClientType1_Client" SnippetID="1"/>
		</example>
		<seealso topic="cpconClientActivation"/>
	</doc>
	<doc for="RemotingConfiguration.IsRemotelyActivatedClientType1">
		<summary>
			<para>Checks whether the object specified by its type name and
      assembly name is registered as a remotely activated client type.</para>
		</summary>
		<param name="typeName">The type name of the object to check.</param>
		<param name=" assemblyName">The assembly name of the object to check.</param>
		<returns>
			<para>The <see cref="System.Runtime.Remoting.ActivatedClientTypeEntry"/> corresponding to the specified object type.</para>
		</returns>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure Remoting types and channels.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="RemotingConfiguration_IsRemotelyActivatedClientType2_Client" SnippetID="1"/>
		</example>
		<seealso topic="cpconClientActivation"/>
	</doc>
	<doc for="RemotingConfiguration.IsWellKnownClientType">
		<overload>
			<para>Checks whether the specified object type is registered as a well-known client
      type.</para>
		</overload>
		<summary>
			<para>Checks whether the specified object <see cref="System.Type"/> is registered as a
   well-known client type.</para>
		</summary>
		<param name="svrType">The object <see cref="System.Type"/> to check.</param>
		<returns>
			<para>The <see cref="System.Runtime.Remoting.WellKnownClientTypeEntry"/> corresponding to the specified object type.</para>
		</returns>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure Remoting types and channels.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="RemotingConfiguration_IsWellKnownClientType1_Client" SnippetID="1"/>
		</example>
		<seealso topic="cpconServerActivation"/>
	</doc>
	<doc for="RemotingConfiguration.IsWellKnownClientType1">
		<summary>
			<para>Checks whether the object specified by its type name and
      assembly name is registered as a well-known client type.</para>
		</summary>
		<param name="typeName">The type name of the object to check.</param>
		<param name="assemblyName">The assembly name of the object to check.</param>
		<returns>
			<para>The <see cref="System.Runtime.Remoting.WellKnownClientTypeEntry"/> corresponding to the specified object type.</para>
		</returns>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure Remoting types and channels.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="RemotingConfiguration_IsWellKnownClientType2_Client" SnippetID="1"/>
		</example>
		<seealso topic="cpconServerActivation"/>
	</doc>
	<doc for="RemotingConfiguration.IsActivationAllowed">
		<summary>
			<para>Returns a Boolean value indicating whether the specified
   <see cref="System.Type"/> is allowed
      to be client activated.</para>
		</summary>
		<param name="svrType">The object <see cref="System.Type"/> to check.</param>
		<returns>
			<para><see langword="true"/> if the specified <see cref="System.Type"/> is allowed to be
   client activated; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.Security.SecurityException">At least one of the callers higher in the callstack does not have permission to configure Remoting types and channels.</exception>
		<remarks>
			<para>The current method is used at the server end to
      determine whether an activation of the object <see cref="System.Type"/> is explicitly allowed by the
      server.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="System.Security.Permissions.SecurityAction.Demand" qualify="true"/>; Permission value: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
		<example>
			<codelink SampleID="RemotingConfiguration_GetRegisteredActivatedServer_Client" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ActivatedClientTypeEntry">
		<summary>
			<para>Holds values for an object type registered on the client end as a type that
      can be activated on the server.</para>
		</summary>
		<remarks>
			<para>To create an instance of a client-activated object on the client, you must
      know its <see cref="System.Type"/>,
      and it must be registered on the client by using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/> method. To obtain
      a proxy for a new instance of the client-activated object the client must first
      register a channel with <see cref="System.Runtime.Remoting.Channels.ChannelServices"/> and then activate the object
      by calling <see langword="new"/>.</para>
			<para>To activate a client-activated object type with the <see langword="new"/> keyword,
   you must first register the object type on the client using the
<see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/> method. By calling <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/> you 
   are giving the Remoting infrastructure the location of the remote application
   where <see langword="new"/> attempts to create it. If, on the other hand, you use the
<see cref="System.Activator.CreateInstance" qualify="true"/> method to create a new instance of the client-activated 
   object, you must supply the remote application's URL as a parameter, so no prior
   registration on the client end is necessary. To supply the <see cref="System.Activator.CreateInstance" qualify="true"/> method with the URL of the server on which you
   want to create the object, you must encapsulate the URL in an instance of the
<see cref="System.Runtime.Remoting.Activation.UrlAttribute"/> class.</para>
			<para>For a detailed description of client activated objects and remote object activation
   see <see topic="cpconActivation"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="ActivatedClientTypeEntry_Client" SnippetID="1"/>
		</example>
		<seealso cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/>
		<seealso topic="cpconClientActivation"/>
	</doc>
	<doc for="ActivatedServiceTypeEntry">
		<summary>
			<para>Holds values for an object type registered on the
      service end as one that can be activated on request from a client.</para>
		</summary>
		<remarks>
			<para>The current class is used by the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType" qualify="true"/> method, which is the
   server-side counterpart of the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType" qualify="true"/> method. The
<see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/> method is used on the 
   server to allow remote activation by clients of specified object types.</para>
			<para>To create a client-activated object on the server, you must
   know its <see cref="System.Type"/>,
   and it must be registered on the server end by using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/> method. To obtain
   a proxy for a new client-activated object, the client must first
   register a channel with <see cref="System.Runtime.Remoting.Channels.ChannelServices"/> and then activate the object
   by calling <see langword="new"/> or <see cref="System.Activator.CreateInstance" qualify="true"/>.</para>
			<para>To activate a client-activated object type with the <see langword="new"/> keyword,
you must first register the object type on the client using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/> method. By calling
<see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType"/> you 
are giving the Remoting infrastructure the location of the remote application
where <see langword="new"/> attempts to create it. If, on the other hand, you use the
<see cref="System.Activator.CreateInstance"/> method to create a new instance of the client-activated 
object, you must supply the remote application's URL as a parameter, so no prior
registration on the client is necessary. To supply the <see cref="System.Activator.CreateInstance"/> method with the URL of the server on which you
want to create the object, you must encapsulate the URL in an instance of the
<see cref="System.Runtime.Remoting.Activation.UrlAttribute"/> class.</para>
			<para>For a detailed description of client-activated objects and remote object activation,
   see <see topic="cpconActivation"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="ActivatedServiceTypeEntry_ObjectType_Client" SnippetID="1"/>
		</example>
		<seealso cref="System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType"/>
		<seealso topic="cpconClientActivation"/>
	</doc>
	<doc for="ActivatedServiceTypeEntry.ContextAttributes">
		<summary>
			<para>Gets or sets the context attributes for the client-activated service type.</para>
		</summary>
		<value>
			<para>The context attributes for the client-activated service type.</para>
		</value>
		<remarks>
			<para>Context attributes provide context properties which when added to
      a context
      can enforce policies such as
      synchronization and transactions.</para>
			<note type="note">
      At the moment, this indexer is not
      implemented and operations on it will not produce any results.
      
   </note>
		</remarks>
		<seealso cref="T:System.Runtime.Remoting.Contexts.Context"/>
		<seealso cref="T:System.Runtime.Remoting.Contexts.ContextAttribute"/>
		<seealso cref="T:System.Runtime.Remoting.Contexts.ContextProperty"/>
		<seealso cref="T:System.Runtime.Remoting.Contexts.IContextAttribute"/>
	</doc>
	<doc for="WellKnownClientTypeEntry">
		<summary>
			<para> Holds values for an object type registered on the client as a server-activated type (single call or singleton).</para>
		</summary>
		<remarks>
			<para> Server-activated types can be either single call or singleton. If a class is registered as a single call type, a new instance is created each time a call from
      the client arrives. All calls to a singleton object are handled by one instance
      of that object, unless that object has been collected.</para>
			<para>Any client that knows the URI of a
      registered server-activated object can obtain a proxy for this object by registering
      the channel it prefers with <see cref="System.Runtime.Remoting.Channels.ChannelServices"/> and
      activating the object by calling <see langword="new"/> or <see cref="System.Activator.GetObject" qualify="true"/>. To activate a server-activated object with
   <see langword="new"/>, you must first register the server-activated object type on the
      client using the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/> method.
      By calling <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/>, you are giving the remoting infrastructure the location of the remote
      object, which allows the <see langword="new"/> keyword to create it. If, on the
      other hand, you use the <see cref="System.Activator.GetObject" qualify="true"/> method to activate a server-activated object, you
      must supply it with the object's URL as an argument, so no prior registration on
      the client is necessary.</para>
			<para>For a detailed description
      of server-activated objects and remote object activation, see
   <see topic="cpconActivation"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="WellKnownClientTypeEntry_Client" SnippetID="1"/>
		</example>
		<seealso cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType"/>
		<seealso topic="cpconServerActivation"/>
	</doc>
	<doc for="WellKnownServiceTypeEntry">
		<summary>
			<para> Holds values for an object type registered on the service end as a
      server-activated type object (single call or singleton).</para>
		</summary>
		<remarks>
			<para> server-activated object types can be either single call
      or singleton.
      If an object type is single call, a new instance of it is
      created each time a call from the client comes in. All calls to
      a singleton object are handled by one instance of that object. </para>
			<para> Any client that knows the URI of this object can obtain a proxy for this
      object by registering the channel it prefers with <see cref="System.Runtime.Remoting.Channels.ChannelServices"/> and activating the object by
      calling <see langword="new"/>or <see cref="System.Activator.GetObject" qualify="true"/>.</para>
			<para> It is important to
      note that the remote object itself is not created by the registration process. This only happens when
      a client attempts to call a method on the object or activates the object from
      the client side.</para>
			<para> For a more detailed description of server-activated objects and
      remote object activation, see <see topic="cpconActivation"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="WellKnownServiceTypeEntry_Server" SnippetID="1"/>
		</example>
		<seealso cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType"/>
		<seealso topic="cpconServerActivation"/>
	</doc>
</docs>
