<docs>
	<doc for="Context.SetData">
		<summary>
			<para>Sets 
       the data in the specified slot on the current context.</para>
		</summary>
		<param name=" slot">The data slot where the data is to be added.</param>
		<param name="data">The data that is to be added.</param>
	</doc>
	<doc for="Context.GetData">
		<summary>
			<para>
				Retrieves 
          the value from the specified slot on the current context.
			</para>
		</summary>
		<param name="slot">
       The data slot that contains the data
    </param>
		<returns>
			<para>
          Returns the data associated with the DataSlot provided
       </para>
		</returns>
	</doc>
	<doc for="CrossContextDelegate">
		<summary>
			<para>Represents the method that will handle the requests of execution of some code in another context.</para>
		</summary>
		<remarks>
			<para>Callbacks provide a facility to request execution of some code in another
      context. <see cref="System.Runtime.Remoting.Contexts.CrossContextDelegate"/> type is defined for context call
      backs. Each context has a callback object which can be used to perform
      callbacks on the context. The delegate used to request a callback through
      the callback object must be of <see cref="System.Runtime.Remoting.Contexts.CrossContextDelegate"/> type. </para>
		</remarks>
	</doc><doc for="Context">
		<summary>
			<para>Defines an environment for the objects that are resident inside it and for which a policy can be enforced.</para>
		</summary>
		<remarks>
			<para>A context is an ordered sequence of properties that define an environment for
      the objects resident inside it. Contexts get created during the activation
      process for objects that are configured to require certain automatic services
      such synchronization, transactions, just-in-time activation, security, and so on.
      Multiple objects can live inside a context.</para>
			<para>Classes are marked with <see cref="System.Runtime.Remoting.Contexts.ContextAttribute"/>, which
   provide the usage rules. Whenever a new object is instantiated, the
   .NET Framework finds a compatible or creates a new <see cref="System.Runtime.Remoting.Contexts.Context"/>
   for the object. Once an object is placed in a context,
   it stays in it for life. Classes that can be bound to
   a context are called context-bound classes. When accessed from another context such classes are
   referenced directly using a proxy. Any call from an object in one
   context to an object in another context will go through a context proxy and be
   affected by the policy that the combined context properties enforce.</para>
			<para>A new object's context is generally chosen based on meta-data attributes on
   the class. This mechanism is extensible through custom attributes. These are known
   as static context properties, which are compiled into the class meta-data.
   Dynamic (also known as configuration) context properties can be applied and
   configured by administrators.</para>
For more
information on contexts see <see topic="cpconboundariesprocessesapplicationdomainscontexts"/>.
</remarks>
	</doc><doc for="Context.SetProperty">
		<summary>
			<para> Sets a specific context property by name.</para>
		</summary>
		<param name="prop">Actual context property.</param>
		<exception cref="System.InvalidOperationException">There is an attempt to add properties to the default context.</exception>
		<exception cref="System.InvalidOperationException">The context is frozen.</exception>
		<exception cref="System.ArgumentNullException">The property or the property name is <see langword="null"/> .</exception>
		<remarks>
			<para>Adding properties to the default context is not allowed.</para>
		</remarks>
	</doc><doc for="Context.AllocateDataSlot">
		<summary>
			<para> Allocates an un-named data slot.</para>
		</summary>
		<returns>
			<para> A local data slot.</para>
		</returns>
		<remarks>
			<para> The slot is allocated on all the contexts.</para>
		</remarks>
	</doc><doc for="Context.AllocateNamedDataSlot">
		<summary>
			<para>Allocates a
 named data slot.</para>
		</summary>
		<param name="name">The required for the data slot.</param>
		<returns>
			<para>A local data slot object.</para>
		</returns>
		<remarks>
			<para> The slot is allocated on all the contexts.
 Named data slots
 are "public" and can be manipulated by anyone.</para>
		</remarks>
	</doc><doc for="Context.FreeNamedDataSlot">
		<summary>
			<para> Frees a named data slot on all the contexts.
 
 </para>
		</summary>
		<param name="name">The name of the data slot to free.</param>
		<remarks>
			<para>Named data slots are "public" and can be manipulated by anyone.</para>
		</remarks>
	</doc><doc for="Context.Context">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Contexts.Context"/> 
class.</para>
		</summary>
	</doc><doc for="Context.Finalize">
		<summary>
			<para> Cleans up the backing objects for the nondefault
      contexts.</para>
		</summary>
		<remarks>
			<para> For
      default contexts backing objects are cleaned up during <see cref="System.AppDomain"/> shutdown.</para>
		</remarks>
	</doc><doc for="Context.ContextID">
		<summary>
			<para> Gets the context ID for the current <see cref="System.Runtime.Remoting.Contexts.Context"/>.
   </para>
		</summary>
		<value>
			<para> The context ID for the current <see cref="System.Runtime.Remoting.Contexts.Context"/>.
   </para>
		</value>
	</doc><doc for="Context.DefaultContext">
		<summary>
			<para>Gets the default context for the current <see cref="System.AppDomain"/> .</para>
		</summary>
		<value>
			<para> The default context for the <see cref="System.AppDomain"/> .</para>
		</value>
		<remarks>
			<para>Every thread in an application domain for which a context is not
      explicitly set is considered to be running in the default context.</para>
		</remarks>
	</doc><doc for="Context.GetProperty">
		<summary>
			<para>Returns a specific context property specified by name.</para>
		</summary>
		<param name="name">The name of the property</param>
		<returns>
			<para>The specified context property.</para>
		</returns>
	</doc><doc for="Context.Freeze">
		<summary>
			<para> Freezes the context, making it impossible to add or 
      remove context properties from the current <see cref="System.Runtime.Remoting.Contexts.Context"/> .</para>
		</summary>
		<exception cref="System.InvalidOperationException">The <see cref="System.Runtime.Remoting.Contexts.Context"/> is already frozen.</exception>
		<remarks>
			<para>Context properties cannot be added after the context has been frozen.</para>
		</remarks>
	</doc><doc for="Context.ToString">
		<summary>
			<para>Returns a <see cref="System.String"/> representation 
   of the current context.</para>
		</summary>
		<returns>
			<para>A <see cref="System.String"/> representation of the current context.</para>
		</returns>
	</doc><doc for="Context.DoCallBack">
		<summary>
			<para> Executes code in another <see cref="System.Runtime.Remoting.Contexts.Context"/> .</para>
		</summary>
		<param name="deleg">The delegate used to request the callback.</param>
		<remarks>
			<para>A callback can be done by calling the <see cref="System.Runtime.Remoting.Contexts.Context.DoCallBack"/> method on it by passing in a delegate.
   The delegate is used to request a callback. The delegate must be of type <see cref="System.Runtime.Remoting.Contexts.CrossContextDelegate"/>.</para>
		</remarks>
	</doc><doc for="Context.GetNamedDataSlot">
		<summary>
			<para>Looks up a named data slot.</para>
		</summary>
		<param name="name">The data slot name.</param>
		<returns>
			<para>Retruns a LocalDataSlot.</para>
		</returns>
		<remarks>
			<para>If the name has not been used, a new slot is allocated.
      Named
      data slots are "public" and can be manipulated by anyone.</para>
		</remarks>
	</doc><doc for="Context.ContextProperties">
		<summary>
			<para>Gets the array of current context properties.</para>
		</summary>
		<value>
			<para> The current context properties array, of
   <see langword="null"/> if the context does
      not have any properties attributed to
      it.</para>
		</value>
	</doc><doc for="Context.RegisterDynamicProperty">
		<summary>
			<para>Registers a dynamic property implementing <see cref="System.Runtime.Remoting.Contexts.IDynamicProperty"/> 
interface with the remoting service.</para>
		</summary>
		<param name=" prop">The dynamic property to register.</param>
		<param name=" obj"><para>The object/proxy for which the property is registered.</para></param>
		<param name="ctx">The context for which the property is registered.</param>
		<returns>
			<para><see langword="true "/>if the
   property was successfully registered;
   otherwise, <see langword="false"/> .</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="prop"/> parameter or<see langword=""/>its name is <see langword="null"/>, or it is not dynamic (it does not implement <see cref="System.Runtime.Remoting.Contexts.IDynamicProperty"/>).</exception>
		<exception cref="System.ArgumentException">Both an object as well as a context are specified (both <paramref name="obj"/> and <paramref name="ctx"/> parameters are not <see langword="null"/> ).</exception>
		<remarks>
			<para>Based on the <paramref name="obj"/> and <paramref name="ctx"/>
parameters, the property is
asked to contribute a sink that is placed at some location in the path of
remoting calls. If multiple
properties are registered, their sinks will be called in an arbitrary order that
can change between calls.</para>
			<para>If the
<paramref name="obj"/> parameter is not <see langword="null"/> then if it is a proxy, 
   all calls made on the proxy are intercepted. Otherwise, if <paramref name="obj "/>is
   a real object, all calls on the object are intercepted. The <paramref name="ctx
   "/>
   
   argument must be null.</para>
			<para>If
   the
<paramref name="ctx "/>parameter is not <see langword="null "/>then the <paramref name="obj 
   "/>parameter must be <see langword="null "/>
   and all calls entering and
   leaving the context are intercepted.</para>
			<para>If both <paramref name="ctx"/> and
<paramref name="obj"/> parameters are <see langword="null"/>, then all calls entering and leaving all contexts are
intercepted.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for pluging code into the common language runtime infrastructure. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/>.</permission>
	</doc><doc for="Context.UnregisterDynamicProperty">
		<summary>
			<para>Unregisters a dynamic property implementing
   <see cref="System.Runtime.Remoting.Contexts.IDynamicProperty"/>.</para>
		</summary>
		<param name=" name">The name of the dynamic property to unregister.</param>
		<param name=" obj">The object/proxy for which the property is registered.</param>
		<param name="ctx">The context for which the property is registered.</param>
		<returns>
			<para><see langword="true "/>if the object was successfully unregistered;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name "/>parameter is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentException">Both an object as well as a context are specified (both <paramref name="obj"/> and <paramref name="ctx"/> parameters are not <see langword="null"/> ).</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for pluging code into the common language runtime infrastructure. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.Infrastructure" qualify="true"/>.</permission>
	</doc></docs>
