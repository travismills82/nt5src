<docs>
	<doc for="FormatterServices">
		<summary>
			<para> Provides static methods to aid with the implementation of a <see cref="System.Runtime.Serialization.Formatter"/> for
 serialization. This class cannot be inherited.</para>
		</summary>
		<seealso cref="System.Runtime.Serialization.Formatter"/>
		<seealso topic="cpconserialization"/>
	</doc><doc for="FormatterServices.GetSerializableMembers">
		<overload>
			<para> Returns all the serializable members for a
      particular class.</para>
		</overload>
		<summary>
			<para> Gets all the serializable members for a class of the
      specified <see cref="System.Type"/> .</para>
		</summary>
		<param name="type">The type being serialized.</param>
		<returns>
			<para>An array of type <see cref="System.Reflection.MemberInfo"/>
of the nontransient,
nonstatic members.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="type"/> parameter is <see langword="null"/> .</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para> Generally, the serializable members
      of a class are the nontransient, nonstatic members such as fields
      and properties. To be included, properties must have both a getter and a setter.
      A class that implements the <see cref="System.Runtime.Serialization.ISerializable"/>
      interface or has a serialization surrogate does not have to
      serialize all these members, or can serialize additional members.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>, <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<seealso topic="cpconserialization"/>
		<seealso cref="System.Runtime.Serialization.ISerializable"/>
		<seealso cref="System.Reflection.MemberInfo"/>
	</doc>
	<doc for="FormatterServices.GetSerializableMembers1">
		<summary>
			<para> Gets all the serializable members for a class of the specified
   <see cref="System.Type"/> and in the
      provided <see cref="System.Runtime.Serialization.StreamingContext"/> .</para>
		</summary>
		<param name="type">The type being serialized or cloned.</param>
		<param name="context">The context where the serialization is occurring.</param>
		<returns>
			<para>An array of type <see cref="System.Reflection.MemberInfo"/> of the nontransient, nonstatic members.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="type"/> parameter is <see langword="null"/>. </para></exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para> Generally, the serializable members of a class
      are the nontransient, nonstatic members such as fields and properties. To
      be included, properties must have both a getter and a setter. A class that
      implements <see cref="System.Runtime.Serialization.ISerializable"/> or has
      a serialization surrogate does
      not have to serialize all these members, or can serialize additional members.</para>
			<para>Currently, you do not need to do anything different unless <paramref name="context "/>has the <see cref="System.Runtime.Serialization.StreamingContextStates"/> value
<see cref="System.Runtime.Serialization.StreamingContextStates.Clone"/> set.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>, <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<seealso cref="System.Runtime.Serialization.StreamingContext"/>
		<seealso topic="cpconserialization"/>
		<seealso cref="System.Reflection.MemberInfo"/>
	</doc>
	<doc for="FormatterServices.GetTypeFromAssembly">
		<summary>
			<para>Looks up the <see cref="System.Type"/> of the specified object in the provided <see cref="System.Reflection.Assembly"/>.</para>
		</summary>
		<param name="assem">The assembly where you want to look up the object.</param>
		<param name=" name">The name of the object.</param>
		<returns>
			<para>The <see cref="System.Type"/> of the object.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="assem"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>, <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for extraction of reflection information on members of a type that are not visible. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.TypeInformation" qualify="true"/>.</permission>
		<seealso cref="System.Reflection.Assembly.GetType" qualify="true"/>
	</doc>
	<doc for="FormatterServices.GetUninitializedObject">
		<summary>
			<para>Creates a new instance of the specified object type.</para>
		</summary>
		<param name="type">The type of object to create.</param>
		<returns>
			<para>A
      zeroed object of the specified type.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="type"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para> Because the new instance of the object is initialized to zero and
      no constructors are run, the object might not represent a state that is regarded as
      valid by that object. The current method should only be used for deserialization when
      the user intends to immediately populate all fields. It will not create an
      uninitialized string, since creating an empty instance of an immutable type serves
      no purpose.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>, <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
	</doc>
	<doc for="FormatterServices.PopulateObjectMembers">
		<summary>
			<para>Populates the specified object with values for each field drawn
      from the data array of objects.</para>
		</summary>
		<param name="obj">The object to populate.</param>
		<param name="members">An array of <see cref="System.Reflection.MemberInfo"/> describing which fields and properties to populate.</param>
		<param name="data">An array of <see cref="System.Object"/> specifying the values for each field and property to populate.</param>
		<returns>
			<para>The newly populated object.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="obj"/>, <paramref name="members"/>, or <paramref name="data"/> parameter is <see langword="null"/> .</para>
			<para>An element of <paramref name="members"/> is <see langword="null"/>. </para></exception>
		<exception cref="System.ArgumentException">The length of <paramref name="members"/> does not match the length of <paramref name="data"/> .</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element of <paramref name="members"/> is not an instance of <see cref="System.Reflection.FieldInfo"/> .</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para> If a matching surrogate for the object is found, then the
      populating is handed off to that surrogate. Otherwise, if the object implements
   <see cref="System.Runtime.Serialization.ISerializable"/>, the
      populating is handed off to the object itself. If a matching surrogate is not
      found, and the object does not implement the <see cref="System.Runtime.Serialization.ISerializable"/>
      interface, then deserialization
      populates each field listed in <paramref name="members"/>, with the corresponding value
      listed in <paramref name="data"/>.</para>
			<para>If an element in <paramref name="data"/> is <see langword="null"/>, <see cref="System.Runtime.Serialization.FormatterServices.PopulateObjectMembers"/>
does not write anything to that field.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>, <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
	</doc>
	<doc for="FormatterServices.GetObjectData">
		<summary>
			<para>Extracts the data from the specified object and
      returns it as an array
      of objects.</para>
		</summary>
		<param name="obj">The object to write to the formatter.</param>
		<param name="members">The members to extract from the object.</param>
		<returns>
			<para>An array of <see cref="System.Object"/> containing data stored in <paramref name="members"/> and associated with <paramref name="obj"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="obj"/> or <paramref name="members"/> parameter is <see langword="null"/> .</para><para>An element of <paramref name="members"/> is <see langword="null"/>. </para></exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element of <paramref name="members"/> does not represent a field.</exception>
		<remarks>
			<para>For each supplied member of the <paramref name="members
      "/> array the <see cref="System.Runtime.Serialization.FormatterServices.GetObjectData"/> method extracts
      the value associated with the <paramref name="obj"/> object, and returns it.
      The length of the returned array is the same as the length of the
   <paramref name="members"/> array.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>, <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
	</doc>
	<doc for="FormatterServices.CheckTypeSecurity">
		<summary>
			<para>Determines whether the specified <see cref="System.Type"/> can be deserialized with the
<see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel"/> property set to 
<see langword="Low"/>.</para>
		</summary>
		<param name="t">The <see cref="System.Type"/> to check for the ability to deserialize.</param>
		<param name=" securityLevel">The <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel"/> property value.</param>
		<exception cref="System.SecurityException">The <paramref name="t"/> parameter is an advanced type and cannot be deserialized when the <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel"/> property is set to <see langword="Low"/>.</exception>
		<remarks>
			<para>Use this method to determine whether a specified type can be deserialized
      when the <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel"/> property is set to
   <see langword="Low"/>.</para>
			<para> 
      
      .NET remoting provides two levels of automatic deserialization, <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Low"/> and
   <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Full"/>.
   <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Low"/>
   protects against deserialization attacks by deserializing only the types
   associated with the most basic remoting functionality. The <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Full"/>
   deserialization level supports automatic deserialization of all types that
   remoting supports in all situations. For more information about the .NET remoting types that
<see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Low"/> and 
<see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Full"/> 
support, see <see topic="cpconAutomaticDeserializationInNETRemoting"/>.</para>
		</remarks>
		<seealso topic="cpconAutomaticDeserializationInNETRemoting"/>
	</doc>
	<doc for="FormatterServices.GetSafeUninitializedObject">
		<summary>
			<para> Creates a new instance of the specified object type.</para>
		</summary>
		<param name="type">The type of object to create.</param>
		<returns>
			<para>A zeroed object of the specified type.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="type"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.SerializationException">The <paramref name="type"/> parameter is not a valid common language runtime type.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>Because the new instance of the object is initialized to
      zero and no constructors are run, the object might not represent a state that is
      regarded as valid by that object. <see cref="System.Runtime.Serialization.FormatterServices.GetSafeUninitializedObject"/>
      should only be used for deserialization
      when the user intends to immediately populate all fields. It will not create an
      uninitialized string, since creating an empty instance of an immutable type
      serves no purpose.</para>
			<para><see cref="System.Runtime.Serialization.FormatterServices.GetSafeUninitializedObject"/> converts all
   class level <see topic="cpconLinkDemands"/> to <see topic="cpconDemands"/>
   to ensure that all direct and indirect
   callers have the permissions that the demand specifies. Use
<see cref="System.Runtime.Serialization.FormatterServices.GetSafeUninitializedObject"/> to increase the level 
   of security when deserializing from a partially trusted source. For better
   performance in full trust scenarios, you can use <see cref="System.Runtime.Serialization.FormatterServices.GetUninitializedObject"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumerations: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>, <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
	</doc>
</docs>
