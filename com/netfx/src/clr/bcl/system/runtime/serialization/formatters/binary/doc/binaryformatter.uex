<docs>
	<doc for="BinaryFormatter.Deserialize2">
		<summary>
			<para>Internal method...</para>
		</summary>
		<param name="serializationStream">The stream from which to deserialize the object graph.</param>
		<param name=" handler">The <see cref="System.Runtime.Remoting.Messaging.HeaderHandler"/> that handles any headers in the <paramref name="serializationStream"/>. Can be <see langword="null"/>.</param>
		<param name=" fCheck"></param>
		<returns>
			<para>The deserialized object or the top object in the object
      graph (root).</para>
		</returns>
		<remarks>
			<para>Headers are used only for specific remoting applications. Because this
      feature is not implemented yet, you should supply <see langword="null"/> for the
   <paramref name="handler"/> argument.</para>
		</remarks>
	</doc><doc for="BinaryFormatter.Context">
		<summary>
			<para> Gets or sets the <see cref="System.Runtime.Serialization.StreamingContext"/>
for this formatter.</para>
		</summary>
		<value>
			<para> The streaming context to use with this formatter.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Runtime.Serialization.StreamingContext"/> provides an
 enumeration that describes the source and the destination for a given serialized
 stream, as well as a way for serialization to retain that context and an
 additional caller-defined context.</para>
		</remarks>
		<seealso cref="System.Runtime.Serialization.StreamingContext"/>
	</doc><doc for="BinaryFormatter.TypeFormat">
		<summary>
			<para>Gets or sets the format in which type descriptions are laid out in the serialized
 stream.</para>
		</summary>
		<value>
			<para>The style of type layouts to use.</para>
		</value>
		<seealso cref="System.Runtime.Serialization.Formatters.FormatterTypeStyle"/>
	</doc><doc for="BinaryFormatter.AssemblyFormat">
		<summary>
			<para>Gets or sets the format in which assembly names are serialized.</para>
		</summary>
		<value>
			<para>The style of assembly names to use in this formatter.</para>
		</value>
		<seealso cref="System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"/>
	</doc><doc for="BinaryFormatter.SurrogateSelector">
		<summary>
			<para>Gets or sets an <see cref="System.Runtime.Serialization.ISurrogateSelector"/> that controls type substitution
 during serialization and deserialization.</para>
		</summary>
		<value>
			<para> The surrogate selector to use with this formatter.</para>
		</value>
		<remarks>
			<para>The surrogate selector is used by <see cref="System.Runtime.Remoting"/> to generate <see cref="System.Runtime.Remoting.ObjRef"/> instances for objects that derive 
 from <see cref="System.MarshalByRefObject"/>.</para>
		</remarks>
		<seealso cref="System.Runtime.Serialization.SurrogateSelector"/>
	</doc><doc for="BinaryFormatter.BinaryFormatter1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> class with a given surrogate
   selector and streaming context.</para>
		</summary>
		<param name="selector">The <see cref="System.Runtime.Serialization.ISurrogateSelector"/> to use. Can be <see langword="null"/>.</param>
		<param name="context">The source and destination for the serialized data.</param>
		<remarks>
			<para>Initializes a new <see langword="BinaryFormatter"/> for serialization
   or deserialization of objects from the specified <see cref="System.IO.Stream"/>.</para>
			<para> The serialization or deserialization process uses the
   specified <see cref="System.Runtime.Serialization.ISurrogateSelector"/> to search for surrogates that are registered for the object
   types you want to deserialize. Surrogates are helpers that serialize and deserialize
   objects of specific classes. The default <see cref="System.Runtime.Serialization.ISurrogateSelector"/>
   cannot handle the serialization of objects that derive from the <see cref="System.MarshalByRefObject"/> for remoting purposes. In
   a remoting situation the specified <see cref="System.Runtime.Serialization.ISurrogateSelector"/>
   replaces the object derived from <see cref="System.MarshalByRefObject"/>
   with an <see cref="System.Runtime.Remoting.ObjRef"/> object that is serialized by the
   specified surrogate selector. Therefore, if you want to use remote objects, set the
<paramref name="selector"/> parameter to an instance of <see cref="System.Runtime.Remoting.Messaging.RemotingSurrogateSelector"/> . 
   If you do
   not need surrogates, set the <paramref name="selector "/>argument
   to be <see langword="null"/> .</para>
		</remarks>
	</doc><doc for="BinaryFormatter.FilterLevel">
		<summary>
			<para>Gets or sets the <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel"/> of 
   automatic deserialization the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>
   performs.</para>
		</summary>
		<value>
			<para>The <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel"/> representing the 
   current automatic deserialization level.</para>
		</value>
		<remarks>
			<para>Supported values are <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Low"/> and 
<see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Full"/> (the default). For 
   details about deserialization levels, see
<see topic="cpconAutomaticDeserializationInNETRemoting"/>.</para>
		</remarks>
		<seealso topic="cpconAutomaticDeserializationInNETRemoting"/>
	</doc>
	<doc for="BinaryFormatter.Deserialize1">
		<summary>
			<para> Deserializes the specified
      stream into an object graph. The provided <see cref="System.Runtime.Remoting.Messaging.HeaderHandler"/> handles any headers in that
      stream.</para>
		</summary>
		<param name="serializationStream">The stream from which to deserialize the object graph.</param>
		<param name=" handler">The <see cref="System.Runtime.Remoting.Messaging.HeaderHandler"/> that handles any headers in the <paramref name="serializationStream"/>. Can be <see langword="null"/>.</param>
		<returns>
			<para>The deserialized object or the top object (root) of the object graph.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="serializationStream"/> is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">The <paramref name="serializationStream"/> supports seeking, but its length is 0.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>Headers are used only for specific remoting
      applications.</para>
			<note type="note">
      In order for deserialization to
      succeed the current position in the stream must be at the beginning of the
      object graph.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>.</permission>
	</doc>
	<doc for="BinaryFormatter.DeserializeMethodResponse">
		<summary>
			<para>Deserializes a response to a remote method call from the
      provided <see cref="System.IO.Stream"/>
      . </para>
		</summary>
		<param name="serializationStream">The stream from which to deserialize the object graph.</param>
		<param name=" handler">The <see cref="System.Runtime.Remoting.Messaging.HeaderHandler"/> that handles any headers in the <paramref name="serializationStream"/>. Can be <see langword="null"/>.</param>
		<param name=" methodCallMessage">The <see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage"/> containing details about where the call came from.</param>
		<returns>
			<para>The deserialized response to the remote method call.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="serializationStream"/> is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">The <paramref name="serializationStream"/> supports seeking, but its length is 0.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para> Details about the caller object are not
      sent to the remote object during the method call. Instead, these details
      are obtained from the original method call that is passed to the
      current method in the <paramref name="methodCallMessage"/> parameter.</para>
			<note type="note">
      In order for deserialization to
      succeed the current position in the stream must be at the beginning of the
      object graph.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>.</permission>
	</doc>
	<doc for="BinaryFormatter.UnsafeDeserialize">
		<summary>
			<para>Deserializes the specified stream into an object graph. The provided <see cref="System.Runtime.Remoting.Messaging.HeaderHandler"/>
handles any headers in that
stream.</para>
		</summary>
		<param name="serializationStream">The stream from which to deserialize the object graph.</param>
		<param name=" handler">The <see cref="System.Runtime.Remoting.Messaging.HeaderHandler"/> that handles any headers in the <paramref name="serializationStream"/>. Can be <see langword="null"/>.</param>
		<returns>
			<para>The deserialized object or the top object (root) of the object graph.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="serializationStream"/> is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">The <paramref name="serializationStream"/> supports seeking, but its length is 0.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>Headers are used only for specific remoting applications.</para>
			<para>This method uses <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/> to prevent it from
   being called from untrusted code; only the immediate caller is required to have
<see cref="System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter" qualify="true"/> 
permission. Do not use this method if your code can be called from partially trusted code. In partially
trusted scenarios, use <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize"/>
instead. In full trust scenarios, <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.UnsafeDeserialize"/> provides better
performance than <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize"/>
.</para>
			<para><see langword="Note[note]"/> For successful
deserialization, the current position in the stream must be at the beginning of
the object graph.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>.</permission>
	</doc>
	<doc for="BinaryFormatter.UnsafeDeserializeMethodResponse">
		<summary>
			<para>Deserializes a response to a remote method call from the
      provided <see cref="System.IO.Stream"/> .</para>
		</summary>
		<param name="serializationStream">The stream from which to deserialize the object graph.</param>
		<param name=" handler">The <see cref="System.Runtime.Remoting.Messaging.HeaderHandler"/> that handles any headers in the <paramref name="serializationStream"/>. Can be <see langword="null"/>.</param>
		<param name=" methodCallMessage">The <see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage"/> containing details about where the call came from.</param>
		<returns>
			<para>The deserialized response to the remote method call.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="serializationStream"/> is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">The <paramref name="serializationStream"/> supports seeking, but its length is 0.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para> Details about the caller object are not sent to the remote
      object during the method call. Instead, these details are obtained from the
      original method call that is passed to the current method in the
   <paramref name="methodCallMessage"/> parameter.</para>
			<para>This method uses <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/> to prevent it from
   being called from untrusted code; only the immediate caller is required to have
<see cref="System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter" qualify="true"/> 
permission. Do not use this method if your code can be called from partially
trusted code. In partially trusted scenarios, use <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.DeserializeMethodResponse"/>
instead. In full trust scenarios, <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.UnsafeDeserializeMethodResponse"/> provides better
performance than <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.DeserializeMethodResponse"/>.</para>
			<para><see langword="Note[note]"/> For successful
deserialization, the current position in the stream must be at the beginning of
the object graph.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>.</permission>
	</doc>
	<doc for="BinaryFormatter.Serialize1">
		<summary>
			<para>Serializes the object, or graph of objects with the
      specified top (root), to the given stream attaching the provided headers.</para>
		</summary>
		<param name="serializationStream">The stream to which the object is to be serialized.</param>
		<param name="graph">The object at the root of the graph to serialize.</param>
		<param name="headers">Remoting headers to include in the serialization. Can be <see langword="null"/>.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="serializationStream"/> is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An error has occurred during serialization, such as if an object in the <paramref name="graph"/> parameter is not marked as serializable.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para> The serialization process includes the information supplied in the
   <paramref name="headers"/> parameter at the front of the serialized stream.</para>
			<note type="note">
      Headers are used only for specific remoting
      applications.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>.</permission>
	</doc>
	<doc for="BinaryFormatter">
		<summary>
			<para> Serializes and deserializes an object,
      or an entire graph of connected objects, in binary format.</para>
		</summary>
		<remarks>
			<para>The <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter"/> and <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> classes
   implement the <see cref="System.Runtime.Remoting.Messaging.IRemotingFormatter"/> interface to support remote
   procedure calls (RPCs),
   and the <see cref="System.Runtime.Serialization.IFormatter"/> interface (inherited by the
<see cref="System.Runtime.Remoting.Messaging.IRemotingFormatter"/>) to support serialization
   of a graph of objects. The <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter"/>
   class also supports RPCs with <see cref="System.Runtime.Serialization.Formatters.ISoapMessage"/>
   objects, without using the <see cref="System.Runtime.Remoting.Messaging.IRemotingFormatter"/>
   functionality. </para>
			<para>During RPCs, the <see cref="System.Runtime.Remoting.Messaging.IRemotingFormatter"/>
interface allows the specification of two separate object graphs: the graph of
objects to serialize, and an additional graph containing an array of header
objects that convey information about the remote function call (for example,
transaction ID or a method signature). </para>
			<para>RPCs that use the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>
separate into two distinct parts: method calls, which are sent to the
server with the remote object containing the method called, and method
responses, which are sent from the server to the client with the status and
response information from the called method. </para>
			<para>During serialization of a method call the first object
   of the object graph must support the <see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage"/>
   interface. To deserialize a method call, use the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize"/> method with the
<see cref="System.Runtime.Remoting.Messaging.HeaderHandler"/> 
parameter. The remoting infrastructure uses the <see cref="System.Runtime.Remoting.Messaging.HeaderHandler"/> delegate to produce an object
that supports the <see cref="System.Runtime.Serialization.ISerializable"/>
interface. When the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> invokes the
<see cref="System.Runtime.Remoting.Messaging.HeaderHandler"/> 
delegate, it returns the URI of
the remote object with the method that
is being called. The first object in the graph returned supports the <see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage"/> interface. </para>
			<para>The serialization procedure for a method response is
   identical to that of a method call, except the first object of the object graph
   must support the <see cref="System.Runtime.Remoting.Messaging.IMethodReturnMessage"/>
   interface. To deserialize a method response, use the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.DeserializeMethodResponse"/>
   method. To save time, details about the caller object are not sent to the remote
   object during the method call. These details are instead obtained from the
   original method call, which is passed to the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.DeserializeMethodResponse"/> method in the
<see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage"/> parameter. The first 
   object in the graph returned by the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.DeserializeMethodResponse"/>
   method supports the <see cref="System.Runtime.Remoting.Messaging.IMethodReturnMessage"/>
   interface. </para>
		</remarks>
		<example>
			<codelink SampleID="BinaryFormatterClass Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="BinaryFormatter.Binder">
		<summary>
			<para>Gets or sets an object of type <see cref="System.Runtime.Serialization.SerializationBinder"/> that controls the binding
   of a serialized object to a type.</para>
		</summary>
		<value>
			<para> The serialization binder to use with this formatter.</para>
		</value>
		<example>
			<codelink SampleID="SerializationBinder Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Runtime.Serialization.SerializationBinder"/>
	</doc>
	<doc for="BinaryFormatter.BinaryFormatter">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> class with default values.</para>
		</summary>
		<remarks>
			<para>This constructor sets the properties of the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> object as
   follows:</para>
			<list type="table">
				<listheader>
					<term>Property Type</term>
					<description>Condition</description>
				</listheader>
				<item>
					<term><see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.SurrogateSelector"/></term>
					<description><see langword="null"/>.</description>
				</item>
				<item>
					<term><see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Context"/></term>
					<description>A
<see cref="System.Runtime.Serialization.StreamingContext"/> with a value indicating that serialized data can be transmitted to or received from any of the other contexts. (<see cref="System.Runtime.Serialization.StreamingContextStates.All" qualify="true"/>).</description>
				</item>
			</list>
		</remarks>
		<example>
			<codelink SampleID="BinaryFormatterClass Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="BinaryFormatter.Deserialize">
		<overload>
			<para>Deserializes a stream into an object graph.</para>
		</overload>
		<summary>
			<para>Deserializes the specified stream into an object graph.</para>
		</summary>
		<param name="serializationStream">The stream from which to deserialize the object graph.</param>
		<returns>
			<para>The top (root) of the object graph.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="serializationStream"/> is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">The <paramref name="serializationStream"/> supports seeking, but its length is 0.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<note type="note">
      For successful deserialization, the current
      position in the stream must be at the beginning of the object
      graph.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="BinaryFormatterClass Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="BinaryFormatter.Serialize">
		<overload>
			<para>Serializes an object, or graph of connected objects, to the given stream.</para>
		</overload>
		<summary>
			<para> Serializes the object, or graph of objects with the specified top (root),
      to the given stream.</para>
		</summary>
		<param name="serializationStream">The stream to which the graph is to be serialized.</param>
		<param name="graph">The object at the root of the graph to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="serializationStream"/> is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An error has occurred during serialization, such as if an object in the <paramref name="graph"/> parameter is not marked as serializable.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="BinaryFormatterClass Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
