<docs>
	<doc for="FormatterTypeStyle">
		<summary>
    Indicates the format in which type descriptions are laid
    out in the serialized stream.
 </summary>
	</doc>
	<doc for="FormatterAssemblyStyle">
		<summary>
			<para>Indicates the format in which assembly names are serialized.</para>
		</summary>
	</doc>
	<doc for="FormatterAssemblyStyle.Simple">
		<summary>
			<para> Simple assembly name format.</para>
		</summary>
	</doc><doc for="FormatterAssemblyStyle.Full">
		<summary>
			<para>Full assembly name format.</para>
		</summary>
	</doc><doc for="FormatterTypeStyle.TypesWhenNeeded">
		<summary>
			<para>Indicates that types can be stated only for arrays of objects, object
 members of type <see cref="System.Object"/>, and <see cref="System.Runtime.Serialization.ISerializable"/> nonprimitive
 value types.</para>
		</summary>
	</doc><doc for="FormatterTypeStyle.TypesAlways">
		<summary>
			<para>Indicates that types can be given to all object
 members and <see cref="System.Runtime.Serialization.ISerializable"/> object
 members.</para>
		</summary>
	</doc><doc for="FormatterTypeStyle.XsdString">
		<summary>
			<para>Indicates that strings can be given in the XSD format rather than SOAP. No
 string IDs are transmitted. </para>
		</summary>
	</doc><doc for="TypeFilterLevel">
		<summary>
			<para>Specifies the level of automatic deserialization for
      .NET remoting.</para>
		</summary>
		<remarks>
			<para> 
      
      .NET remoting provides two levels of automatic deserialization, <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Low"/> and <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Full"/>. <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Low"/>
      protects against deserialization attacks by deserializing only the types
      associated with the most basic remoting functionality. The <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Full"/> deserialization level
      supports automatic deserialization of all types that remoting supports in all
      situations. For a list of the .NET remoting types that <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Low"/> and <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Full"/> support, see <see topic="cpconAutomaticDeserializationInNETRemoting"/>
      
      . </para>
			<para>You can set the members of this enumeration
      programmatically or by using an application configuration file. For examples,
      see <see topic="cpconAutomaticDeserializationInNETRemoting"/>.</para>
			<note type="caution">
      Do not assume that controlling
      deserialization is the only security your application needs. In distributed
      applications, even a high degree of control over serialization might not prevent
      malicious clients from intercepting the communication and using it in some way,
      even if that is merely showing data to others. Therefore, although the <see cref="System.Runtime.Serialization.Formatters.TypeFilterLevel.Low"/>
      
      deserialization level provides some protection against certain types of
      attack based upon automatic deserialization, you must still evaluate whether to
      use authentication and encryption to completely protect your investment in your
      data.
      
   </note>
		</remarks>
		<seealso topic="cpconAutomaticDeserializationInNETRemoting"/>
		<seealso cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.FilterLevel"/>
		<seealso cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSink.TypeFilterLevel"/>
		<seealso cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.TypeFilterLevel"/>
		<seealso cref="System.Runtime.Serialization.Formatters.Soap.SoapFormatter.FilterLevel"/>
		<seealso cref="System.Runtime.Remoting.Channels.SoapServerFormatterSink.TypeFilterLevel"/>
		<seealso cref="System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider.TypeFilterLevel"/>
	</doc>
	<doc for="TypeFilterLevel.Low">
		<summary>
			<para>The low deserialization level for .NET remoting.
      It supports types associated with basic remoting functionality.</para>
		</summary>
	</doc>
	<doc for="TypeFilterLevel.Full">
		<summary>
			<para>The full deserialization level for .NET remoting. It supports all types that remoting
      supports in all situations.</para>
		</summary>
	</doc>
</docs>
