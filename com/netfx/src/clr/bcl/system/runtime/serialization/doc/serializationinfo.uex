<docs>
	<doc for="SerializationInfo.MemberCount">
		<summary>
			<para>Gets the number of members that have been added to 
       the <see cref="System.Runtime.Serialization.SerializationInfo"/>
       .</para>
		</summary>
		<value>
			<para>The number of members that have been added to the 
       current <see cref="System.Runtime.Serialization.SerializationInfo"/> .</para>
		</value>
	</doc>
	<doc for="SerializationInfo.FullTypeName">
		<summary>
			<para>Gets or sets the full name of the <see cref="System.Type"/> to serialize.</para>
		</summary>
		<value>
			<para>The full name of the type to serialize.</para>
		</value>
		<exception cref="ArgumentNullException">The value this property is set to is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Runtime.Serialization.SerializationInfo.FullTypeName"/> is the same as what would be returned by calling the <see cref="System.Type.FullName"/> on
<see cref="System.Type"/> . This is the type 
   name the formatter uses when serializing type information for this object.</para>
			<para>Users who are changing the type to serialize (for example, to send a 
   proxy for a particular type) will want to set the value of this property.</para>
		</remarks>
	</doc>
	<doc for="SerializationInfo.AddValue3">
		<summary>
			<para>Adds a Unicode character value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The character value to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
   compared using an ordinal comparison, so it is possible, but not advisable,
   to have two names that differ only by case.</para>
		</remarks>
	</doc>
	<doc for="SerializationInfo.AddValue5">
		<summary>
			<para>Adds an 8-bit unsigned integer value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The byte value to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
   compared using an ordinal comparison, so it is possible, but not advisable,
   to have two names that differ only by case.</para>
		</remarks>
	</doc>
	<doc for="SerializationInfo.AddValue6">
		<summary>
			<para>Adds a 16-bit signed integer value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The Int16 value to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
   compared using an ordinal comparison, so it is possible, but not advisable,
   to have two names that differ only by case.</para>
		</remarks>
	</doc>
	<doc for="SerializationInfo.AddValue10">
		<summary>
			<para>Adds a 64-bit signed integer value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The Int64 value to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
   compared using an ordinal comparison, so it is possible, but not advisable,
   to have two names that differ only by case.</para>
		</remarks>
	</doc>
	<doc for="SerializationInfo.AddValue2">
		<summary>
			<para>Adds a Boolean value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The Boolean value to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
   compared using an ordinal comparison, so it is possible, but not advisable,
   to have two names that differ only by case.</para>
		</remarks>
	</doc>
	<doc for="SerializationInfo.AddValue14">
		<summary>
			<para>Adds a Decimal value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The Decimal value to serialize.</param>
		<exception cref="System.ArgumentNullException">If The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">If a value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
   compared using an ordinal comparison, so it is possible, but not advisable,
   to have two names that differ only by case.</para>
		</remarks>
	</doc>
	<doc for="SerializationInfo.GetEnumerator">
		<summary>
			<para>Returns a <see cref="System.Runtime.Serialization.SerializationInfoEnumerator"/> 
used to iterate through the name-value pairs in the <see cref="System.Runtime.Serialization.SerializationInfo"/>
. </para>
		</summary>
		<returns>
			<para>A <see cref="System.Runtime.Serialization.SerializationInfoEnumerator"/> for
   parsing the
   name-value pairs in this <see cref="System.Runtime.Serialization.SerializationInfo"/> .</para>
		</returns>
		<remarks>
			<para>This function will most often be used by formatters that need to enumerate
      through the values before writing them out to the stream.</para>
		</remarks>
	</doc>
	<doc for="SerializationInfo.AddValue7">
		<summary>
			<para>Adds a 16-bit unsigned integer value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The UInt16 value to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
 compared using an ordinal comparison, so it is possible, but not advisable,
 to have two names that differ only by case.</para>
		</remarks>
	</doc><doc for="SerializationInfo.AddValue4">
		<summary>
			<para>Adds an 8-bit signed integer value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The Sbyte value to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
 compared using an ordinal comparison, so it is possible, but not advisable,
 to have two names that differ only by case.</para>
		</remarks>
	</doc><doc for="SerializationInfo.AddValue12">
		<summary>
			<para> Adds a single-precision floating-point value into the <see cref="System.Runtime.Serialization.SerializationInfo"/> .</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The Single value to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
 compared using an ordinal comparison, so it is possible, but not advisable,
 to have two names that differ only by case.</para>
		</remarks>
	</doc><doc for="SerializationInfo.AddValue13">
		<summary>
			<para> Adds a double-precision floating-point value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The Double value to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
 compared using an ordinal comparison, so it is possible, but not advisable,
 to have two names that differ only by case.</para>
		</remarks>
	</doc><doc for="SerializationInfo.SerializationInfo">
		<summary>
			<para>Creates a new instance of the <see cref="System.Runtime.Serialization.SerializationInfo"/> class.</para>
		</summary>
		<param name="type">The <see cref="System.Type"/> of the object to serialize.</param>
		<param name="converter">The <see cref="System.Runtime.Serialization.IFormatterConverter"/> used during deserialization.</param>
		<exception cref="System.ArgumentNullException"><paramref name="type"/> or <paramref name="converter"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Runtime.Serialization.IFormatterConverter"/> passed as the <paramref name="converter"/>
parameter converts data from its internal representation to the form the user requested. The
internal representation of the data within the <see cref="System.Runtime.Serialization.SerializationInfo"/>
depends on the formatter that created it.</para>
		</remarks>
	</doc><doc for="SerializationInfo.AssemblyName">
		<summary>
			<para> Gets or
      sets the assembly name of the type to
      serialize.</para>
		</summary>
		<value>
			<para>The full name of the assembly of the type to
      serialize.</para>
		</value>
		<exception cref="ArgumentNullException">The value the property is set to is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Runtime.Serialization.SerializationInfo.AssemblyName"/> is the same as the value returned by <see cref="System.Reflection.Assembly.FullName"/> property of the assembly of the containing
   type. This is the assembly name that the formatter uses when serializing type
   information for this object. </para>
			<para> The assembly name contains the name of the
   assembly, version, culture, and some security information about the object.
   During deserialization, users who implemented <see cref="System.Runtime.Serialization.ISerializable"/>
   can compare the version of the assembly with the expected type to ensure
   that they are deserializing an expected version of the object.</para>
			<para>Users who are changing the type being serialized (for example, to send a
   proxy for a particular type) will set the value of this property.</para>
		</remarks>
	</doc><doc for="SerializationInfo.AddValue9">
		<summary>
			<para>Adds a 32-bit unsigned integer value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The UInt32 value to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
   compared using an ordinal comparison, so it is possible, but not advisable,
   to have two names that differ only by case.</para>
		</remarks>
	</doc><doc for="SerializationInfo.AddValue11">
		<summary>
			<para>Adds a 64-bit unsigned integer value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The UInt64 value to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
   compared using an ordinal comparison, so it is possible, but not advisable,
   to have two names that differ only by case.</para>
		</remarks>
	</doc><doc for="SerializationInfo.AddValue15">
		<summary>
			<para>Adds a <see cref="System.DateTime"/> value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The <see cref="System.DateTime"/> value to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
   compared using an ordinal comparison, so it is possible, but not advisable,
   to have two names that differ only by case.</para>
		</remarks>
	</doc><doc for="SerializationInfo.AddValue">
		<overload>
			<para>Adds a value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</overload>
		<summary>
			<para>Adds a value into the <see cref="System.Runtime.Serialization.SerializationInfo"/> ,
   where <paramref name="value"/> is associated with <paramref name="name"/> and is serialized as being of <see cref="System.Type"/><paramref name="type"/>. </para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The value to be serialized. Any children of this object will automatically be serialized.</param>
		<param name="type">The <see cref="System.Type"/> to associate with the current object. This parameter must always be the type of the object itself or of one of its base classes.</param>
		<exception cref="System.ArgumentNullException">If <paramref name="name"/> or <paramref name="type"/> is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>The assigned type is always the type of the object, or one of its
      parents.</para>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are compared
   using an ordinal comparison, so it is possible, but not advisable, to have two names that differ
   only by case.</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetValue">
		<summary>
			<para>Retrieves a value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> . </para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<param name="type">The type of the value to retrieve. If the stored value cannot be converted to this type, the system will throw an <see cref="System.InvalidCastException"/>.</param>
		<returns>
			<para>The object of the specified <see cref="System.Type"/>associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> or <paramref name="type"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to <paramref name="type"/> .</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the data stored in the <see cref="System.Runtime.Serialization.SerializationInfo"/> is of the type requested (or one of
   its derived classes), that value is returned directly. Otherwise, <see cref="System.Runtime.Serialization.IFormatterConverter.Convert" qualify="true"/> is called to
   convert it to the appropriate type.</para>
			<note type="note">
   The value returned by the <see cref="System.Runtime.Serialization.SerializationInfo.GetValue"/> method can always be safely cast to
   the type specified in the <paramref name="type"/> parameter.
</note>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of the <see cref="System.Runtime.Serialization.SerializationInfo.GetValue"/> method:</para>
			<codelink SampleID="Classic SerializationInfo.GetValue Example" SnippetID="1"/>
		</example>
	</doc><doc for="SerializationInfo.GetBoolean">
		<summary>
			<para>Retrieves a Boolean value from the <see cref="System.Runtime.Serialization.SerializationInfo"/>
.</para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>The Boolean value associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to a Boolean value.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para> If the value is a Boolean, or can be converted to one, that value is
      returned; otherwise, an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by
      the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetChar">
		<summary>
			<para>Retrieves a Unicode character value from the <see cref="System.Runtime.Serialization.SerializationInfo"/>
.</para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>The Unicode character associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to a Unicode character.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is a Unicode character, or can be converted to one, that value
      is returned; otherwise, an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by
      the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>
      .</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetSByte">
		<summary>
			<para>Retrieves an 8-bit signed integer value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> . </para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>The 8-bit signed integer associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to an 8-bit signed integer.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is an Int8, or can be converted to an Int8, that value is returned;
      otherwise an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>
      .</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetByte">
		<summary>
			<para>Retrieves an 8-bit unsigned integer value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> . </para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>The 8-bit unsigned integer associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to an 8-bit unsigned integer.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is an 8-bit unsigned integer, or can be converted to one, that value is
      returned; otherwise, an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>
      .</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetInt16">
		<summary>
			<para>Retrieves a 16-bit signed integer value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> .</para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>The 16-bit signed integer associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to an 16-bit signed integer.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is a 16-bit signed integer, or can be converted to one, that value is
      returned; otherwise, an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>
      .</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetUInt16">
		<summary>
			<para>Retrieves a 16-bit unsigned integer value from the <see cref="System.Runtime.Serialization.SerializationInfo"/>
.</para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>The 16-bit unsigned integer associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to an 16-bit unsigned integer.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is a 16-bit unsigned integer, or can be converted to one, that value is
      returned; otherwise, an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>
      .</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetUInt32">
		<summary>
			<para>Retrieves a 32-bit unsigned integer value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> . </para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>The 32-bit unsigned integer associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to an 32-bit unsigned integer.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is a 32-bit signed integer, or can be converted to one, that value is
      returned; otherwise, an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>
      .</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetInt64">
		<summary>
			<para>Retrieves a 64-bit signed integer value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> . </para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>The 64-bit signed integer associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to an 64-bit signed integer.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is a 64-bit signed integer, or can be converted to one, that value is
      returned; otherwise, an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>
      .</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetUInt64">
		<summary>
			<para>Retrieves a 64-bit unsigned integer value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> . </para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>The 64-bit unsigned integer associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to an 64-bit unsigned integer.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is a 64-bit unsigned integer, or can be converted to one, that value is
      returned; otherwise, an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>
      .</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetSingle">
		<summary>
			<para> Retrieves a single-precision floating-point value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> . </para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>The single-precision floating-point value associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to a single-precision floating-point value.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is a single-precision floating-point number, or can be converted to one, that value is
      returned; otherwise, an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>
      .</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetDouble">
		<summary>
			<para> Retrieves a double-precision floating-point value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> . </para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para> The double-precision floating-point value associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to a double-precision floating-point value.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is a Double, or can be converted to a Double, that value is
      returned; otherwise, an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>
      .</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetDecimal">
		<summary>
			<para>Retrieves a Decimal value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> . </para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>A Decimal value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> . </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException"> The value associated with <paramref name="name"/> cannot be converted to a Decimal.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is a Decimal, or can be converted to a Decimal, that value is
      returned; otherwise an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>
      .</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetDateTime">
		<summary>
			<para>Retrieves a <see cref="System.DateTime"/> value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> .</para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>The <see cref="System.DateTime"/>
value associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to a <see cref="System.DateTime"/> value.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is a <see cref="System.DateTime"/>, or can be converted to a <see cref="System.DateTime"/>, that value is
   returned; otherwise, an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>
   .</para>
		</remarks>
	</doc><doc for="SerializationInfo.GetString">
		<summary>
			<para>Retrieves a <see cref="System.String"/> value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> . </para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>The <see cref="System.String"/>
associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to a <see cref="System.String"/> .</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is a <see cref="System.String"/>, or can be converted to a <see cref="System.String"/>, that value is
   returned; otherwise, an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>.
   </para>
		</remarks>
	</doc><doc for="SerializationInfo.AddValue1">
		<summary>
			<para>Adds the specified object into
      the <see cref="System.Runtime.Serialization.SerializationInfo"/>, where
      it is associated with a specified name.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The value to be serialized. Any children of this object will automatically be serialized.</param>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>The object contained in the<paramref name=" value"/> parameter is serialized as the type returned by 
<paramref name="value"/>.<see langword="GetType"/>  or
<see cref="System.Object"/> if <paramref name="value"/> is <see langword="null"/>.</para>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The
names are compared using an ordinal comparison, so it is possible, but not
advisable, to have two names that differ only by case.</para>
		</remarks>
	</doc>
	<doc for="SerializationInfo">
		<summary>
			<para> Holds all the data needed to serialize or
      deserialize an object. This class cannot be
      inherited.</para>
		</summary>
		<remarks>
			<para> This class is used by objects with custom
      serialization behavior. The <see cref="System.Runtime.Serialization.ISerializable.GetObjectData"/> method
      on either <see cref="System.Runtime.Serialization.ISerializable"/> or <see cref="System.Runtime.Serialization.ISerializationSurrogate"/>
      populates the <see cref="System.Runtime.Serialization.SerializationInfo"/>
      with the name, type, and value of each piece of
      information it wants to serialize. During deserialization, the appropriate function
      can extract this information.</para>
			<para>Objects are added to the <see cref="System.Runtime.Serialization.SerializationInfo"/> at serialization time using the
<see cref="System.Runtime.Serialization.SerializationInfo.AddValue"/> methods and extracted from the
<see cref="System.Runtime.Serialization.SerializationInfo"/> at deserialization using the
<see cref="System.Runtime.Serialization.SerializationInfo.GetValue"/>
methods.</para>
			<para>For more information about customizing serialization, see
<see topic="cpconCustomSerialization"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the <see cref="System.Runtime.Serialization.SerializationInfo"/> for custom
   serialization and deserialization of various values.</para>
			<codelink SampleID="ISerializable Interface Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconserialization"/>
		<seealso cref="System.Runtime.Serialization.ISerializable"/>
		<seealso topic="cpconCustomSerialization"/>
	</doc>
	<doc for="SerializationInfo.AddValue8">
		<summary>
			<para>Adds a 32-bit signed integer value into the <see cref="System.Runtime.Serialization.SerializationInfo"/>.</para>
		</summary>
		<param name="name">The name to associate with the value, so it can be deserialized later.</param>
		<param name="value">The Int32 value to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name"/>.</exception>
		<remarks>
			<para>Trying to add the same name twice into the <see cref="System.Runtime.Serialization.SerializationInfo"/> is an error. The names are
   compared using an ordinal comparison, so it is possible, but not advisable,
   to have two names that differ only by case.</para>
		</remarks>
		<example>
			<codelink SampleID="ISerializable Interface Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SerializationInfo.GetInt32">
		<summary>
			<para>Retrieves a 32-bit signed integer value from the <see cref="System.Runtime.Serialization.SerializationInfo"/> . </para>
		</summary>
		<param name="name">The name of the value to retrieve.</param>
		<returns>
			<para>The 32-bit signed integer associated with <paramref name="name"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The value associated with <paramref name="name"/> cannot be converted to an 32-bit signed integer.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
		<remarks>
			<para>If the value is a 32-bit signed integer, or can be converted to one, that value is
      returned; otherwise, an <see cref="System.InvalidCastException"/> is thrown. All conversions are done by the <see cref="System.Runtime.Serialization.IFormatterConverter"/> associated with this <see cref="System.Runtime.Serialization.SerializationInfo"/>
      .</para>
		</remarks>
		<example>
			<codelink SampleID="ISerializable Interface Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SerializationInfo.SetType">
		<summary>
			<para>Sets the <see cref="System.Type"/> of the object to serialize. </para>
		</summary>
		<param name="type">The <see cref="System.Type"/> of the object to serialize.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="type"/> parameter is <see langword="null"/> .</exception>
		<remarks>
			<para>The <see cref="System.Runtime.Serialization.Formatter"/> is responsible for setting the <see cref="System.Type"/> of the <see cref="System.Runtime.Serialization.SerializationInfo"/>
before passing it to <see cref="System.Runtime.Serialization.ISerializable.GetObjectData"/>. However, users who
want to send proxies for their objects will need to change the type represented
by this <see cref="System.Runtime.Serialization.SerializationInfo"/>. Using the <see cref="System.Runtime.Serialization.SerializationInfo.SetType"/> method is equivalent to setting
both the <see cref="System.Runtime.Serialization.SerializationInfo.FullTypeName"/> and the <see cref="System.Runtime.Serialization.SerializationInfo.AssemblyName"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="IObjectReference Interface Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
