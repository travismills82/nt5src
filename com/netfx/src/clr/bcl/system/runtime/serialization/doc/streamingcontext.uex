<docs>
	<doc for="StreamingContextStates.Other">
		<summary>
			<para>
 Specifies that the serialization context is unknown.
 </para>
		</summary>
	</doc>
	<doc for="StreamingContext.StreamingContext">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Serialization.StreamingContext"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Serialization.StreamingContext"/> class
   with
   a given context
   state.</para>
		</summary>
		<param name="state">A bitwise combination of the <see cref="System.Runtime.Serialization.StreamingContextStates"/> values that specify the source or destination context for this <see cref="System.Runtime.Serialization.StreamingContext"/> .</param>
		<seealso cref="System.FlagsAttribute"/>
	</doc>
	<doc for="StreamingContext.StreamingContext1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Serialization.StreamingContext"/> class
   with
   a given context state, and some additional information.</para>
		</summary>
		<param name="state">A bitwise combination of the <see cref="System.Runtime.Serialization.StreamingContextStates"/> values that specify the source or destination context for this <see cref="System.Runtime.Serialization.StreamingContext"/> .</param>
		<param name="additional">Any additional information to be associated with the <see cref="System.Runtime.Serialization.StreamingContext"/> . This information will be available to any object implementing <see cref="System.Runtime.Serialization.ISerializable"/> or any Serialization Surrogate. Most users will not need to set this parameter.</param>
		<seealso cref="System.FlagsAttribute"/>
	</doc>
	<doc for="StreamingContextStates.CrossAppDomain">
		<summary>
			<para>Specifies that the source or destination context is a 
      different AppDomain. (For a description of AppDomains see <see topic="cpconapplicationdomains"/>
      ).</para>
		</summary>
	</doc>
	<doc for="StreamingContextStates.CrossMachine">
		<summary>
			<para> Specifies that the source or destination context is a different computer.
      </para>
		</summary>
	</doc>
	<doc for="StreamingContextStates.CrossProcess">
		<summary>
			<para> Specifies that the source or destination context is a different process on the same computer.
   </para>
		</summary>
	</doc>
	<doc for="StreamingContextStates.Remoting">
		<summary>
			<para> Specifies that the data is remoted to a context in an unknown location.
      Users cannot make any assumptions whether this is on the same computer.
      </para>
		</summary>
	</doc>
	<doc for="StreamingContext.Context">
		<summary>
			<para> Gets context specified as part of the additional context.</para>
		</summary>
		<value>
			<para>The context specified as part of the additional context.</para>
		</value>
		<remarks>
			<para>Can be <see langword="null"/>.
   </para>
		</remarks>
	</doc>
	<doc for="StreamingContextStates.All">
		<summary>
			<para> Specifies that the serialized data can be transmitted to or received from any of the other contexts.
   </para>
		</summary>
	</doc>
	<doc for="StreamingContext.Equals">
		<summary>
			<para>Determines whether two <see cref="System.Runtime.Serialization.StreamingContext"/> instances contain the same values.</para>
		</summary>
		<param name="obj">An object to compare with the current instance.</param>
		<returns>
			<para><see langword="true"/> if the 
   specified object is an instance of <see cref="System.Runtime.Serialization.StreamingContext"/> and equals the value of the current
   instance; otherwise, <see langword="false"/> .</para>
		</returns>
	</doc><doc for="StreamingContextStates.File">
		<summary>
			<para> Specifies that the source or destination context is a file. Users can assume that
      files will last longer than the process that created them and not serialize objects in such a way
      that deserialization will require accessing any data from the current process.
      </para>
		</summary>
	</doc><doc for="StreamingContextStates.Persistence">
		<summary>
			<para> Specifies that the source or destination context is a persisted
      store, which could include databases, files, or other backing stores. Users can assume
      that persisted data will last longer than the process that created the data and not serialize objects so
      that deserialization will require accessing any data from the current process.
      </para>
		</summary>
	</doc><doc for="StreamingContext.GetHashCode">
		<summary>
			<para>Returns a hash code of this object.</para>
		</summary>
		<returns>
			<para>The <see cref="System.Runtime.Serialization.StreamingContextStates"/> value 
   that contains the source or destination of the serialization for this <see cref="System.Runtime.Serialization.StreamingContext"/> .</para>
		</returns>
	</doc><doc for="StreamingContextStates.Clone">
		<summary>
			<para> Specifies that the object graph is being cloned. Users can assume that the cloned
      graph will continue to exist within the same process and be safe to access handles or other references to
      unmanaged resources.
      </para>
		</summary>
	</doc><doc for="StreamingContext">
		<summary>
			<para> Describes
      the source and destination of a given serialized stream, as well as
      a means for serialization to retain that context and an additional
      caller-defined context.</para>
		</summary>
		<remarks>
			<para> Indicates the source or destination
      of the bits that the formatter is using. Classes with surrogates or
      implementing <see cref="System.Runtime.Serialization.ISerializable"/> can
      serialize or ignore fields and values based
      on the information stored in the streaming context. For example, a window
      handle is still valid if <see cref="System.Runtime.Serialization.StreamingContext.State"/>
      has the <see cref="System.Runtime.Serialization.StreamingContext.State"/>
				<see cref="System.Runtime.Serialization.StreamingContextStates.CrossProcess"/> value set, but not with the
   <see cref="System.Runtime.Serialization.StreamingContextStates.CrossMachine"/> or <see cref="System.Runtime.Serialization.StreamingContextStates.File"/>
   value set.</para>
		</remarks>
		<example>
			<para> The following code example demonstrates the <see cref="System.Runtime.Serialization.StreamingContext"/> struct.</para>
			<codelink SampleID="StreamingContext Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Runtime.Serialization.StreamingContext.State"/>
		<seealso topic="cpconserialization"/>
	</doc>
	<doc for="StreamingContext.State">
		<summary>
			<para> Gets the source or destination
      of the transmitted data.</para>
		</summary>
		<value>
			<para> During serialization, the destination of the transmitted data.
      During deserialization, the source of the data.</para>
		</value>
		<remarks>
			<para> During serialization, the current property specifies the destination of the transmitted
      data. For example, when serializing data from Cross AppDomain Remoting,
      the <see cref="System.Runtime.Serialization.StreamingContextStates"/> will be <see cref="System.Runtime.Serialization.StreamingContextStates.CrossProcess"/>
      . During deserialization, the state indicates the source of the deserialized
      stream.</para>
		</remarks>
		<example>
			<codelink SampleID="StreamingContext Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="StreamingContextStates">
		<summary>
			<para> Defines a set of flags that specifies the source or destination context for the stream during serialization.</para>
		</summary>
		<example>
			<para>The following code example demonstrates the use of the <see cref="System.Runtime.Serialization.StreamingContextStates"/> enum.</para>
			<codelink SampleID="StreamingContext Example" SnippetID="1"/>
		</example>
		<seealso cref="System.FlagsAttribute"/>
	</doc>
</docs>
