<docs>
	<doc for="ObjectIDGenerator.ObjectIDGenerator">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Serialization.ObjectIDGenerator"/>
 class.</para>
		</summary>
	</doc>
	<doc for="ObjectIDGenerator.GetId">
		<summary>
			<para>Returns the ID for the specified object, generating a new
      ID if the specified object has not already been identified by the <see cref="System.Runtime.Serialization.ObjectIDGenerator"/>
      .</para>
		</summary>
		<param name="obj"> The object you want an ID for.</param>
		<param name="firstTime"><see langword="true"/> if <paramref name="obj"/> was not previously known to the <see cref="System.Runtime.Serialization.ObjectIDGenerator"/>; otherwise, <see langword="false"/> .</param>
		<returns>
			<para>The object's ID is used for serialization.
   <paramref name="firstTime"/> is set to <see langword="true"/> if this is the
      first time the object has been identified; otherwise, it is set to
   <see langword="false"/>
   .</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="obj"/> parameter is <see langword="null"/> .</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">The <see cref="System.Runtime.Serialization.ObjectIDGenerator"/> has been asked to keep track of too many objects.</exception>
	</doc><doc for="ObjectIDGenerator.HasId">
		<summary>
			<para> Determines whether an object has already been assigned an
      ID.</para>
		</summary>
		<param name="obj">The object you are asking for.</param>
		<param name="firstTime"><see langword="true"/> if <paramref name="obj"/> was not previously known to the <see cref="System.Runtime.Serialization.ObjectIDGenerator"/> ; <see langword="false"/> otherwise.</param>
		<returns>
			<para>The object ID of <paramref name="obj"/> if previously known to the
<see cref="System.Runtime.Serialization.ObjectIDGenerator"/> , otherwise, zero.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="obj"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>If the object has already been assigned an ID, the ID is returned and
   <paramref name="firstTime"/> is set to <see langword="false"/>; otherwise, zero is
      returned and <paramref name="firstTime"/> is set to <see langword="true"/> . <see cref="System.Runtime.Serialization.ObjectIDGenerator.HasId"/> differs from <see cref="System.Runtime.Serialization.ObjectIDGenerator.GetId"/> in that it
      never creates an ID for an object that has not already been seen by the <see cref="System.Runtime.Serialization.ObjectIDGenerator"/>.</para>
		</remarks>
	</doc><doc for="ObjectIDGenerator">
		<summary>
			<para>Generates IDs for objects.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Serialization.ObjectIDGenerator"/> keeps
   track of previously identified objects. When you ask for the ID of an
   object, the <see cref="System.Runtime.Serialization.ObjectIDGenerator"/>
   knows whether to return the existing ID, or generate and
   remember a new ID.</para>
			<para>The IDs are unique for the life of the <see cref="System.Runtime.Serialization.ObjectIDGenerator"/>
instance. Generally, an <see cref="System.Runtime.Serialization.ObjectIDGenerator"/>
life lasts as long as the <see cref="System.Runtime.Serialization.Formatter"/> that created it.
Object IDs have meaning only within a given serialized stream, and are used
for tracking which objects have references to others within the serialized object graph.</para>
			<para>Using a hash table, the <see cref="System.Runtime.Serialization.ObjectIDGenerator"/>
retains what ID is assigned to what
object. The object references, which uniquely identify each object, are addresses
in the runtime garbage-collected heap. Object reference values can change during
serialization, but the table is updated automatically so the information is correct.</para>
			<note type="note">
   Object IDs
   are 64-bit numbers. Allocation starts from one, so zero is never a valid object ID. A
   formatter can choose a zero value to represent an object reference whose value is
<see langword="null"/>
.
</note>
		</remarks>
		<seealso topic="cpconserialization"/>
		<seealso cref="System.Runtime.Serialization.Formatter"/>
	</doc></docs>
