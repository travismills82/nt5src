<docs>
	<doc for="SerializationBinder">
		<summary>
			<para> Allows users to control class loading and mandate what class to load.</para>
		</summary>
		<remarks>
			<para> During serialization, a formatter transmits the
      information required to create an instance of an object of the correct type and
      version. This information generally includes the full type name and assembly
      name of the object. The assembly name includes the name, version, and strong
      name (see <see topic="cpconStrong-NamedAssemblies"/> ) hash
      
      of the assembly. By default, deserialization uses this information to
      create an instance of an identical object (with the exception of any
      assembly loading restricted by the security policy). Some users need to control which class
      to load, either because the class has moved between assemblies or a
      different version of the class is required on the server and client. </para>
			<para> This is an abstract base class. All binders extend this class.</para>
			<note type="inheritinfo">
      When you inherit from
   <see cref="System.Runtime.Serialization.SerializationBinder"/>, you must override the following
      member: <see cref="System.Runtime.Serialization.SerializationBinder.BindToType"/>.
      
   </note>
		</remarks>
		<example>
			<codelink SampleID="SerializationBinder Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Security.Policy.StrongName"/>
	</doc>
	<doc for="SerializationBinder.BindToType">
		<summary>
			<para>When overridden in a derived class, controls the binding of a serialized
      object to a type.</para>
		</summary>
		<param name="assemblyName">Specifies the <see cref="System.Reflection.Assembly"/> name of the serialized object.</param>
		<param name="typeName">Specifies the <see cref="System.Type"/> name of the serialized object.</param>
		<returns>
			<para>The type of the object the formatter creates a new instance of.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      You must
      implement the current method in a derived class.
      
   </note>
		</remarks>
		<example>
			<codelink SampleID="SerializationBinder Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
