<docs>
	<doc for="Formatter.m_idGenerator">
		<summary>
			<para>Contains the <see cref="System.Runtime.Serialization.ObjectIDGenerator"/> 
used with the current
formatter.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Serialization.ObjectIDGenerator"/> maintains a list of the
   objects that have been identified and the IDs that they were given.</para>
		</remarks>
	</doc><doc for="Formatter.m_objectQueue">
		<summary>
			<para>Contains a <see cref="System.Collections.Queue"/> of the
   objects left to serialize.</para>
		</summary>
		<remarks>
			<para>Objects scheduled for serialization with the <see cref="System.Runtime.Serialization.Formatter.Schedule"/> method are pushed on the
   queue.</para>
		</remarks>
		<seealso cref="System.Collections.Queue"/>
	</doc><doc for="Formatter.Formatter">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Serialization.Formatter"/>
class.</para>
		</summary>
		<remarks>
			<para>Creates a <see cref="System.Collections.Queue"/> 
for objects to
serialize and an <see cref="System.Runtime.Serialization.ObjectIDGenerator"/> to generate IDs for them. </para>
		</remarks>
		<seealso cref="System.Runtime.Serialization.ObjectIDGenerator"/>
	</doc><doc for="Formatter.GetNext">
		<summary>
			<para> Returns the next object to serialize, from the formatter's
      internal work queue.</para>
		</summary>
		<param name="objID">The ID assigned to the current object during serialization.</param>
		<returns>
			<para> The next object to serialize.</para>
		</returns>
		<exception cref="System.Runtime.Serialization.SerializationException">The next object retrieved from the work queue did not have an assigned ID.</exception>
		<remarks>
			<para>Objects are returned in a first in first out order based on how they were
      passed to <see cref="System.Runtime.Serialization.Formatter.Schedule"/> . The ID of the object is
      put into the <paramref name="objID "/>
      parameter and the object is
      returned from the function.</para>
		</remarks>
		<seealso cref="System.Runtime.Serialization.ObjectIDGenerator"/>
	</doc><doc for="Formatter.Schedule">
		<summary>
			<para> Schedules an object for later serialization. </para>
		</summary>
		<param name="obj"> The object to schedule for serialization.</param>
		<returns>
			<para>The
      object ID assigned to the object.</para>
		</returns>
		<remarks>
			<para><see cref="System.Runtime.Serialization.Formatter.Schedule"/>obtains an ID for the
   object and puts it on the queue for later serialization if this is a
   new object ID. The schedule is a work queue of objects to serialize, and is held inside
   the formatter. If the object is already on the work queue, it will not
   be added a second time, but an exception will not be thrown either.</para>
		</remarks>
		<seealso cref="System.Runtime.Serialization.ObjectIDGenerator"/>
	</doc><doc for="Formatter.Context">
		<summary>
			<para>When overridden in a derived class, gets or sets the <see cref="System.Runtime.Serialization.StreamingContext"/> used 
   for the current
   serialization.</para>
		</summary>
		<value>
			<para>The <see cref="System.Runtime.Serialization.StreamingContext"/> used for the current serialization.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Runtime.Serialization.StreamingContext"/> is an indication of
   either the source of the bits being deserialized or the destination of the bits
   being serialized. It has no impact on default serialization, but is passed as an
   argument to <see cref="System.Runtime.Serialization.ISerializable"/> and <see cref="System.Runtime.Serialization.ISerializationSurrogate"/>.</para>
			<note type="inheritinfo">
   You must implement
   this property in a derived class.
</note>
		</remarks>
	</doc><doc for="Formatter.Deserialize">
		<summary>
			<para> When overridden in
 a derived class, deserializes the stream attached to the formatter
 when it was created, creating a graph of objects identical to the graph originally
 serialized into that stream.</para>
		</summary>
		<param name="serializationStream">The stream to deserialize.</param>
		<returns>
			<para>The top object of the deserialized graph of objects.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
 You must implement this method in
 a derived class.
 </note>
		</remarks>
		<seealso topic="cpconserialization"/>
	</doc><doc for="Formatter.Serialize">
		<summary>
			<para>When overridden in a derived class, serializes the graph
 of objects with the specified
 root to the
 stream already attached to the formatter.</para>
		</summary>
		<param name="serializationStream">The stream to which the objects are serialized.</param>
		<param name="graph">The object at the root of the graph to serialize.</param>
		<remarks>
			<note type="inheritinfo">
 You must implement this method in
 a derived class.
 </note>
		</remarks>
		<seealso topic="cpconserialization"/>
	</doc><doc for="Formatter.WriteBoolean">
		<summary>
			<para>When
 overridden in a derived class, writes
 a Boolean value to the stream already attached to the formatter.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo">
 You must implement this method in
 a derived class.
 </note>
		</remarks>
	</doc><doc for="Formatter.WriteByte">
		<summary>
			<para>When overridden
 in a derived class, writes an
 8-bit unsigned integer to the stream already attached to the formatter.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo">
 You must implement this method in
 a derived class.
 </note>
		</remarks>
	</doc><doc for="Formatter.WriteChar">
		<summary>
			<para>When
 overridden in a derived class, writes
 a Unicode character to the stream already attached to the
 formatter.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo">
 You must implement this method in
 a derived class.
 </note>
		</remarks>
	</doc><doc for="Formatter.WriteDateTime">
		<summary>
			<para>When overridden in a derived class,
 writes a <see cref="System.DateTime"/>
 value to the stream already attached to the formatter.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo">
 You must implement this method in
 a derived class.
 </note>
		</remarks>
		<seealso cref="System.DateTime"/>
	</doc><doc for="Formatter.WriteInt16">
		<summary>
			<para>When
 overridden in a derived class, writes
 a 16-bit signed integer to the stream already attached to the
 formatter.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo"> You must implement this method in
 a derived class. </note>
		</remarks>
	</doc><doc for="Formatter.WriteInt32">
		<summary>
			<para>When overridden in a
 derived class, writes a 32-bit signed integer to the stream.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo"> You must implement this method in
 a derived class. </note>
		</remarks>
	</doc><doc for="Formatter.WriteInt64">
		<summary>
			<para>When overridden in a derived
 class, writes a 64-bit signed integer to the stream.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo"> You must implement this method in
 a derived class. </note>
		</remarks>
	</doc><doc for="Formatter.WriteObjectRef">
		<summary>
			<para>When overridden in a derived class,
 writes an object reference to the stream already attached to the formatter.</para>
		</summary>
		<param name="obj">The object reference to write.</param>
		<param name="name">The name of the member.</param>
		<param name="memberType"> The type of object the reference points to.</param>
		<remarks>
			<para>Schedules the object with the graph walker to handle the work.</para>
			<note type="inheritinfo"> You must implement this method in
 a derived class. </note>
		</remarks>
	</doc><doc for="Formatter.WriteSByte">
		<summary>
			<para>When
 overridden in a derived class, writes
 an 8-bit signed integer to the stream already attached to the
 formatter.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo"> You must implement this method in
 a derived class. </note>
		</remarks>
	</doc><doc for="Formatter.WriteTimeSpan">
		<summary>
			<para>When overridden in a derived class,
 writes a <see cref="System.TimeSpan"/>
 value to the stream already attached to the formatter.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo"> You must implement this method in
 a derived class. </note>
		</remarks>
		<seealso cref="System.TimeSpan"/>
	</doc><doc for="Formatter.WriteUInt16">
		<summary>
			<para>When overridden in a derived class, writes a 16-bit
 unsigned integer to the stream already attached to the formatter.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo"> You must implement this method in
 a derived class. </note>
		</remarks>
	</doc><doc for="Formatter.WriteUInt32">
		<summary>
			<para>When overridden in a derived class, writes a 32-bit unsigned integer to the stream already attached to the
 formatter.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo"> You must implement this method in
 a derived class. </note>
		</remarks>
	</doc><doc for="Formatter.WriteUInt64">
		<summary>
			<para>When overridden in a derived class, writes a 64-bit unsigned integer to the stream already attached to the
 formatter.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo"> You must implement this method in
 a derived class. </note>
		</remarks>
	</doc><doc for="Formatter.WriteValueType">
		<summary>
			<para>When overridden in a derived class, writes a value
 of the given type to the stream already attached to the
 formatter.</para>
		</summary>
		<param name="obj">The object representing the value type.</param>
		<param name="name">The name of the member.</param>
		<param name="memberType">The <see cref="System.Type"/> of the value type.</param>
		<remarks>
			<note type="inheritinfo"> You must implement this method in
 a derived class.</note>
		</remarks>
		<seealso cref="System.ValueType"/>
	</doc><doc for="Formatter.WriteArray">
		<summary>
			<para>When overridden in a derived class,
 writes an array to the stream already attached to the formatter.</para>
		</summary>
		<param name="obj">The array to write.</param>
		<param name="name">The name of the array.</param>
		<param name="memberType">The type of elements that the array holds.</param>
		<remarks>
			<note type="inheritinfo">
 You must implement this method in
 a derived class.
 
 </note>
		</remarks>
	</doc><doc for="Formatter.WriteDecimal">
		<summary>
			<para>When overridden in a derived class, writes a <see cref="System.Decimal"/>
value to the stream already attached to the
formatter.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo">
 You must implement this method in
 a derived class.
 
 </note>
		</remarks>
		<seealso cref="System.Decimal"/>
	</doc><doc for="Formatter.WriteDouble">
		<summary>
			<para> When
 overridden in a derived class, writes
 a double-precision floating-point number to the stream already attached to the formatter.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo">
 You must implement this method in
 a derived class.
 
 </note>
		</remarks>
	</doc><doc for="Formatter.WriteSingle">
		<summary>
			<para> When overridden in a derived class,
 writes a single-precision floating-point number to the stream already
 attached to the formatter.</para>
		</summary>
		<param name="val">The value to write.</param>
		<param name="name">The name of the member.</param>
		<remarks>
			<note type="inheritinfo">
 You must implement this method in
 a derived class.
 </note>
		</remarks>
	</doc><doc for="Formatter">
		<summary>
			<para>Provides base functionality for the
      common language runtime serialization formatters.</para>
		</summary>
		<remarks>
			<para><see cref="System.Runtime.Serialization.Formatter"/> is the <see langword="abstract "/>base class for all runtime serialization
   formatters, and provides some helper methods for implementing the <see cref="System.Runtime.Serialization.IFormatter"/>
   interface. The <see cref="System.Runtime.Serialization.Formatter"/>
   
   also manages queuing objects for
   serialization and generating IDs on a per-object basis.</para>
			<note type="inheritinfo">
   When you inherit from
<see cref="System.Runtime.Serialization.Formatter"/>, you must override the following
   members: <see cref="System.Runtime.Serialization.Formatter.Serialize"/>,
<see cref="System.Runtime.Serialization.Formatter.Deserialize"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteArray"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteBoolean"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteByte"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteChar"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteDateTime"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteDecimal"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteDouble"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteInt16"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteInt32"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteInt64"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteObjectRef"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteSByte"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteSingle"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteTimeSpan"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteUInt16"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteUInt32"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteUInt64"/>,
<see cref="System.Runtime.Serialization.Formatter.WriteValueType"/>,
<see cref="System.Runtime.Serialization.Formatter.SurrogateSelector"/>,
<see cref="System.Runtime.Serialization.Formatter.Binder"/>,
   and <see cref="System.Runtime.Serialization.Formatter.Context"/>.
   
</note>
		</remarks>
		<seealso cref="System.Runtime.Serialization.ObjectIDGenerator"/>
		<seealso topic="cpconserialization"/>
	</doc><doc for="Formatter.Binder">
		<summary>
			<para>When overridden in a derived class, gets or sets the <see cref="System.Runtime.Serialization.SerializationBinder"/> used
   with the current formatter.</para>
		</summary>
		<value>
			<para>The <see cref="System.Runtime.Serialization.SerializationBinder"/> used
   with the current formatter.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Runtime.Serialization.SerializationBinder"/>
performs
lookups for types from the type names passed during deserialization. If no <see cref="System.Runtime.Serialization.SerializationBinder"/> is set, a default is used.</para>
			<note type="inheritinfo">
   You must implement
   this property in a derived class.
</note>
		</remarks>
	</doc><doc for="Formatter.SurrogateSelector">
		<summary>
			<para>When overridden in a derived class, gets or sets the <see cref="System.Runtime.Serialization.ISurrogateSelector"/> used
   with the current formatter.</para>
		</summary>
		<value>
			<para>The <see cref="System.Runtime.Serialization.ISurrogateSelector"/> used
   with the current formatter.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Runtime.Serialization.SurrogateSelector"/> to look
   up implementations of <see cref="System.Runtime.Serialization.ISerializationSurrogate"/> that
   control the serialization of a particular type.</para>
			<note type="note">
   If an object type has a matching
   surrogate, then serialization and deserialization are handed off to the
   surrogate even if the type implements the <see cref="System.Runtime.Serialization.ISerializable"/> interface.
</note>
			<note type="inheritinfo">
   
   You must implement this property in a derived class.
</note>
		</remarks>
	</doc><doc for="Formatter.WriteMember">
		<summary>
			<para> Inspects the type of data received, and calls the
      appropriate <see langword="Write"/>
      method to perform the write to the stream already attached to the
      formatter.
      </para>
		</summary>
		<param name="memberName">The name of the member to serialize. </param>
		<param name="data">The object to write to the stream attached to the formatter. </param>
		<remarks>
			<para> To use this method properly, all 
      the <see langword="Write"/> methods
      (<see cref="System.Runtime.Serialization.Formatter.WriteArray"/> method, <see cref="System.Runtime.Serialization.Formatter.WriteBoolean"/> method, <see cref="System.Runtime.Serialization.Formatter.WriteByte"/> method, and so on) should
      have the appropriate functionality.</para>
		</remarks>
	</doc>
</docs>
