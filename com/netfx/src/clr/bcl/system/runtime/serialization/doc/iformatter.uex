<docs>
	<doc for="IFormatter.SurrogateSelector">
		<summary>
			<para>Gets or sets the <see cref="System.Runtime.Serialization.SurrogateSelector"/> used 
   by the current formatter. </para>
		</summary>
		<value>
			<para>The <see cref="System.Runtime.Serialization.SurrogateSelector"/> used by this formatter.</para>
		</value>
		<remarks>
			<para>An <see cref="System.Runtime.Serialization.ISerializationSurrogate"/> allows
   the user to specify an object best suited to handle the serialization of
   a particular object or class of objects. Think of it as an
   implementation of <see cref="System.Runtime.Serialization.ISerializable"/> but provided by a different
   object.</para>
		</remarks>
	</doc><doc for="IFormatter.Binder">
		<summary>
			<para> Gets or sets the <see cref="System.Runtime.Serialization.SerializationBinder"/> that performs type lookups during deserialization.</para>
		</summary>
		<value>
			<para>The <see cref="System.Runtime.Serialization.SerializationBinder"/> that performs type lookups
   during deserialization.</para>
		</value>
		<remarks>
			<para> When trying to resolve a type from information encoded on the stream,
      the formatter calls the <see cref="System.Runtime.Serialization.SerializationBinder.BindToType"/> method on the
   <see cref="System.Runtime.Serialization.SerializationBinder"/> . This method resolves these
      parameters to a <see cref="System.Type"/> object.
      The binder can find a <see cref="System.Type"/>at deserialization time that is in a
      different assembly than it was at serialization time.</para>
			<para> Setting this property has no effect during serialization.</para>
		</remarks>
	</doc><doc for="IFormatter.Context">
		<summary>
			<para> Gets or sets the <see cref="System.Runtime.Serialization.StreamingContext"/>
used for serialization and deserialization.</para>
		</summary>
		<value>
			<para>The <see cref="System.Runtime.Serialization.StreamingContext"/> used for serialization and
   deserialization.</para>
		</value>
		<remarks>
			<para>The value of this property is passed to any object implementing <see cref="System.Runtime.Serialization.ISerializable"/> or <see cref="System.Runtime.Serialization.ISerializationSurrogate"/>. The <see cref="System.Runtime.Serialization.StreamingContext"/> indicates the
   destination (during serialization) or the source (during deserialization) of the
   data. An object implementing <see cref="System.Runtime.Serialization.ISerializable"/>
   can alter the data that it transmits depending on value of the <see cref="System.Runtime.Serialization.IFormatter.Context"/>
   .</para>
		</remarks>
	</doc><doc for="IFormatter">
		<summary>
			<para>Provides functionality for formatting serialized objects.</para>
		</summary>
		<remarks>
			<para> This interface must be implemented by any class
      identified as a formatter in the <see cref="Serialization"/>
      architecture.</para>
			<para> Objects controlling their own serialization can do so by
      implementing the <see cref="System.Runtime.Serialization.ISerializable"/> interface. In
      order for an object to be serialized, you must mark that object as being
      serializable. You can do this by applying the serializable attribute to
      a class. If any object in the graph is not serializable, serialization will
      fail.</para>
			<note type="inotes">
      All
      formatters
      must implement this interface. Use <see cref="System.Runtime.Serialization.IFormatter.Serialize"/> to serialize
      an object or graph of objects. Use <see cref="System.Runtime.Serialization.IFormatter.Deserialize"/> to deserialize a stream
      and create a clone of the original object or graph of objects.
      
   </note>
		</remarks>
		<seealso topic="cpconserialization"/>
		<seealso cref="System.Runtime.Serialization.Formatter"/>
		<seealso cref="System.Runtime.Serialization.ISerializable"/>
	</doc><doc for="IFormatter.Deserialize">
		<summary>
			<para>Deserializes the data on the provided stream and reconstitutes the graph of objects.</para>
		</summary>
		<param name="serializationStream">The stream containing the data to deserialize. </param>
		<returns>
			<para>The top object of the deserialized graph.</para>
		</returns>
		<remarks>
			<para> The <see cref="System.Runtime.Serialization.IFormatter.Deserialize"/>
method reads graph information from
the stream and reconstructs a clone of the original graph. The topology of the graph
is preserved.</para>
			<para>The deserialization process allocates an empty object of the appropriate type
   and repopulates its fields from the data transmitted in the <paramref name="serializationStream"/> stream. It is important
   to note that no constructor is ever called on the object during
   deserialization.</para>
		</remarks>
		<seealso topic="cpconserialization"/>
	</doc><doc for="IFormatter.Serialize">
		<summary>
			<para>Serializes an object, or graph of objects with the given
      root to the provided stream.</para>
		</summary>
		<param name="serializationStream"> The stream where the formatter puts the serialized data. This stream can reference a variety of backing stores (such as files, network, memory, and so on).</param>
		<param name="graph">The object, or root of the object graph, to serialize. All child objects of this root object are automatically serialized.</param>
		<remarks>
			<para>The <see cref="System.Runtime.Serialization.IFormatter.Serialize"/> method automatically serializes the provided objects,
   and all objects connected to it, to the provided stream.</para>
			<para> By default, the serialization process records an object's state by
   gathering the values of all its fields (public and private). These fields are saved to
   the stream along with information about the object such as the
   assembly-qualified name for its type. </para>
		</remarks>
		<seealso topic="cpconserialization"/>
	</doc></docs>
