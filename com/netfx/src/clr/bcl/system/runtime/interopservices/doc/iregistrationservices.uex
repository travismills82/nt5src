<docs>
	<doc for="IRegistrationServices.GetProgIdForType">
		<summary>
			<para>Retrieves the COM ProgID for a specified type.</para>
		</summary>
		<param name="type">The type whose ProgID is being requested.</param>
		<returns>
   The ProgID for the specified type.
</returns>
	</doc><doc for="IRegistrationServices.GetManagedCategoryGuid">
		<summary>
			<para>Returns the GUID of the COM category that contains the managed classes.</para>
		</summary>
		<returns>
   The GUID of the COM category that
   contains the managed classes.
</returns>
	</doc><doc for="AssemblyRegistrationFlags">
		<summary>
			<para>Defines a set of flags used when registering assemblies.</para>
		</summary>
	</doc><doc for="AssemblyRegistrationFlags.None">
		<summary>
			<para>Indicates no special settings.</para>
		</summary>
	</doc><doc for="AssemblyRegistrationFlags.SetCodeBase">
		<summary>
			<para>Indicates that the code base key for the assembly 
      should be set in the registry.</para>
		</summary>
	</doc><doc for="IRegistrationServices.TypeRepresentsComType">
		<summary>
			<para>Determines whether the specified type is a COM type.</para>
		</summary>
		<param name="type">The type to determine if it is a COM type.</param>
		<returns>
			<para><see langword="true"/> if the specified
 type is a COM type; otherwise <see langword="false"/>.</para>
		</returns>
	</doc><doc for="IRegistrationServices">
		<summary>
			<para>Provides a set of services for registering and 
 unregistering managed assemblies for use from COM.</para>
		</summary>
		<remarks>
 Registration is needed when the objects
 within an assembly are being used by COM clients.
</remarks>
	</doc><doc for="IRegistrationServices.RegisterTypeForComClients">
		<summary>
			<para>Adds the appropriate registry entries for the specified
      type using the specified GUID.</para>
		</summary>
		<param name="type">The type to be registered for use from COM.</param>
		<param name=" g">GUID used to register the specified type.</param>
		<remarks>
			<para>This method is equivalent to calling
   <see langword="CoRegisterClassObject"/> in COM.</para>
		</remarks>
	</doc><doc for="IRegistrationServices.TypeRequiresRegistration">
		<summary>
			<para>Determines whether the specified type requires registration.</para>
		</summary>
		<param name="type">The type to check for COM registration requirements.</param>
		<returns>
			<para><see langword="true"/> if the type
   must be registered for use from COM; otherwise <see langword="false"/>.</para>
		</returns>
	</doc><doc for="IRegistrationServices.GetRegistrableTypesInAssembly">
		<summary>
			<para> Retrieves a list of classes in an assembly that would
      be registered by a call to <see cref="System.Runtime.InteropServices.IRegistrationServices.RegisterAssembly"/>
      .</para>
		</summary>
		<param name="assembly">The assembly to search for classes.</param>
		<returns>
			<para>A <see cref="System.Type"/> array containing a 
   list of classes in <paramref name="assembly"/>
   .</para>
		</returns>
	</doc><doc for="IRegistrationServices.RegisterAssembly">
		<summary>
			<para> Registers the classes in a managed assembly to enable creation from COM.</para>
		</summary>
		<param name="assembly">The assembly to be registered.</param>
		<param name=" flags">An <see cref="System.Runtime.InteropServices.AssemblyRegistrationFlags"/> value indicating any special settings needed when registering <paramref name="assembly"/>.</param>
		<returns>
			<para><see langword="true"/>
if <paramref name="assembly"/> contains types that were successfully
registered; otherwise <see langword="false"/> if the assembly contains no
eligible types.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assembly"/> is <see langword="null"/> .</exception>
		<exception cref="System.InvalidOperationException"><para>The full name of <paramref name="assembly"/> is <see langword="null"/> .</para>
			<para>-or-</para>
			<para>A method marked with <see cref="System.Runtime.InteropServices.ComRegisterFunctionAttribute"/> is not <see langword="static"/> .</para>
			<para>-or-</para>
			<para>There is more than one method marked with <see cref="System.Runtime.InteropServices.ComRegisterFunctionAttribute"/> at a given level of the hierarchy.</para>
			<para>-or-</para>
			<para>The signature of the method marked with <see cref="System.Runtime.InteropServices.ComRegisterFunctionAttribute"/> is not valid.</para></exception>
		<remarks>
			<para><see langword="RegisterAssembly"/> adds the appropriate registry entries for
   the types in the specified assembly. This method also calls any registration
   functions found in the assembly.</para>
			<para>Use <see cref="System.Reflection.Assembly.Load" qualify="true"/> to get an assembly.</para>
		</remarks>
	</doc><doc for="IRegistrationServices.UnregisterAssembly">
		<summary>
			<para>Unregisters the classes in a managed assembly.</para>
		</summary>
		<param name="assembly">The assembly to be unregistered.</param>
		<returns>
			<para><see langword=""/>
			</para>
			<see langword="true"/> if 
<paramref name="assembly"/> contains types that were successfully unregistered; otherwise 
<see langword="false"/> if the assembly contains no eligible types.
</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assembly"/> is <see langword="null"/> .</exception>
		<exception cref="System.InvalidOperationException"><para>The full name of <paramref name="assembly"/> is <see langword="null"/> .</para>
			<para>-or-</para>
			<para>A method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> is not <see langword="static"/> .</para>
			<para>-or-</para>
			<para>There is more than one method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> at a given level of the hierarchy.</para>
			<para>-or-</para>
			<para>The signature of the method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> is not valid.</para></exception>
		<remarks>
			<para><see langword="UnregisterAssembly"/> removes the registry entries for the
   types in the specified assembly previously added by <see cref="System.Runtime.InteropServices.IRegistrationServices.RegisterAssembly"/>. This
   method also calls any unregistration functions found in the assembly.</para>
		</remarks>
	</doc></docs>
