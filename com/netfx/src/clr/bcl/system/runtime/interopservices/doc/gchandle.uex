<docs>
	<doc for="GCHandleType.Weak">
		<summary>
			<para> This handle type is used to track an object, but allow it to be collected.
      When an object is collected, the contents of the <see cref="System.Runtime.InteropServices.GCHandle"/>
      are zeroed.
   <see langword="Weak"/> references are zeroed before the finalizer runs, so even
      if the finalizer resurrects the object, the <see langword="Weak"/>
      reference is still zeroed.</para>
		</summary>
	</doc><doc for="GCHandleType">
		<summary>
			<para> Represents the types of handles the
   <see cref="System.Runtime.InteropServices.GCHandle"/> class can allocate.</para>
		</summary>
		<seealso cref="System.Runtime.InteropServices.GCHandle"/>
	</doc>
	<doc for="GCHandleType.WeakTrackResurrection">
		<summary>
			<para> This handle type is similar to <see cref="System.Runtime.InteropServices.GCHandleType.Weak"/>, but the handle is not zeroed if the
   object is resurrected during finalization.</para>
		</summary>
	</doc>
	<doc for="GCHandle.Free">
		<summary>
			<para>Releases a <see cref="System.Runtime.InteropServices.GCHandle"/>.</para>
		</summary>
		<exception cref="System.InvalidOperationException">The handle was freed or never initialized.</exception>
		<remarks>
			<para>The caller must ensure that for a given
      handle, <see cref="System.Runtime.InteropServices.GCHandle.Free"/>
      is called only once.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission"><para>for operating with unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/>.</para></permission>
	</doc>
	<doc for="GCHandle.Target">
		<summary>
			<para> Gets or
      sets the object this handle represents.</para>
		</summary>
		<value>
			<para>The object this handle represents.</para>
		</value>
		<exception cref="System.InvalidOperationException"><para>The handle was freed, or never initialized.</para></exception>
		<permission cref="System.Security.Permissions.SecurityPermission"><para>for operating with unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/>.</para></permission>
		<seealso cref="System.Runtime.InteropServices.GCHandleType"/>
	</doc>
	<doc for="GCHandle.AddrOfPinnedObject">
		<summary>
			<para>Retrieves the address of an object in a <see cref="System.Runtime.InteropServices.GCHandleType.Pinned"/> handle.</para>
		</summary>
		<returns>
			<para> The address of the of the
   <see langword="Pinned"/> object as an <see cref="System.IntPtr"/>.</para>
		</returns>
		<exception cref="System.InvalidOperationException">The handle is any type other than <see cref="System.Runtime.InteropServices.GCHandleType.Pinned"/>.</exception>
		<remarks>
			<para>This method is used to get a stable pointer
      to the object. Pinning an object prevents the garbage collector from
      moving it around in memory, thereby reducing the efficiency of the garbage
      collector.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission"><para>for operating with unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/>.</para></permission>
		<seealso cref="System.Runtime.InteropServices.GCHandleType"/>
	</doc>
	<doc for="GCHandle.operatorGCHandle">
		<summary>
			<para>A <see cref="System.Runtime.InteropServices.GCHandle"/> is stored using an internal integer representation.</para>
		</summary>
		<param name="value">An <see cref="System.IntPtr"/> that indicates the handle for which the conversion is required.</param>
		<returns>
			<para> The <see cref="System.Runtime.InteropServices.GCHandle"/>.</para>
		</returns>
		<remarks>
			<para>This method allows you to retrieve a <see cref="System.Runtime.InteropServices.GCHandle"/> from an integer
   value.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission"><para>for operating with unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/>.</para></permission>
		<seealso cref="System.Runtime.InteropServices.GCHandleType"/>
	</doc>
	<doc for="GCHandle.operatorIntPtr">
		<summary>
			<para>A <see cref="System.Runtime.InteropServices.GCHandle"/> is stored using an internal
   integer representation.</para>
		</summary>
		<param name="value">The <see cref="System.Runtime.InteropServices.GCHandle"/> for which the integer is required.</param>
		<returns>
			<para> The integer value.</para>
		</returns>
		<remarks>
			<para>This method can be used to retrieve the integer value from a <see cref="System.Runtime.InteropServices.GCHandle"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission"><para>for operating with unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/>.</para></permission>
		<seealso cref="System.Runtime.InteropServices.GCHandleType"/>
	</doc>
	<doc for="GCHandleType.Pinned">
		<summary>
			<para> This handle type is similar to <see cref="System.Runtime.InteropServices.GCHandleType.Normal"/>, but allows the
   address of the pinned object to be taken.
   This prevents the garbage collector from moving the object and hence undermines
   the efficiency of the garbage collector. Use the <see cref="System.Runtime.InteropServices.GCHandle.Free"/>
   method to free
   the allocated handle as soon as possible.</para>
		</summary>
	</doc>
	<doc for="GCHandle">
		<summary>
			<para>Provides a means for accessing a managed object from
      unmanaged memory.</para>
		</summary>
		<remarks>
			<para>The garbage collector handle, or <see cref="System.Runtime.InteropServices.GCHandle"/> value type, is used in conjunction with the
<see cref="System.Runtime.InteropServices.GCHandleType"/> enumeration to create a handle 
   corresponding to any managed object. This handle can be one of four types:
<see langword="Weak"/>, <see langword="WeakTrackResurrection"/>, 
<see langword="Normal"/>, or <see langword="Pinned"/>. Once allocated, you can 
   use a <see cref="System.Runtime.InteropServices.GCHandle"/> to prevent the managed
   object from being collected by the garbage collector when an unmanaged client holds the only reference. Without such a handle,
   the object can be collected by the garbage collector before completing its work on behalf of the unmanaged
   client.</para>
			<para> You can also use the <see cref="System.Runtime.InteropServices.GCHandle"/> to create a pinned object that returns a
memory address and prevents the garbage collector from moving the object in
memory. From managed code, you can obtain a new object reference. For all but
the <see cref="System.Runtime.InteropServices.GCHandle.IsAllocated"/> property, you must
apply unmanaged code permission by using <see cref="System.Security.Permissions.SecurityPermission"/>
with the associated
<see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/> enumeration 
value.</para>
		</remarks>
		<example>
			<para>The following example shows an <c>App</c> class that creates a handle to a managed object using
   the <see langword="GCHandle.Alloc"/> method, which prevents the managed
   object from being collected. A call to the <see langword="EnumWindows"/> method passes a delegate and a
   managed object (both declared as managed types, but not shown), and casts the
   handle to an <see cref="System.IntPtr"/>. The unmanaged function passes the type
   back to the caller as a parameter of the callback function.</para>
			<code lang="VB">Public Class App
   Public Shared Sub Main()
      Dim tw As TextWriter = System.Console.Out
      Dim gch As GCHandle = GCHandle.Alloc( tw )
      
      ' Platform invoke prevents the delegate from being garbage collected
      ' before the call ends.
      Dim cewp As CallBack
      cewp = AddressOf App.CaptureEnumWindowsProc
      LibWrap.EnumWindows( cewp, GCHandle.op_Explicit( gch ))
      gch.Free()
   End Sub 'Main
   
   Public Shared Function CaptureEnumWindowsProc( ByVal handle _
         As Integer, ByVal param As IntPtr ) As Boolean
      Dim gch As GCHandle = GCHandle.op_Explicit( param )
      Dim tw As TextWriter = CType( gch.Target, TextWriter )
      tw.WriteLine( handle )
      return True
   End Function 'CaptureEnumWindowsProc
End Class 'App
</code>
			<code lang="C#">public class App
{
   public static void Main()
   {
      TextWriter tw = System.Console.Out;
      GCHandle gch = GCHandle.Alloc( tw );
      CallBack cewp = new CallBack( CaptureEnumWindowsProc );
      
      // Platform invoke prevents the delegate from being garbage 
      // collected before the call ends.
      LibWrap.EnumWindows( cewp, (IntPtr)gch );
      gch.Free();
   }
   
   private static bool CaptureEnumWindowsProc( int handle, IntPtr param )
   {
      GCHandle gch = (GCHandle)param;
      TextWriter tw = (TextWriter)gch.Target;
      tw.WriteLine( handle );
      return true;
   }   
}
</code>
		</example>
		<seealso cref="System.Runtime.InteropServices.GCHandleType"/>
	</doc>
	<doc for="GCHandle.Alloc">
		<overload>
			<para>Allocates a handle for the specified object.</para>
		</overload>
		<summary>
			<para>Allocates a <see cref="System.Runtime.InteropServices.GCHandleType.Normal"/>
handle for the specified object.</para>
		</summary>
		<param name="value">The object that uses the <see cref="System.Runtime.InteropServices.GCHandle"/>.</param>
		<returns>
			<para> A new <see cref="System.Runtime.InteropServices.GCHandle"/> that protects the object from
   garbage collection. This <see cref="System.Runtime.InteropServices.GCHandle"/> must
   be released with <see cref="System.Runtime.InteropServices.GCHandle.Free"/> when it is no longer
   needed.</para>
		</returns>
		<exception cref="System.ArgumentException">An instance with nonprimitive (non-blittible) members cannot be pinned.</exception>
		<remarks>
			<para><see cref="System.Runtime.InteropServices.GCHandleType.Normal"/> handles
   are opaque, which means that
   you cannot resolve the address of the object it contains through the
   handle.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission"><para>for operating with unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/>.</para></permission>
		<seealso cref="System.Runtime.InteropServices.GCHandleType"/>
	</doc>
	<doc for="GCHandle.Alloc1">
		<summary>
			<para>Allocates a handle of the specified type for the specified object.</para>
		</summary>
		<param name="value">The object that uses the <see cref="System.Runtime.InteropServices.GCHandle"/>.</param>
		<param name=" type">One of the <see cref="System.Runtime.InteropServices.GCHandleType"/> values, indicating the type of <see cref="System.Runtime.InteropServices.GCHandle"/> to create.</param>
		<returns>
			<para> A new <see cref="System.Runtime.InteropServices.GCHandle"/> of the specified type. This
<see cref="System.Runtime.InteropServices.GCHandle"/> must
   be released with <see cref="System.Runtime.InteropServices.GCHandle.Free"/> when
   it
   is no longer needed.</para>
		</returns>
		<exception cref="System.ArgumentException">An instance with nonprimitive (non-blittible) members cannot be pinned.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission"><para>for operating with unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/>.</para></permission>
		<seealso cref="System.Runtime.InteropServices.GCHandleType"/>
	</doc>
	<doc for="GCHandle.IsAllocated">
		<summary>
			<para>Gets a value indicating whether the handle is allocated.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the handle is
   allocated; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> Use this property when using <see cref="System.Runtime.InteropServices.GCHandleType.Weak"/> handles to determine if
   the <see cref="System.Runtime.InteropServices.GCHandle"/> is
   still available. When the garbage collector collects the object,
   the <see cref="System.Runtime.InteropServices.GCHandleType.Weak"/> handle
   can still be resurrected in the finalizer. In that case, the handle is
   not allocated (it is lost when the garbage collector attempts to collect the object), even though the target
   object is valid.</para>
		</remarks>
		<seealso cref="System.Runtime.InteropServices.GCHandleType"/>
	</doc>
	<doc for="GCHandleType.Normal">
		<summary>
			<para>This handle type represents an opaque handle, meaning you cannot resolve the
      address of the pinned object through the handle. You can use this type to
      track an object and prevent its collection by the garbage collector. This enumeration member is useful when an unmanaged
      client holds the only reference, which is undetectable from the garbage collector, to a managed object.</para>
		</summary>
	</doc>
</docs>
