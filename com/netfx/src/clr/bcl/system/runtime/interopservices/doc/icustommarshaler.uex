<docs>
	<doc for="ICustomMarshaler.GetNativeDataSize">
		<summary>
			<para>Returns the size of the native data to be marshaled.</para>
		</summary>
		<returns>
			<para>The size in bytes of the native data.</para>
		</returns>
	</doc><doc for="ICustomMarshaler.MarshalNativeToManaged">
		<summary>
 Converts the unmanaged data to managed data.
</summary>
		<param name="pNativeData"> A pointer to the unmanaged data to be wrapped.</param>
		<returns>
 Returns the managed view of the COM data.
</returns>
	</doc><doc for="ICustomMarshaler.MarshalManagedToNative">
		<summary>
 Converts the managed data to unmanaged data.
</summary>
		<param name="ManagedObj">The managed object to be converted.</param>
		<returns>
 Returns the COM view of the managed object.
</returns>
	</doc><doc for="ICustomMarshaler.CleanUpNativeData">
		<summary>
			<para> Performs necessary cleanup of the unmanaged data when it is no longer
 needed.</para>
		</summary>
		<param name="pNativeData">A pointer to the unmanaged data to be destroyed.</param>
	</doc><doc for="ICustomMarshaler.CleanUpManagedData">
		<summary>
 Performs necessary cleanup of the managed data when it
 is no longer needed.
</summary>
		<param name="ManagedObj">The managed object to be destroyed.</param>
	</doc><doc for="ICustomMarshaler">
		<summary>
			<para> Designed to provide custom wrappers for
      handling method calls.</para>
		</summary>
		<remarks>
			<para> To use a custom marshaler, you must apply 
      the <see cref="System.Runtime.InteropServices.MarshalAsAttribute"/> to the parameter or field
      being marshaled. You must also pass <see cref="System.Runtime.InteropServices.UnmanagedType.CustomMarshaler" qualify="true"/> to its constructor and specify
      the <see cref="System.Runtime.InteropServices.MarshalAsAttribute.MarshalType"/>. The
      attribute identifies the appropriate
      custom marshaler to activate the appropriate wrapper. The common language
      runtime's interop service then examines the attribute and creates the custom
      marshaler when the argument is marshaled. It calls on the custom
      marshaler's <see cref="System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged"/>
      and <see cref="System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative"/> methods to
      activate the correct wrapper to handle the call. </para>
			<para>In addition to implementing the <see langword="ICustomMarshaler"/> interface,
   custom marshalers must implement a <see langword="static"/> method called
<see langword="GetInstance"/> that accepts a <see cref="System.String"/> as a parameter and has a 
   return type of <see langword="ICustomMarshaler"/>. This
<see langword="static"/> method is called by the common 
   language runtime's COM interop layer to instantiate an instance of the custom
   marshaler. The <see langword="String"/>
   passed to <see langword="GetInstance"/> is a cookie that the method can use to
   customize the returned custom marshaler.</para>
		</remarks>
	</doc></docs>
