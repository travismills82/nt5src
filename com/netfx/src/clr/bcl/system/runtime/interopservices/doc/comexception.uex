<docs>
	<doc for="COMException.ToString">
		<summary>
			<para>Converts the contents of the exception to a string.</para>
		</summary>
		<returns>
			<para>A string containing the <see cref="System.Exception.HResult"/>, <see cref="System.Exception.Message"/>,
<see cref="System.Exception.InnerException"/>, and <see cref="System.Exception.StackTrace"/> properties of the
   exception.</para>
		</returns>
		<seealso cref="System.Exception.HResult"/>
		<seealso cref="System.Exception.Message"/>
		<seealso cref="System.Exception.InnerException"/>
		<seealso cref="System.Exception.StackTrace"/>
	</doc>
	<doc for="COMException">
		<summary>
			<para>The exception that is thrown when an unrecognized HRESULT is returned from a COM
      method call.</para>
		</summary>
		<remarks>
			<para>The common language runtime transforms well-known
      HRESULTs to .NET exceptions, enabling COM objects to return meaningful error
      information to managed clients. The HRESULT to exception mapping also works in
      the other direction by returning specific HRESULTs to unmanaged clients. For
      mapping details, see <see topic="cpconhresultsexceptions"/>.
      </para>
			<para>When the runtime encounters an unfamiliar HRESULT (an HRESULT
      that lacks a specific, corresponding exception), it throws an instance of
      the <see cref="System.Runtime.InteropServices.COMException"/>
      class. This all-purpose exception exposes the same members as
      any exception, and includes a public <see langword="ErrorCode"/>
      property that contains the HRESULT returned by the callee. If an error message is
      available to the runtime (obtained from the <see langword="IErrorInfo"/>
      interface or the <see langword="Err"/> object in Visual Basic, or in some
      cases from the operating system), the message is returned to the caller.
      However, if the COM component developer fails to include an error message,
      the runtime returns the eight-digit HRESULT in place of a message
      string. Having an
      
      HRESULT allows the caller to determine the cause
      of the generic exception. </para>
			<para> Although you can use the <see cref="System.Runtime.InteropServices.COMException"/> class to return specific HRESULTs
   to unmanaged clients, throwing a specific .NET exception is
   better than using a generic exception. Consider that managed
   clients as well as unmanaged clients can use your .NET object, and
   throwing an HRESULT to a managed caller is less comprehendible
   than throwing an exception.</para>
		</remarks>
		<seealso cref="System.Exception"/>
		<seealso topic="cpconHandlingThrowingExceptions"/>
	</doc>
	<doc for="COMException.COMException">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.InteropServices.COMException"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.InteropServices.COMException"/>
class with default values.</para>
		</summary>
		<remarks>
			<para><see cref="System.Runtime.InteropServices.COMException"/>
inherits from <see cref="System.Runtime.InteropServices.ExternalException"/>. The
following table shows how this constructor
sets the properties of the <see cref="System.Exception"/>
object.</para>
			<list type="table"><listheader>
					<term>Property</term>
					<description>Value</description>
				</listheader>
				<item>
					<term><see cref="System.Exception.InnerException"/></term>
					<description><see langword="null"/>.</description>
				</item>
				<item>
					<term><see cref="System.Exception.Message"/></term>
					<description>A
   localized error message string.</description>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="COMException.COMException1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.InteropServices.COMException"/> class 
   with a specified message.</para>
		</summary>
		<param name="message">The message that indicates the reason for the exception.</param>
		<remarks>
			<para><see cref="System.Runtime.InteropServices.COMException"/> inherits from <see cref="System.Runtime.InteropServices.ExternalException"/>. The 
   following table shows how this constructor sets the
   properties of the <see cref="System.Exception"/> object. </para>
			<list type="table"><listheader>
					<term>Property</term>
					<description>Value</description>
				</listheader>
				<item>
					<term><see cref="System.Exception.InnerException"/></term>
					<description><see langword="null"/></description>
				</item>
				<item>
					<term><see cref="System.Exception.Message"/></term>
					<description><paramref name="message"/></description>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="COMException.COMException2">
		<summary>
			<para>Initializes a new instance of the
   <see cref="System.Runtime.InteropServices.COMException"/>
   class with a specified error message and a reference to the
   inner exception that is the cause of this exception.</para>
		</summary>
		<param name="message">The error message that explains the reason for the exception.</param>
		<param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner"/> parameter is not <see langword="null"/>, the current exception is raised in a <see langword="catch"/> block that handles the inner exception.</param>
		<remarks>
			<para>An exception that is thrown as a direct result of a
      previous exception should include a reference to the previous exception in
      the <see cref="System.Exception.InnerException"/> property. The
   <see cref="System.Exception.InnerException"/>
   property returns the same value that is passed into the constructor, or
<see langword="null"/> if the <see cref="System.Exception.InnerException"/> 
property does not supply the inner exception value to
the constructor. </para>
			<para>The following table shows how this constructor sets the 
   properties of the <see cref="System.Exception"/> object.</para>
			<list type="table"><listheader>
					<term>Property</term>
					<description>Value</description>
				</listheader>
				<item>
					<term><see cref="System.Exception.InnerException"/></term>
					<description>The inner exception reference.</description>
				</item>
				<item>
					<term><see cref="System.Exception.Message"/></term>
					<description>The error message string.</description>
				</item>
			</list>
		</remarks>
		<seealso cref="System.Exception"/>
		<seealso topic="cpconHandlingThrowingExceptions"/>
	</doc>
	<doc for="COMException.COMException3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.InteropServices.COMException"/> class 
   with a specified message and error code.</para>
		</summary>
		<param name="message">The message that indicates the reason the exception occurred.</param>
		<param name="errorCode">The error code (HRESULT) value associated with this exception.</param>
		<remarks>
			<para>This <see cref="System.Runtime.InteropServices.COMException"/> constructor sets the base message
   with the error code.</para>
			<see cref="System.Runtime.InteropServices.COMException"/> inherits from <see cref="System.Runtime.InteropServices.ExternalException"/>. The 
following table shows how this constructor sets the properties of the <see cref="System.Exception"/> object.
<list type="table"><listheader>
					<term>Property</term>
					<description>Value</description>
				</listheader>
				<item>
					<term><see cref="System.Exception.InnerException"/></term>
					<description><see langword="null"/></description>
				</item>
				<item>
					<term><see cref="System.Exception.Message"/></term>
					<description><paramref name="message"/></description>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="COMException.COMException4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.InteropServices.COMException"/> class from serialization data.</para>
		</summary>
		<param name="info">The <see cref="System.Runtime.Serialization.SerializationInfo"/> object that holds the serialized object data.</param>
		<param name=" context">The <see cref="System.Runtime.Serialization.StreamingContext"/> object that supplies the contextual information about the source or destination.</param>
		<exception cref="System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>This constructor is called during deserialization to reconstitute the
      exception object transmitted over a stream. For more information, see <see topic="cpconSerialization"/>.</para>
			<para><see cref="System.Runtime.InteropServices.COMException"/> inherits from <see cref="System.Runtime.InteropServices.ExternalException"/>. </para>
		</remarks>
		<seealso cref="System.Runtime.InteropServices.ExternalException"/>
	</doc>
</docs>
