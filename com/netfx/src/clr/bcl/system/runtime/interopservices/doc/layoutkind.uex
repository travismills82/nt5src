<docs>
	<doc for="LayoutKind.Explicit">
		<summary>
			<para> The precise position of each member of an object in unmanaged memory is
      explicitly controlled. Each member must
      use the <see cref="System.Runtime.InteropServices.FieldOffsetAttribute"/> to indicate the position of that
      field within the type.</para>
		</summary>
	</doc><doc for="LayoutKind.Auto">
		<summary>
			<para> The runtime automatically chooses an appropriate layout 
      for the members of an object in
      unmanaged memory. Objects defined with this enumeration member cannot be exposed
      outside of managed code. Attempting to do so generates an exception.</para>
		</summary>
	</doc>
	<doc for="LayoutKind">
		<summary>
			<para> Controls the layout of an object when exported
      to unmanaged code.</para>
		</summary>
		<remarks>
			<para>This enumeration is used with <see cref="System.Runtime.InteropServices.StructLayoutAttribute"/>. The
   common language runtime uses the <see langword="Auto"/> layout value by
   default. To reduce layout-related problems associated with
   the <see langword="Auto"/> value, C#, Visual Basic .NET, and C++ compilers
   specify <see langword="Sequential"/>
   layout
   for value types.</para>
		</remarks>
		<example>
			<para>The following example shows the managed declaration
      of the <see langword="PtInRect"/> function, which checks
      whether a point lies within a rectangle, and defines
      a <see langword="Point"/>
      structure
      with <see cref="System.Runtime.InteropServices.LayoutKind.Sequential"/> layout and
      a <see langword="Rect"/> structure
      with <see cref="System.Runtime.InteropServices.LayoutKind.Explicit"/> layout. </para>
			<codelink SampleID="LayoutKind" SnippetID="1"/>
		</example>
	</doc>
	<doc for="LayoutKind.Sequential">
		<summary>
			<para> The members of the object are laid out
      sequentially, in the order in which they appear when exported to unmanaged
      memory. The members are laid out according to the packing specified in <see cref="System.Runtime.InteropServices.StructLayoutAttribute.Pack" qualify="true"/>, and can be
      noncontiguous.
      </para>
		</summary>
	</doc>
</docs>
