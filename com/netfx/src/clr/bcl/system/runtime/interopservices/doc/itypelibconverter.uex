<docs>
	<doc for="ImporterEventKind">
		<summary>
			<para>Describes the callbacks that the type library importer makes when importing a
 type library.</para>
		</summary>
		<remarks>
			<para>The type library importer passes the values of this enumeration to
 the <see cref="System.Runtime.InteropServices.ITypeLibExporterNotifySink.ReportEvent"/> method of an
 object which implements the <see cref="System.Runtime.InteropServices.ITypeLibExporterNotifySink"/>
 interface. The value passed identifies the specific kind of event
 being reported.</para>
		</remarks>
	</doc><doc for="ExporterEventKind">
		<summary>
			<para> Describes the callbacks that
 the type library exporter makes when exporting a type library.</para>
		</summary>
		<remarks>
			<para>The type library exporter passes the values of this enumeration to
 the <see cref="System.Runtime.InteropServices.ITypeLibExporterNotifySink.ReportEvent"/> method of an
 object which implements the <see cref="System.Runtime.InteropServices.ITypeLibExporterNotifySink"/>
 interface. The value passed identifies the specific kind of event being
 reported.</para>
		</remarks>
	</doc><doc for="TypeLibExporterFlags.OnlyReferenceRegistered">
		<summary>
			<para>Export references to types that were imported from COM as 
 <see langword="IUnknown"/> if the type does not have a registered type 
 library.</para>
		</summary>
	</doc><doc for="ITypeLibImporterNotifySink.ResolveRef">
		<summary>
			<para>Asks the user to resolve a reference to
 another type library.</para>
		</summary>
		<param name="typeLib">The object implementing the <see langword="ITypeLib"/> interface that needs to be resolved.</param>
		<returns>
			<para> The assembly corresponding to
 <paramref name="typeLib"/> .</para>
		</returns>
		<remarks>
			<para> If a reference to another type library is found
 during the conversion of a type library, the caller is asked to return
 the correct assembly for that type library.</para>
		</remarks>
	</doc><doc for="ITypeLibExporterNotifySink.ResolveRef">
		<summary>
			<para>Asks the user to resolve a reference to another assembly.</para>
		</summary>
		<param name="assembly">The assembly to resolve.</param>
		<returns>
			<para> The type library for
 <paramref name="assembly"/>.</para>
		</returns>
		<remarks>
			<para>If a reference to another assembly is found during the conversion of an assembly, the
 caller is asked to return the correct type library (the object that
 implements <see langword="ITypeLib"/> interface) for that assembly.</para>
		</remarks>
	</doc><doc for="ITypeLibConverter.GetPrimaryInteropAssembly">
		<summary>
			<para> Gets the name and code base of a primary
 interop assembly for a specified type library.</para>
		</summary>
		<param name="g">The GUID of the type library.</param>
		<param name=" major">The major version number of the type library.</param>
		<param name=" minor">The minor version number of the type library.</param>
		<param name=" lcid">The LCID of the type library.</param>
		<param name=" asmName">On successful return, the name of the primary interop assembly associated with <paramref name="g"/>. </param>
		<param name=" asmCodeBase">On successful return, the code base of the primary interop assembly associated with <paramref name="g"/>.</param>
		<returns>
			<para><see langword="true"/> if the 
 primary interop assembly was found in the registry; otherwise
<see langword="false"/>.</para>
		</returns>
	</doc><doc for="TypeLibImporterFlags">
		<summary>
			<para> Indicates how an assembly
 should be produced.</para>
		</summary>
		<remarks>
			<para>Used with <see cref="System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly"/> .</para>
		</remarks>
	</doc><doc for="TypeLibImporterFlags.UnsafeInterfaces">
		<summary>
			<para>Imports all interfaces as interfaces that suppress the
 common language runtime's stack crawl for <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/>
 permission. Be sure you understand the responsibilities associated with
 suppressing this security check.</para>
		</summary>
	</doc><doc for="TypeLibExporterFlags">
		<summary>
			<para> Indicates how a type library
 should be produced.</para>
		</summary>
		<remarks>
			<para>Used with
 <see cref="System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib"/>.</para>
		</remarks>
	</doc><doc for="TypeLibImporterFlags.PrimaryInteropAssembly">
		<summary>
			<para> Generates a primary interop assembly.
 See <see cref="System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute"/> for
 details. A keyfile must
 be specified.</para>
		</summary>
	</doc><doc for="ExporterEventKind.ERROR_REFTOINVALIDASSEMBLY">
		<summary>
			<para> This value is not supported in
 this version of the .NET Framework.</para>
		</summary>
	</doc><doc for="ImporterEventKind.ERROR_REFTOINVALIDTYPELIB">
		<summary>
 This property is not supported in this version of the
 .NET Framework.
</summary>
	</doc><doc for="ITypeLibImporterNotifySink">
		<summary>
			<para> Provides a callback mechanism for
 the type library converter to inform the caller of the status of the conversion, and
 involve the caller in the conversion process itself.</para>
		</summary>
		<remarks>
			<para>This interface is used in the process of converting a COM type
 library to a managed assembly.</para>
		</remarks>
	</doc><doc for="ITypeLibImporterNotifySink.ReportEvent">
		<summary>
			<para> Notifies the caller that an event occured
 during the conversion of a type library.</para>
		</summary>
		<param name="eventKind">An <see cref="System.Runtime.InteropServices.ImporterEventKind"/> value indicating the type of event.</param>
		<param name=" eventCode">Indicates extra information about the event.</param>
		<param name=" eventMsg">A message generated by the event.</param>
		<remarks>
			<para>If the event being reported is a warning or
 an error, <paramref name="eventCode"/> will contain the HRESULT of the
 error. For any other event it will be 0.</para>
		</remarks>
	</doc><doc for="ITypeLibExporterNotifySink">
		<summary>
			<para> Provides a callback mechanism for the assembly converter to
 inform the caller of the status of the conversion, and involve the caller in the
 conversion process itself.</para>
		</summary>
		<remarks>
			<para>This interface is used in the process of converting a managed assembly
 to a COM type library.</para>
		</remarks>
	</doc><doc for="ITypeLibExporterNotifySink.ReportEvent">
		<summary>
			<para> Notifies the caller that an event occured during
 the conversion of an assembly.</para>
		</summary>
		<param name="eventKind">An <see cref="System.Runtime.InteropServices.ExporterEventKind"/> value indicating the type of event.</param>
		<param name=" eventCode">Indicates extra information about the event.</param>
		<param name=" eventMsg">A message generated by the event.</param>
		<remarks>
			<para>If the event being reported is a warning or
 an error, <paramref name="eventCode"/> will contain the HRESULT of the
 error. For any other event it will be 0.</para>
		</remarks>
	</doc><doc for="ITypeLibConverter">
		<summary>
			<para>Provides a set of services that convert a managed 
 assembly to a COM type library and vice versa.</para>
		</summary>
	</doc><doc for="ITypeLibConverter.ConvertTypeLibToAssembly">
		<overload>
			<para>Converts a COM type library to an assembly.</para>
		</overload>
		<summary>
			<para>Converts a COM type library to an assembly.</para>
		</summary>
		<param name="typeLib">The object that implements the <see langword="ITypeLib"/> interface.</param>
		<param name=" asmFileName">The file name of the resulting assembly.</param>
		<param name=" flags">A <see cref="System.Runtime.InteropServices.TypeLibImporterFlags"/> value indicating any special settings.</param>
		<param name=" notifySink"><see cref="System.Runtime.InteropServices.ITypeLibImporterNotifySink"/> interface implemented by the caller.</param>
		<param name=" publicKey">A <see langword="byte"/> array containing the public key.</param>
		<param name=" keyPair">A <see cref="System.Reflection.StrongNameKeyPair"/> object containing the public and private cryptographic key pair.</param>
		<param name=" asmNamespace">The namespace for the resulting assembly.</param>
		<param name=" asmVersion">The version of the resulting assembly. If<see langword=" null"/>, the version of the type library is used.</param>
		<returns>
			<para>An <see cref="System.Reflection.Emit.AssemblyBuilder"/> object containing the converted type
 library.</para>
		</returns>
		<remarks>
			<para>For more information on
 <see langword="ITypeLib"/>, please see its existing documentation in the MSDN library.</para>
		</remarks>
	</doc><doc for="ITypeLibConverter.ConvertAssemblyToTypeLib">
		<summary>
			<para>Converts an assembly to a COM type library.</para>
		</summary>
		<param name="assembly">The assembly to convert.</param>
		<param name=" typeLibName">The file name of the resulting type library.</param>
		<param name=" flags">A <see cref="System.Runtime.InteropServices.TypeLibExporterFlags"/> value indicating any special settings.</param>
		<param name=" notifySink">The <see cref="System.Runtime.InteropServices.ITypeLibExporterNotifySink"/> interface implemented by the caller.</param>
		<returns>
			<para>An object that implements the <see langword="ITypeLib"/> interface.</para>
		</returns>
		<remarks>
			<para>For more information on
 <see langword="ITypeLib"/>, please see its existing documentation in the MSDN library.</para>
		</remarks>
	</doc><doc for="ITypeLibConverter.ConvertTypeLibToAssembly1">
		<summary>
			<para>Converts a COM type library to an assembly.</para>
		</summary>
		<param name="typeLib">The object that implements the <see langword="ITypeLib"/> interface.</param>
		<param name=" asmFileName">The file name of the resulting assembly.</param>
		<param name=" flags">A <see cref="System.Runtime.InteropServices.TypeLibImporterFlags"/> value indicating any special settings.</param>
		<param name=" notifySink"><see cref="System.Runtime.InteropServices.ITypeLibImporterNotifySink"/> interface implemented by the caller.</param>
		<param name=" publicKey">A <see langword="byte"/> array containing the public key.</param>
		<param name=" keyPair">A <see cref="System.Reflection.StrongNameKeyPair"/> object containing the public and private cryptographic key pair.</param>
		<param name=" unsafeInterfaces">If <see langword="true"/> , the interfaces require link time checks for <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode"/> permission. If <see langword="false"/>, the interfaces require run time checks that require a stack walk and are more expensive, but are more secure.</param>
		<returns>
			<para>An <see cref="System.Reflection.Emit.AssemblyBuilder"/> object containing the converted type
 library.</para>
		</returns>
		<remarks>
			<para>For more information on
 <see langword="ITypeLib"/>, please see its existing documentation in the MSDN
 library.</para>
		</remarks>
	</doc><doc for="TypeLibImporterFlags.SafeArrayAsSystemArray">
		<summary>
			<para>Imports all <see langword="SAFEARRAY"/>s a <see cref="System.Array" qualify="true"/> rather than a typed,
   single dimenional, zero-based managed array. This option is useful when dealing
   with multi dimensional, non zero-based <see langword="SAFEARRAY"/>s which otherwise can
   not be accessed unless you edit the resulting assembly using the ILDASM and ILASM tools.</para>
		</summary>
	</doc><doc for="ITypeLibExporterNameProvider">
		<summary>
			<para> Provides control over the casing of names
      when exported to a type library.</para>
		</summary>
		<remarks>
			<para>In order to control how types are named when exported to
      a type library, an object must implement this interface, as well as <see cref="System.Runtime.InteropServices.ITypeLibExporterNotifySink"/>
      . You then pass this object as the last
      parameter to <see cref="System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib"/>.</para>
		</remarks>
	</doc><doc for="ITypeLibExporterNameProvider.GetNames">
		<summary>
			<para>Returns a list of names to control the casing of.</para>
		</summary>
		<returns>
			<para>An array of strings, where each
      element contains the name of a type to control casing for.</para>
		</returns>
		<remarks>
			<para> Names in the array returned from
      this method must be unique. If a name appears twice in the array of names, even
      with different casing, the first occurance takes precedence.</para>
		</remarks>
	</doc><doc for="ImporterEventKind.NOTIF_TYPECONVERTED">
		<summary>
			<para> Specifies that the event is invoked when a type has been imported.</para>
		</summary>
	</doc>
	<doc for="ImporterEventKind.NOTIF_CONVERTWARNING">
		<summary>
			<para>Specifies that the event is invoked when a warning occurs during conversion.</para>
		</summary>
	</doc>
	<doc for="ExporterEventKind.NOTIF_TYPECONVERTED">
		<summary>
			<para> Specifies that the event is invoked when a type has been exported.</para>
		</summary>
	</doc>
	<doc for="ExporterEventKind.NOTIF_CONVERTWARNING">
		<summary>
			<para>Specifies that the event is invoked when a warning occurs during conversion.</para>
		</summary>
	</doc>
</docs>
