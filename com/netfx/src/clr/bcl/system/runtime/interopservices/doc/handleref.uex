<docs>
	<doc for="HandleRef.Wrapper">
		<summary>
			<para>Gets the object holding the handle to a resource.</para>
		</summary>
		<value>
   The object holding the handle to a
   resource.
</value>
	</doc><doc for="HandleRef.Handle">
		<summary>
			<para>Gets the handle to a resource.</para>
		</summary>
		<value>
   The handle to a resource.
</value>
	</doc><doc for="HandleRef.HandleRef">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.InteropServices.HandleRef"/> class with the object to wrap and a handle
   to the resource used by unmanaged code.</para>
		</summary>
		<param name="wrapper">A managed object that should not be finalized until the platform invoke call returns.</param>
		<param name=" handle">An <see cref="System.IntPtr"/> that indicates a handle to a resource.</param>
	</doc>
	<doc for="HandleRef">
		<summary>
			<para>Wraps a managed object holding a handle to a resource that is passed to unmanaged
      code using platform invoke.</para>
		</summary>
		<remarks>
			<para> If you use platform invoke to call a managed object,
      and the object is not referenced elsewhere after
      the platform invoke call, it is possible for the garbage collector to finalize
      the managed object. This action releases the resource and invalidates the
      handle, causing the platform invoke call to fail. Wrapping a handle with <see cref="System.Runtime.InteropServices.HandleRef"/> guarantees that the managed
      object is not garbage collected until the platform invoke call completes. For
      a description of platform invoke services, see <see topic="cpconconsumingunmanageddllfunctions"/>.
      </para>
			<para>The <see cref="System.Runtime.InteropServices.HandleRef"/> value type, like
<see cref="System.Runtime.InteropServices.GCHandle"/>, is a special type recognized by 
   the interop marshaler. A normal, nonpinned <see cref="System.Runtime.InteropServices.GCHandle"/> also prevents untimely garbage
   collection, yet <see cref="System.Runtime.InteropServices.HandleRef"/>
   provides better performance. Although using <see cref="System.Runtime.InteropServices.HandleRef"/> to keep an
   object alive for the duration of a platform invoke call is preferred, you
   can also use the <see cref="System.GC.KeepAlive" qualify="true"/> method for the same purpose. </para>
			<para> The <see cref="System.Runtime.InteropServices.HandleRef"/> constructor takes two parameters:
an <see cref="System.Object"/> representing the wrapper, and an <see cref="System.IntPtr"/> representing the
unmanaged handle. The interop marshaler passes only
the handle to unmanaged code, and guarantees that the wrapper (passed as
the first parameter to the constructor of the <see langword="HandleRef"/>) remains alive for the duration of the
call. </para>
		</remarks>
		<example>
			<para> The following example shows how to use <see cref="System.Runtime.InteropServices.HandleRef"/>
to keep alive an object passed as the first parameter. The interop
marshaler passes only the handle to unmanaged code. </para>
			<codelink SampleID="Interop HandleRef" SnippetID="1"/>
		</example>
		<seealso cref="System.Runtime.InteropServices.GCHandle"/>
	</doc>
	<doc for="HandleRef.operatorIntPtr">
		<summary>
			<para>Returns the handle to a resource of the
      specified <see cref="System.Runtime.InteropServices.HandleRef"/> object.</para>
		</summary>
		<altmember cref="System.Runtime.InteropServices.HandleRef.Handle"/>
		<param name="value">The object that needs a handle.</param>
		<returns>
			<para>The handle to a resource of the specified <see cref="System.Runtime.InteropServices.HandleRef"/> object.</para>
		</returns>
	</doc>
</docs>
