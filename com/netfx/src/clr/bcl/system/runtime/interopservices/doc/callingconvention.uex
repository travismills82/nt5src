<docs>
	<doc for="CallingConvention.ThisCall">
		<summary>
			<para>The first parameter is the <see langword="this"/> pointer and is
   stored in register ECX. Other parameters are pushed on the stack. This calling
   convention is used to call methods on classes exported from an unmanaged DLL.</para>
		</summary>
	</doc><doc for="CallingConvention.StdCall">
		<summary>
			<para>The callee cleans the stack. This is the default convention for calling
      unmanaged functions with platform invoke.</para>
		</summary>
	</doc>
	<doc for="CallingConvention.Cdecl">
		<summary>
			<para> The caller cleans the stack. This
      enables calling functions with <see langword="varargs"/>, which makes it
      appropriate to use for methods that accept a variable number of parameters, such
      as <see langword="Printf"/>.</para>
		</summary>
	</doc>
	<doc for="CallingConvention.Winapi">
		<summary>
			<para> This member is not actually a calling convention, but instead uses the default platform calling convention. For example,
      on Windows the default is <see cref="System.Runtime.InteropServices.CallingConvention.StdCall"/> and on Windows CE
      .NET it is <see cref="System.Runtime.InteropServices.CallingConvention.Cdecl"/>.</para>
		</summary>
	</doc>
	<doc for="CallingConvention">
		<summary>
			<para>Specifies the calling convention required to call methods implemented in unmanaged code.</para>
		</summary>
		<remarks>
			<para>Always use the <see cref="System.Runtime.InteropServices.CallingConvention"/> 
enumeration rather than the <see cref="System.Runtime.InteropServices.CALLCONV"/>
enumeration to specify a calling convention in managed code. The latter exists
only for the sake of COM definitions. The <see cref="System.Runtime.InteropServices.CallingConvention"/>
enumeration is used by <see cref="System.Runtime.InteropServices.DllImportAttribute"/> and several classes in <see cref="System.Reflection.Emit"/> to dynamically
emit platform invoke signatures.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to apply
      the <see langword="Cdecl"/> calling convention, which you must
      use because the stack is cleaned up by the caller.</para>
			<codelink SampleID="Interop CallingConvention" SnippetID="1"/>
		</example>
		<seealso cref="System.Runtime.InteropServices.DllImportAttribute"/>
		<seealso cref="System.Reflection.Emit"/>
	</doc>
	<doc for="CallingConvention.FastCall">
		<summary>
			<para> This calling
      convention is not supported.</para>
		</summary>
	</doc>
</docs>
