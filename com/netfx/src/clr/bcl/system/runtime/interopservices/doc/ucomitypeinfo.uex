<docs>
	<doc for="FUNCKIND.FUNC_VIRTUAL">
		<summary>
			<para>The function is accessed the same as <see cref="System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL"/>, except the function has an implementation.</para>
		</summary>
	</doc><doc for="TYPEKIND.TKIND_ENUM">
		<summary>
			<para>A set of enumerators.</para>
		</summary>
	</doc><doc for="TYPEKIND.TKIND_RECORD">
		<summary>
			<para>A structure with no methods.</para>
		</summary>
	</doc><doc for="TYPEKIND.TKIND_MODULE">
		<summary>
			<para>A module that can only have static functions and data 
      (for example, a DLL).</para>
		</summary>
	</doc><doc for="TYPEKIND.TKIND_INTERFACE">
		<summary>
   A type that has virtual functions, all of which are
   pure.
		</summary>
	</doc><doc for="TYPEKIND.TKIND_DISPATCH">
		<summary>
			<para>A set of methods and properties that are accessible 
      through <see langword="IDispatch::Invoke"/>. By default, dual interfaces return
   <see langword="TKIND_DISPATCH"/> .</para>
		</summary>
	</doc><doc for="TYPEKIND.TKIND_ALIAS">
		<summary>
   A type that is an alias for another type.
		</summary>
	</doc><doc for="TYPEKIND.TKIND_MAX">
		<summary>
			<para>End of enumeration marker.</para>
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
		<summary>
			<para>A type description that describes an Application object.</para>
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FCANCREATE">
		<summary>
			<para>Instances of the type can be created by 
   <see langword="ITypeInfo::CreateInstance"/> .</para>
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FLICENSED">
		<summary>
			<para>The type is licensed.</para>
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FPREDECLID">
		<summary>
   The type is predefined. The client application should
   automatically create a single instance of the object that has this attribute.
   The name of the variable that points to the object is the same as the class name
   of the object.
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FHIDDEN">
		<summary>
			<para>The type should not be displayed to browsers.</para>
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FCONTROL">
		<summary>
			<para>The type is a control from which other types will be 
      derived, and should not be displayed to users.</para>
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FDUAL">
		<summary>
			<para>The interface supplies both <see langword="IDispatch"/> and VTBL 
   binding.<see langword=" "/>
			</para>
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
		<summary>
			<para>The interface cannot add members at run time.</para>
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
		<summary>
			<para>The types used in the interface are fully compatible 
      with Automation, including VTBL binding support. Setting dual on an
      interface sets this flag in addition to <see cref="System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL"/>. Not allowed on dispinterfaces.</para>
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FRESTRICTED">
		<summary>
			<para>Should not be accessible from macro languages. This flag 
      is intended for system-level types or types that type browsers should not display.</para>
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
		<summary>
			<para>The class supports aggregation.</para>
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
		<summary>
			<para>Indicates that the interface derives from <see langword="IDispatch"/>, either 
   directly or indirectly. This flag is computed, there is no Object Description
   Language for the flag.</para>
		</summary>
	</doc><doc for="IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
		<summary>
			<para>The interface or dispinterface represents the default 
      for the source or sink.</para>
		</summary>
	</doc><doc for="IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
		<summary>
			<para>This member of a coclass is called rather than implemented.</para>
		</summary>
	</doc><doc for="IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
		<summary>
			<para>The member should not be displayed or programmable by users.</para>
		</summary>
	</doc><doc for="IDLFLAG.IDLFLAG_NONE">
		<summary>
			<para>Whether the parameter passes or receives information is unspecified.</para>
		</summary>
	</doc><doc for="FUNCKIND.FUNC_PUREVIRTUAL">
		<summary>
			<para>The function is accessed through the virtual function 
      table (VTBL), and takes an implicit <see langword="this"/>
      pointer.</para>
		</summary>
	</doc><doc for="FUNCKIND.FUNC_NONVIRTUAL">
		<summary>
			<para>The function is accessed by <see langword="static"/> address and takes an implicit
<see langword="this"/> pointer.</para>
		</summary>
	</doc><doc for="FUNCKIND.FUNC_STATIC">
		<summary>
			<para>The function is accessed by <see langword="static"/> address and does
   not take an implicit <see langword="this"/> pointer.</para>
		</summary>
	</doc><doc for="INVOKEKIND.INVOKE_FUNC">
		<summary>
			<para>The member is called using a normal function invocation syntax.</para>
		</summary>
	</doc><doc for="INVOKEKIND.INVOKE_PROPERTYGET">
		<summary>
			<para>The function is invoked using a normal property-access syntax.</para>
		</summary>
	</doc><doc for="INVOKEKIND.INVOKE_PROPERTYPUT">
		<summary>
			<para>The function is invoked using a property value 
      assignment syntax.</para>
		</summary>
	</doc><doc for="INVOKEKIND.INVOKE_PROPERTYPUTREF">
		<summary>
			<para>The function is invoked using a property reference 
      assignment syntax.</para>
		</summary>
	</doc><doc for="FUNCFLAGS.FUNCFLAG_FRESTRICTED">
		<summary>
			<para>The function should not be accessible from macro
   languages. This flag is intended for system-level functions or functions that
   type browsers should not display.</para>
		</summary>
	</doc><doc for="FUNCFLAGS.FUNCFLAG_FSOURCE">
		<summary>
			<para>The function returns an object that is a source of events.</para>
		</summary>
	</doc><doc for="FUNCFLAGS.FUNCFLAG_FBINDABLE">
		<summary>
			<para>The function that supports data binding.</para>
		</summary>
	</doc><doc for="FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
		<summary>
			<para>When set, any call to a method that sets the property 
      results first in a call to <see langword="IPropertyNotifySink::OnRequestEdit"/>. The
      implementation of <see langword="OnRequestEdit"/> determines if the call is allowed to set the property.</para>
		</summary>
	</doc><doc for="FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
		<summary>
			<para>The function that best represents the object.<see langword=" "/>Only 
   one function in a type information can have this attribute.</para>
		</summary>
	</doc><doc for="FUNCFLAGS.FUNCFLAG_FHIDDEN">
		<summary>
			<para>The function should not be displayed to the user, 
      although it exists and is bindable.</para>
		</summary>
	</doc><doc for="FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
		<summary>
			<para>The function supports <see langword="GetLastError"/>. If an error 
   occurs during the function, the caller can call <see langword="GetLastError"/> to retrieve
   the error code.</para>
		</summary>
	</doc><doc for="FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
		<summary>
			<para>The type information member is the default member for 
      display in the user interface.</para>
		</summary>
	</doc><doc for="FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
		<summary>
			<para>The property appears in an object browser, but not in a 
      properties browser.</para>
		</summary>
	</doc><doc for="FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
		<summary>
			<para>Tags the interface as having default behaviors.</para>
		</summary>
	</doc><doc for="FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
		<summary>
			<para>Mapped as individual bindable properties.</para>
		</summary>
	</doc><doc for="VARFLAGS.VARFLAG_FREADONLY">
		<summary>
			<para>Assignment to the variable should not be allowed.</para>
		</summary>
	</doc><doc for="VARFLAGS.VARFLAG_FSOURCE">
		<summary>
			<para>The variable returns an object that is a source of events.</para>
		</summary>
	</doc><doc for="VARFLAGS.VARFLAG_FBINDABLE">
		<summary>
			<para>The variable supports data binding.</para>
		</summary>
	</doc><doc for="VARFLAGS.VARFLAG_FREQUESTEDIT">
		<summary>
			<para>When set, any attempt to directly change the property
   results in a call to <see langword="IPropertyNotifySink::OnRequestEdit"/>. The
   implementation of <see langword="OnRequestEdit"/> determines if the change is accepted.</para>
		</summary>
	</doc><doc for="VARFLAGS.VARFLAG_FDEFAULTBIND">
		<summary>
			<para>The variable is the single property that best represents 
      the object. Only one variable in type information can have this
      attribute.</para>
		</summary>
	</doc><doc for="VARFLAGS.VARFLAG_FHIDDEN">
		<summary>
			<para>The variable should not be displayed to the user in a 
      browser, although it exists and is bindable.</para>
		</summary>
	</doc><doc for="VARFLAGS.VARFLAG_FRESTRICTED">
		<summary>
			<para>The variable should not be accessible from macro
   languages. This flag is intended for system-level variables or variables that
   you do not want type browsers to display.</para>
		</summary>
	</doc><doc for="VARFLAGS.VARFLAG_FUIDEFAULT">
		<summary>
			<para>The variable is the default display in the user interface.</para>
		</summary>
	</doc><doc for="VARFLAGS.VARFLAG_FNONBROWSABLE">
		<summary>
			<para>The variable appears in an object browser, but not in a 
      properties browser.</para>
		</summary>
	</doc><doc for="VARFLAGS.VARFLAG_FREPLACEABLE">
		<summary>
			<para>Tags the interface as having default behaviors.</para>
		</summary>
	</doc><doc for="VARFLAGS.VARFLAG_FIMMEDIATEBIND">
		<summary>
			<para>The variable is mapped as individual bindable properties.</para>
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
		<summary>
   The object supports
<see langword="IConnectionPointWithDefault"/>, and has default behaviors.
</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
		<summary>
			<para>Indicates base interfaces should be checked for 
      name resolution before checking children, the reverse of the default behavior.</para>
		</summary>
	</doc><doc for="TYPEFLAGS.TYPEFLAG_FPROXY">
		<summary>
   Indicates that the interface will be using a
   proxy/stub dynamic link library. This flag specifies that the type library proxy
   should not be unregistered when the type library is unregistered.
</summary>
	</doc><doc for="VARFLAGS.VARFLAG_FDISPLAYBIND">
		<summary>
			<para>The variable is displayed to the user as 
      bindable. <see cref="System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE"/>
      must also be set.</para>
		</summary>
	</doc><doc for="VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
		<summary>
			<para>Permits an optimization in which the compiler looks for a
      member named "xyz" on the type of "abc". If such a member is found and is flagged
      as an accessor function for an element of the default collection, then a call is
      generated to that member function. Permitted on members in dispinterfaces and
      interfaces; not permitted on modules.</para>
		</summary>
	</doc><doc for="TYPEKIND.TKIND_COCLASS">
		<summary>
			<para> A set of implemented components interfaces.</para>
		</summary>
	</doc><doc for="PARAMFLAG.PARAMFLAG_NONE">
		<summary>
   Whether the parameter passes or receives information
   is unspecified.
</summary>
	</doc><doc for="FUNCKIND.FUNC_DISPATCH">
		<summary>
			<para>The function can be accessed only through 
   <see langword="IDispatch"/> .</para>
		</summary>
	</doc><doc for="FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
		<summary>
			<para>The function that is displayed to the user as
      bindable. <see cref="System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE"/>
      must also be set.</para>
		</summary>
	</doc><doc for="IDLFLAG.IDLFLAG_FIN">
		<summary>
			<para>The parameter passes information from the caller to the callee.</para>
		</summary>
	</doc><doc for="IDLFLAG.IDLFLAG_FOUT">
		<summary>
			<para>The parameter returns information from the callee to the caller.</para>
		</summary>
	</doc><doc for="IDLFLAG.IDLFLAG_FLCID">
		<summary>
			<para>The parameter is the local identifier of a client application.</para>
		</summary>
	</doc><doc for="IDLFLAG.IDLFLAG_FRETVAL">
		<summary>
			<para>The parameter is the return value of the member.</para>
		</summary>
	</doc><doc for="IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
		<summary>
			<para>Sinks receive events through the virtual function table (VTBL).</para>
		</summary>
	</doc><doc for="PARAMFLAG.PARAMFLAG_FIN">
		<summary>
			<para>The parameter passes information from the caller to the callee.</para>
		</summary>
	</doc><doc for="PARAMFLAG.PARAMFLAG_FOUT">
		<summary>
			<para>The parameter returns information from the callee to the caller.</para>
		</summary>
	</doc><doc for="PARAMFLAG.PARAMFLAG_FLCID">
		<summary>
			<para>The parameter is the local identifier of a client application.</para>
		</summary>
	</doc><doc for="PARAMFLAG.PARAMFLAG_FRETVAL">
		<summary>
			<para>The parameter is the return value of the member.</para>
		</summary>
	</doc><doc for="PARAMFLAG.PARAMFLAG_FOPT">
		<summary>
			<para>The parameter is optional.</para>
		</summary>
	</doc><doc for="PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
		<summary>
			<para>The parameter has custom data.</para>
		</summary>
	</doc><doc for="ELEMDESC.DESCUNION">
		<summary>
			<para>Contains information about an element.</para>
		</summary>
	</doc><doc for="VARDESC.DESCUNION">
		<summary>
			<para>Contains information about a variable.</para>
		</summary>
	</doc><doc for="DESCUNION.oInst">
		<summary>
			<para>Indicates the offset of this variable within the instance.</para>
		</summary>
	</doc><doc for="DESCUNION.lpvarValue">
		<summary>
			<para> Describes a symbolic constant.</para>
		</summary>
	</doc><doc for="IDLFLAG">
		<summary>
			<para> Describes how to transfer a structure
      element, parameter, or function return value between processes.</para>
		</summary>
	</doc><doc for="PARAMFLAG">
		<summary>
			<para> Describes how to transfer a
      structure element, parameter, or function return value between processes.
      </para>
		</summary>
	</doc><doc for="ELEMDESC.desc">
		<summary>
			<para>Contains information about an element.</para>
		</summary>
	</doc><doc for="CALLCONV.CC_CDECL">
		<summary>
			<para>Indicates that the Cdecl calling convention is used for a method.</para>
		</summary>
	</doc><doc for="CALLCONV.CC_MSCPASCAL">
		<summary>
			<para>Indicates that the Mscpascal calling convention is used for a method.</para>
		</summary>
	</doc><doc for="CALLCONV.CC_PASCAL">
		<summary>
			<para>Indicates that the Pascal calling convention is used for a method.</para>
		</summary>
	</doc><doc for="CALLCONV.CC_MACPASCAL">
		<summary>
			<para>Indicates that the Macpascal calling convention is used for a method.</para>
		</summary>
	</doc><doc for="CALLCONV.CC_STDCALL">
		<summary>
			<para>Indicates that the Stdcall calling convention is used for a method.</para>
		</summary>
	</doc><doc for="CALLCONV.CC_RESERVED">
		<summary>
   This value is reserved for future use.
</summary>
	</doc><doc for="CALLCONV.CC_SYSCALL">
		<summary>
			<para>Indicates that the Syscall calling convention is used for a method.</para>
		</summary>
	</doc><doc for="CALLCONV.CC_MPWCDECL">
		<summary>
			<para>Indicates that the Mpwcdecl calling convention is used for a method.</para>
		</summary>
	</doc><doc for="CALLCONV.CC_MPWPASCAL">
		<summary>
			<para>Indicates that the Mpwpascal calling convention is used for a method.</para>
		</summary>
	</doc><doc for="CALLCONV.CC_MAX">
		<summary>
			<para>Indicates the end of the <see cref="System.Runtime.InteropServices.CALLCONV"/> 
enumeration.</para>
		</summary>
	</doc><doc for="VARDESC.elemdescVar">
		<summary>
			<para>Contains the variable type.</para>
		</summary>
	</doc><doc for="VARDESC.wVarFlags">
		<summary>
			<para>Defines the properties of a variable.</para>
		</summary>
	</doc><doc for="VARDESC.varkind">
		<summary>
			<para>Defines how a variable should be marshaled.</para>
		</summary>
	</doc><doc for="FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
		<summary>
			<para> Permits an optimization in which the compiler looks for
      a member named "xyz" on the type of "abc". If such a member is found, and
      is flagged as an accessor function for an element of the default collection, a
      call is generated to that member function. Permitted on members in
      dispinterfaces and interfaces; not permitted on modules.</para>
		</summary>
	</doc><doc for="DISPPARAMS.rgvarg">
		<summary>
			<para>Represents a reference to the array of arguments.</para>
		</summary>
	</doc><doc for="DISPPARAMS.rgdispidNamedArgs">
		<summary>
			<para>Represents the dispatch IDs of named arguments.</para>
		</summary>
	</doc><doc for="DISPPARAMS.cArgs">
		<summary>
			<para>Represents the count of arguments.</para>
		</summary>
	</doc><doc for="DISPPARAMS.cNamedArgs">
		<summary>
			<para>Represents the count of named arguments</para>
		</summary>
	</doc><doc for="ELEMDESC.DESCUNION.idldesc">
		<summary>
			<para>Contains information for remoting the element.</para>
		</summary>
	</doc><doc for="ELEMDESC.DESCUNION.paramdesc">
		<summary>
			<para>Contains information about the parameter.</para>
		</summary>
	</doc><doc for="EXCEPINFO.wCode">
		<summary>
			<para> Represents
      an error code identifying the error.</para>
		</summary>
	</doc><doc for="EXCEPINFO.wReserved">
		<summary>
			<para> This field is reserved; must be set to 0.</para>
		</summary>
	</doc><doc for="EXCEPINFO.bstrSource">
		<summary>
			<para>Indicates the name of the source of the exception. Typically, this
      is an application name.</para>
		</summary>
	</doc><doc for="EXCEPINFO.bstrDescription">
		<summary>
			<para> Describes the error intended for the
      customer.</para>
		</summary>
	</doc><doc for="EXCEPINFO.bstrHelpFile">
		<summary>
			<para>Contains the fully-qualified drive, path, and file name of a Help
      file with more information about the error.</para>
		</summary>
	</doc><doc for="EXCEPINFO.dwHelpContext">
		<summary>
			<para>Indicates the Help context ID of the topic within the Help file.</para>
		</summary>
	</doc><doc for="EXCEPINFO.pvReserved">
		<summary>
			<para>This field is reserved; must be set to <see langword="null"/> .</para>
		</summary>
	</doc><doc for="EXCEPINFO.pfnDeferredFillIn">
		<summary>
			<para>Represents a pointer to a function that takes an <see cref="System.Runtime.InteropServices.EXCEPINFO"/> structure as an argument and
   returns an HRESULT value. If deferred fill-in is not desired, this field is
   set to <see langword="null"/> .</para>
		</summary>
	</doc><doc for="TYPEKIND.TKIND_UNION">
		<summary>
			<para>A union of all members that have an offset of zero.</para>
		</summary>
	</doc><doc for="TYPEKIND">
		<summary>
			<para> Specifies various types of data and
      functions.</para>
		</summary>
		<remarks>
			<para> For additional information about <see langword="TYPEKIND"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="IMPLTYPEFLAGS">
		<summary>
			<para>Defines the attributes of an implemented or inherited
      interface of a type.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="IMPLTYPEFLAGS"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR">
		<summary>
			<para>Contains attributes of a
   <see langword="UCOMITypeInfo"/>.</para>
		</summary>
		<remarks>
			<para>For additional information about <see langword="TYPEATTR"/>, see the MSDN 
   Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEDESC">
		<summary>
			<para> Describes the type of a variable, return type of a
      function, or the type of a function parameter.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="ELEMDESC">
		<summary>
			<para> Contains the type description and process transfer
      information for a variable, function, or a function parameter.
      </para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="ELEMDESC"/>, see the MSDN 
      Library.</para>
		</remarks>
	</doc>
	<doc for="ELEMDESC.tdesc">
		<summary>
			<para>Identifies the type of the element.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="ELEMDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="VARDESC.memid">
		<summary>
			<para>Indicates the member ID of a variable.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="VARDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="VARDESC.lpstrSchema">
		<summary>
			<para>This field is reserved for future use.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="VARDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="DISPPARAMS">
		<summary>
			<para>Contains the arguments passed to a method or property by
   <see langword="IDispatch::Invoke"/>
   .</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="DISPPARAMS"/> 
   , see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="EXCEPINFO">
		<summary>
			<para> Describes the exceptions that occur during
   <see langword="IDispatch::Invoke"/> .</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="EXCEPINFO"/> 
   , see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCKIND">
		<summary>
			<para> Defines how to access a
      function.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCKIND"/> 
   , see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="INVOKEKIND">
		<summary>
			<para> Specifies
      how to invoke a function by <see langword="IDispatch::Invoke"/> .
      </para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="INVOKEKIND"/>, see the MSDN
      Library.</para>
		</remarks>
	</doc>
	<doc for="CALLCONV">
		<summary>
			<para> Identifies the calling convention used
      by a method described in a <see langword="METHODDATA"/>
      structure.
      </para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="CALLCONV"/> 
   , see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCFLAGS">
		<summary>
			<para> Identifies the constants that define the properties of
      a function.
      </para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCFLAGS"/> 
   , see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="VARFLAGS">
		<summary>
			<para> Identifies the constants that define the properties of
      a variable.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="VARFLAGS"/>, see the MSDN 
      Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo">
		<summary>
			<para>Managed definition of the <see langword="ITypeInfo"/> interface.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo"/> 
   , see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.GetTypeAttr">
		<summary>
			<para>Retrieves a <see cref="System.Runtime.InteropServices.TYPEATTR"/> structure that contains the
   attributes of the type description.</para>
		</summary>
		<param name="ppTypeAttr">On successful return, a reference to the structure that contains the attributes of this type description.</param>
		<remarks>
			<para> The values of <paramref name="ppTypeAttr"/> can be accessed through
<see cref="System.Runtime.InteropServices.Marshal.PtrToStructure"/> .</para>
			<para>For additional information about 
<see langword="ITypeInfo::GetTypeAttr"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.GetTypeComp">
		<summary>
			<para>Retrieves the <see langword="ITypeComp"/> interface for the type
   description, which enables a client compiler to bind to the type description's members.</para>
		</summary>
		<param name="ppTComp">On successful return, a reference to the <see langword="UCOMITypeComp"/> of the containing type library.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::GetTypeComp"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.GetFuncDesc">
		<summary>
			<para>Retrieves the <see cref="System.Runtime.InteropServices.FUNCDESC"/> structure that
   contains information about a specified function.</para>
		</summary>
		<param name="index">Index of the function description to return.</param>
		<param name=" ppFuncDesc">Reference to a <see langword="FUNCDESC"/> that describes the specified function.</param>
		<remarks>
			<para>The values of <paramref name="ppFuncDesc"/> can be accessed through
<see cref="System.Runtime.InteropServices.Marshal.PtrToStructure"/> .</para>
			<para>For additional information about 
<see langword="ITypeInfo::GetFuncDesc"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.GetVarDesc">
		<summary>
			<para>Retrieves a <see langword="VARDESC"/> structure that
   describes the specified variable.</para>
		</summary>
		<param name="index">Index of the variable description to return.</param>
		<param name=" ppVarDesc">On successful return, a reference to the <see langword="VARDESC"/> that describes the specified variable.</param>
		<remarks>
			<para>The values of <paramref name="ppVarDesc "/>can be accessed
   through <see cref="System.Runtime.InteropServices.Marshal.PtrToStructure"/>.</para>
			<para>For additional information about 
<see langword="ITypeInfo::GetVarDesc"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.GetNames">
		<summary>
			<para>Retrieves the variable with the specified member ID (or the name of the
      property or method and its parameters) that correspond to the specified function
      ID.</para>
		</summary>
		<param name="memid">The ID of the member whose name (or names) is to be returned.</param>
		<param name=" rgBstrNames">On succesful return, contains the name (or names) associated with the member. </param>
		<param name=" cMaxNames">Length of the <paramref name="rgBstrNames"/> array.</param>
		<param name=" pcNames">On succesful return, the number of names in the <paramref name="rgBstrNames"/> array.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::GetNames"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.GetRefTypeOfImplType">
		<summary>
			<para>If a type description describes a COM class, it
      retrieves the type description of the implemented interface types.</para>
		</summary>
		<param name="index">Index of the implemented type whose handle is returned.</param>
		<param name=" href">Reference to a handle for the implemented interface.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::GetRefTypeOfImplType"/>, see the MSDN
      Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.GetImplTypeFlags">
		<summary>
			<para>Retrieves the <see cref="System.Runtime.InteropServices.IMPLTYPEFLAGS"/> value for
   one implemented interface or base interface in a type description.</para>
		</summary>
		<param name="index">Index of the implemented interface or base interface.</param>
		<param name=" pImplTypeFlags">On successful return, a reference to the <see langword="IMPLTYPEFLAGS"/> enumeration.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::GetImplTypeFlags"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.GetIDsOfNames">
		<summary>
			<para>Maps between member names and member IDs, and parameter
      names and parameter IDs.</para>
		</summary>
		<param name="rgszNames">On succesful return, an array of names to map.</param>
		<param name=" cNames">Count of names to map.</param>
		<param name=" pMemId"><para>Reference to an array in which name mappings are placed.</para></param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::GetIDsOfNames"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.Invoke">
		<summary>
			<para>Invokes a method, or accesses a property of an object,
      that implements the interface described by the type description.</para>
		</summary>
		<param name="pvInstance">Reference to the interface described by this type description.</param>
		<param name="memid">Identifies the interface member.</param>
		<param name=" wFlags">Flags describing the context of the invoke call.</param>
		<param name=" pDispParams">Reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.</param>
		<param name=" pVarResult">Reference to the location at which the result is to be stored. If <paramref name="wFlags"/> specifies <see langword="DISPATCH_PROPERTYPUT"/> or <see langword="DISPATCH_PROPERTYPUTREF"/>, <paramref name="pVarResult"/> is ignored. Set to <see langword="null"/> if no result is desired.</param>
		<param name=" pExcepInfo">Points to an exception information structure, which is filled in only if <see langword="DISP_E_EXCEPTION"/> is returned.</param>
		<param name=" puArgErr">If <see langword="Invoke"/> returns <see langword="DISP_E_TYPEMISMATCH"/>, <paramref name="puArgErr"/> indicates the index within <paramref name="rgvarg"/> of the argument with incorrect type. If more than one argument returns an error, <paramref name="puArgErr"/> indicates only the first argument with an error.</param>
		<remarks>
			<para>The values of <paramref name="pDispParams "/>can be accessed
   through <see cref="System.Runtime.InteropServices.Marshal.PtrToStructure"/>.</para>
			<para>Valid values for <paramref name="wFlags"/> are:</para>
			<list type="table">
				<listheader>
					<term>Value</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> DISPATCH_METHOD</term>
					<description>The member is accessed as a method. If there is
         ambiguity, both this and the <see langword="DISPATCH_PROPERTYGET"/>
         flag can be
         set.</description>
				</item>
				<item>
					<term> DISPATCH_PROPERTYGET</term>
					<description>The member is retrieved as a property or data member.</description>
				</item>
				<item>
					<term> DISPATCH_PROPERTYPUT</term>
					<description>The member is changed as a property or data member.</description>
				</item>
				<item>
					<term> DISPATCH_PROPERTYPUTREF</term>
					<description>The member is changed by using a reference assignment, rather than a
         value assignment. This value is only valid when the property accepts a
         reference to an object.</description>
				</item>
			</list>
			<para>For additional information about 
<see langword="ITypeInfo::Invoke"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.GetDocumentation">
		<summary>
			<para>Retrieves the documentation string, the complete Help file name and path, and
      the context ID for the Help topic for a specified type description.</para>
		</summary>
		<param name="index">ID of the member whose documentation is to be returned.</param>
		<param name=" strName">On successful return, the name of the item method.</param>
		<param name=" strDocString">On successful return, the documentation string for the specified item.</param>
		<param name=" dwHelpContext">On successful return, a reference to the Help context associated with the specified item.</param>
		<param name=" strHelpFile">On successful return, the fully qualified name of the Help file.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::GetDocumentation"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.GetDllEntry">
		<summary>
			<para>Retrieves a description or specification of an entry
      point for a function in a DLL.</para>
		</summary>
		<param name="memid">ID of the member function whose DLL entry description is to be returned.</param>
		<param name=" invKind">Specifies the kind of member identified by <paramref name="memid"/>.</param>
		<param name=" pBstrDllName">If not <see langword="null"/>, the function sets <paramref name="pBstrDllName"/> to a <see langword="BSTR"/> that contains the name of the DLL.</param>
		<param name=" pBstrName">If not <see langword="null"/>, the function sets <paramref name="lpbstrName"/> to a <see langword="BSTR"/> that contains the name of the entry point.</param>
		<param name=" pwOrdinal">If not <see langword="null"/>, and the function is defined by an ordinal, then <paramref name="lpwOrdinal"/> is set to point to the ordinal.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::GetDllEntry"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.GetRefTypeInfo">
		<summary>
			<para>If a type description references other type
      descriptions, it retrieves the referenced type descriptions.</para>
		</summary>
		<param name="hRef">Handle to the referenced type description to return.</param>
		<param name=" ppTI">On successful return, the referenced type description.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::GetRefTypeInfo"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.AddressOfMember">
		<summary>
			<para>Retrieves the addresses of static functions or
      variables, such as those defined in a DLL.</para>
		</summary>
		<param name="memid">Member ID of the <see langword="static"/> member's address to retrieve.</param>
		<param name=" invKind">Specifies whether the member is a property, and if so, what kind.</param>
		<param name=" ppv">On successful return, a reference to the <see langword="static"/> member.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::AddressOfMember"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.CreateInstance">
		<summary>
			<para> Creates a new instance of a type that describes
      a component class (coclass).</para>
		</summary>
		<param name="pUnkOuter">Object which acts as the controlling <see langword="IUnknown"/>.</param>
		<param name=" riid">The IID of the interface that the caller will use to communicate with the resulting object.</param>
		<param name=" ppvObj">On successful return, a reference to the created object.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::CreateInstance"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.GetMops">
		<summary>
			<para>Retrieves marshaling information.</para>
		</summary>
		<param name="memid">The member ID that indicates which marshaling information is needed.</param>
		<param name=" pBstrMops">A reference to the opcode string used in marshaling the fields of the structure described by the referenced type description, or returns <see langword="null"/> if there is no information to return.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::GetMops"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.GetContainingTypeLib">
		<summary>
			<para>Retrieves the type library that contains this type description
      and its index within that type library.</para>
		</summary>
		<param name="ppTLB">On successful return, a reference to the containing type library.</param>
		<param name=" pIndex">On successful return, a reference to the index of the type description within the containing type library.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::GetContainingTypeLib"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.ReleaseTypeAttr">
		<summary>
			<para>Releases a <see cref="System.Runtime.InteropServices.TYPEATTR"/> previously
   returned by <see cref="System.Runtime.InteropServices.UCOMITypeInfo.GetTypeAttr"/> .</para>
		</summary>
		<param name="pTypeAttr">Reference to the <see langword="TYPEATTR"/> to release.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::ReleaseTypeAttr"/>, see the MSDN
      Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.ReleaseFuncDesc">
		<summary>
			<para>Releases a <see cref="System.Runtime.InteropServices.FUNCDESC"/> previously
   returned by <see cref="System.Runtime.InteropServices.UCOMITypeInfo.GetFuncDesc"/> .</para>
		</summary>
		<param name="pFuncDesc">Reference to the <see langword="FUNCDESC"/>to release.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::ReleaseFuncDesc"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="UCOMITypeInfo.ReleaseVarDesc">
		<summary>
			<para>Releases a <see langword="VARDESC"/> previously
   returned by <see cref="System.Runtime.InteropServices.UCOMITypeInfo.GetVarDesc"/> .</para>
		</summary>
		<param name="pVarDesc">Reference to the <see langword="VARDESC"/> to release.</param>
		<remarks>
			<para>For additional information about 
   <see langword="ITypeInfo::ReleaseVarDesc"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEFLAGS">
		<summary>
			<para>Defines the properties and attributes of a type description.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEFLAGS"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.MEMBER_ID_NIL">
		<summary>
			<para>A constant used with the <see cref="System.Runtime.InteropServices.TYPEATTR.memidConstructor"/> and <see cref="System.Runtime.InteropServices.TYPEATTR.memidDestructor"/> fields.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.guid">
		<summary>
			<para>The GUID of the type information.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.lcid">
		<summary>
			<para>Locale of member names and documentation strings.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.dwReserved">
		<summary>
			<para>Reserved for future use.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.memidConstructor">
		<summary>
			<para>ID of constructor, or <see cref="System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL"/> if none.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.memidDestructor">
		<summary>
			<para>ID of destructor, or <see cref="System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL"/> if none.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.lpstrSchema">
		<summary>
			<para>Reserved for future use.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.cbSizeInstance">
		<summary>
			<para>The size of an instance of this type.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.typekind">
		<summary>
			<para>A <see cref="System.Runtime.InteropServices.TYPEKIND"/> value describing the type this information describes.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.cFuncs">
		<summary>
			<para>Indicates the number of functions on the interface
      this structure describes.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.cVars">
		<summary>
			<para>Indicates the number of variables and data fields on the
      interface described by this structure.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.cImplTypes">
		<summary>
			<para>Indicates the number of implemented interfaces on the
      interface this structure describes.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.cbSizeVft">
		<summary>
			<para>The size of this type's virtual method table (VTBL).</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.cbAlignment">
		<summary>
			<para>Specifies the byte alignment for an instance of this type.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.wTypeFlags">
		<summary>
			<para>A <see cref="System.Runtime.InteropServices.TYPEFLAGS"/> value describing this information.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.wMajorVerNum">
		<summary>
			<para>Major version number.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.wMinorVerNum">
		<summary>
			<para>Minor version number.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.tdescAlias">
		<summary>
			<para>If <see cref="System.Runtime.InteropServices.TYPEATTR.typekind"/> == <see cref="System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS"/>, specifies the type for which
   this type is an alias.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEATTR.idldescType">
		<summary>
			<para>IDL attributes of the described type.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEATTR"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCDESC">
		<summary>
			<para> Defines a function description.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCDESC.memid">
		<summary>
			<para>Identifies the function member ID.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCDESC.lprgscode">
		<summary>
			<para>Stores the count of errors a function can return on a
      16-bit system.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCDESC.lprgelemdescParam">
		<summary>
			<para>Indicates the size of <see cref="System.Runtime.InteropServices.FUNCDESC.cParams"/> .</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCDESC.funckind">
		<summary>
			<para>Specifies whether the function is virtual, static, or dispatch-only.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCDESC.invkind">
		<summary>
			<para> Specifies the type of a property function.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCDESC.callconv">
		<summary>
			<para>Specifies the calling convention of a function.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCDESC.cParams">
		<summary>
			<para>Counts the total number of parameters.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCDESC.cParamsOpt">
		<summary>
			<para>Counts the optional parameters.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCDESC.oVft">
		<summary>
			<para>Specifies the offset in the VTBL for <see cref="System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL"/>.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCDESC.cScodes">
		<summary>
			<para>Counts the permitted return values.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCDESC.elemdescFunc">
		<summary>
			<para>Contains the return type of the function.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="FUNCDESC.wFuncFlags">
		<summary>
			<para> Indicates the <see cref="System.Runtime.InteropServices.FUNCFLAGS"/> of a function.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="FUNCDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="IDLDESC">
		<summary>
			<para> Contains information needed for transferring a structure element,
      parameter, or function return value between processes.
      </para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="IDLDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="IDLDESC.dwReserved">
		<summary>
			<para> Reserved; set to <see langword="null"/> .
   </para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="IDLDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="IDLDESC.wIDLFlags">
		<summary>
			<para>Indicates an <see cref="System.Runtime.InteropServices.IDLFLAG"/> value describing the type.
   </para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="IDLDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="PARAMDESC">
		<summary>
			<para> Contains information about how to
      transfer a structure element, parameter, or function return value between
      
      processes.
      </para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="PARAMDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="PARAMDESC.lpVarValue">
		<summary>
			<para>Represents a pointer to a value that is being passed between processes.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="PARAMDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="PARAMDESC.wParamFlags">
		<summary>
			<para>Represents bitmask values that describe the structure element,
      parameter, or return value.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="PARAMDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEDESC.lpValue">
		<summary>
			<para>Indicates the variant type for the item described by this
   <see langword="TYPEDESC"/> .</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="TYPEDESC.vt">
		<summary>
			<para>If the variable is <see langword="VT_SAFEARRAY"/> or
<see langword="VT_PTR"/>, the <see cref="System.Runtime.InteropServices.TYPEDESC.lpValue"/> field contains a 
   pointer to a <see langword="TYPEDESC"/>
   that specifies the element type.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="TYPEDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="VARDESC">
		<summary>
			<para>Describes a variable, constant, or data member.</para>
		</summary>
		<remarks>
			<para>For additional information about 
   <see langword="VARDESC"/>, see the MSDN Library.</para>
		</remarks>
	</doc>
	<doc for="PARAMFLAG.PARAMFLAG_FHASDEFAULT">
		<summary>
			<para>The parameter has default behaviors defined.</para>
		</summary>
	</doc>
</docs>
