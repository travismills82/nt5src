<docs>
	<doc for="RuntimeHelpers.GetObjectValue">
		<summary>
			<para> Boxes a value type.</para>
		</summary>
		<param name="obj"> The value type to be boxed.</param>
		<returns>
			<para>Returns a boxed copy of <paramref name="obj "/>if it is a value class; otherwise
<paramref name="obj"/> itself is returned.</para>
		</returns>
		<remarks>
   Boxing a value type creates an object and performs a
   shallow copy of the fields of the specified value type into the new object.
</remarks>
	</doc><doc for="RuntimeHelpers.InitializeArray">
		<summary>
			<para>Provides a fast way to initialize an array from data
      stored in a module.</para>
		</summary>
		<param name="array">The array to be initialized.</param>
		<param name="fldHandle">A <see cref="System.RuntimeFieldHandle"/> specifying the location of the data used to initialize the array.</param>
		<remarks>
			<para> This method is for compiler use only.</para>
		</remarks>
	</doc><doc for="RuntimeHelpers.OffsetToStringData">
		<summary>
			<para>Gets the offset in bytes to the data in the given string.</para>
		</summary>
		<value>
			<para> The byte offset, from the start of the <see cref="System.String"/> object to the
   first character in the string.</para>
		</value>
		<remarks>
			<para> Compilers use this property for
      unsafe, but efficient, pointer operations on the characters in a
      managed string. Compilers should pin the string against movement by the garbage
      collector prior to use. Note that common language runtime strings are immutable,
      their contents can be read but not changed.</para>
		</remarks>
	</doc><doc for="RuntimeHelpers">
		<summary>
			<para>Provides a set of static methods and properties that provide support
      for compilers.</para>
		</summary>
		<remarks>
			<para>The classes in System.Runtime.CompilerServices are for
      compiler writers use only.</para>
		</remarks>
	</doc><doc for="RuntimeHelpers.RunClassConstructor">
		<summary>
			<para>Runs a specified class constructor method.</para>
		</summary>
		<param name="type">A <see langword="RuntimeTypeHandler"/> specifying the class constructor method to run.</param>
		<exception cref="System.TypeInitializationException">The class initializer threw an exception.</exception>
	</doc>
	<doc for="RuntimeHelpers.GetHashCode">
		<summary>
			<para>Serves as a hash function for a particular type,
      suitable for use in hashing algorithms and data structures such as a hash table.</para>
		</summary>
		<param name="o">An <see cref="System.Object"/> to retrieve the hash code for.</param>
		<returns>
			<para> A hash code for the <see cref="System.Object"/> identified by the <paramref name="o"/> parameter.</para>
		</returns>
		<seealso cref="System.Object.GetHashCode"/>
	</doc>
	<doc for="RuntimeHelpers.Equals">
		<summary>
			<para>Determines whether the specified <see cref="System.Object"/> instances are considered equal.</para>
		</summary>
		<param name="o1">The first <see cref="System.Object"/> to compare.</param>
		<param name="o2">The second <see cref="System.Object"/> to compare.</param>
		<returns>
			<para><see langword="true"/> if 
   the <paramref name="o1"/> parameter is the same instance as the
<paramref name="o2"/> parameter or if both are <see langword="null"/> or if <c>o1.Equals(o2)</c> returns
<see langword="true"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<seealso cref="System.Object.Equals"/>
	</doc>
</docs>
