<docs>
	<doc for="ResourceSet.Table">
		<summary>
			<para>The <see cref="System.Collections.Hashtable"/>
 in which the resources are stored.</para>
		</summary>
		<seealso cref="System.Collections.Hashtable"/>
	</doc>
	<doc for="ResourceSet.ResourceSet">
		<overload>
			<para>Creates a
      new
      instance of the <see cref="System.Resources.ResourceSet"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Resources.ResourceSet"/> class with default properties.</para>
		</summary>
	</doc><doc for="ResourceSet.ResourceSet2">
		<summary>
			<para>Creates a new instance of the <see cref="System.Resources.ResourceSet"/> class using the system default <see cref="System.Resources.ResourceReader"/>
that reads resources from the given stream.</para>
		</summary>
		<param name="stream">The <see cref="System.IO.Stream"/> of resources to be read. The stream should refer to an existing resources file.</param>
		<exception cref="System.ArgumentException">The <paramref name="stream"/> is not readable.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="stream"/> parameter is <see langword="null"/>.</exception>
	</doc><doc for="ResourceSet.ResourceSet3">
		<summary>
			<para>Creates a new instance of the <see cref="System.Resources.ResourceSet"/>
class using the specified resource reader.</para>
		</summary>
		<param name="reader">The reader that will be used.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="reader"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>You can use this constructor to support custom resource
      formats using a user-provided <see cref="System.Resources.IResourceReader"/>
      .</para>
		</remarks>
	</doc><doc for="ResourceSet.Reader">
		<summary>
			<para>Indicates the <see cref="System.Resources.IResourceReader"/> used to read the resources.</para>
		</summary>
		<seealso cref="System.Resources.IResourceReader"/>
	</doc><doc for="ResourceSet.GetDefaultReader">
		<summary>
			<para>Returns the preferred resource reader class for this kind
      of <see cref="System.Resources.ResourceSet"/>. </para>
		</summary>
		<returns>
			<para>Returns the <see cref="System.Type"/> for the preferred resource reader for this kind of <see cref="System.Resources.ResourceSet"/>.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      Derived
      classes of <see cref="System.Resources.ResourceSet"/> using their own resource reader
      should override <see cref="System.Resources.ResourceSet.GetDefaultReader"/>, and <see cref="System.Resources.ResourceSet.GetDefaultWriter"/>.
      
   </note>
		</remarks>
		<seealso cref="System.Resources.IResourceReader"/>
	</doc><doc for="ResourceSet.GetDefaultWriter">
		<summary>
			<para>Returns the preferred resource writer class for this
      kind of <see cref="System.Resources.ResourceSet"/>.</para>
		</summary>
		<returns>
			<para>Returns the <see cref="System.Type"/> for the preferred resource writer for this kind of <see cref="System.Resources.ResourceSet"/>.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      Derived
      classes of <see cref="System.Resources.ResourceSet"/> using their own resource reader should override <see cref="System.Resources.ResourceSet.GetDefaultReader"/>, and <see cref="System.Resources.ResourceSet.GetDefaultWriter"/>.
      
   </note>
		</remarks>
		<seealso cref="System.Resources.IResourceWriter"/>
	</doc><doc for="ResourceSet.GetString">
		<overload>
			<para> Returns a <see cref="System.String"/> resource with a specified name.</para>
		</overload>
		<summary>
			<para> Searches for a <see cref="System.String"/> resource with
   the specified name.</para>
		</summary>
		<param name="name">Name of the resource to search for.</param>
		<returns>
			<para>The value of a resource, if the value is a <see cref="System.String"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name "/>parameter is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">The resource with the specified name is not a <see cref="System.String"/> or the current <see cref="System.Resources.ResourceSet"/> has been closed.</exception>
	</doc><doc for="ResourceSet.Dispose1">
		<summary>
			<para>Disposes of the resources (other than memory) used by the current instance of
   <see cref="System.Resources.ResourceSet"/>.</para>
		</summary>
		<remarks>
			<para>Call <see cref="System.Resources.ResourceSet.Dispose"/> when you are finished using
   the <see cref="System.Resources.ResourceSet"/>. The <see cref="System.Resources.ResourceSet.Dispose"/> method leaves the <see cref="System.Resources.ResourceSet"/> in
   an unusable state. After calling <see cref="System.Resources.ResourceSet.Dispose"/>, you must release all
   references to the <see cref="System.Resources.ResourceSet"/> so the memory it was occupying can be
   reclaimed by garbage collection.</para>
			<note type="note">
   The current method is the
   implementation of <see cref="System.IDisposable.Dispose" qualify="true"/>. This
   implementation calls <see cref="System.Resources.ResourceSet.Dispose"/>(<see langword="true"/> ).
</note>
		</remarks>
	</doc><doc for="ResourceSet.GetObject">
		<overload>
			<para> Returns a resource object with the specified name.</para>
		</overload>
		<summary>
			<para> Searches for a resource object with the specified name.</para>
		</summary>
		<param name="name">Name of the resource to search for.</param>
		<returns>
			<para> The requested resource.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name "/>parameter is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">This <see cref="System.Resources.ResourceSet"/> has been closed.</exception>
	</doc><doc for="ResourceSet">
		<summary>
			<para>Stores all the resources localized for one particular culture, ignoring all other cultures, including any fallback rules.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Resources.ResourceSet"/> class enumerates over an <see cref="System.Resources.IResourceReader"/>, loading every name and value, and storing
   them in a <see cref="System.Collections.Hashtable"/>. A custom <see cref="System.Resources.IResourceReader"/>
   can be used.</para>
			<para>See the <see topic="cpcondesigningglobalapplications"/>
for details on the default resource file format.</para>
			<note type="inheritinfo">
   Derived classes of <see cref="System.Resources.ResourceSet"/> using their own resource reader and
   writer should override <see cref="System.Resources.ResourceSet.GetDefaultReader"/>, and <see cref="System.Resources.ResourceSet.GetDefaultWriter"/>, to provide the appropriate
   functionality for interpreting the <see cref="System.Resources.ResourceSet"/>.
</note>
		</remarks>
		<seealso topic="cpcondesigningglobalapplications"/>
	</doc><doc for="ResourceSet.Dispose">
		<overload>
			<para>Releases resources used by the current <see cref="System.Resources.ResourceSet"/> instance.</para>
		</overload>
		<summary>
			<para>Releases resources (other than memory) associated with the current instance,
      closing internal managed objects if requested.</para>
		</summary>
		<param name="disposing">Indicates whether the objects contained in the current instance should be explicitly closed.</param>
		<remarks>
			<para>If the <paramref name="dispose"/> parameter is
<see langword="true"/>, the current method frees all the resources associated 
   with it as well as with all objects associated with it. If <paramref name="dispose
   "/>is <see langword="false"/>, the current method frees only the resources
   allocated to it, and ignores any objects associated with it.</para>
		</remarks>
	</doc><doc for="ResourceSet.ReadResources">
		<summary>
			<para>Reads all the resources and stores them in a <see cref="System.Collections.Hashtable"/> indicated in the <see cref="System.Resources.ResourceSet.Table"/> property.</para>
		</summary>
		<remarks>
			<note type="inheritinfo">
      Derived
      classes of <see cref="System.Resources.ResourceSet"/> should explicitly call
      <see cref="System.Resources.ResourceSet.ReadResources"/> to load all the resources from the <see cref="System.Resources.IResourceReader"/> into <see cref="System.Resources.ResourceSet.Table"/>, generally either in the
      constructor or lazily on the first call to either <see cref="System.Resources.ResourceSet.GetString"/> or <see cref="System.Resources.ResourceSet.GetObject"/>. However, if your resource
      set and IResourceReader already have information about each other and
      have a more efficient way to load just a few select resources, this step can be
      skipped. To minimize working set, write your resource set in such a way that it
      queries your IResourceReader
      
      for only the resource values
      requested by your application.
      
      </note>
		</remarks>
	</doc><doc for="ResourceSet.GetString2">
		<summary>
			<para> Searches for a <see cref="System.String"/> resource with the specified name in a case-insensitive
   manner, if requested.</para>
		</summary>
		<param name="name">Name of the resource to search for.</param>
		<param name=" ignoreCase">Indicates whether the case of the case of the specified name should be ignored.</param>
		<returns>
			<para>The value of a resource, if the value is a <see cref="System.String"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name "/>parameter is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">The resource with the specified name is not a <see cref="System.String"/> or the current <see cref="System.Resources.ResourceSet"/> has been closed.</exception>
		<remarks>
			<para>If the value of the <paramref name="ignoreCase"/> parameter is 
<see langword="true"/>, a resource with the name "Resource" is equivalent to the 
   resource with the name "resource". Note, however, that this method always
   performs case-insensitive string comparisons using <see cref="System.Globalization.CultureInfo.InvariantCulture" qualify="true"/>. The advantage is that results of
   case-insensitive string comparisons performed by this method are the same on all
   computers regardless of culture. The disadvantage is that the results are not
   consistent with the casing rules of all cultures.</para>
			<para>For example, the Turkish alphabet has two versions of 
   the character I: one with a dot and one without a dot. In Turkish, the character
   I (Unicode 0049) is considered the uppercase version of a different character
   <htmltext>&amp;#x0131;</htmltext> (Unicode 0131). The character i (Unicode 0069) is considered the lowercase
   version of yet another character <htmltext>&amp;#x0130;</htmltext> (Unicode 0130). According to these casing
   rules, a case-insensitive string comparison of the characters i (Unicode 0069)
   and I (Unicode 0049) should fail for the culture "tr-TR" (Turkish in Turkey).
   Using the <see langword="GetString"/> method with <paramref name="ignoreCase"/> set to
<see langword="true"/>, this comparison succeeds. </para>
		</remarks>
	</doc>
	<doc for="ResourceSet.GetObject2">
		<summary>
			<para>Searches for a resource object with the specified name in a case-insensitive manner, if requested.</para>
		</summary>
		<param name="name">Name of the resource to search for.</param>
		<param name=" ignoreCase">Indicates whether the case of the case of the specified name should be ignored.</param>
		<returns>
			<para> The requested resource.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name "/>parameter is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">This <see cref="System.Resources.ResourceSet"/> has been closed.</exception>
		<remarks>
			<para>If the value of the <paramref name="ignoreCase"/> parameter is <see langword="true"/>, a 
   resource with the name "Resource" is equivalent to the resource with the name
   "resource". Note, however, that this method always performs case-insensitive
   string comparisons using <see cref="System.Globalization.CultureInfo.InvariantCulture" qualify="true"/>. The
   advantage is that results of case-insensitive string comparisons performed by
   this method are the same on all computers regardless of culture. The
   disadvantage is that the results are not consistent with the casing rules of all
   cultures.</para>
			<para>For example, the Turkish alphabet has two versions of the character I: one 
   with a dot and one without a dot. In Turkish, the character I (Unicode 0049) is
   considered the uppercase version of a different character <htmltext>&amp;#x0131;</htmltext> (Unicode 0131).
   The character i (Unicode 0069) is considered the lowercase version of yet
   another character <htmltext>&amp;#x0130;</htmltext> (Unicode 0130). According to these casing rules, a
   case-insensitive string comparison of the characters i (Unicode 0069) and I
   (Unicode 0049) should fail for the culture "tr-TR" (Turkish in Turkey). Using
   the <see langword="GetObject"/> method with <paramref name="ignoreCase"/> set to
<see langword="true"/>, this comparison succeeds.</para>
		</remarks>
	</doc>
	<doc for="ResourceSet.GetEnumerator">
		<summary>
			<para>Returns an <see cref="System.Collections.IDictionaryEnumerator"/> that can iterate through the <see cref="System.Resources.ResourceSet"/> .</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IDictionaryEnumerator"/> for this <see cref="System.Resources.ResourceSet"/> .</para>
		</returns>
		<exception cref="System.InvalidOperationException">This <see cref="System.Resources.ResourceSet"/> has been closed.</exception>
		<remarks>
			<para>Enumerators only allow reading the data in the collection. Enumerators cannot
      be used to modify the underlying collection.</para>
			<para>Initially, the enumerator is positioned before the first element in the
      collection. <see cref="System.Collections.IEnumerator.Reset"/> also brings the enumerator back
      to this position. At this position, calling <see cref="System.Collections.IEnumerator.Current"/> throws an
      exception. Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext"/> to advance the
      enumerator to the first element of the collection before reading the value of
   <see cref="System.Collections.IEnumerator.Current"/>.</para>
			<para><see cref="System.Collections.IEnumerator.Current"/> returns the same object until
   either <see cref="System.Collections.IEnumerator.MoveNext"/> or <see cref="System.Collections.IEnumerator.Reset"/> is called.
<see cref="System.Collections.IEnumerator.MoveNext"/> sets <see cref="System.Collections.IEnumerator.Current"/> to the next element.</para>
			<para>After the end of the collection is passed, the enumerator is positioned after
   the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext"/> returns
<see langword="false"/>. If the last call to <see cref="System.Collections.IEnumerator.MoveNext"/> returned 
<see langword="false"/>, calling <see cref="System.Collections.IEnumerator.Current"/> throws an exception. To set 
<see cref="System.Collections.IEnumerator.Current"/> to the first element of the 
   collection again, you can call <see cref="System.Collections.IEnumerator.Reset"/> followed by <see cref="System.Collections.IEnumerator.MoveNext"/>.</para>
			<para>An enumerator remains valid as long as the collection remains unchanged. If
   changes are made to the collection, such as adding, modifying or deleting
   elements, the enumerator is irrecoverably invalidated and the next call to
<see cref="System.Collections.IEnumerator.MoveNext"/> or <see cref="System.Collections.IEnumerator.Reset"/> throws an 
<see cref="System.InvalidOperationException"/>. If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext"/> and <see cref="System.Collections.IEnumerator.Current"/>, <see cref="System.Collections.IEnumerator.Current"/> will return the 
   element that it is set to, even if the enumerator is already invalidated.</para>
			<para>You can use the <see cref="System.Collections.IDictionaryEnumerator.Entry" qualify="true"/> property to access the value stored in the
current element. Use the <see cref="System.Collections.IDictionaryEnumerator.Key" qualify="true"/> property to access the key
of the current element. Use the <see cref="System.Collections.IDictionaryEnumerator.Value" qualify="true"/> property to access the
value of the current element.</para>
			<para>The enumerator does not have exclusive access to the collection; therefore,
   enumerating through a collection is intrinsically not a thread-safe procedure.
   Even when a collection is synchronized, other threads could still modify the
   collection, which causes the enumerator to throw an exception. To guarantee
   thread safety during enumeration, you can either lock the collection during the
   entire enumeration or catch the exceptions resulting from changes made by other
   threads.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a <see cref="System.Resources.ResourceSet"/>
				<c>rs</c> for the file <c>items.resources</c>. Next, the <see cref="System.Resources.ResourceSet.GetEnumerator"/> method is used to create an 
<see cref="System.Collections.IDictionaryEnumerator"/> for <c>rs</c>. The <see cref="System.Collections.IDictionaryEnumerator"/> iterates 
through <c>rs</c> and displays
the contents to the console.</para>
			<codelink SampleID="System.Resources.ResourceSet.GetEnumerator" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ResourceSet.IEnumerable.GetEnumerator">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ResourceSet.ResourceSet1">
		<summary>
			<para>Creates a new instance of the <see cref="System.Resources.ResourceSet"/> class using the system default <see cref="System.Resources.ResourceReader"/>
that opens and reads resources from the given file.</para>
		</summary>
		<param name="fileName">Resource file to read.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="fileName"/> parameter is <see langword="null"/>.</exception>
		<example>
			<codelink SampleID="System.Resources.ResourceSet.GetEnumerator" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ResourceSet.Close">
		<summary>
			<para>Closes and releases any resources used by this <see cref="System.Resources.ResourceSet"/>.</para>
		</summary>
		<remarks>
			<para>All calls to methods on the <see cref="System.Resources.ResourceSet"/> after a call to this method
   might fail.</para>
			<para><see cref="System.Resources.ResourceSet.Close"/> can be safely called multiple times.</para>
			<note type="note">
   The current implementation of <see cref="System.Resources.ResourceSet.Close"/> calls <see cref="System.Resources.ResourceSet.Dispose"/>(<see langword="true"/>).
</note>
		</remarks>
		<example>
			<codelink SampleID="System.Resources.ResourceSet.GetEnumerator" SnippetID="1"/>
		</example>
	</doc>
</docs>
