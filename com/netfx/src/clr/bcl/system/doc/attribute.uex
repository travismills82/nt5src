<docs>
	<doc for="Attribute.Equals">
		<internalonly/>
		<summary>
			<para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
		</summary>
		<param name=" obj">An <see cref="System.Object"/> to compare with this instance or <see langword="null"/>.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="obj"/> equals 
   the type and value of this instance; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc><doc for="Attribute.TypeId">
		<summary>
			<para> When implemented in a derived class, gets a unique identifier for this <see langword="Attribute"/>.</para>
		</summary>
		<value>
			<para>An <see cref="System.Object"/> that is a unique identifier for the attribute.</para>
		</value>
		<remarks>
			<para> As implemented, this identifier is merely the 
   <see cref="System.Type"/> of the attribute. However, it
      is intended that the unique identifier be used to identify two attributes of the
      same type.
      </para>
		</remarks>
	</doc><doc for="Attribute.Attribute">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Attribute"/>
class.</para>
		</summary>
		<remarks>
			<para>This constructor is only called by classes that derive from
   <see cref="System.Attribute"/>.</para>
		</remarks>
	</doc><doc for="Attribute">
		<summary>
			<para>Base class for custom attributes.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para>The <see langword="Attribute"/>
class contains convenience methods to access and test custom attributes. While
any user-defined type can be used as an attribute, it is expected that most
attributes will be instances of types derived from <see cref="System.Attribute"/>.</para>
			<para> All attributes derive directly or indirectly from
<see cref="System.Attribute"/>.
   Attributes can be applied to any target element (see <see cref="System.AttributeTargets"/>); multiple instances of an
   attribute can be applied to the same target element; and attributes can be
   inherited by an element derived from a target element. Compilers and other
   development tools use this information to identify which attributes are custom
   attributes.</para>
			<para> Custom attributes can be stored with any element of the
   metadata. This mechanism can be used to store application-specific
   information at compile time and access it either at runtime or when another tool
   reads the metadata. </para>
			<para> .NET Framework predefines some
   attribute types and uses them to control runtime
   behavior. Some languages predefine attribute types to represent language features
   not directly represented in the .NET Framework common type system. Users or
   other tools are welcome to define and use additional attribute types.</para>
			<para>For more information about using attributes, see <see topic="cpconExtendingMetadataUsingAttributes"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the usage of 
   <see langword="Attribute"/>:</para>
			<codelink SampleID="AnimalAttributes" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Attribute.IsDefined">
		<summary>
			<para>Determines whether any custom attributes of a specified type are applied to a specified member of a
      class or optionally inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.MemberInfo"/> that describes a constructor, event, field, method, type, or property member of a class.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">If <see langword="true"/>, specifies to also search the ancestors of <paramref name="element"/> for custom attributes.</param>
		<returns>
			<para><see langword="true"/> if a custom attribute of type
<paramref name="attributeType"/> is applied to <paramref name="element"/>; otherwise, 
<see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<exception cref="System.NotSupportedException"><paramref name="element"/> is not a constructor, method, property, event, type, or field. </exception>
		<remarks>
			<para>The ancestors of <paramref name="element"/> are searched for custom attributes if
<paramref name="inherit"/> is <see langword="true"/> and <paramref name="element"/> is a method or a 
   type. <paramref name="inherit"/> is ignored if <paramref name="element"/> is a constructor, field,
   property, or event.</para>
		</remarks>
		<example>
			<para>The following code example illustrates the use of <see langword="IsDefined"/>, 
   taking a <see cref="System.Reflection.MemberInfo"/> as a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="4"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttribute4">
		<summary>
			<para> Retrieves a custom attribute of a specified type applied to a specified member
      of a class or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.MemberInfo"/> that describes a constructor, event, field, method, or property member of a class.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<returns>
			<para><see langword="null"/>, if no custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>. </para>
			<para>-or- </para>
			<para>An <see cref="System.Attribute"/> reference to the single custom attribute of type <paramref name="attributeType"/> that is applied to <paramref name="element"/>.
			</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<exception cref="System.NotSupportedException"><paramref name="element"/> is not a constructor, method, property, event, type, or field. </exception>
		<exception cref="System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
		<remarks>
			<para>A match is determined in the same way described in the
      Return Value section of <see cref="System.Type.IsAssignableFrom" qualify="true"/>.</para>
		</remarks>
		<example>
			<para>The following code example illustrates the use of 
   <see langword="GetCustomAttribute"/>, taking a <see cref="System.Reflection.MemberInfo"/> as 
      a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="4"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttribute">
		<overload>
			<para> Retrieves a custom
      attribute of a specified type applied to a specified member of a class.</para>
		</overload>
		<summary>
			<para> Retrieves a custom attribute of a specified type applied to a specified member of a class or optionally inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.MemberInfo"/> that describes a constructor, event, field, method, or property member of a class.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">If <see langword="true"/>, specifies to also search the ancestors of <paramref name="element"/> for custom attributes.</param>
		<returns>
			<para><see langword="null"/>, if no custom attribute of type
<paramref name="attributeType"/> is applied to <paramref name="element"/>.
   </para>
			<para>-or-
   </para>
			<para>An <see cref="System.Attribute"/> reference to the single custom attribute of type <paramref name="attributeType"/> that is applied to <paramref name="element"/>.
			</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<exception cref="System.NotSupportedException"><paramref name="element"/> is not a constructor, method, property, event, type, or field. </exception>
		<exception cref="System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
		<example>
			<para>The following code example illustrates the use of 
   <see langword="GetCustomAttribute"/>, taking a <see cref="System.Reflection.MemberInfo"/> as 
      a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="4"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttribute5">
		<summary>
			<para> Retrieves a custom attribute of a specified type applied to a specified parameter of a member of a class or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.ParameterInfo"/> that describes a parameter of a member of a class.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<returns>
			<para><see langword="null"/>, if no custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>. </para>
			<para>-or- </para>
			<para>An <see cref="System.Attribute"/> reference to the single custom attribute of type <paramref name="attributeType"/> that is applied to <paramref name="element"/>.
			</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<exception cref="System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
	</doc>
	<doc for="Attribute.GetCustomAttribute1">
		<summary>
			<para> Retrieves a custom attribute of a specified type applied to a specified parameter of a member of a class or optionally inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.ParameterInfo"/> that describes a parameter of a member of a class.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">If <see langword="true"/>, specifies to also search the ancestors of <paramref name="element"/> for custom attributes.</param>
		<returns>
			<para><see langword="null"/>, if no custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>. </para>
			<para>-or- </para>
			<para>An <see cref="System.Attribute"/> reference to the single custom attribute of type <paramref name="attributeType"/> that is applied to <paramref name="element"/>.
			</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<exception cref="System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
	</doc>
	<doc for="Attribute.Match">
		<summary>
			<para> When overridden in a
      derived class, returns a value indicating whether this instance equals a specified object.
      </para>
		</summary>
		<param name="obj">An <see cref="System.Object"/> to compare with this instance of <see langword="Attribute"/>. </param>
		<returns>
			<para><see langword="true"/> if this
   instance equals <paramref name="obj"/>; otherwise,
<see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>This method determines if one
   <see langword="Attribute"/> equals another. Its default
      implementation is the same as <see cref="System.Attribute.Equals"/>, which performs
      a value and reference
      comparison. Override this method to implement support for attribute values, such
      as flags or bitfields, that consist of components that are meaningful
      in themselves.
      </para>
   For example, consider an attribute whose value is a binary field divided into
   a bitfield of flags. Two instances of this attribute have one flag in set in
   common while all the other flags differ. The <see langword="Equal"/> method
   cannot determine that the two instances have the same flag set, but the
<see langword="Match"/> method can.
</remarks>
		<example>
			<para>The following code example illustrates the use of <see langword="Match"/> in 
   the context of <see langword="Attribute"/>:</para>
			<codelink SampleID="Match" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Attribute.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer hash code.</para>
		</returns>
		<example>
			<para>The following code example illustrates the use of <see langword="GetHashCode"/> 
in the context of <see langword="Attribute"/>:</para>
			<codelink SampleID="GetHashCode" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Attribute.IsDefaultAttribute">
		<summary>
			<para> When overridden in a derived class, returns an indication
      whether the value of this instance is
      the
      default value for the derived class.
      </para>
		</summary>
		<returns>
			<para><see langword="true "/>if this
   instance is the default
   attribute for the class; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para> The default implementation of this class returns
   <see langword="false"/>, and must be implemented in the derived class to be
      useful to that class.
      </para>
			<para> The implementation of this method in a derived class compares the value
      of this instance to a standard, default value obtained by some means, then
      returns a Boolean value that indicates whether the value of this instance is
      equal to the standard. The standard value is typically coded as a
      constant in the implementation, or stored programmatically in a field used by
      the implementation.
      </para>
		</remarks>
		<example>
			<para>The following code example illustrates the use of 
   <see langword="IsDefaultAttribute"/>:</para>
			<codelink SampleID="IsDefaultAttribute" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Attribute.IsDefined4">
		<overload>
			<para> Determines whether any custom attributes
      of a specified type are applied to a specified member of a class.</para>
		</overload>
		<summary>
			<para>Determines whether any custom attributes of a specified type are applied to a specified member of
      a class or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.MemberInfo"/> that describes a constructor, event, field, method, type, or property member of a class.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<returns>
			<para><see langword="true"/> if a custom attribute of type
<paramref name="attributeType"/> is applied to <paramref name="element"/>; otherwise, 
<see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<exception cref="System.NotSupportedException"><paramref name="element"/> is not a constructor, method, property, event, type, or field. </exception>
		<remarks>
			<para> The ancestors of <paramref name="element"/> are searched for custom
   attributes if <paramref name="element"/> is a
   method or a type.</para>
		</remarks>
		<example>
			<para>The following code example illustrates the use of 
   <see langword="IsDefined"/>, taking a <see cref="System.Reflection.MemberInfo"/> as 
      a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="4"/>
		</example>
	</doc>
	<doc for="Attribute.IsDefined5">
		<summary>
			<para> Determines whether any custom attributes of a specified type are applied to
      a specified parameter of a member of a class or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.ParameterInfo"/> that describes a parameter of a member of a class.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<returns>
			<para><see langword="true"/> if a custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<remarks>
			<para>The ancestors of <paramref name="element"/> are searched for custom attributes.</para>
		</remarks>
		<example>
			<para>The following code example illustrates the use of <see langword="IsDefined"/>, 
   taking a <see cref="System.Reflection.ParameterInfo"/> as a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="5"/>
		</example>
	</doc>
	<doc for="Attribute.IsDefined1">
		<summary>
			<para>Determines whether any custom attributes of a specified type are applied to a
      specified parameter of a member of a class or optionally inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.ParameterInfo"/> that describes a parameter of a member of a class.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">If <see langword="true"/>, specifies to also search the ancestors of <paramref name="element"/> for custom attributes.</param>
		<returns>
			<para><see langword="true"/> if a custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<exception cref="System.ExecutionEngineException"><paramref name="element"/> is not a method, constructor, or type.</exception>
		<remarks>
			<para>The ancestors of <paramref name="element"/> are searched for custom attributes if <paramref name="inherit"/> is <see langword="true"/> and <paramref name="element"/> is a method. <paramref name="inherit"/> is ignored if <paramref name="element"/> is a constructor or a type.</para>
		</remarks>
		<example>
			<para>The following code example illustrates the use of
   <see langword="IsDefined"/>, taking a <see cref="System.Reflection.ParameterInfo"/> 
   as a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="5"/>
		</example>
	</doc>
	<doc for="Attribute.IsDefined6">
		<summary>
			<para> Determines whether any custom attributes of a specified type
      are applied to a specified module.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Module"/> that describes a portable executable file.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<returns>
			<para><see langword="true"/> if a custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<remarks>
			<para>The ancestors of <paramref name="element"/>
are not searched for custom attributes.</para>
		</remarks>
		<example>
			<para>The following code example illustrates the use of <see langword="IsDefined"/>, taking a <see cref="System.Reflection.Module"/> as a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Attribute.IsDefined2">
		<summary>
			<para> Determines whether any custom attributes of a specified type
      are applied to a specified module.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Module"/> that describes a portable executable file.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
		<returns>
			<para><see langword="true"/> if a custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<remarks>
			<para>This method ignores the value of parameter <paramref name="inherit"/>. The ancestors of <paramref name="element"/> are not searched for custom attributes.</para>
		</remarks>
		<example>
			<para>The following code example illustrates the use of
   <see langword="IsDefined"/>, taking a <see cref="System.Reflection.Module"/> as 
      a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Attribute.IsDefined7">
		<summary>
			<para>Determines whether any custom attributes of a specified type are applied to a
      specified assembly.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Assembly"/> that describes a reusable, versionable, collection of modules.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<returns>
			<para><see langword="true"/> if a custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<remarks>
			<para>The ancestors of <paramref name="element"/> are not searched for custom attributes.</para>
		</remarks>
		<example>
			<para>The following code example illustrates the use of <see langword="IsDefined"/>, taking an <see cref="System.Reflection.Assembly"/> as a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Attribute.IsDefined3">
		<summary>
			<para>Determines whether any custom attributes of a specified type are applied to a
      specified assembly.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Assembly"/> that describes a reusable, versionable, collection of modules.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
		<returns>
			<para><see langword="true"/> if a custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<remarks>
			<para>This method ignores the value of parameter <paramref name="inherit"/>. The ancestors of <paramref name="element"/> are not
   searched for custom attributes.</para>
		</remarks>
		<example>
			<para>The following code example illustrates the use of
   <see langword="IsDefined"/>, taking an <see cref="System.Reflection.Assembly"/> as a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttribute6">
		<summary>
			<para> Retrieves a custom attribute of a specified type applied to a specified module or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Module"/> that describes a portable executable file.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<returns>
			<para><see langword="null"/>, if no custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>. </para>
			<para>-or- </para>
			<para>An <see cref="System.Attribute"/> reference to the single custom attribute of type <paramref name="attributeType"/> that is applied to <paramref name="element"/>.
			</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<exception cref="System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
		<example>
			<para>The following code example illustrates the use of <see langword="GetCustomAttribute"/>, taking a <see cref="System.Reflection.Module"/> as a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttribute2">
		<summary>
			<para> Retrieves a custom attribute of a specified type applied to a specified module or optionally inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Module"/> that describes a portable executable file.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
		<returns>
			<para><see langword="null"/>, if no custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>. </para>
			<para>-or- </para>
			<para>An <see cref="System.Attribute"/> reference to the single custom attribute of type <paramref name="attributeType"/> that is applied to <paramref name="element"/>.
			</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<exception cref="System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
		<example>
			<para>The following code example illustrates the use of <see langword="GetCustomAttribute"/>, taking a <see cref="System.Reflection.Module"/> as a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttribute7">
		<summary>
			<para> Retrieves a custom attribute of a specified type applied to a specified assembly or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Assembly"/> that describes a reusable, versionable, collection of modules.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<returns>
			<para><see langword="null"/>, if no custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>. </para>
			<para>-or- </para>
			<para>An <see cref="System.Attribute"/> reference to the single custom attribute of type <paramref name="attributeType"/> that is applied to <paramref name="element"/>.
			</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</para></exception>
		<exception cref="System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
		<remarks>
			<para>Use the <see cref="System.Attribute.GetCustomAttributes"/> method if you expect more than one value to be returned,
   or <see cref="System.Reflection.AmbiguousMatchException"/> is thrown.</para>
		</remarks>
		<example>
			<para>The following code example illustrates the use of <see langword="GetCustomAttribute"/>, taking an <see cref="System.Reflection.Assembly"/> as a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttribute3">
		<summary>
			<para> Retrieves a custom attribute of a specified type applied to a specified assembly or optionally inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Assembly"/> that describes a reusable, versionable, collection of modules.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
		<returns>
			<para><see langword="null"/>, if no custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>. </para>
			<para>-or- </para>
			<para>An <see cref="System.Attribute"/> reference to the single custom attribute of type <paramref name="attributeType"/> that is applied to <paramref name="element"/>.
			</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<exception cref="System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
		<example>
			<para>The following code example illustrates the use of <see langword="GetCustomAttribute"/>, taking an <see cref="System.Reflection.Assembly"/> as a parameter.</para>
			<codelink SampleID="IsDefined" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes8">
		<overload>
			<para> Retrieves an array of the custom
      attributes of a specified type applied to a specified member of a class.</para>
		</overload>
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified member
      of a class or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.MemberInfo"/> that describes a constructor, event, field, method, or property member of a class.</param>
		<param name="type">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<returns>
			<para> An <see cref="System.Attribute"/> array containing the custom attributes of type <paramref name="type"/>
applied to <paramref name="element"/>.
			</para>
			<para> -or-</para>
			<para> An
   empty array if no
   such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="type"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="type"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<exception cref="System.NotSupportedException"><paramref name="element"/> is not a constructor, method, property, event, type, or field. </exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttribute"/>, taking a <see cref="System.Reflection.MemberInfo"/> as a parameter: </para>
			<codelink SampleID="GetCustomAttributes" SnippetID="4"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified member of a class or optionally inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.MemberInfo"/> that describes a constructor, event, field, method, or property member of a class.</param>
		<param name="type">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">If <see langword="true"/>, specifies to also search the ancestors of <paramref name="element"/> for custom attributes.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing the custom attributes of type <paramref name="type"/> applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="type"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="type"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<exception cref="System.NotSupportedException"><paramref name="element"/> is not a constructor, method, property, event, type, or field. </exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/> if <paramref name="inherit"/> is
<see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking a <see cref="System.Reflection.MemberInfo"/> as a parameter: </para>
			<codelink SampleID="GetCustomAttributes" SnippetID="4"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes9">
		<summary>
			<para> Retrieves an array of the custom attributes applied to a specified member of a class or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.MemberInfo"/> that describes a constructor, event, field, method, or property member of a class.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing
   the custom attributes applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException"><paramref name="element"/> is not a constructor, method, property, event, type, or field. </exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors
      of <paramref name="element"/>.</para>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttribute"/>, taking a <see cref="System.Reflection.MemberInfo"/> as a parameter: </para>
			<codelink SampleID="GetCustomAttributes" SnippetID="4"/>
		</remarks>
	</doc>
	<doc for="Attribute.GetCustomAttributes1">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified member of a class or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.MemberInfo"/> that describes a constructor, event, field, method, or property member of a class.</param>
		<param name=" inherit">If <see langword="true"/>, specifies to also search the ancestors of <paramref name="element"/> for custom attributes.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing
   the custom attributes applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException"><paramref name="element"/> is not a constructor, method, property, event, type, or field. </exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/> if <paramref name="inherit"/> is
<see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking a <see cref="System.Reflection.MemberInfo"/> as a parameter: </para>
			<codelink SampleID="GetCustomAttributes" SnippetID="4"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes10">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified parameter of a member of a class or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.ParameterInfo"/> that describes a parameter of a member of a class.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing the custom attributes of type <paramref name="attributeType"/> applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking a <see cref="System.Reflection.ParameterInfo"/>
   as a parameter:</para>
			<codelink SampleID="GetCustomAttributes" SnippetID="5"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes2">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified parameter of a member of a class or optionally inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.ParameterInfo"/> that describes a parameter of a member of a class.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">If <see langword="true"/>, specifies to also search the ancestors of <paramref name="element"/> for custom attributes.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing the custom attributes of type <paramref name="attributeType"/> applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/> if <paramref name="inherit"/> is
<see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking a <see cref="System.Reflection.ParameterInfo"/>
   as a parameter:</para>
			<codelink SampleID="GetCustomAttributes" SnippetID="5"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes11">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified module or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Module"/> that describes a portable executable file.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing the custom attributes of type <paramref name="attributeType"/> applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking a <see cref="System.Reflection.Module"/> as a parameter:</para>
			<codelink SampleID="GetCustomAttributes" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes3">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified module or optionally inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Module"/> that describes a portable executable file.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing the custom attributes of type <paramref name="attributeType"/> applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/> if <paramref name="inherit"/> is
<see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking a <see cref="System.Reflection.Module"/> as a parameter:</para>
			<codelink SampleID="GetCustomAttributes" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes12">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified assembly or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Assembly"/> that describes a reusable, versionable, collection of modules.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing the custom attributes of type <paramref name="attributeType"/> applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking an <see cref="System.Reflection.Assembly"/> as a parameter: </para>
			<codelink SampleID="GetCustomAttributes" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes4">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified assembly or optionally inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Assembly"/> that describes a reusable, versionable, collection of modules.</param>
		<param name="attributeType">The <see cref="System.Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing the custom attributes of type <paramref name="attributeType"/> applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="System.Attribute"/>.</exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/> if <paramref name="inherit"/> is
<see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking an <see cref="System.Reflection.Assembly"/> as a parameter: </para>
			<codelink SampleID="GetCustomAttributes" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes13">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified parameter of a member of a class or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.ParameterInfo"/> that describes a parameter of a member of a class.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing
   the custom attributes applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking a <see cref="System.Reflection.ParameterInfo"/>
   as a parameter:</para>
			<codelink SampleID="GetCustomAttributes" SnippetID="5"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes5">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified parameter of a member of a class or optionally inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.ParameterInfo"/> that describes a parameter of a member of a class.</param>
		<param name=" inherit">If <see langword="true"/>, specifies to also search the ancestors of <paramref name="element"/> for custom attributes.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing
   the custom attributes applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>.</exception>
		<remarks>
   Return value contains the custom attributes for ancestors of <paramref name="element"/> if <paramref name="inherit"/> is
<see langword="true"/>.
</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking a <see cref="System.Reflection.ParameterInfo"/>
   as a parameter:</para>
			<codelink SampleID="GetCustomAttributes" SnippetID="5"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes14">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified module or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Module"/> that describes a portable executable file.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing
   the custom attributes applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking a <see cref="System.Reflection.Module"/> as a parameter:</para>
			<codelink SampleID="GetCustomAttributes" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes6">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified module or optionally inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Module"/> that describes a portable executable file.</param>
		<param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing
   the custom attributes applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/> if <paramref name="inherit"/> is
<see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking a <see cref="System.Reflection.Module"/> as a parameter:</para>
			<codelink SampleID="GetCustomAttributes" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes15">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified assembly or inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Assembly"/> that describes a reusable, versionable, collection of modules.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing
   the custom attributes applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking an <see cref="System.Reflection.Assembly"/> as a parameter: </para>
			<codelink SampleID="GetCustomAttributes" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Attribute.GetCustomAttributes7">
		<summary>
			<para> Retrieves an array of the custom attributes of a specified type applied to a specified assembly or optionally inherited from a base class.</para>
		</summary>
		<param name="element">An object derived from class <see cref="System.Reflection.Assembly"/> that describes a reusable, versionable, collection of modules.</param>
		<param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> array containing
   the custom attributes applied to <paramref name="element"/>.
			</para>
			<para>-or-</para>
			<para>An empty array if no such custom attributes exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>Return value contains the custom attributes for ancestors of <paramref name="element"/> if <paramref name="inherit"/> is
<see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of
      <see langword="GetCustomAttributes"/>, taking an <see cref="System.Reflection.Assembly"/> as a parameter: </para>
			<codelink SampleID="GetCustomAttributes" SnippetID="1"/>
		</example>
	</doc>
</docs>
