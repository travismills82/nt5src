<docs>
	<doc for="Enum.IConvertible.ToBoolean">
		<summary>
			<para>
       Converts the current value to a Boolean value based on the underlying
       type.
    </para>
		</summary>
		<exception cref="System.InvalidCastException">
    Always.
 </exception>
		<remarks>
			<para>
       Currently not implemented. Always throws an exception.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToChar">
		<summary>
			<para>
       Converts the current value to a unicode character based on the underlying type.
    </para>
		</summary>
		<exception cref="System.InvalidCastException">
    Always.
 </exception>
		<remarks>
			<para>
       Currently not implemented. Always throws an exception.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToSByte">
		<summary>
			<para>
       Converts the current value to an 8-bit signed integer based on the underlying type.
    </para>
		</summary>
		<returns>
			<para>
       The converted value.
    </para>
		</returns>
		<remarks>
			<para>
       Uses <see cref="System.Convert"/>
       to perform
       the conversion.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToByte">
		<summary>
			<para>
       Converts the current value to an 8-bit unsigned integer based on the underlying type.
    </para>
		</summary>
		<returns>
			<para>
       The converted value.
    </para>
		</returns>
		<remarks>
			<para>
       Uses <see cref="System.Convert"/>
       to perform
       the conversion.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToInt16">
		<summary>
			<para>
       Converts the current value to a 16-bit signed integer based on the underlying type.
    </para>
		</summary>
		<returns>
			<para>
       The converted value.
    </para>
		</returns>
		<remarks>
			<para>
       Uses <see cref="System.Convert"/>
       to perform
       the conversion.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToUInt16">
		<summary>
			<para>
       Converts the current value to a 16-bit unsigned integer based on the underlying type.
    </para>
		</summary>
		<returns>
			<para>
       The converted value.
    </para>
		</returns>
		<remarks>
			<para>
       Uses <see cref="System.Convert"/>
       to perform
       the conversion.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToInt32">
		<summary>
			<para>
       Converts the current value to a 32-bit signed integer based on the underlying type.
    </para>
		</summary>
		<returns>
			<para>
       The converted value.
    </para>
		</returns>
		<remarks>
			<para>
       Uses <see cref="System.Convert"/>
       to perform
       the conversion.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToUInt32">
		<summary>
			<para>
       Converts the current value to a 32-bit unsigned integer based on the underlying type.
    </para>
		</summary>
		<returns>
			<para>
       The converted value.
    </para>
		</returns>
		<remarks>
			<para>
       Uses <see cref="System.Convert"/>
       to perform
       the conversion.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToInt64">
		<summary>
			<para>
       Converts the current value to a 64-bit signed integer based on the underlying type.
    </para>
		</summary>
		<returns>
			<para>
       The converted value.
    </para>
		</returns>
		<remarks>
			<para>
       Uses <see cref="System.Convert"/>
       to perform
       the conversion.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToUInt64">
		<summary>
			<para>
       Converts the current value to a 64-bit unsigned integer based on the underlying type.
    </para>
		</summary>
		<returns>
			<para>
       The converted value.
    </para>
		</returns>
		<remarks>
			<para>
       Uses <see cref="System.Convert"/>
       to perform
       the conversion.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToSingle">
		<summary>
			<para>
       Converts the current value to a single-precision floating point number based on the underlying
       type.
    </para>
		</summary>
		<exception cref="System.InvalidCastException">
    Always.
 </exception>
		<remarks>
			<para>
       Currently not implemented. Always throws an exception.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToDouble">
		<summary>
			<para>
       Converts the current value to a double-precision floating point number based on the underlying
       type.
    </para>
		</summary>
		<exception cref="System.InvalidCastException">
    Always.
 </exception>
		<remarks>
			<para>
       Currently not implemented. Always throws an exception.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToDecimal">
		<summary>
			<para>
       Converts the current value to a <see cref="System.Decimal"/>
       based on the underlying
       type.
    </para>
		</summary>
		<exception cref="System.InvalidCastException">
    Always.
 </exception>
		<remarks>
			<para>
       Currently not implemented. Always throws an exception.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToDateTime">
		<summary>
			<para>
       Converts the current value to a <see cref="System.DateTime"/>
       based on the underlying
       type.
    </para>
		</summary>
		<exception cref="System.InvalidCastException">
    Always.
 </exception>
		<remarks>
			<para>
       Currently not implemented. Always throws an exception.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.IConvertible.ToType">
		<summary>
			<para>
       Converts the current value to a specified type based on the underlying type.
    </para>
		</summary>
		<param name="type">
    The type to convert to.
 </param>
		<returns>
			<para>
       The converted value.
    </para>
		</returns>
		<remarks>
			<para>
       Uses <see cref="System.Convert"/> to perform the conversion.
    </para>
		</remarks>
	</doc>
	<doc for="Enum.GetTypeCode">
		<summary>
			<para>Returns the underlying <see cref="System.TypeCode"/> for this instance.</para>
		</summary>
		<returns>
			<para>The <see cref="System.TypeCode" qualify="true"/> for this instance.</para>
		</returns>
		<seealso cref="System.Enum.GetUnderlyingType"/>
	</doc>
	<doc for="Enum.ToObject6">
		<summary>
			<para> Returns an instance of the specified enumeration type set to the specified 32-bit unsigned integer value.
 </para>
		</summary>
		<param name="enumType">The enumeration for which to create a value. </param>
		<param name=" value">The value to set. </param>
		<returns>
			<para>An instance of the enumeration set to <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para></exception>
	</doc>
	<doc for="Enum.ToObject7">
		<summary>
			<para> Returns an instance of the specified enumeration type set to the specified 64-bit signed integer value.
 </para>
		</summary>
		<param name="enumType">The enumeration for which to create a value. </param>
		<param name=" value">The value to set. </param>
		<returns>
			<para>An instance of the enumeration set to <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para></exception>
	</doc>
	<doc for="Enum.ToObject8">
		<summary>
			<para> Returns an instance of the specified enumeration type set to the specified 64-bit unsigned integer value.
 </para>
		</summary>
		<param name="enumType">The enumeration for which to create a value. </param>
		<param name=" value">The value to set. </param>
		<returns>
			<para>An instance of the enumeration set to <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para></exception>
	</doc>
	<doc for="Enum.ToObject1">
		<overload>
			<para> Returns an instance of the specified enumeration type set to the specified value.
 </para>
		</overload>
		<summary>
			<para> Returns an instance of the specified enumeration type set to the specified 8-bit signed integer value.
 </para>
		</summary>
		<param name="enumType">The enumeration for which to create a value. </param>
		<param name=" value">The value to set. </param>
		<returns>
			<para>An instance of the enumeration set to <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para></exception>
	</doc>
	<doc for="Enum.ToObject2">
		<summary>
			<para> Returns an instance of the specified enumeration type set to the specified 16-bit signed integer value.
 </para>
		</summary>
		<param name="enumType">The enumeration for which to create a value. </param>
		<param name=" value">The value to set. </param>
		<returns>
			<para> An instance of the enumeration set to <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para></exception>
	</doc>
	<doc for="Enum.ToObject4">
		<summary>
			<para> Returns an instance of the specified enumeration type set to the specified 8-bit unsigned integer value.
 </para>
		</summary>
		<param name="enumType">The enumeration for which to create a value. </param>
		<param name=" value">The value to set. </param>
		<returns>
			<para>An instance of the enumeration set to <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para></exception>
	</doc>
	<doc for="Enum.ToObject5">
		<summary>
			<para> Returns an instance of the specified enumeration type set to the specified 16-bit unsigned integer value.
 </para>
		</summary>
		<param name="enumType">The enumeration for which to create a value. </param>
		<param name=" value">The value to set. </param>
		<returns>
			<para>An instance of the enumeration set to <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para></exception>
	</doc>
	<doc for="Enum.ToObject3">
		<summary>
			<para> Returns an instance of the specified enumeration type set to the specified 32-bit signed integer value.
 </para>
		</summary>
		<param name="enumType">The enumeration for which to create a value. </param>
		<param name=" value">The value to set. </param>
		<returns>
			<para>An instance of the enumeration set to <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para></exception>
	</doc>
	<doc for="Enum.ToObject">
		<summary>
			<para> Returns an instance of the specified enumeration set to the specified value.
 </para>
		</summary>
		<param name="enumType">An enumeration. </param>
		<param name=" value">The value. </param>
		<returns>
			<para> An enumeration object whose value is
 <paramref name="value"/>.
 </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para><para> -or-</para><para><paramref name="value"/> is not type <see cref="System.SByte"/>, <see cref="System.Int16"/>, <see cref="System.Int32"/>, <see cref="System.Int64"/>, <see cref="System.Byte"/>, <see cref="System.UInt16"/>, <see cref="System.UInt32"/>, or <see cref="System.UInt64"/>.</para></exception>
		<remarks>
			<para>The <paramref name="value"/> parameter is specified in terms of the underlying type of the enumeration.</para>
		</remarks>
	</doc>
	<doc for="Enum.ToString2">
		<summary>
			<para> Converts the value of this instance to its equivalent 
 string
 representation. </para>
		</summary>
		<returns>
			<para>The string 
 representation of the value of this instance.</para>
		</returns>
		<remarks>
			<para>This method works as if the general format character,
 "G", were specified. That is, if the <see cref="System.FlagsAttribute"/> is not applied to this enumerated type and there is a
 named constant equal to the value of this instance, then the return value is a
 string containing the name of the constant. If the <see cref="System.FlagsAttribute"/> is applied and there is a combination of one or more
 named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list
 of the names of the constants. Otherwise, the return value is the string representation
 of the numeric value of this instance. </para>
			<para> For more information about format characters, see the Remarks section
 of the <see cref="System.Enum.Format"/> method. For more information about formatting in
 general, see <see topic="cpConFormattingOverview"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates converting an enumerated value to a
 string.</para>
			<codelink SampleID="Classic Enum.ToString2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Enum.Format"/>
		<seealso cref="System.Enum.Parse"/>
	</doc>
	<doc for="Enum.ToString3">
		<summary>
			<para> Converts the value of this instance to 
 its equivalent string representation using the specified
 format information. </para>
		</summary>
		<param name=" provider">(Reserved) An <see cref="System.IFormatProvider"/> that supplies format information about this instance.</param>
		<returns>
			<para>The string 
 representation of the name of the value of this instance as
 specified by <paramref name="provider"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="provider"/> parameter is reserved; it does not participate in this operation and
 can be specified as <see langword="null"/>. Therefore, this method is equivalent to the
<see cref="System.Enum.ToString"/> 
method that takes no parameters.</para>
		</remarks>
		<seealso cref="System.Enum.Format"/>
		<seealso cref="System.Enum.Parse"/>
	</doc>
	<doc for="Enum.Equals">
		<summary>
			<para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
		</summary>
		<param name=" obj">An object to compare with this instance, or <see langword="null"/>.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="obj"/> is an <see cref="System.Enum"/> with the same underlying type and value as this instance; otherwise, <see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following code sample illustrates the use of <see langword="Equals"/> 
in the context of <see langword="Enum"/>:</para>
			<codelink SampleID="enumequals" SnippetID="1"/>
		</example>
		<seealso cref="System.Enum.CompareTo"/>
	</doc>
	<doc for="Enum.CompareTo">
		<summary>
			<para>Compares this instance to a specified object and returns an indication of their relative values.</para>
		</summary>
		<param name="target">An object to compare, or <see langword="null"/>.</param>
		<returns>
			<para>A signed number indicating the relative values of this
      instance and <paramref name="target"/>.</para>
			<list type="table">
				<listheader>
					<term>Return Value</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> Less
            than
            zero</term>
					<description>The value of this instance is less than the
            value of <paramref name="target"/>.</description>
				</item>
				<item>
					<term> Zero</term>
					<description>The value of this instance is equal to the value of
         <paramref name="target"/>.</description>
				</item>
				<item>
					<term> Greater
            than zero</term>
					<description>
						<para>The value of this instance is greater than the value of
            <paramref name="target"/>.</para>
						<para>-or-</para>
						<para><paramref name="target"/> is
         <see langword="null"/>.</para></description>
				</item>
			</list>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="target"/> and this instance are not the same type.</exception>
		<exception cref="System.InvalidOperationException">This instance is not type <see cref="System.SByte"/>, <see cref="System.Int16"/>, <see cref="System.Int32"/>, <see cref="System.Int64"/>, <see cref="System.Byte"/>, <see cref="System.UInt16"/>, <see cref="System.UInt32"/>, or <see cref="System.UInt64"/>.</exception>
		<example>
			<para>The following code sample illustrates the use of <see langword="CompareTo"/> 
in the context of <see langword="Enum"/>:</para>
			<codelink SampleID="enumcompareto" SnippetID="1"/>
		</example>
		<seealso cref="System.Enum.Equals"/>
	</doc>
	<doc for="Enum.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer hash code.</para>
		</returns>
	</doc>
	<doc for="Enum.GetUnderlyingType">
		<summary>
			<para> Returns the underlying type of the specified enumeration.
      </para>
		</summary>
		<param name="enumType">An enumeration type. </param>
		<returns>
			<para> The underlying <see cref="System.Type"/> of <paramref name="enumType"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para></exception>
		<remarks>
			<para>The following code sample illustrates the use 
      of <see langword="GetUnderlyingType"/>:</para>
			<codelink SampleID="Enum Example" SnippetID="5"/>
		</remarks>
		<seealso cref="System.Enum.GetTypeCode"/>
	</doc>
	<doc for="Enum.GetValues">
		<summary>
			<para> Retrieves an array of the values of the constants in
      a specified enumeration.
      </para>
		</summary>
		<param name="enumType">An enumeration type. </param>
		<returns>
			<para> An <see cref="System.Array"/> of the
   values of
   the constants in <paramref name="enumType"/>. The elements of the array
   are sorted by the values of the enumeration constants.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para></exception>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="GetValues"/>:</para>
			<codelink SampleID="enumgetvalues" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Enum.Parse1">
		<summary>
			<para>Converts the string representation of the name or numeric value
      of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive.</para>
		</summary>
		<param name="enumType">The <see cref="System.Type"/>of the enumeration. </param>
		<param name="value">A string containing the name or value to convert.</param>
		<param name=" ignoreCase">If <see langword="true"/>, ignore case; otherwise, regard case.</param>
		<returns>
			<para>An object of type <paramref name="enumType"/> whose value is represented by <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> or <paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para>
			<para>-or-</para>
			<para>
				<paramref name="value"/> is either an empty string ("") or only contains white space.</para>
			<para>-or-</para>
			<para><paramref name="value"/> is a name, but not one of the named constants defined for the enumeration.</para></exception>
		<remarks>
			<para>The <paramref name="value"/> parameter contains
   a value, a named constant, or a list of named constants
   delimited by commas (,). One or more blanks spaces can precede or follow each
   value, name, or comma in <paramref name="value"/>. If <paramref name="value"/> is a list, the return value
   is the value of the specified names combined with a bitwise OR operation.</para>
			<para>The <paramref name="ignoreCase"/> parameter specifies whether this operation is case-sensitive.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="Parse"/>, 
   taking a <see cref="System.Type"/> and a <see cref="System.String"/> as parameters:</para>
			<codelink SampleID="enumparse" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Enum.Parse">
		<overload>
			<para>Converts the string representation of the name or numeric
      value of one or more enumerated constants to an equivalent enumerated
      object.</para>
		</overload>
		<summary>
			<para>Converts the string representation of the name or numeric
      value of one or more enumerated constants to an equivalent enumerated
      object.</para>
		</summary>
		<param name="enumType">The <see cref="System.Type"/>of the enumeration. </param>
		<param name=" value">A string containing the name or value to convert.</param>
		<returns>
			<para> An object of type <paramref name="enumType"/> whose value is
   represented by <paramref name="value"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> or <paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para>
			<para>-or-</para>
			<para>
				<paramref name="value"/> is either an empty string or only contains white space.</para>
			<para>-or-</para>
			<para><paramref name="value"/> is a name, but not one of the named constants defined for the enumeration.</para></exception>
		<remarks>
			<para>The <paramref name="value"/> parameter contains a value, a named constant, or a list of named constants delimited by commas (,). One or more blanks spaces can precede or follow each value, name, or comma in <paramref name="value"/>. If <paramref name="value"/> is a list, the return value is the value of the specified names combined with a bitwise OR operation.</para>
			<para> This operation is case-sensitive.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="Parse"/>,
   taking a <see cref="System.Type"/> and a <see cref="System.String"/> as parameters:</para>
			<codelink SampleID="enumparse" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Enum.GetName">
		<summary>
			<para> Retrieves the name of the constant in
      the specified enumeration that has the
      specified value.
      </para>
		</summary>
		<param name="enumType"> An enumeration type. </param>
		<param name="value">The value of a particular enumerated constant in terms of its underlying type. </param>
		<returns>
			<para> A string containing the name of the
      enumerated constant in <paramref name="enumType"/> whose value is <paramref name="value"/>, or
   <see langword="null"/>
   if no such constant is found.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> or <paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see cref="System.Enum"/>.</para>
			<para>-or-</para>
			<para><paramref name="value"/> is neither of type <paramref name="enumType"/> nor does it have the same underlying type as <paramref name="enumType"/>.</para></exception>
		<example>
			<para>The following code sample illustrates the use
      of <see langword="GetName"/>:</para>
			<codelink SampleID="enumgetname" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Enum.GetNames">
		<summary>
			<para>Retrieves an array of the names of the constants in a specified enumeration. </para>
		</summary>
		<param name="enumType"> An enumeration type. </param>
		<returns>
			<para>A string
      array of the names of the constants in <paramref name="enumType"/>. The elements of the array
      are sorted by the values of the enumerated constants. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> parameter is not an <see cref="System.Enum"/>.</para></exception>
		<example>
			<para>The following code sample illustrates the use
      of <see langword="GetNames"/>:</para>
			<codelink SampleID="enumgetnames" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Enum">
		<summary>
			<para>Provides
      the base class for enumerations.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para> An <see langword="Enum"/> is a named constant whose
   underlying type
   is any integral type except <see cref="System.Char"/>. If no underlying type is explicitly
   declared, <see cref="System.Int32"/>
   is used. Programming languages typically provide syntax to declare an enumeration that consists of
   a set of named constants and their values.</para>
			<para>Class <see cref="System.Enum"/> is 
derived from class <see cref="System.ValueType"/>; that is, <see cref="System.Enum"/> is itself a reference type, not a value type.</para>
			<para><see langword="Enum"/> provides
methods to compare instances of this class, convert the value of an instance to
its string representation, convert the string representation of a number to an instance of
this class, and create an instance of a specified enumeration and value.</para>
			<para> You can also treat an <see langword="Enum"/> as a bit field. For
more information, see <see cref="System.FlagsAttribute"/>.</para>
			<para>This class inherits from <see cref="System.ValueType"/>, and implements the <see cref="System.IComparable"/>, <see cref="System.IFormattable"/>, and <see cref="System.IConvertible"/> interfaces. Use the <see cref="System.Convert"/> class for conversions instead of this
class' explicit interface member implementation of
<see cref="System.IConvertible"/>.</para>
		</remarks>
		<example>
			<para>The following code sample demonstrates the use of <see langword="Enum"/>:</para>
			<codelink SampleID="enummain" SnippetID="1"/>
		</example>
		<seealso cref="System.ValueType"/>
		<seealso cref="System.FlagsAttribute"/>
		<seealso cref="System.Char"/>
		<seealso cref="System.Int32"/>
	</doc>
	<doc for="Enum.IsDefined">
		<summary>
			<para> Returns an indication whether a constant with a specified value
      exists in a specified enumeration.
      </para>
		</summary>
		<param name="enumType">An enumeration type. </param>
		<param name=" value">The value or name of a constant in <paramref name="enumType"/> . </param>
		<returns>
			<para><see langword="true"/> if a constant in
<paramref name="enumType"/> has a value equal to 
<paramref name="value"/>; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="enumType"/> or <paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>
				<paramref name="enumType"/> is not an <see langword="Enum"/>.</para>
			<para> -or-</para>
			<para>The type of <paramref name="value"/> is not an <paramref name="enumType"/>.</para>
			<para>-or-</para>
			<para>The type of <paramref name="value"/> is not an underlying type of <paramref name="enumType"/>.</para></exception>
		<exception cref="System.InvalidOperationException"><paramref name="value"/> is not type <see cref="System.SByte"/>, <see cref="System.Int16"/>, <see cref="System.Int32"/>, <see cref="System.Int64"/>, <see cref="System.Byte"/>, <see cref="System.UInt16"/>, <see cref="System.UInt32"/>, or <see cref="System.UInt64"/>, or <see cref="System.String"/>.</exception>
	</doc>
	<doc for="Enum.ToString1">
		<summary>
			<para> Converts the value of this instance to its equivalent
      string representation using the specified format
      and format information. </para>
		</summary>
		<param name=" format">A format specification.</param>
		<param name=" provider">(Reserved) An <see cref="System.IFormatProvider"/> that supplies format information about this instance.</param>
		<returns>
			<para>The string representation of the value of this instance as specified by <paramref name="format"/> and <paramref name="provider"/>.</para>
		</returns>
		<exception cref="System.FormatException"><paramref name="format"/> does not contain a valid format specification.</exception>
		<remarks>
			<para>The <paramref name="format"/> parameter can contain format
   characters "G" or "g", "D" or "d", "X" or "x", and "F" or "f". If <paramref name="format"/>
   is <see langword="null"/>
   or an empty string (""), the general
   format specifier ("G") is used. For more information about these format characters, see the
   Remarks section of the <see cref="System.Enum.Format"/> method. For more information about formatting in
   general, see <see topic="cpConFormattingOverview"/>.</para>
			<para>The <paramref name="provider"/> parameter is reserved; it
does not participate in this operation and can be specified as
<see langword="null"/>.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso topic="cpConEnumerationFormatStrings"/>
		<seealso cref="System.Enum.Format"/>
		<seealso cref="System.Enum.Parse"/>
	</doc>
	<doc for="Enum.Format">
		<summary>
			<para> Converts the specified value of a specified enumerated
      type to its equivalent string
      representation according to the specified format. </para>
		</summary>
		<param name="enumType">The enumeration type of the value to convert. </param>
		<param name=" value">The value to convert. </param>
		<param name=" format">The output format to use. </param>
		<returns>
			<para> A string representation of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="enumType"/>, <paramref name="value"/>, or <paramref name="format"/> parameter is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="enumType"/> parameter is not an <see cref="System.Enum"/> type.</para>
			<para>-or-</para>
			<para>The <paramref name="value"/> is from an enumeration that differs in type from <paramref name="enumType"/>.</para>
			<para>-or-</para>
			<para>The type of <paramref name="value"/> is not an underlying type of <paramref name="enumType"/>.</para></exception>
		<exception cref="System.FormatException">The <paramref name="format"/> parameter contains an invalid value. </exception>
		<remarks>
			<para> The valid format values are:
      </para>
			<list type="table">
				<listheader>
					<term> Format</term>
					<description> Description</description>
				</listheader>
				<item>
					<term> "G" or "g"</term>
					<description>
						<para> If <paramref name="value"/> is equal to a
            named enumerated constant, the name of that constant is
            returned; otherwise, the decimal equivalent of <paramref name="value"/>
            
            is returned.</para>
						<para> For example, suppose the only enumerated constant is
            named, Red, and its value is
            1. If <paramref name="value"/> is specified as 1, then this format
            returns "Red". However, if <paramref name="value"/> is specified as 2, this format
            returns "2".</para>
						<para>-or-</para>
						<para> If the <see cref="System.FlagsAttribute"/> custom attribute is applied to
         the enumeration, then <paramref name="value"/> is
         treated as a
         
         bit field that contains one
         or more flags that consist of one or
         more bits. </para>
						<para> If <paramref name="value"/> is equal to a
      combination of named enumerated constants, a delimiter-separated list of
      the names of those constants is returned. <paramref name="value"/> is searched for flags, going from the
      flag with the largest value to the smallest value. For each flag that
      corresponds to a bit field in <paramref name="value"/>, the name of the constant is
      concatenated to the delimiter-separated list. Then the value of that flag
      is excluded from further consideration, and the search continues for the
      next
      flag.</para>
						<para> If <paramref name="value"/> is not equal
   to a combination of named enumerated
   constants, the decimal equivalent of <paramref name="value"/> is
   returned.</para></description>
				</item>
				<item>
					<term> "X" or "x"</term>
					<description> Represents <paramref name="value"/> in hexadecimal without a leading "0x".</description>
				</item>
				<item>
					<term> "D" or "d"</term>
					<description> Represents <paramref name="value"/> in
   decimal form.</description>
				</item>
				<item>
					<term> "F" or "f"</term>
					<description>
						<para>Behaves identically to "G" or "g", except the
      <see cref="System.FlagsAttribute"/> is not required to be
         present on the <see cref="System.Enum"/>
         
         declaration.</para></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="Format"/>
in the context of <see langword="Enum"/>:</para>
			<codelink SampleID="enumformat" SnippetID="1"/>
		</example>
		<seealso topic="cpConFormattingOverview"/>
		<seealso topic="cpConEnumerationFormatStrings"/>
		<seealso cref="System.Enum.ToString"/>
	</doc>
	<doc for="Enum.ToString">
		<overload>
			<para>Converts the value of this instance to its equivalent
      string representation.</para>
		</overload>
		<summary>
			<para> Converts the value of this instance to its equivalent
      string representation using the specified format. </para>
		</summary>
		<param name="format">A format string.</param>
		<returns>
			<para>The string representation of the value of this instance as specified by <paramref name="format"/>.</para>
		</returns>
		<exception cref="System.FormatException"><paramref name="format"/> contains an invalid specification. </exception>
		<remarks>
			<para>The <paramref name="format"/> parameter can contain format characters "G" or "g", "D" or "d", "X" or
   "x", and "F" or "f". If <paramref name="format"/> is <see langword="null"/>
   or an empty string
   (""), the general format specifier ("G") is used. For more information about
   these format characters, see the Remarks section of the <see cref="System.Enum.Format"/> method. For
   more information about formatting in general, see
<see topic="cpConFormattingOverview"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="enum.tostring" SnippetID="1"/>
		</example>
		<seealso topic="cpConFormattingOverview"/>
		<seealso topic="cpConEnumerationFormatStrings"/>
		<seealso cref="System.Enum.Format"/>
		<seealso cref="System.Enum.Parse"/>
	</doc>
</docs>
