<docs>
	<doc for="ArgIterator.GetNextArg">
		<overload>
			<para>Returns the next argument in a variable-length argument list.</para>
		</overload>
		<summary>
			<para>Returns the next argument in a variable-length argument list.</para>
		</summary>
		<returns>
			<para>The next argument as a <see cref="System.TypedReference"/> object.</para>
		</returns>
		<exception cref="System.Exception">Attempt to read beyond the end of the list.</exception>
		<remarks>
			<para>The iterator is automatically advanced to the next argument.</para>
		</remarks>
	</doc>
	<doc for="ArgIterator.GetRemainingCount">
		<summary>
			<para>Returns the number of arguments remaining in the argument list.</para>
		</summary>
		<returns>
			<para>The number of remaining arguments.</para>
		</returns>
	</doc>
	<doc for="ArgIterator.GetHashCode">
		<summary>
			<para>Returns the hash code of this object.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer hash code.</para>
		</returns>
	</doc>

<doc for="ArgIterator.GetNextArg1">
		<summary>
			<para>Returns the next argument in a variable-length argument list that has a
      specified type.</para>
		</summary>
		<param name="rth">A runtime type handle that identifies the type of the argument to retrieve.</param>
		<returns>
			<para>The next argument as a <see cref="System.TypedReference"/> object.</para>
		</returns>
		<exception cref="System.Exception">Attempt to read beyond the end of the list.</exception>
		<remarks>
			<para>The iterator is automatically advanced to the next argument.</para>
			<note type="inotes">
      This method is
      provided specifically for use with the C/C++ programming language.
      
   </note>
		</remarks>
	</doc><doc for="ArgIterator.Equals">
		<summary>
			<para>This method is not supported, and always throws <see cref="System.NotSupportedException"/>.</para>
		</summary>
		<param name="o">An object to be compared to this instance.</param>
		<returns>
			<para>This comparison is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
	</doc><doc for="ArgIterator">
		<summary>
			<para>Represents a variable-length argument list; that is, the parameters of a
      function that takes a variable number of arguments.</para>
		</summary>
		<remarks>
			<para>Typically, you use this structure for writing compilers. The methods in this
      structure are not generally useful in other kinds of applications.</para>
			<para>The functionality in this structure is typically hidden in the syntax of a
      specific programming language. For example, the C++ programming language
      declares a variable-length argument list with an ellipsis ("...") at the end of
      a parameter list.</para>
		</remarks>
	</doc>
	<doc for="ArgIterator.End">
		<summary>
			<para> Concludes processing of the variable-length argument list
      represented by this instance.</para>
		</summary>
		<remarks>
			<para>Conceptually, <see cref="System.ArgIterator.End"/> concludes the 
   processing of a variable-length argument list. However, this method has no
   actual implementation; the <see cref="System.ArgIterator.End"/> method body is
   empty. You can use this method in your code as a marker to indicate where
   variable-length argument list processing logically ends.</para>
			<para>The <see cref="System.ArgIterator.End"/> method corresponds to the 
<see langword="va_end"/> method in the 
C standard library.</para>
		</remarks>
	</doc>
	<doc for="ArgIterator.ArgIterator">
		<overload>
			<para>Initializes a new instance of the <see cref="System.ArgIterator"/> structure.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.ArgIterator"/> structure using
   the specified argument list.</para>
		</summary>
		<param name="arglist"> An argument list consisting of the optional arguments.</param>
	</doc>
	<doc for="ArgIterator.GetNextArgType">
		<summary>
			<para>Returns the type of the next argument.</para>
		</summary>
		<returns>
			<para>The type of the next argument.</para>
		</returns>
		<remarks>
			<para>This method does not advance the iterator to the next argument.</para>
			<para><see cref="System.ArgIterator.GetNextArgType"/> returns 
   the type of the argument as specified in the calling function. For example, if
   an argument is type <see cref="System.String"/>, but the calling
   function specifies the argument as type <see cref="System.Object"/>, <see cref="System.ArgIterator.GetNextArgType"/> reports the argument as type <see cref="System.Object"/>.</para>
		</remarks>
	</doc>
	<doc for="ArgIterator.ArgIterator1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.ArgIterator"/> structure using
   the specified argument list and a pointer to an item in the list.</para>
		</summary>
		<param name="arglist">An argument list consisting of the optional arguments. </param>
		<param name="ptr">A pointer to the argument in <paramref name="arglist"/> to be accessed first.</param>
		<remarks>
			<note type="inotes">
      This constructor is
      provided specifically for use with the C/C++ programming language.
      
   </note>
		</remarks>
	</doc>
</docs>
