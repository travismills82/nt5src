<docs>
	<doc for="_AppDomain.Load6">
		<summary>
                        [To be supplied.]
                </summary>
	</doc><doc for="_AppDomain.Load8">
		<summary>
                        [To be supplied.]
                </summary>
	</doc><doc for="_AppDomain.AssemblyLoad">
		<summary>
			<para> Occurs when an assembly is loaded.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.AssemblyLoadEventHandler"/> delegate for this event can attempt to locate the
   assembly and load it.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc><doc for="_AppDomain.AssemblyResolve">
		<summary>
			<para> Occurs when the resolution of an assembly fails.</para>
		</summary>
		<remarks>
			<para>It is the responsibility of 
   <see cref="System.ResolveEventHandler"/> for 
      this event to return the assembly that resolves the type, assembly, or
      resource.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc><doc for="_AppDomain.AppendPrivatePath">
		<summary>
			<para>       Appends the specified name of the directory to the private path.
      </para>
		</summary>
		<param name="path">
   The name of the directory to be appended to the private path.
   </param>
		<remarks>
			<para>       The private path, or relative search path, is the path relative
      to the base directory where the assembly resolver probes for private assemblies.
      </para>
		</remarks>
	</doc><doc for="_AppDomain.BaseDirectory">
		<summary>
			<para> Gets the base directory that the
      assembly resolver used to probe for assemblies.
      </para>
		</summary>
		<value>
			<para> The
      base directory that the assembly resolver uses to probe for assemblies.
      </para>
		</value>
		<remarks>
			<para>This property corresponds to the assembly resolver's
      APPBASE.</para>
		</remarks>
	</doc><doc for="_AppDomain.Evidence">
		<summary>
			<para> Gets the <see cref="System.Security.Policy.Evidence"/> associated with this application domain
   that is used as
   input to security policy.
   </para>
		</summary>
		<value>
			<para> Gets the <see cref="System.Security.Policy.Evidence"/> associated with this
   application domain that is used as input to security policy.
   </para>
		</value>
	</doc><doc for="_AppDomain.DomainUnload">
		<summary>
			<para> Occurs when an <see cref="System.AppDomain"/> is about to be unloaded.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.EventHandler"/> delegate for this event can perform any termination activities before the application domain is unloaded.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc><doc for="_AppDomain.ExecuteAssembly">
		<overload>
			<para>Executes the specified assembly.</para>
		</overload>
		<summary>
			<para> Execute the <see cref="System.Reflection.Assembly"/>
given its file name and supplied evidence.</para>
		</summary>
		<param name="assemblyFile">The name of the file from which the assembly is to be loaded. </param>
		<param name="assemblySecurity">Evidence for loading the assembly. </param>
		<returns>
			<para> The value returned by the entry point of
      the assembly.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyFile"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyFile "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyFile"/> is not a valid assembly. </exception>
		<remarks>
			<para> The method does not spawn a new process, create a new application
      domain, or execute the entry point method on a new thread.
      </para>
		</remarks>
	</doc><doc for="_AppDomain.ExecuteAssembly2">
		<overload>
			<para>Executes the assembly given its file name.</para>
		</overload>
		<summary>
			<para>Execute the <see cref="System.Reflection.Assembly"/> given its file name and
   supplied <see cref="System.Security.Policy.Evidence"/>. Optionally, the <see cref="System.Reflection.Assembly"/>
   can be loaded into the domain-neutral code area for use by multiple AppDomains.</para>
		</summary>
		<param name="assemblyFile">The name of the file from which the assembly is to be loaded.</param>
		<param name="assemblySecurity">The supplied evidence for the assembly.</param>
		<param name="args">The arguments to the entry point of the assembly.</param>
		<returns>
			<para>The value returned by the entry point of the
      assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyFile"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyFile "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyFile"/> is not a valid assembly. </exception>
		<remarks>
			<para>The method does not spawn a new process, create a new application
      domain, or execute the entry point method on a new thread.</para>
		</remarks>
	</doc><doc for="_AppDomain.FriendlyName">
		<summary>
			<para> Gets the friendly name of this application domain.</para>
		</summary>
		<value>
			<para> The friendly name of this application domain.</para>
		</value>
		<remarks>
			<para> The friendly name of the default application domain is the
      name of the assembly file loaded in the application domain. The friendly name
      is formed by stripping the directory specification from the assembly's
      codebase. For example, if an assembly with the file name <c>"c:\MyAppDirectory\MyAssembly.exe"</c> is loaded
   in the default application domain, the friendly name of that application domain is <c>"MyAssembly.exe"</c>.</para>
		</remarks>
	</doc><doc for="_AppDomain.DynamicDirectory">
		<summary>
			<para>
      Gets the directory that the assembly resolver used to probe for dynamically-created assemblies.
      </para>
		</summary>
		<value>
			<para> Get the
      directory that the assembly resolver uses to probe for dynamically-created assemblies.
      </para>
		</value>
		<remarks>
			<para>Only available once an attempt has been made to load an assembly into this
      domain. </para>
		</remarks>
	</doc><doc for="_AppDomain.GetType">
		<summary>
			<para>Gets the type of the current instance.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Type"/>
object.</para>
		</returns>
	</doc><doc for="_AppDomain.GetAssemblies">
		<summary>
			<para> Gets the assemblies that have been loaded into this application
      domain.
      </para>
		</summary>
		<returns>
			<para> An array of assemblies in this application domain.
      </para>
		</returns>
	</doc><doc for="_AppDomain.GetData">
		<summary>
			<para>Gets the value stored in the current application domain for the
      specified data name.</para>
		</summary>
		<param name="name"> The name of an application domain property.</param>
		<returns>
			<para> The value of the <paramref name="name"/> property.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<remarks>
			<para><paramref name="name"/> can be the value of one
   of the <see cref="System.AppDomainSetup"/> properties.</para>
		</remarks>
	</doc><doc for="_AppDomain.InitializeLifetimeService">
		<summary>
			<para>Gives the <see cref="System.AppDomain"/> an infinite lifetime by preventing a lease from being created.</para>
		</summary>
		<returns>
			<para> Always <see langword="null"/>.
   </para>
		</returns>
	</doc><doc for="_AppDomain.ProcessExit">
		<summary>
			<para> Occurs when a process is about to exit.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.EventHandler"/> for this event can perform termination activities, such
   as closing files, releasing storage and so on, before the process ends.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc><doc for="_AppDomain.Load">
		<overload>
			<para>Loads an <see cref="System.Reflection.Assembly"/>
into this application domain.</para>
		</overload>
		<summary>
			<para>Loads an <see cref="System.Reflection.Assembly"/>
given its <see cref="System.Reflection.AssemblyName"/>.</para>
		</summary>
		<param name="assemblyRef">An object that describes the assembly to be loaded.</param>
		<returns>
   The loaded assembly.
</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyRef "/>is <see langword="null"/></exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyRef "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyRef"/> is not a valid assembly. </exception>
		<remarks>
			<para> This method should only be used to load an assembly into the current
      application domain. This method is defined for interoperability callers who cannot call the
      static Assembly.Load method.</para>
			<para>An attempt to call AppDomain.Load on an application domain that is not the
      current application domain will result in a successful load of the assembly in
      the target application domain. Since Assembly objects are not MarshalByRef, when
      the method attempts to return the Assembly object for the loaded assembly to the
      current application domain, the runtime will try to load the specified assembly
      into the current application domain and the load might fail. The assembly that is
      loaded into the current application domain might be different from the assembly
      that was loaded first if the path settings for the two application domains are
      different.</para>
		</remarks>
	</doc><doc for="_AppDomain.Load1">
		<summary>
			<para>Loads an <see cref="System.Reflection.Assembly"/>
given its display name.</para>
		</summary>
		<param name="assemblyString">The display name of the assembly.</param>
		<returns>
			<para>The loaded assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyString "/>is <see langword="null"/></exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyString "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyString"/> is not a valid assembly. </exception>
		<remarks>
			<para> This method should only be used to load an assembly into the current application domain. This method is defined for interoperability callers who cannot call the static Assembly.Load method.</para>
			<para>An attempt to call AppDomain.Load on an application domain that is not the
      current application domain will result in a successful load of the assembly in
      the target application domain. Since Assembly objects are not MarshalByRef, when
      the method attempts to return the Assembly object for the loaded assembly to the
      current application domain, the runtime will try to load the specified assembly
      into the current application domain and the load might fail. The assembly that is
      loaded into the current application domain might be different from the assembly
      that was loaded first if the path settings for the two application domains are
      different.</para>
		</remarks>
	</doc><doc for="_AppDomain.Load2">
		<summary>
			<para>Loads the <see cref="System.Reflection.Assembly"/> with a COFF based image
   containing an emitted <see cref="System.Reflection.Assembly"/>.</para>
		</summary>
		<param name="rawAssembly">An array of type <see langword="byte"/> that is a COFF-based image containing an emitted assembly.</param>
		<returns>
			<para>The loaded assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="rawAssembly"/> is <see langword="null"/>.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="rawAssembly"/> is not a valid assembly. </exception>
		<remarks>
			<para> This method should only be used to load an assembly into the current application domain. This method is defined for interoperability callers who cannot call the static Assembly.Load method.</para>
			<para>An attempt to call AppDomain.Load on an application domain that is not the
      current application domain will result in a successful load of the assembly in
      the target application domain. Since Assembly objects are not MarshalByRef, when
      the method attempts to return the Assembly object for the loaded assembly to the
      current application domain, the runtime will try to load the specified assembly
      into the current application domain and the load might fail. The assembly that is
      loaded into the current application domain might be different from the assembly
      that was loaded first if the path settings for the two application domains are
      different.</para>
		</remarks>
	</doc><doc for="_AppDomain.Load3">
		<summary>
			<para>Loads the <see cref="System.Reflection.Assembly"/> with a COFF based image
   containing an emitted <see cref="System.Reflection.Assembly"/>. The raw bytes representing the symbols for
   the <see cref="System.Reflection.Assembly"/>
   are also
   loaded.</para>
		</summary>
		<param name="rawAssembly">An array of type <see langword="byte"/> that is a COFF-based image containing an emitted assembly.</param>
		<param name="rawSymbolStore">An array of type <see langword="byte"/> containing the raw bytes representing the symbols for the assembly.</param>
		<returns>
			<para>The loaded assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="rawAssembly"/> is <see langword="null"/>.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="rawAssembly"/> is not a valid assembly. </exception>
		<remarks>
			<para> This method should only be used to load an assembly into the current application domain. This method is defined for interoperability callers who cannot call the static Assembly.Load method.</para>
			<para>An attempt to call AppDomain.Load on an application domain that is not the
      current application domain will result in a successful load of the assembly in
      the target application domain. Since Assembly objects are not MarshalByRef, when
      the method attempts to return the Assembly object for the loaded assembly to the
      current application domain, the runtime will try to load the specified assembly
      into the current application domain and the load might fail. The assembly that is
      loaded into the current application domain might be different from the assembly
      that was loaded first if the path settings for the two application domains are
      different.</para>
		</remarks>
	</doc><doc for="_AppDomain.Load4">
		<summary>
			<para>Loads the <see cref="System.Reflection.Assembly"/> with a COFF based image
   containing an emitted <see cref="System.Reflection.Assembly"/>. The raw bytes representing the symbols for
   the <see cref="System.Reflection.Assembly"/>
   are also
   loaded.</para>
		</summary>
		<param name="rawAssembly">An array of type <see langword="byte"/> that is a COFF-based image containing an emitted assembly.</param>
		<param name="rawSymbolStore">An array of type <see langword="byte"/> containing the raw bytes representing the symbols for the assembly.</param>
		<param name="securityEvidence">Evidence for loading the assembly.</param>
		<returns>
			<para>The loaded assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="rawAssembly"/> is <see langword="null"/>.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="rawAssembly"/> is not a valid assembly. </exception>
		<remarks>
			<para> This method should only be used to load an assembly into the current application domain. This method is defined for interoperability callers who cannot call the static Assembly.Load method.</para>
			<para>An attempt to call AppDomain.Load on an application domain that is not the
      current application domain will result in a successful load of the assembly in
      the target application domain. Since Assembly objects are not MarshalByRef, when
      the method attempts to return the Assembly object for the loaded assembly to the
      current application domain, the runtime will try to load the specified assembly
      into the current application domain and the load might fail. The assembly that is
      loaded into the current application domain might be different from the assembly
      that was loaded first if the path settings for the two application domains are
      different.</para>
		</remarks>
	</doc><doc for="_AppDomain.Load5">
		<overload>
			<para> Loads an <see cref="System.Reflection.Assembly"/>
into this application domain.</para>
		</overload>
		<summary>
			<para> Loads an <see cref="System.Reflection.Assembly"/>
given its <see cref="System.Reflection.AssemblyName"/>.</para>
		</summary>
		<param name="assemblyRef">An object that describes the assembly to be loaded. </param>
		<param name="assemblySecurity">Evidence for loading the assembly.</param>
		<returns>
			<para>The loaded assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyRef "/>is <see langword="null"/></exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyRef "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyRef"/> is not a valid assembly. </exception>
	</doc><doc for="_AppDomain.Load7">
		<summary>
			<para>Loads an <see cref="System.Reflection.Assembly"/>
given its display name.</para>
		</summary>
		<param name="assemblyString">The display name of the assembly.</param>
		<param name="assemblySecurity">Evidence for loading the assembly.</param>
		<returns>
			<para>The loaded assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyString "/>is <see langword="null"/></exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyString "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyString"/> is not a valid assembly. </exception>
	</doc><doc for="_AppDomain.RelativeSearchPath">
		<summary>
			<para> Gets the path relative to the base directory where the
      assembly resolver should probe for private assemblies.
      </para>
		</summary>
		<value>
			<para> The path
      relative to the base directory where the assembly resolver should
      probe for private assemblies.
      </para>
		</value>
		<remarks>
			<para>Private assemblies are deployed in the same directory structure as the
      application. </para>
		</remarks>
	</doc><doc for="_AppDomain.ToString">
		<summary>
			<para> Obtains the <see cref="System.String"/> representation of this instance.
   </para>
		</summary>
		<returns>
			<para>
      The friendly name of the application domain.
      </para>
		</returns>
		<remarks>
			<para> The string representation specifies the friendly name of the
      application domain.
      </para>
		</remarks>
	</doc><doc for="_AppDomain.TypeResolve">
		<summary>
			<para> Occurs when the resolution of a type fails.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.ResolveEventHandler"/> for this event can attempt to locate the type and load
   it.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc><doc for="_AppDomain.ResourceResolve">
		<summary>
			<para> Occurs when the resolution of a resource fails.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.ResolveEventHandler"/> for this event can attempt to locate the resource and load
   it.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc><doc for="_AppDomain.UnhandledException">
		<summary>
			<para> Occurs when an exception
      is not caught by an event handler.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.UnhandledExceptionEventHandler"/> delegate for this event provides
   default handling for uncaught exceptions. When this event is not handled, the
   system default handler reports the exception to the user and terminates the application. </para>
			<para> This event occurs only for the application domain that is created by the
   system when an application is started. If an application creates additional
   application domains, specifying a delegate for this event in those applications
   domains has no effect. </para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc><doc for="_AppDomain.ShadowCopyFiles">
		<summary>
			<para> Gets an indication whether all assemblies
      loaded in the application
      domain are shadow copied.
      </para>
		</summary>
		<value>
			<para><see langword="true "/>
if all assemblies loaded in the application domain are
shadow copied, not just a particular one; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>For more information, see <see cref="System.AppDomainSetup.ShadowCopyFiles" qualify="true"/>.</para>
		</remarks>
	</doc><doc for="_AppDomain.SetData">
		<summary>
			<para>Assigns the specified value to the specified application
      domain property.</para>
		</summary>
		<param name="name">The name of an application domain property.</param>
		<param name="data">The value to set the <paramref name="name"/> property.</param>
		<remarks>
			<para>This method has been superseded by properties of the
      <see cref="System.AppDomainSetup"/> class. The following table
      shows the <see cref="System.AppDomainSetup"/> property that corresponds to a value of
      <paramref name="name"/>.</para>
			<list type="table">
				<listheader>
					<term>Value of 'name'</term>
					<description>Property</description>
				</listheader>
				<item>
					<term> "APPBASE"</term>
					<description>ApplicationBase</description>
				</item>
				<item>
					<term> "APP_CONFIG_FILE"</term>
					<description>ConfigurationFile</description>
				</item>
				<item>
					<term> "DYNAMIC_BASE"</term>
					<description>DynamicBase</description>
				</item>
				<item>
					<term> "DEV_PATH"</term>
					<description>(no
            property)</description>
				</item>
				<item>
					<term> "APP_NAME"</term>
					<description>ApplicationName</description>
				</item>
				<item>
					<term> "CACHE_BASE"</term>
					<description>PrivateBinPath</description>
				</item>
				<item>
					<term> "BINPATH_PROBE_ONLY"</term>
					<description>PrivateBinPathProbe</description>
				</item>
				<item>
					<term> "SHADOW_COPY_DIRS"</term>
					<description>ShadowCopyDirectories</description>
				</item>
				<item>
					<term> "FORCE_CACHE_INSTALL"</term>
					<description>ShadowCopyFiles</description>
				</item>
				<item>
					<term> "CACHE_BASE"</term>
					<description>CachePath</description>
				</item>
				<item>
					<term> (application
            specific)</term>
					<description>LicenseFile</description>
				</item>
			</list>
		</remarks>
	</doc><doc for="_AppDomain.SetAppDomainPolicy">
		<summary>
			<para> Establishes the
      security policy level for this application domain.
      </para>
		</summary>
		<param name="domainPolicy">The security policy level. </param>
		<exception cref="System.ArgumentNullException"><paramref name="domainPolicy"/> is <see langword="null"/>.</exception>
		<exception cref="System.Security.Policy.PolicyException">The security policy level has already been set. </exception>
		<remarks>
			<para>Call this method before an assembly is loaded into the <see cref="System.AppDomain"/> in order for
   the security policy to have effect. </para>
		</remarks>
	</doc><doc for="_AppDomain.Equals">
		<summary>
			<para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
		</summary>
		<param name=" other">An object to compare with this instance, or <see langword="null"/>.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="other"/> is an instance of <see cref="System.AppDomain"/>
and equals the value of this instance; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc><doc for="_AppDomain.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A hash code for this instance.</para>
		</returns>
		<seealso cref="System.Object.GetHashCode"/>
	</doc><doc for="_AppDomain.GetLifetimeService">
		<summary>
			<para>Returns a lifetime service object that controls the lifetime policy for an 
      instance that implements this interface. </para>
		</summary>
		<returns>
			<para>An object to control the lifetime service. This is an object of type 
   <see cref="System.Runtime.Remoting.Lifetime.ILease"/> for the default lifetime 
      service.</para>
		</returns>
	</doc><doc for="_AppDomain">
		<summary>
			<para> Represents an application domain,
      which is an isolated environment where applications execute.</para>
		</summary>
		<remarks>
			<para>Application domains, which are represented by <see cref="System.AppDomain"/> objects, provide isolation,
   unloading, and security boundaries for executing managed
   code. </para>
			<para>Multiple application domains can run in a single process; however, there is
   not a one-to-one correlation between application domains and threads. Several
   threads can belong to a single application domain, and while a given thread is
   not confined to a single application domain, at any given time, a thread
   executes in a single application domain. </para>
			<para>Application domains are created using the <see cref="System.AppDomain.CreateDomain"/> method. <see cref="System.AppDomain"/> instances are
used to load and execute assemblies (<see cref="System.Reflection.Assembly"/>). When a <see cref="System.AppDomain"/>
is no longer in use, it
can be unloaded. </para>
			<para>The <see cref="System._AppDomain"/> interface implements a set of events to enable applications
to respond when an assembly is loaded, an application domain will be unloaded,
or an unhandled exception is thrown. </para>
		</remarks>
	</doc><doc for="_AppDomain.SetPrincipalPolicy">
		<summary>
			<para>Specifies how principal and identity objects should be attached to a thread 
      if the thread attempts to bind to a principal while executing in this
      application domain.</para>
		</summary>
		<param name="policy">The type of the principal object to be attached to threads. </param>
	</doc><doc for="_AppDomain.SetShadowCopyPath">
		<summary>
			<para>Establishes the specified directory path as the location of
      assemblies to be shadow copied.</para>
		</summary>
		<param name="s">A list of directory names, where each name is separated by a semicolon.</param>
		<remarks>
			<para>This method sets the <see cref="System.AppDomainSetup.ShadowCopyDirectories"/> property of the internal <see cref="System.AppDomainSetup"/> object
   associated with this instance.</para>
		</remarks>
	</doc><doc for="_AppDomain.DoCallBack">
		<summary>
			<para> Executes the code in another application domain that is identified
      by the specified delegate.</para>
		</summary>
		<param name="theDelegate">A delegate that specifies a method to call.</param>
		<remarks>
			<para><paramref name="theDelegate"/> can specify a
   marshal-by-value, <see cref="System.MarshalByRefObject"/>, or <see cref="System.ContextBoundObject"/>
   object.</para>
		</remarks>
	</doc><doc for="_AppDomain.CreateInstance">
		<overload>
			<para> Creates a new instance of a specified type defined in a specified
      assembly.
      </para>
		</overload>
		<summary>
			<para> Creates a new instance of the specified type defined in the specified assembly.
      </para>
		</summary>
		<param name="assemblyName">The display name of the assembly. </param>
		<param name="typeName">The fully-qualified name of the requested type. </param>
		<returns>
			<para> An object that is a
      wrapper for the new instance, or <see langword="null"/> if <paramref name="typeName"/> is not found.
      The return value
      needs to be
      unwrapped to access the real object.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para><paramref name="assemblyName"/> or <paramref name="typeName"/> is <see langword="null"/>. </para></exception>
		<remarks>
			<para> This method calls the default constructor for
      <paramref name="typeName"/>.</para>
			<para>See <see cref="System.Reflection.AssemblyName"/> for the format of <paramref name="assemblyName"/>. </para>
		</remarks>
	</doc><doc for="_AppDomain.CreateInstanceFrom">
		<overload>
			<para>Creates a new instance of a specified type defined in
      the specified assembly file.</para>
		</overload>
		<summary>
			<para>Creates a new instance of the specified type defined in the specified assembly
      file.</para>
		</summary>
		<param name="assemblyFile">The name of a file that contains an assembly that defines the requested type.</param>
		<param name="typeName">The fully-qualified name of the requested type.</param>
		<returns>
			<para>An object that is a wrapper for the new instance, or <see langword="null"/> if <paramref name="typeName"/> is not found. The return value needs to be unwrapped to access the real object. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>
				<paramref name="assemblyFile"/> is <see langword="null"/>.</para>
			<para>-or-</para>
			<para><paramref name="typeName"/> is <see langword="null"/>.</para></exception>
		<remarks>
			<para> The default constructor for <paramref name="typeName"/> is invoked.</para>
			<para>For more information, see the <see cref="System.Activator.CreateInstanceFrom" qualify="true"/> method.</para>
		</remarks>
	</doc><doc for="_AppDomain.CreateInstance1">
		<summary>
			<para>Creates a new instance of the specified type defined in
      the specified assembly. A parameter specifies an array of activation attributes. </para>
		</summary>
		<param name="assemblyName">The display name of the assembly. </param>
		<param name=" typeName">The fully-qualified name of the requested type. </param>
		<param name=" activationAttributes">One or more attributes that can participate in activation.</param>
		<returns>
			<para>An object that is a wrapper for the new instance, or <see langword="null"/> if <paramref name="typeName"/> is not found. The return value needs to be unwrapped to access the real object. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para><paramref name="assemblyName"/> or <paramref name="typeName"/> is <see langword="null"/>. </para></exception>
		<remarks>
			<para>This method calls the default constructor for <paramref name="typeName"/>.</para>
			<para>See <see cref="System.Reflection.AssemblyName"/> for the format of <paramref name="assemblyName"/>. </para>
		</remarks>
	</doc><doc for="_AppDomain.CreateInstanceFrom1">
		<summary>
			<para>Creates a new instance of the specified type defined in the specified assembly file.</para>
		</summary>
		<param name=" assemblyFile">The name of a file that contains an assembly that defines the requested type.</param>
		<param name=" typeName">The fully-qualified name of the requested type.</param>
		<param name=" activationAttributes">One or more attributes that can participate in activation.</param>
		<returns>
			<para>An object that is a wrapper for the new instance, or <see langword="null"/> if <paramref name="typeName"/> is not found. The return value needs to be unwrapped to access the real object. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para><paramref name="assemblyFile"/> is <see langword="null"/>.</para><para>-or-</para><para><paramref name="typeName"/> is <see langword="null"/>.</para></exception>
		<remarks>
			<para>The default constructor for <paramref name="typeName"/> is invoked.</para>
			<para>For more information, see the <see cref="System.Activator.CreateInstanceFrom" qualify="true"/> method.</para>
		</remarks>
	</doc><doc for="_AppDomain.CreateInstance2">
		<summary>
			<para> Creates a new instance of the specified type defined in the specified
      assembly. Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization
      to create the type.</para>
		</summary>
		<param name="assemblyName">The display name of the assembly. </param>
		<param name=" typeName">The fully-qualified name of the requested type. </param>
		<param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
		<param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName"/> constructor. If <paramref name="bindingAttr"/> is zero, a case-sensitive search for public constructors is conducted. </param>
		<param name=" binder">An object that enables the binding, coercion of argument types, invocation of members and retrieval of <see cref="System.Reflection.MemberInfo"/> objects using reflection. If <paramref name="binder "/>is null, the default binder is used. </param>
		<param name=" args">The arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <paramref name="args "/>must be an empty array or null. </param>
		<param name=" culture">Culture-specific information that governs the coercion of <paramref name="args"/> to the formal types declared for the <paramref name="typeName"/> constructor. If <paramref name="culture"/> is <see langword="null"/>, the <see cref="System.Globalization.CultureInfo"/> for the current thread is used. </param>
		<param name=" activationAttributes">One or more attributes that can participate in activation.</param>
		<param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName"/>.</param>
		<returns>
			<para>An object that is a wrapper for the new instance, or <see langword="null"/> if <paramref name="typeName"/> is not found. The return value needs to be unwrapped to access the real object. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para><paramref name="assemblyName"/> or <paramref name="typeName"/> is <see langword="null"/>. </para></exception>
		<remarks>
			<para>This method calls the default constructor for <paramref name="typeName"/>.</para>
			<para>See <see cref="System.Reflection.AssemblyName"/> for the format of <paramref name="assemblyName"/>. </para>
		</remarks>
	</doc><doc for="_AppDomain.SetCachePath">
		<summary>
			<para>Establishes the specified directory path as the location where assemblies are shadow copied.</para>
		</summary>
		<param name="s">The fully-qualified path to the shadow copy location.</param>
		<seealso cref="System.AppDomainSetup.CachePath"/>
	</doc><doc for="_AppDomain.ExecuteAssembly1">
		<summary>
			<para>Execute the <see cref="System.Reflection.Assembly"/> given its file name. The method specified in
   the .NET Framework header is called.</para>
		</summary>
		<param name="assemblyFile">The file name of the the assembly to be executed.</param>
		<returns>
			<para> The value returned by the entry point of the
      assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyFile"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyFile "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyFile"/> is not a valid assembly. </exception>
		<remarks>
			<para>The method does not spawn a new process, create a new
      application domain, or
      create a new thread on which the entry point method is executed. To
      create the <see cref="System.AppDomain"/> to be loaded and executed, use the <see cref="System.AppDomain.CreateDomain"/>
      method.</para>
		</remarks>
	</doc><doc for="_AppDomain.CreateInstanceFrom2">
		<summary>
			<para>Creates a new instance of the specified type defined in the specified assembly file.</para>
		</summary>
		<param name="assemblyFile">The name of a file that contains an assembly that defines the requested type. </param>
		<param name=" typeName">The fully-qualified name of the requested type. </param>
		<param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
		<param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName"/> constructor. If <paramref name="bindingAttr"/> is zero, a case-sensitive search for public constructors is conducted. </param>
		<param name=" binder">An object that enables the binding, coercion of argument types, invocation of members and retrieval of <see cref="System.Reflection.MemberInfo"/> objects through reflection. If <paramref name="binder "/>is null, the default binder is used. </param>
		<param name=" args">The arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <paramref name="args "/>must be an empty array or null. </param>
		<param name=" culture">Culture-specific information that governs the coercion of <paramref name="args"/> to the formal types declared for the <paramref name="typeName"/> constructor. If <paramref name="culture"/> is <see langword="null"/>, the <see cref="System.Globalization.CultureInfo"/> for the current thread is used. </param>
		<param name=" activationAttributes">One or more attributes that can participate in activation.</param>
		<param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName"/>.</param>
		<returns>
			<para>An object that is a wrapper for the new instance, or <see langword="null"/> if <paramref name="typeName"/> is not found. The return value needs to be unwrapped to access the real object. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para><paramref name="assemblyFile"/> is <see langword="null"/>.</para><para>-or-</para><para><paramref name="typeName"/> is <see langword="null"/>.</para></exception>
		<remarks>
			<para>For more information, see the <see cref="System.Activator.CreateInstanceFrom" qualify="true"/> method.</para>
		</remarks>
	</doc><doc for="_AppDomain.ClearPrivatePath">
		<summary>
			<para>Resets the path that specifies the location of private assemblies to the empty string ("").</para>
		</summary>
		<remarks>
			<para> The private path is a path relative to the base directory that
      the common language runtime searches to locate private assemblies.</para>
			<para> For more information, see <see cref="System.AppDomainSetup.PrivateBinPath" qualify="true"/>.</para>
		</remarks>
		<seealso cref="System.String.Empty" qualify="true"/>
	</doc><doc for="_AppDomain.ClearShadowCopyPath">
		<summary>
			<para>Resets the list of directories containing shadow copied 
      assemblies to the empty string ("").</para>
		</summary>
		<remarks>
			<para>The shadow copy path is a list of directories where
      shadow copied assemblies are stored.</para>
			<para>For more information, see <see cref="System.AppDomainSetup.ShadowCopyDirectories" qualify="true"/>.</para>
		</remarks>
		<seealso cref="System.String.Empty" qualify="true"/>
	</doc><doc for="_AppDomain.SetThreadPrincipal">
		<summary>
			<para> Set the default principal object to be attached to threads if
      they attempt to bind to a principal while executing in this application domain.
      </para>
		</summary>
		<param name="principal">The principal object to be attached to threads. </param>
		<exception cref="System.ArgumentNullException"><paramref name="principal"/> is <see langword="null"/>.</exception>
		<exception cref="System.Security.Policy.PolicyException">The thread principal has already been set. </exception>
	</doc><doc for="_AppDomain.DefineDynamicAssembly">
		<overload>
			<para>Defines a dynamic assembly in the current application
      domain.</para>
		</overload>
		<summary>
			<para> Defines a dynamic assembly with the specified name and access
      mode.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The access mode for the dynamic assembly.</param>
		<returns>
			<para> Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<remarks>
			<para> This method
      should only be used to define a dynamic assembly in the current application
      domain. For more information, see the Remarks section of the <see topic="frlrfsystemappdomainclassloadtopic1 "/>
      topic.</para>
			<para> The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/>
constructor parameter). However, this method only persists the major
and minor version numbers, not the build and revision numbers. For
example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover
the <see cref="System.Version"/>
for this assembly, only that object's major and minor version numbers will
be as originally specified.</para>
		</remarks>
		<example>
			<para> The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/>
event.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc><doc for="_AppDomain.DefineDynamicAssembly1">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, and storage
      directory.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir"/> is <see langword="null"/>, the directory defaults to the current directory.</param>
		<returns>
			<para> Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<remarks>
			<para>This method should only be used to define a dynamic assembly in the current application domain. For more information, see the Remarks section of the <see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/> constructor parameter). However, this method only persists the major and minor version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover the <see cref="System.Version"/> for this assembly, only that object's major and minor version numbers will be as originally specified.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc><doc for="_AppDomain.DefineDynamicAssembly3">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, and
      permission requests.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="requiredPermissions">The required permissions request.</param>
		<param name="optionalPermissions">The optional permissions request.</param>
		<param name="refusedPermissions">The refused permissions request.</param>
		<returns>
			<para>Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<remarks>
			<para>This method should only be used to define a dynamic assembly in the current application domain. For more information, see the Remarks section of the <see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/> constructor parameter). However, this method only persists the major and minor version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover the <see cref="System.Version"/> for this assembly, only that object's major and minor version numbers will be as originally specified.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc><doc for="_AppDomain.DefineDynamicAssembly5">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, and permission requests.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir"/> is <see langword="null"/>, the directory defaults to the current directory.</param>
		<param name="requiredPermissions">The required permissions request.</param>
		<param name="optionalPermissions">The optional permissions request.</param>
		<param name="refusedPermissions">The refused permissions request.</param>
		<returns>
			<para>Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<remarks>
			<para>This method should only be used to define a dynamic assembly in the current application domain. For more information, see the Remarks section of the <see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/> constructor parameter). However, this method only persists the major and minor version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover the <see cref="System.Version"/> for this assembly, only that object's major and minor version numbers will be as originally specified.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc><doc for="_AppDomain.DefineDynamicAssembly8">
		<summary>
			<para> Defines a dynamic assembly using the specified name,
      access mode, storage directory, evidence, permission requests, and synchronization option.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly. </param>
		<param name="access">The mode in which the dynamic assembly will be accessed. </param>
		<param name="dir">The name of the directory where the dynamic assembly will be saved. If <paramref name="dir"/> is <see langword="null"/>, the directory defaults to the current directory. </param>
		<param name="evidence">The evidence supplied for the dynamic assembly. </param>
		<param name="requiredPermissions">The required permissions request. </param>
		<param name="optionalPermissions">The optional permissions request. </param>
		<param name="refusedPermissions">The refused permissions request. </param>
		<param name="isSynchronized"><para><see langword="true"/> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false"/>.</para></param>
		<returns>
			<para>Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<remarks>
			<para> Only fully trusted callers can supply their evidence
      when defining a dynamic
   <see cref="System.Reflection.Assembly"/>. The runtime will map the <see cref="System.Security.Policy.Evidence"/> through the security policy to
      determine the granted permissions. Partially trusted callers must supply
   <see langword="null"/> for the
   <paramref name="evidence "/> parameter.
      If <paramref name="evidence"/> is <see langword="null"/>, the runtime copies the permission sets, that is, the current
      grant and deny sets, from the caller's <see cref="System.Reflection.Assembly"/> to the dynamic
   <see cref="System.Reflection.Assembly"/> being defined and marks policy as resolved.</para>
			<para> If the dynamic <see cref="System.Reflection.Assembly"/> is saved to disk, subsequent loads will
   get grants based on policies associated with the location where the <see cref="System.Reflection.Assembly"/>
   was saved.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> object (as an
<see cref="M:System.OperatingSystem.#ctor"/> constructor parameter). However, this 
method only persists the major and minor version numbers, not the build and
revision numbers. That is, for example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to
indirectly recover the <see langword="Version"/> object for this assembly, only
that object's major and minor version numbers will be as originally
specified.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc><doc for="_AppDomain.DefineDynamicAssembly2">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, and
      evidence.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="evidence">The evidence supplied for the dynamic assembly.</param>
		<returns>
			<para> Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<remarks>
			<para>Only fully trusted callers can supply their <paramref name="evidence"/> when defining a
   dynamic <see cref="System.Reflection.Assembly"/>. The runtime will map the <see cref="System.Security.Policy.Evidence"/>
   through the security policy to determine the granted permissions. Partially trusted
   callers must supply a null
<paramref name="evidence"/>. If
<paramref name="evidence"/> is <see langword="null"/>, the runtime copies the permission 
   sets, that is, the current grant and deny sets, from the caller's <see cref="System.Reflection.Assembly"/> to
   the dynamic <see cref="System.Reflection.Assembly"/> being defined and marks policy as
   resolved.</para>
			<para>If the dynamic <see cref="System.Reflection.Assembly"/> is saved to disk, subsequent loads will get
grants based on policies associated with the location where the <see cref="System.Reflection.Assembly"/> was
saved.</para>
			<para>This method should only be used to define a dynamic assembly in the current
   application domain. For more information, see the Remarks section of the
<see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/>
constructor parameter). However, this method only persists the major and minor
version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover
the <see cref="System.Version"/> for
this assembly, only that object's major and minor version numbers will be as
originally specified.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc><doc for="_AppDomain.DefineDynamicAssembly4">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, and evidence.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir"/> is <see langword="null"/>, the directory defaults to the current directory.</param>
		<param name="evidence">The evidence supplied for the dynamic assembly.</param>
		<returns>
			<para>Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<remarks>
			<para>Only fully trusted callers can supply their <paramref name="evidence"/> when defining a
   dynamic <see cref="System.Reflection.Assembly"/>. The runtime will map the <see cref="System.Security.Policy.Evidence"/>
   through the security policy to determine the granted permissions. Partially trusted
   callers must supply a null
   <paramref name="evidence"/>. If
<paramref name="evidence"/> is <see langword="null"/>, the runtime copies the permission 
   sets, that is, the current grant and deny sets, from the caller's <see cref="System.Reflection.Assembly"/> to
   the dynamic <see cref="System.Reflection.Assembly"/> being defined and marks policy as
   resolved.</para>
			<para>If the dynamic <see cref="System.Reflection.Assembly"/> is saved to disk, subsequent loads will get
grants based on policies associated with the location where the <see cref="System.Reflection.Assembly"/> was
saved.</para>
			<para>This method should only be used to define a dynamic assembly in the current
   application domain. For more information, see the Remarks section of the
<see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/>
constructor parameter). However, this method only persists the major and minor
version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover
the <see cref="System.Version"/> for
this assembly, only that object's major and minor version numbers will be as
originally specified.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc><doc for="_AppDomain.DefineDynamicAssembly6">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, evidence,
      and permission requests.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="evidence">The evidence supplied for the dynamic assembly.</param>
		<param name="requiredPermissions">The required permissions request.</param>
		<param name="optionalPermissions">The optional permissions request.</param>
		<param name="refusedPermissions">The refused permissions request.</param>
		<returns>
			<para>Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<remarks>
			<para>Only fully trusted callers can supply their <paramref name="evidence"/> when defining a
   dynamic <see cref="System.Reflection.Assembly"/>. The runtime will map the <see cref="System.Security.Policy.Evidence"/>
   through the security policy to determine the granted permissions. Partially trusted
   callers must supply a null
   <paramref name="evidence"/>. If
<paramref name="evidence"/> is <see langword="null"/>, the runtime copies the permission 
   sets, that is, the current grant and deny sets, from the caller's <see cref="System.Reflection.Assembly"/> to
   the dynamic <see cref="System.Reflection.Assembly"/> being defined and marks policy as
   resolved.</para>
			<para>If the dynamic <see cref="System.Reflection.Assembly"/> is saved to disk, subsequent loads will get
grants based on policies associated with the location where the <see cref="System.Reflection.Assembly"/> was
saved.</para>
			<para>This method should only be used to define a dynamic assembly in the current
   application domain. For more information, see the Remarks section of the
<see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/>
constructor parameter). However, this method only persists the major and minor
version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover
the <see cref="System.Version"/> for
this assembly, only that object's major and minor version numbers will be as
originally specified.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc><doc for="_AppDomain.DefineDynamicAssembly7">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, evidence, and permission requests.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir"/> is <see langword="null"/>, the directory defaults to the current directory.</param>
		<param name="evidence">The evidence supplied for the dynamic assembly.</param>
		<param name="requiredPermissions">The required permissions request.</param>
		<param name="optionalPermissions">The optional permissions request.</param>
		<param name="refusedPermissions">The refused permissions request.</param>
		<returns>
			<para>Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<remarks>
			<para>Only fully trusted callers can supply their <paramref name="evidence"/> when defining a
   dynamic <see cref="System.Reflection.Assembly"/>. The runtime will map the <see cref="System.Security.Policy.Evidence"/>
   through the security policy to determine the granted permissions. Partially trusted
   callers must supply a null
   <paramref name="evidence"/>. If
<paramref name="evidence"/> is <see langword="null"/>, the runtime copies the permission 
   sets, that is, the current grant and deny sets, from the caller's <see cref="System.Reflection.Assembly"/> to
   the dynamic <see cref="System.Reflection.Assembly"/> being defined and marks policy as
   resolved.</para>
			<para>If the dynamic <see cref="System.Reflection.Assembly"/> is saved to disk, subsequent loads will get
grants based on policies associated with the location where the <see cref="System.Reflection.Assembly"/> was
saved.</para>
			<para>This method should only be used to define a dynamic assembly in the current
   application domain. For more information, see the Remarks section of the
<see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/>
constructor parameter). However, this method only persists the major and minor
version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover
the <see cref="System.Version"/> for
this assembly, only that object's major and minor version numbers will be as
originally specified.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc></docs>
