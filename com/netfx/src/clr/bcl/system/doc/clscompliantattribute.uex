<docs>
	<doc for="CLSCompliantAttribute.CLSCompliantAttribute">
		<summary>
			<para>Initializes an instance of the <see cref="System.CLSCompliantAttribute"/> class with a Boolean value 
    indicating whether the indicated program element is CLS-compliant.</para>
		</summary>
		<param name="isCompliant"><see langword="true"/> if CLS-compliant; otherwise, <see langword="false"/>.</param>
	</doc>
	<doc for="CLSCompliantAttribute.IsCompliant">
		<summary>
			<para>Gets the Boolean value indicating whether the indicated program element is CLS-compliant.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the program element is 
    CLS-compliant; otherwise, <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="CLSCompliantAttribute">
		<summary>
			<para> Indicates whether a program element is compliant with the Common Language Specification (CLS).
      This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>If no <see cref="System.CLSCompliantAttribute"/> is applied to a program element, by default:</para>
			<list type="bullet"><item>
					<term>
      
      The assembly is not CLS-compliant.</term>
				</item>
			</list>
			<list type="bullet"><item>
					<term>
      
      The type is CLS-compliant only if its enclosing type or assembly is
      CLS-compliant.</term>
				</item>
			</list>
			<list type="bullet"><item>
					<term>
      
      The member is CLS-compliant only if the type in which the member
      is CLS-compliant.</term>
				</item>
			</list>
			<para> If an assembly is marked as CLS-compliant, any publicly
   exposed type in the assembly that is not CLS-compliant must be marked with
<see cref="System.CLSCompliantAttribute"/> using a
<see langword="false"/> argument. Similarly, if a class is marked
   as CLS-compliant, you must individually mark all members that are not CLS-compliant. All non-compliant
   members must provide corresponding CLS-compliant alternatives.</para>
			<para>Attributes that are applied to assemblies or modules
   must occur after the <see langword="using"/>
   clauses and before the code.</para>
			<para>For more information about using attributes, see
<see topic="cpconExtendingMetadataUsingAttributes"/>.</para>
			<note type="note">
   The current Microsoft Visual Basic
   compiler intentionally does not generate a CLS-compliance warning, however, a
   future release of the compiler will issue that warning.
</note>
		</remarks>
		<example>
			<para>The following example applies a <see cref="System.CLSCompliantAttribute"/> to the entire assembly.</para>
			<code>
				using System;
				[assembly:CLSCompliant(true)]
			</code>
			<para>The following declaration generates a CLS-compliance
   warning because the type <c> UInt32 </c>is not specified in the CLS.</para>
			<para><c> public int SetValue(UInt32 value);</c></para>
			<para> If the
   declaration is marked with a <see cref="System.CLSCompliantAttribute"/>, no compiler warning or error is generated.</para>
			<para><c>[CLSCompliant(false)]</c></para>
			<para><c> public int SetValue(UInt32 value);</c></para>
		</example>
		<seealso cref="System.Attribute"/>
		<seealso topic="cpconWhatIsCommonLanguageSpecification"/>
		<seealso topic="cpconExtendingMetadataUsingAttributes"/>
	</doc></docs>
