<docs>
	<doc for="TypeCode.Empty">
		<summary>
			<para> A null reference.</para>
		</summary>
	</doc>
	<doc for="TypeCode.DBNull">
		<summary>
			<para> A database null (column) value.</para>
		</summary>
	</doc>
	<doc for="TypeCode.Char">
		<summary>
			<para>An integral type representing unsigned 16-bit integers 
       with values between 0 and 65535. The set of possible values for the <see cref="System.TypeCode.Char"/>
       type corresponds to the Unicode character set.</para>
		</summary>
	</doc>
	<doc for="TypeCode.SByte">
		<summary>
    An integral type representing signed 8-bit
    integers with values between -128 and 127.
 </summary>
	</doc>
	<doc for="TypeCode.Byte">
		<summary>
    An integral type representing unsigned
    8-bit integers with values between 0 and 255.
 </summary>
	</doc>
	<doc for="TypeCode.Int16">
		<summary>
    An integral type representing signed 16-bit
    integers with values between -32768 and 32767.
 </summary>
	</doc>
	<doc for="TypeCode.UInt16">
		<summary>
    An integral type representing unsigned
    16-bit integers with values between 0 and 65535.
 </summary>
	</doc>
	<doc for="TypeCode.Int32">
		<summary>
    An integral type representing signed 32-bit
    integers with values between -2147483648 and 2147483647.
 </summary>
	</doc>
	<doc for="TypeCode.UInt32">
		<summary>
    An integral type representing unsigned
    32-bit integers with values between 0 and 4294967295.
 </summary>
	</doc>
	<doc for="TypeCode.Int64">
		<summary>
			<para>An integral type representing signed 64-bit integers 
       with values
       between -9223372036854775808 and 9223372036854775807.</para>
		</summary>
	</doc>
	<doc for="TypeCode.UInt64">
		<summary>
    An integral type representing unsigned
    64-bit integers with values between 0 and 18446744073709551615.
 </summary>
	</doc>
	<doc for="TypeCode.Single">
		<summary>
			<para>A floating point type representing values ranging from 
       approximately 1.5 x 10<superscript term="-45"/> to 3.4 x 10<superscript term="38"/>
       with a precision of 7
       digits.</para>
		</summary>
	</doc>
	<doc for="TypeCode.Double">
		<summary>
			<para>A floating point type representing values ranging from 
       approximately 5.0 x 10<superscript term="-324"/> to 1.7 x 10<superscript term="308"/>
       with a precision of
       15-16 digits.</para>
		</summary>
	</doc>
	<doc for="TypeCode.Decimal">
		<summary>
			<para>A simple type representing values ranging from 1.0 x 
       10<superscript term="-28"/> to approximately 7.9 x 10<superscript term="28"/>
       with 28-29 significant digits.</para>
		</summary>
	</doc>
	<doc for="TypeCode.DateTime">
		<summary>
			<para>A type representing a date and time value.</para>
		</summary>
	</doc>
	<doc for="TypeCode.String">
		<summary>
    A sealed class type representing Unicode
    character strings.
 </summary>
	</doc>
	<doc for="TypeCode.Boolean">
		<summary>
			<para>A simple type representing Boolean values of
      <see langword="true"/> or <see langword="false"/>.</para>
		</summary>
	</doc><doc for="TypeCode.Object">
		<summary>
			<para> A general type representing any reference or value 
      type not explicitly represented by another <see langword="TypeCode"/>.</para>
		</summary>
	</doc><doc for="TypeCode">
		<summary>
			<para>Specifies the type of an object.</para>
		</summary>
		<remarks>
			<para> Call the <see cref="System.IConvertible.GetTypeCode"/> method on classes that implement the
<see cref="System.IConvertible"/>
interface to obtain the type code for an instance of that class. </para>
			<para> Otherwise, call an object's <see cref="System.Object.GetType"/> method
to obtain its <see cref="System.Type"/> object, then call the <see langword="Type"/> object's
<see cref="System.Type.GetTypeCode"/> method
to obtain the object's type code. </para>
		</remarks>
		<example>
			<para>The following code example demonstrates how the <see cref="System.TypeCode"/> enumeration can be
   used. In a decision block inside the <see langword="WriteObjectInfo"/>
   method, the <see cref="System.TypeCode"/> of an <see cref="System.Object"/> parameter is examined, and an
   appropriate message is written to the Console.</para>
			<codelink SampleID="System.TypeCode" SnippetID="2"/>
		</example>
	</doc>
</docs>
