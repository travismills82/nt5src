<docs>
	<doc for="IntPtr.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer hash code.</para>
		</returns>
	</doc><doc for="IntPtr.ToPointer">
		<summary>
			<para> Converts the value of this instance to a pointer to an 
      unspecified type.</para>
		</summary>
		<returns>
			<para>A pointer to <see cref="System.Void"/>; that is, a pointer to memory containing data of an 
   unspecified type. </para>
		</returns>
	</doc><doc for="IntPtr.operatorIntPtr">
		<summary>
			<para>Converts the value of a 32-bit signed integer to an
   <see cref="System.IntPtr"/>.</para>
		</summary>
		<param name="value">A 32-bit signed integer.</param>
		<returns>
			<para>A new instance of <see cref="System.IntPtr"/> initialized to <paramref name="value"/>.</para>
		</returns>
		<seealso cref="M:System.IntPtr.#ctor"/>
	</doc><doc for="IntPtr.operatorIntPtr2">
		<summary>
			<para> Converts the specified pointer to an unspecified type to an
   <see cref="System.IntPtr"/>.</para>
		</summary>
		<param name="value">A pointer to an unspecified type.</param>
		<returns>
			<para>A new instance of <see cref="System.IntPtr"/> initialized to <paramref name="value"/>.</para>
		</returns>
		<seealso cref="M:System.IntPtr.#ctor"/>
	</doc><doc for="IntPtr.operatorIntPtr1">
		<summary>
			<para>Converts the value of a 64-bit signed integer to an
   <see cref="System.IntPtr"/>.</para>
		</summary>
		<param name="value">A 64-bit signed integer.</param>
		<returns>
			<para>A new instance of <see cref="System.IntPtr"/> initialized to <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException">On a 32-bit platform, <paramref name="value"/> is too large to represent as an <see cref="System.IntPtr"/> .</exception>
		<seealso cref="M:System.IntPtr.#ctor"/>
	</doc><doc for="IntPtr.Size">
		<summary>
			<para>Gets the size of this instance.</para>
		</summary>
		<value>
			<para> The size of a pointer or handle on this platform, measured in bytes. The
      value of this property is 4 on a 32-bit platform, and 8 on
      a 64-bit platform. </para>
		</value>
	</doc><doc for="IntPtr.operatorEQ">
		<summary>
			<para>Determines whether two specified instances of <see cref="System.IntPtr"/> are equal.</para>
		</summary>
		<altmember cref="System.IntPtr.Equals"/>
		<param name="value1">An <see cref="System.IntPtr"/>.</param>
		<param name=" value2">An <see cref="System.IntPtr"/>.</param>
		<returns>
			<para><see langword="true"/> if
<paramref name="value1"/> equals <paramref name="value2"/>; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc><doc for="IntPtr.Equals">
		<summary>
			<para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
		</summary>
		<param name=" obj">An object to compare with this instance or <see langword="null"/>.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="obj"/> is an instance of <see cref="System.IntPtr"/>
and equals the value of this instance; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc><doc for="IntPtr.operatorNE">
		<summary>
			<para>Determines whether two specified instances of <see cref="System.IntPtr"/> are not equal.</para>
		</summary>
		<altmember cref="System.IntPtr.Equals"/>
		<param name="value1">An <see cref="System.IntPtr"/>.</param>
		<param name=" value2">An <see cref="System.IntPtr"/>.</param>
		<returns>
			<para><see langword="true"/> if
<paramref name="value1"/> does not equal <paramref name="value2"/>; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc><doc for="IntPtr.ToInt64">
		<summary>
			<para>Converts the value of this instance to a 64-bit signed integer.</para>
		</summary>
		<returns>
			<para> A 64-bit signed integer equal to the value of this instance.</para>
		</returns>
	</doc><doc for="IntPtr.IntPtr">
		<overload>
			<para> Initializes a new instance of <see cref="System.IntPtr"/> .</para>
		</overload>
		<summary>
			<para> Initializes a new instance of <see cref="System.IntPtr"/> using
   the specified 32-bit pointer or handle.</para>
		</summary>
		<param name="value">A pointer or handle contained in a 32-bit signed integer.</param>
	</doc><doc for="IntPtr.IntPtr2">
		<summary>
			<para> Initializes a new instance of <see cref="System.IntPtr"/> using the specified
   pointer to an unspecified type.</para>
		</summary>
		<param name="value">A pointer to an unspecified type.</param>
		<seealso cref="System.Void"/>
	</doc><doc for="IntPtr">
		<summary>
			<para> A platform-specific type that is used to represent
      a pointer or a handle.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para>The <see cref="System.IntPtr"/> type 
   is designed to be an integer whose size is platform-specific. That
   is, an instance of this type is expected to be 32-bits on 32-bit hardware and
   operating systems, and 64-bits on 64-bit hardware and operating systems.</para>
			<para>The <see cref="System.IntPtr"/> type can be used by
languages that support pointers, and
as a common means of referring to data between languages that do
and do not support pointers.</para>
			<para><see cref="System.IntPtr"/> objects can also be used to hold handles. For example,
instances of <see cref="System.IntPtr"/> are used extensively in the <see cref="System.IO.FileStream" qualify="true"/>
class to hold file handles.</para>
			<para> The <see cref="System.IntPtr"/> type is
CLS-compliant, while the <see cref="System.UIntPtr"/> type is not. Only the
<see cref="System.IntPtr"/> type is 
used in the common language runtime. The <see cref="System.UIntPtr"/> type is provided mostly to
maintain architectural symmetry with the <see cref="System.IntPtr"/>
type.</para>
			<para>This type implements the <see cref="System.Runtime.Serialization.ISerializable"/> interface.</para>
		</remarks>
		<seealso cref="System.UIntPtr"/>
	</doc><doc for="IntPtr.operatorvoidMUL">
		<summary>
			<para>Converts the value of the specified <see cref="System.IntPtr"/> to a pointer to an unspecified type.</para>
		</summary>
		<param name="value">An <see cref="System.IntPtr"/>.</param>
		<returns>
			<para>The contents of <paramref name="value"/>.</para>
		</returns>
		<seealso cref="System.IntPtr.ToPointer"/>
	</doc><doc for="IntPtr.operatorint">
		<summary>
			<para>Converts the value of the specified <see cref="System.IntPtr"/> to a 32-bit signed integer.</para>
		</summary>
		<param name="value">An <see cref="System.IntPtr"/>.</param>
		<returns>
			<para>The contents of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException">On a 64-bit platform, the value of <paramref name="value"/> is too large to represent as a 32-bit signed integer. </exception>
		<remarks>
			<para>An exception is only thrown if the value of <paramref name="value"/> requires more bits than the current platform supports.</para>
		</remarks>
		<seealso cref="System.IntPtr.ToInt32"/>
	</doc><doc for="IntPtr.operatorlong">
		<summary>
			<para>Converts the value of the specified <see cref="System.IntPtr"/> to a 64-bit signed integer.</para>
		</summary>
		<param name="value">An <see cref="System.IntPtr"/>.</param>
		<returns>
			<para>The contents of <paramref name="value"/>.</para>
		</returns>
		<seealso cref="System.IntPtr.ToInt64"/>
	</doc><doc for="IntPtr.IntPtr1">
		<summary>
			<para> Initializes a new instance of <see cref="System.IntPtr"/> using the specified 64-bit pointer.</para>
		</summary>
		<param name="value">A pointer or handle contained in a 64-bit signed integer.</param>
		<exception cref="System.OverflowException">On a 32-bit platform, <paramref name="value"/> is too large or too small to represent as an <see cref="System.IntPtr"/>.</exception>
		<remarks>
			<para>An exception is only thrown if the value
      of <paramref name="value"/> requires more bits than the current platform supports.</para>
		</remarks>
	</doc>
	<doc for="IntPtr.ToString">
		<summary>
			<para>Converts the numeric value of this instance to its
      equivalent string representation.</para>
		</summary>
		<returns>
			<para>The string
      representation of the value of this instance.</para>
		</returns>
		<remarks>
			<para>If the value of the <see cref="System.IntPtr.Size"/> property for this instance is 4, then this method 
   is equivalent to <see cref="System.Int32.ToString" qualify="true"/>; otherwise, this method is equivalent to <see cref="System.Int64.ToString" qualify="true"/>.</para>
		</remarks>
	</doc>
	<doc for="IntPtr.Zero">
		<summary>
			<para>A read-only field that represents a pointer or handle that has been initialized to zero.</para>
		</summary>
		<remarks>
			<para>The value of this field is not equivalent to <see langword="null"/>. Use this field to efficiently determine whether an
   instance of <see cref="System.IntPtr"/> has been set to a value
   other than zero. </para>
			<para>For example, assume the variable, ip, is an instance of
<see cref="System.IntPtr"/>. You can determine if it has been set by 
   comparing it to the value returned by a constructor, for example: "<c>if ip != new IntPtr(0)...</c>". However, invoking a constructor to get an
unintialized pointer is inefficient. It is better to code either "<c>if ip != IntPtr.Zero...</c>", or "<c>if !IntPtr.Zero.Equals(ip)...</c>".</para>
		</remarks>
	</doc>
	<doc for="IntPtr.ToInt32">
		<summary>
			<para>Converts the value of this instance to a 32-bit signed integer.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer equal to the value of this instance.</para>
		</returns>
		<exception cref="System.OverflowException">On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer.</exception>
	</doc>
</docs>
