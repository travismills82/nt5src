<docs>
	<doc for="EventArgs.EventArgs">
		<summary>
   Initializes a new instance of the <see cref="System.EventArgs"/> class.
</summary>
		<remarks>
			<para>This constructor is only called by the common language 
      runtime.</para>
		</remarks>
	</doc><doc for="EventArgs.Empty">
		<summary>
			<para> Represents an event with no event data.
      </para>
		</summary>
		<remarks>
			<para>The value of <see cref="System.EventArgs.Empty"/> is a read-only instance of <see cref="System.EventArgs"/>equivalent to the result of calling the <see cref="M:System.EventArgs.#ctor"/> 
constructor.</para>
		</remarks>
	</doc><doc for="EventArgs">
		<summary>
			<para><see cref="System.EventArgs"/> is the base class
   for classes containing event data.</para>
		</summary>
		<remarks>
			<para>This class contains no event data; it is used by events
      that do not pass state information to an event handler when an event is raised.
      If the event handler requires state information, the application must derive a
      class from this class to hold the data.</para>
			<para>For example, the <see cref="System.AssemblyLoadEventArgs" qualify="true"/>
class is used to hold the data for assembly load events, and contains a <see cref="System.Reflection.Assembly" qualify="true"/>
that describes the loaded assembly.</para>
			<para>For more information about events, see the <see topic="vcwlkEventsTutorial "/> and <see cref="System.EventHandler"/> topics.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of
   <see langword="EventArgs"/>.</para>
			<para>In this sample, FireEventArgs is a set of event arguments derived from
   <see langword="EventArgs"/>, and passed to the FireEventHandler when an
      event is raised by calling ActivateFireAlarm.</para>
			<codelink SampleID="EventArgs introduction" SnippetID="1"/>
		</example>
	</doc>
</docs>
