<docs>
	<doc for="Double.IConvertible.ToDateTime">
		<summary>
			<para> This conversion is not
       supported. Attempting to do so throws an <see langword="InvalidCastException"/>.</para>
		</summary>
		<exception cref="System.InvalidCastException">Unsupported conversion of <see langword="Double"/>.</exception>
	</doc>
	<doc for="Double.IConvertible.ToBoolean">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double.IConvertible.ToChar">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double.IConvertible.ToSByte">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double.IConvertible.ToByte">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double.IConvertible.ToInt16">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double.IConvertible.ToUInt16">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double.IConvertible.ToInt32">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double.IConvertible.ToUInt32">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double.IConvertible.ToInt64">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double.IConvertible.ToUInt64">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double.IConvertible.ToSingle">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double.IConvertible.ToDouble">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double.IConvertible.ToDecimal">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double.IConvertible.ToType">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Double">
		<summary>
			<para> Represents a double-precision floating point number.</para>
		</summary>
		<remarks>
			<para>The <see langword="Double"/> value
   type represents a double-precision 64-bit number with values ranging from negative 1.79769313486232e308 to positive 1.79769313486232e308, as well as positive or negative zero, <see cref="System.Double.PositiveInfinity"/>, <see cref="System.Double.NegativeInfinity"/>, and Not-a-Number (<see cref="System.Double.NaN"/>). </para>
			<para><see langword="Double"/> complies with
the IEC 60559:1989 (IEEE 754) standard for binary floating-point arithmetic. </para>
			<para><see langword="Double"/> provides
methods to compare instances of this type, convert the value of an instance to
its string representation, and convert the string representation of a number to an instance of this type.</para>
			<para>For information about how format specification codes
   control the string representation of value types, see
<see topic="cpConFormattingOverview"/>. </para>
			<para>This type implements interfaces <see cref="System.IComparable"/>, <see cref="System.IFormattable"/>, and <see cref="System.IConvertible"/>. Use the <see cref="System.Convert"/> class for conversions instead of this type's explicit
interface member implementation of <see cref="System.IConvertible"/>.</para>
			<para>When performing binary operations, if one of the operands
   is a <see langword="Double"/>, then the other operand is required to be an
   integral type or a floating-point type (<see langword="Double"/> or <see cref="System.Single"/>). Prior to performing the operation, if the other
   operand is not a <see langword="Double"/>, it is converted to
<see langword="Double"/>, and the operation is performed using at least 
<see langword="Double"/> range and precision. If the operation produces a numeric 
   result, the type of the result is <see langword="Double"/>.</para>
			<para>The floating-point operators, including the assignment
   operators, do not throw exceptions. Instead, in exceptional situations, the
   result of a floating-point operation is zero, infinity, or NaN, as described
   below:</para>
			<list type="bullet"><item>
					<term>
      
      If the result of a floating-point operation is too
      small for the destination format, the result of the operation is zero.</term>
				</item>
				<item>
					<term>
      
      If the magnitude of the result of a floating-point operation is too large
      for the destination format, the result of the operation is <see cref="System.Double.PositiveInfinity"/> or <see cref="System.Double.NegativeInfinity"/>, as appropriate for
      the sign of the result.</term>
				</item>
				<item>
					<term>
      
      If a floating-point operation is invalid, the result of the operation is
   <see cref="System.Double.NaN"/>.</term>
				</item>
				<item>
					<term>
      
      If one or both operands of a floating-point operation are
   <see cref="System.Double.NaN"/>, the result of the operation is
   <see cref="System.Double.NaN"/>.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="Double"/>:</para>
			<codelink SampleID="Double Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Double.MinValue">
		<summary>
			<para> Represents the smallest possible value of
      a <see cref="System.Double"/>. This field is constant.</para>
		</summary>
		<remarks>
			<para> The value of this
      constant is negative 1.79769313486232e308.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="MinValue"/>:</para>
			<codelink SampleID="Double Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Double.MaxValue">
		<summary>
			<para> Represents the largest possible value of a <see cref="System.Double"/>. This field is
   constant.</para>
		</summary>
		<remarks>
			<para>The value of this constant is positive 1.79769313486232e308.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="MaxValue"/>:</para>
			<codelink SampleID="Double Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Double.NegativeInfinity">
		<summary>
			<para> Represents negative infinity. This field is constant.</para>
		</summary>
		<remarks>
			<para> The value of this constant is the result of dividing a negative number by
      zero.</para>
			<para>This constant is returned when the result of an operation is less than
   <see cref="System.Double.MinValue"/>.</para>
			<para>Use <see cref="System.Double.IsNegativeInfinity"/> to determine whether a value evaluates to
   negative infinity. It is not possible to determine whether a value evaluates to
   negative infinity by comparing it to another value equal to
<see langword="NegativeInfinity"/>.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="NegativeInfinity"/>:</para>
			<codelink SampleID="System.Double" SnippetID="9"/>
		</example>
		<seealso cref="System.Double.IsNegativeInfinity"/>
		<seealso cref="System.Double.IsInfinity"/>
		<seealso cref="System.Double.PositiveInfinity"/>
	</doc>
	<doc for="Double.NaN">
		<summary>
			<para> Represents a value that is not a number
      (<see langword="NaN"/>). This field is constant.</para>
		</summary>
		<remarks>
			<para> The value of
      this constant is the result of dividing zero by
      zero.</para>
			<para> This constant is returned when the result
      of an operation is undefined.</para>
			<para>Use <see cref="System.Double.IsNaN"/> to
   determine whether a value is not a number. It is
   not possible to determine whether a value is not a number by comparing it to
   another value equal to <see langword="NaN"/>.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="NaN"/>:</para>
			<codelink SampleID="System.Double" SnippetID="7"/>
		</example>
		<seealso cref="System.Double.IsNaN"/>
	</doc>
	<doc for="Double.IsInfinity">
		<summary>
			<para> Returns a value indicating whether the specified
      number evaluates to negative or positive infinity</para>
		</summary>
		<param name="d">A double-precision floating point number.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="d "/> evaluates to <see cref="System.Double.PositiveInfinity"/>
or <see cref="System.Double.NegativeInfinity"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Floating-point operations return <see cref="System.Double.PositiveInfinity"/>
or <see cref="System.Double.NegativeInfinity"/>
to signal an overflow condition.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use 
      of <see langword="IsInfinity"/>:</para>
			<codelink SampleID="System.Double" SnippetID="11"/>
		</example>
		<seealso cref="System.Double.IsPositiveInfinity"/>
		<seealso cref="System.Double.IsNegativeInfinity"/>
		<seealso cref="System.Double.PositiveInfinity"/>
		<seealso cref="System.Double.NegativeInfinity"/>
	</doc>
	<doc for="Double.IsPositiveInfinity">
		<summary>
			<para> Returns a value indicating whether
      the specified number evaluates to positive infinity.</para>
		</summary>
		<param name="d">A double-precision floating point number.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="d"/> evaluates to <see cref="System.Double.PositiveInfinity"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Floating-point operations return <see cref="System.Double.PositiveInfinity"/>
to signal an overflow condition.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use 
      of <see langword="IsPositiveInfinity"/>:</para>
			<codelink SampleID="System.Double" SnippetID="12"/>
		</example>
		<seealso cref="System.Double.IsInfinity"/>
		<seealso cref="System.Double.IsNegativeInfinity"/>
		<seealso cref="System.Double.PositiveInfinity"/>
		<seealso cref="System.Double.NegativeInfinity"/>
	</doc>
	<doc for="Double.IsNegativeInfinity">
		<summary>
			<para> Returns a value indicating whether
      the specified number evaluates to negative infinity.</para>
		</summary>
		<param name="d">A double-precision floating point number.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="d"/> evaluates to <see cref="System.Double.NegativeInfinity"/>; otherwise, <see langword="false"/>
.</para>
		</returns>
		<remarks>
			<para>Floating-point operations return <see cref="System.Double.NegativeInfinity"/>
to signal an overflow condition.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use 
      of <see langword="IsNegativeInfinity"/>:</para>
			<codelink SampleID="System.Double" SnippetID="13,4,9"/>
		</example>
		<seealso cref="System.Double.IsInfinity"/>
		<seealso cref="System.Double.IsPositiveInfinity"/>
		<seealso cref="System.Double.PositiveInfinity"/>
		<seealso cref="System.Double.NegativeInfinity"/>
	</doc>
	<doc for="Double.IsNaN">
		<summary>
			<para>Returns a value indicating whether the specified number evaluates to a value that is
      not a number (<see cref="System.Double.NaN"/>).</para>
		</summary>
		<param name="d">A double-precision floating point number.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="d "/>evaluates to <see cref="System.Double.NaN"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Floating-point operations return <see cref="System.Double.NaN"/> to signal that that result of the operation is
   undefined. For example, dividing 0.0 by 0.0 results in <see cref="System.Double.NaN"/>.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use 
      of <see langword="IsNaN"/>:</para>
			<codelink SampleID="System.Double" SnippetID="8"/>
		</example>
		<seealso cref="System.Double.NaN"/>
	</doc>
	<doc for="Double.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer hash code.</para>
		</returns>
	</doc>
	<doc for="Double.Parse1">
		<summary>
			<para>Converts the string representation of a number in a specified style to its double-precision floating point number equivalent.</para>
		</summary>
		<param name="s">A string containing a number to convert. </param>
		<param name="style">The combination of one or more <see cref="System.Globalization.NumberStyles"/> constants that indicate the permitted format of <paramref name="s"/>. </param>
		<returns>
			<para>A double-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><paramref name="s"/> is not a number in a valid format.</exception>
		<exception cref="System.OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Double.MinValue"/> or greater than <see cref="System.Double.MaxValue"/>.</exception>
		<remarks>
			<para>The <paramref name="s"/> parameter can contain <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para> [ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</para>
			<para> Optional items are framed in square brackets ([ and ]). Items containing the
   term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> ws</term>
					<description>A series of white space
         characters.</description>
				</item>
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
         symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number. Runs of
            integral-digits can be partitioned by a group-separator symbol. (For
            example, in some cultures a comma (,) separates groups of thousands.)
            Integral-digits can be absent if there are
            fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point
            symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
            part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description>An uppercase or lowercase character 'e',
            indicating exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
            exponent.</description>
				</item>
			</list>
			<para> Some examples of <paramref name="s"/>
are "100", "-123,456,789", "123.45+e6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity". </para>
			<para> This version of <see langword="Parse"/> uses the specified <see cref="System.Globalization.NumberStyles"/> and the culture-specific
<see cref="System.Globalization.NumberFormatInfo"/> 
data associated with the current
thread. </para>
			<para>For more information about numeric formats, see the
<see topic="cpConFormattingOverview"/> 
topic.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="Parse"/>, 
   taking a <see cref="System.String"/> and an <see cref="System.IFormatProvider"/> as parameters:</para>
			<codelink SampleID="Double Example" SnippetID="6"/>
		</example>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Double.ToString"/>
	</doc>
	<doc for="Double.Epsilon">
		<summary>
			<para> Represents the smallest positive <see cref="System.Double"/> greater than
   zero. This
   field is constant.</para>
		</summary>
		<remarks>
			<para>The value of this constant is 4.94065645841247e-324.</para>
			<para> Two apparently
      equivalent floating point numbers might not compare equal because of differences in
      their least significant digits. For example, the C# expression, <c>(double)1/3 == (double)0.33333</c>, does not
   compare equal because the division operation on the left-hand side has maximum
   precision while the constant on the right-hand side is only precise to the
   visible digits. </para>
			<para>Instead, determine if the two sides of a comparison are close enough to equal
   for your purposes by comparing whether the absolute value of the difference
   between the left and right-hand sides is less than <see langword="Epsilon"/>.</para>
		</remarks>
		<seealso cref="System.Double.Parse"/>
	</doc>
	<doc for="Double.PositiveInfinity">
		<summary>
			<para> Represents positive infinity. This field is constant.</para>
		</summary>
		<remarks>
			<para> The value of this constant is the result of dividing a positive number by
      zero.</para>
			<para>This constant is returned when the result of an operation is greater than
   <see cref="System.Double.MaxValue"/>.</para>
			<para>Use <see cref="System.Double.IsPositiveInfinity"/> to determine whether a value evaluates to
   positive infinity. It is not possible to determine whether a value evaluates to
   positive infinity by comparing it to another value equal to
<see langword="PositiveInfinity"/>.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="PositiveInfinity"/>:</para>
			<codelink SampleID="System.Double" SnippetID="10"/>
		</example>
		<seealso cref="System.Double.IsPositiveInfinity"/>
		<seealso cref="System.Double.IsInfinity"/>
		<seealso cref="System.Double.NegativeInfinity"/>
	</doc>
	<doc for="Double.ToString">
		<overload>
			<para>Converts the numeric value of this instance to its
      equivalent string representation. </para>
		</overload>
		<summary>
			<para>Converts the numeric value of this instance to its
      equivalent string representation. </para>
		</summary>
		<returns>
			<para>The string
      representation of the value of this instance.</para>
		</returns>
		<remarks>
			<para>The return value can be <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</para>
			<para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description><para> A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description> A lowercase character 'e', indicating exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an exponent.</description>
				</item>
			</list>
			<para> Some examples of the return value are "100", "-123,456,789", "123.45+e6", "500", "3.1416", "600", "-0.123", and "-Infinity". </para>
			<para>This version of <see langword="ToString"/> uses the general format specifier ("G") and the
<see cref="System.Globalization.NumberFormatInfo"/> for the current culture.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="ToString"/>:</para>
			<codelink SampleID="System.Double" SnippetID="3"/>
		</example>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Double.Parse"/>
		<seealso cref="System.String"/>
	</doc>
	<doc for="Double.TryParse">
		<summary>
			<para>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating point number equivalent.</para>
		</summary>
		<param name="s">A string containing a numberto convert.</param>
		<param name="style">The combination of one or more <see cref="System.Globalization.NumberStyles"/>constants that indicate the permitted format of <paramref name="s"/>.</param>
		<param name="provider">An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="s"/>. </param>
		<param name=" result">A double-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s"/>. If the return value is <see langword="false"/>, <paramref name="result"/> is set to zero.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="s"/> is converted
   successfully; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Double.TryParse"/> method is like the <see cref="System.Double.Parse"/> method,
   except this method does not throw an exception if the conversion fails. If the
   conversion succeeds, the return value is <see langword="true"/> and the
<paramref name="result"/> parameter is set to the outcome of the conversion. If 
   the conversion fails, the return value is <see langword="false"/> and the
<paramref name="result"/> 
parameter is set to zero.</para>
			<para> The conversion fails if
   the <paramref name="s"/> parameter is <see langword="null"/> or not a numeric value, the <paramref name="provider"/>
   parameter does not yield a <see cref="System.Globalization.NumberFormatInfo"/>object, or the <paramref name="style"/> parameter is
   not a combination of bit flags from the <see cref="System.Globalization.NumberStyles"/> enumeration.</para>
			<para>The <paramref name="s"/> parameter can contain <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para> [ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</para>
			<para> Optional items are framed in square brackets ([ and ]). Items containing the
   term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> ws</term>
					<description>A series of white space
         characters.</description>
				</item>
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
         symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number. Runs of
            integral-digits can be partitioned by a group-separator symbol. (For
            example, in some cultures a comma (,) separates groups of thousands.)
            Integral-digits can be absent if there are
            fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point
            symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
            part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description>An uppercase or lowercase character 'e',
            indicating exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
            exponent.</description>
				</item>
			</list>
			<para> Some examples of <paramref name="s"/>
are "100", "-123,456,789", "123.45+e6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity". </para>
			<para>For more information about numeric formats, see the
<see topic="cpConFormattingOverview"/> 
topic.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Double.ToString"/>
	</doc>
	<doc for="Double.ToString3">
		<summary>
			<para>Converts the numeric value of this instance to its
      equivalent string representation using the specified culture-specific
      format information. </para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
		<returns>
			<para>The string representation of the value of this instance as
      specified by <paramref name="provider"/>.</para>
		</returns>
		<remarks>
			<para>The return value can be <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</para>
			<para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
         symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number.
            Integral-digits can be absent if there are
            fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point
            symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
            part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description>A lowercase character 'e', indicating
            exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
            exponent.</description>
				</item>
			</list>
			<para> Some examples of the return value are "100", "-123,456,789", "123.45+e6", "500", "3.1416", "600", "-0.123", and "-Infinity". </para>
			<para>This instance is formatted with the general format specifier ("G").</para>
			<para>The <paramref name="provider"/> parameter is an <see cref="System.IFormatProvider"/> instance that obtains
   a <see cref="System.Globalization.NumberFormatInfo"/> object that supplies culture-specific
   format information. If <paramref name="provider"/> is <see langword="null"/>,
   the return value is formatted with <see cref="System.Globalization.NumberFormatInfo"/> data for the current
   culture.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToString"/>, 
   taking a <see cref="System.String"/> and an <see cref="System.IFormatProvider"/> as parameters:</para>
			<codelink SampleID="Double Example" SnippetID="4"/>
		</example>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Double.Parse"/>
		<seealso cref="System.String"/>
	</doc>
	<doc for="Double.GetTypeCode">
		<summary>
			<para>Returns the <see cref="System.TypeCode"/> for value type <see cref="System.Double"/>.</para>
		</summary>
		<returns>
			<para>The enumerated constant, <see cref="System.TypeCode.Double" qualify="true"/>.</para>
		</returns>
		<seealso cref="System.TypeCode"/>
	</doc>
	<doc for="Double.CompareTo">
		<summary>
			<para>Compares this instance to a specified object and returns an indication of their relative values.</para>
		</summary>
		<param name="value">An object to compare, or <see langword="null"/>.</param>
		<returns>
			<para>A signed number indicating the relative values of this instance and <paramref name="value"/>.</para>
			<list type="table">
				<listheader>
					<term>Value</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> A
         negative
         integer</term>
					<description>
						<para>This instance is less than <paramref name="value"/>.</para>
						<para>-or-</para>
						<para>This instance is not a number (<see cref="System.Double.NaN"/>) and <paramref name="value"/> is a
      number.</para></description>
				</item>
				<item>
					<term> Zero</term>
					<description>
						<para>This instance is equal to <paramref name="value"/>.</para>
						<para>-or-</para>
						<para>This instance and value are
      both <see langword="Double.NaN"/>, <see cref="System.Double.PositiveInfinity"/>, or <see cref="System.Double.NegativeInfinity"/>
						</para></description>
				</item>
				<item>
					<term> A positive integer</term>
					<description>
						<para>This instance is greater than <paramref name="value"/>.</para>
						<para>-or-</para>
						<para>This instance is a number and <paramref name="value"/> is not a number (<see cref="System.Double.NaN"/>).</para>
						<para>-or-</para>
						<para><paramref name="value"/> is
<see langword="null"/>.</para></description>
				</item>
			</list>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is not a <see cref="System.Double"/>.</exception>
		<remarks>
			<para>Any instance of <see cref="System.Double"/>, regardless of its value, is
   considered greater than <see langword="null"/>.</para>
			<para>The <paramref name="value"/> parameter must be
<see langword="null"/> or an instance of
<see langword="Double"/>; otherwise, an exception is thrown.</para>
			<para>This method is implemented to support the <see cref="System.IComparable"/> interface.
Note that, although a <see cref="System.Double.NaN"/> is not considered to
be equal to another <see cref="System.Double.NaN"/> (even itself), the <see cref="System.IComparable"/> interface
requires that <c>A.CompareTo(A)</c> return zero.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use
      of <see langword="CompareTo"/> in the context of
   <see langword="Double"/>:</para>
			<codelink SampleID="System.Double" SnippetID="16"/>
		</example>
		<seealso cref="System.Double.Equals"/>
	</doc>
	<doc for="Double.Parse">
		<overload>
			<para>Converts the string representation of a number to its double-precision floating point number equivalent.</para>
		</overload>
		<summary>
			<para>Converts the string representation of a number to its double-precision floating point number equivalent.</para>
		</summary>
		<param name="s">A string containing a number to convert.</param>
		<returns>
			<para>A double-precision floating point number equivalent to the
      numeric value or symbol specified in <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><paramref name="s"/> is not a number in a valid format.</exception>
		<exception cref="System.OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Double.MinValue"/> or greater than <see cref="System.Double.MaxValue"/>.</exception>
		<remarks>
			<para>The <paramref name="s"/> parameter can contain <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para> [ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</para>
			<para> Optional items are framed in square brackets ([ and ]). Items containing the
   term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> ws</term>
					<description>A series of white space characters.</description>
				</item>
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
         symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number. Runs of integral-digits can be
            partitioned by a group-separator symbol. (For example, in some cultures
            a comma (,) separates groups of thousands.) Integral-digits can be
            absent if there are fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
            part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description> An uppercase or lowercase character 'e',
            indicating exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
            exponent.</description>
				</item>
			</list>
			<para> Some examples of <paramref name="s"/>
are "100", "-123,456,789", "123.45+e6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity". </para>
			<para> This version of <see langword="Parse"/> uses the <see cref="System.Globalization.NumberStyles"/> values, <see cref="System.Globalization.NumberStyles.Float"/> and <see cref="System.Globalization.NumberStyles.AllowThousands"/>, and the culture-specific
<see cref="System.Globalization.NumberFormatInfo"/> 
data associated with the current
thread. </para>
			<para> For more information about numeric formats, see the
<see topic="cpConFormattingOverview"/> topic.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="Parse"/>,
   taking a <see cref="System.String"/> as a parameter:</para>
			<codelink SampleID="Double Example" SnippetID="5"/>
		</example>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Double.ToString"/>
	</doc>
	<doc for="Double.Equals">
		<summary>
			<para>Returns a value indicating whether this instance is equal to a specified object.</para>
		</summary>
		<param name="obj">An object to compare with this instance.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="obj"/> is an instance of <see cref="System.Double"/> and equals the value of this instance; otherwise, <see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following code example demonstrates the <see cref="System.Double.Equals"/> method.</para>
			<codelink SampleID="System.Double" SnippetID="17"/>
		</example>
		<seealso cref="System.Double.CompareTo"/>
	</doc>
	<doc for="Double.Parse2">
		<summary>
			<para>Converts the string representation of a number in a specified culture-specific format to its double-precision floating point number equivalent.</para>
		</summary>
		<param name="s">A string containing a number to convert.</param>
		<param name="provider">An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="s"/>.</param>
		<returns>
			<para>A double-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><paramref name="s"/> is not a number in a valid format.</exception>
		<exception cref="System.OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Double.MinValue"/> or greater than <see cref="System.Double.MaxValue"/>.</exception>
		<remarks>
			<para>The <paramref name="s"/> parameter can contain <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para> [ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</para>
			<para> Optional items are framed in square brackets ([ and ]). Items containing the
   term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> ws</term>
					<description>A series of white space
         characters.</description>
				</item>
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
         symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number. Runs of
            integral-digits can be partitioned by a group-separator symbol. (For
            example, in some cultures a comma (,) separates groups of thousands.)
            Integral-digits can be absent if there are
            fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point
            symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
            part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description>An uppercase or lowercase character 'e',
            indicating exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
            exponent.</description>
				</item>
			</list>
			<para> Some examples of <paramref name="s"/>
are "100", "-123,456,789", "123.45+e6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity". </para>
This version of <see langword="Parse"/> uses the <see cref="System.Globalization.NumberStyles"/> values, <see cref="System.Globalization.NumberStyles.Float"/> and <see cref="System.Globalization.NumberStyles.AllowThousands"/>,
and the specified number format information. If <paramref name="provider"/> is
<see langword="null"/> or a <see cref="System.Globalization.NumberFormatInfo"/> cannot be obtained, the 
formatting information for
the current system culture is used.
<para>For more information about numeric formats, see the
<see topic="cpConFormattingOverview"/> 
topic.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="Parse"/>,
   taking a <see cref="System.String"/> and a <see cref="System.Globalization.NumberStyles"/> as parameters:</para>
			<codelink SampleID="Double Example" SnippetID="7"/>
		</example>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Double.ToString"/>
	</doc>
	<doc for="Double.Parse3">
		<summary>
			<para>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating point number equivalent.</para>
		</summary>
		<param name="s">A string containing a number to convert.</param>
		<param name="style">The combination of one or more <see cref="System.Globalization.NumberStyles"/> constants that indicate the permitted format of <paramref name="s"/>.</param>
		<param name="provider">An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="s"/>. </param>
		<returns>
			<para>A double-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><paramref name="s"/> is not a numeric value.</exception>
		<exception cref="System.ArgumentException"><paramref name="style"/> is not a combination of bit flags from the <see cref="System.Globalization.NumberStyles"/> enumeration.</exception>
		<exception cref="System.OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Double.MinValue"/> or greater than <see cref="System.Double.MaxValue"/>.</exception>
		<remarks>
			<para>The <paramref name="s"/> parameter can contain <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para> [ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</para>
			<para> Optional items are framed in square brackets ([ and ]). Items containing the
   term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> ws</term>
					<description>A series of white space
         characters.</description>
				</item>
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
         symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number. Runs of
            integral-digits can be partitioned by a group-separator symbol. (For
            example, in some cultures a comma (,) separates groups of thousands.)
            Integral-digits can be absent if there are
            fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point
            symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
            part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description>An uppercase or lowercase character 'e',
            indicating exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
            exponent.</description>
				</item>
			</list>
			<para> Some examples of <paramref name="s"/>
are "100", "-123,456,789", "123.45+e6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity". </para>
			<para>This version of <see langword="Parse"/> uses the specified <see cref="System.Globalization.NumberStyles"/> and the specified number format
information. If <paramref name="provider"/> is <see langword="null"/> or a <see cref="System.Globalization.NumberFormatInfo"/> cannot be obtained, the formatting
information for the current system culture is used. </para>
			<para>For more information about numeric formats, see the
<see topic="cpConFormattingOverview"/> topic.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="Parse"/>,
   taking a <see cref="System.String"/>,
   an <see cref="System.IFormatProvider"/>, and a <see cref="System.Globalization.NumberStyles"/> as parameters:</para>
			<codelink SampleID="Double Example" SnippetID="8"/>
		</example>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Double.ToString"/>
	</doc>
	<doc for="Double.ToString1">
		<summary>
			<para>Converts the numeric value of this instance to its
      equivalent string representation, using the specified format. </para>
		</summary>
		<param name="format">A format string.</param>
		<returns>
			<para>The string representation of the value of this instance as specified by <paramref name="format"/>.</para>
		</returns>
		<exception cref="System.FormatException"><paramref name="format"/> is invalid.</exception>
		<remarks>
			<para>The return value can be <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</para>
			<para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
         symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number.
            Integral-digits can be absent if there are
            fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point
            symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
            part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description>A lowercase character 'e', indicating
            exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
            exponent.</description>
				</item>
			</list>
			<para> Some examples of the return value are "100", "-123,456,789", "123.45+e6", "500", "3.1416", "600", "-0.123", and "-Infinity". </para>
			<para>If <paramref name="format"/> is <see langword="null"/> or an empty string, the return value is
   formatted with the general format specifier ("G").</para>
			<para>By default, the return value only contains 15 digits of precision although a
   maximum of 17 digits is maintained internally. If the value of this instance has greater
   than 15 digits, <see langword="ToString"/> returns <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/> or <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/> instead of the expected number. If you require more precision, specify
<paramref name="format"/> with the "G17" format 
   specification, which always returns 17 digits of precision, or "R", which
   returns 15 digits if the number can be represented with that precision or 17
   digits if the number can only be represented with maximum precision.</para>
			<para>The return value is formatted with<see cref="System.Globalization.NumberFormatInfo"/> data for the current culture.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso topic="cpConNumericFormatStrings"/>
		<seealso cref="System.Double.Parse"/>
		<seealso cref="System.String"/>
	</doc>
	<doc for="Double.ToString2">
		<summary>
			<para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format and culture-specific format information. </para>
		</summary>
		<param name="format">A format specification.</param>
		<param name="provider">An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
		<returns>
			<para>The string representation of the value
      of this instance as specified by <paramref name="format"/> and <paramref name="provider"/>.</para>
		</returns>
		<remarks>
			<para>The return value can be <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</para>
			<para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
         symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number.
            Integral-digits can be absent if there are
            fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point
            symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
            part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description>A lowercase character 'e', indicating
            exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
            exponent.</description>
				</item>
			</list>
			<para> Some examples of the return value are "100", "-123,456,789", "123.45+e6", "500", "3.1416", "600", "-0.123", and "-Infinity". </para>
			<para>If <paramref name="format"/> is <see langword="null"/> or an empty string, the return
   value for this instance is formatted with the general format specifier
   ("G").</para>
			<para>By default, the return value only contains 15 digits of precision although a
   maximum of 17 digits is maintained internally. If the value of this instance has
   greater than 15 digits, <see langword="ToString"/> returns <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/> or <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/> instead of the expected number. If you require more precision, specify
<paramref name="format"/> with the "G17" format specification, which always returns 17 
   digits of precision, or "R", which returns 15 digits if the number can be
   represented with that precision or 17 digits if the number can only be
   represented with maximum precision.</para>
			<para>The <paramref name="provider"/> parameter is an <see cref="System.IFormatProvider"/> instance that obtains
a <see cref="System.Globalization.NumberFormatInfo"/> object that supplies culture-specific
format information. If <paramref name="provider"/> is <see langword="null"/>,
the return value is formatted with <see cref="System.Globalization.NumberFormatInfo"/> data for the current
culture.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToString"/>,
   taking a <see cref="System.String"/> and an <see cref="System.IFormatProvider"/> as parameters:</para>
			<codelink SampleID="Double Example" SnippetID="4"/>
		</example>
		<seealso topic="cpConFormattingOverview"/>
		<seealso topic="cpConNumericFormatStrings"/>
		<seealso cref="System.Double.Parse"/>
		<seealso cref="System.String"/>
	</doc>
</docs>
