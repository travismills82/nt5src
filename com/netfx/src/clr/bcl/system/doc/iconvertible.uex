<docs>
	<doc for="IConvertible.GetTypeCode">
		<summary>
			<para>Returns the <see cref="System.TypeCode"/>
for this instance.</para>
		</summary>
		<returns>
			<para>The enumerated constant that is the <see cref="System.TypeCode"/> of the class or 
 value type that implements this interface.</para>
		</returns>
	</doc><doc for="IConvertible.ToBoolean">
		<summary>
			<para> Converts the value of this instance to an equivalent Boolean
 value using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>A Boolean value equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToChar">
		<summary>
			<para> Converts the value of this instance to an equivalent Unicode
 character using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>A Unicode character equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToByte">
		<summary>
			<para> Converts the value of this instance to an equivalent 8-bit unsigned
 integer using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> An 8-bit unsigned integer equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToInt16">
		<summary>
			<para> Converts the value of this instance to an equivalent 16-bit signed
 integer using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> An 16-bit signed integer equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToInt32">
		<summary>
			<para> Converts the value of this instance to an equivalent 32-bit signed
 integer using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> An 32-bit signed integer equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToInt64">
		<summary>
			<para> Converts the value of this instance to an equivalent 64-bit signed
 integer using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> An 64-bit signed integer equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToUInt16">
		<summary>
			<para> Converts the value of this instance to an equivalent 16-bit unsigned
 integer using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> An 16-bit unsigned integer equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToUInt32">
		<summary>
			<para> Converts the value of this instance to an equivalent 32-bit unsigned
 integer using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> An 32-bit unsigned integer equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToSByte">
		<summary>
			<para> Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> An 8-bit signed integer equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToDecimal">
		<summary>
			<para> Converts the value of this instance to an equivalent 
 <see cref="System.Decimal"/> number using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> A <see cref="System.Decimal"/> number equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToDateTime">
		<summary>
			<para> Converts the value of this instance to an equivalent 
 <see cref="System.DateTime"/> using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> A <see cref="System.DateTime"/> instance 
 equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToString">
		<summary>
			<para> Converts the value of this instance to an equivalent 
 <see cref="System.String"/> using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> A <see cref="System.String"/> instance 
 equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToType">
		<summary>
			<para> Converts the value of this instance to an
 <see cref="System.Object"/> of the
 specified <see cref="System.Type"/> that has an equivalent value,
 using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" conversionType">The <see cref="System.Type"/> to which the value of this instance is converted.</param>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> An <see cref="System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToUInt64">
		<summary>
			<para> Converts the value of this instance to an equivalent 64-bit unsigned
 integer using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> An 64-bit unsigned integer equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToSingle">
		<summary>
			<para> Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> A single-precision floating-point number equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible.ToDouble">
		<summary>
			<para> Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para> A double-precision floating-point number equivalent to the value of this instance.</para>
		</returns>
	</doc><doc for="IConvertible">
		<summary>
			<para>Defines methods that convert the value of the implementing reference or value
      type to a common language runtime type that has an equivalent value.</para>
		</summary>
		<remarks>
			<para>This interface provides methods to convert the value of an
      instance of an implementing type to a common language
      runtime type that has an equivalent value. The common language runtime types are
   <see cref="System.Boolean"/>, <see cref="System.SByte"/>, <see cref="System.Byte"/>, <see cref="System.Int16"/>,
   <see cref="System.UInt16"/>, <see cref="System.Int32"/>, <see cref="System.UInt32"/>, <see cref="System.Int64"/>, <see cref="System.UInt64"/>, <see cref="System.Single"/>, <see cref="System.Double"/>, <see cref="System.Decimal"/>, <see cref="System.DateTime"/>, <see cref="System.Char"/>, and <see cref="System.String"/>.</para>
			<para> If there is no meaningful conversion to a common
      language
      runtime type, then a particular interface method implementation throws <see cref="System.InvalidCastException"/>. For example, if this interface is implemented on a Boolean type, the
      implementation of the <see cref="System.IConvertible.ToDateTime"/> method throws an
      exception because there is no meaningful <see cref="System.DateTime"/> equivalent to a Boolean
      type.</para>
			<para> The common language runtime typically exposes the <see cref="System.IConvertible"/> interface
   through the <see cref="System.Convert"/> class. The common language runtime also uses the <see cref="System.IConvertible"/> interface internally, in
<see topic="vcwlkExplicitInterfaceImplementationTutorial" title="explicit interface implementations"/>, to simplify the code used to
   support conversions in the <see cref="System.Convert"/> class and basic common language runtime types.</para>
			<para>In addition to the <see cref="System.IConvertible"/> interface, the .NET Framework provides classes called
type converters for converting user-defined data types to other data
types. For more information, see the <see topic="cpconGeneralizedTypeConversion" title="Generalized Type Conversion"/> topic. </para>
		</remarks>
		<example>
			<para>The following code sample demonstrates an implementation of 
   <see langword="IConvertible"/> for a Complex number class, allowing it to be cast 
      first as a <see cref="System.Double"/> and then calling the static <see cref="System.Convert"/> members on that
   <see langword="Double"/>.</para>
			<codelink SampleID="System.IConvertible" SnippetID="1"/>
		</example>
	</doc>
</docs>
