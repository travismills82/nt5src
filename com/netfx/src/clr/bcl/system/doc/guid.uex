<docs>
	<doc for="Guid.ToByteArray">
		<summary>
			<para>Returns a 16-element byte array that contains the value of the GUID.</para>
		</summary>
		<returns>
			<para>A 16-element byte array.</para>
		</returns>
	</doc>
	<doc for="Guid.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>The hash code for this instance.</para>
		</returns>
	</doc>
	<doc for="Guid.Equals">
		<summary>
			<para>Returns a value indicating whether this instance is equal to a specified 
       object.</para>
		</summary>
		<param name="o">The object to compare with this instance.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="o"/> is a <see langword="Guid"/> that has the 
    same value as this instance; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc>
	<doc for="Guid.NewGuid">
		<summary>
			<para>Initializes a new instance of the <see langword="Guid"/> class.</para>
		</summary>
		<returns>
			<para>A new <see langword="Guid"/> object.</para>
		</returns>
		<remarks>
			<para>This is a convenient <see langword="static"/> method that you can call to get 
    a new <see langword="Guid"/>.</para>
		</remarks>
	</doc>
	<doc for="Guid.operatorEQ">
		<summary>
			<para>Returns an indication whether the values of two specified <see langword="Guid"/> objects
   are equal.</para>
		</summary>
		<altmember cref="System.Guid.Equals"/>
		<param name="a">A <see langword="Guid"/> object.</param>
		<param name=" b">A <see langword="Guid"/> object.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="a "/>and <paramref name="b "/>are
   equal; otherwise, <see langword="false"/> .</para>
		</returns>
	</doc><doc for="Guid.operatorNE">
		<summary>
			<para>Returns an indication whether the values of two specified <see langword="Guid"/> objects are not equal.</para>
		</summary>
		<altmember cref="System.Guid.Equals"/>
		<param name="a">A <see langword="Guid"/> object.</param>
		<param name="b">A <see langword="Guid"/> object.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="a "/>and <paramref name="b "/>are not equal; otherwise, <see langword="false"/> .</para>
		</returns>
	</doc><doc for="Guid.Empty">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Guid"/> class.</para>
		</summary>
	</doc><doc for="Guid.Guid">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Guid"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Guid"/> class using the specified array of bytes.</para>
		</summary>
		<param name="b">A 16 element byte array containing values with which to initialize the GUID.</param>
		<exception cref="System.ArgumentNullException"><paramref name="b"/> is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentException"><paramref name="b "/> is not 16 bytes long.</exception>
	</doc><doc for="Guid.Guid1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Guid"/> class using the specified unsigned integers and bytes.</para>
		</summary>
		<param name="a">The first 4 bytes of the GUID.</param>
		<param name="b">The next 2 bytes of the GUID.</param>
		<param name="c">The next 2 bytes of the GUID.</param>
		<param name="d">The next byte of the GUID.</param>
		<param name="e">The next byte of the GUID.</param>
		<param name="f">The next byte of the GUID.</param>
		<param name="g">The next byte of the GUID.</param>
		<param name="h">The next byte of the GUID.</param>
		<param name="i">The next byte of the GUID.</param>
		<param name="j">The next byte of the GUID.</param>
		<param name="k">The next byte of the GUID.</param>
		<remarks>
			<para>Specifying the bytes in this manner avoids endianness issues.</para>
		</remarks>
		<example>
			<para>Guid(0xa,0xb,0xc,0,1,2,3,4,5,6,7) creates a
   <see langword="Guid"/> that corresponds to
      "0000000a-000b-000c-0001-020304050607".</para>
		</example>
	</doc><doc for="Guid.Guid3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Guid"/> class using the
   specified integers and byte array.</para>
		</summary>
		<param name=" a">The first 4 bytes of the GUID.</param>
		<param name=" b">The next 2 bytes of the GUID.</param>
		<param name=" c">The next 2 bytes of the GUID.</param>
		<param name=" d">The remaining 8 bytes of the GUID.</param>
		<exception cref="System.ArgumentNullException"><paramref name="d "/>is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentException"><paramref name="d "/>is not 8 bytes long.</exception>
		<example>
			<para><c>Guid(1,2,3,new byte[]{0,1,2,3,4,5,6,7})</c> creates a <see langword="Guid"/> that corresponds to
"00000001-0002-0003-0001-020304050607".</para>
		</example>
	</doc><doc for="Guid.Guid4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Guid"/> class using the
   specified integers and bytes.</para>
		</summary>
		<param name=" a">The first 4 bytes of the GUID.</param>
		<param name=" b">The next 2 bytes of the GUID.</param>
		<param name=" c">The next 2 bytes of the GUID.</param>
		<param name=" d">The next byte of the GUID.</param>
		<param name=" e">The next byte of the GUID.</param>
		<param name=" f">The next byte of the GUID.</param>
		<param name=" g">The next byte of the GUID.</param>
		<param name=" h">The next byte of the GUID.</param>
		<param name=" i">The next byte of the GUID.</param>
		<param name=" j">The next byte of the GUID.</param>
		<param name=" k">The next byte of the GUID.</param>
		<remarks>
			<para>Specifying individual bytes in this manner can be used to circumvent byte
      order restrictions (big-endian or little-endian byte order) on particular
      types of computers.</para>
		</remarks>
		<example>
			<para><c>Guid(0xa,0xb,0xc,0,1,2,3,4,5,6,7)</c> creates a <see langword="Guid"/>
that corresponds to "0000000a-000b-000c-0001-020304050607".</para>
		</example>
	</doc><doc for="Guid">
		<summary>
			<para>Represents a globally unique identifier (GUID).</para>
		</summary>
		<remarks>
			<para>A GUID is a 128-bit integer (16 bytes) that can be used across all computers
      and networks wherever a unique identifier is required. Such an identifier has a
      very low probability of being duplicated.</para>
		</remarks>
		<example>
			<para>The following code sample demonstrates how to attach and read a 
   <see langword="Guid"/> object as an attribute on a user-defined class or 
      interface.</para>
			<codelink SampleID="Guid" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Guid.CompareTo">
		<summary>
			<para>Compares this instance to a specified object and returns an indication of
      their relative values.</para>
		</summary>
		<param name=" value">An object to compare, or <see langword="null"/>.</param>
		<returns>
			<para>A signed number indicating the relative values of this instance and
   <paramref name="value"/>.</para>
			<list type="table"><listheader>
					<term>Value</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> A negative integer</term>
					<description>This instance is less than
      <paramref name="value"/>.</description>
				</item>
				<item>
					<term> Zero</term>
					<description>This instance is equal to
      <paramref name="value"/>.</description>
				</item>
				<item>
					<term> A positive integer</term>
					<description><para>This instance is greater than
      <paramref name="value"/>.</para>
						<para>-or-</para>
						<para><paramref name="value"/> is <see langword="null"/>.</para></description>
				</item>
			</list>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is not a <see langword="Guid"/>.</exception>
		<remarks>
			<para>Any instance of <see langword="Guid"/>, regardless of its value, is considered
   greater than <see langword="null"/>.</para>
			<para><paramref name="value"/> must be <see langword="null "/> or an instance of <see langword="Guid"/>; otherwise, an
exception is thrown.</para>
		</remarks>
		<example>
			<para>The following code sample demonstrates how to attach and read a 
   <see langword="Guid"/> object as an attribute on a user-defined class or 
      interface.</para>
			<codelink SampleID="Guid" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Guid.ToString1">
		<summary>
			<para>Returns a <see langword="String"/> representation of the value of this
<see langword="Guid"/> instance, according to the provided format specifier.</para>
		</summary>
		<param name="format">A single format specifier that indicates how to format the value of this <see cref="System.Guid"/>. The <paramref name="format"/> parameter can be "N", "D", "B", or "P". If <paramref name="format"/> is <see langword="null"/> or the empty string (""), "D" is used.</param>
		<returns>
			<para>A <see cref="System.String"/> representation of 
   the value of this <see cref="System.Guid"/>.</para>
		</returns>
		<exception cref="System.FormatException">The value of <paramref name="format"/> is not <see langword="null"/>, the empty string (""), "N", "D", "B", or "P".</exception>
		<remarks>
			<para>The <paramref name="format"/> parameter can
   contain the following format specifiers. In the table that follows, all digits
   in the return value are hexadecimal. Each character 'x' represents a hexadecimal
   digit; each hyphen ('-'), bracket ('{', '}'), and parenthesis ('(', ')')
   appears as shown.</para>
			<list type="table">
				<listheader>
					<term>Specifier</term>
					<description>Format of Return Value </description>
				</listheader>
				<item>
					<term> N</term>
					<description><para>32 digits:</para>
						<para>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</para></description>
				</item>
				<item>
					<term> D</term>
					<description><para>32 digits separated by hyphens:</para>
						<para>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</para></description>
				</item>
				<item>
					<term> B</term>
					<description><para>32 digits separated by hyphens, enclosed in brackets:</para>
						<para>{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx} </para></description>
				</item>
				<item>
					<term> P</term>
					<description><para>32 digits separated by hyphens, enclosed in parentheses:</para>
						<para>(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx) </para></description>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="Guid.ToString2">
		<summary>
			<para>Returns a <see cref="System.String"/> representation of the value of this instance of the
<see cref="System.Guid"/> class, according to the provided format
   specifier and culture-specific format information.</para>
		</summary>
		<param name=" format">A single format specifier that indicates how to format the value of this <see cref="System.Guid"/>. The <paramref name="format"/> parameter can be "N", "D", "B", or "P". If <paramref name="format"/> is <see langword="null"/> or the empty string (""), "D" is used.</param>
		<param name=" provider">(Reserved) An <see langword="IFormatProvider"/> reference that supplies culture-specific formatting services.</param>
		<returns>
			<para>A <see cref="System.String"/> representation of 
   the value of this <see cref="System.Guid"/>.</para>
		</returns>
		<exception cref="System.FormatException">The value of <paramref name="format"/> is not <see langword="null"/>, the empty string (""), "N", "D", "B", or "P".</exception>
		<remarks>
			<para>The <paramref name="format"/> parameter can
   contain the following format specifiers. In the table that follows, all digits
   in the return value are hexadecimal. Each character 'x' represents a hexadecimal
   digit; each hyphen ('-'), bracket ('{', '}'), and parenthesis ('(', ')')
   appears as shown.</para>
			<list type="table">
				<listheader>
					<term>Specifier</term>
					<description>Format of Return Value </description>
				</listheader>
				<item>
					<term> N</term>
					<description><para>32 digits:</para>
						<para>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</para></description>
				</item>
				<item>
					<term> D</term>
					<description><para>32 digits separated by hyphens:</para>
						<para>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</para></description>
				</item>
				<item>
					<term> B</term>
					<description><para>32 digits separated by hyphens, enclosed in brackets:</para>
						<para>{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx} </para></description>
				</item>
				<item>
					<term> P</term>
					<description><para>32 digits separated by hyphens, enclosed in parentheses:</para>
						<para>(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx) </para></description>
				</item>
			</list>
			<para>The <paramref name="provider "/>parameter is reserved for future use and does not
contribute to the execution of this method. A null reference can be coded for
this parameter. </para>
		</remarks>
	</doc>
	<doc for="Guid.Guid2">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Guid"/> class
   using the value represented by the specified string.</para>
		</summary>
		<param name="g"><para>A <see cref="System.String"/> that contains a GUID in one of the following formats ('d' represents a hexadecimal digit whose case is ignored):</para>
			<para>32 contiguous digits:</para>
			<para>dddddddddddddddddddddddddddddddd </para>
			<para> -or-</para>
			<para>Groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups. The entire GUID can optionally be enclosed in matching braces or parentheses:</para>
			<para>dddddddd-dddd-dddd-dddd-dddddddddddd</para>
			<para>-or-</para>
			<para>{dddddddd-dddd-dddd-dddd-dddddddddddd}</para>
			<para>-or-</para>
			<para>(dddddddd-dddd-dddd-dddd-dddddddddddd)</para>
			<para> -or-</para>
			<para>Groups of 8, 4, and 4 digits, and a subset of eight groups of 2 digits, with each group prefixed by "0x" or "0X", and separated by commas. The entire GUID, as well as the subset, is enclosed in matching braces:</para>
			<para>{0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}</para>
			<para> All braces, commas, and "0x" prefixes are required. All embedded spaces are ignored. All leading zeroes in a group are ignored. </para>
			<para> The digits shown in a group are the maximum number of meaningful digits that can appear in that group. You can specify from 1 to the number of digits shown for a group. The specified digits are assumed to be the low order digits of the group. If you specify more digits for a group than shown, the high-order digits are ignored. </para></param>
		<exception cref="System.ArgumentNullException"><paramref name="g "/>is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><para>The format of <paramref name="g "/> is invalid.</para></exception>
		<remarks>
			<para>The alphabetic hexadecimal digits in the <paramref name="g"/>
parameter can be upper or lower case.</para>
			<para> For example, the following
   strings represent the same GUID.</para>
			<para>"ca761232ed4211cebacd00aa0057b223"</para>
			<para>"CA761232-ED42-11CE-BACD-00AA0057B223"</para>
			<para>"{CA761232-ED42-11CE-BACD-00AA0057B223}"</para>
			<para>"(CA761232-ED42-11CE-BACD-00AA0057B223)"</para>
			<para>"{0xCA761232, 0xED42, 0x11CE, {0xBA, 0xCD, 0x00, 0xAA, 0x00, 0x57, 0xB2,
   0x23}}"</para>
		</remarks>
	</doc>
	<doc for="Guid.ToString">
		<overload>
			<para>Returns a <see langword="String"/> representation of the value of this
   instance of the <see langword="Guid"/> class.</para>
		</overload>
		<summary>
			<para>Returns a <see langword="String"/> representation of the value of this
   instance in registry format.</para>
		</summary>
		<returns>
			<para>A <see langword="String"/> formatted in this pattern:</para>
			<para>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</para>
			<para>where the value of the GUID is represented as a series of lower-case
   hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by
   hyphens. An example of a return value is
   "382c74c3-721d-4f34-80e5-57657b6cbc27".</para>
		</returns>
		<remarks>
			<para>This method provides a default GUID format that is sufficient for typical
      use; however, other versions of this method that take a format parameter provide
      a few common format variations.</para>
		</remarks>
	</doc>
</docs>
