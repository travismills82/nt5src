<docs>
	<doc for="Single.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer hash code.</para>
		</returns>
	</doc>
	<doc for="Single.GetTypeCode">
		<summary>
			<para>Returns the <see cref="System.TypeCode"/> for value type <see cref="System.Single"/>.</para>
		</summary>
		<returns>
			<para>The enumerated constant, <see cref="System.TypeCode.Single" qualify="true"/>.</para>
		</returns>
		<seealso cref="System.TypeCode"/>
	</doc>
	<doc for="Single.Parse1">
		<summary>
			<para>Converts the string representation of a number in a specified style to its single-precision floating point number equivalent.</para>
		</summary>
		<param name="s">A string representing a number to convert. </param>
		<param name="style">The combination of one or more <see cref="System.Globalization.NumberStyles"/>constants that indicate the permitted format of <paramref name="s"/>. </param>
		<returns>
			<para>A single-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><paramref name="s"/> is not a number in a valid format.</exception>
		<exception cref="System.OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Single.MinValue"/> or greater than <see cref="System.Single.MaxValue"/>.</exception>
		<remarks>
			<para>The <paramref name="s"/> parameter can contain <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para> [ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</para>
			<para> Optional items are framed in square brackets ([ and ]). Items containing the
 term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> ws</term>
					<description>A series of white space
 characters.</description>
				</item>
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
 symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number. Runs of
 integral-digits can be partitioned by a group-separator symbol. (For
 example, in some cultures a comma (,) separates groups of thousands.)
 Integral-digits can be absent if there are
 fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point
 symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
 part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description>An uppercase or lowercase character 'e',
 indicating exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
 exponent.</description>
				</item>
			</list>
			<para> Some examples of <paramref name="s"/>
are "100", "-123,456,789", "123.45+e6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity". </para>
			<para> This version of <see langword="Parse"/> uses the specified <see cref="System.Globalization.NumberStyles"/> and the culture-specific
<see cref="System.Globalization.NumberFormatInfo"/> 
data associated with the current
thread. </para>
			<para>For more information about numeric formats, see the
<see topic="cpConFormattingOverview"/> 
topic.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Single.ToString"/>
	</doc>
	<doc for="Single.Parse3">
		<summary>
			<para>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating point number equivalent.</para>
		</summary>
		<param name="s">A string representing a number to convert.</param>
		<param name="style">The combination of one or more <see cref="System.Globalization.NumberStyles"/>constants that indicate the permitted format of <paramref name="s"/>.</param>
		<param name="provider">An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="s"/>. </param>
		<returns>
			<para>A single-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/> is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><paramref name="s"/> is not a numeric value.</exception>
		<exception cref="System.ArgumentException"><paramref name="style "/>is not a combination of bit flags from the <see cref="System.Globalization.NumberStyles"/> enumeration.</exception>
		<remarks>
			<para>The <paramref name="s"/> parameter can contain <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para> [ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</para>
			<para> Optional items are framed in square brackets ([ and ]). Items containing the
 term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> ws</term>
					<description>A series of white space
 characters.</description>
				</item>
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
 symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number. Runs of
 integral-digits can be partitioned by a group-separator symbol. (For
 example, in some cultures a comma (,) separates groups of thousands.)
 Integral-digits can be absent if there are
 fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point
 symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
 part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description>An uppercase or lowercase character 'e',
 indicating exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
 exponent.</description>
				</item>
			</list>
			<para> Some examples of <paramref name="s"/>
are "100", "-123,456,789", "123.45+e6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity". </para>
			<para>This version of <see langword="Parse"/> uses the specified <see cref="System.Globalization.NumberStyles"/> and the specified number format
information. If <paramref name="provider"/> is <see langword="null"/> or a <see cref="System.Globalization.NumberFormatInfo"/> cannot be obtained, the formatting
information for the current system culture is used. </para>
			<para>For more information about numeric formats, see the
<see topic="cpConFormattingOverview"/> 
topic.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Single.ToString"/>
	</doc>
	<doc for="Single.Parse2">
		<summary>
			<para>Converts the string representation of a number in a specified culture-specific format to its single-precision floating point number equivalent.</para>
		</summary>
		<param name="s">A string representing a number to convert.</param>
		<param name="provider">An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="s"/>.</param>
		<returns>
			<para>A single-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><paramref name="s"/> is not a number in a valid format.</exception>
		<exception cref="System.OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Single.MinValue"/> or greater than <see cref="System.Single.MaxValue"/>.</exception>
		<remarks>
			<para>The <paramref name="s"/> parameter can contain <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para> [ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</para>
			<para> Optional items are framed in square brackets ([ and ]). Items containing the
 term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> ws</term>
					<description>A series of white space
 characters.</description>
				</item>
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
 symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number. Runs of
 integral-digits can be partitioned by a group-separator symbol. (For
 example, in some cultures a comma (,) separates groups of thousands.)
 Integral-digits can be absent if there are
 fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point
 symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
 part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description>An uppercase or lowercase character 'e',
 indicating exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
 exponent.</description>
				</item>
			</list>
			<para> Some examples of <paramref name="s"/>
are "100", "-123,456,789", "123.45+e6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity". </para>
			<para>This version of <see langword="Parse"/>
uses the <see cref="System.Globalization.NumberStyles"/> values, <see cref="System.Globalization.NumberStyles.Float"/> and <see cref="System.Globalization.NumberStyles.AllowThousands"/>, and the specified number
format information. If <paramref name="provider"/> is <see langword="null"/> or a <see cref="System.Globalization.NumberFormatInfo"/> cannot be obtained, the formatting
information for the current system culture is used.</para>
			<para>For more information about numeric formats, see the 
<see topic="cpConFormattingOverview"/> 
topic.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Single.ToString"/>
	</doc>
	<doc for="Single.ToString3">
		<summary>
			<para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified culture-specific
 format information. </para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
		<returns>
			<para>The string representation of the value of this instance as
 specified by <paramref name="provider"/>.</para>
		</returns>
		<remarks>
			<para>The return value can be <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</para>
			<para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
 symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number.
 Integral-digits can be absent if there are
 fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point
 symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
 part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description>A lowercase character 'e', indicating
 exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
 exponent.</description>
				</item>
			</list>
			<para> Some examples of the return value are "100", "-123,456,789", "123.45+e6", "500", "3.1416", "600", "-0.123", and "-Infinity". </para>
			<para>This instance is formatted with the general format specifier ("G").</para>
			<para>The <paramref name="provider"/> parameter is an
<see cref="System.IFormatProvider"/> that obtains
 a <see cref="System.Globalization.NumberFormatInfo"/> that supplies culture-specific
 format information. If <paramref name="provider"/> is <see langword="null"/>,
 the return value is formatted with <see cref="System.Globalization.NumberFormatInfo"/> data for the current
 culture.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Single.Parse"/>
		<seealso cref="System.String"/>
	</doc>
	<doc for="Single.IConvertible.ToBoolean">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToChar">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToSByte">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToByte">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToInt16">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToUInt16">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToInt32">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToUInt32">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToInt64">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToUInt64">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToSingle">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToDouble">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToDecimal">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToDateTime">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IConvertible.ToType">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Single.IsInfinity">
		<summary>
			<para> Returns a value indicating whether the specified
      number evaluates to negative or positive infinity.</para>
		</summary>
		<param name="f">A single-precision floating point number.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="f "/>evaluates to <see cref="System.Single.PositiveInfinity"/>
or <see cref="System.Single.NegativeInfinity"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Floating-point operations return <see cref="System.Single.PositiveInfinity"/>
or <see cref="System.Single.NegativeInfinity"/> to signal an overflow condition.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Single.IsInfinity"/> 
method.</para>
			<codelink SampleID="System.Single" SnippetID="11"/>
		</example>
		<seealso cref="System.Single.IsPositiveInfinity"/>
		<seealso cref="System.Single.IsNegativeInfinity"/>
		<seealso cref="System.Single.PositiveInfinity"/>
		<seealso cref="System.Single.NegativeInfinity"/>
	</doc>
	<doc for="Single.IsPositiveInfinity">
		<summary>
			<para> Returns a value indicating whether
      the specified number evaluates to positive infinity.</para>
		</summary>
		<param name="f">A single-precision floating point number.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="f "/>evaluates to <see cref="System.Single.PositiveInfinity"/>
; otherwise, <see langword="false"/>
.</para>
		</returns>
		<remarks>
			<para>Floating-point operations return <see cref="System.Single.PositiveInfinity"/> to signal an overflow
   condition.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Single.IsPositiveInfinity"/> method.</para>
			<codelink SampleID="System.Single" SnippetID="12"/>
		</example>
		<seealso cref="System.Single.IsInfinity"/>
		<seealso cref="System.Single.IsNegativeInfinity"/>
		<seealso cref="System.Single.PositiveInfinity"/>
		<seealso cref="System.Single.NegativeInfinity"/>
	</doc>
	<doc for="Single.IsNaN">
		<summary>
			<para>Returns a value indicating whether the specified number evaluates to
      not a number (<see cref="System.Single.NaN"/>).</para>
		</summary>
		<param name="f">A single-precision floating point number.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="f "/>evaluates to not a number (<see cref="System.Single.NaN"/>); otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Floating-point operations return <see cref="System.Single.NaN"/> to signal that that result of the operation is
   undefined. For example, dividing 0.0 by 0.0 results in <see cref="System.Single.NaN"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Single.IsNaN"/> method.</para>
			<codelink SampleID="System.Single" SnippetID="8"/>
		</example>
		<seealso cref="System.Single.NaN"/>
	</doc>
	<doc for="Single.Equals">
		<summary>
			<para>Returns a value indicating whether this instance is equal to a specified object.</para>
		</summary>
		<param name="obj">An object to compare with this instance.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="obj"/> is an instance of <see cref="System.Single"/> and equals the value of this instance; otherwise, <see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following sample demonstrates the <see cref="System.Single.Equals"/> 
method.</para>
			<codelink SampleID="System.Single" SnippetID="17"/>
		</example>
		<seealso cref="System.Single.CompareTo"/>
	</doc>
	<doc for="Single.ToString">
		<overload>
			<para>Converts the numeric value of this instance to its
      equivalent string representation. </para>
		</overload>
		<summary>
			<para>Converts the numeric value of this instance to its
      equivalent string representation. </para>
		</summary>
		<returns>
			<para>The string
      representation of the value of this instance.</para>
		</returns>
		<remarks>
			<para>The return value can be <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</para>
			<para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description><para> A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description> A lowercase character 'e', indicating exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an exponent.</description>
				</item>
			</list>
			<para> Some examples of the return value are "100", "-123,456,789", "123.45+e6", "500", "3.1416", "600", "-0.123", and "-Infinity". </para>
			<para>This version of <see langword="ToString"/> uses the general format specifier ("G") and the
<see cref="System.Globalization.NumberFormatInfo"/> for the current culture.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Single.ToString"/> 
method.</para>
			<codelink SampleID="System.Single" SnippetID="3"/>
		</example>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Single.Parse"/>
		<seealso cref="System.String"/>
	</doc>
	<doc for="Single.Parse">
		<overload>
			<para>Converts the string representation of a number to its single-precision floating point number equivalent.</para>
		</overload>
		<summary>
			<para>Converts the string representation of a number to its single-precision floating point number equivalent.</para>
		</summary>
		<param name="s">A string representing a number to convert.</param>
		<returns>
			<para>A single-precision floating point number equivalent to the
      numeric value or symbol specified in <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><paramref name="s"/> is not a number in a valid format.</exception>
		<exception cref="System.OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Single.MinValue"/> or greater than <see cref="System.Single.MaxValue"/>.</exception>
		<remarks>
			<para>The <paramref name="s"/> parameter can contain <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para> [ws][sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</para>
			<para> Optional items are framed in square brackets ([ and ]). Items containing the
   term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> ws</term>
					<description>A series of white space characters.</description>
				</item>
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
         symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number. Runs of integral-digits can be
            partitioned by a group-separator symbol. (For example, in some cultures
            a comma (,) separates groups of thousands.) Integral-digits can be
            absent if there are fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
            part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description> An uppercase or lowercase character 'e',
            indicating exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
            exponent.</description>
				</item>
			</list>
			<para> Some examples of <paramref name="s"/>
are "100", "-123,456,789", "123.45+e6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity". </para>
			<para> This version of <see langword="Parse"/> uses the <see cref="System.Globalization.NumberStyles"/> values, <see cref="System.Globalization.NumberStyles.Float"/> and <see cref="System.Globalization.NumberStyles.AllowThousands"/>, and the culture-specific
<see cref="System.Globalization.NumberFormatInfo"/> 
data associated with the current
thread. </para>
			<para>For more information about numeric formats, see the
<see topic="cpConFormattingOverview"/> 
topic.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Single.Parse"/> method.</para>
			<codelink SampleID="System.Single" SnippetID="3"/>
		</example>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Single.ToString"/>
	</doc>
	<doc for="Single.CompareTo">
		<summary>
			<para>Compares this instance to a specified object and returns an indication of their relative values.</para>
		</summary>
		<param name="value">An object to compare, or <see langword="null"/>.</param>
		<returns>
			<para>A signed number indicating the relative values of this instance and <paramref name="value"/>.</para>
			<list type="table">
				<listheader>
					<term>Return Value</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> Less
         than
         zero</term>
					<description>
						<para>This instance is less than <paramref name="value"/>.</para>
						<para>-or-</para>
						<para>This instance is not a number (<see cref="System.Single.NaN"/> ) and <paramref name="value"/> is a
      number.</para></description>
				</item>
				<item>
					<term> Zero</term>
					<description>
						<para>This instance is equal to <paramref name="value"/>.</para>
						<para>-or-</para>
						<para>This instance and value are both not a number (<see cref="System.Single.NaN"/>),
<see cref="System.Single.PositiveInfinity"/>, or <see cref="System.Single.NegativeInfinity"/> 
.</para></description>
				</item>
				<item>
					<term> Greater than zero</term>
					<description>
						<para>This instance is greater than <paramref name="value"/>.</para>
						<para>-or-</para>
						<para>This instance is a number and <paramref name="value"/> is not a number (<see cref="System.Single.NaN"/>).</para>
						<para>-or-</para>
						<para><paramref name="value"/> is
<see langword="null"/>.</para></description>
				</item>
			</list>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is not a <see cref="System.Single"/>.</exception>
		<remarks>
			<para>Any instance of <see cref="System.Single"/>, regardless of its value, is
   considered greater than <see langword="null"/>.</para>
			<para>The <paramref name="value"/> parameter must be
<see langword="null"/> or an instance of <see cref="System.Single"/>; otherwise, an exception is thrown.</para>
			<para>This method is implemented to support the <see cref="System.IComparable"/> interface. Note that, although a
<see cref="System.Single.NaN"/> is 
not considered to be equal to another <see cref="System.Single.NaN"/> (even itself), the <see cref="System.IComparable"/> interface requires that <c>A.CompareTo(A)</c> return zero.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Single.CompareTo"/>
method.</para>
			<codelink SampleID="System.Single" SnippetID="16"/>
		</example>
		<seealso cref="System.Single.Equals"/>
	</doc>
	<doc for="Single.MinValue">
		<summary>
			<para>Represents the smallest possible value of <see cref="System.Single"/>. This field is
   constant.</para>
		</summary>
		<remarks>
			<para> The value of this
      constant is negative 3.402823e38.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Single.MinValue"/>
constant.</para>
			<codelink SampleID="System.Single" SnippetID="5"/>
		</example>
		<seealso cref="System.Single.MaxValue"/>
	</doc>
	<doc for="Single.PositiveInfinity">
		<summary>
			<para> Represents positive infinity. This field is constant.</para>
		</summary>
		<remarks>
			<para> The value of this constant is the result of dividing a positive number by
      zero.</para>
			<para>This constant is returned when the result of an operation is greater than
   <see cref="System.Single.MaxValue"/>.</para>
			<para>Use <see cref="System.Single.IsPositiveInfinity"/> to determine whether
   a value evaluates to positive infinity. It is not possible to determine whether
   a value evaluates to positive infinity by comparing it to another value equal to
<see langword="PositiveInfinity"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Single.PositiveInfinity"/> constant.</para>
			<codelink SampleID="System.Single" SnippetID="10"/>
		</example>
		<seealso cref="System.Single.IsPositiveInfinity"/>
		<seealso cref="System.Single.IsInfinity"/>
		<seealso cref="System.Single.NegativeInfinity"/>
	</doc>
	<doc for="Single.NegativeInfinity">
		<summary>
			<para> Represents negative infinity. This field is constant.</para>
		</summary>
		<remarks>
			<para> The value of this constant is the result of dividing a negative number by
      zero.</para>
			<para>This constant is returned when the result of an operation is less than
   <see cref="System.Single.MinValue"/>.</para>
			<para>Use <see cref="System.Single.IsNegativeInfinity"/> to determine whether
   a value evaluates to negative infinity. It is not possible to determine whether
   a value evaluates to negative infinity by comparing it to another value equal to
<see langword="NegativeInfinity"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Single.NegativeInfinity"/> constant.</para>
			<codelink SampleID="System.Single" SnippetID="9"/>
		</example>
		<seealso cref="System.Single.IsNegativeInfinity"/>
		<seealso cref="System.Single.IsInfinity"/>
		<seealso cref="System.Single.PositiveInfinity"/>
	</doc>
	<doc for="Single.NaN">
		<summary>
			<para> Represents not a number
      (<see langword="NaN"/>). This field is constant.</para>
		</summary>
		<remarks>
			<para> The value
      of this constant is the result of dividing zero by
      zero.</para>
			<para> This constant is returned when the result
      of an operation is undefined.</para>
			<para> Use <see cref="System.Single.IsNaN"/> to determine
   whether a value
   is not a number. It is not possible to determine whether a
   value is not a number by comparing it to another value equal to
<see langword="NaN"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Single.NaN"/> constant.</para>
			<codelink SampleID="System.Single" SnippetID="7"/>
		</example>
		<seealso cref="System.Single.IsNaN"/>
	</doc>
	<doc for="Single.Epsilon">
		<summary>
			<para> Represents the smallest positive <see cref="System.Single"/> greater than
   zero. This
   field is constant.</para>
		</summary>
		<remarks>
			<para>The value of this constant
      is 1.4e-45.</para>
			<para> Two apparently
      equivalent floating point numbers might not compare equal because of differences in
      their least significant digits. For example, the C# expression, <c>(float)1/3 == (float)0.33333</c>, does not
   compare equal because the division operation on the left-hand side has maximum
   precision while the constant on the right-hand side is only precise to the
   visible digits. </para>
			<para>Instead, determine if the two sides of a comparison are close enough to equal
   for your purposes by comparing whether the absolute value of the difference
   between the left and right-hand sides is less than <see langword="Epsilon"/>.</para>
		</remarks>
		<example>
			<para>The following sample displays the <see cref="System.Single.Epsilon"/> constant.</para>
			<codelink SampleID="System.Single" SnippetID="6"/>
		</example>
	</doc>
	<doc for="Single.MaxValue">
		<summary>
			<para> Represents the largest possible value of <see cref="System.Single"/>. This field is constant.</para>
		</summary>
		<remarks>
			<para>The value of this constant is positive 3.402823e38.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Single.MaxValue"/> constant.</para>
			<codelink SampleID="System.Single" SnippetID="4"/>
		</example>
		<seealso cref="System.Single.MinValue"/>
	</doc>
	<doc for="Single.IsNegativeInfinity">
		<summary>
			<para> Returns a value indicating whether
      the specified number evaluates to negative infinity.</para>
		</summary>
		<param name="f">A single-precision floating point number.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="f "/>evaluates to <see cref="System.Single.NegativeInfinity"/>
; otherwise, <see langword="false"/>
.</para>
		</returns>
		<remarks>
			<para>Floating-point operations return <see cref="System.Single.NegativeInfinity"/> to signal an overflow
   condition.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Single.IsNegativeInfinity"/> method.</para>
			<codelink SampleID="System.Single" SnippetID="13"/>
		</example>
		<seealso cref="System.Single.IsInfinity"/>
		<seealso cref="System.Single.IsPositiveInfinity"/>
		<seealso cref="System.Single.PositiveInfinity"/>
		<seealso cref="System.Single.NegativeInfinity"/>
	</doc>
	<doc for="Single">
		<summary>
			<para> Represents a single-precision floating point number.</para>
		</summary>
		<remarks>
			<para>The <see langword="Single"/> value
   type represents
   a single-precision 32-bit number with values ranging from negative 3.402823e38 to
   positive 3.402823e38, as well as positive or
   negative zero, <see cref="System.Single.PositiveInfinity"/>,
<see cref="System.Single.NegativeInfinity"/>, and not a number (<see cref="System.Single.NaN"/>).</para>
			<para><see langword="Single"/> complies with
the IEC 60559:1989 (IEEE 754)
standard for binary floating-point arithmetic. </para>
			<para><see langword="Single"/> provides
methods to compare instances of this type, convert the value of an instance to
its string representation, and convert the string representation of a
number to an instance of this type.</para>
			<para>For information about how format specification codes
   control the string representation of value types, see
<see topic="cpConFormattingOverview"/>. </para>
This type implements interfaces <see cref="System.IComparable"/>, <see cref="System.IFormattable"/>, and <see cref="System.IConvertible"/>. Use the <see cref="System.Convert"/> class for conversions instead of this
type's explicit interface member implementation of <see cref="System.IConvertible"/>.
<para>When performing binary operations, if one of the operands is a floating-point 
   type, <see langword="Single "/>or <see cref="System.Double"/>, then the other
   operand is required to be an integral type or a floating-point type. The
   operation is evaluated as follows:</para>
			<list type="bullet"><item>
					<term>
      
      If one of the operands is of an integral type, then
      that operand is converted to the floating-point type of the other operand.</term>
				</item>
				<item>
					<term>
      
      Then, if either of the operands is <see cref="System.Double"/>, the other
      operand is converted to <see cref="System.Double"/>, and the operation is performed using at least the
      range and precision of the <see cref="System.Double"/>. For numeric operations, the type of the result is
   <see cref="System.Double"/>.</term>
				</item>
				<item>
					<term>
      
      Otherwise, the operation is performed using at least
      the range and precision of the <see langword="Single"/> type and, for numeric
      operations, the type of the result is <see langword="Single"/>
      
      .</term>
				</item>
			</list>
			<para>The floating-point operators, including the assignment operators, do not
   throw exceptions. Instead, in exceptional situations, the result of a
   floating-point operation is zero, infinity, or NaN, as described below:</para>
			<list type="bullet"><item>
					<term>
      
      If the result of a floating-point operation is too
      small for the destination format, the result of the operation is zero.</term>
				</item>
				<item>
					<term>
      
      If the magnitude of the result of a floating-point operation is too large
      for the destination format, the result of the operation is <see cref="System.Single.PositiveInfinity"/> or <see cref="System.Single.NegativeInfinity"/>, as appropriate for
      the sign of the result.</term>
				</item>
				<item>
					<term>
      
      If a floating-point operation is invalid, the result of the operation is
   <see cref="System.Single.NaN"/>.</term>
				</item>
				<item>
					<term>
      
      If one or both operands of a floating-point operation are <see cref="System.Single.NaN"/>, the result
      of the operation is <see cref="System.Single.NaN"/>.</term>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="Single.ToString1">
		<summary>
			<para>Converts the numeric value of this instance to its
      equivalent string representation, using the specified format. </para>
		</summary>
		<param name="format">A format string.</param>
		<returns>
			<para>The string representation of the value of this instance as specified by <paramref name="format"/>.</para>
		</returns>
		<exception cref="System.FormatException"><paramref name="format"/> is invalid.</exception>
		<remarks>
			<para>The return value can be <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</para>
			<para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
         symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number.
            Integral-digits can be absent if there are
            fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point
            symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
            part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description>A lowercase character 'e', indicating
            exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
            exponent.</description>
				</item>
			</list>
			<para> Some examples of the return value are "100", "-123,456,789", "123.45+e6", "500", "3.1416", "600", "-0.123", and "-Infinity". </para>
			<para>If <paramref name="format"/> is <see langword="null"/> or an empty string, the return value
   is formatted with the general format specifier ("G").</para>
			<para>By default, the return value only contains 7 digits of precision although a
   maximum of 9 digits is maintained internally. If the value of this instance has
   greater than 7 digits, <see langword="ToString"/> returns
<see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/> or 
<see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>
instead of the expected number. If you require more precision, specify
<paramref name="format"/> with the "G9" format specification, which always returns 9 
digits of precision, or "R", which returns 7 digits if the number can be
represented with that precision or 9 digits if the number can only be
represented with maximum precision.</para>
			<para>The return value is
   formatted with <see cref="System.Globalization.NumberFormatInfo"/> data for the current culture.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso topic="cpConNumericFormatStrings"/>
		<seealso cref="System.Single.Parse"/>
		<seealso cref="System.String"/>
	</doc>
	<doc for="Single.ToString2">
		<summary>
			<para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format and culture-specific format information. </para>
		</summary>
		<param name="format">A format specification.</param>
		<param name="provider">An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
		<returns>
			<para>The string representation of the value
      of this instance as specified by <paramref name="format"/> and <paramref name="provider"/>.</para>
		</returns>
		<remarks>
			<para>The return value can be <see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>, <see cref="System.Globalization.NumberFormatInfo.NaNSymbol"/>, or a string of the form:</para>
			<para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</para>
			<para>Optional items are framed in square brackets ([ and ]). Items containing the term "digits" consist of a series of numeric characters ranging from 0 to 9. </para>
			<list type="termdef">
				<item>
					<term> sign</term>
					<description>A negative sign or positive sign
         symbol.</description>
				</item>
				<item>
					<term> integral-digits</term>
					<description>
						<para>A series of digits specifying the integral part of the number.
            Integral-digits can be absent if there are
            fractional-digits.</para></description>
				</item>
				<item>
					<term> '.' </term>
					<description>A culture-specific decimal point
            symbol.</description>
				</item>
				<item>
					<term> fractional-digits</term>
					<description>A series of digits specifying the fractional
            part of the number.</description>
				</item>
				<item>
					<term> 'e' </term>
					<description>A lowercase character 'e', indicating
            exponential (scientific) notation.</description>
				</item>
				<item>
					<term> exponential-digits</term>
					<description>A series of digits specifying an
            exponent.</description>
				</item>
			</list>
			<para> Some examples of the return value are "100", "-123,456,789", "123.45+e6", "500", "3.1416", "600", "-0.123", and "-Infinity". </para>
			<para>If <paramref name="format"/> is <see langword="null"/> or an empty string, the return
   value for this instance is formatted with the general format specifier ("G").</para>
			<para>By default, the return value only contains 7 digits of precision although a
   maximum of 9 digits is maintained internally. If the value of this instance has
   greater than 7 digits, <see langword="ToString"/> returns
<see cref="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol"/> or 
<see cref="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol"/>
instead of the expected number. If you require more precision, specify
<paramref name="format"/> with the "G9" format specification, which always returns 9 digits 
of precision, or "R", which returns 7 digits if the number can be represented
with that precision or 9 digits if the number can only be represented with
maximum precision.</para>
			<para>The <paramref name="provider"/> parameter is an
<see cref="System.IFormatProvider"/> that obtains
a <see cref="System.Globalization.NumberFormatInfo"/> that supplies culture-specific
format information. If <paramref name="provider"/> is <see langword="null"/>,
the return value is formatted with <see cref="System.Globalization.NumberFormatInfo"/> data for the current
culture.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso topic="cpConNumericFormatStrings"/>
		<seealso cref="System.Single.Parse"/>
		<seealso cref="System.String"/>
	</doc>
</docs>
