<docs>
	<doc for="ValueType">
		<summary>
			<para>Provides the base class for value types.</para>
		</summary>
		<remarks>
			<para><see langword="ValueType"/> overrides the virtual methods from <see cref="System.Object"/> with more
   appropriate implementations for value types. See also <see cref="System.Enum"/>, which inherits
   from <see langword="ValueType"/>.</para>
			<para>Data types are separated into value types and reference
   types. Value types are either stack-allocated or allocated inline in a
   structure. Reference types are heap-allocated. Both reference and value types
   are derived from the ultimate base class <see cref="System.Object"/>. In cases where it is necessary for a value
   type to behave like an object, a wrapper that makes the value type look like a
   reference object is allocated on the heap, and the value type's value is copied into
   it. The wrapper is marked so the system knows that it contains a value type.
   This process is known as boxing, and the reverse process is known as unboxing.
   Boxing and unboxing allow any type to be treated as an object.</para>
		</remarks>
		<seealso cref="System.Object"/>
		<seealso cref="System.Enum"/>
	</doc>
	<doc for="ValueType.ToString">
		<summary>
			<para>Returns the fully qualified type name of this instance.</para>
		</summary>
		<returns>
			<para>A <see cref="System.String"/>
containing a fully qualified type name.</para>
		</returns>
	</doc>
	<doc for="ValueType.Equals">
		<summary>
			<para>Indicates whether this instance and a specified object are equal.</para>
		</summary>
		<param name=" obj">Another object to compare to.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
   represent the same value; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The default implementation of the <see cref="System.ValueType.Equals"/> method uses reflection to compare the corresponding fields of
<paramref name="obj"/> and this instance. Override 
   the <see cref="System.ValueType.Equals"/>
   method for a particular type to improve the performance of
   the method and more closely represent the concept of equality for the type.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how the <see cref="System.ValueType.Equals"/> method can
   be overridden by a derived value type.</para>
			<codelink SampleID="ValueType.Equals Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ValueType.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer that is the hash code for this instance.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.ValueType.GetHashCode"/> method applies to types derived from <see cref="System.ValueType"/>. One or more fields of the 
   derived type is used to calculate the return value. If one or more of those
   fields contains a mutable value, the return value might be unpredictable, and
   unsuitable for use as a key in a hash table. In that case, consider writing your
   own implementation of <see cref="System.ValueType.GetHashCode"/>
   that more closely represents
   the concept of a hash code for the type.</para>
			<para>For more information, see <see cref="System.Object.GetHashCode" qualify="true"/>,
and <see cref="System.Collections.Hashtable" qualify="true"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how the <see cref="System.ValueType.GetHashCode"/> method can be overridden by a derived value type. </para>
			<codelink SampleID="ValueType.Equals Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
