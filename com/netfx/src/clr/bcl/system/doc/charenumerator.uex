<docs>
	<doc for="CharEnumerator.Reset">
		<summary>
			<para> Initializes the index to a position logically before the
 first character of the enumerated string.</para>
		</summary>
		<remarks>
			<para>The index is set to the invalid
 state.</para>
		</remarks>
	</doc><doc for="CharEnumerator.IEnumerator.Current">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CharEnumerator.Clone">
		<summary>
			<para>Creates a copy of this instance.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Object"/> that is a copy of this instance.</para>
		</returns>
		<remarks>
			<para>The return value is a copy of this instance of <see cref="System.CharEnumerator"/>
and its current state. This is useful for saving your state
while iterating through a <see cref="System.String"/> object.</para>
			<para>For example, suppose your application uses an original
   instance of <see cref="System.CharEnumerator"/> to iterate through each character in a <see cref="System.String"/>. When some unique character
   is encountered, your application pauses processing and invokes the <see cref="System.CharEnumerator.Clone"/>
   method. In effect, this saves the <see cref="System.CharEnumerator"/> object's index in
   the <see cref="System.String"/>. </para>
			<para>Your application uses the clone to navigate to another part of the
<see langword="String"/> to perform some auxiliary processing. 
   The side-effect of this navigation is the clone loses track of
   the position where processing stopped. However, when the auxiliary processing is
   complete, your application discards the clone and uses the original <see cref="System.CharEnumerator"/> instance
   to resume working on the <see cref="System.String"/> where the original processing stopped.</para>
			<note type="note">
   This method is implemented to support
   the <see cref="System.ICloneable"/>
   interface.
</note>
		</remarks>
	</doc>
	<doc for="CharEnumerator.MoveNext">
		<summary>
			<para> Increments the index to the next
      character of the enumerated string.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the index is successfully incremented and within the enumerated string; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> The <see cref="System.CharEnumerator.MoveNext"/>
method increments the index by one. Call <see cref="System.CharEnumerator.MoveNext"/> after calling <see cref="System.String.GetEnumerator"/> or
<see cref="System.CharEnumerator.Reset"/> to increment the current character
position to the first character in the enumerated string. Check that the return
value is <see langword="true"/> to determine that the current
character position
is valid.</para>
			<para>If the index is already beyond the last character of the enumerated string,
   the index is not changed and <see langword="false"/> is returned.</para>
			<para> Notice that if the enumerated string is empty (""), the state of
   the <see cref="System.CharEnumerator"/> is always invalid.
   This is because the internal index for the <see cref="System.CharEnumerator"/> is initially before the
   first character of the enumerated string and is therefore invalid. <see cref="System.CharEnumerator.MoveNext"/> logically sets the index after the last
   (nonexistent) character of the enumerated
   string which is also invalid.</para>
		</remarks>
	</doc><doc for="CharEnumerator">
		<summary>
			<para> Supports iterating over a <see cref="System.String"/> and reading its individual
   characters.</para>
		</summary>
		<remarks>
			<para> A <see cref="System.CharEnumerator"/> provides read-only
   access to the characters in a referenced <see cref="System.String"/> object. For example, the
<see langword="foreach"/> statement of the Microsoft Visual Basic 
   and C# programming languages, which iterates
   through the elements of a collection, retrieves a <see cref="System.CharEnumerator"/> from an
   instance of <see cref="System.String"/> in order to iterate through the characters in
   that instance.</para>
			<para> There is no public constructor for <see cref="System.CharEnumerator"/>. Instead, call a <see cref="System.String"/> object's <see cref="System.String.GetEnumerator"/> method to obtain
a <see cref="System.CharEnumerator"/> that is initialized to reference
the string.</para>
			<para> A <see cref="System.CharEnumerator"/> maintains an internal index to the characters in the
string the <see cref="System.CharEnumerator"/> references. The state
of the index is invalid when it references a character position
logically before the first character or after the last character in the string, and
valid when it references a character within the string. The index is initialized
to a position logically before the first character,
and is set to a position after the last character when the iteration
is complete. An exception is thrown if you attempt to
access a character while the index is invalid. </para>
			<para> The <see cref="System.CharEnumerator.MoveNext"/> method
increments the index by one, so the first and subsequent characters
are accessed in turn. The <see cref="System.CharEnumerator.Reset"/>
method sets the
index to a position logically
before the first character. The <see cref="System.CharEnumerator.Current"/> property
retrieves the character currently referenced by
index. The <see cref="System.CharEnumerator.Clone"/> method creates a copy of the <see cref="System.CharEnumerator"/>.</para>
			<note type="note">
   Several independent instances
   of <see cref="System.CharEnumerator"/> across one or more threads can have access to a single
   instance of <see cref="System.String"/>. This class is implemented to support the <see cref="System.Collections.IEnumerator"/>
   interface. For more information regarding the use of an enumerator, see
   the <see cref="System.Collections.IEnumerator"/>
   
   topic.
</note>
		</remarks>
		<seealso cref="System.String"/>
		<seealso cref="System.Collections.IEnumerator"/>
		<seealso cref="System.Collections.IEnumerable"/>
		<seealso cref="System.Collections.ICollection"/>
	</doc><doc for="CharEnumerator.Current">
		<summary>
			<para> Gets the character in the enumerated string currently
      indexed by this instance.</para>
		</summary>
		<value>
			<para> The Unicode character referenced by the index, if the index
      is valid.</para>
		</value>
		<exception cref="System.InvalidOperationException"><para>The index is invalid; that is, it is before the first or after the last character of the enumerated string.</para></exception>
		<remarks>
			<para> This property should only be invoked when the index maintained
      by this instance is valid, otherwise, an exception is
      thrown. The index is always invalid for an empty string ("").</para>
			<para> The index is invalid after the <see cref="System.String.GetEnumerator" qualify="true"/> or <see cref="System.CharEnumerator.Reset"/> method is called. After either of these
   methods is called, invoke the <see cref="System.CharEnumerator.MoveNext"/>
   method to adjust the index to the first character in the enumerated string. The
   index is valid whenever the <see cref="System.CharEnumerator.MoveNext"/> method returns <see langword="true"/>.</para>
			<para><see cref="System.CharEnumerator.Current"/>
does not move the index, and consecutive
calls to <see cref="System.CharEnumerator.Current"/> return the same character until <see cref="System.CharEnumerator.MoveNext"/>, <see cref="System.CharEnumerator.Reset"/>, or <see cref="System.String.GetEnumerator" qualify="true"/> is called.</para>
		</remarks>
	</doc></docs>
