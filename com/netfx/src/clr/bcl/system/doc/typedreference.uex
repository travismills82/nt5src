<docs>
	<doc for="TypedReference">
		<summary>
			<para>Describes objects that contain both a managed pointer to
      a location and a runtime representation of the type that may be stored at that
      location.</para>
		</summary>
		<remarks>
			<para>A typed reference is a type/value combination used 
      for varargs and other support. <see langword="TypedReference "/> is a built-in value type that
      can be used for parameters and local variables.</para>
			<para>Arrays of <see langword="TypedReference "/>objects cannot
   be created. For example, the following call is invalid:</para>
			<code lang="C#">Assembly.Load("mscorlib.dll").GetType("System.TypedReference[]");
</code>
		</remarks>
	</doc>
	<doc for="TypedReference.GetHashCode">
		<summary>
			<para>
       Returns the hash code of this object.
    </para>
		</summary>
		<returns>
    The hash code of this object.
 </returns>
	</doc>
	<doc for="TypedReference.GetTargetType">
		<summary>
			<para>Returns the type of the target of the specified 
   <see langword="TypedReference"/> 
   .</para>
		</summary>
		<param name="value">The value whose target's type is to be returned. </param>
		<returns>
			<para>The type of the target of the specified 
   <see langword="TypedReference"/> 
   .</para>
		</returns>
	</doc>
	<doc for="TypedReference.TargetTypeToken">
		<summary>
			<para>Returns the internal metadata type handle for the 
      specified <see langword="TypedReference"/>
      .</para>
		</summary>
		<param name="value">The <see langword="TypedReference"/> for which the type handle is requested. </param>
		<returns>
			<para>The internal metadata type handle for the specified 
   <see langword="TypedReference"/> 
   .</para>
		</returns>
	</doc>
	<doc for="TypedReference.SetTypedReference">
		<summary>
			<para> Converts the specified value to a 
   <see langword="TypedReference"/> 
   .
   </para>
		</summary>
		<param name="target">The target of the conversion. </param>
		<param name=" value">The value to be converted. </param>
		<returns>
   This method assigns <paramref name="value "/>to <paramref name="target"/>. A change type of
<paramref name="value"/> converts it to the type of the <see langword="TypedReference"/>. 
   The <see cref="System.Convert.ChangeType" qualify="true"/> method does the conversion.
</returns>
		<exception cref="System.ArgumentNullException"><paramref name="value "/>is <see langword="null"/>. </exception>
		<exception cref="System.InvalidCastException">The requested conversion is not possible.</exception>
	</doc>
	<doc for="TypedReference.Equals">
		<summary>
			<para> Checks if this object is equal to the
      specified object.
      </para>
		</summary>
		<param name="o">The object with which to compare the current object.</param>
		<returns>
			<para><see langword="true "/>if this object is equal to the
   specified object; otherwise, <see langword="false"/>
   .</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not implemented. </exception>
	</doc><doc for="TypedReference.ToObject">
		<summary>
			<para>Converts the specified <see langword="TypedReference"/> to
   an <see langword="Object"/>
   .</para>
		</summary>
		<param name="value">The <see langword="TypedReference"/> to be converted. </param>
		<returns>
			<para>An Object converted from a TypedReference.</para>
		</returns>
		<remarks>
			<para>This might be a boxing operation.</para>
		</remarks>
	</doc><doc for="TypedReference.MakeTypedReference">
		<summary>
			<para> Makes a <see langword="TypedReference"/> for a field identified by a specified object and list of field
   descriptions.
   </para>
		</summary>
		<param name="target">An object that contains the field described by the first element of <paramref name="flds"/>. </param>
		<param name=" flds"><para>A list of field descriptions where each element describes a field that contains the field described by the succeeding element. Each described field must be a value type. </para></param>
		<returns>
			<para>A <see cref="System.TypedReference"/> for the field described by the last element of
<paramref name="flds"/>. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para><paramref name="target "/>or <paramref name="flds "/>is <see langword="null"/>. </para>
			<para>-or-</para>
			<para>An element of <paramref name="flds"/> is <see langword="null"/>.</para></exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="flds "/>array has no elements. </para>
			<para>-or-</para>
			<para>An element of <paramref name="flds"/> is not a <see langword="RuntimeFieldInfo"/>.</para>
			<para>-or-</para>
			<para>The <see cref="System.Reflection.FieldInfo.IsInitOnly"/> or <see cref="System.Reflection.FieldInfo.IsStatic"/> property of an element of <paramref name="flds"/> is <see langword="true"/>.</para></exception>
		<exception cref="System.MissingMemberException"><para>Parameter <paramref name="target"/> does not contain the field described by the first element of <paramref name="flds"/>, or an element of <paramref name="flds"/> describes a field that is not contained in the field described by the succeeding element of <paramref name="flds"/>.</para>
			<para>-or-</para>
			<para> The field described by an element of <paramref name="flds"/> is not a value type.</para></exception>
		<remarks>
			<para>The <see cref="System.TypedReference.MakeTypedReference"/> method returns a typed reference to some terminal field, 
   where the <paramref name="target"/> parameter contains the field described by the first
   element of <paramref name="flds"/>, the field
   described by the first element of <paramref name="flds"/> contains the field
   described by the second element of <paramref name="flds"/>, and so on until the terminal
   field is reached.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">for operation on type members that are not visible. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/></permission>
	</doc>
</docs>
