<docs>
	<doc for="SpecialFolder.CommonApplicationData">
		<summary>
			<para> The directory that serves as a 
      common repository for application-specific data that is used by all users.</para>
		</summary>
	</doc><doc for="SpecialFolder.Favorites">
		<summary>
			<para> The directory that serves as a 
      common repository for the user's favorite items.</para>
		</summary>
	</doc><doc for="SpecialFolder.History">
		<summary>
			<para> The directory that serves as a 
      common repository for Internet history items.</para>
		</summary>
	</doc><doc for="SpecialFolder.InternetCache">
		<summary>
			<para> The directory that serves as 
      a common repository for temporary Internet files.</para>
		</summary>
	</doc><doc for="SpecialFolder.Programs">
		<summary>
			<para> The directory that contains the 
      user's program groups. </para>
		</summary>
	</doc><doc for="SpecialFolder.Recent">
		<summary>
			<para> The directory that contains the 
      user's most recently used documents. </para>
		</summary>
	</doc><doc for="SpecialFolder.StartMenu">
		<summary>
			<para> The directory that contains 
      the Start menu items.</para>
		</summary>
	</doc><doc for="SpecialFolder.System">
		<summary>
			<para> The System directory.</para>
		</summary>
	</doc><doc for="SpecialFolder.Templates">
		<summary>
			<para> The directory that serves as 
      a common repository for document templates.</para>
		</summary>
	</doc><doc for="SpecialFolder.Personal">
		<summary>
			<para> The directory that serves as 
      a common repository for documents.</para>
		</summary>
	</doc><doc for="SpecialFolder.ProgramFiles">
		<summary>
			<para> The program files directory.</para>
		</summary>
	</doc><doc for="SpecialFolder.CommonProgramFiles">
		<summary>
			<para> The directory for components that are shared 
      across applications.</para>
		</summary>
	</doc><doc for="SpecialFolder.LocalApplicationData">
		<summary>
			<para> The directory that serves as
      a common repository for application-specific data that is used by the current, non-roaming user.</para>
		</summary>
	</doc><doc for="SpecialFolder.ApplicationData">
		<summary>
			<para> The directory that serves as a
      common repository for application-specific data for the current roaming user.</para>
			<para>A roaming user works on more than one computer on a
      network. A roaming user's profile is kept on a server on the network and is
      loaded onto a system when the user logs on.</para>
		</summary>
	</doc><doc for="SpecialFolder.SendTo">
		<summary>
			<para> The directory that contains the
      Send To menu items.</para>
		</summary>
	</doc><doc for="SpecialFolder.Startup">
		<summary>
			<para> The directory that corresponds to the user's Startup program group.</para>
			<para> The system starts these programs whenever a user logs on or
      starts Windows NT or later, or starts Windows 98.</para>
		</summary>
	</doc><doc for="SpecialFolder.DesktopDirectory">
		<summary>
			<para> The directory
      used to physically store file objects on the desktop.</para>
			<para> Do not confuse this directory with the desktop folder itself, which
      is a virtual folder.</para>
		</summary>
	</doc><doc for="SpecialFolder.Cookies">
		<summary>
			<para> The directory that serves as a
 common repository for Internet cookies.</para>
		</summary>
	</doc>
	<doc for="Environment.Exit">
		<summary>
			<para>Terminates this process and gives the underlying operating system the specified exit code.</para>
		</summary>
		<param name="exitCode">Exit code to be given to the operating system.</param>
		<exception cref="System.Security.SecurityException">The caller does not have sufficient security permission to perform this function.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="Environment.GetEnvironmentVariable">
		<summary>
			<para>Returns the value of
      the specified environment variable.</para>
		</summary>
		<param name="variable">A string containing the name of an environment variable.</param>
		<returns>
			<para>A string containing the value of <paramref name="variable"/>, or <see langword="null"/> if <paramref name="variable"/> is not found.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="variable"/> is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have <see cref="System.Security.Permissions.EnvironmentPermission"/> with <see cref="System.Security.Permissions.EnvironmentPermissionAccess.Read"/> access.</exception>
		<remarks>
			<para>Environment variable names are case-insensitive.</para>
		</remarks>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for the ability to access <paramref name="variable"/>. Associated enumeration: <see cref="System.Security.Permissions.EnvironmentPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates the <see cref="System.Environment.GetEnvironmentVariable"/> method.</para>
			<codelink SampleID="System.Environment" SnippetID="4"/>
		</example>
		<seealso cref="System.Environment.GetEnvironmentVariables"/>
	</doc>
	<doc for="SpecialFolder.Desktop">
		<summary>
			<para>The logical Desktop rather than the physical file system location.</para>
		</summary>
	</doc>
	<doc for="SpecialFolder.MyComputer">
		<summary>
			<para>The "My Computer" folder.</para>
		</summary>
	</doc>
	<doc for="SpecialFolder.MyMusic">
		<summary>
			<para> The "My Music" folder.</para>
		</summary>
	</doc>
	<doc for="SpecialFolder.MyPictures">
		<summary>
			<para> The "My Pictures" folder.</para>
		</summary>
	</doc>
	<doc for="SpecialFolder">
		<summary>
			<para> Specifies enumerated constants used to retrieve directory paths
      to system special folders.</para>
		</summary>
		<remarks>
			<para>The system special folders are folders such as Program Files, Programs,
      System, or Startup, which contain common information. Special folders are set by
      default by the system, or explicitly by the user, when installing a version of
      Windows.</para>
			<para>The <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)"/> method uses these enumerated constants to
   designate the special folder path to retrieve.</para>
			<para> For more information about special folders, see the
   CSIDL Values topic at http://msdn.microsoft.com/library/en-us/shellcc/platform/Shell/reference/enums/csidl.asp.</para>
		</remarks>
	</doc>
	<doc for="Environment.CurrentDirectory">
		<summary>
			<para>Gets and sets the fully qualified path of the current directory;
      that is, the directory from which this process starts.</para>
		</summary>
		<value>
			<para>A string
      containing a directory path.</para>
		</value>
		<exception cref="System.ArgumentException">Attempted to set to an empty string ("").</exception>
		<exception cref="System.ArgumentNullException">Attempted to set to <see langword="null"/>.</exception>
		<exception cref="System.IO.IOException">An I/O error occurred.</exception>
		<exception cref="System.IO.FileNotFoundException"> Attempted to set a local path that cannot be found.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">Attempted to set a universal naming convention (UNC) path that cannot be found.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the appropriate permission.</exception>
		<remarks>
			<para>By definition, if this process starts in the root
      directory of a local or network drive, the value of this property is
      the drive name followed by a trailing slash (for example, "C:\"). If this
      process starts in a subdirectory, the value of this property is the
      drive and subdirectory path, without a trailing slash (for example,
      "C:\mySubDirectory").</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for writing to files or directories. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<para>The following code example demonstrates setting the <see cref="System.Environment.CurrentDirectory"/> property.</para>
			<codelink SampleID="System.Environment" SnippetID="4"/>
		</example>
	</doc>
	<doc for="Environment">
		<summary>
			<para> Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>Use the <see cref="System.Environment"/> class to retrieve information such as command line arguments,
   the exit code, environment variable settings, contents of the call stack,
   time since last system boot, and the version of the common language runtime.</para>
		</remarks>
		<example>
			<codelink SampleID="environment.class" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.ExitCode">
		<summary>
			<para>Gets or sets the exit code of the process.</para>
		</summary>
		<value>
			<para>A 32-bit signed integer containing the exit code. The default value is zero.</para>
		</value>
		<remarks>
			<para>This property can be used to return a success code from
      an application. For example, it can be used to control the execution of a set of applications
      invoked in a script. If the value of this property is not set by
      an application, zero is returned.</para>
			<para lang="C++">The system exit code is set to the return value of the function,
   <see langword="main"/>, or zero if <see langword="main"/> returns
   <see langword="void"/>, regardless of whether the user sets this property.</para>
		</remarks>
		<example>
			<codelink SampleID="environment.exitcode" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.CommandLine">
		<summary>
			<para> Gets the command line for this process.</para>
		</summary>
		<value>
			<para>A string
      containing command line arguments.</para>
		</value>
		<remarks>
			<para>This property provides access to the program name and any arguments specified
      on the command line when the current process was started.</para>
			<para>The program name can, but is not required to, include path information. Use
      the <see cref="System.Environment.GetCommandLineArgs"/> method to retrieve the command line information parsed
      and stored in an array of strings. </para>
		</remarks>
		<platnote platform="NT4, Win2K">The name of the executable file does not include the path.
</platnote>
		<platnote platform="Win98, WinMe">The name of the executable file includes the path. Long file names (non-8dot3 names) can be shortened to their 8dot3 representation.
</platnote>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for the ability to access the "Path" environment variable. Associated enumeration: <see cref="System.Security.Permissions.EnvironmentPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<codelink SampleID="environment.commandline" SnippetID="1"/>
		</example>
		<seealso cref="System.Environment.GetCommandLineArgs"/>
	</doc>
	<doc for="Environment.HasShutdownStarted">
		<summary>
			<para> Indicates whether the common language runtime is
      shutting down or the current application domain
      is unloading.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the common
   language runtime is shutting down or the current <see cref="System.AppDomain"/> is unloading; otherwise,
<see langword="false"/>.</para>
			<para>The current application domain is the <see cref="System.AppDomain"/> that contains
the object that is calling <see cref="System.Environment.HasShutdownStarted"/>.</para>
		</value>
		<remarks>
			<para>The finalization method for an object provides you an opportunity to perform
      any necessary cleanup operations before the object is garbage collected. After
      finalization, the object is accessible but in an invalid state and therefore
      unusable. Eventually, garbage collection completes and reclaims the object. </para>
			<para>An object's finalization method is called in one of the
      following situations: during garbage collection, when the application domain
      that contains the object is unloaded, or when the common
      language runtime is shutting down. </para>
			<para> While executing in your finalization method, you might want to access another object that is referenced
      by a static field and has a finalization method. However, you cannot
      reliably do so because the accessed object
      might already have been finalized. </para>
			<note type="note">
      
      An exception to this rule is the <see cref="System.Console"/> class, which contains static
      fields that reference stream objects, but is implemented specially so you can
      always write to the system console, even during domain unloading or system
      shutdown.
      
   </note>
			<para> Use this method in an object's finalization method to determine whether the common
      language runtime is shutting down or the application domain is unloading.
      If that is the case, you cannot reliably access any object that has a finalization method and is
      referenced by a static field. </para>
		</remarks>
		<example>
			<codelink SampleID="environment.hasshutdownstarted" SnippetID="1"/>
		</example>
		<seealso cref="System.AppDomain.IsFinalizingForUnload" qualify="true"/>
	</doc>
	<doc for="Environment.MachineName">
		<summary>
			<para>Gets the NetBIOS name of this local computer.</para>
		</summary>
		<value>
			<para>A string
      containing the name of this computer.</para>
		</value>
		<exception cref="System.InvalidOperationException">The name of this computer cannot be obtained.</exception>
		<remarks>
			<para>The name of this computer is established at system
      startup when the name is read from the registry. If this computer is a node in a
      cluster, the name of the node is returned.</para>
		</remarks>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for full access to the resource protected by this permission. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<codelink SampleID="environment.machinename" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.NewLine">
		<summary>
			<para> Gets the newline string defined for this environment.</para>
		</summary>
		<value>
			<para> A string containing "\r\n".</para>
		</value>
		<remarks>
			<para>The property value is a constant customized
      specifically for the current platform.</para>
			<para>This value is automatically appended to text when using
   <see langword="WriteLine"/> methods, such as <see cref="System.Console.WriteLine" qualify="true"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="environment.newline" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.OSVersion">
		<summary>
			<para>Gets an <see cref="System.OperatingSystem"/> object that contains the current platform identifier and version number.</para>
		</summary>
		<value>
			<para> An <see cref="System.OperatingSystem"/> object.</para>
		</value>
		<exception cref="System.ExecutionEngineException"><para>This property was unable to obtain the system version.</para>
			<para>-or-</para>
			<para>The platform identifier is not a member of <see cref="System.PlatformID"/>.</para></exception>
		<example>
			<codelink SampleID="environment.osversion" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.StackTrace">
		<summary>
			<para> Gets current stack trace information.</para>
		</summary>
		<value>
			<para>A string containing stack
      trace information. This value can be <see cref="System.String.Empty" qualify="true"/>.</para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException">The requested stack trace information is out of range.</exception>
		<remarks>
			<para> The <see cref="System.Environment.StackTrace"/> property lists method calls
   in reverse chronological order, that is, the most recent method call is
   described first, and one line of stack trace information is listed for each method
   call on the stack. However, the <see cref="System.Environment.StackTrace"/>
   property might not report as many method calls as expected due to
   code transformations that occur during optimization.</para>
			<para> The stack
   trace information for each
   method call is formatted as follows:</para>
			<para> "at
<paramref name="FullClassName"/>.<paramref name="MethodName"/>(<paramref name="MethodParams"/>) in 
<paramref name="FileName"/> :line <paramref name="LineNumber"/>"
   </para>
The literal "at" is preceded by
three spaces, and the literals "in" and ":line" are omitted if debug symbols
are not available. The placeholders,
<paramref name="FullClassName"/>, <paramref name="MethodName"/>,
<paramref name="MethodParms"/>, <paramref name="FileName"/>, and <paramref name="LineNumber"/>, 
are replaced by actual values defined as follows:
<list type="termdef">
				<item>
					<term> FullClassName</term>
					<description>The full name of the class, including the
         namespace.</description>
				</item>
				<item>
					<term> MethodName</term>
					<description>
						<para>The name of the method.</para></description>
				</item>
				<item>
					<term> MethodParms</term>
					<description>The list of parameter type/name pairs. Each pair is separated by a
            comma (","). This information is omitted if <paramref name="MethodName"/> takes zero
            parameters.</description>
				</item>
				<item>
					<term> FileName</term>
					<description>
						<para>The name of the source file where the <paramref name="MethodName"/> method is
            declared. This information is omitted if debug symbols are not
            available.</para></description>
				</item>
				<item>
					<term> LineNumber</term>
					<description>
						<para>The number of the line in <paramref name="FileName"/> that contains the source
            code from <paramref name="MethodName"/> for the instruction that is on the call
            stack. This information is omitted if debug symbols are not
            available.</para></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for full access to the resource protected by the permission. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<codelink SampleID="environment.stacktrace" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.SystemDirectory">
		<summary>
			<para>Gets the fully qualified path of the system directory.</para>
		</summary>
		<value>
			<para>A string
      containing a directory path.</para>
		</value>
		<remarks>
			<para>An example of the value returned is the string
      "C:\WinNT\System32".</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for permission to read from a file or directory. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<codelink SampleID="environment.systemdirectory" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.TickCount">
		<summary>
			<para> Gets the number of milliseconds elapsed since the system
      started.</para>
		</summary>
		<value>
			<para>A 32-bit signed integer containing the amount of time in
      milliseconds that has passed since the last time the computer was started.</para>
		</value>
		<remarks>
			<para> The value of this property is derived from the system timer and
      is stored as a 32-bit signed integer. Therefore, the
      elapsed time will wrap around to zero if the system is run continuously for 24.9
      days.</para>
			<para> The resolution of the <see langword="TickCount "/>
property cannot be less than 500
milliseconds.</para>
			<para> The <see langword="TickCount"/> property handles an
overflow condition by resetting its value to zero. The minimum value returned by
<see langword="TickCount"/> 
is
0.</para>
			<para><see langword="TickCount"/> is different from the <see cref="System.DateTime.Ticks"/> property,
which is the number of 100-nanosecond intervals that have elapsed since
1/1/0001, 12:00am.</para>
			<para>Use the <see cref="System.DateTime.Now" qualify="true"/> property to obtain the current local date and time on
this computer.</para>
		</remarks>
		<example>
			<codelink SampleID="environment.tickcount" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.UserDomainName">
		<summary>
			<para> Gets the network domain name associated with the current user.</para>
		</summary>
		<value>
			<para>The network domain name of the host computer.</para>
		</value>
		<exception cref="System.PlatformNotSupportedException">The current operating system does not support retrieving the network domain name.</exception>
		<exception cref="System.InvalidOperationException">The network domain name cannot be retrieved.</exception>
		<remarks>
			<para>The value of this property is typically the host computer
      name, but can depend upon the application solution being deployed. The current
      user is the name specified in <see cref="System.Environment.UserName"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for reading an environment variable. Associated enumeration: <see cref="System.Security.Permissions.EnvironmentPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<codelink SampleID="environment.userdomainname" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.UserInteractive">
		<summary>
			<para>Gets a value indicating whether the current process is
      running in user interactive mode.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the current process is running in user interactive
   mode; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This will be <see langword="false"/> only when running as a Service Process or
   from inside a Web application. When this property is <see langword="false"/>, you
   should not display any modal dialogs or message boxes, because there is no
   graphical user interface for the user to interact with.</para>
		</remarks>
		<example>
			<codelink SampleID="Environment.UserInteractive" SnippetID="1"/>
		</example>
		<seealso cref="T:System.Windows.Forms.SystemInformation"/>
	</doc>
	<doc for="Environment.UserName">
		<summary>
			<para>Gets the user name of the person who started the current thread.</para>
		</summary>
		<value>
			<para>The name of the person logged on to the system who started the current
      thread. </para>
		</value>
		<remarks>
			<para>This property can be used to identify the current user to the system and
      application for security or access purposes. It can also be used to customize a
      particular application for each user.</para>
		</remarks>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for the ability to obtain the user name. Associated enumeration: <see cref="System.Security.Permissions.EnvironmentPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<codelink SampleID="Environment.UserName" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.Version">
		<summary>
			<para> Gets a <see cref="System.Version"/>
object that describes the major, minor, build, and revision numbers of the
common language runtime.</para>
		</summary>
		<value>
			<para>A <see cref="System.Version"/> object.</para>
		</value>
		<example>
			<codelink SampleID="Environment.Version" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.ExpandEnvironmentVariables">
		<summary>
			<para>Replaces the name of each environment variable embedded
      in the specified string with the string equivalent
      of the value of the variable, then returns the resulting string.</para>
		</summary>
		<param name="name">A string containing the names of zero or more environment variables. Each environment variable is quoted with the percent sign character (%).</param>
		<returns>
			<para>A string
      with each environment variable replaced by its value.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>COM interop is used to retrieve the environment variables from the operating system. If the environment variables cannot be retrieved
      due to a COM error, the HRESULT that explains the cause of the failure
      is used to generate one of several possible exceptions; that is, the exception depends
      on the HRESULT. For more information about how the HRESULT is
      processed, see the Remarks section of the <see cref="System.Runtime.InteropServices.Marshal.ThrowExceptionForHR" qualify="true"/> method.</para>
			<para> Replacement
      only occurs for environment variables that are set. For example, suppose <paramref name="name"/> is "MyENV = %MyENV%".
      If the environment variable, MyENV, is set to 42, this method returns "MyENV =
      42". If MyENV is not
      set, no change occurs; this method returns "MyENV =
      %MyENV%".</para>
			<para>The size of the return value is limited to 32K on Windows NT 4.0 and earlier,
      and Windows 2000 and later. There is no size restriction on Windows 98 and
      Windows Me.</para>
		</remarks>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for the ability to access the environment variables in <paramref name="name"/>. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<codelink SampleID="Environment.ExpandEnvironmentVariables" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.WorkingSet">
		<summary>
			<para> Gets the amount of physical memory mapped to
      the process context.</para>
		</summary>
		<value>
			<para>A 64-bit signed integer containing the number of bytes of physical memory mapped to the process context.</para>
		</value>
		<platnote platform="NT4, Win2K">This property behaves as described.
</platnote>
		<platnote platform="Win98, WinMe">This property always returns zero.
</platnote>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for full access to the resource protected by this permission. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<codelink SampleID="Environment.WorkingSet" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.GetCommandLineArgs">
		<summary>
			<para>Returns a string
      array containing the command line arguments for the current
      process.</para>
		</summary>
		<returns>
			<para> An array of string where each element contains a command
      line argument. The first element is the executable file name, and the following zero or more elements
      contain the remaining command line arguments.</para>
		</returns>
		<exception cref="System.NotSupportedException">The system does not support command line arguments.</exception>
		<remarks>
			<para>The first element in the array contains the file name of the
      executing program. If the file name is not available, the first element is
      equal to <see cref="System.String.Empty" qualify="true"/>. The remaining elements contain any additional tokens
      entered on the command line.</para>
			<para>The program file name can, but is not required to,
      include path information.</para>
			<para>To obtain the command line as a single string, use the <see cref="System.Environment.CommandLine"/>
property.</para>
		</remarks>
		<platnote platform="NT4, Win2K">The name of the executable file does not include the path.
</platnote>
		<platnote platform="Win98, WinMe">The name of the executable file includes the path. Long file names (non-8dot3 names) can be shortened to their 8dot3 representation.
</platnote>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for the ability to access the "Path" environment variable. Associated enumeration: <see cref="System.Security.Permissions.EnvironmentPermissionAccess.Read" qualify="true"/></permission>
		<example>
			<codelink SampleID="Environment.GetCommandLineArgs" SnippetID="1"/>
		</example>
		<seealso cref="System.Environment.CommandLine"/>
	</doc>
	<doc for="Environment.GetEnvironmentVariables">
		<summary>
			<para> Returns
      all environment variables and their values.</para>
		</summary>
		<returns>
			<para> An <see cref="System.Collections.IDictionary"/>, containing all environment variables and
   their values, or <see langword="null"/> if
   the system does not
   support environment variables.</para>
		</returns>
		<remarks>
			<para>The names and settings for the environment variables are stored in the
      returned <see cref="System.Collections.IDictionary"/> as keys and values, respectively.</para>
		</remarks>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for full access to the resource protected by this permission. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<codelink SampleID="Environment.GetEnvironmentVariables" SnippetID="1"/>
		</example>
		<seealso cref="System.Environment.GetEnvironmentVariable"/>
	</doc>
	<doc for="Environment.GetFolderPath">
		<summary>
			<para>Gets the path to the system special folder identified by
      the specified enumeration.</para>
		</summary>
		<param name="folder">An enumerated constant that identifies a system special folder.</param>
		<returns>
			<para>The path to the specified system special folder, if that folder
      physically exists on your computer; otherwise, the empty string ("").</para>
			<para>A folder will not physically exist if the operating system did not create it,
      the existing folder was deleted, or the folder is a virtual directory, such as
      My Computer, which does not correspond to a physical path.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="folder"/> is not a member of <see cref="System.Environment.SpecialFolder" qualify="true"/>.</exception>
		<remarks>
			<para>This method retrieves the path to a system special
      folder, such as Program Files, Programs, System, or Startup, which can be used to access common information.
      Special folders are set by default by the system, or explicitly by the user,
      when installing a version of Windows.</para>
			<para> The <paramref name="folder"/>
parameter designates the special
folder to retrieve and must be one of the values in the
<see cref="System.Environment.SpecialFolder"/> enumeration;
any other value throws an exception.</para>
			<para> For more information about special folders, see the CSIDL Values
   topic at http://msdn.microsoft.com/library/en-us/shellcc/platform/Shell/reference/enums/csidl.asp.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading directory paths. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
		<example>
			<codelink SampleID="Environment.GetFolderPath" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Environment.GetLogicalDrives">
		<summary>
			<para>Returns an array of string containing the names of the logical drives on the current
      computer.</para>
		</summary>
		<returns>
			<para> An array of string where each element contains the
      name of a logical drive. For example, if the computer's hard drive is the
      first logical drive, the first element returned is "C:\".</para>
		</returns>
		<exception cref="System.IO.IOException">An I/O error occurs.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permissions.</exception>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for full access to the resource protected by this permission. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<codelink SampleID="Environment.GetLogicalDrives" SnippetID="1"/>
		</example>
	</doc>
</docs>
