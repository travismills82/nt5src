<docs>
	<doc for="TypeLoadException.TypeLoadException">
		<overload>
			<para>Initializes a new instance of the <see cref="System.TypeLoadException"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.TypeLoadException"/> class.</para>
		</summary>
		<remarks>
			<para>This constructor initializes the <see cref="System.TypeLoadException.Message"/> property of the new instance to a
   system-supplied message that describes the error, such as "A failure has
   occurred while loading a type." This message takes into account the current
   system culture.</para>
			<para>The following table shows the initial property values for an instance of <see cref="System.TypeLoadException"/>.</para>
			<list type="table"><listheader>
					<term> Property</term>
					<description>Value</description>
				</listheader>
				<item>
					<term><see cref="System.Exception.InnerException"/></term>
					<description>A
   null reference (<see langword="Nothing"/> in Visual Basic).</description>
				</item>
				<item>
					<term><see cref="System.TypeLoadException.Message"/></term>
					<description>The localized error message string.</description>
				</item>
			</list>
		</remarks>
	</doc><doc for="TypeLoadException.TypeLoadException1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.TypeLoadException"/> class with a specified error message.</para>
		</summary>
		<param name="message">The message that describes the error.</param>
		<remarks>
			<para>The content of the <paramref name="message"/> parameter should
   be understandable to the user. The caller of this constructor is required to
   ensure that this string has been localized for the current system culture.</para>
			<para>The following table shows the initial property values
   for an instance of <see cref="System.TypeLoadException"/>.</para>
			<list type="table"><listheader>
					<term> Property</term>
					<description>Value</description>
				</listheader>
				<item>
					<term><see cref="System.Exception.InnerException"/></term>
					<description>A
   null reference (<see langword="Nothing"/> in Visual Basic).</description>
				</item>
				<item>
					<term><see cref="System.TypeLoadException.Message"/></term>
					<description>The error message string.</description>
				</item>
			</list>
		</remarks>
		<example>
			<codelink SampleID="TypeLoadException_Constructor2" SnippetID="1"/>
		</example>
	</doc><doc for="TypeLoadException.TypeLoadException2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.TypeLoadException"/>
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
		</summary>
		<param name="message">The error message that explains the reason for the exception.</param>
		<param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner"/> parameter is not a null reference (<see langword="Nothing"/> in Visual Basic), the current exception is raised in a <see langword="catch"/> block that handles the inner exception.</param>
		<remarks>
			<para> An exception that is thrown as a direct result of
      a previous exception can include a reference to the previous exception in
      the <see cref="System.Exception.InnerException"/> property. The
   <see cref="System.Exception.InnerException"/> property returns
      the same value that is passed into the constructor, or a null reference
      (<see langword="Nothing"/> in Visual Basic) if the <see cref="System.Exception.InnerException"/>
      property does not supply the inner exception value to
      the constructor. </para>
			<para>The following table shows the initial property values for an instance of
   <see cref="System.TypeLoadException"/>.</para>
			<list type="table"><listheader>
					<term> Property</term>
					<description>Value</description>
				</listheader>
				<item>
					<term><see cref="System.Exception.InnerException"/></term>
					<description>The inner exception reference.</description>
				</item>
				<item>
					<term><see cref="System.TypeLoadException.Message"/></term>
					<description>The error message string.</description>
				</item>
			</list>
		</remarks>
		<example>
			<codelink SampleID="TypeLoadException_Constructor3" SnippetID="1"/>
		</example>
		<seealso cref="System.Exception"/>
		<seealso topic="cpconHandlingThrowingExceptions"/>
	</doc><doc for="TypeLoadException.Message">
		<summary>
			<para> Gets the error message for this exception.</para>
		</summary>
		<value>
			<para>The error message string.</para>
		</value>
		<remarks>
			<para>This property overrides <see cref="System.Exception.Message"/>. The error message should be localized.</para>
			<para>This property is read-only.</para>
		</remarks>
		<example>
			<para>The following example attempts to load a non-existent type from the mscorlib 
      assembly. The resulting exception is caught, and the <see cref="System.TypeLoadException.TypeName"/> and <see cref="System.TypeLoadException.Message"/> values are displayed. For this code example to run, you
      must provide the fully qualified assembly name. For information about how to
      obtain the fully qualified assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="TypeLoadException_TypeName" SnippetID="1"/>
		</example>
	</doc>
	<doc for="TypeLoadException.TypeLoadException3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.TypeLoadException"/> class with serialized data.</para>
		</summary>
		<param name="info">The object that holds the serialized object data.</param>
		<param name="context">The contextual information about the source or destination.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="info"/> object is <see langword="null"/>.</exception>
		<remarks>
			<para>This constructor is called during deserialization to
      reconstitute the exception object transmitted over a stream. For more
      information, see <see topic="cpconSerialization"/>.</para>
		</remarks>
		<example>
			<para>The following example generates an exception, and serializes the exception 
      data to a file, and then reconstitutes the exception. For this code example to
      run, you must provide the fully qualified assembly name. For information about
      how to obtain the fully qualified assembly name, see
   <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="TypeLoadException_GetObjectData" SnippetID="1"/>
		</example>
		<seealso topic="cpconSerialization"/>
	</doc>
	<doc for="TypeLoadException.TypeName">
		<summary>
			<para>Gets the fully qualified name of the type that causes the exception.</para>
		</summary>
		<value>
			<para>The fully qualified type name.</para>
		</value>
		<remarks>
			<note type="inheritinfo">
      When overriding <see cref="System.TypeLoadException.TypeName"/> in a derived class, be sure to call
      the base class's <see cref="System.TypeLoadException.TypeName"/> property.
      
   </note>
			<para>This property is read-only.</para>
		</remarks>
		<example>
			<para lang="VB, C#">The 
      following example attempts to load a non-existent type from the mscorlib
      assembly. The resulting exception is caught, and the <see cref="System.TypeLoadException.TypeName"/> and <see cref="System.TypeLoadException.Message"/> values are displayed.
      For this code example to run, you must provide the fully qualified assembly
      name. For information about how to obtain the fully qualified assembly name, see
   <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="TypeLoadException_TypeName" SnippetID="1"/>
		</example>
	</doc>
	<doc for="TypeLoadException.GetObjectData">
		<summary>
			<para> Sets the <see cref="System.Runtime.Serialization.SerializationInfo"/>
object with the class name, method name, resource ID, and additional exception information.</para>
		</summary>
		<param name="info">The object that holds the serialized object data.</param>
		<param name="context">The contextual information about the source or destination.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="info"/> object is <see langword="null"/>.</exception>
		<remarks>
			<para><see cref="System.TypeLoadException.GetObjectData"/>
sets a <see cref="System.Runtime.Serialization.SerializationInfo"/> with all the exception object data
targeted for serialization. During deserialization, the exception object is
reconstituted from the <see cref="System.Runtime.Serialization.SerializationInfo"/>
transmitted over the stream.</para>
			<para> For more information, see <see topic="cpconSerialization"/>.</para>
		</remarks>
		<example>
			<para lang="VB, C#">The 
      following example generates an exception, and serializes the exception data to a
      file, and then reconstitutes the exception. For this code example to run, you
      must provide the fully qualified assembly name. For information about how to
      obtain the fully qualified assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="TypeLoadException_GetObjectData" SnippetID="1"/>
		</example>
		<seealso cref="System.Runtime.Serialization.SerializationInfo"/>
		<seealso topic="cpconSerialization"/>
	</doc>
	<doc for="TypeLoadException">
		<summary>
			<para>The exception that is thrown when type-loading failures occur.</para>
		</summary>
		<remarks>
			<para><see cref="System.TypeLoadException"/>
is thrown when the common language runtime cannot find the assembly,
the type within the assembly, or cannot load the type.</para>
			<para><see cref="System.TypeLoadException"/> uses the HRESULT COR_E_TYPELOAD, that has the value
0x80131522.</para>
			<para>For a list of initial property values for an instance of <see cref="System.TypeLoadException"/>, see
the <see cref="System.TypeLoadException()"/> constructors.</para>
		</remarks>
		<seealso cref="System.Exception"/>
		<seealso topic="cpconHandlingThrowingExceptions"/>
	</doc>
</docs>
