<docs>
	<doc for="Convert.ToChar2">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para>The Unicode character equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToSByte4">
		<summary>
			<para>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<returns>
			<para>The 8-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.SByte.MaxValue" qualify="true"/> or less than <see cref="System.SByte.MinValue" qualify="true"/>.</exception>
	</doc><doc for="Convert.ToSByte5">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<returns>
			<para>The 8-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.SByte.MaxValue" qualify="true"/>.</exception>
	</doc><doc for="Convert.ToChar1">
		<summary>
			<para>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para>The Unicode character equivalent to the value of
      <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than <see cref="System.Char.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToSByte2">
		<summary>
			<para>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer. </para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>The 8-bit signed integer equivalent to 
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.SByte.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToSByte3">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para>The 8-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.SByte.MaxValue" qualify="true"/>.</exception>
	</doc><doc for="Convert.DBNull">
		<summary>
			<para>A constant representing a database column absent of 
      data; that is, database null.</para>
		</summary>
		<seealso cref="System.DBNull"/>
	</doc><doc for="Convert.ToSByte7">
		<summary>
			<para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 8-bit signed integer.
      </para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para> An 8-bit signed integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.SByte.MaxValue" qualify="true"/> or less than <see cref="System.SByte.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToSByte8">
		<summary>
			<para> Converts the value of the specified 64-bit signed integer to an
      equivalent 8-bit signed integer.
      </para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para> An 8-bit signed integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.SByte.MaxValue" qualify="true"/> or less than <see cref="System.SByte.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToSByte9">
		<summary>
			<para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 8-bit signed integer.
      </para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<returns>
			<para> An 8-bit signed integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.SByte.MaxValue" qualify="true"/> or less than <see cref="System.SByte.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToSByte10">
		<summary>
			<para> Converts the value of the specified single-precision floating point number to an
      equivalent 8-bit signed integer.
      </para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 8-bit signed integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.SByte.MaxValue" qualify="true"/> or less than <see cref="System.SByte.MinValue" qualify="true"/>. </exception>
		<seealso cref="System.Single"/>
	</doc><doc for="Convert.ToSByte11">
		<summary>
			<para>Converts the value of the specified double-precision floating point number to an
      equivalent 8-bit signed integer. </para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 8-bit signed integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.SByte.MaxValue" qualify="true"/> or less than <see cref="System.SByte.MinValue" qualify="true"/>. </exception>
		<seealso cref="System.Double"/>
	</doc><doc for="Convert.ToSByte1">
		<summary>
			<para> Converts the value of the specified Boolean value
      to the equivalent 8-bit signed integer.
      </para>
		</summary>
		<param name="value">A Boolean value. </param>
		<returns>
			<para> The number 1 if <paramref name="value"/> is <see langword="true"/> ; otherwise, 0.
   </para>
		</returns>
	</doc><doc for="Convert.ToByte1">
		<summary>
			<para> Converts the value of the specified Boolean value
      to the equivalent 8-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A Boolean value. </param>
		<returns>
			<para> The number 1 if <paramref name="value"/> is <see langword="true"/> ; otherwise, 0.
   </para>
		</returns>
	</doc><doc for="Convert.ToByte2">
		<summary>
			<para>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer. </para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>The 8-bit unsigned integer equivalent to
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Byte.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToByte3">
		<summary>
			<para>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than <see cref="System.Byte.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToByte4">
		<summary>
			<para>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<returns>
			<para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than <see cref="System.Byte.MinValue" qualify="true"/> or greater than <see cref="System.Byte.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToByte5">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<returns>
			<para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Byte.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToByte6">
		<summary>
			<para>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than <see cref="System.Byte.MinValue" qualify="true"/> or greater than <see cref="System.Byte.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToByte7">
		<summary>
			<para>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Byte.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToByte9">
		<summary>
			<para>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<returns>
			<para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Byte.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToSByte6">
		<summary>
			<para>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para> The 8-bit signed integer equivalent of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.SByte.MaxValue" qualify="true"/> or less than <see cref="System.SByte.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToInt161">
		<summary>
			<para> Converts the value of the specified Boolean value
      to the equivalent 16-bit signed integer.
      </para>
		</summary>
		<param name="value">A Boolean value. </param>
		<returns>
			<para> The number 1 if <paramref name="value"/> is <see langword="true"/> ; otherwise, 0.
   </para>
		</returns>
	</doc><doc for="Convert.ToInt162">
		<summary>
			<para>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer. </para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>The 16-bit signed integer equivalent to
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int16.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToInt163">
		<summary>
			<para>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para>The 8-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToInt164">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para>The 16-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToInt166">
		<summary>
			<para>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para> The 16-bit signed integer equivalent of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int16.MaxValue" qualify="true"/> or less than <see cref="System.Int16.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToInt1610">
		<summary>
			<para> Converts the value of the specified single-precision floating point number to an
      equivalent 16-bit signed integer.
      </para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 16-bit signed integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int16.MaxValue" qualify="true"/> or less than <see cref="System.Int16.MinValue" qualify="true"/>. </exception>
		<seealso cref="System.Single"/>
	</doc><doc for="Convert.ToInt1611">
		<summary>
			<para>Converts the value of the specified double-precision floating point number to an
      equivalent 16-bit signed integer. </para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 16-bit signed integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int16.MaxValue" qualify="true"/> or less than <see cref="System.Int16.MinValue" qualify="true"/>. </exception>
		<seealso cref="System.Double"/>
	</doc><doc for="Convert.ToInt167">
		<summary>
			<para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 16-bit signed integer.
      </para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para> A 16-bit signed integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int16.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToInt168">
		<summary>
			<para> Converts the value of the specified 64-bit signed integer to an
      equivalent 16-bit signed integer.
      </para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para> A 16-bit signed integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int16.MaxValue" qualify="true"/> or less than <see cref="System.Int16.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToInt169">
		<summary>
			<para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 16-bit signed integer.
      </para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<returns>
			<para> A 16-bit signed integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int16.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToUInt161">
		<summary>
			<para> Converts the value of the specified Boolean value
      to the equivalent 16-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A Boolean value. </param>
		<returns>
			<para> The number 1 if <paramref name="value"/> is <see langword="true"/> ; otherwise, 0.
   </para>
		</returns>
	</doc><doc for="Convert.ToUInt164">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para>The 16-bit unsigned integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToUInt162">
		<summary>
			<para>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer. </para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>The 16-bit unsigned integer equivalent to
   <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToUInt165">
		<summary>
			<para>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<returns>
			<para>The 16-bit unsigned integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero. </exception>
	</doc><doc for="Convert.ToUInt166">
		<summary>
			<para>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para> The 16-bit unsigned integer equivalent of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero or greater than <see cref="System.UInt16.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToUInt167">
		<summary>
			<para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 16-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para> A 16-bit unsigned integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.UInt16.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToUInt168">
		<summary>
			<para> Converts the value of the specified 64-bit signed integer to an
      equivalent 16-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para> A 16-bit unsigned integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero or greater than <see cref="System.UInt16.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToUInt169">
		<summary>
			<para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 16-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<returns>
			<para> A 16-bit unsigned integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.UInt16.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToUInt1610">
		<summary>
			<para> Converts the value of the specified single-precision floating point number to an
      equivalent 16-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 16-bit unsigned integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero or greater than <see cref="System.UInt16.MaxValue" qualify="true"/>. </exception>
		<seealso cref="System.Single"/>
	</doc><doc for="Convert.ToUInt1611">
		<summary>
			<para>Converts the value of the specified double-precision floating point number to an
      equivalent 16-bit unsigned integer. </para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 16-bit unsigned integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero or greater than <see cref="System.UInt16.MaxValue" qualify="true"/>. </exception>
		<seealso cref="System.Double"/>
	</doc><doc for="Convert.ToInt321">
		<summary>
			<para> Converts the value of the specified Boolean value
      to the equivalent 32-bit signed integer.
      </para>
		</summary>
		<param name="value">A Boolean value. </param>
		<returns>
			<para> The number 1 if <paramref name="value"/> is <see langword="true"/> ; otherwise, 0.
   </para>
		</returns>
	</doc><doc for="Convert.ToInt322">
		<summary>
			<para>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer. </para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>The 32-bit signed integer equivalent to
   <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToInt323">
		<summary>
			<para>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para>The 8-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToInt324">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para>The 32-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToInt326">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<returns>
			<para>The 32-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToInt327">
		<summary>
			<para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 32-bit signed integer.
      </para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para> A 32-bit signed integer equivalent to the value of
      <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int32.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToInt328">
		<summary>
			<para> Converts the value of the specified 64-bit signed integer to an
      equivalent 32-bit signed integer.
      </para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para> A 32-bit signed integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int32.MaxValue" qualify="true"/> or less than <see cref="System.Int32.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToInt329">
		<summary>
			<para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 32-bit signed integer.
      </para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<returns>
			<para> A 32-bit signed integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int32.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToInt3210">
		<summary>
			<para> Converts the value of the specified single-precision floating point number to an
      equivalent 32-bit signed integer.
      </para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 32-bit signed integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int32.MaxValue" qualify="true"/> or less than <see cref="System.Int32.MinValue" qualify="true"/>. </exception>
		<seealso cref="System.Single"/>
	</doc><doc for="Convert.ToInt325">
		<summary>
			<para> Converts the value of the specified 16-bit signed integer to an
      equivalent 32-bit signed integer.
      </para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<returns>
			<para> A 32-bit signed integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
	</doc><doc for="Convert.ToUInt321">
		<summary>
			<para> Converts the value of the specified Boolean value
      to the equivalent 32-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A Boolean value. </param>
		<returns>
			<para> The number 1 if <paramref name="value"/> is <see langword="true"/> ; otherwise, 0.
   </para>
		</returns>
	</doc><doc for="Convert.ToUInt322">
		<summary>
			<para>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer. </para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>The 32-bit unsigned integer equivalent to
   <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToUInt323">
		<summary>
			<para>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para>The 8-bit unsigned integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero. </exception>
	</doc><doc for="Convert.ToUInt324">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para>The 32-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToUInt325">
		<summary>
			<para>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para>The 32-bit unsigned integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero. </exception>
	</doc><doc for="Convert.ToUInt326">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para>The 32-bit unsigned integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToUInt327">
		<summary>
			<para>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para> The 32-bit unsigned integer equivalent of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero. </exception>
	</doc><doc for="Convert.ToUInt328">
		<summary>
			<para> Converts the value of the specified 64-bit signed integer to an
      equivalent 32-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para> A 32-bit unsigned integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero or greater than <see cref="System.UInt32.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToUInt329">
		<summary>
			<para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 32-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<returns>
			<para> A 32-bit unsigned integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.UInt32.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToUInt3210">
		<summary>
			<para> Converts the value of the specified single-precision floating point number to an
      equivalent 32-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 32-bit unsigned integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero or greater than <see cref="System.UInt32.MaxValue" qualify="true"/>. </exception>
		<seealso cref="System.Single"/>
	</doc><doc for="Convert.ToUInt3211">
		<summary>
			<para>Converts the value of the specified double-precision floating point number to an
      equivalent 32-bit unsigned integer. </para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 32-bit unsigned integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero or greater than <see cref="System.UInt32.MaxValue" qualify="true"/>. </exception>
		<seealso cref="System.Double"/>
	</doc><doc for="Convert.ToInt641">
		<summary>
			<para> Converts the value of the specified Boolean value
      to the equivalent 64-bit signed integer.
      </para>
		</summary>
		<param name="value">A Boolean value. </param>
		<returns>
			<para> The number 1 if <paramref name="value"/> is <see langword="true"/> ; otherwise, 0.
   </para>
		</returns>
	</doc><doc for="Convert.ToInt642">
		<summary>
			<para>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para>The 8-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToInt644">
		<summary>
			<para> Converts the value of the specified 16-bit signed integer to an
      equivalent 64-bit signed integer.
      </para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<returns>
			<para> A 64-bit signed integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
	</doc><doc for="Convert.ToInt645">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<returns>
			<para>The 64-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToInt646">
		<summary>
			<para> Converts the value of the specified 32-bit signed integer to an
      equivalent 64-bit signed integer.
      </para>
		</summary>
		<param name="value">A 32-signed integer. </param>
		<returns>
			<para> The 64-bit signed integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
	</doc><doc for="Convert.ToInt647">
		<summary>
			<para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 64-bit signed integer.
      </para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para> A 64-bit signed integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
	</doc><doc for="Convert.ToInt648">
		<summary>
			<para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 64-bit signed integer.
      </para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<returns>
			<para> A 64-bit signed integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int64.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToUInt641">
		<summary>
			<para> Converts the value of the specified Boolean value
      to the equivalent 64-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A Boolean value. </param>
		<returns>
			<para> The number 1 if <paramref name="value"/> is <see langword="true"/> ; otherwise, 0.
   </para>
		</returns>
	</doc><doc for="Convert.ToUInt6415">
		<summary>
			<para>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer. </para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>The 64-bit unsigned integer equivalent to
   <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToUInt642">
		<summary>
			<para>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para>The 8-bit unsigned integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero. </exception>
	</doc><doc for="Convert.ToUInt643">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para>The 64-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToUInt644">
		<summary>
			<para>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para>The 64-bit unsigned integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero. </exception>
	</doc><doc for="Convert.ToUInt645">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<returns>
			<para>The 64-bit unsigned integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToUInt646">
		<summary>
			<para>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para> The 64-bit unsigned integer equivalent of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero. </exception>
	</doc><doc for="Convert.ToUInt647">
		<summary>
			<para>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para> The 64-bit unsigned integer equivalent of
   <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToUInt648">
		<summary>
			<para> Converts the value of the specified 64-bit signed integer to an
      equivalent 64-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para> A 64-bit unsigned integer equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero. </exception>
	</doc><doc for="Convert.ToUInt649">
		<summary>
			<para> Converts the value of the specified single-precision floating point number to an
      equivalent 64-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 64-bit unsigned integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero or greater than <see cref="System.UInt64.MaxValue" qualify="true"/>. </exception>
		<seealso cref="System.Single"/>
	</doc><doc for="Convert.ToUInt6410">
		<summary>
			<para>Converts the value of the specified double-precision floating point number to an
      equivalent 64-bit unsigned integer. </para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 64-bit unsigned integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero or greater than <see cref="System.UInt64.MaxValue" qualify="true"/>. </exception>
		<seealso cref="System.Double"/>
	</doc><doc for="Convert.ToSingle1">
		<summary>
			<para>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating point number.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para>The 8-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToSingle3">
		<summary>
			<para> Converts the value of the specified 16-bit signed integer to an
      equivalent single-precision floating point number.
      </para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<returns>
			<para> A single-precision floating point number equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
	</doc><doc for="Convert.ToSingle4">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating point number.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<returns>
			<para>The single-precision floating point number equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToSingle5">
		<summary>
			<para>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating point number. </para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para>A single-precision floating point number equivalent to the value of <paramref name="value"/>. </para>
		</returns>
	</doc><doc for="Convert.ToSingle6">
		<summary>
			<para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent single-precision floating point number.
      </para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para> A single-precision floating point number equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
	</doc><doc for="Convert.ToSingle8">
		<summary>
			<para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent single-precision floating point number.
      </para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<returns>
			<para> A single-precision floating point number equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
	</doc><doc for="Convert.ToSingle16">
		<summary>
			<para> Converts the value of the specified Boolean value
      to the equivalent single-precision floating point number.
      </para>
		</summary>
		<param name="value">A Boolean value. </param>
		<returns>
			<para> The number 1 if <paramref name="value"/> is <see langword="true"/> ; otherwise, 0.
   </para>
		</returns>
	</doc><doc for="Convert.ToDouble1">
		<summary>
			<para>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating point number.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para>The 8-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToDouble3">
		<summary>
			<para> Converts the value of the specified 16-bit signed integer to an
      equivalent double-precision floating point number.
      </para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<returns>
			<para> A double-precision floating point number equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
	</doc><doc for="Convert.ToDouble4">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating point number.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<returns>
			<para>The double-precision floating point number equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToDouble6">
		<summary>
			<para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent double-precision floating point number.
      </para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para> A double-precision floating point number equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
	</doc><doc for="Convert.ToDouble7">
		<summary>
			<para> Converts the value of the specified 64-bit signed integer to an
      equivalent double-precision floating point number.
      </para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para> A double-precision floating point number equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
	</doc><doc for="Convert.ToDouble8">
		<summary>
			<para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent double-precision floating point number.
      </para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<returns>
			<para> A double-precision floating point number equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
	</doc><doc for="Convert.ToChar3">
		<summary>
			<para>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<returns>
			<para>The Unicode character equivalent to the value of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than <see cref="System.Char.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToChar4">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<returns>
			<para>The Unicode character equivalent to the value of <paramref name="value"/>.</para>
		</returns>
	</doc><doc for="Convert.ToChar5">
		<summary>
			<para>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para>The Unicode character equivalent to the value of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than <see cref="System.Char.MinValue" qualify="true"/> or greater than <see cref="System.Char.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToChar6">
		<summary>
			<para>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para>The Unicode character equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Char.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToChar14">
		<summary>
			<para>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<returns>
			<para>The Unicode character equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Char.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToInt165">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<returns>
			<para>The 16-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int16.MaxValue" qualify="true"/>. </exception>
	</doc>
	<doc for="Convert.ToUInt163">
		<summary>
			<para>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para>The 16-bit unsigned integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero. </exception>
	</doc>
	<doc for="Convert.ToBoolean1">
		<summary>
			<para> Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is not zero; otherwise, <see langword="false"/>.</para>
		</returns>
		<seealso cref="System.SByte"/>
	</doc><doc for="Convert.ToBoolean3">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean
      value.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para><see langword="true"/> if
<paramref name="value"/> is not zero; otherwise, <see langword="false"/>.</para>
		</returns>
		<seealso cref="System.Byte"/>
	</doc><doc for="Convert.ToBoolean4">
		<summary>
			<para>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is not zero; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<seealso cref="System.Int16"/>
	</doc><doc for="Convert.ToBoolean5">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is not zero; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<seealso cref="System.UInt16"/>
	</doc><doc for="Convert.ToBoolean6">
		<summary>
			<para>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is not zero; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<seealso cref="System.Int32"/>
	</doc><doc for="Convert.ToBoolean7">
		<summary>
			<para>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is not zero; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<seealso cref="System.UInt32"/>
	</doc><doc for="Convert.ToBoolean8">
		<summary>
			<para>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is not zero; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<seealso cref="System.Int64"/>
	</doc><doc for="Convert.ToBoolean9">
		<summary>
			<para>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is not zero; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<seealso cref="System.UInt64"/>
	</doc><doc for="Convert.ToBoolean11">
		<summary>
			<para>Converts the value of the specified single-precision floating point number to an equivalent Boolean value.</para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is not zero; otherwise, <see langword="false"/>.</para>
		</returns>
		<seealso cref="System.Single"/>
	</doc><doc for="Convert.ToChar18">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.Boolean"/> value.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToByte18">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToDateTime4">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.Byte"/>
	</doc><doc for="Convert.ToDateTime5">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.Byte"/>
	</doc><doc for="Convert.ToDateTime6">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.Int16"/>
	</doc><doc for="Convert.ToDateTime7">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.UInt16"/>
	</doc><doc for="Convert.ToDateTime8">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.Int32"/>
	</doc><doc for="Convert.ToDateTime9">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.UInt32"/>
	</doc><doc for="Convert.ToDateTime10">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A 64-bit signed integer.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.Int64"/>
	</doc><doc for="Convert.ToDateTime11">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A 64-bit unsigned integer.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.UInt64"/>
	</doc><doc for="Convert.ToDateTime12">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A Boolean value.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.Boolean"/>
	</doc><doc for="Convert.ToDateTime13">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.Char"/>
	</doc><doc for="Convert.ToDateTime14">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A single-precision floating point value.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.Single"/>
	</doc><doc for="Convert.ToDateTime15">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A double-precision floating point value.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.Double"/>
	</doc><doc for="Convert.ToDateTime16">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> value.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToChar17">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToSByte18">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToBoolean2">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.Char"/>
	</doc><doc for="Convert.ToInt1618">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt1618">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToInt3218">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt3218">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToInt6418">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt6418">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToSingle17">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToDouble19">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToDecimal17">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToSingle13">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.Char"/>
	</doc><doc for="Convert.ToDouble15">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<seealso cref="System.Char"/>
	</doc><doc for="Convert.ToChar8">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A single-precision floating-point number.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToChar9">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A double-precision floating-point number.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
	</doc><doc for="Convert.ToSByte">
		<overload>
			<para> Converts a specified value to an 8-bit signed integer.
      </para>
		</overload>
		<summary>
			<para> Converts the value of the specified
      <see cref="System.Object"/> to an 8-bit signed integer.
      </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>. </param>
		<returns>
			<para>An 8-bit signed integer equivalent to the value of <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToSByte "/>method of the underlying type of <paramref name="value"/>.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt16">
		<overload>
			<para> Converts a specified value to a 16-bit unsigned integer.
      </para>
		</overload>
		<summary>
			<para> Converts the value of the specified
      <see cref="System.Object"/> to a 16-bit unsigned integer.
      </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>. </param>
		<returns>
			<para>A 16-bit unsigned integer equivalent to the value of <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToUInt16 "/>method of the underlying type of <paramref name="value"/>.</para>
		</remarks>
	</doc><doc for="Convert.ToInt32">
		<overload>
			<para> Converts a specified value to a 32-bit signed integer.
      </para>
		</overload>
		<summary>
			<para> Converts the value of the specified
      <see cref="System.Object"/> to a 32-bit signed integer.
      </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>. </param>
		<returns>
			<para>A 32-bit signed integer equivalent to the value of <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToInt32 "/>method of the underlying type of <paramref name="value"/>.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt32">
		<overload>
			<para>Converts a specified value to a 32-bit unsigned integer.
      </para>
		</overload>
		<summary>
			<para> Converts the value of the specified
      <see cref="System.Object"/> to a 32-bit unsigned integer.
      </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>. </param>
		<returns>
			<para>A 32-bit unsigned integer equivalent to the value of <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToUInt32 "/>method of the underlying type of <paramref name="value"/>.</para>
		</remarks>
	</doc><doc for="Convert.ToInt64">
		<overload>
			<para> Converts a specified value to a 64-bit signed integer.
      </para>
		</overload>
		<summary>
			<para> Converts the value of the specified
      <see cref="System.Object"/> to a 64-bit signed integer.
      </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>. </param>
		<returns>
			<para>A 64-bit signed integer equivalent to the value of <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToInt64 "/>method of the underlying type of <paramref name="value"/>.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt64">
		<overload>
			<para>Converts a specified value to a 64-bit unsigned integer.
      </para>
		</overload>
		<summary>
			<para> Converts the value of the specified
      <see cref="System.Object"/> to a 64-bit unsigned integer.
      </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>. </param>
		<returns>
			<para>A 64-bit unsigned integer equivalent to the value of <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToUInt64 "/>method of the underlying type of <paramref name="value"/>.</para>
		</remarks>
	</doc><doc for="Convert.ToBoolean14">
		<summary>
			<para> Converts the value of the specified
      <see cref="System.Object"/> to an equivalent
      Boolean value using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para><see langword="false"/> if <paramref name="value"/> equals <see langword="null"/>.</para>
			<para>-or-</para>
			<para><see langword="true"/> or <see langword="false"/>; the result of invoking the <see langword="ToBoolean"/> method for the underlying type of <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement the <see cref="System.IConvertible"/> interface.</exception>
		<remarks>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface. </para>
		</remarks>
		<seealso cref="System.Object"/>
	</doc><doc for="Convert.ToChar11">
		<summary>
			<para> Converts the value of the specified
      <see cref="System.Object"/> to its equivalent Unicode
      character using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface.</param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>The Unicode character equivalent to the value of <paramref name="value"/>.</para>
			<para>-or-</para>
			<para><see cref="System.Char.MinValue" qualify="true"/> if <paramref name="value"/> equals <see langword="null"/>.</para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement the <see cref="System.IConvertible"/> interface.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToChar "/>method of the underlying type of <paramref name="value"/>.</para>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface. </para>
		</remarks>
	</doc><doc for="Convert.ToChar15">
		<summary>
			<para> Converts the first character of a
      <see cref="System.String"/> to a Unicode character using specified
      culture-specific formatting information.
      </para>
		</summary>
		<param name="value">A <see cref="System.String"/> of length 1 or <see langword="null"/>. </param>
		<param name=" provider">(Reserved) An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> The Unicode character equivalent to the first and only character in <paramref name="value"/>.
			</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
		<exception cref="System.FormatException">The length of <paramref name="value"/> is not 1. </exception>
		<remarks>
			<para><paramref name="value"/> must be <see langword="null"/> or a <see cref="System.String"/>
containing a single character.</para>
			<para><paramref name="provider"/> is ignored; it does not participate in this operation.</para>
		</remarks>
	</doc><doc for="Convert.ToSByte15">
		<summary>
			<para> Converts the value of the specified <see cref="System.Object"/> to an 8-bit signed
   integer using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> An 8-bit signed integer equivalent to the value of
      <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>.
      </para>
		</returns>
		<remarks>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface. </para>
		</remarks>
	</doc><doc for="Convert.ToSByte13">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent 8-bit signed integer.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<returns>
			<para>An 8-bit signed integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.SByte.MinValue"/> or greater than <see cref="System.SByte.MaxValue"/>.</exception>
		<seealso cref="System.SByte.Parse" qualify="true"/>
	</doc><doc for="Convert.ToSByte17">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent 8-bit signed integer using
   specified culture-specific formatting information.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>An 8-bit signed integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.SByte.MinValue"/> or greater than <see cref="System.SByte.MaxValue"/>.</exception>
		<remarks>
			<para><paramref name="provider"/> is an <see langword="IFormatProvider"/> instance that obtains
   a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see langword="NumberFormatInfo"/> object provides culture-specific information 
   about the format of <paramref name="value"/>. If <paramref name="provider"/> is <see langword="null"/>,
   the <see langword="NumberFormatInfo"/> for the current culture is used.</para>
		</remarks>
		<seealso cref="System.SByte.Parse" qualify="true"/>
	</doc><doc for="Convert.ToByte15">
		<summary>
			<para> Converts the value of the specified
      <see cref="System.Object"/> to an 8-bit unsigned
      integer using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> An 8-bit unsigned integer equivalent to the value of
      <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>.
      </para>
		</returns>
		<remarks>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/>
is a user-defined type that implements the <see cref="System.IConvertible"/> interface. </para>
		</remarks>
	</doc><doc for="Convert.ToByte17">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent 8-bit signed integer using
   specified culture-specific formatting information.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>An 8-bit signed integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Byte.MinValue"/> or greater than <see cref="System.Byte.MaxValue"/>.</exception>
		<remarks>
			<para><paramref name="provider"/> is an <see langword="IFormatProvider"/> instance that obtains
   a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see langword="NumberFormatInfo"/> object provides culture-specific information 
   about the format of <paramref name="value"/>. If <paramref name="provider"/> is <see langword="null"/>,
   the <see langword="NumberFormatInfo"/> for the current culture is used.</para>
		</remarks>
		<seealso cref="System.Byte.Parse" qualify="true"/>
	</doc><doc for="Convert.ToInt1615">
		<summary>
			<para> Converts the value of the specified <see cref="System.Object"/> to a 16-bit signed
   integer using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> A 16-bit signed integer equivalent to the value of
      <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>.
      </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface. </para>
		</remarks>
	</doc><doc for="Convert.ToInt1613">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent 16-bit signed integer.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<returns>
			<para>A 16-bit signed integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Int16.MinValue"/> or greater than <see cref="System.Int16.MaxValue"/>.</exception>
		<seealso cref="System.Int16.Parse" qualify="true"/>
	</doc><doc for="Convert.ToInt1617">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent 16-bit signed integer using
   specified culture-specific formatting information.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>A 16-bit signed integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Int16.MinValue"/> or greater than <see cref="System.Int16.MaxValue"/>.</exception>
		<remarks>
			<para><paramref name="provider"/> is an <see langword="IFormatProvider"/> instance that obtains
   a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see langword="NumberFormatInfo"/> object provides culture-specific information 
   about the format of <paramref name="value"/>. If <paramref name="provider"/> is <see langword="null"/>,
   the <see langword="NumberFormatInfo"/> for the current culture is used.</para>
		</remarks>
		<seealso cref="System.Int16.Parse" qualify="true"/>
	</doc><doc for="Convert.ToUInt1615">
		<summary>
			<para> Converts the value of the specified <see cref="System.Object"/> to a 16-bit unsigned integer
   using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> A 16-bit unsigned integer equivalent to the value of
      <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>.
      </para>
		</returns>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToUInt16 "/>method of the underlying type of <paramref name="value"/>.</para>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt1613">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent 16-bit unsigned integer.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<returns>
			<para>A 16-bit unsigned integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Int16.MinValue"/> or greater than <see cref="System.Int16.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking <see cref="System.UInt16.Parse" qualify="true"/> on
<paramref name="value"/>.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt1617">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent 16-bit unsigned integer using
   specified culture-specific formatting information.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>A 16-bit unsigned integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Int16.MinValue"/> or greater than <see cref="System.Int16.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking <see cref="System.UInt16.Parse" qualify="true"/> on <paramref name="value"/>.</para>
			<para><paramref name="provider"/> is an <see langword="IFormatProvider"/> instance that obtains
a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see langword="NumberFormatInfo"/> object provides culture-specific information 
about the format of <paramref name="value"/>. If <paramref name="provider"/> is <see langword="null"/>,
the <see langword="NumberFormatInfo"/> for the current culture is used.</para>
		</remarks>
	</doc><doc for="Convert.ToInt3215">
		<summary>
			<para> Converts the value of the specified <see cref="System.Object"/> to a 32-bit signed integer
   using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> A 32-bit signed integer equivalent to the value of
      <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>.
      </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToInt32 "/>method of the underlying type of <paramref name="value"/>.</para>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface. </para>
		</remarks>
	</doc><doc for="Convert.ToInt3217">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent 32-bit signed integer using
   specified culture-specific formatting information.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>A 32-bit signed integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Int32.MinValue"/> or greater than <see cref="System.Int32.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.Int32.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
			<para><paramref name="provider"/> is an <see langword="IFormatProvider"/> instance that obtains
a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see langword="NumberFormatInfo"/> object provides culture-specific information 
about the format of <paramref name="value"/>. If <paramref name="provider"/> is <see langword="null"/>,
the <see langword="NumberFormatInfo"/> for the current culture is used.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt3215">
		<summary>
			<para> Converts the value of the specified <see cref="System.Object"/> to a 32-bit unsigned integer
   using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> A 32-bit unsigned integer equivalent to the value of
      <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>.
      </para>
		</returns>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToUInt32 "/>method of the underlying type of <paramref name="value"/>.</para>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt3213">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent 32-bit signed integer.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<returns>
			<para>A 32-bit signed integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Int32.MinValue"/> or greater than <see cref="System.Int32.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.Int32.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt3217">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an equivalent
   32-bit unsigned integer using the
   specified culture-specific formatting information.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>A 32-bit unsigned integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Int32.MinValue"/> or greater than <see cref="System.Int32.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking <see cref="System.UInt32.Parse" qualify="true"/> on <paramref name="value"/>.</para>
			<para><paramref name="provider"/> is an <see langword="IFormatProvider"/> instance that obtains
a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see langword="NumberFormatInfo"/> object provides culture-specific information 
about the format of <paramref name="value"/>. If <paramref name="provider"/> is <see langword="null"/>,
the <see langword="NumberFormatInfo"/> for the current culture is used.</para>
		</remarks>
	</doc><doc for="Convert.ToInt6414">
		<summary>
			<para> Converts the value of the specified <see cref="System.Object"/> to a 64-bit signed integer
   using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> A 64-bit signed integer equivalent to the value of
      <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>.
      </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToInt64 "/>method of the underlying type of <paramref name="value"/>.</para>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface. </para>
		</remarks>
	</doc><doc for="Convert.ToInt6412">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent 64-bit signed integer.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<returns>
			<para>A 64-bit signed integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Int64.MinValue"/> or greater than <see cref="System.Int64.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.Int64.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
		</remarks>
	</doc><doc for="Convert.ToInt6417">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an equivalent
   64-bit signed integer using the
   specified culture-specific formatting information.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>A 64-bit signed integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Int64.MinValue"/> or greater than <see cref="System.Int64.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.Int64.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
			<para><paramref name="provider"/> is an <see langword="IFormatProvider"/> instance that obtains
a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see langword="NumberFormatInfo"/> object provides culture-specific information 
about the format of <paramref name="value"/>. If <paramref name="provider"/> is <see langword="null"/>,
the <see langword="NumberFormatInfo"/> for the current culture is used.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt6414">
		<summary>
			<para> Converts the value of the specified <see cref="System.Object"/> to a 64-bit unsigned integer
   using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> A 64-bit unsigned integer equivalent to the value of
      <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>.
      </para>
		</returns>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToUInt64 "/>method of the underlying type of <paramref name="value"/>.</para>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt6412">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent 64-bit signed integer.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<returns>
			<para>A 64-bit signed integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Int64.MinValue"/> or greater than <see cref="System.Int64.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.Int64.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
		</remarks>
	</doc><doc for="Convert.ToUInt6417">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an equivalent
   64-bit unsigned integer using the
   specified culture-specific formatting information.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>A 64-bit unsigned integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Int64.MinValue"/> or greater than <see cref="System.Int64.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking <see cref="System.UInt64.Parse" qualify="true"/> on <paramref name="value"/>.</para>
			<para><paramref name="provider"/> is an <see langword="IFormatProvider"/> instance that obtains
a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see langword="NumberFormatInfo"/> object provides culture-specific information 
about the format of <paramref name="value"/>. If <paramref name="provider"/> is <see langword="null"/>,
the <see langword="NumberFormatInfo"/> for the current culture is used.</para>
		</remarks>
	</doc><doc for="Convert.ToSingle12">
		<summary>
			<para> Converts the value of the specified <see cref="System.Object"/> to an single-precision floating point number
   using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> A single-precision floating point number equivalent to the value of
      <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>.
      </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToSingle "/>method of the underlying type of <paramref name="value"/>.</para>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface. </para>
		</remarks>
	</doc><doc for="Convert.ToSingle15">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an equivalent
   single-precision floating point number using the
   specified culture-specific formatting information.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>A single-precision floating point number equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Single.MinValue"/> or greater than <see cref="System.Single.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.Single.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
			<para><paramref name="provider"/> is an <see langword="IFormatProvider"/> instance that obtains
a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see langword="NumberFormatInfo"/> object provides culture-specific information 
about the format of <paramref name="value"/>. If <paramref name="provider"/> is <see langword="null"/>,
the <see langword="NumberFormatInfo"/> for the current culture is used.</para>
		</remarks>
	</doc><doc for="Convert.ToDouble14">
		<summary>
			<para> Converts the value of the specified <see cref="System.Object"/> to an double-precision floating point number
   using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> A double-precision floating point number equivalent to the value of
      <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>.
      </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToDouble "/>method of the underlying type of <paramref name="value"/>.</para>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface. </para>
		</remarks>
	</doc><doc for="Convert.ToDouble17">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an equivalent
   double-precision floating point number using the
   specified culture-specific formatting information.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>A double-precision floating point number equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Double.MinValue"/> or greater than <see cref="System.Double.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.Double.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
			<para><paramref name="provider"/> is an <see langword="IFormatProvider"/> instance that obtains
a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see langword="NumberFormatInfo"/> object provides culture-specific information 
about the format of <paramref name="value"/>. If <paramref name="provider"/> is <see langword="null"/>,
the <see langword="NumberFormatInfo"/> for the current culture is used.</para>
		</remarks>
	</doc><doc for="Convert.ToString19">
		<summary>
			<para>Converts the value of the specified <see cref="System.Object"/> to its equivalent <see cref="System.String"/> representation using the specified culture-specific formatting information. </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> or <see langword="null"/>. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>The <see cref="System.String"/> representation of the value of <paramref name="value"/>, or <see cref="System.String.Empty" qualify="true"/> if <paramref name="value"/> is <see langword="null"/>.</para>
		</returns>
		<remarks>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface. </para>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToString "/>method of the underlying type of <paramref name="value"/> if the underlying type
implements the <see langword="IConvertible"/> interface; otherwise, the return
value is the result of invoking the <see langword="ToString"/> method of the
underlying type.</para>
		</remarks>
	</doc><doc for="Convert.ToString20">
		<summary>
			<para>Converts the value of the specified Boolean to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A Boolean value. </param>
		<param name="provider">(Reserved) An instance of an <see cref="System.IFormatProvider"/> interface implementation.</param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.Boolean.ToString" qualify="true"/>.
   </para>
		</remarks>
	</doc><doc for="Convert.ToString21">
		<summary>
			<para>Converts the value of the specified Unicode character to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A Unicode character. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para>This implementation is identical to <see cref="System.Char.ToString" qualify="true"/>. </para>
		</remarks>
	</doc><doc for="Convert.ToString3">
		<summary>
			<para>Converts the value of the specified 8-bit signed integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.SByte.ToString" qualify="true"/>. </para>
		</remarks>
	</doc><doc for="Convert.ToString22">
		<summary>
			<para>Converts the value of the specified 8-bit signed integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
   This implementation is identical to <see cref="System.SByte.ToString" qualify="true"/>.
</remarks>
	</doc><doc for="Convert.ToString23">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para>This implementation is identical to <see cref="System.Byte.ToString" qualify="true"/>.</para>
		</remarks>
	</doc><doc for="Convert.ToString5">
		<summary>
			<para>Converts the value of the specified 16-bit signed integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.Int16.ToString" qualify="true"/>. </para>
		</remarks>
	</doc><doc for="Convert.ToString24">
		<summary>
			<para>Converts the value of the specified 16-bit signed integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
   This implementation is identical to <see cref="System.Int16.ToString" qualify="true"/>.
</remarks>
	</doc><doc for="Convert.ToString6">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.UInt16.ToString" qualify="true"/>. </para>
		</remarks>
	</doc><doc for="Convert.ToString25">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
   This implementation is identical to <see cref="System.UInt16.ToString" qualify="true"/>.
</remarks>
	</doc><doc for="Convert.ToString7">
		<summary>
			<para>Converts the value of the specified 32-bit signed integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.Int32.ToString" qualify="true"/>. </para>
		</remarks>
	</doc><doc for="Convert.ToString26">
		<summary>
			<para>Converts the value of the specified 32-bit signed integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
   This implementation is identical to <see cref="System.Int32.ToString" qualify="true"/>.
</remarks>
	</doc><doc for="Convert.ToString8">
		<summary>
			<para>Converts the value of the specified 32-bit unsigned integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.UInt32.ToString" qualify="true"/>. </para>
		</remarks>
	</doc><doc for="Convert.ToString27">
		<summary>
			<para>Converts the value of the specified 32-bit unsigned integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
   This implementation is identical to <see cref="System.UInt32.ToString" qualify="true"/>.
</remarks>
	</doc><doc for="Convert.ToString9">
		<summary>
			<para>Converts the value of the specified 64-bit signed integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.Int64.ToString" qualify="true"/>. </para>
		</remarks>
	</doc><doc for="Convert.ToString28">
		<summary>
			<para>Converts the value of the specified 64-bit signed integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
   This implementation is identical to <see cref="System.Int64.ToString" qualify="true"/>.
</remarks>
	</doc><doc for="Convert.ToString10">
		<summary>
			<para>Converts the value of the specified 64-bit unsigned integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.UInt64.ToString" qualify="true"/>. </para>
		</remarks>
	</doc><doc for="Convert.ToString29">
		<summary>
			<para>Converts the value of the specified 64-bit unsigned integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
   This implementation is identical to <see cref="System.UInt64.ToString" qualify="true"/>.
</remarks>
	</doc><doc for="Convert.ToString30">
		<summary>
			<para>Converts the value of the specified single-precision floating point number to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
   This implementation is identical to <see cref="System.Single.ToString" qualify="true"/>.
</remarks>
	</doc><doc for="Convert.ToString31">
		<summary>
			<para>Converts the value of the specified double-precision floating point number to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
			<para><paramref name="provider"/> is ignored; it does not participate in this operation.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.Double.ToString" qualify="true"/>. </para>
		</remarks>
	</doc><doc for="Convert.ToString15">
		<summary>
			<para> Converts the value of an 8-bit unsigned integer to its
      equivalent <see cref="System.String"/> representation in a specified base.
      </para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
		<returns>
			<para>The <see cref="System.String"/> representation of
<paramref name="value"/> in base <paramref name="toBase"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="toBase"/> is not 2, 8, 10, or 16. </exception>
	</doc><doc for="Convert.ToString16">
		<summary>
			<para> Converts the value of a 16-bit signed integer to its
      equivalent <see cref="System.String"/> representation in a specified base.
      </para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
		<returns>
			<para>The <see cref="System.String"/> representation of
<paramref name="value"/> in base <paramref name="toBase"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="toBase"/> is not 2, 8, 10, or 16. </exception>
	</doc><doc for="Convert.ToString17">
		<summary>
			<para> Converts the value of a 32-bit signed integer to its
      equivalent <see cref="System.String"/> representation in a specified base.
      </para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
		<returns>
			<para>The <see cref="System.String"/> representation of
<paramref name="value"/> in base <paramref name="toBase"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="toBase"/> is not 2, 8, 10, or 16. </exception>
	</doc><doc for="Convert.ToString18">
		<summary>
			<para> Converts the value of a 64-bit signed integer to its
      equivalent <see cref="System.String"/> representation in a specified base.
      </para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
		<returns>
			<para>The <see cref="System.String"/> representation of
<paramref name="value"/> in base <paramref name="toBase"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="toBase"/> is not 2, 8, 10, or 16. </exception>
	</doc><doc for="Convert.ToBase64String1">
		<summary>
			<para>Converts the value of a subset of an array of 8-bit unsigned integers to its
      equivalent <see cref="System.String"/>
      representation consisting of base 64 digits. Parameters specify the subset as an
      offset and number of elements in the
      array.</para>
		</summary>
		<param name="inArray">An array of 8-bit unsigned integers.</param>
		<param name=" offset">An offset in <paramref name="inArray"/>.</param>
		<param name=" length">The number of elements of <paramref name="inArray"/> to convert.</param>
		<returns>
			<para>The <see cref="System.String"/> representation in
   base 64 of <paramref name="length"/> elements of
<paramref name="inArray"/> starting at position <paramref name="offset"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="inArray"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="offset"/> or <paramref name="length"/> is negative.</para>
			<para>-or-</para>
			<para><paramref name="offset"/> plus <paramref name="length"/> is greater than the length of <paramref name="inArray"/>.</para></exception>
		<remarks>
			<para>The elements of <paramref name="inArray"/> are
   taken as a numeric value
   and converted to a <see cref="System.String"/> representation in base
   64.</para>
			<para>The base 64 digits in ascending order from zero are the uppercase
   characters 'A' to 'Z', lowercase characters 'a' to 'z', numerals '0' to '9', and
   the symbols '+' and '/'. The valueless character, '=', is used for trailing
   padding.</para>
			<para><paramref name="offset"/> and <paramref name="length"/> are 32-bit signed numbers. <paramref name="offset"/> is zero-based.</para>
		</remarks>
	</doc><doc for="Convert.ToBoolean17">
		<summary>
			<para>Converts the value of the specified <see cref="System.Decimal"/> number to an equivalent Boolean value.</para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is not zero; otherwise, <see langword="false"/>.</para>
		</returns>
		<seealso cref="System.Decimal"/>
	</doc><doc for="Convert.ToSByte12">
		<summary>
			<para>Converts the value of the specified <see cref="System.Decimal"/> number to an equivalent
   8-bit signed integer. </para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 8-bit signed integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.SByte.MaxValue" qualify="true"/> or less than <see cref="System.SByte.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToInt1612">
		<summary>
			<para>Converts the value of the specified <see cref="System.Decimal"/> number to an equivalent
   16-bit signed integer. </para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 16-bit signed integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int16.MaxValue" qualify="true"/> or less than <see cref="System.Int16.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToUInt1612">
		<summary>
			<para>Converts the value of the specified <see cref="System.Decimal"/> number to an equivalent
   16-bit unsigned integer. </para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 16-bit unsigned integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero or greater than <see cref="System.UInt16.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToInt3212">
		<summary>
			<para>Converts the value of the specified <see cref="System.Decimal"/> number to an equivalent
   32-bit signed integer. </para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 32-bit signed integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int32.MaxValue" qualify="true"/> or less than <see cref="System.Int32.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToUInt3212">
		<summary>
			<para>Converts the value of the specified <see cref="System.Decimal"/> number to an equivalent
   32-bit unsigned integer. </para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 32-bit unsigned integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero or greater than <see cref="System.UInt32.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToInt6411">
		<summary>
			<para>Converts the value of the specified <see cref="System.Decimal"/> number to an equivalent
   64-bit signed integer. </para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 64-bit signed integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int64.MaxValue" qualify="true"/> or less than <see cref="System.Int64.MinValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToUInt6411">
		<summary>
			<para>Converts the value of the specified <see cref="System.Decimal"/> number to an equivalent
   64-bit unsigned integer. </para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 64-bit unsigned integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than zero or greater than <see cref="System.UInt64.MaxValue" qualify="true"/>. </exception>
	</doc><doc for="Convert.ToDecimal13">
		<summary>
			<para> Converts the value of the specified <see cref="System.Object"/> to an <see cref="System.Decimal"/> number
   using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> A <see cref="System.Decimal"/> number equivalent to the value of
<paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>.
   </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToDecimal "/>method of the underlying type of <paramref name="value"/>.</para>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that number.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface. </para>
		</remarks>
		<seealso cref="System.Decimal"/>
	</doc><doc for="Convert.ToDecimal1">
		<summary>
			<para>Converts the value of the specified 8-bit signed integer to the equivalent <see cref="System.Decimal"/> number.</para>
		</summary>
		<param name="value">An 8-bit signed integer. </param>
		<returns>
			<para>The 8-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<seealso cref="System.Decimal"/>
	</doc><doc for="Convert.ToDecimal3">
		<summary>
			<para> Converts the value of the specified 16-bit signed integer to an
      equivalent <see cref="System.Decimal"/> number.
      </para>
		</summary>
		<param name="value">A 16-bit signed integer. </param>
		<returns>
			<para> A <see cref="System.Decimal"/> number equivalent to the value of
<paramref name="value"/>.
   </para>
		</returns>
		<seealso cref="System.Decimal"/>
	</doc><doc for="Convert.ToDecimal4">
		<summary>
			<para>Converts the value of the specified 16-bit unsigned integer to the equivalent <see cref="System.Decimal"/> number.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer. </param>
		<returns>
			<para>The <see cref="System.Decimal"/> number equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<seealso cref="System.Decimal"/>
	</doc><doc for="Convert.ToDecimal6">
		<summary>
			<para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent <see cref="System.Decimal"/> number.
      </para>
		</summary>
		<param name="value">A 32-bit unsigned integer. </param>
		<returns>
			<para> A <see cref="System.Decimal"/> number equivalent to the value of
<paramref name="value"/>.
   </para>
		</returns>
		<seealso cref="System.Decimal"/>
	</doc><doc for="Convert.ToDecimal8">
		<summary>
			<para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent <see cref="System.Decimal"/> number.
      </para>
		</summary>
		<param name="value">A 64-bit unsigned integer. </param>
		<returns>
			<para> A <see cref="System.Decimal"/> number equivalent to the value of
<paramref name="value"/>.
   </para>
		</returns>
		<seealso cref="System.Decimal"/>
	</doc><doc for="Convert.ToDecimal12">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an equivalent
<see cref="System.Decimal"/> number using the
   specified culture-specific formatting information.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>A <see cref="System.Decimal"/> number equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine) and an optional decimal point symbol.</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Decimal.MinValue"/> or greater than <see cref="System.Decimal.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.Decimal.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
			<para><paramref name="provider"/> is an <see langword="IFormatProvider"/> instance that obtains
a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see langword="NumberFormatInfo"/> object provides culture-specific information 
about the format of <paramref name="value"/>. If <paramref name="provider"/> is <see langword="null"/>,
the <see langword="NumberFormatInfo"/> for the current culture is used.</para>
		</remarks>
	</doc><doc for="Convert.ToDecimal16">
		<summary>
			<para> Converts the value of the specified Boolean value
      to the equivalent <see cref="System.Decimal"/> number.
      </para>
		</summary>
		<param name="value">A Boolean value. </param>
		<returns>
			<para> The number 1 if <paramref name="value"/> is <see langword="true"/> ; otherwise, 0.
   </para>
		</returns>
		<seealso cref="System.Decimal"/>
	</doc><doc for="Convert.ToString32">
		<summary>
			<para>Converts the value of the specified <see cref="System.Decimal"/> number to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
   This implementation is identical to <see cref="System.Decimal.ToString" qualify="true"/>.
</remarks>
	</doc><doc for="Convert.IsDBNull">
		<summary>
			<para>Returns an indication whether the specified object is of 
      type <see cref="System.TypeCode.DBNull"/>.</para>
		</summary>
		<param name="value">An object.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is of type <see cref="System.TypeCode.DBNull" qualify="true"/>; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc><doc for="Convert.ToString14">
		<summary>
			<para>Converts the value of the specified <see cref="System.DateTime"/> to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.DateTime.ToString" qualify="true"/>. </para>
		</remarks>
	</doc><doc for="Convert.ToString33">
		<summary>
			<para>Converts the value of the specified <see cref="System.DateTime"/> to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para>This implementation is identical to <see cref="System.DateTime.ToString" qualify="true"/>.</para>
		</remarks>
	</doc><doc for="Convert.ToDateTime2">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a date and time to an
   equivalent <see cref="System.DateTime"/>.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a date and time to convert. </param>
		<returns>
			<para>A <see cref="System.DateTime"/> equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> is not a properly formatted date and time.</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.DateTime.MinValue"/> or greater than <see cref="System.DateTime.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.DateTime.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
		</remarks>
	</doc><doc for="Convert.ToDateTime3">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an equivalent
<see cref="System.DateTime"/> using the
   specified culture-specific formatting information.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>A <see cref="System.DateTime"/> equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> is not a properly formatted date and time.</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.DateTime.MinValue"/> or greater than <see cref="System.DateTime.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.DateTime.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
			<para><paramref name="provider"/> is an <see langword="IFormatProvider"/> instance that obtains
a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see langword="NumberFormatInfo"/> object provides culture-specific information 
about the format of <paramref name="value"/>. If <paramref name="provider"/> is <see langword="null"/>,
the <see langword="NumberFormatInfo"/> for the current culture is used.</para>
		</remarks>
	</doc><doc for="Convert.ToDateTime1">
		<summary>
			<para> Converts the value of the specified <see cref="System.Object"/> to a <see cref="System.DateTime"/>
using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface. </param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> A <see cref="System.DateTime"/> equivalent to the value of
<paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>.
   </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToDateTime "/>method of the underlying type of <paramref name="value"/>.</para>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a date, <paramref name="provider"/> could supply culture-specific information about the notation used to represent that date.</para>
			<para>The base types ignore <paramref name="provider"/>; however, it is honored if <paramref name="value"/> is a user-defined type that implements the <see cref="System.IConvertible"/> interface. </para>
		</remarks>
	</doc><doc for="Convert.ToSingle10">
		<summary>
			<para>Converts the value of the specified <see cref="System.Decimal"/> number to an equivalent
   single-precision floating point number. </para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<returns>
			<para>A single-precision floating point number equivalent to the value of <paramref name="value"/>.</para>
			<para><paramref name="value "/>is rounded using rounding to nearest. For example, when rounded
to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes
2.36.</para>
		</returns>
	</doc><doc for="Convert.ToBoolean15">
		<summary>
			<para> Returns the specified Boolean value; no actual conversion is performed.</para>
		</summary>
		<param name="value">A Boolean.</param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
		<seealso cref="System.Boolean"/>
	</doc><doc for="Convert.ToChar12">
		<summary>
			<para>Returns the specified Unicode character value; no actual conversion is performed.</para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
	</doc><doc for="Convert.ToSByte16">
		<summary>
			<para>Returns the specified 8-bit signed integer; no actual conversion is performed.</para>
		</summary>
		<param name="value">An 8-bit signed integer.</param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
	</doc><doc for="Convert.ToByte16">
		<summary>
			<para>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer.</param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
	</doc><doc for="Convert.ToInt1616">
		<summary>
			<para>Returns the specified 16-bit signed integer; no actual conversion is performed.</para>
		</summary>
		<param name="value">A 16-bit signed integer.</param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
	</doc><doc for="Convert.ToUInt1616">
		<summary>
			<para>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</para>
		</summary>
		<param name="value">A 16-bit unsigned integer.</param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
	</doc><doc for="Convert.ToInt3216">
		<summary>
			<para>Returns the specified 32-bit signed integer; no actual conversion is performed.</para>
		</summary>
		<param name="value">A 32-bit signed integer.</param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
	</doc><doc for="Convert.ToUInt3216">
		<summary>
			<para>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</para>
		</summary>
		<param name="value">A 32-bit unsigned integer.</param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
	</doc><doc for="Convert.ToInt6416">
		<summary>
			<para>Returns the specified 64-bit signed integer; no actual conversion is performed.</para>
		</summary>
		<param name="value">A 64-bit signed integer.</param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
	</doc><doc for="Convert.ToUInt6416">
		<summary>
			<para>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</para>
		</summary>
		<param name="value">A 64-bit unsigned integer.</param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
	</doc><doc for="Convert.ToSingle14">
		<summary>
			<para>Returns the specified single-precision floating point number; no actual conversion is performed.</para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
		<seealso cref="System.Single"/>
	</doc><doc for="Convert.ToDouble16">
		<summary>
			<para>Returns the specified double-precision floating point number; no actual
      conversion is performed.</para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
		<seealso cref="System.Double"/>
	</doc><doc for="Convert.ToDecimal15">
		<summary>
			<para>Returns the specified <see cref="System.Decimal"/> number; no actual conversion is performed.</para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
	</doc><doc for="Convert.ToDateTime17">
		<overload>
			<para>Converts a specified value to a <see cref="System.DateTime"/>.</para>
		</overload>
		<summary>
			<para>Returns the specified <see cref="System.DateTime"/>; no actual conversion is performed.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
	</doc><doc for="Convert.ToString34">
		<summary>
			<para>Returns the specified instance of <see cref="System.String"/>; no actual conversion is performed.</para>
		</summary>
		<param name="value">A <see cref="System.String"/>.</param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
	</doc><doc for="Convert.ToString35">
		<summary>
			<para>Returns the specified instance of <see cref="System.String"/>; no actual conversion is performed.</para>
		</summary>
		<param name="value">A <see cref="System.String"/>.</param>
		<param name="provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
		<returns>
			<para>Parameter <paramref name="value"/> is returned unchanged.</para>
		</returns>
		<remarks>
			<para>This method ignores the <paramref name="provider"/> parameter.</para>
		</remarks>
	</doc><doc for="Convert.ChangeType1">
		<summary>
			<para>Returns an <see cref="System.Object"/> with the specified <see cref="System.TypeCode"/> and whose value is equivalent to the specified
   object. A parameter supplies culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface.</param>
		<param name=" typeCode">A <see cref="System.TypeCode"/>.</param>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para>An object whose underlying <see cref="System.TypeCode"/> is
<paramref name="typeCode"/> and whose value is equivalent to <paramref name="value"/>.
   </para>
			<para>-or-</para>
			<para><see langword="null"/> if <paramref name="value"/> is
<see langword="null"/> and <paramref name="typeCode"/> is <see cref="System.TypeCode.Empty" qualify="true"/>. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="typeCode"/> is invalid.</exception>
		<remarks>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion
   information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply
   culture-specific information about the notation used to represent that
   number.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="ChangeType"/>:</para>
			<codelink SampleID="convertchangetype" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Convert.ChangeType2">
		<summary>
			<para>Returns an <see cref="System.Object"/> with the specified <see cref="System.Type"/> and whose value is equivalent to the specified object.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface.</param>
		<param name=" conversionType">A <see cref="System.Type"/>.</param>
		<returns>
			<para>An object whose <see cref="System.Type"/> is <paramref name="conversionType"/>
and whose value is equivalent to <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>This method uses the current thread's culture for the
      conversion.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="ChangeType"/>:</para>
			<codelink SampleID="convertchangetype" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Convert.ChangeType3">
		<summary>
			<para>Returns an <see cref="System.Object"/> with the specified
<see cref="System.Type"/> and whose value is equivalent to the specified
   object. A parameter supplies culture-specific formatting information.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface.</param>
		<param name=" conversionType">A <see cref="System.Type"/>.</param>
		<param name=" provider">An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para> An object whose <see cref="System.Type"/> is
<paramref name="conversionType"/> and whose value is equivalent to <paramref name="value"/>.
   </para>
			<para>-or-</para>
			<para><see langword="null"/>, if <paramref name="value"/> and <paramref name="conversionType"/>
are <see langword="nulls"/>. </para>
			<para>-or-</para>
			<para><paramref name="value"/>, if the <see cref="System.Type"/> of
<paramref name="value"/> and <paramref name="conversionType"/> are equal. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/> and <paramref name="conversionType"/> is not <see langword="null"/> or equal to the <see cref="System.Type"/> of <paramref name="value"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="conversionType"/> is invalid.</exception>
		<remarks>
			<para><paramref name="provider"/> enables the user to specify culture-specific conversion
   information about the contents of <paramref name="value"/>. For example, if <paramref name="value"/> is a <see cref="System.String"/> that represents a number, <paramref name="provider"/> could supply
   culture-specific information about the notation used to represent that
   number.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="ChangeType"/>:</para>
			<codelink SampleID="convertchangetype" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Convert.GetTypeCode">
		<summary>
			<para>Returns the <see cref="System.TypeCode"/> for the specified object.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface.</param>
		<returns>
			<para>The <see cref="System.TypeCode" qualify="true"/> for <paramref name="value"/>, or <see cref="System.TypeCode.Empty" qualify="true"/> if <paramref name="value"/>
is <see langword="null"/>
.</para>
		</returns>
	</doc>
	<doc for="Convert.ToBoolean10">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a logical
   value to its Boolean equivalent.</para>
		</summary>
		<param name="value">A <see cref="System.String"/> that contains the value of either <see cref="System.Boolean.TrueString"/> or <see cref="System.Boolean.FalseString"/>.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> equals <see cref="System.Boolean.TrueString"/>, or
<see langword="false"/> if <paramref name="value"/> equals <see cref="System.Boolean.FalseString"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
		<exception cref="System.FormatException"><paramref name="value"/> is not equal to <see cref="System.Boolean.TrueString"/> or <see cref="System.Boolean.FalseString"/></exception>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToBoolean"/>, 
   taking a <see cref="System.String"/> parameter.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="12"/>
		</example>
		<seealso cref="System.String"/>
	</doc>
	<doc for="Convert.ToBoolean16">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a logical value to
   its Boolean equivalent
   using the specified culture-specific formatting information.</para>
		</summary>
		<param name="value">A string that contains the value of either <see cref="System.Boolean.TrueString"/> or <see cref="System.Boolean.FalseString"/>.</param>
		<param name=" provider">(Reserved) An <see cref="System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> equals <see cref="System.Boolean.TrueString"/>, or
<see langword="false"/> if <paramref name="value"/> equals <see cref="System.Boolean.FalseString"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="value"/> is a null reference.</exception>
		<exception cref="System.FormatException"><paramref name="value"/> is not equal to <see cref="System.Boolean.TrueString"/> or <see cref="System.Boolean.FalseString"/></exception>
		<remarks>
			<para><paramref name="provider"/> is ignored; it does not participate in
   this operation.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToBoolean"/>, 
   taking a <see cref="System.String"/> parameter.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="12"/>
		</example>
		<seealso cref="System.String"/>
	</doc>
	<doc for="Convert.ToBoolean12">
		<summary>
			<para>Converts the value of the specified double-precision floating point number to an equivalent Boolean value.</para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is not zero; otherwise, <see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToBoolean"/>, 
   taking a <see cref="System.Double"/> as a parameter.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="1"/>
		</example>
		<seealso cref="System.Double"/>
	</doc>
	<doc for="Convert.ToBoolean">
		<overload>
			<para> Converts a specified value
      to an equivalent Boolean value.</para>
		</overload>
		<summary>
			<para>Converts the value of a specified <see cref="System.Object"/> to an equivalent Boolean
   value. </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>.</param>
		<returns>
			<para><see langword="false"/> if <paramref name="value"/> equals <see langword="null"/>.</para>
			<para>-or-</para>
			<para><see langword="true"/> or <see langword="false"/> ; the result of invoking the <see langword="IConvertible.ToBoolean "/> method for the
underlying type of <paramref name="value"/>.</para>
		</returns>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToBoolean"/>, 
   converting a string value to a Boolean type.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="12"/>
		</example>
		<seealso cref="System.Object"/>
	</doc>
	<doc for="Convert.ToBoolean18">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.DateTime"/>.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="ToBoolean"/>, attempting to convert a <see cref="System.DateTime"/> value to a 
      Boolean type and throwing the expected <see cref="System.InvalidCastException"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="20"/>
		</example>
	</doc>
	<doc for="Convert.ToChar7">
		<summary>
			<para> Converts the first character of a
   <see cref="System.String"/>
   to a Unicode character.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> of length 1 or <see langword="null"/>. </param>
		<returns>
			<para> The Unicode character equivalent to the first and only character in <paramref name="value"/>.
			</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
		<exception cref="System.FormatException">The length of <paramref name="value"/> is not 1. </exception>
		<remarks>
			<para><paramref name="value"/> must be <see langword="null"/> or a <see cref="System.String"/>
containing a single character.</para>
		</remarks>
		<example>
   The following code sample illustrates the use of <see langword="ToByte"/>,
   by attempting to convert a <see cref="System.String"/> value to a <see cref="System.Char"/>:
<codelink SampleID="System.Convert Snippets" SnippetID="14"/>
		</example>
	</doc>
	<doc for="Convert.ToByte">
		<overload>
			<para> Converts a specified value to an 8-bit unsigned integer.
      </para>
		</overload>
		<summary>
			<para> Converts the value of the specified
   <see cref="System.Object"/> to an 8-bit unsigned integer.
      </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>. </param>
		<returns>
			<para>An 8-bit unsigned integer equivalent to the value of <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToByte "/>method of the underlying type of <paramref name="value"/>.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToByte"/>, 
   converting a <see cref="System.String"/> value to a <see cref="System.Byte"/>:</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="13"/>
		</example>
	</doc>
	<doc for="Convert.ToByte8">
		<summary>
			<para>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than <see cref="System.Byte.MinValue" qualify="true"/> or greater than <see cref="System.Byte.MaxValue" qualify="true"/>. </exception>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToByte"/>,
   converting an <see cref="System.Int64"/> (long) value to a <see cref="System.Byte"/>:</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="9"/>
		</example>
	</doc>
	<doc for="Convert.ToByte10">
		<summary>
			<para>Converts the value of the specified single-precision floating point number to an equivalent 8-bit unsigned integer.</para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 8-bit signed integer. If <paramref name="value "/>is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Byte.MaxValue" qualify="true"/> or less than <see cref="System.Byte.MinValue" qualify="true"/>. </exception>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToByte"/>, 
   converting a <see cref="System.Single"/> (float) value to a <see cref="System.Byte"/>:</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="19"/>
		</example>
	</doc>
	<doc for="Convert.ToByte11">
		<summary>
			<para>Converts the value of the specified double-precision floating point number to an equivalent 8-bit unsigned integer.</para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 8-bit signed integer. If <paramref name="value "/>is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Byte.MaxValue" qualify="true"/> or less than <see cref="System.Byte.MinValue" qualify="true"/>. </exception>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToByte"/>, 
   converting a <see cref="System.Double"/> value to a <see cref="System.Byte"/>:</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Convert.ToByte12">
		<summary>
			<para>Converts the value of the specified
   <see cref="System.Decimal"/> number to an equivalent 8-bit unsigned integer.</para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 8-bit signed integer. If <paramref name="value "/>is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Byte.MaxValue" qualify="true"/> or less than <see cref="System.Byte.MinValue" qualify="true"/>. </exception>
		<remarks>
			<para>The following code sample illustrates the use of <see langword="ToByte"/>,
   converting a <see cref="System.Decimal"/> value to a <see cref="System.Byte"/>:</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="18"/>
		</remarks>
	</doc>
	<doc for="Convert.ToByte13">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent 8-bit unsigned integer.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<returns>
			<para>An 8-bit unsigned integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Byte.MinValue"/> or greater than <see cref="System.Byte.MaxValue"/>.</exception>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToByte"/>, 
   converting a <see cref="System.String"/> value to a <see cref="System.Byte"/>:</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="13"/>
		</example>
		<seealso cref="System.Byte.Parse" qualify="true"/>
	</doc>
	<doc for="Convert.ToChar">
		<overload>
			<para> Converts a specified value to a Unicode character.
      </para>
		</overload>
		<summary>
			<para>Converts the value of the specified
   <see cref="System.Object"/> to a Unicode character.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface.</param>
		<returns>
			<para>The Unicode character equivalent to the
      value of <paramref name="value"/>.</para>
			<para>-or-</para>
			<para><see cref="System.Char.MinValue" qualify="true"/> if <paramref name="value"/> equals <see langword="null"/>.</para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement the <see cref="System.IConvertible"/> interface.</exception>
		<remarks>
			<para>The return value is the result of invoking the
   <see langword="IConvertible.ToChar "/>method
      of the underlying type of <paramref name="value"/>.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToByte"/>,
   by attempting to convert a <see cref="System.String"/> value to a <see cref="System.Char"/>:
   </para>
			<codelink SampleID="System.Convert Snippets" SnippetID="14"/>
		</example>
	</doc>
	<doc for="Convert.ToChar13">
		<summary>
			<para>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para>The Unicode character equivalent to the value of
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than <see cref="System.Char.MinValue" qualify="true"/> or greater than <see cref="System.Char.MaxValue" qualify="true"/>. </exception>
		<example>
			<para>The following code sample attempts to convert an <see cref="System.Int64"/> to <see cref="System.Char"/>, 
   throwing <see cref="System.OverflowException"/> on failure.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="8"/>
		</example>
	</doc>
	<doc for="Convert.ToChar10">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<example>
			<para>The following code sample attempts to convert a <see cref="System.Decimal"/> to <see cref="System.Char"/>, 
   throwing <see cref="System.InvalidCastException"/> on failure.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="17"/>
		</example>
	</doc>
	<doc for="Convert.ToDecimal">
		<overload>
			<para> Converts a specified value to a <see cref="System.Decimal"/> number.
   </para>
		</overload>
		<summary>
			<para> Converts the value of the specified
   <see cref="System.Object"/> to a <see cref="System.Decimal"/> number.
      </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>. </param>
		<returns>
			<para>A <see cref="System.Decimal"/> number equivalent to the value of <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToDecimal "/>method of the underlying type of <paramref name="value"/>.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToDecimal"/>, 
   by attempting to convert a <see cref="System.String"/> to a <see cref="System.Decimal"/> and throwing any of the possible
   exceptions that may arise during the conversion.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="15"/>
		</example>
		<seealso cref="System.Decimal"/>
	</doc>
	<doc for="Convert.ToDecimal14">
		<summary>
			<para>Calling this method always throws <see cref="System.InvalidCastException"/>.</para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>This conversion is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.InvalidCastException">This conversion is not supported.</exception>
		<remarks>
			<para>This method is reserved for future use.</para>
		</remarks>
		<example>
			<para>The following code sample attempts to convert 
      a <see cref="System.Char"/>
      value to <see cref="System.Decimal"/>, throwing <see cref="System.InvalidCastException"/>
      upon failure.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="17"/>
		</example>
		<seealso cref="System.Char"/>
	</doc>
	<doc for="Convert.ToDecimal7">
		<summary>
			<para> Converts the value of the specified 64-bit signed integer to an
      equivalent <see cref="System.Decimal"/> number.
      </para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para> A <see cref="System.Decimal"/> number equivalent to the value of
<paramref name="value"/>.
   </para>
		</returns>
		<example>
			<para>The following code sample illustrates the conversion of an <see cref="System.Int64"/> value to 
   a <see cref="System.Decimal"/>
   one, using <see langword="ToDecimal"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="10"/>
		</example>
		<seealso cref="System.Decimal"/>
	</doc>
	<doc for="Convert.ToDecimal10">
		<summary>
			<para>Converts the value of the specified double-precision floating point number to an
      equivalent <see cref="System.Decimal"/> number. </para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<returns>
			<para>A <see cref="System.Decimal"/> number equivalent to the value of <paramref name="value"/>.
   The <see cref="System.Decimal"/>
   contains 15 significant digits and is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</para>
		</returns>
		<exception cref="OverflowException">The numeric value of <paramref name="value"/> is greater than <see cref="System.Decimal.MaxValue"/> or less than <see cref="System.Decimal.MinValue"/>.</exception>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Double"/> value to 
   a <see cref="System.Decimal"/>
   one, using <see langword="ToDecimal"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="5"/>
		</example>
		<seealso cref="System.Double"/>
	</doc>
	<doc for="Convert.ToDecimal11">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent <see cref="System.Decimal"/> number.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<returns>
			<para>A <see cref="System.Decimal"/> number equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine) and an optional decimal point symbol.</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Decimal.MinValue"/> or greater than <see cref="System.Decimal.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.Decimal.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="ToDecimal"/>, 
   by attempting to convert a <see cref="System.String"/> to a <see cref="System.Decimal"/> and throwing any of the possible
   exceptions that may arise during the conversion.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="15"/>
		</example>
	</doc>
	<doc for="Convert.ToDateTime">
		<overload>
			<para> Converts a specified value to a <see cref="System.DateTime"/>.
   </para>
		</overload>
		<summary>
			<para> Converts the value of the specified
   <see cref="System.Object"/> to a <see cref="System.DateTime"/>.
      </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>. </param>
		<returns>
			<para>A <see cref="System.DateTime"/> equivalent to the value of <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToDateTime "/>method of the underlying type of <paramref name="value"/>.</para>
		</remarks>
		<example>
		</example>
	</doc>
	<doc for="Convert.ToDouble">
		<overload>
			<para> Converts a specified value to a double-precision floating point number.
      </para>
		</overload>
		<summary>
			<para> Converts the value of the specified
   <see cref="System.Object"/> to a double-precision floating point number.
      </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>. </param>
		<returns>
			<para>A double-precision floating point number equivalent to the value of <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToDouble "/>method of the underlying type of <paramref name="value"/>.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.String"/> to <see cref="System.Double"/> using 
<see langword="ToDouble"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="7"/>
		</example>
	</doc>
	<doc for="Convert.ToDouble2">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating point number.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para>The double-precision floating point number equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Byte"/> value to a <see cref="System.Double"/> one, using <see langword="ToDouble"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Convert.ToDouble9">
		<summary>
			<para> Converts the value of the specified single-precision floating point number to an
      equivalent double-precision floating point number.
      </para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<returns>
			<para>A double-precision floating point number equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Single"/> value to a 
<see cref="System.Double"/> one, 
   using <see langword="ToDouble"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="6"/>
		</example>
		<seealso cref="System.Single"/>
	</doc>
	<doc for="Convert.ToDouble10">
		<summary>
			<para>Converts the value of the specified <see cref="System.Decimal"/> number to an equivalent
   double-precision floating point number. </para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<returns>
			<para>A double-precision floating point number equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Decimal"/> value to a 
<see cref="System.Double"/> one, 
   using <see langword="ToDouble"/>. Note that if the
<see langword="Decimal"/> passed is larger than <see cref="System.Double.MaxValue"/>, an 
<see langword="OverflowException"/> will result.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="5"/>
		</example>
	</doc>
	<doc for="Convert.ToDouble11">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent double-precision floating point number.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<returns>
			<para>A double-precision floating point number equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Double.MinValue"/> or greater than <see cref="System.Double.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.Double.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.String"/> value to a <see cref="System.Double"/> one, using <see langword="ToDouble"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="6,7"/>
		</example>
	</doc>
	<doc for="Convert.ToDouble18">
		<summary>
			<para> Converts the value of the specified Boolean value
      to the equivalent double-precision floating point number.
      </para>
		</summary>
		<param name="value">A Boolean value. </param>
		<returns>
			<para> The number 1 if <paramref name="value"/> is <see langword="true"/> ; otherwise, 0.
   </para>
		</returns>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Boolean"/> value to a <see cref="System.Double"/> one, using <see langword="ToDouble"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Convert.ToDecimal2">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to the equivalent <see cref="System.Decimal"/> number.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para>The <see cref="System.Decimal"/> number equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Byte"/> value to a <see cref="System.Decimal"/> one, using 
<see langword="ToDecimal"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="18"/>
		</example>
		<seealso cref="System.Decimal"/>
	</doc>
	<doc for="Convert.ToDecimal5">
		<summary>
			<para>Converts the value of the specified 32-bit signed integer to an equivalent <see cref="System.Decimal"/> number. </para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para>A <see cref="System.Decimal"/> number equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<seealso cref="System.Decimal"/>
	</doc>
	<doc for="Convert.ToDecimal9">
		<summary>
			<para>Converts the value of the specified single-precision floating point number to
      the equivalent <see cref="System.Decimal"/> number. </para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<returns>
			<para>A <see cref="System.Decimal"/> number equivalent to the value of <paramref name="value"/>. The <see cref="System.Decimal"/>
contains 7 significant digits and is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</para>
		</returns>
		<seealso cref="System.Single"/>
	</doc>
	<doc for="Convert.ToInt16">
		<overload>
			<para> Converts a specified value to a 16-bit signed integer.
      </para>
		</overload>
		<summary>
			<para> Converts the value of the specified
   <see cref="System.Object"/> to a 16-bit signed integer.
      </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>. </param>
		<returns>
			<para>A 16-bit signed integer equivalent to the value of <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToInt16 "/>method of the underlying type of <paramref name="value"/>.</para>
		</remarks>
	</doc>
	<doc for="Convert.ToInt3211">
		<summary>
			<para>Converts the value of the specified double-precision floating point number to an
      equivalent 32-bit signed integer. </para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 32-bit signed integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int32.MaxValue" qualify="true"/> or less than <see cref="System.Int32.MinValue" qualify="true"/>. </exception>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Double"/> value to 
   an <see cref="System.Int32"/>,
   using <see langword="ToInt32"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="3"/>
		</example>
		<seealso cref="System.Double"/>
	</doc>
	<doc for="Convert.ToInt3213">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent 32-bit signed integer.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<returns>
			<para>A 32-bit signed integer equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Int32.MinValue"/> or greater than <see cref="System.Int32.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.Int32.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
		</remarks>
	</doc>
	<doc for="Convert.ToInt6415">
		<summary>
			<para>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer. </para>
		</summary>
		<param name="value">A Unicode character.</param>
		<returns>
			<para>The 64-bit signed integer equivalent to
   <paramref name="value"/>.</para>
		</returns>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Char"/> value to an <see cref="System.Int64"/>, using <see langword="ToInt64"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="8"/>
		</example>
	</doc>
	<doc for="Convert.ToInt643">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para>The 64-bit signed integer equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Byte"/> value to 
   an <see cref="System.Int64"/>,
   using <see langword="ToInt64"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="9"/>
		</example>
	</doc>
	<doc for="Convert.ToInt649">
		<summary>
			<para> Converts the value of the specified single-precision floating point number to an
      equivalent 64-bit signed integer.
      </para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 64-bit signed integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int64.MaxValue" qualify="true"/> or less than <see cref="System.Int64.MinValue" qualify="true"/>. </exception>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Single"/> value to 
   an <see cref="System.Int64"/>,
   using <see langword="ToInt64"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="11"/>
		</example>
		<seealso cref="System.Single"/>
	</doc>
	<doc for="Convert.ToInt6410">
		<summary>
			<para>Converts the value of the specified double-precision floating point number to an
      equivalent 64-bit signed integer. </para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<returns>
			<para><paramref name="value"/> rounded to the nearest 64-bit signed integer. If <paramref name="value "/> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> is greater than <see cref="System.Int64.MaxValue" qualify="true"/> or less than <see cref="System.Int64.MinValue" qualify="true"/>. </exception>
		<seealso cref="System.Double"/>
	</doc>
	<doc for="Convert.ToSingle">
		<overload>
			<para> Converts a specified value to a single-precision floating point number.
      </para>
		</overload>
		<summary>
			<para> Converts the value of the specified
   <see cref="System.Object"/> to a single-precision floating point number.
      </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface or <see langword="null"/>. </param>
		<returns>
			<para>A single-precision floating point number equivalent to the value of <paramref name="value"/>, or zero if <paramref name="value"/> is <see langword="null"/>. </para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see langword="IConvertible.ToSingle "/>method of the underlying type of <paramref name="value"/>.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.String"/> to <see cref="System.Single"/>, using 
<see langword="ToSingle"/>:</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="16"/>
		</example>
	</doc>
	<doc for="Convert.ToSingle2">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating point number.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para>The single-precision floating point number equivalent to the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para>The following code sample illustrates the conversion of a <see cref="System.Byte"/> to <see cref="System.Single"/>, using 
<see langword="ToSingle"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="19"/>
		</remarks>
	</doc>
	<doc for="Convert.ToSingle7">
		<summary>
			<para> Converts the value of the specified 64-bit signed integer to an
      equivalent single-precision floating point number.
      </para>
		</summary>
		<param name="value">A 64-bit signed integer. </param>
		<returns>
			<para> A single-precision floating point number equivalent to the value of
   <paramref name="value"/>.
      </para>
		</returns>
		<example>
   The following code sample illustrates the conversion of an <see cref="System.Int64"/> to <see cref="System.Single"/>, using
<see langword="ToSingle"/>. Note that large <see langword="Int64"/> values can 
   cause <see cref="System.OverflowException"/> to be thrown.
   
<codelink SampleID="System.Convert Snippets" SnippetID="11"/>
		</example>
	</doc>
	<doc for="Convert.ToSingle9">
		<summary>
			<para>Converts the value of the specified double-precision floating point number to an
      equivalent single-precision floating point number. </para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<returns>
			<para>A single-precision floating point number equivalent to the value of <paramref name="value"/>. </para>
			<paramref name="value "/>is rounded using rounding to nearest. For example, when rounded to
two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.
</returns>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Double"/> to <see cref="System.Single"/>, using 
<see langword="ToSingle"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="6"/>
		</example>
		<seealso cref="System.Double"/>
	</doc>
	<doc for="Convert.ToSingle11">
		<summary>
			<para> Converts the specified <see cref="System.String"/> representation of a number to an
   equivalent single-precision floating point number.
   </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number to convert. </param>
		<returns>
			<para>A single-precision floating point number equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is <see langword="null"/>. </exception>
		<exception cref="System.FormatException"><paramref name="value"/> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
		<exception cref="System.OverflowException"><paramref name="value"/> represents a number less than <see cref="System.Single.MinValue"/> or greater than <see cref="System.Single.MaxValue"/>.</exception>
		<remarks>
			<para>The return value is the result of invoking the <see cref="System.Single.Parse" qualify="true"/> method on
<paramref name="value"/>.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.String"/> to <see cref="System.Single"/>, using 
<see langword="ToSingle"/>:</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="16"/>
		</example>
	</doc>
	<doc for="Convert.ToDouble5">
		<summary>
			<para>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating point number. </para>
		</summary>
		<param name="value">A 32-bit signed integer. </param>
		<returns>
			<para>A double-precision floating point number equivalent to the value of <paramref name="value"/>. </para>
		</returns>
		<example>
			<para>The following code sample illustrates the conversion of an <see cref="System.Int32"/> value to a <see cref="System.Double"/> one, using <see langword="ToDouble"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="3"/>
		</example>
	</doc>
	<doc for="Convert.ToString">
		<overload>
			<para>Converts the specified value to its equivalent <see cref="System.String"/> representation. </para>
		</overload>
		<summary>
			<para>Converts the value of the specified <see cref="System.Object"/> to its
<see cref="System.String"/> 
representation. </para>
		</summary>
		<param name="value">An <see cref="System.Object"/> or <see langword="null"/>. </param>
		<returns>
			<para>The <see cref="System.String"/>
representation of the value of <paramref name="value"/>, or <see cref="System.String.Empty" qualify="true"/> if value
is <see langword="null"/>.</para>
		</returns>
		<remarks>
			<para>The return value is the result of invoking the <see langword="ToString"/> method of the underlying type of <paramref name="value"/>.</para>
		</remarks>
	</doc>
	<doc for="Convert.ToString1">
		<summary>
			<para>Converts the value of the specified Boolean to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A Boolean value. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para>This implementation is identical to <see cref="System.Boolean.ToString" qualify="true"/>. </para>
		</remarks>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Boolean"/> to 
   a <see cref="System.String"/>,
   using <see langword="ToString"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="12"/>
		</example>
	</doc>
	<doc for="Convert.ToString2">
		<summary>
			<para>Converts the value of the specified Unicode character to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A Unicode character. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.Char.ToString" qualify="true"/>. </para>
		</remarks>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Char"/> to a <see cref="System.String"/>, using 
<see langword="ToString"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="14"/>
		</example>
	</doc>
	<doc for="Convert.ToString11">
		<summary>
			<para>Converts the value of the specified single-precision floating point number to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A single-precision floating point number. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.Single.ToString" qualify="true"/>. </para>
		</remarks>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Single"/> to a <see cref="System.String"/>, using 
<see langword="ToString"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="16"/>
		</example>
	</doc>
	<doc for="Convert.ToString12">
		<summary>
			<para>Converts the value of the specified double-precision floating point number to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A double-precision floating point number. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.Double.ToString" qualify="true"/>. </para>
		</remarks>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Double"/> to a <see cref="System.String"/>, using 
<see langword="ToString"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="7"/>
		</example>
	</doc>
	<doc for="Convert.ToString13">
		<summary>
			<para>Converts the value of the specified <see cref="System.Decimal"/> number to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">A <see cref="System.Decimal"/> number. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.Decimal.ToString" qualify="true"/>. </para>
		</remarks>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Decimal"/> to 
   a <see cref="System.String"/>,
   using <see langword="ToString"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="15"/>
		</example>
	</doc>
	<doc for="Convert.ToString4">
		<summary>
			<para>Converts the value of the specified 8-bit unsigned integer to its equivalent <see cref="System.String"/>
representation.</para>
		</summary>
		<param name="value">An 8-bit unsigned integer. </param>
		<returns>
			<para>The <see cref="System.String"/> equivalent of the value of <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> This implementation is identical to <see cref="System.Byte.ToString" qualify="true"/>. </para>
		</remarks>
		<example>
			<para>The following code sample illustrates the conversion of a <see cref="System.Byte"/> to a <see cref="System.String"/>, using 
<see langword="ToString"/>.</para>
			<codelink SampleID="System.Convert Snippets" SnippetID="13"/>
		</example>
	</doc>
	<doc for="Convert.ChangeType">
		<overload>
			<para> Returns an <see cref="System.Object"/> with a specified type and whose
   value is equivalent to a specified object.</para>
		</overload>
		<summary>
			<para> Returns an <see cref="System.Object"/> with the specified <see cref="System.TypeCode"/> and whose
   value is equivalent to the specified object.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that implements the <see cref="System.IConvertible"/> interface.</param>
		<param name=" typeCode">A <see cref="System.TypeCode"/></param>
		<returns>
			<para>An object whose underlying <see cref="System.TypeCode"/> is <paramref name="typeCode"/> and
   whose value is equivalent to <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.InvalidCastException"><paramref name="value"/> does not implement <see cref="System.IConvertible"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="typeCode"/> is invalid.</exception>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="ChangeType"/>, changing the passed <see cref="System.Object"/> to the type 
      specified by the <see cref="System.TypeCode"/> parameter, if possible.</para>
			<codelink SampleID="convertchangetype" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Convert.ToBase64String">
		<overload>
			<para>Converts the value of an array of 8-bit unsigned
      integers to its equivalent <see cref="System.String"/> representation
      consisting
      of base 64 digits.</para>
		</overload>
		<summary>
			<para>Converts the value of an array of 8-bit unsigned integers to its equivalent
   <see cref="System.String"/> representation consisting of base 64 digits.</para>
		</summary>
		<param name="inArray">An array of 8-bit unsigned integers.</param>
		<returns>
			<para>The <see cref="System.String"/> representation, in base 64, of the contents of
<paramref name="inArray"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="inArray"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>The elements of <paramref name="inArray"/> are taken as a numeric
   value and converted to a <see cref="System.String"/> representation consisting of base 64
   digits.</para>
			<para>The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', lowercase
   characters 'a' to 'z', numerals '0' to '9', and the symbols '+' and '/'.
   The valueless character, '=', is used for trailing padding.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Convert.ToBase64String"/> 
method, UUencoding (base 64 encoding) a binary stream and saving it to a
file.</para>
			<codelink SampleID="System.Convert UUEncodeDecode functions" SnippetID="1"/>
		</example>
		<seealso cref="System.Byte"/>
	</doc>
	<doc for="Convert.ToBase64CharArray">
		<summary>
			<para> Converts the value of a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array consisting of
      base 64 digits. Parameters specify the subsets as offsets of the input
      and output arrays and the number of elements in the input array.</para>
		</summary>
		<param name="inArray">An input array of 8-bit unsigned integers.</param>
		<param name=" offsetIn">A position within <paramref name="inArray"/>.</param>
		<param name=" length">The number of elements of <paramref name="inArray"/> to convert.</param>
		<param name=" outArray">An output array of Unicode characters.</param>
		<param name=" offsetOut">A position within <paramref name="outArray"/>.</param>
		<returns>
			<para>A 32-bit signed integer containing the number of bytes
      in <paramref name="outArray"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="inArray"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="offsetIn"/>, <paramref name="offsetOut, "/>or <paramref name="length"/> is negative.</para>
			<para>-or-</para>
			<para><paramref name="offsetIn"/> plus <paramref name="length"/> is greater than the length of <paramref name="inArray"/>.</para>
			<para>-or-</para>
			<para><paramref name="offsetOut"/> plus the number of elements to return is greater than the length of <paramref name="outArray"/>.</para></exception>
		<remarks>
			<para>The subset of <paramref name="length"/> elements
   of <paramref name="inArray "/>starting at
   position <paramref name="offsetIn"/>, are taken as a numeric value and converted
   to a subset of elements in <paramref name="outArray"/> starting at position
<paramref name="offsetOut"/>. The return value indicates the number of converted 
   elements in <paramref name="outArray"/>. The subset of <paramref name="outArray"/> consists of base 64 digits.</para>
			<para>The base 64 digits in ascending order from zero are the uppercase
   characters 'A' to 'Z', lowercase characters 'a' to 'z', numerals '0' to '9', and
   the symbols '+' and '/'. The valueless character, '=', is used for trailing
   padding.</para>
			<para><paramref name="offset"/> and <paramref name="length"/> are 32-bit signed numbers. <paramref name="offsetIn"/> and
<paramref name="offsetOut"/> are 
zero-based array positions.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the <see cref="System.Convert.ToBase64CharArray"/> method, UUencoding (base 64 encoding) a 
   binary stream and saving it to a file.</para>
			<codelink SampleID="System.Convert UUEncodeDecode functions" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Convert.FromBase64String">
		<summary>
			<para>Converts the specified <see cref="System.String"/> representation of
   a value consisting of base 64 digits to an equivalent array of 8-bit unsigned integers.</para>
		</summary>
		<param name="s">A <see cref="System.String"/>.</param>
		<returns>
			<para>An array of 8-bit unsigned integers equivalent to
   <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><para>The length of <paramref name="s"/>, ignoring white space characters, is less than 4.</para>
			<para>-or-</para>
			<para>The length of <paramref name="s"/>, ignoring white space characters, is not an even multiple of 4.</para></exception>
		<remarks>
			<para><paramref name="s "/>is composed of base 64 digits, white space characters, and trailing padding characters. The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', lowercase characters 'a' to 'z', numerals '0' to '9', and the symbols '+' and '/'.</para>
			<para>The white space characters are tab, blank, carriage return, and newline. An arbitrary number of white space characters can appear in <paramref name="s"/> because all white space characters are ignored.</para>
			<para>The valueless character, '=', is used for trailing padding. The end of <paramref name="s"/> can consist of zero, one, or two padding characters.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the use of the <see cref="System.Convert.FromBase64String"/>
method to decode UUencoded (base 64) data and save it as binary output.</para>
			<codelink SampleID="System.Convert UUEncodeDecode functions" SnippetID="4"/>
		</example>
	</doc>
	<doc for="Convert.FromBase64CharArray">
		<summary>
			<para> Converts the specified subset of an array
      of Unicode characters consisting of base 64 digits to an equivalent array of 8-bit unsigned integers. Parameters specify the offset and number of elements in the input array.</para>
		</summary>
		<param name="inArray">A Unicode character array.</param>
		<param name=" offset">A position within <paramref name="inArray"/>.</param>
		<param name=" length">The number of elements in <paramref name="inArray"/> to convert.</param>
		<returns>
			<para>An array of 8-bit unsigned integers equivalent to
   <paramref name="length"/> elements at position <paramref name="offset"/> in <paramref name="inArray"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="inArray"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="offset"/> or <paramref name="length"/> is less than 0.</para>
			<para>-or-</para>
			<para><paramref name="offset"/> plus <paramref name="length"/> indicates a position not within <paramref name="inArray"/>.</para></exception>
		<exception cref="System.FormatException"><para>The length of <paramref name="inArray"/>, ignoring white space characters, is less than 4.</para>
			<para>-or-</para>
			<para>The length of <paramref name="inArray"/>, ignoring white space characters, is not an even multiple of 4.</para></exception>
		<remarks>
			<para><paramref name="inArray"/> is composed of base 64 digits, white space characters, and trailing padding characters. The base 64 digits in ascending order from zero are the uppercase characters 'A' to 'Z', lowercase characters 'a' to 'z', numerals '0' to '9', and the symbols '+' and '/'.</para>
			<para>The white space characters are tab, blank, carriage return, and newline. An arbitrary number of white space characters can appear in <paramref name="inArray"/> because all white space characters are ignored.</para>
			<para>The valueless character, '=', is used for trailing padding. The end of <paramref name="inArray"/> can consist of zero, one, or two padding characters.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates the use of the <see cref="System.Convert.FromBase64CharArray"/> method to decode
   UUencoded (base 64) data and save it as binary output.</para>
			<codelink SampleID="System.Convert UUEncodeDecode functions" SnippetID="3"/>
		</example>
	</doc>
	<doc for="Convert.ToByte14">
		<summary>
			<para> Converts
      the <see cref="System.String"/> representation of a number in a specified
      base to an equivalent 8-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number. </param>
		<param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. </param>
		<returns>
			<para>An 8-bit unsigned integer equivalent to the number in
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16. </exception>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than <see cref="System.Byte.MinValue" qualify="true"/> or greater than <see cref="System.Byte.MaxValue" qualify="true"/>.</exception>
		<remarks>
			<para>If <paramref name="fromBase"/> is 16, you can prefix the number specified by the 
<paramref name="value"/> parameter with "0x" or "0X".</para>
		</remarks>
	</doc>
	<doc for="Convert.ToSByte14">
		<summary>
			<para> Converts
      the <see cref="System.String"/> representation of a number in a specified
      base to an equivalent 8-bit signed integer.
      </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number. </param>
		<param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. </param>
		<returns>
			<para>An 8-bit signed integer equivalent to the number in
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16. </exception>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than <see cref="System.SByte.MinValue" qualify="true"/> or greater than <see cref="System.SByte.MaxValue" qualify="true"/>.</exception>
		<remarks>
			<para>If <paramref name="fromBase"/> is 16, you can prefix the number specified by the <paramref name="value"/> parameter with "0x" or "0X".</para>
		</remarks>
	</doc>
	<doc for="Convert.ToInt1614">
		<summary>
			<para> Converts
      the <see cref="System.String"/> representation of a number in a specified
      base to an equivalent 16-bit signed integer.
      </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number. </param>
		<param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. </param>
		<returns>
			<para>A 16-bit signed integer equivalent to the number in
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16. </exception>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than <see cref="System.Int16.MinValue" qualify="true"/> or greater than <see cref="System.Int16.MaxValue" qualify="true"/>.</exception>
		<remarks>
			<para>If <paramref name="fromBase"/> is 16, you can prefix the number specified by the <paramref name="value"/> parameter with "0x" or "0X".</para>
		</remarks>
	</doc>
	<doc for="Convert.ToUInt1614">
		<summary>
			<para> Converts
      the <see cref="System.String"/> representation of a number in a specified
      base to an equivalent 16-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number. </param>
		<param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. </param>
		<returns>
			<para>A 16-bit unsigned integer equivalent to the number in
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16. </exception>
		<exception cref="System.OverflowException"><paramref name="value"/> is less than <see cref="System.UInt16.MinValue" qualify="true"/> or greater than <see cref="System.UInt16.MaxValue" qualify="true"/>.</exception>
		<remarks>
			<para>If <paramref name="fromBase"/> is 16, you can prefix the number specified by the <paramref name="value"/> parameter with "0x" or "0X".</para>
		</remarks>
	</doc>
	<doc for="Convert.ToInt3214">
		<summary>
			<para> Converts
      the <see cref="System.String"/> representation of a number in a specified
      base to an equivalent 32-bit signed integer.
      </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number. </param>
		<param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. </param>
		<returns>
			<para>A 32-bit signed integer equivalent to the number in
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16. </exception>
		<remarks>
			<para>If <paramref name="fromBase"/> is 16, you can prefix the number specified by the <paramref name="value"/> parameter with "0x" or "0X".</para>
		</remarks>
	</doc>
	<doc for="Convert.ToUInt3214">
		<summary>
			<para> Converts
      the <see cref="System.String"/> representation of a number in a specified
      base to an equivalent 32-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number. </param>
		<param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. </param>
		<returns>
			<para>A 32-bit unsigned integer equivalent to the number in
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16. </exception>
		<remarks>
			<para>If <paramref name="fromBase"/> is 16, you can prefix the number specified by the <paramref name="value"/> parameter with "0x" or "0X".</para>
		</remarks>
	</doc>
	<doc for="Convert.ToInt6413">
		<summary>
			<para> Converts
      the <see cref="System.String"/> representation of a number in a specified
      base to an equivalent 64-bit signed integer.
      </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number. </param>
		<param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. </param>
		<returns>
			<para>A 64-bit signed integer equivalent to the number in
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16. </exception>
		<remarks>
			<para>If <paramref name="fromBase"/> is 16, you can prefix the number specified by the <paramref name="value"/> parameter with "0x" or "0X".</para>
		</remarks>
	</doc>
	<doc for="Convert.ToUInt6413">
		<summary>
			<para> Converts
      the <see cref="System.String"/> representation of a number in a specified
      base to an equivalent 64-bit unsigned integer.
      </para>
		</summary>
		<param name="value">A <see cref="System.String"/> containing a number. </param>
		<param name="fromBase">The base of the number in <paramref name="value"/>, which must be 2, 8, 10, or 16. </param>
		<returns>
			<para>A 64-bit unsigned integer equivalent to the number in
   <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="fromBase"/> is not 2, 8, 10, or 16. </exception>
		<remarks>
			<para>If <paramref name="fromBase"/> is 16, you can prefix the number specified by the <paramref name="value"/> parameter with "0x" or "0X".</para>
		</remarks>
	</doc>
	<doc for="Convert">
		<summary>
			<para>Converts a base data type to another base data type.</para>
		</summary>
		<remarks>
			<para> This class returns a type whose value is equivalent to
      the value of a specified type. The supported base types are <see cref="System.Boolean"/>, <see cref="System.Char"/>, <see cref="System.SByte"/>, <see cref="System.Byte"/>, <see cref="System.Int16"/>, <see cref="System.Int32"/>, <see cref="System.Int64"/>, <see cref="System.UInt16"/>, <see cref="System.UInt32"/>, <see cref="System.UInt64"/>, <see cref="System.Single"/>, <see cref="System.Double"/>, <see cref="System.Decimal"/>, <see cref="System.DateTime"/> and <see cref="System.String"/>.</para>
			<para>A conversion method exists to convert every base type to every other base
      type. However, the actual conversion operation performed falls into three
      categories: </para>
			<list type="bullet"><item>
					<term>
         
         A conversion from a type to itself simply returns
         that type. No conversion is actually performed.</term>
				</item>
				<item>
					<term>
         
         A conversion which cannot yield a meaningful result throws <see cref="System.InvalidCastException"/>. No conversion
         is actually performed. An exception
         is thrown for conversions from <see cref="System.Char"/> to <see cref="System.Boolean"/>, <see cref="System.Single"/>, <see cref="System.Double"/>, <see cref="System.Decimal"/> or <see cref="System.DateTime"/>, and from
         those types to <see cref="System.Char"/>. An exception is thrown for conversions from <see cref="System.DateTime"/> to any type
         except <see cref="System.String"/>, and from any type, except <see cref="System.String"/>, to <see cref="System.DateTime"/>.</term>
				</item>
				<item>
					<term>
         
         Any base type, other than those described above, can be converted to
         and from any other base type.</term>
				</item>
			</list>
			<para>An exception will not be thrown if the conversion of a
   numeric type results in a loss of precision (that is, the loss of some least
   significant digits). However, an exception will be thrown if the result is
   larger than can be represented by the particular conversion method's return
   value type.</para>
			<para> For example, when a <see cref="System.Double"/> is converted to a <see cref="System.Single"/>, a loss of
precision might occur but no exception is thrown. However, if the magnitude of
the <see cref="System.Double"/> is
too large to be represented by a <see cref="System.Single"/>, an overflow
exception is thrown.</para>
			<para>A set of methods support converting an array of bytes to
   and from a <see cref="System.String"/> or array of Unicode characters consisting of base 64
   digit characters. Data expressed as base 64 digits can be easily conveyed over
   data channels that can only transmit 7-bit characters.</para>
			<para> Many of the methods in this class convert a source type
   to a target type by invoking the corresponding <see cref="System.IConvertible"/> explicit
   interface implementation method on the source object. If such a method does not
   exist, an <see cref="System.InvalidCastException"/> is
   thrown.</para>
			<para>Some of the methods in this class take a parameter
   object that implements the <see cref="System.IFormatProvider"/> interface. This parameter can supply culture-specific
   formatting information to assist the conversion process. The base value types
   ignore this parameter, but any user-defined type that implements <see cref="System.IConvertible"/>
   can honor it. </para>
			<para> For more information about the base value types, see the appropriate topic listed in the See Also
   section.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates some of the conversion
      methods in this class, including <see langword="ToInt32"/>,
   <see langword="ToBoolean"/>, and <see langword="ToString"/>
   .</para>
			<codelink SampleID="System.Convert" SnippetID="1"/>
			<codelink SampleID="convert.class" SnippetID="1"/>
		</example>
		<seealso cref="System.Object"/>
		<seealso cref="System.SByte"/>
		<seealso cref="System.Int16"/>
		<seealso cref="System.Int32"/>
		<seealso cref="System.Int64"/>
		<seealso cref="System.Byte"/>
		<seealso cref="System.UInt16"/>
		<seealso cref="System.UInt32"/>
		<seealso cref="System.UInt64"/>
		<seealso cref="System.Single"/>
		<seealso cref="System.Double"/>
		<seealso cref="System.Decimal"/>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.Char"/>
		<seealso cref="System.String"/>
	</doc>
</docs>
