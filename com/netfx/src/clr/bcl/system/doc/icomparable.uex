<docs>
	<doc for="IComparable">
		<summary>
			<para>Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method.</para>
		</summary>
		<remarks>
			<para>This interface is implemented by types whose values can be ordered; for
      example, the numeric and string classes.</para>
			<para> A value type or class
      implements the <see cref="System.IComparable.CompareTo"/> method to create a type-specific comparison
      method suitable for purposes such as sorting.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the implementation of 
   <see langword="IComparable"/> and the requisite <see cref="System.IComparable.CompareTo"/> 
   method.</para>
			<codelink SampleID="IComparable Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IComparable.CompareTo">
		<summary>
			<para> Compares the current instance with another
      object of the same type.</para>
		</summary>
		<param name="obj">An object to compare with this instance.</param>
		<returns>
			<para>A 32-bit signed integer that indicates the relative order of the comparands.
      The return value has these meanings:</para>
			<list type="table">
				<listheader>
					<term>Value </term>
					<description>Meaning </description>
				</listheader>
				<item>
					<term> Less than zero </term>
					<description>This
            instance is less than <paramref name="obj"/>. </description>
				</item>
				<item>
					<term> Zero </term>
					<description>This
            instance is equal to <paramref name="obj"/>. </description>
				</item>
				<item>
					<term> Greater than zero </term>
					<description>This
            instance is greater than <paramref name="obj"/>. </description>
				</item>
			</list>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="obj"/> is not the same type as this instance.</exception>
		<remarks>
			<para>This method is only a definition and must be implemented by a specific class
      or value type to have effect. The meaning of the comparisons, "less than,"
      "equal to," and "greater than," depends on the particular implementation. </para>
			<para>By definition, any object compares greater than
   <see langword="null"/> ; and two
      null references compare equal to each other.</para>
			<para>The parameter, <paramref name="obj"/>, must be the same type as the class or value type
   that implements this interface; otherwise, an
<see langword="ArgumentException"/> is thrown.</para>
			<note type="inotes">
   For any objects A, B and
   C, the following must be true:
</note>
			<para><c>A.CompareTo(A)</c> is required to return zero. </para>
			<para>If <c>A.CompareTo(B)</c> returns zero then <c>B.CompareTo(A)</c>
is required to return zero.</para>
			<para>If <c>A.CompareTo(B)</c> returns zero and <c>B.CompareTo(C)</c> returns zero then <c>A.CompareTo(C)</c>
is required to return zero.</para>
			<para>If <c>A.CompareTo(B)</c> returns a value other than zero then <c>B.CompareTo(A)</c>
is required to return a value of the opposite
sign.</para>
			<para>If <c>A.CompareTo(B)</c> returns a value <paramref name="x"/> not
equal to zero, and <c>B.CompareTo(C)</c>
returns a value <paramref name="y"/> of the same
sign as <paramref name="x"/>, then <c>A.CompareTo(C)</c> is required to return a
value of the same sign as <paramref name="x"/> and <paramref name="y"/>.</para>
			<note type="cnotes">
   Use the
<see langword="CompareTo"/> method to determine the ordering of instances of a 
   class.
</note>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of <see langword="CompareTo"/> 
to compare a Temperature object implementing <see cref="System.IComparable"/> with another
object.</para>
			<codelink SampleID="IComparable Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Object"/>
	</doc>
</docs>
