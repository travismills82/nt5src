<docs>
  <doc for="CallContext">
    <summary>
      <para>This class exposes the API for the users of call context. All methods in
       CallContext are static and operate upon the call context in the Thread.</para>
    </summary>
    <remarks>
      <para>NOTE: CallContext is a specialized form of something that behaves like TLS 
       for method calls. However, since the call objects may get serialized and
       deserialized along the path, it is tough to guarantee identity preservation.</para>
    </remarks>
    <example>
      <para>Shows how code can get and set the call context.</para>
      <codelink SampleID="Classic CallContext Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="CallContext.FreeNamedDataSlot">
    <summary>
      <para>Explicitly frees a named data slot.</para>
    </summary>
    <param name="name">The name of the item in the call context</param>
  </doc>
  <doc for="CallContext.GetData">
    <summary>
      <para>Retrieve 
       an object by name from the CallContext.</para>
    </summary>
    <param name="name">The name of the item in the call context</param>
    <returns>
      <para>The object in the call context.</para>
    </returns>
  </doc>
  <doc for="CallContext.SetData">
    <summary>
      <para>Store an object using a name in the CallContext.</para>
    </summary>
    <param name="name">The name of the item in the call context</param>
    <param name="data">The object to store in the call context</param>
  </doc>
  <doc for="LogicalCallContext">
    <summary>
      <para>
       Reserved.
    </para>
    </summary>
  </doc>
</docs>