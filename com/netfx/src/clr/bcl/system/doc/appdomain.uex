<docs>
	<doc for="CrossAppDomainDelegate">
		<summary>
			<para> Used by <see cref="System.AppDomain.DoCallBack"/>
for cross-application domain calls.</para>
		</summary>
		<remarks>
			<para>Every derived class of <see cref="System.Delegate"/> and <see cref="System.MulticastDelegate"/> has a constructor and an
<see langword="Invoke"/> method. See the 
 Managed Extensions for C++ code example given in the description for <see cref="System.Delegate"/>. </para>
		</remarks>
	</doc><doc for="ResolveEventArgs">
		<summary>
			<para>Provides data for the <see cref="System.AppDomain.TypeResolve"/>,
<see cref="System.AppDomain.ResourceResolve"/>, and <see cref="System.AppDomain.AssemblyResolve"/> events.</para>
		</summary>
	</doc><doc for="ResolveEventArgs.ResolveEventArgs">
		<summary>
			<para>Initializes a new instance of the <see cref="System.ResolveEventArgs"/> class.</para>
		</summary>
		<param name="name">The name of an item to resolve.</param>
		<remarks>
			<para>This constructor is typically only called by the common language runtime.</para>
		</remarks>
	</doc><doc for="AssemblyLoadEventArgs">
		<summary>
			<para>Provides data for the <see cref="System.AppDomain.AssemblyLoad"/> event.</para>
		</summary>
	</doc><doc for="ResolveEventArgs.Name">
		<summary>
			<para> Gets the name of the item to resolve.</para>
		</summary>
		<value>
			<para> 
      The name of the item to resolve.</para>
		</value>
	</doc><doc for="AssemblyLoadEventArgs.LoadedAssembly">
		<summary>
			<para>Gets an <see cref="System.Reflection.Assembly"/> that represents the currently loaded assembly.</para>
		</summary>
		<value>
			<para>An instance of <see cref="System.Reflection.Assembly"/> that represents the currently loaded assembly.</para>
		</value>
		<remarks>
			<para>The value of this property is set by the common language runtime when the
   <see cref="System.AppDomain.AssemblyLoad" qualify="true"/> event occurs.</para>
		</remarks>
	</doc><doc for="AssemblyLoadEventHandler">
		<summary>
			<para> Represents the method that handles the <see cref="System.AppDomain.AssemblyLoad"/>
event of an <see cref="System.AppDomain"/>.</para>
		</summary>
		<param name="sender">The source of the event.</param>
		<param name="args"><para>An <see cref="System.AssemblyLoadEventArgs"/> that contains the event data.</para></param>
		<remarks>
			<para>An <see cref="System.AssemblyLoadEventHandler"/> is used to specify
   the methods that are invoked in response to an <see cref="System.AppDomain.AssemblyLoad"/>
   event. To associate an instance of <see cref="System.AssemblyLoadEventHandler"/>
   with an event, add the instance to the event. The methods referenced by the
<see cref="System.AssemblyLoadEventHandler"/> are invoked whenever an assembly is loaded, 
   until the <see cref="System.AssemblyLoadEventHandler"/>
   
   is removed
   from the event.</para>
		</remarks>
	</doc><doc for="ResolveEventHandler">
		<summary>
			<para> Represents the method that handles the
   <see cref="System.AppDomain.TypeResolve"/>,
   <see cref="System.AppDomain.ResourceResolve"/>, and <see cref="System.AppDomain.AssemblyResolve"/> events of an <see cref="System.AppDomain"/>.</para>
		</summary>
		<param name="sender">The source of the event.</param>
		<param name="args"><para>A <see cref="System.ResolveEventArgs"/> that contains the event data.</para></param>
		<returns>
			<para>The <see cref="System.Reflection.Assembly"/> that resolves the type, assembly, or resource.</para>
		</returns>
		<remarks>
			<para> If the runtime class loader cannot resolve
      a reference to an assembly, type, or resource, then the corresponding events
      are raised to give the callback a chance to tell the runtime which assembly
      the referenced assembly, type, or resource is in. It is the responsibility
      of the <see cref="System.ResolveEventHandler"/>
      to return the assembly that resolves the type, assembly, or resource.</para>
			<para>Every derived class of <see cref="System.Delegate"/> and <see cref="System.MulticastDelegate"/> has a constructor and an
<see langword="Invoke"/> method. 
   See the Managed Extensions for C++ code example in the
   description for the <see cref="System.Delegate"/> class.</para>
		</remarks>
	</doc>
	<doc for="AssemblyLoadEventArgs.AssemblyLoadEventArgs">
		<summary>
			<para>Initializes a new instance of the <see cref="System.AssemblyLoadEventArgs"/>
class using the specified <see cref="System.Reflection.Assembly"/>.</para>
		</summary>
		<param name="loadedAssembly">An instance that represents the currently loaded assembly.</param>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="AppDomain.GetType">
		<overload>
			<para>Gets the type of the current instance.</para>
		</overload>
		<summary>
			<para>Gets the type of the current instance.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Type"/>.</para>
		</returns>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="AppDomain.IsFinalizingForUnload">
		<summary>
			<para>Indicates whether this application domain is unloading,
      and the objects it contains are being finalized
      by the common language runtime.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if this
   application domain is unloading and the common language
   runtime has started invoking finalizers; otherwise,
<see langword="false"/>.</para>
		</returns>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<remarks>
			<para>The finalization method for an object provides you an
      opportunity to perform any necessary cleanup operations before the object is
      garbage collected. After finalization, the object is accessible but in an
      invalid state and therefore unusable. Eventually, garbage collection
      completes and reclaims the object. </para>
			<para>An object's finalization method is called in one of the
      following situations: during garbage collection, when the application domain
      that contains the object is unloaded, or when the common
      language runtime is shutting down. </para>
			<para>While executing in your finalization method during
      domain unloading, you might want to access another object that is referenced
      by a static field and has a finalization method. However, you cannot
      reliably do so because the accessed object
      might already have been finalized. </para>
			<note type="note">
      
      An exception to this rule is the <see cref="System.Console"/> class, which contains static
      fields that reference stream objects, but is implemented specially so you can
      always write to the system console, even during domain unloading or system
      shutdown.
      
      </note>
			<para>Use this method in an object's finalization method to
      determine whether the application domain that contains the object is unloading.
      If that is the case, you cannot reliably access any object that has a finalization method and is
      referenced by a static field. </para>
		</remarks>
		<seealso cref="System.Environment.HasShutdownStarted" qualify="true"/>
	</doc>
	<doc for="AppDomain.DoCallBack">
		<summary>
			<para> Executes the code in another application domain that is identified
      by the specified delegate.</para>
		</summary>
		<param name="callBackDelegate">A delegate that specifies a method to call.</param>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<remarks>
			<para><paramref name="callBackDelegate"/> can specify a
   marshal-by-value, <see cref="System.MarshalByRefObject"/>, or <see cref="System.ContextBoundObject"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates using a static <see cref="System.AppDomain.DoCallBack"/>
method.</para>
			<codelink SampleID="AppDomain_DoCallBack" SnippetID="1"/>
			<para>The following sample demonstrates using the <see cref="System.AppDomain.DoCallBack"/> 
method by value.</para>
			<codelink SampleID="AppDomain_DoCallBack" SnippetID="2"/>
			<para>The following sample demonstrates using the <see cref="System.AppDomain.DoCallBack"/> 
method by reference.</para>
			<codelink SampleID="AppDomain_DoCallBack" SnippetID="3"/>
		</example>
	</doc>
	<doc for="AppDomain.InitializeLifetimeService">
		<summary>
			<para>Gives the <see cref="System.AppDomain"/> an infinite lifetime by preventing a lease from being created.</para>
		</summary>
		<returns>
			<para> Always <see langword="null"/>.
   </para>
		</returns>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="AppDomain.ShadowCopyFiles">
		<summary>
			<para> Gets an indication whether all assemblies
      loaded in the application
      domain are shadow copied.
      </para>
		</summary>
		<value>
			<para><see langword="true "/>
if all assemblies loaded in the application domain are
shadow copied, not just a particular one; otherwise, <see langword="false"/>.</para>
		</value>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para>For more information, see <see cref="System.AppDomainSetup.ShadowCopyFiles" qualify="true"/>.</para>
		</remarks>
	</doc>
	<doc for="AppDomain.GetCurrentThreadId">
		<summary>
			<para> Gets the current thread identifier.
      </para>
		</summary>
		<returns>
			<para> A 32-bit signed integer that is the identifier of the current thread.
      </para>
		</returns>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the permissions section.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">to get the current thread identifier. Associated enumeration: <see langword="UnmanagedCode"/>
		</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<seealso cref="System.Int32"/>
	</doc>
	<doc for="AppDomain.CreateComInstanceFrom">
		<summary>
			<para> Creates a new instance of a specified COM type. Parameters specify
      the name of a file that contains an assembly containing the type and
      the name of the type.
      </para>
		</summary>
		<param name="assemblyName">The name of a file containing an assembly that defines the requested type. </param>
		<param name=" typeName">The name of the requested type. </param>
		<returns>
			<para>An object that is a wrapper for the new instance specified
      by <paramref name="typeName"/>. The return value needs to be unwrapped to access the real object. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyName"/> or <paramref name="typeName"/> is <see langword="null"/>. </exception>
		<exception cref="System.TypeLoadException">The type cannot be loaded.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para> Use this method to create objects remotely without having to
      load the type locally.</para>
			<para> The return value must to be unwrapped to
      access the real object.</para>
			<para>A <see cref="System.Runtime.InteropServices.ComVisibleAttribute" qualify="true"/> attribute with a value of
<see langword="true"/> must be applied either explicitly or by default to 
   the COM type for this method to create an instance of that type; otherwise,
<see cref="System.TypeLoadException"/> is thrown. </para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<para> The following sample demonstrates </para>
			<codelink SampleID="AppDomain_CreateComInstanceFrom" SnippetID="1"/>
		</example>
		<seealso cref="System.Activator.CreateComInstanceFrom" qualify="true"/>
	</doc>
	<doc for="AppDomain.CreateDomain4">
		<summary>
			<para> Creates a new application domain using
      the specified name, evidence, and application domain setup information.
      </para>
		</summary>
		<param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see the description of <see cref="System.AppDomain.FriendlyName"/>. </param>
		<param name="securityInfo">Evidence mapped through the security policy to establish a top-of-stack permission set. </param>
		<param name=" info">An object that contains application domain initialization information.</param>
		<returns>
			<para> The newly created application domain. </para>
		</returns>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission"><para>for the ability to create and manipulate an <see cref="System.AppDomain"/> . Associated enumeration: SecurityPermissionFlag/ControlAppDomain</para></permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to provide evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates, in general, how to create a domain using one of the <see cref="System.AppDomain.CreateDomain"/> overloads.</para>
			<codelink SampleID="AppDomain_Setup" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.DomainUnload">
		<summary>
			<para> Occurs when an <see cref="System.AppDomain"/> is about to be unloaded.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.EventHandler"/> delegate for this event can perform any termination activities before the application domain is unloaded.</para>
			<para>To register an event handler for this event, you must have the permissions 
   described in the Permissions section. If you do not have the appropriate
   permissions, a SecurityException occurs.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for creating an event handler for this event. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
	</doc>
	<doc for="AppDomain.ProcessExit">
		<summary>
			<para> Occurs on the default application domain when the
      default application domain's parent process exits.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.EventHandler"/> for this event can perform termination activities, such
   as closing files, releasing storage and so on, before the process ends.</para>
			<para>To register an event handler for this event, you must have the permissions 
   described in the Permissions section. If you do not have the appropriate
   permissions, a SecurityException occurs.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for creating an event handler for this event. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
	</doc>
	<doc for="AppDomain.ResourceResolve">
		<summary>
			<para> Occurs when the resolution of a resource fails.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.ResolveEventHandler"/> for this event can attempt to locate the resource and load
   it.</para>
			<para>To register an event handler for this event, you must have the permissions 
   described in the Permissions section. If you do not have the appropriate
   permissions, a SecurityException occurs.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for creating an event handler for this event. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
	</doc>
	<doc for="AppDomain.UnhandledException">
		<summary>
			<para> Occurs when an exception
      is not caught by an event handler.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.UnhandledExceptionEventHandler"/> delegate for this event provides
   default handling for uncaught exceptions. When this event is not handled, the
   system default handler reports the exception to the user and terminates the application. </para>
			<para> This event occurs only for the application domain that is created by the
   system when an application is started. If an application creates additional
   application domains, specifying a delegate for this event in those applications
   domains has no effect. </para>
			<para>To register an event handler for this event, you must have the permissions 
   described in the Permissions section. If you do not have the appropriate
   permissions, a SecurityException occurs.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for creating an event handler for this event. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.UnhandledException"/> event.</para>
			<codelink SampleID="AppDomain_UnhandledException" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.CreateDomain">
		<overload>
			<para> Creates a new application
      domain.
      </para>
		</overload>
		<summary>
			<para> Creates
      a
      new application domain with the given name using the supplied evidence.
      </para>
		</summary>
		<param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see the description of <see cref="System.AppDomain.FriendlyName"/>. </param>
		<param name="securityInfo">Evidence mapped through the security policy to establish a top-of-stack permission set. </param>
		<returns>
			<para> The newly created application domain.
      </para>
		</returns>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to create and manipulate an application domain. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to provide evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates, in general, how to create a domain using one of the <see cref="System.AppDomain.CreateDomain"/> overloads.</para>
			<codelink SampleID="AppDomain_Setup" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.CreateDomain1">
		<summary>
			<para> Creates
      a new application domain with the given name, using
      evidence, application base path, relative search
      path, and a parameter that specifies whether a shadow copy of an
      assembly is to be loaded into the application domain.
      </para>
		</summary>
		<param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see the description of <see cref="System.AppDomain.FriendlyName"/>. </param>
		<param name="securityInfo">Evidence mapped through the security policy to establish a top-of-stack permission set. </param>
		<param name="appBasePath">The base directory that the assembly resolver uses to probe for assemblies. For more information, see the description of <see cref="System.AppDomain.BaseDirectory"/>. </param>
		<param name="appRelativeSearchPath">The path relative to the base directory where the assembly resolver should probe for private assemblies. For more information, see the description of <see cref="System.AppDomain.RelativeSearchPath"/>. </param>
		<param name="shadowCopyFiles">If <see langword="true"/>, a shadow copy of an assembly is loaded into this application domain. </param>
		<returns>
			<para> The newly created application domain.
      </para>
		</returns>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to create and manipulate an application domain. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to provide evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates, in general, how to create a domain using one of the <see cref="System.AppDomain.CreateDomain"/> overloads.</para>
			<codelink SampleID="AppDomain_Setup" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.CreateDomain3">
		<summary>
			<para> Creates a new application domain with the specified name.
      </para>
		</summary>
		<param name="friendlyName">The friendly name of the domain. </param>
		<returns>
			<para> The newly created application domain.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="friendlyName"/> is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>The <paramref name="friendlyName"/> parameter is intended to
   identify the domain in a manner that is meaningful to humans. This string should be suitable for
   display in user interfaces.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to create and manipulate an application domain. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates, in general, how to create a domain using one of the <see cref="System.AppDomain.CreateDomain"/> overloads.</para>
			<codelink SampleID="AppDomain_Setup" SnippetID="1"/>
		</example>
		<seealso cref="System.AppDomain.FriendlyName"/>
	</doc>
	<doc for="AppDomain.Load">
		<overload>
			<para>Loads an <see cref="System.Reflection.Assembly"/>
into this application domain.</para>
		</overload>
		<summary>
			<para>Loads an <see cref="System.Reflection.Assembly"/>
given its <see cref="System.Reflection.AssemblyName"/>.</para>
		</summary>
		<param name="assemblyRef">An object that describes the assembly to load.</param>
		<returns>
			<para>The loaded assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyRef "/>is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyRef "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyRef"/> is not a valid assembly. </exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para> This method should only be used to load an assembly into
      the current application domain. This method is defined for interoperability
      callers who cannot call the static <see cref="System.Reflection.Assembly.Load"/>
      method.</para>
			<para>An attempt to call <see cref="System.AppDomain.Load"/> on a target application domain
   that is not the current application domain will result in a successful load of
   the assembly in the target application domain. Since an <see cref="System.Reflection.Assembly"/> is
   not <see cref="System.MarshalByRefObject"/>, when this method attempts to return the <see cref="System.Reflection.Assembly"/> for
   
   the loaded assembly to the current
   application domain, the common language runtime will try to load the assembly
   into the current application domain and the load might fail. The assembly that is
   loaded into the current application domain might be different from the assembly
   that was loaded first if the path settings for the two application domains are
   different.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
	</doc>
	<doc for="AppDomain.Load1">
		<summary>
			<para>Loads an <see cref="System.Reflection.Assembly"/>
given its display name.</para>
		</summary>
		<param name="assemblyString">The display name of the assembly.</param>
		<returns>
			<para>The loaded assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyString "/>is <see langword="null"/></exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyString "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyString"/> is not a valid assembly. </exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para> For more information, see the Remarks section of the
      <see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
	</doc>
	<doc for="AppDomain.ExecuteAssembly1">
		<summary>
			<para>Executes the assembly contained in the specified file.</para>
		</summary>
		<param name="assemblyFile">The name of the file that contains the assembly to execute.</param>
		<returns>
			<para> The value returned by the entry point of the
      assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyFile"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyFile "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyFile"/> is not a valid assembly. </exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>The assembly begins executing at the entry point specified in the .NET
      Framework header.</para>
			<para>This method does not create a new process or application domain, and it does
      not execute the entry point method on a new thread. </para>
			<para> To
      create the <see cref="System.AppDomain"/> to load and execute, use the <see cref="System.AppDomain.CreateDomain"/> method.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates using one of the overloads of <see cref="System.AppDomain.ExecuteAssembly"/> on two different domains.</para>
			<codelink SampleID="AppDomain_ExecuteAssembly" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.AssemblyLoad">
		<summary>
			<para> Occurs when an assembly is loaded.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.AssemblyLoadEventHandler"/> delegate for this event indicates
   what assembly was loaded.</para>
			<para>To register an event handler for this event, you must have the permissions
   described in the Permissions section. If you do not have the appropriate
   permissions, a SecurityException occurs.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para> The following sample demonstrates the <see cref="System.AppDomain.AssemblyLoad"/>
event.</para>
			<para>For this code example to run, you must provide the fully 
   qualified assembly name. For information about how to obtain the fully qualified
   assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AppDomain_AssemblyLoad" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.TypeResolve">
		<summary>
			<para> Occurs when the resolution of a type fails.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.AppDomain.TypeResolve"/> event occurs when the common language runtime is unable to determine
   the assembly that can create the requested type. This can occur if the type
   is defined in a dynamic assembly, or the type is not defined in a dynamic assembly but the
   runtime does not know which assembly the type is defined in. The latter situation
   can occur when <see cref="System.Type.GetType" qualify="true"/> is called with a type name that is not qualified with
   the assembly name. </para>
			<para>The <see cref="System.ResolveEventHandler"/> for this event can attempt to locate and create the
type. </para>
			<para>However, the <see cref="System.AppDomain.TypeResolve"/>
event does not occur if the runtime knows it is not possible to find a type in
certain assemblies. For example, this event does not occur if the type is not
found in a static assembly because the runtime knows types cannot be added dynamically to static
assemblies. </para>
			<para>To register an event handler for this event, you must have the permissions
   described in the Permissions section. If you do not have the appropriate
   permissions, a SecurityException occurs.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for creating an event handler for this event. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.TypeResolve"/>
event.</para>
			<para>For this code example to run, you must provide the fully qualified assembly 
   name. For information about how to obtain the fully qualified assembly name, see
<see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AppDomain_TypeResolve" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.AssemblyResolve">
		<summary>
			<para> Occurs when the resolution of an assembly fails.</para>
		</summary>
		<remarks>
			<para>It is the responsibility of
   <see cref="System.ResolveEventHandler"/> for
      this event to return the assembly that resolves the type, assembly, or
      resource.</para>
			<para>To register an event handler for this event, you must have the permissions
      described in the Permissions section. If you do not have the appropriate
      permissions, a SecurityException occurs.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for creating an event handler for this event. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<para>For this code example to run, you must provide the fully qualified assembly 
   name. For information about how to obtain the fully qualified assembly name, see
<see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AssemblyResolve" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.Load2">
		<summary>
			<para>Loads the <see cref="System.Reflection.Assembly"/> with a common object file format (COFF) based image
   containing an emitted <see cref="System.Reflection.Assembly"/>.</para>
		</summary>
		<param name="rawAssembly">An array of type <see langword="byte"/> that is a COFF-based image containing an emitted assembly.</param>
		<returns>
			<para>The loaded assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="rawAssembly"/> is <see langword="null"/>.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="rawAssembly"/> is not a valid assembly. </exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para> For more information, see the Remarks section of the
   <see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the use of loading a raw assembly.</para>
			<para>For this code example to run, you must provide the fully 
      qualified assembly name. For information about how to obtain the fully qualified
      assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AppDomain_LoadRaw" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.CreateInstance">
		<overload>
			<para> Creates a new instance of a specified type defined in a specified
      assembly.
      </para>
		</overload>
		<summary>
			<para> Creates a new instance of the specified type defined in the specified assembly.
      </para>
		</summary>
		<param name="assemblyName">The display name of the assembly. </param>
		<param name="typeName">The fully-qualified name of the requested type. </param>
		<returns>
			<para>An object that is a wrapper for the new instance specified by <paramref name="typeName"/>. The return value needs to be unwrapped to access the real object. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyName"/> or <paramref name="typeName"/> is <see langword="null"/>. </exception>
		<exception cref="System.MissingMethodException">No matching public constructor was found.</exception>
		<exception cref="System.TypeLoadException"><paramref name="typename"/> was not found in <paramref name="assemblyName"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyName"/> was not found.</exception>
		<exception cref="System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para> This method calls the default constructor for
   <paramref name="typeName"/>.</para>
			<para>See <see cref="System.Reflection.AssemblyName"/> for the format of <paramref name="assemblyName"/>. </para>
			<para>An attempt to call <see cref="System.AppDomain.CreateInstance"/> on a target application domain that is not the
current application domain will result in a successful load of the assembly in
the target application domain. Since an <see cref="System.Reflection.Assembly"/> is not <see cref="System.MarshalByRefObject"/>, when
this method attempts to return the <see cref="System.Reflection.Assembly"/> for the loaded assembly to
the current application domain, the common language runtime will try to load the
assembly into the current application domain and the load might fail. The
assembly that is loaded into the current application domain might be different
from the assembly that was loaded first if the path settings for the two
application domains are different.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<permission cref="T:System.Net.WebPermission">for the ability to access the location of the assembly if the assembly is not local.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: SecurityPermissionFlag/UnmanagedCode</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to invoke operations on all type members and to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<seealso cref="System.Activator.CreateInstance" qualify="true"/>
	</doc>
	<doc for="AppDomain.CreateInstanceFrom">
		<overload>
			<para>Creates a new instance of a specified type defined in
      the specified assembly file.</para>
		</overload>
		<summary>
			<para>Creates a new instance of the specified type defined in the specified assembly
      file.</para>
		</summary>
		<param name="assemblyFile">The name of a file that contains an assembly that defines the requested type.</param>
		<param name="typeName">The fully-qualified name of the requested type.</param>
		<returns>
			<para>An object that is a wrapper for the new instance, or <see langword="null"/> if <paramref name="typeName"/> is not found. The return value needs to be unwrapped to access the real object. </para>
		</returns>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.ArgumentNullException"><para>
				<paramref name="assemblyFile"/> is <see langword="null"/>.</para>
			<para>-or-</para>
			<para><paramref name="typeName"/> is <see langword="null"/>.</para></exception>
		<remarks>
			<para> The default constructor for <paramref name="typeName"/> is invoked.</para>
			<para>For more information, see the <see cref="System.Activator.CreateInstanceFrom" qualify="true"/> method.</para>
			<para>An attempt to call <see cref="System.AppDomain.CreateInstanceFrom"/> on a target application domain that is not the
current application domain will result in a successful load of the assembly in
the target application domain. Since an <see cref="System.Reflection.Assembly"/> is not <see cref="System.MarshalByRefObject"/>, when
this method attempts to return the <see cref="System.Reflection.Assembly"/> for the loaded assembly to
the current application domain, the common language runtime will try to load the
assembly into the current application domain and the load might fail. The
assembly that is loaded into the current application domain might be different
from the assembly that was loaded first if the path settings for the two
application domains are different.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to access the location of the assembly. Associated enumeration: PathDiscovery</permission>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to read the file containing the assembly manifest. Associated enumeration: Read</permission>
		<permission cref="T:System.Net.WebPermission">for the ability to access the location of the assembly if the assembly is not local.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</permission>
		<seealso cref="System.Activator.CreateInstanceFrom" qualify="true"/>
	</doc>
	<doc for="AppDomain.CreateComInstanceFrom1">
		<summary>
			<para>Creates a new instance of a specified COM type.
      Parameters specify the name of a file that contains an assembly containing the
      type and the name of the type.</para>
		</summary>
		<param name="assemblyFile">The name of a file containing an assembly that defines the requested type. </param>
		<param name=" typeName">The name of the requested type. </param>
		<param name=" hashValue">Represents the value of the computed hash code.</param>
		<param name=" hashAlgorithm">Represents the hash algorithm used by the assembly manifest.</param>
		<returns>
			<para>An object that is a wrapper for the new instance specified
      by <paramref name="typeName"/>. The return value needs to be unwrapped to access the real object. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyName"/> or <paramref name="typeName"/> is <see langword="null"/>. </exception>
		<exception cref="System.TypeLoadException">The type cannot be loaded.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para> Use this method to create objects remotely without having to
      load the type locally.</para>
			<para> The return value must to be unwrapped to
      access the real object.</para>
			<para>A <see cref="System.Runtime.InteropServices.ComVisibleAttribute" qualify="true"/> attribute with a value of
<see langword="true"/> must be applied either explicitly or by default to 
   the COM type for this method to create an instance of that type; otherwise,
<see cref="System.TypeLoadException"/> is thrown. </para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<seealso cref="System.Activator.CreateComInstanceFrom" qualify="true"/>
	</doc>
	<doc for="AppDomain.CreateInstance1">
		<summary>
			<para>Creates a new instance of the specified type defined in
      the specified assembly. A parameter specifies an array of activation attributes. </para>
		</summary>
		<param name="assemblyName">The display name of the assembly. </param>
		<param name=" typeName">The fully-qualified name of the requested type. </param>
		<param name=" activationAttributes">One or more attributes that can participate in activation.</param>
		<returns>
			<para>An object that is a wrapper for the new instance specified by <paramref name="typeName"/>. The return value needs to be unwrapped to access the real object. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyName"/> or <paramref name="typeName"/> is <see langword="null"/>. </exception>
		<exception cref="System.MissingMethodException">No matching public constructor was found.</exception>
		<exception cref="System.TypeLoadException"><paramref name="typename"/> was not found in <paramref name="assemblyName"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyName"/> was not found.</exception>
		<exception cref="System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
		<exception cref="System.NotSupportedException">The caller cannot provide activation attributes for an object that does not inherit from MarshalByRefObject.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para>This method calls the default constructor for <paramref name="typeName"/>.</para>
			<para>See <see cref="System.Reflection.AssemblyName"/> for the format of <paramref name="assemblyName"/>. </para>
			<para>An attempt to call <see cref="System.AppDomain.CreateInstance"/> on a target application domain that is not the
current application domain will result in a successful load of the assembly in
the target application domain. Since an <see cref="System.Reflection.Assembly"/> is not <see cref="System.MarshalByRefObject"/>, when
this method attempts to return the <see cref="System.Reflection.Assembly"/> for the loaded assembly to
the current application domain, the common language runtime will try to load the
assembly into the current application domain and the load might fail. The
assembly that is loaded into the current application domain might be different
from the assembly that was loaded first if the path settings for the two
application domains are different.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to access the location of the assembly. Associated enumeration:PathDiscovery</permission>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to read the file containing the assembly manifest. Associated enumeration: Read</permission>
		<permission cref="T:System.Net.WebPermission">for the ability to access the location of the assembly if the assembly is not local.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: SecurityPermissionFlag/UnmanagedCode</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<seealso cref="System.Activator.CreateInstance" qualify="true"/>
	</doc>
	<doc for="AppDomain.CreateInstanceFrom1">
		<summary>
			<para>Creates a new instance of the specified type defined in the specified assembly file.</para>
		</summary>
		<param name=" assemblyFile">The name of a file that contains an assembly that defines the requested type.</param>
		<param name=" typeName">The fully-qualified name of the requested type.</param>
		<param name=" activationAttributes">One or more attributes that can participate in activation.</param>
		<returns>
			<para>An object that is a wrapper for the new instance, or <see langword="null"/> if <paramref name="typeName"/> is not found. The return value needs to be unwrapped to access the real object. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para><paramref name="assemblyFile"/> is <see langword="null"/>.</para></exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyFile"/>was not found.</exception>
		<exception cref="System.TypeLoadException"><paramref name="typeName"/> was not found in <paramref name="assemblyFile"/>.</exception>
		<exception cref="System.MethodAccessException">The caller does not have sufficient permission to call this constructor.</exception>
		<exception cref="System.MissingMethodException">No matching public constructor was found.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.NotSupportedException">The caller cannot provide activation attributes for an object that does not inherit from MarshalByRefObject.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para>The default constructor for <paramref name="typeName"/> is invoked.</para>
			<para>For more information, see the <see cref="System.Activator.CreateInstanceFrom" qualify="true"/> method.</para>
			<para>An attempt to call <see cref="System.AppDomain.CreateInstanceFrom"/> on a target application domain that is not the
current application domain will result in a successful load of the assembly in
the target application domain. Since an <see cref="System.Reflection.Assembly"/> is not <see cref="System.MarshalByRefObject"/>, when
this method attempts to return the <see cref="System.Reflection.Assembly"/> for the loaded assembly to
the current application domain, the common language runtime will try to load the
assembly into the current application domain and the load might fail. The
assembly that is loaded into the current application domain might be different
from the assembly that was loaded first if the path settings for the two
application domains are different.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to access the location of the assembly. Associated enumeration: PathDiscovery</permission>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to read the file containing the assembly manifest. Associated enumeration: Read</permission>
		<permission cref="T:System.Net.WebPermission">for the ability to access the location of the assembly if the assembly is not local.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<seealso cref="System.Activator.CreateInstanceFrom" qualify="true"/>
	</doc>
	<doc for="AppDomain.CreateInstance2">
		<summary>
			<para> Creates a new instance of the specified type defined in the specified
      assembly. Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization
      to create the type.</para>
		</summary>
		<param name="assemblyName">The display name of the assembly. </param>
		<param name=" typeName">The fully-qualified name of the requested type. </param>
		<param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
		<param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName"/> constructor. If <paramref name="bindingAttr"/> is zero, a case-sensitive search for public constructors is conducted. </param>
		<param name=" binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="System.Reflection.MemberInfo"/> objects using reflection. If <paramref name="binder "/>is null, the default binder is used. </param>
		<param name=" args">The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <paramref name="args "/>must be an empty array or null. </param>
		<param name=" culture">Culture-specific information that governs the coercion of <paramref name="args"/> to the formal types declared for the <paramref name="typeName"/> constructor. If <paramref name="culture"/> is <see langword="null"/>, the <see cref="System.Globalization.CultureInfo"/> for the current thread is used. </param>
		<param name=" activationAttributes">One or more attributes that can participate in activation.</param>
		<param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName"/>.</param>
		<returns>
			<para>An object that is a wrapper for the new instance specified by <paramref name="typeName"/>. The return value needs to be unwrapped to access the real object. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyName"/> or <paramref name="typeName"/> is <see langword="null"/>. </exception>
		<exception cref="System.MissingMethodException">No matching constructor was found.</exception>
		<exception cref="System.TypeLoadException"><paramref name="typename"/> was not found in <paramref name="assemblyName"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyName"/> was not found.</exception>
		<exception cref="System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
		<exception cref="System.NotSupportedException">The caller cannot provide activation attributes for an object that does not inherit from MarshalByRefObject.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the permissions section.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para>This method calls the default constructor for <paramref name="typeName"/>.</para>
			<para>See <see cref="System.Reflection.AssemblyName"/> for the format of <paramref name="assemblyName"/>. </para>
			<para>An attempt to call <see cref="System.AppDomain.CreateInstance"/> on a target application domain that is not the
current application domain will result in a successful load of the assembly in
the target application domain. Since an <see cref="System.Reflection.Assembly"/> is not <see cref="System.MarshalByRefObject"/>, when
this method attempts to return the <see cref="System.Reflection.Assembly"/> for the loaded assembly to
the current application domain, the common language runtime will try to load the
assembly into the current application domain and the load might fail. The
assembly that is loaded into the current application domain might be different
from the assembly that was loaded first if the path settings for the two
application domains are different.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to access the location of the assembly. Associated enumeration: PathDiscovery</permission>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to read the file containing the assembly manifest. Associated enumeration: Read</permission>
		<permission cref="T:System.Net.WebPermission">for the ability to access the location of the assembly if the assembly is not local.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: SecurityPermissionFlag/UnmanagedCode</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to provide evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<seealso cref="System.Activator.CreateInstance" qualify="true"/>
	</doc>
	<doc for="AppDomain.CreateInstanceAndUnwrap2">
		<summary>
			<para> Creates a new instance of the specified type. Parameters specify the name of the type, and how it is found and created. </para>
		</summary>
		<param name="assemblyName">The display name of the assembly. </param>
		<param name="typeName">The fully-qualified name of the requested type. </param>
		<param name="ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
		<param name="bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName"/> constructor. If <paramref name="bindingAttr"/> is zero, a case-sensitive search for public constructors is conducted. </param>
		<param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="System.Reflection.MemberInfo"/> objects using reflection. If <paramref name="binder "/>is null, the default binder is used. </param>
		<param name="args">The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <paramref name="args "/>must be an empty array or null. </param>
		<param name="culture">A culture-specific object used to govern the coercion of types. If <paramref name="culture"/> is <see langword="null"/>, the <see langword="CultureInfo"/> for the current thread is used. </param>
		<param name="activationAttributes">An array of one or more attributes that can participate in activation.</param>
		<param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName"/>.</param>
		<returns>
			<para>An instance of the object specified by <paramref name="typeName"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyName"/> or <paramref name="typeName"/> is <see langword="null"/>. </exception>
		<exception cref="System.MissingMethodException">No matching constructor was found.</exception>
		<exception cref="System.TypeLoadException"><paramref name="typename"/> was not found in <paramref name="assemblyName"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyName"/> was not found.</exception>
		<exception cref="System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
		<exception cref="System.NotSupportedException">The caller cannot provide activation attributes for an object that does not inherit from MarshalByRefObject.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para>This is a convenience method that combines <see cref="System.AppDomain.CreateInstance"/>
and <see cref="System.Runtime.Remoting.ObjectHandle.Unwrap" qualify="true"/>. This method calls the
default constructor for <paramref name="typeName"/>.</para>
			<para> See <see cref="System.Reflection.AssemblyName"/> for the format of <paramref name="assemblyName"/>. </para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to access the location of the assembly. Associated enumeration: PathDiscovery</permission>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to read the file containing the assembly manifest. Associated enumeration: Read</permission>
		<permission cref="T:System.Net.WebPermission">for the ability to access the location of the assembly if the assembly is not local.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: SecurityPermissionFlag/UnmanagedCode</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to load an assembly with evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the use of the <paramref name="ignoreCase"/>
parameter.</para>
			<codelink SampleID="AppDomain_CreateInstance_IgnoreCase" SnippetID="1"/>
		</example>
		<seealso cref="System.AppDomain.CreateInstance"/>
	</doc>
	<doc for="AppDomain.CreateInstanceFromAndUnwrap1">
		<summary>
			<para>Creates a new instance of the specified type defined in the specified assembly file.</para>
		</summary>
		<param name="assemblyName">The name of a file that contains an assembly that defines the requested type.</param>
		<param name="typeName">The fully-qualified name of the requested type.</param>
		<param name="activationAttributes">One or more attributes that can participate in activation.</param>
		<returns>
			<para>The requested object.</para>
			<para>-or-</para>
			<para><see langword="null"/> if <paramref name="typeName"/> is not found.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><para><paramref name="assemblyName"/> is <see langword="null"/>.</para>
			<para>-or-</para>
			<para><paramref name="typeName"/> is <see langword="null"/>.</para></exception>
		<exception cref="System.NotSupportedException">The caller cannot provide activation attributes for an object that does not inherit from MarshalByRefObject.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para>This is a convenience method that combines <see cref="System.AppDomain.CreateInstanceFrom"/> and <see cref="System.Runtime.Remoting.ObjectHandle.Unwrap" qualify="true"/>. This method calls the default constructor for <paramref name="typeName"/>.</para>
			<para>For more information, see the <see cref="System.Activator.CreateInstanceFrom" qualify="true"/> method.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to access the location of the assembly. Associated enumeration: PathDiscovery</permission>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to read the file containing the assembly manifest. Associated enumeration: Read</permission>
		<permission cref="T:System.Net.WebPermission">for the ability to access the location of the assembly if the assembly is not local.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<seealso cref="System.Activator.CreateInstanceFrom" qualify="true"/>
	</doc>
	<doc for="AppDomain.CreateInstanceFromAndUnwrap2">
		<summary>
			<para>Creates a new instance of the specified type defined in the specified assembly file.</para>
		</summary>
		<param name="assemblyName">The name of a file that contains an assembly that defines the requested type. </param>
		<param name=" typeName">The fully-qualified name of the requested type. </param>
		<param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
		<param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName"/> constructor. If <paramref name="bindingAttr"/> is zero, a case-sensitive search for public constructors is conducted. </param>
		<param name=" binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="System.Reflection.MemberInfo"/> objects through reflection. If <paramref name="binder"/> is null, the default binder is used.</param>
		<param name=" args">The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <paramref name="args"/> must be an empty array or null.</param>
		<param name=" culture">Culture-specific information that governs the coercion of <paramref name="args"/> to the formal types declared for the <paramref name="typeName"/> constructor. If <paramref name="culture"/> is <see langword="null"/>, the <see cref="System.Globalization.CultureInfo"/> for the current thread is used. </param>
		<param name=" activationAttributes">One or more attributes that can participate in activation.</param>
		<param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName"/>.</param>
		<returns>
			<para>The requested object.</para>
			<para>-or-</para>
			<para><see langword="null"/> if <paramref name="typeName"/> is not found.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><para><paramref name="assemblyName"/> is <see langword="null"/>.</para>
			<para>-or-</para>
			<para><paramref name="typeName"/> is <see langword="null"/>.</para></exception>
		<exception cref="System.NotSupportedException">The caller cannot provide activation attributes for an object that does not inherit from MarshalByRefObject.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para>This is a convenience method that combines <see cref="System.AppDomain.CreateInstanceFrom"/> and <see cref="System.Runtime.Remoting.ObjectHandle.Unwrap" qualify="true"/>.</para>
			<para>For more information, see the <see cref="System.Activator.CreateInstanceFrom" qualify="true"/> method.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to access the location of the assembly. Associated enumeration: PathDiscovery</permission>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to read the file containing the assembly manifest. Associated enumeration: Read</permission>
		<permission cref="T:System.Net.WebPermission">for the ability to access the location of the assembly if the assembly is not local.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<seealso cref="System.Activator.CreateInstanceFrom" qualify="true"/>
	</doc>
	<doc for="AppDomain.ExecuteAssembly">
		<overload>
			<para>Executes the assembly contained in the specified file.</para>
		</overload>
		<summary>
			<para> Executes the assembly contained in the specified file, using the specified evidence.</para>
		</summary>
		<param name="assemblyFile">The name of the file that contains the assembly to execute. </param>
		<param name="assemblySecurity">Evidence for loading the assembly. </param>
		<returns>
			<para> The value returned by the entry point of
      the assembly.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyFile"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyFile "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyFile"/> is not a valid assembly. </exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>The assembly begins executing at the entry point specified in the .NET
      Framework header.</para>
			<para>The <see cref="System.AppDomain.ExecuteAssembly"/> method does not create a new process or application
   domain, and it does not execute the entry point method on a new thread.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to load an assembly with evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<permission cref="System.Net.WebPermission">for reading a URI that does not begin with "file://".</permission>
		<example>
			<para>The following sample demonstrates using one of the overloads of <see cref="System.AppDomain.ExecuteAssembly"/> on two different domains.</para>
			<codelink SampleID="AppDomain_ExecuteAssembly" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.ExecuteAssembly2">
		<summary>
			<para>Executes the assembly contained in the specified file,
      using the specified evidence and arguments.</para>
		</summary>
		<param name="assemblyFile">The name of the file that contains the assembly to execute.</param>
		<param name="assemblySecurity">The supplied evidence for the assembly.</param>
		<param name="args">The arguments to the entry point of the assembly.</param>
		<returns>
			<para>The value returned by the entry point of the
      assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyFile"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyFile "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyFile"/> is not a valid assembly. </exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>The assembly begins executing at the entry point specified in the .NET
      Framework header.</para>
			<para>This method does not create a new process or application domain, and it does
      not execute the entry point method on a new thread.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to load an assembly with evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<permission cref="System.Net.WebPermission">for reading a URI that does not begin with "file://".</permission>
		<example>
			<para>The following sample demonstrates using one of the overloads of <see cref="System.AppDomain.ExecuteAssembly"/> on two different domains.</para>
			<codelink SampleID="AppDomain_ExecuteAssembly" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.ExecuteAssembly3">
		<summary>
			<para>Executes the assembly contained in the specified file,
      using the specified evidence and arguments.</para>
		</summary>
		<param name="assemblyFile">The name of the file that contains the assembly to execute.</param>
		<param name="assemblySecurity">The supplied evidence for the assembly.</param>
		<param name="args">The arguments to the entry point of the assembly.</param>
		<param name=" hashValue">Represents the value of the computed hash code.</param>
		<param name=" hashAlgorithm">Represents the hash algorithm used by the assembly manifest.</param>
		<returns>
			<para>The value returned by the entry point of the
      assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyFile"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyFile "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyFile"/> is not a valid assembly. </exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>The assembly begins executing at the entry point specified in the .NET
      Framework header.</para>
			<para>This method does not create a new process or application domain, and it does
      not execute the entry point method on a new thread.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to load an assembly with evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<permission cref="System.Net.WebPermission">for reading a URI that does not begin with "file://".</permission>
		<example>
			<para>The following sample demonstrates using one of the overloads of <see cref="System.AppDomain.ExecuteAssembly"/> on two different domains.</para>
			<codelink SampleID="AppDomain_ExecuteAssembly" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.CreateInstanceFromAndUnwrap">
		<overload>
			<para>Creates a new instance of a specified type defined in
      the specified assembly file.</para>
		</overload>
		<summary>
			<para>Creates a new instance of the specified type defined in the specified assembly
      file.</para>
		</summary>
		<param name="assemblyName">The name of a file that contains an assembly that defines the requested type.</param>
		<param name="typeName">The fully-qualified name of the requested type.</param>
		<returns>
			<para> The requested object.</para>
			<para> -or-</para>
			<para><see langword="null"/> if
<paramref name="typeName"/>
is not found.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><para><paramref name="assemblyName"/> is <see langword="null"/>.</para>
			<para>-or-</para>
			<para><paramref name="typeName"/> is <see langword="null"/>.</para></exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para>This is a convenience method that combines <see cref="System.AppDomain.CreateInstanceFrom"/> and <see cref="System.Runtime.Remoting.ObjectHandle.Unwrap" qualify="true"/>. This method calls the
   default constructor for <paramref name="typeName"/>.</para>
			<para>For more information, see the <see cref="System.Activator.CreateInstanceFrom" qualify="true"/> method.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to access the location of the assembly. Associated enumeration: PathDiscovery</permission>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to read the file containing the assembly manifest. Associated enumeration: Read</permission>
		<permission cref="System.Net.WebPermission">for the ability to access the location of the assembly if the assembly is not local.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<seealso cref="System.Activator.CreateInstanceFrom" qualify="true"/>
	</doc>
	<doc for="AppDomain.DefineDynamicAssembly">
		<overload>
			<para>Defines a dynamic assembly in the current application
      domain.</para>
		</overload>
		<summary>
			<para> Defines a dynamic assembly with the specified name and access
      mode.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The access mode for the dynamic assembly.</param>
		<returns>
			<para> Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para> The caller does not have the required permission. <para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para> This method
      should only be used to define a dynamic assembly in the current application
      domain. For more information, see the Remarks section of the <see topic="frlrfsystemappdomainclassloadtopic1 "/>
      topic.</para>
			<para> The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/>
constructor parameter). However, this method only persists the major
and minor version numbers, not the build and revision numbers. For
example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover
the <see cref="System.Version"/>
for this assembly, only that object's major and minor version numbers will
be as originally specified.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<para> The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/>
event.</para>
			<para>For this code example to run, you must provide the fully
   qualified assembly name. For information about how to obtain the fully qualified
   assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.DefineDynamicAssembly1">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, and storage
      directory.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir"/> is <see langword="null"/>, the directory defaults to the current directory.</param>
		<returns>
			<para> Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>This method should only be used to define a dynamic assembly in the current application domain. For more information, see the Remarks section of the <see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/> constructor parameter). However, this method only persists the major and minor version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover the <see cref="System.Version"/> for this assembly, only that object's major and minor version numbers will be as originally specified.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<para>For this code example to run, you must provide the fully
   qualified assembly name. For information about how to obtain the fully qualified
   assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.DefineDynamicAssembly2">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, and
      evidence.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="evidence">The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution. </param>
		<returns>
			<para> Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>Only fully trusted callers can supply their <paramref name="evidence"/> when defining a
   dynamic <see cref="System.Reflection.Assembly"/>. The runtime will map the <see cref="System.Security.Policy.Evidence"/>
   through the security policy to determine the granted permissions. Partially trusted
   callers must supply a null
<paramref name="evidence"/>. If
<paramref name="evidence"/> is <see langword="null"/>, the runtime copies the permission 
   sets, that is, the current grant and deny sets, from the caller's <see cref="System.Reflection.Assembly"/> to
   the dynamic <see cref="System.Reflection.Assembly"/> being defined and marks policy as
   resolved.</para>
			<para>If the dynamic <see cref="System.Reflection.Assembly"/> is saved to disk, subsequent loads will get
grants based on policies associated with the location where the <see cref="System.Reflection.Assembly"/> was
saved.</para>
			<para>This method should only be used to define a dynamic assembly in the current
   application domain. For more information, see the Remarks section of the
<see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/>
constructor parameter). However, this method only persists the major and minor
version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover
the <see cref="System.Version"/> for
this assembly, only that object's major and minor version numbers will be as
originally specified.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to load an assembly with evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<para>For this code example to run, you must provide the fully
   qualified assembly name. For information about how to obtain the fully qualified
   assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.DefineDynamicAssembly3">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, and
      permission requests.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="requiredPermissions">The required permissions request.</param>
		<param name="optionalPermissions">The optional permissions request.</param>
		<param name="refusedPermissions">The refused permissions request.</param>
		<returns>
			<para>Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>This method should only be used to define a dynamic assembly in the current application domain. For more information, see the Remarks section of the <see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/> constructor parameter). However, this method only persists the major and minor version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover the <see cref="System.Version"/> for this assembly, only that object's major and minor version numbers will be as originally specified.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<para>For this code example to run, you must provide the fully
   qualified assembly name. For information about how to obtain the fully qualified
   assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.DefineDynamicAssembly4">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, and evidence.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir"/> is <see langword="null"/>, the directory defaults to the current directory.</param>
		<param name="evidence">The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.</param>
		<returns>
			<para>Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>Only fully trusted callers can supply their <paramref name="evidence"/> when defining a
   dynamic <see cref="System.Reflection.Assembly"/>. The runtime will map the <see cref="System.Security.Policy.Evidence"/>
   through the security policy to determine the granted permissions. Partially trusted
   callers must supply a null
<paramref name="evidence"/>. If
<paramref name="evidence"/> is <see langword="null"/>, the runtime copies the permission 
   sets, that is, the current grant and deny sets, from the caller's <see cref="System.Reflection.Assembly"/> to
   the dynamic <see cref="System.Reflection.Assembly"/> being defined and marks policy as
   resolved.</para>
			<para>If the dynamic <see cref="System.Reflection.Assembly"/> is saved to disk, subsequent loads will get
grants based on policies associated with the location where the <see cref="System.Reflection.Assembly"/> was
saved.</para>
			<para>This method should only be used to define a dynamic assembly in the current
   application domain. For more information, see the Remarks section of the
<see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/>
constructor parameter). However, this method only persists the major and minor
version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover
the <see cref="System.Version"/> for
this assembly, only that object's major and minor version numbers will be as
originally specified.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to load an assembly with evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<para>For this code example to run, you must provide the fully
   qualified assembly name. For information about how to obtain the fully qualified
   assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain">
		<summary>
			<para> Represents an application domain, which is an isolated environment
      where applications execute. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>Application domains, which are represented by <see cref="System.AppDomain"/> objects, provide isolation,
   unloading, and security boundaries for executing managed
   code. </para>
			<para>Multiple application domains can run in a single process; however, there is
   not a one-to-one correlation between application domains and threads. Several
   threads can belong to a single application domain, and while a given thread is
   not confined to a single application domain, at any given time, a thread
   executes in a single application domain. </para>
			<para>Application domains are created using the <see cref="System.AppDomain.CreateDomain"/> method. <see cref="System.AppDomain"/> instances are
used to load and execute assemblies (<see cref="System.Reflection.Assembly"/>). When an <see cref="System.AppDomain"/>
is no longer in use, it
can be unloaded. </para>
			<para>The <see cref="System.AppDomain"/> class implements a set of events that enable applications to respond
when an assembly is loaded, when an application domain will be unloaded, or
when an unhandled exception is thrown. </para>
			<para>For more information on using application domains,
   see <see topic="cpconapplicationdomains"/> or the list of Frequently Asked
   Questions at www.gotdotnet.com. </para>
			<para>This class implements the <see cref="System.MarshalByRefObject"/>,
<see cref="System._AppDomain"/>, and <see cref="System.Security.IEvidenceFactory"/> interfaces.</para>
			<para> You should
   never create a remotable wrapper for an AppDomain object. If you do, you could inadvertently publish a reference
   to that AppDomain remotely, which would expose that AppDomain's CreateInstance method (and others) remotely and effectively
   destroy any code access security for that AppDomain. Malicious clients connecting to the remoted AppDomain could obtain access to any
   resource to which the AppDomain itself has access. You should not create remotable wrappers for any type that
   extends MarshalByRefObject and that implements methods that could be used by malicious clients to bypass the security system.</para>
			<note type="caution">
   The default value for the <see cref="System.AppdomainSetup.DisalowCodeDownload" qualify="true"/> property is <see langword="false"/>. This
   setting is unsafe for services. To prevent services from downloading partially
   trusted code, set this property to <see langword="true"/>
   .
</note>
		</remarks>
	</doc>
	<doc for="AppDomain.DefineDynamicAssembly5">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, and permission requests.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir"/> is <see langword="null"/>, the directory defaults to the current directory.</param>
		<param name="requiredPermissions">The required permissions request.</param>
		<param name="optionalPermissions">The optional permissions request.</param>
		<param name="refusedPermissions">The refused permissions request.</param>
		<returns>
			<para>Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>This method should only be used to define a dynamic assembly in the current application domain. For more information, see the Remarks section of the <see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/> constructor parameter). However, this method only persists the major and minor version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover the <see cref="System.Version"/> for this assembly, only that object's major and minor version numbers will be as originally specified.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<para>For this code example to run, you must provide the fully
   qualified assembly name. For information about how to obtain the fully qualified
   assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.DefineDynamicAssembly6">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, evidence,
      and permission requests.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="evidence">The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.</param>
		<param name="requiredPermissions">The required permissions request.</param>
		<param name="optionalPermissions">The optional permissions request.</param>
		<param name="refusedPermissions">The refused permissions request.</param>
		<returns>
			<para>Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>Only fully trusted callers can supply their <paramref name="evidence"/> when defining a
   dynamic <see cref="System.Reflection.Assembly"/>. The runtime will map the <see cref="System.Security.Policy.Evidence"/>
   through the security policy to determine the granted permissions. Partially trusted
   callers must supply a null
<paramref name="evidence"/>. If
<paramref name="evidence"/> is <see langword="null"/>, the runtime copies the permission 
   sets, that is, the current grant and deny sets, from the caller's <see cref="System.Reflection.Assembly"/> to
   the dynamic <see cref="System.Reflection.Assembly"/> being defined and marks policy as
   resolved.</para>
			<para>If the dynamic <see cref="System.Reflection.Assembly"/> is saved to disk, subsequent loads will get
grants based on policies associated with the location where the <see cref="System.Reflection.Assembly"/> was
saved.</para>
			<para>This method should only be used to define a dynamic assembly in the current
   application domain. For more information, see the Remarks section of the
<see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/>
constructor parameter). However, this method only persists the major and minor
version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover
the <see cref="System.Version"/> for
this assembly, only that object's major and minor version numbers will be as
originally specified.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to load an assembly with evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<para>For this code example to run, you must provide the fully
   qualified assembly name. For information about how to obtain the fully qualified
   assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.DefineDynamicAssembly7">
		<summary>
			<para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, evidence, and permission requests.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly.</param>
		<param name="access">The mode in which the dynamic assembly will be accessed.</param>
		<param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir"/> is <see langword="null"/>, the directory defaults to the current directory.</param>
		<param name="evidence">The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.</param>
		<param name="requiredPermissions">The required permissions request.</param>
		<param name="optionalPermissions">The optional permissions request.</param>
		<param name="refusedPermissions">The refused permissions request.</param>
		<returns>
			<para>Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>Only fully trusted callers can supply their <paramref name="evidence"/> when defining a
   dynamic <see cref="System.Reflection.Assembly"/>. The runtime will map the <see cref="System.Security.Policy.Evidence"/>
   through the security policy to determine the granted permissions. Partially trusted
   callers must supply a null
<paramref name="evidence"/>. If
<paramref name="evidence"/> is <see langword="null"/>, the runtime copies the permission 
   sets, that is, the current grant and deny sets, from the caller's <see cref="System.Reflection.Assembly"/> to
   the dynamic <see cref="System.Reflection.Assembly"/> being defined and marks policy as
   resolved.</para>
			<para>If the dynamic <see cref="System.Reflection.Assembly"/> is saved to disk, subsequent loads will get
grants based on policies associated with the location where the <see cref="System.Reflection.Assembly"/> was
saved.</para>
			<para>This method should only be used to define a dynamic assembly in the current
   application domain. For more information, see the Remarks section of the
<see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> (as an <see cref="M:System.OperatingSystem.#ctor"/>
constructor parameter). However, this method only persists the major and minor
version numbers, not the build and revision numbers. For example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to indirectly recover
the <see cref="System.Version"/> for
this assembly, only that object's major and minor version numbers will be as
originally specified.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to load an assembly with evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<para>For this code example to run, you must provide the fully
   qualified assembly name. For information about how to obtain the fully qualified
   assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.DefineDynamicAssembly8">
		<summary>
			<para> Defines a dynamic assembly using the specified name,
      access mode, storage directory, evidence, permission requests, and synchronization option.</para>
		</summary>
		<param name="name">The unique identity of the dynamic assembly. </param>
		<param name="access">The mode in which the dynamic assembly will be accessed. </param>
		<param name="dir">The name of the directory where the dynamic assembly will be saved. If <paramref name="dir"/> is <see langword="null"/>, the directory defaults to the current directory. </param>
		<param name="evidence">The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution. </param>
		<param name="requiredPermissions">The required permissions request. </param>
		<param name="optionalPermissions">The optional permissions request. </param>
		<param name="refusedPermissions">The refused permissions request. </param>
		<param name="isSynchronized"><para><see langword="true"/> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false"/>.</para></param>
		<returns>
			<para>Represents the dynamic assembly created.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <see langword="Name"/> property of <paramref name="name"/> is <see langword="null"/>.</para>
			<para>-or- </para>
			<para> The <see langword="Name"/> property of <paramref name="name"/> begins with white space, or contains a forward or backward slash.</para></exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para> Only fully trusted callers can supply their evidence
      when defining a dynamic
      <see cref="System.Reflection.Assembly"/>. The runtime will map the <see cref="System.Security.Policy.Evidence"/> through the security policy to
      determine the granted permissions. Partially trusted callers must supply
      <see langword="null"/> for the
      <paramref name="evidence "/> parameter.
      If <paramref name="evidence"/> is <see langword="null"/>, the runtime copies the permission sets, that is, the current
      grant and deny sets, from the caller's <see cref="System.Reflection.Assembly"/> to the dynamic
      <see cref="System.Reflection.Assembly"/> being defined and marks policy as resolved.</para>
			<para> If the dynamic <see cref="System.Reflection.Assembly"/> is saved to disk, subsequent loads will
   get grants based on policies associated with the location where the <see cref="System.Reflection.Assembly"/>
   was saved.</para>
			<para>The <paramref name="name"/> parameter indirectly specifies a <see cref="System.Version"/> object (as an
<see cref="M:System.OperatingSystem.#ctor"/> constructor parameter). However, this 
method only persists the major and minor version numbers, not the build and
revision numbers. That is, for example, if the <see cref="System.Reflection.Assembly.LoadFrom"/> method is used to
indirectly recover the <see langword="Version"/> object for this assembly, only
that object's major and minor version numbers will be as originally
specified.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to load an assembly with evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the <see cref="System.AppDomain.DefineDynamicAssembly"/> method and <see cref="System.AppDomain.AssemblyResolve"/> event.</para>
			<para>For this code example to run, you must provide the fully
   qualified assembly name. For information about how to obtain the fully qualified
   assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AppDomain_DefineDynamicAssembly" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.Load3">
		<summary>
			<para>Loads the <see cref="System.Reflection.Assembly"/> with a common object file format (COFF) based image
   containing an emitted <see cref="System.Reflection.Assembly"/>. The raw bytes representing the symbols for
   the <see cref="System.Reflection.Assembly"/>
   are also
   loaded.</para>
		</summary>
		<param name="rawAssembly">An array of type <see langword="byte"/> that is a COFF-based image containing an emitted assembly.</param>
		<param name="rawSymbolStore">An array of type <see langword="byte"/> containing the raw bytes representing the symbols for the assembly.</param>
		<returns>
			<para>The loaded assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="rawAssembly"/> is <see langword="null"/>.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="rawAssembly"/> is not a valid assembly. </exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para> For more information, see the Remarks section of the
      <see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Net.WebPermission">for reading a URI that does not begin with "file://".</permission><permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<para>The following sample demonstrates the use of loading a raw assembly.</para>
			<para>For this code example to run, you must provide the fully
      qualified assembly name. For information about how to obtain the fully qualified
      assembly name, see <see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="AppDomain_LoadRaw" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.Load4">
		<summary>
			<para>Loads the <see cref="System.Reflection.Assembly"/> with a common object file format (COFF) based image
   containing an emitted <see cref="System.Reflection.Assembly"/>. The raw bytes representing the symbols for
   the <see cref="System.Reflection.Assembly"/>
   are also
   loaded.</para>
		</summary>
		<param name="rawAssembly">An array of type <see langword="byte"/> that is a COFF-based image containing an emitted assembly.</param>
		<param name="rawSymbolStore">An array of type <see langword="byte"/> containing the raw bytes representing the symbols for the assembly.</param>
		<param name="securityEvidence">Evidence for loading the assembly.</param>
		<returns>
			<para>The loaded assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="rawAssembly"/> is <see langword="null"/>.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="rawAssembly"/> is not a valid assembly. </exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para> For more information, see the Remarks section of the
      <see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to provide evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<permission cref="System.Net.WebPermission">for reading a path is not in the form "file://" or "\\UNC\dir\" or "c:\".</permission>
		<example>
			<para>The following sample demonstrates the use of loading a raw assembly.</para>
			<para>For this code example to run, you must provide the fully
      qualified assembly name. For information about how to obtain the fully qualified
      assembly name, see <see topic="cpconassemblynames"/>
      .
      </para>
			<codelink SampleID="AppDomain_LoadRaw" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.Load5">
		<overload>
			<para> Loads an <see cref="System.Reflection.Assembly"/>
into this application domain.</para>
		</overload>
		<summary>
			<para> Loads an <see cref="System.Reflection.Assembly"/>
given its <see cref="System.Reflection.AssemblyName"/>.</para>
		</summary>
		<param name="assemblyRef">An object that describes the assembly to load. </param>
		<param name="assemblySecurity">Evidence for loading the assembly.</param>
		<returns>
			<para>The loaded assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyRef "/>is <see langword="null"/></exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyRef "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyRef"/> is not a valid assembly. </exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>For more information, see the Remarks section of the
      <see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to load an assembly with evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<permission cref="System.Net.WebPermission">for reading a path is not in the form "file://" or "\\UNC\dir\" or "c:\".</permission>
	</doc>
	<doc for="AppDomain.Load7">
		<summary>
			<para>Loads an <see cref="System.Reflection.Assembly"/>
given its display name.</para>
		</summary>
		<param name="assemblyString">The display name of the assembly.</param>
		<param name="assemblySecurity">Evidence for loading the assembly.</param>
		<returns>
			<para>The loaded assembly.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyString "/>is <see langword="null"/></exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyString "/>is not found.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyString"/> is not a valid assembly. </exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>For more information, see the Remarks section of the
      <see topic="frlrfsystemappdomainclassloadtopic1 "/> topic.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to load an assembly with evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<permission cref="System.Net.WebPermission">for reading a path is not in the form "file://" or "\\UNC\dir\" or "c:\".</permission>
	</doc>
	<doc for="AppDomain.CreateInstanceFrom2">
		<summary>
			<para>Creates a new instance of the specified type defined in the specified assembly file.</para>
		</summary>
		<param name="assemblyFile">The name of a file that contains an assembly that defines the requested type. </param>
		<param name=" typeName">The fully-qualified name of the requested type. </param>
		<param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
		<param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName"/> constructor. If <paramref name="bindingAttr"/> is zero, a case-sensitive search for public constructors is conducted. </param>
		<param name=" binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="System.Reflection.MemberInfo"/> objects through reflection. If <paramref name="binder "/>is null, the default binder is used. </param>
		<param name=" args">The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <paramref name="args "/>must be an empty array or null. </param>
		<param name=" culture">Culture-specific information that governs the coercion of <paramref name="args"/> to the formal types declared for the <paramref name="typeName"/> constructor. If <paramref name="culture"/> is <see langword="null"/>, the <see cref="System.Globalization.CultureInfo"/> for the current thread is used. </param>
		<param name=" activationAttributes">One or more attributes that can participate in activation.</param>
		<param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName"/>.</param>
		<returns>
			<para>An object that is a wrapper for the new instance, or <see langword="null"/> if <paramref name="typeName"/> is not found. The return value needs to be unwrapped to access the real object. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para><paramref name="assemblyFile"/> is <see langword="null"/>.</para><para>-or-</para><para><paramref name="typeName"/> is <see langword="null"/>.</para></exception>
		<exception cref="System.NotSupportedException">The caller cannot provide activation attributes for an object that does not inherit from MarshalByRefObject.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para>For more information, see the <see cref="System.Activator.CreateInstanceFrom" qualify="true"/> method.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to access the location of the assembly. Associated enumeration: PathDiscovery</permission>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to read the file containing the assembly manifest. Associated enumeration: Read</permission>
		<permission cref="T:System.Net.WebPermission">for the ability to access the location of the assembly if the assembly is not local.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to provide evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<seealso cref="System.Activator.CreateInstanceFrom" qualify="true"/>
	</doc>
	<doc for="AppDomain.SetData">
		<summary>
			<para>Assigns the specified value to the specified application
      domain property.</para>
		</summary>
		<param name="name">The name of an application domain property.</param>
		<param name="data">The value to set the <paramref name="name"/> property.</param>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>Use this method to insert an entry, or modify the value
      of an entry in an internal cache of name-data pairs that describe
      properties of this instance of <see cref="System.AppDomain"/>.</para>
			<para> The cache automatically contains predefined system entries that are
      inserted when the application domain is created. You cannot insert or modify
      system entries with this method. You can inspect their values with the <see cref="System.AppDomain.GetData"/>
      method, or the equivalent <see cref="System.AppDomainSetup"/> properties described in the Remarks section of the
   <see cref="System.AppDomain.GetData"/>
   method. You can modify their values with the appropriate <see cref="System.AppDomainSetup"/> properties. </para>
			<para>You can insert or modify your own user defined name-data pairs with this
   method and inspect their values with the <see cref="System.AppDomain.GetData"/>
   method. </para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">to use this method. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADGetData" SnippetID="1"/>
		</example>
		<seealso cref="System.AppDomain.GetData"/>
	</doc>
	<doc for="AppDomain.GetData">
		<summary>
			<para>Gets the value stored in the current application domain for the
      specified data name.</para>
		</summary>
		<param name="name">The name of an application domain property.</param>
		<returns>
			<para> The value of the <paramref name="name"/> property.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para>Use this method to retrieve the value of an entry in an
      internal cache of name-data pairs that describe properties of this instance
      of <see cref="System.AppDomain"/>. </para>
			<para>The cache automatically contains predefined system entries that are inserted
      when the application domain is created. You can inspect their values with the
   <see cref="System.AppDomain.GetData"/> method, or the equivalent <see cref="System.AppDomainSetup"/> properties. You can modify their values with the
      appropriate <see cref="System.AppDomainSetup"/>
      properties. </para>
			<para>You can insert or modify your own user defined name-data pairs with the
   <see cref="System.AppDomain.SetData"/> method and inspect their values with the <see cref="System.AppDomain.GetData"/>
   method. </para>
			<para>The following table describes the <paramref name="name"/> of each predefined system
entry and its corresponding <see cref="System.AppDomainSetup"/> property.</para>
			<list type="table">
				<listheader>
					<term>Value of 'name'</term>
					<description>Property</description>
				</listheader>
				<item>
					<term> "APPBASE"</term>
					<description><see cref="System.AppDomainSetup.ApplicationBase"/></description>
				</item>
				<item>
					<term> "APP_CONFIG_FILE"</term>
					<description><see cref="System.AppDomainSetup.ConfigurationFile"/></description>
				</item>
				<item>
					<term> "DYNAMIC_BASE"</term>
					<description><see cref="System.AppDomainSetup.DynamicBase"/></description>
				</item>
				<item>
					<term> "DEV_PATH"</term>
					<description>(no property)</description>
				</item>
				<item>
					<term> "APP_NAME"</term>
					<description><see cref="System.AppDomainSetup.ApplicationName"/></description>
				</item>
				<item>
					<term> "CACHE_BASE"</term>
					<description><see cref="System.AppDomainSetup.PrivateBinPath"/></description>
				</item>
				<item>
					<term> "BINPATH_PROBE_ONLY"</term>
					<description><see cref="System.AppDomainSetup.PrivateBinPathProbe"/></description>
				</item>
				<item>
					<term> "SHADOW_COPY_DIRS"</term>
					<description><see cref="System.AppDomainSetup.ShadowCopyDirectories"/></description>
				</item>
				<item>
					<term> "FORCE_CACHE_INSTALL"</term>
					<description><see cref="System.AppDomainSetup.ShadowCopyFiles"/></description>
				</item>
				<item>
					<term> "CACHE_BASE"</term>
					<description><see cref="System.AppDomainSetup.CachePath"/></description>
				</item>
				<item>
					<term> (application specific)</term>
					<description><see cref="System.AppDomainSetup.LicenseFile"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADGetData" SnippetID="1"/>
		</example>
		<seealso cref="System.AppDomain.SetData"/>
	</doc>
	<doc for="AppDomain.CurrentDomain">
		<summary>
			<para> Gets the current application domain for the
      current <see cref="System.Threading.Thread"/>.
      </para>
		</summary>
		<value>
			<para>The current application domain.</para>
		</value>
		<example>
			<codelink SampleID="ADApplicationBase" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.BaseDirectory">
		<summary>
			<para> Gets the base directory that the
      assembly resolver used to probe for assemblies.
      </para>
		</summary>
		<value>
			<para> The
      base directory that the assembly resolver uses to probe for assemblies.
      </para>
		</value>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>This property corresponds to the assembly resolver's
      APPBASE.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself, including if the path is in the form "file://" or \\UNC\dir or "c:\". Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADSetup" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.AppendPrivatePath">
		<summary>
			<para> Appends the specified name of the directory to the private path.
      </para>
		</summary>
		<param name="path">The name of the directory to be appended to the private path. </param>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para> The private path, or relative search path, is the path relative
      to the base directory where the assembly resolver probes for private assemblies.
      </para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to use this method. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADAppendPrivatePath" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.ClearPrivatePath">
		<summary>
			<para>Resets the path that specifies the location of private
      assemblies to the empty string ("").</para>
		</summary>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para> The private path is a path relative to the base directory that
      the common language runtime searches to locate private assemblies.</para>
			<para> For more information, see <see cref="System.AppDomainSetup.PrivateBinPath" qualify="true"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for using this method. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADClearPrivatePath" SnippetID="1"/>
		</example>
		<seealso cref="System.String.Empty" qualify="true"/>
	</doc>
	<doc for="AppDomain.DynamicDirectory">
		<summary>
			<para> Gets the directory that the assembly resolver used to probe for dynamically-created assemblies.
      </para>
		</summary>
		<value>
			<para> Get the
      directory that the assembly resolver uses to probe for dynamically-created assemblies.
      </para>
		</value>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>This property is only available after an attempt has been made to load an assembly into this
      domain. </para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the path information. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADDynamicBase" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.Evidence">
		<summary>
			<para> Gets the <see cref="System.Security.Policy.Evidence"/> associated with this application domain that
   is used as input
   to the security policy.
   </para>
		</summary>
		<value>
			<para> Gets the <see cref="System.Security.Policy.Evidence"/> associated with this application
   domain that is used as input to the security policy.
   </para>
		</value>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">to load an assembly with evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADCreateDomain" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.FriendlyName">
		<summary>
			<para> Gets the friendly name of this application domain.</para>
		</summary>
		<value>
			<para> The friendly name of this application domain.</para>
		</value>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para> The friendly name of the default application domain is the
      name of the assembly file loaded in the application domain. The friendly name
      is formed by stripping the directory specification from the assembly's
      codebase. For example, if an assembly with the file name <c>"c:\MyAppDirectory\MyAssembly.exe"</c> is loaded
   in the default application domain, the friendly name of that application domain is <c>"MyAssembly.exe"</c>.</para>
		</remarks>
		<example>
			<codelink SampleID="ADApplicationBase" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.GetAssemblies">
		<summary>
			<para> Gets the assemblies that have been loaded into this application
      domain.
      </para>
		</summary>
		<returns>
			<para> An array of assemblies in this application domain.
      </para>
		</returns>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADGetAssemblies" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.CreateInstanceAndUnwrap">
		<overload>
			<para> Creates a new instance of a specified
      type.
      </para>
		</overload>
		<summary>
			<para> Creates a new instance of the specified type. Parameters
      specify the assembly where the type is defined, and the name of the type.
      </para>
		</summary>
		<param name="assemblyName">The display name of the assembly. </param>
		<param name="typeName">The fully-qualified name of the requested type. </param>
		<returns>
			<para> An instance of the object specified by
   <paramref name="typeName"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyName"/> or <paramref name="typeName"/> is <see langword="null"/>. </exception>
		<exception cref="System.MissingMethodException">No matching public constructor was found.</exception>
		<exception cref="System.TypeLoadException"><paramref name="typename"/> was not found in <paramref name="assemblyName"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyName"/> was not found.</exception>
		<exception cref="System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para>This is a convenience method that combines <see cref="System.AppDomain.CreateInstance"/>
and <see cref="System.Runtime.Remoting.ObjectHandle.Unwrap" qualify="true"/>. This method calls the
default constructor for <paramref name="typeName"/>.</para>
			<para> See <see cref="System.Reflection.AssemblyName"/> for the format of <paramref name="assemblyName"/>. </para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to access the location of the assembly if codebase is supplied by a configuration file. Associated enumeration: PathDiscovery</permission>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to read the file containing the assembly manifest, or if you are creating a type from a module other than the manifest file. Associated enumeration: Read</permission>
		<permission cref="T:System.Net.WebPermission">for the ability to access the location of the assembly if the assembly is not local.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADDyno" SnippetID="1"/>
		</example>
		<seealso cref="System.AppDomain.CreateInstance"/>
	</doc>
	<doc for="AppDomain.CreateInstanceAndUnwrap1">
		<summary>
			<para>Creates a new instance of the specified type. Parameters specify the assembly where the type is defined, the name of the type, and an array of activation attributes. </para>
		</summary>
		<param name="assemblyName">The display name of the assembly. </param>
		<param name="typeName">The fully-qualified name of the requested type. </param>
		<param name="activationAttributes">An array containing one or more attributes that can participate in activation.</param>
		<returns>
			<para>An instance of the object specified by <paramref name="typeName"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyName"/> or <paramref name="typeName"/> is <see langword="null"/>. </exception>
		<exception cref="System.MissingMethodException">No matching public constructor was found.</exception>
		<exception cref="System.TypeLoadException"><paramref name="typename"/> was not found in <paramref name="assemblyName"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyName"/> was not found.</exception>
		<exception cref="System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
		<exception cref="System.NotSupportedException">The caller cannot provide activation attributes for an object that does not inherit from MarshalByRefObject.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para>This is a convenience method that combines <see cref="System.AppDomain.CreateInstance"/>
and <see cref="System.Runtime.Remoting.ObjectHandle.Unwrap" qualify="true"/>. This method calls the
default constructor for <paramref name="typeName"/>.</para>
			<para> See <see cref="System.Reflection.AssemblyName"/> for the format of <paramref name="assemblyName"/>. </para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to access the location of the assembly. Associated enumeration: PathDiscovery</permission>
		<permission cref="System.Security.Permissions.FileIOPermissionAccess">for the ability to read the file containing the assembly manifest. Associated enumeration: Read</permission>
		<permission cref="T:System.Net.WebPermission">for the ability to access the location of the assembly if the assembly is not local.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code when creating an instance of a delegate. Associated enumeration: SecurityPermissionFlag/UnmanagedCode</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for the ability to invoke operations on all type members. Associated enumeration: ReflectionPermissionFlag/MemberAccess</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADDyno" SnippetID="1"/>
		</example>
		<seealso cref="System.AppDomain.CreateInstance"/>
	</doc>
	<doc for="AppDomain.RelativeSearchPath">
		<summary>
			<para> Gets the path relative to the base directory where the
      assembly resolver should probe for private assemblies.
      </para>
		</summary>
		<value>
			<para> The path
      relative to the base directory where the assembly resolver should
      probe for private assemblies.
      </para>
		</value>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<remarks>
			<para>Private assemblies are deployed in the same directory structure as the
      application. </para>
		</remarks>
		<example>
			<codelink SampleID="ADAppendPrivatePath" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.SetShadowCopyPath">
		<summary>
			<para>Resets the list of directories containing shadow copied
      assemblies to the empty string ("").</para>
		</summary>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>The shadow copy path is a list of directories where
      shadow copied assemblies are stored.</para>
			<para>For more information, see <see cref="System.AppDomainSetup.ShadowCopyDirectories" qualify="true"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for using this method. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADShadowCopy" SnippetID="1"/>
		</example>
		<seealso cref="System.String.Empty" qualify="true"/>
	</doc>
	<doc for="AppDomain.SetCachePath">
		<summary>
			<para>Establishes the specified directory path as the location where assemblies are shadow copied.</para>
		</summary>
		<param name="path">The fully-qualified path to the shadow copy location.</param>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to use this method. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADShadowCopy" SnippetID="1"/>
		</example>
		<seealso cref="System.AppDomainSetup.CachePath"/>
	</doc>
	<doc for="AppDomain.SetAppDomainPolicy">
		<summary>
			<para> Establishes the
      security policy level for this application domain.
      </para>
		</summary>
		<param name="domainPolicy">The security policy level. </param>
		<exception cref="System.ArgumentNullException"><paramref name="domainPolicy"/> is <see langword="null"/>.</exception>
		<exception cref="System.Security.Policy.PolicyException">The security policy level has already been set. </exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>Call this method before an assembly is loaded into the <see cref="System.AppDomain"/> in order for
   the security policy to have effect. </para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.SecurityPermission">to use this method. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADSetAppDomainPolicy" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.SetPrincipalPolicy">
		<summary>
			<para>Specifies how principal and identity objects should be attached to a thread
      if the thread attempts to bind to a principal while executing in this
      application domain.</para>
		</summary>
		<param name="policy">The type of the principal object to attach to threads. </param>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>Setting this value will only be effective if you set it before using
      Thread.CurrentPrincipal. For example, if you set Thread.CurrentPrincipal to a
      given principal (for example, a generic principal) and then set the
      PrincipalPolicy using SetPrincipalPolicy to WindowsPrincipal, the current
      principal will remain the generic principal.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for ability to manipulate the principal object. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADPrincipal" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.SetShadowCopyPath1">
		<summary>
			<para>Establishes the specified directory path as the location of
      assemblies to be shadow copied.</para>
		</summary>
		<param name="path">A list of directory names, where each name is separated by a semicolon.</param>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>This method sets the <see cref="System.AppDomainSetup.ShadowCopyDirectories"/> property of the internal <see cref="System.AppDomainSetup"/>
associated with this instance.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for using this method. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADShadowCopy" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.SetShadowCopyFiles">
		<summary>
			<para>Turns on shadow copying.</para>
		</summary>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for using this method. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADShadowCopy" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.SetDynamicBase">
		<summary>
			<para>Establishes the specified directory path as the location where dynamically generated
      files are stored and accessed.</para>
		</summary>
		<param name="path">The fully-qualified path to where dynamic assemblies are stored.</param>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>This method sets the <see cref="System.AppDomainSetup.DynamicBase"/> property of the internal <see cref="System.AppDomainSetup"/> associated with this instance.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for using this method. Associated enumeration: <see cref="System.Security.Permissions.SecurityAction.LinkDemand" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to read from a file or directory, and for access to the information in the path itself. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADDynamicBase" SnippetID="1"/>
		</example>
		<seealso cref="System.AppDomainSetup.DynamicBase"/>
	</doc>
	<doc for="AppDomain.ToString">
		<summary>
			<para> Obtains the <see cref="System.String"/> representation of this instance.
   </para>
		</summary>
		<returns>
			<para> The friendly name of the application domain.
      </para>
		</returns>
		<remarks>
			<para> The string representation specifies the friendly name of the
      application domain.
      </para>
		</remarks>
		<example>
			<codelink SampleID="ADToString" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.Unload">
		<summary>
			<para> Unloads the specified application domain.
      </para>
		</summary>
		<param name="domain">An application domain to unload. </param>
		<exception cref="System.ArgumentNullException"><paramref name="domain"/> is <see langword="null"/>.</exception>
		<exception cref="System.CannotUnloadAppDomainException"><paramref name="domain"/> could not be unloaded.</exception>
		<remarks>
			<para>A long period of time can pass before <paramref name="domain"/>
unloads because it might be difficult to terminate
executing threads.</para>
			<para>If the thread that invoked <see cref="System.AppDomain.Unload"/>
is running in the <paramref name="domain"/>, another thread is started to perform the unload
operation. If <paramref name="domain"/> cannot be unloaded, an instance of <see cref="System.CannotUnloadAppDomainException"/> is thrown to that thread, not the original thread that invoked
<see cref="System.AppDomain.Unload"/>. However, if the thread that invoked <see cref="System.AppDomain.Unload"/> is 
running outside <paramref name="domain"/>, that thread will receive the exception.</para>
			<para>The threads in <paramref name="domain"/>
are terminated using
the <see cref="System.Threading.Thread.Abort"/> method, which throws the thread an instance of
<see cref="System.Threading.ThreadAbortException"/>. Although 
the thread should terminate promptly, it can continue executing for an
unpredictable amount of time in its <see langword="finally"/>
clause.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADUnload" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.SetThreadPrincipal">
		<summary>
			<para> Sets the default principal object to be attached to threads if
      they attempt to bind to a principal while executing in this application domain.
      </para>
		</summary>
		<param name="principal">The principal object to attach to threads. </param>
		<exception cref="System.ArgumentNullException"><paramref name="principal"/> is <see langword="null"/>.</exception>
		<exception cref="System.Security.Policy.PolicyException">The thread principal has already been set. </exception>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for ability to manipulate the principal object. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADPrincipal" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomain.SetupInformation">
		<summary>
			<para>Gets the application domain configuration information
      for this instance.</para>
		</summary>
		<value>
			<para> The application domain initialization information.</para>
		</value>
		<exception cref="System.AppDomainUnloadedException">Operations are attempted on an unloaded application domain.</exception>
		<example>
			<codelink SampleID="ADCreateDomain" SnippetID="1"/>
		</example>
	</doc>
</docs>
