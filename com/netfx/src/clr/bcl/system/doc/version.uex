<docs>
	<doc for="Version.Build">
		<summary>
			<para>Gets the value of the build component of the version number for this 
       instance.</para>
		</summary>
		<value>
			<para>The build number, or -1 if the build number is undefined.</para>
		</value>
		<remarks>
			<para>For example, if the version number is 6.2.1.3, the build number is 1. If the 
       version number is 6.2, the build number is undefined.</para>
		</remarks>
	</doc>
	<doc for="Version.Revision">
		<summary>
			<para>Gets the value of the revision component of the version number for this 
       instance.</para>
		</summary>
		<value>
			<para>The revision number, or -1 if the revision number is undefined.</para>
		</value>
		<remarks>
			<para>For example, if the version number is 6.2.1.3, the revision number is 3. If 
       the version number is 6.2, the revision number is undefined.</para>
		</remarks>
	</doc>
	<doc for="Version.GetHashCode">
		<summary>
			<para>Returns a hash code for this instance.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer hash code.</para>
		</returns>
	</doc>
	<doc for="Version.Major">
		<summary>
			<para>Gets the value of the major component of the version number for this
      instance.</para>
		</summary>
		<value>
			<para>The major version number.</para>
		</value>
		<remarks>
			<para>For example, if the version number is 6.2, the major version is 6.</para>
		</remarks>
	</doc><doc for="Version.Minor">
		<summary>
			<para>Gets the value of the minor component of the version number for this
      instance.</para>
		</summary>
		<value>
			<para>The minor version number.</para>
		</value>
		<remarks>
			<para>For example, if the version number is 6.2, the minor version is 2.</para>
		</remarks>
	</doc><doc for="Version.Version4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Version"/> class.</para>
		</summary>
	</doc><doc for="Version.operatorEQ">
		<summary>
			<para> Determines whether two specified instances of <see cref="System.Version"/>
are equal.</para>
		</summary>
		<altmember cref="System.Version.Equals"/>
		<param name="v1">The first instance of <see cref="System.Version"/>. </param>
		<param name="v2">The second instance of <see cref="System.Version"/>. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="v1 "/>equals <paramref name="v2"/>;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<seealso cref="System.Version.Equals"/>
		<seealso cref="System.Version.CompareTo"/>
	</doc><doc for="Version.Clone">
		<summary>
			<para>Returns a new <see cref="System.Version"/> whose value is the same as this
   instance.</para>
		</summary>
		<returns>
			<para>A new <see cref="System.Object"/> whose values are a copy of this
<see cref="System.Version"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Object"/> returned by this method must be explicitly cast to a
<see cref="System.Version"/> before it can be 
   used as one.</para>
		</remarks>
	</doc><doc for="Version.Equals">
		<summary>
			<para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
		</summary>
		<param name=" obj">An object to compare with this instance, or <see langword="null"/>.</param>
		<returns>
			<para><see langword="true "/>if this instance and <paramref name="obj"/> are both <see cref="System.Version"/> objects, and every component of this instance matches
   the corresponding component of <paramref name="obj"/>; otherwise,
<see langword="false"/>.</para>
		</returns>
		<seealso cref="System.Version.CompareTo"/>
	</doc><doc for="Version.ToString">
		<overload>
			<para>Converts the value of this instance to its equivalent
      <see cref="System.String"/>
   representation. </para>
		</overload>
		<summary>
			<para>Converts the value of this instance to its equivalent
      <see cref="System.String"/>
   representation. </para>
		</summary>
		<returns>
			<para>The <see cref="System.String"/> representation of the values of the major, minor, build, and revision components of this instance, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined:</para>
			<para>major.minor[.build[.revision]]</para>
			<para>For example, if you create an instance of <see cref="System.Version"/> using the constructor <c>Version(1,1)</c> , the returned string is "1.1". If you
create an instance of <see cref="System.Version"/> using the constructor <c>Version(1,3,4,2)</c>, the returned string is "1.3.4.2".</para>
		</returns>
	</doc><doc for="Version.operatorNE">
		<summary>
			<para>Determines whether two specified instances of
      <see cref="System.Version"/> are
      not equal. </para>
		</summary>
		<altmember cref="System.Version.Equals"/>
		<param name="v1">The first instance of <see cref="System.Version"/>. </param>
		<param name="v2">The second instance of <see cref="System.Version"/>. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="v1 "/>does not equal
<paramref name="v2"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<seealso cref="System.Version.Equals"/>
		<seealso cref="System.Version.CompareTo"/>
	</doc><doc for="Version.Version">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Version"/> class with the
   specified major, minor, build, and revision numbers.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Version"/> class with the
   specified major, minor, build, and revision numbers.</para>
		</summary>
		<param name=" major">The major version number.</param>
		<param name=" minor">The minor version number.</param>
		<param name=" build">The build number.</param>
		<param name=" revision">The revision number.</param>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="major"/>, <paramref name="minor"/>, <paramref name="build"/>, or <paramref name="revision"/> are less than zero. </exception>
		<remarks>
			<para>Metadata restricts <paramref name="major"/>, <paramref name="minor"/>, <paramref name="build"/>, and
<paramref name="revision"/> to a maximum of <see cref="System.UInt16.MaxValue"/> - 1.</para>
		</remarks>
	</doc><doc for="Version.Version1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Version"/> class using the
   specified major, minor, and build values.</para>
		</summary>
		<param name=" major">The major version number.</param>
		<param name=" minor">The minor version number.</param>
		<param name=" build">The build number.</param>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="major"/>, <paramref name="minor"/>, or <paramref name="build"/> are less than zero. </exception>
		<remarks>
			<para>Metadata restricts <paramref name="major"/>, <paramref name="minor"/>, and <paramref name="build"/> to a maximum
   value of <see cref="System.UInt16.MaxValue"/> - 1.</para>
		</remarks>
	</doc><doc for="Version.Version2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Version"/> class using the
   specified major and minor values.</para>
		</summary>
		<param name=" major">The major version number.</param>
		<param name=" minor">The minor version number.</param>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="major"/> or <paramref name="minor"/> is less than zero. </exception>
		<remarks>
			<para>Metadata restricts <paramref name="major"/> and <paramref name="minor"/> to a maximum value of
<see cref="System.UInt16.MaxValue"/>
- 1.</para>
		</remarks>
	</doc><doc for="Version.ToString1">
		<summary>
			<para>Converts the value of this instance to its equivalent
   <see cref="System.String"/>
   representation. A specified count indicates the number of components to
   return.</para>
		</summary>
		<param name=" fieldCount">The number of components to return. The <paramref name="fieldCount"/> ranges from 0 to 4.</param>
		<returns>
			<para>The <see cref="System.String"/> representation of the values of the major, minor, build, and revision components of this instance, each separated by a period character ('.'). The <paramref name="fieldCount"/> parameter determines how many components are returned. </para>
			<list type="table">
				<listheader>
					<term>fieldCount</term>
					<description>Return Value</description>
				</listheader>
				<item>
					<term> 0</term>
					<description>An empty string ("").</description>
				</item>
				<item>
					<term> 1</term>
					<description>major</description>
				</item>
				<item>
					<term> 2</term>
					<description>major.minor</description>
				</item>
				<item>
					<term> 3</term>
					<description>major.minor.build</description>
				</item>
				<item>
					<term> 4</term>
					<description>major.minor.build.revision</description>
				</item>
			</list>
			<para>For example, if you create an instance of <see langword="Version"/> using the constructor <c>Version(1,3,5)</c>, <c>ToString(2)</c> returns "1.3" and <c>ToString(4)</c> throws an exception.</para>
		</returns>
		<exception cref="System.ArgumentException"><para><paramref name="fieldCount "/>is less than 0, or more than 4.</para>
			<para>-or-</para>
			<para><paramref name="fieldCount"/> is more than the number of components defined in this instance.</para></exception>
	</doc>
	<doc for="Version">
		<summary>
			<para>Represents the version number for a common language runtime assembly. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>Version numbers consist of two to four components: major, minor, build,
      and revision. Components major and minor are required. Components build and
      revision are optional, but the revision component is only optional if
      the build component is not defined. All defined components must be decimal integers
      greater than or equal to 0. Metadata restricts the major, minor, build, and
      revision components to a maximum value of <see cref="System.UInt16.MaxValue"/> - 1.</para>
			<para>The format of the version number is as follows. Optional components are shown
      in square brackets ('[' and ']'):</para>
			<para>major.minor[.build[.revision]]</para>
			<para>The components are used by convention as follows:</para>
			<list type="bullet"><item>
					<term>
						<paramref name="Major"/>: Assemblies with 
         the same name but different major versions are not interchangeable. This would
         be appropriate, for example, for a major rewrite of a product where backward
         compatibility cannot be assumed.</term>
				</item>
				<item>
					<term>
						<paramref name="Minor"/>: If the name and 
         major number on two assemblies are the same, but the minor number is
         different, this indicates significant enhancement with the intention of
         backward compatibility. This would be appropriate, for example, on a point
         release of a product or a fully backward compatible new version of a product.</term>
				</item>
				<item>
					<term>
						<paramref name="Build"/>: A difference in 
         build number represents a recompilation of the same source. This would be
         appropriate because of processor, platform, or compiler changes.</term>
				</item>
				<item>
					<term>
						<paramref name="Revision"/>: Assemblies with
         the same name, major, and minor version numbers but different revisions are
         intended to be fully interchangeable. This would be appropriate to fix a
         security hole in a previously released assembly.</term>
				</item>
			</list>
			<para>Subsequent versions of an assembly that differ only by build or revision
   numbers are considered to be Quick Fix Engineering (QFE) updates of the prior
   version. If necessary, the build and revision numbers can be honored by changing
   the version policy in the configuration. </para>
			<para>This class implements the <see cref="System.ICloneable"/> and <see cref="System.IComparable"/>
interfaces.</para>
		</remarks>
	</doc>
	<doc for="Version.Version3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Version"/> class using the
   value represented by the specified <see cref="System.String"/>.</para>
		</summary>
		<param name=" version">A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.').</param>
		<exception cref="System.ArgumentException"><para><paramref name="version"/> has fewer than two components or more than four components.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="version"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException">A major, minor, build, or revision component is less than zero.</exception>
		<exception cref="System.FormatException"><para>At least one component of <paramref name="version"/> does not parse to a decimal integer.</para></exception>
		<remarks>
			<para>The <paramref name="version"/> parameter can only contain
   components major, minor, build, and revision, in that order, and all separated by periods. There
   must be at least two components, and at most four. The first two components are
   assumed to be major and minor. The value
   of unspecified components is undefined.</para>
			<para>The format of the version number is as follows. Optional components are shown
   in square brackets ('[' and ']'):</para>
			<para>major.minor[.build[.revision]]</para>
			<para>All defined components must be decimal integers greater than or
   equal to 0. Metadata restricts the value of each major, minor, build, and revision
   component to a maximum value of <see cref="System.UInt16.MaxValue"/> - 1.</para>
			<para>For example, if the major number is 6, the minor number is 2, the build
   number is 1, and the revision number is 3, then <paramref name="version"/> should be "6.2.1.3".</para>
		</remarks>
	</doc>
	<doc for="Version.CompareTo">
		<summary>
			<para>Compares this instance to a specified object and returns an indication of
      their relative values.</para>
		</summary>
		<param name=" version">An object to compare, or <see langword="null"/>.</param>
		<returns>
			<list type="table"><listheader>
					<term>Return Value</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> Less
         than
         zero</term>
					<description> This instance is before
      <paramref name="version"/>.</description>
				</item>
				<item>
					<term> Zero</term>
					<description>This instance is the same as
      <paramref name="version"/>.</description>
				</item>
				<item>
					<term> Greater than
         zero</term>
					<description>
						<para>This instance is subsequent to
         <paramref name="version"/>.</para>
						<para>-or-</para>
						<para><paramref name="version"/> is 
      <see langword="null"/>.</para></description>
				</item>
			</list>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="version"/> is not of type <see cref="System.Version"/> and is not <see langword="null"/>.</exception>
		<remarks>
			<para>The components of <see langword="Version"/> in decreasing order of importance are: major, minor, build, and revision. An unknown component is assumed to be older than any known component.</para>
			<para>For example:</para>
			<list type="bullet"><item>
					<term>
      
      version 1.1 is older than version 1.1.0</term>
				</item>
				<item>
					<term>
      
      version 1.1 is older than version 1.1.1</term>
				</item>
				<item>
					<term>
      
      version 1.1 is older than version 1.1.2.3</term>
				</item>
				<item>
					<term>
      
      version 1.1.2 is older than version 1.1.2.4</term>
				</item>
				<item>
					<term>
      
      version 1.2.5 is newer than version 1.2.3.4</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.Version.Equals"/>
	</doc>
	<doc for="Version.operatorLT">
		<summary>
			<para> Determines whether the first specified instance of
   <see cref="System.Version"/> is less than the
      second specified instance of <see cref="System.Version"/>.
      </para>
		</summary>
		<altmember cref="System.Version.CompareTo"/>
		<param name="v1">The first instance of <see cref="System.Version"/>. </param>
		<param name="v2">The second instance of <see cref="System.Version"/>. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="v1"/> is less than
<paramref name="v2"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="v1"/> is <see langword="null"/>.</exception>
		<seealso cref="System.Version.Equals"/>
		<seealso cref="System.Version.CompareTo"/>
	</doc>
	<doc for="Version.operatorLE">
		<summary>
			<para> Determines whether the first specified instance of
   <see cref="System.Version"/> is less than or
      equal to the second instance of <see cref="System.Version"/>.
      </para>
		</summary>
		<altmember cref="System.Version.CompareTo"/>
		<param name="v1">The first instance of <see cref="System.Version"/>. </param>
		<param name="v2">The second instance of <see cref="System.Version"/>. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="v1"/> is <see langword="null"/>.</exception>
		<seealso cref="System.Version.Equals"/>
		<seealso cref="System.Version.CompareTo"/>
	</doc>
	<doc for="Version.operatorGT">
		<summary>
			<para> Determines whether the first specified instance of
   <see cref="System.Version"/> is greater than
      the second specified instance of <see cref="System.Version"/>.
      </para>
		</summary>
		<altmember cref="System.Version.CompareTo"/>
		<param name="v1">The first instance of <see cref="System.Version"/>. </param>
		<param name="v2">The second instance of <see cref="System.Version"/>. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="v1"/> is greater than
<paramref name="v2"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="v2"/> is <see langword="null"/>.</exception>
		<seealso cref="System.Version.Equals"/>
		<seealso cref="System.Version.CompareTo"/>
	</doc>
	<doc for="Version.operatorGE">
		<summary>
			<para> Determines whether the first specified instance of
   <see cref="System.Version"/> is greater than or
      equal to the second instance of <see cref="System.Version"/>.
      </para>
		</summary>
		<altmember cref="System.Version.CompareTo"/>
		<param name="v1">The first instance of <see cref="System.Version"/>. </param>
		<param name="v2">The second instance of <see cref="System.Version"/>. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="v1"/> is greater than or
   equal to <paramref name="v2"/>; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="v2"/> is <see langword="null"/>.</exception>
		<seealso cref="System.Version.Equals"/>
		<seealso cref="System.Version.CompareTo"/>
	</doc>
</docs>
