<docs>
	<doc for="Char.IConvertible.ToBoolean">
		<summary>
			<para>This conversion is not supported. Attempting to do so throws an <see langword="InvalidCastException"/>.</para>
		</summary>
		<exception cref="InvalidCastException">Unsupported conversion of <see langword="Char"/>.</exception>
		<seealso cref="System.Type"/>
	</doc>
	<doc for="Char.IConvertible.ToChar">
		<summary>
			<para>Returns the value of this instance of 
    <see langword="Char"/> .</para>
		</summary>
		<returns>
			<para>The value of this instance of <see langword="Char"/> .</para>
		</returns>
	</doc>
	<doc for="Char.IConvertible.ToSByte">
		<summary>
			<para>Converts this instance of a Char to an <see cref="System.SByte"/>.</para>
		</summary>
		<returns>
			<para>An SByte value.</para>
		</returns>
		<remarks>
		</remarks>
	</doc>
	<doc for="Char.IConvertible.ToByte">
		<summary>
    Returns an 8-bit unsigned integer with a value equivalent to the value of
    this instance.
 </summary>
		<returns>
			<para>The converted value of this instance.</para>
		</returns>
	</doc>
	<doc for="Char.IConvertible.ToInt16">
		<summary>
			<para>Converts this instance of a Char to an <see cref="System.Int16"/>.</para>
		</summary>
		<returns>
			<para>An Int16 as a Char.</para>
		</returns>
		<remarks>
		</remarks>
	</doc>
	<doc for="Char.IConvertible.ToUInt16">
		<summary>
			<para>
       Converts a Char to a <see cref="System.UInt16"/>.
    </para>
		</summary>
		<returns>
			<para>
       A number as a UInt16.
    </para>
		</returns>
		<exception cref="System.InvalidCastException">
    If it doesn't return a UInt16.
 </exception>
		<remarks>
			<para>
       The ToUInt16 method converts a byte value into a <see cref="System.UInt16"/>
       and returns it.
    </para>
		</remarks>
	</doc>
	<doc for="Char.IConvertible.ToInt32">
		<summary>
			<para>Converts this instance of a Char value to
       an <see cref="System.Int32"/>.</para>
		</summary>
		<returns>
			<para>A value as an Int32.</para>
		</returns>
		<remarks>
		</remarks>
	</doc>
	<doc for="Char.IConvertible.ToUInt32">
		<summary>
			<para>
       Converts a Char to a <see cref="System.UInt32"/>.
    </para>
		</summary>
		<returns>
			<para>
       A number as a UInt32.
    </para>
		</returns>
		<exception cref="System.InvalidCastException">
    If it doesn't return a UInt32.
 </exception>
		<remarks>
			<para>
       The ToUInt32method converts a byte value into a <see cref="System.UInt32"/>
       and returns it.
    </para>
		</remarks>
	</doc>
	<doc for="Char.IConvertible.ToInt64">
		<summary>
			<para>Converts this instance of a Char to an <see cref="System.Int64"/>.</para>
		</summary>
		<returns>
			<para>An Int64 value.</para>
		</returns>
		<remarks>
		</remarks>
	</doc>
	<doc for="Char.IConvertible.ToUInt64">
		<summary>
			<para>
       Converts a Char to a <see cref="System.UInt64"/>.
    </para>
		</summary>
		<returns>
			<para>
       A number as a UInt64.
    </para>
		</returns>
		<exception cref="System.InvalidCastException">
    If it doesn't return a UInt64.
 </exception>
		<remarks>
			<para>
       The ToUInt64method converts a Boolean value into a
    <see cref="System.UInt64"/>
    and returns it.
 </para>
		</remarks>
	</doc>
	<doc for="Char.IConvertible.ToSingle">
		<summary>
			<note type="note">
       This conversion is not supported. Attempting to do so throws an <see langword="InvalidCastException"/>.
    </note>
		</summary>
		<exception cref="InvalidCastException">Unsupported conversion of <see langword="Char"/> .</exception>
	</doc>
	<doc for="Char.IConvertible.ToDouble">
		<summary>
			<para>This conversion is not supported. Attempting to do so throws an <see langword="InvalidCastException"/>.</para>
		</summary>
		<exception cref="InvalidCastException">Unsupported conversion of <see langword="Char"/> .</exception>
	</doc>
	<doc for="Char.IConvertible.ToDecimal">
		<summary>
			<note type="note">
       This conversion is not supported. Attempting to do so throws an <see langword="InvalidCastException"/>.
    </note>
		</summary>
		<exception cref="InvalidCastException">Unsupported conversion of <see langword="Char"/> .</exception>
	</doc>
	<doc for="Char.IConvertible.ToDateTime">
		<summary>
			<note type="note">
       This conversion is not supported. Attempting to do so throws an <see langword="InvalidCastException"/>.
    </note>
		</summary>
		<exception cref="InvalidCastException">Unsupported conversion of <see langword="Char"/> .</exception>
	</doc>
	<doc for="Char.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer hash code.</para>
		</returns>
	</doc><doc for="Char.IConvertible.ToType">
		<overload>
			<para> Indicates whether a Unicode character is categorized as a control character.</para>
		</overload>
		<summary>
			<para>Indicates whether the specified Unicode character is categorized as a control character.</para>
		</summary>
		<param name="type">A Unicode character. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="type"/>is a control character;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<seealso cref="System.Boolean"/>
	</doc><doc for="Char.IsUpper">
		<overload>
			<para> Indicates whether a Unicode character is categorized as an uppercase letter.</para>
		</overload>
		<summary>
			<para>Indicates whether the specified Unicode character is categorized as an uppercase letter.</para>
		</summary>
		<param name="c">A Unicode character. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="c "/>is an uppercase letter;
 otherwise, <see langword="false"/>.
 </para>
		</returns>
		<remarks>
			<para>Valid uppercase letters are members of the following category in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="UppercaseLetter"/>.</para>
		</remarks>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.Char.IsLower"/>
	</doc>
	<doc for="Char.GetTypeCode">
		<summary>
			<para>Returns the <see cref="System.TypeCode"/> for value type <see cref="System.Char"/>.</para>
		</summary>
		<returns>
			<para>The enumerated constant, <see cref="System.TypeCode.Char" qualify="true"/>.</para>
		</returns>
	</doc>
	<doc for="Char.MaxValue">
		<summary>
			<para>Represents the largest possible value of a <see cref="System.Char"/>. This field is
 constant.</para>
		</summary>
		<remarks>
			<para> The value of this constant is hexadecimal 0xFFFF.</para>
		</remarks>
		<seealso cref="System.Char.MinValue"/>
	</doc>
	<doc for="Char.MinValue">
		<summary>
			<para> Represents the smallest possible value of a <see cref="System.Char"/>. This field is constant.</para>
		</summary>
		<remarks>
			<para>The value of this constant is hexadecimal 0x00.</para>
		</remarks>
		<seealso cref="System.Char.MaxValue"/>
	</doc>
	<doc for="Char.IsUpper1">
		<summary>
			<para>Indicates whether the character at the specified 
 position in a specified string is categorized as an uppercase letter.</para>
		</summary>
		<param name=" s">A string.</param>
		<param name=" index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para><see langword="true"/> if the
 character at position <paramref name="index"/> in <paramref name="s "/>is an uppercase letter;
 otherwise, <see langword="false"/>.
 </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>Character positions in a string 
 are indexed starting from zero.</para>
			<para>Valid uppercase letters are members of the following category in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="UppercaseLetter"/>.</para>
		</remarks>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.String"/>
	</doc>
	<doc for="Char.GetNumericValue1">
		<summary>
			<para>Converts the numeric Unicode character at the specified
      position in a specified string to a
      double-precision floating point number.</para>
		</summary>
		<param name=" s">A <see cref="System.String"/>.</param>
		<param name=" index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para>The numeric value of the character at position <paramref name="index"/> in <paramref name="s"/>
if that character represents a number; otherwise, -1.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>For example, if the character at position <paramref name="index"/>
in <paramref name="s"/> is '5', the return value is 5. However, if the character at
position <paramref name="index"/> in <paramref name="s"/> is 'z', the return value is -1.</para>
			<para>Character positions in a string are indexed starting from zero.</para>
			<para>A character has an associated numeric value if and only if it is a member of
   one of the following categories in <see cref="System.Globalization.UnicodeCategory"/>:
<see langword="DecimalDigitNumber"/>, <see langword="LetterNumber"/>, or 
<see langword="OtherNumber"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.GetNumericValue"/>.</para>
			<codelink SampleID="System.Char.GetNumericValue" SnippetID="1"/>
		</example>
	</doc><doc for="Char.ToString">
		<overload>
			<para>Converts the value of this instance to its equivalent
      string representation. </para>
		</overload>
		<summary>
			<para>Converts the value of this instance to its equivalent
      string
      representation. </para>
		</summary>
		<returns>
			<para>The string representation of
      the value of this instance.</para>
		</returns>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.ToString"/>.</para>
			<codelink SampleID="System.Char.ToString" SnippetID="17"/>
		</example>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Char.Parse"/>
		<seealso cref="System.String"/>
	</doc><doc for="Char.ToString2">
		<summary>
			<para> Converts the value of this instance to its equivalent
      string representation using the specified culture-specific
      format information. </para>
		</summary>
		<param name=" provider">(Reserved) An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information. </param>
		<returns>
			<para>The string representation of the value of this instance as
      specified by <paramref name="provider"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="provider"/> parameter is ignored; it does not participate in this operation.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates an overload of <see cref="System.Char.ToString"/>.</para>
			<codelink SampleID="System.Char.ToString" SnippetID="17"/>
		</example>
		<seealso cref="System.Char.Parse"/>
		<seealso cref="System.String"/>
	</doc><doc for="Char.ToString1">
		<summary>
			<para> Converts the specified Unicode character to its
      equivalent string
      representation. </para>
		</summary>
		<param name=" c">A Unicode character.</param>
		<returns>
			<para>The string
      representation of the value of <paramref name="c"/>.</para>
		</returns>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.ToString"/>.</para>
			<codelink SampleID="System.Char.ToString" SnippetID="17"/>
		</example>
		<seealso cref="System.Char.Parse"/>
		<seealso cref="System.String"/>
	</doc><doc for="Char.IsDigit">
		<overload>
			<para> Indicates whether a Unicode character is categorized as a
      decimal digit.</para>
		</overload>
		<summary>
			<para>Indicates whether the specified Unicode character is categorized as a
      decimal digit.</para>
		</summary>
		<param name="c">A Unicode character. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="c "/>is a decimal digit;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>This method determines if a <see cref="System.Char"/> is a radix-10 digit. This contrasts with <see cref="System.Char.IsNumber"/> which
   determines if a <see langword="Char"/> is of any numeric Unicode category.</para>
			<para>Valid digits are members of the following category in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="DecimalDigitNumber"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsDigit"/>.</para>
			<codelink SampleID="System.Char.IsDigit" SnippetID="4"/>
		</example>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.Char.IsNumber"/>
	</doc><doc for="Char.IsLetter">
		<overload>
			<para> Indicates whether a Unicode character is categorized as an
      alphabetic letter.</para>
		</overload>
		<summary>
			<para>Indicates whether the specified Unicode character is categorized as an
      alphabetic letter.</para>
		</summary>
		<param name="c">A Unicode character. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="c "/>is an alphabetic letter;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>Valid letters are members of the following categories in <see cref="System.Globalization.UnicodeCategory"/>:
<see langword="UppercaseLetter"/>, <see langword="LowercaseLetter"/>, 
<see langword="TitlecaseLetter"/>, <see langword="ModifierLetter"/>, and 
<see langword="OtherLetter"/> 
.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsLetter"/>.</para>
			<codelink SampleID="System.Char.IsLetter" SnippetID="5"/>
		</example>
		<seealso cref="System.Boolean"/>
	</doc><doc for="Char.IsLower">
		<overload>
			<para> Indicates whether a Unicode character is categorized as a lowercase letter.</para>
		</overload>
		<summary>
			<para>Indicates whether the specified Unicode character is categorized as a lowercase letter.</para>
		</summary>
		<param name="c">A Unicode character. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="c "/>is a lowercase letter;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>Valid lowercase letters are members of the following category in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="LowercaseLetter"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsLower"/>.</para>
			<codelink SampleID="System.Char.IsLower" SnippetID="7"/>
		</example>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.Char.IsUpper"/>
	</doc><doc for="Char.IsPunctuation">
		<overload>
			<para> Indicates whether a Unicode character is categorized as a punctuation mark.</para>
		</overload>
		<summary>
			<para>Indicates whether the specified Unicode character is categorized as a punctuation mark.</para>
		</summary>
		<param name="c">A Unicode character. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="c "/>is a punctuation mark;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>Valid punctuation marks are members of the following
      categories in <see cref="System.Globalization.UnicodeCategory"/>:
   <see langword="ConnectorPunctuation"/>, <see langword="DashPunctuation"/>,
   <see langword="OpenPunctuation"/>, <see langword="ClosePunctuation"/>,
   <see langword="InititalQuotePunctuation"/>,
   <see langword="FinalQuotePunctuation"/>, or
   <see langword="OtherPunctuation"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsPunctuation"/>.</para>
			<codelink SampleID="System.Char.IsPunctuation" SnippetID="9"/>
		</example>
		<seealso cref="System.Boolean"/>
	</doc><doc for="Char.IsLetterOrDigit">
		<overload>
			<para> Indicates whether a Unicode character is categorized as an alphabetic letter or a decimal digit.</para>
		</overload>
		<summary>
			<para>Indicates whether the specified Unicode character is categorized as an alphabetic letter or a decimal digit.</para>
		</summary>
		<param name="c">A Unicode character. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="c "/>is an alphabetic letter or a decimal digit;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>Valid alphabetic letters and decimal digits are members of the following
      categories in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="UppercaseLetter"/>,
   <see langword="LowercaseLetter"/>, <see langword="TitlecaseLetter"/>,
   <see langword="ModifierLetter"/>, <see langword="OtherLetter"/>, or
   <see langword="DecimalDigitNumber"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsLetterOrDigit"/>.</para>
			<codelink SampleID="System.Char.IsLetterOrDigit" SnippetID="6"/>
		</example>
		<seealso cref="System.Boolean"/>
	</doc><doc for="Char.IsControl1">
		<overload>
			<para>Indicates whether a specified Unicode character is categorized as a control character.</para>
		</overload>
		<summary>
			<para>Indicates whether the specified Unicode character is categorized
      as a control character.</para>
		</summary>
		<param name="c">A Unicode character.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="c"/> is a control character; otherwise, <see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>Valid control characters are members of the following category in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="Control"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsControl"/>.</para>
			<codelink SampleID="System.Char.IsControl" SnippetID="3"/>
		</example>
	</doc><doc for="Char.IsControl">
		<summary>
			<para>Indicates whether the character at the specified
      position in a specified string is categorized as a control character.</para>
		</summary>
		<param name=" s">A string.</param>
		<param name=" index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para><see langword="true"/> if the
   character at position <paramref name="index"/> in <paramref name="s "/>is a control character;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>Character positions in a string are indexed starting from zero.</para>
			<para>Valid control characters are members of the following category in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="Control"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsControl"/>.</para>
			<codelink SampleID="System.Char.IsControl" SnippetID="3"/>
		</example>
		<seealso cref="System.Boolean"/>
	</doc><doc for="Char.IsDigit1">
		<summary>
			<para>Indicates whether the character at the specified
      position in a specified string is categorized as a decimal digit.</para>
		</summary>
		<param name=" s">A <see cref="System.String"/>.</param>
		<param name=" index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para><see langword="true"/> if the
   character at position <paramref name="index"/> in <paramref name="s "/>is a decimal digit;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>This method determines if a <see cref="System.Char"/> is a radix-10 digit. This contrasts with <see cref="System.Char.IsNumber"/>, which
   determines if a <see langword="Char"/> is of any numeric Unicode category.</para>
			<para>Character positions in a string are indexed starting from zero.</para>
			<para> Valid digits are members of the following category in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="DecimalDigitNumber"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsDigit"/>.</para>
			<codelink SampleID="System.Char.IsDigit" SnippetID="4"/>
		</example>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.Char.IsNumber"/>
	</doc><doc for="Char.IsLetter1">
		<summary>
			<para>Indicates whether the character at the specified
      position in a specified string is categorized as an alphabetic character.</para>
		</summary>
		<param name=" s">A string.</param>
		<param name=" index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para><see langword="true"/> if the
   character at position <paramref name="index"/> in <paramref name="s "/>is an alphabetic character;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>Character positions in a string
      are indexed starting from zero.</para>
			<para>Valid letters are members of the following categories in <see cref="System.Globalization.UnicodeCategory"/>:
<see langword="UppercaseLetter"/>, <see langword="LowercaseLetter"/>, 
<see langword="TitlecaseLetter"/>, <see langword="ModifierLetter"/>, and 
<see langword="OtherLetter"/>
.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsLetter"/>.</para>
			<codelink SampleID="System.Char.IsLetter" SnippetID="5"/>
		</example>
		<seealso cref="System.Boolean"/>
	</doc><doc for="Char.IsLetterOrDigit1">
		<summary>
			<para>Indicates whether the character at the specified
      position in a specified string is categorized as an alphabetic character or a decimal digit.</para>
		</summary>
		<param name=" s">A string.</param>
		<param name=" index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para><see langword="true"/> if the
   character at position <paramref name="index"/> in <paramref name="s "/>is an alphabetic character or a decimal digit;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>Character positions in a string
      are indexed starting from zero.</para>
			<para>Valid alphabetic letters and decimal digits are members of the following
      categories in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="UppercaseLetter"/>,
   <see langword="LowercaseLetter"/>, <see langword="TitlecaseLetter"/>,
   <see langword="ModifierLetter"/>, <see langword="OtherLetter"/>, or
   <see langword="DecimalDigitNumber"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsLetterOrDigit"/>.</para>
			<codelink SampleID="System.Char.IsLetterOrDigit" SnippetID="6"/>
		</example>
		<seealso cref="System.Boolean"/>
	</doc><doc for="Char.IsLower1">
		<summary>
			<para>Indicates whether the character at the specified
      position in a specified string is categorized as a lowercase letter.</para>
		</summary>
		<param name=" s">A string.</param>
		<param name=" index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para><see langword="true"/> if the
   character at position <paramref name="index"/> in <paramref name="s "/>is a lowercase letter;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>Character positions in a string
      are indexed starting from zero.</para>
			<para>Valid lowercase letters are members of the following category in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="LowercaseLetter"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsLower"/>.</para>
			<codelink SampleID="System.Char.IsLower" SnippetID="7"/>
		</example>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.String"/>
		<seealso cref="System.Char.IsUpper"/>
	</doc><doc for="Char.IsPunctuation1">
		<summary>
			<para>Indicates whether the character at the specified
      position in a specified string is categorized as a punctuation mark.</para>
		</summary>
		<param name=" s">A string.</param>
		<param name=" index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para><see langword="true"/> if the
   character at position <paramref name="index"/> in <paramref name="s "/>is a punctuation mark;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>Character positions in a string are indexed starting from zero.</para>
			<para>Valid punctuation marks are members of the following categories in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="ConnectorPunctuation"/>,
<see langword="DashPunctuation"/>, <see langword="OpenPunctuation"/>, 
<see langword="ClosePunctuation"/>, <see langword="InititalQuotePunctuation"/>, 
<see langword="FinalQuotePunctuation"/>, or 
<see langword="OtherPunctuation"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsPunctuation"/>.</para>
			<codelink SampleID="System.Char.IsPunctuation" SnippetID="9"/>
		</example>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.String"/>
	</doc><doc for="Char.IsSeparator">
		<overload>
			<para> Indicates whether a Unicode character is categorized as a
      separator character.</para>
		</overload>
		<summary>
			<para>Indicates whether the specified Unicode character is categorized as a
      separator character.</para>
		</summary>
		<param name="c">A Unicode character. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="c "/>is a separator character;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>Valid separator characters are members of the following categories in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="SpaceSeparator"/>,
<see langword="LineSeparator"/>, or <see langword="ParagraphSeparator"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsSeparator"/>.</para>
			<codelink SampleID="System.Char.IsSeparator" SnippetID="10"/>
		</example>
		<seealso cref="System.Boolean"/>
	</doc><doc for="Char.IsSeparator1">
		<summary>
			<para>Indicates whether the character at the specified
      position in a specified string is categorized as a separator character.</para>
		</summary>
		<param name=" s">A string.</param>
		<param name=" index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para><see langword="true"/> if the
   character at position <paramref name="index"/> in <paramref name="s "/>is a separator character;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>Character positions in a string
      are indexed starting from zero.</para>
			<para>Valid separator characters are members of the following categories in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="SpaceSeparator"/>,
<see langword="LineSeparator"/>, or <see langword="ParagraphSeparator"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsSeparator"/>.</para>
			<codelink SampleID="System.Char.IsSeparator" SnippetID="10"/>
		</example>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.String"/>
	</doc><doc for="Char.IsSurrogate">
		<overload>
			<para> Indicates whether a Unicode character is categorized as a
      surrogate character.</para>
		</overload>
		<summary>
			<para>Indicates whether the specified Unicode character is categorized as a
      surrogate character.</para>
		</summary>
		<param name="c">A Unicode character. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="c "/>is a surrogate character;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>Valid surrogate characters are members of the following category in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="Surrogate"/>.</para>
			<para>For more information about surrogate pairs, see the Unicode Standard at http://www.unicode.org.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsSurrogate"/>.</para>
			<codelink SampleID="System.Char.IsSurrogate" SnippetID="11"/>
		</example>
		<seealso cref="System.Boolean"/>
	</doc><doc for="Char.IsSurrogate1">
		<summary>
			<para>Indicates whether the character at the specified
      position in a specified string is categorized as a surrogate character.</para>
		</summary>
		<param name=" s">A string.</param>
		<param name=" index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para><see langword="true"/> if the
   character at position <paramref name="index"/> in <paramref name="s "/>is a surrogate character;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>Character positions in a string are indexed starting from zero.</para>
			<para>Valid surrogate characters are members of the following category in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="Surrogate"/>.</para>
			<para>For more information about surrogate pairs, see the Unicode Standard at
   http://www.unicode.org.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsSurrogate"/>.</para>
			<codelink SampleID="System.Char.IsSurrogate" SnippetID="11"/>
		</example>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.String"/>
	</doc><doc for="Char.IsSymbol1">
		<summary>
			<para>Indicates whether the character at the specified
      position in a specified string is categorized as a symbol character.</para>
		</summary>
		<param name=" s">A string.</param>
		<param name=" index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para><see langword="true"/> if the
   character at position <paramref name="index"/> in <paramref name="s "/>is a symbol character;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>Character positions in a string
      are indexed starting from zero.</para>
			<para>Valid symbols are members of the following categories in <see cref="System.Globalization.UnicodeCategory" qualify="true"/>: <see langword="MathSymbol"/>,
<see langword="CurrencySymbol"/>, <see langword="ModifierSymbol"/>, and 
<see langword="OtherSymbol"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsSymbol"/>.</para>
			<codelink SampleID="System.Char.IsSymbol" SnippetID="12"/>
		</example>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.String"/>
	</doc><doc for="Char.GetNumericValue">
		<overload>
			<para>Converts a specified numeric Unicode character to a double-precision floating point number.</para>
		</overload>
		<summary>
			<para> Converts the specified numeric Unicode character to a double-precision floating
      point number.</para>
		</summary>
		<param name="c">A Unicode character.</param>
		<returns>
			<para>The numeric value of <paramref name="c"/> if that character represents a number;
   otherwise, -1.0.</para>
		</returns>
		<remarks>
			<para>For example, if <paramref name="c"/> is '5', the return value is 5. However, if
<paramref name="c"/> is 'z', the return value is -1.</para>
			<para>A character has an associated numeric value if and only if it is a member of
   one of the following categories in <see cref="System.Globalization.UnicodeCategory"/>:
<see langword="DecimalDigitNumber"/>, <see langword="LetterNumber"/>, or 
<see langword="OtherNumber"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.GetNumericValue"/>.</para>
			<codelink SampleID="System.Char.GetNumericValue" SnippetID="1"/>
		</example>
	</doc><doc for="Char.Equals">
		<summary>
			<para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
		</summary>
		<param name=" obj">An object to compare with this instance or <see langword="null"/>.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="obj"/> is an instance of <see cref="System.Char"/>
and equals the value of this instance; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The comparison performed by this method is based on the encoded values of
      this instance and <paramref name="obj"/>, not necessarily their lexicographical
      characteristics. </para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.Equals"/>.</para>
			<codelink SampleID="System.Char.Equals" SnippetID="20"/>
		</example>
		<seealso cref="System.Char.CompareTo" qualify="true"/>
	</doc><doc for="Char.IsSymbol">
		<overload>
			<para> Indicates whether a Unicode character is categorized as a
      symbol character.</para>
		</overload>
		<summary>
			<para>Indicates whether the specified Unicode character is categorized as a
      symbol character.</para>
		</summary>
		<param name="c">A Unicode character. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="c "/>is a symbol character;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>Valid symbols are members of the following
      categories in <see cref="System.Globalization.UnicodeCategory"/>:
   <see langword="MathSymbol"/>, <see langword="CurrencySymbol"/>,
   <see langword="ModifierSymbol"/>, and <see langword="OtherSymbol"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsSymbol"/>.</para>
			<codelink SampleID="System.Char.IsSymbol" SnippetID="12"/>
		</example>
		<seealso cref="System.Boolean"/>
	</doc><doc for="Char.IsNumber">
		<overload>
			<para> Indicates whether a Unicode character
      is categorized as a number.</para>
		</overload>
		<summary>
			<para> Indicates whether the specified Unicode character
      is categorized as a number.</para>
		</summary>
		<param name="c">A Unicode character. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="c "/> is a number;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>This method determines if a <see cref="System.Char"/> is of any numeric Unicode category.
   This contrasts with <see cref="System.Char.IsDigit"/>, which determines if a
<see cref="System.Char"/>
is a radix-10 digit.</para>
			<para>Valid numbers are members of the following categories in <see cref="System.Globalization.UnicodeCategory"/>: <see langword="DecimalDigitNumber"/>, <see langword="LetterNumber"/>,
or <see langword="OtherNumber"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsNumber"/>.</para>
			<codelink SampleID="System.Char.IsNumber" SnippetID="8"/>
		</example>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.Char.IsDigit"/>
	</doc>
	<doc for="Char.IsNumber1">
		<summary>
			<para> Indicates whether the
      character at the specified position in a specified string is categorized as a number.</para>
		</summary>
		<param name=" s">A string.</param>
		<param name=" index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para><see langword="true"/> if the
   character at position <paramref name="index"/> in <paramref name="s "/> is a number;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>This method determines if a <see cref="System.Char"/> is of any numeric Unicode category.
   This contrasts with <see cref="System.Char.IsDigit"/>, which determines if a
<see cref="System.Char"/> is a
   radix-10 digit.</para>
			<para>Character positions in a string are
   indexed starting from zero.</para>
			<para>Valid numbers are members of the following categories in
<see cref="System.Globalization.UnicodeCategory"/>: <see langword="DecimalDigitNumber"/>, <see langword="LetterNumber"/>, or <see langword="OtherNumber"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsNumber"/>.</para>
			<codelink SampleID="System.Char.IsNumber" SnippetID="8"/>
		</example>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.String"/>
		<seealso cref="System.Char.IsDigit"/>
	</doc>
	<doc for="Char.CompareTo">
		<summary>
			<para>Compares this instance to a specified object and returns an indication of
      their relative values.</para>
		</summary>
		<param name=" value">An object to compare, or <see langword="null"/>.</param>
		<returns>
			<para>A signed number indicating the relative values of this instance and
   <paramref name="value"/>.</para>
			<list type="table"><listheader>
					<term>Return Value</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> Less than zero</term>
					<description>This instance is less than
      <paramref name="value"/>.</description>
				</item>
				<item>
					<term> Zero</term>
					<description>This instance is equal to
      <paramref name="value"/>.</description>
				</item>
				<item>
					<term> Greater than zero</term>
					<description><para>This instance is greater than
      <paramref name="value"/>.</para>
						<para>-or-</para>
						<para><paramref name="value"/> is <see langword="null"/>.</para></description>
				</item>
			</list>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is not a <see cref="System.Char"/>.</exception>
		<remarks>
			<para>Any instance of <see cref="System.Char"/>, regardless of its value, is considered
   greater than <see langword="null"/>.</para>
			<para><paramref name="value"/> must be <see langword="null "/> or an instance of <see cref="System.Char"/>; otherwise, an
exception is thrown.</para>
			<para>The comparison performed by this method is based on the
   encoded values of this instance and <paramref name="value"/> , not necessarily their lexicographical characteristics. </para>
			<para>This method is implemented to support the <see cref="System.IComparable"/> interface.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.CompareTo"/>.</para>
			<codelink SampleID="System.Char.CompareTo" SnippetID="19"/>
		</example>
		<seealso cref="System.IComparable"/>
		<seealso cref="System.Char.Equals" qualify="true"/>
	</doc>
	<doc for="Char.Parse">
		<summary>
			<para>Converts the value of the specified string to its
      equivalent Unicode character.</para>
		</summary>
		<param name=" s">A string containing a single character or <see langword="null"/>.</param>
		<returns>
			<para> A Unicode character equivalent to the sole character in <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s"/> is <see langword="null"/>.</exception>
		<exception cref="System.FormatException">The length of <paramref name="s"/> is not 1.</exception>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.Parse"/>.</para>
			<codelink SampleID="System.Char.Parse" SnippetID="15"/>
		</example>
		<seealso cref="System.Char.ToString"/>
	</doc>
	<doc for="Char.ToUpper1">
		<summary>
			<para>Converts the value of a Unicode character to its uppercase equivalent. </para>
		</summary>
		<param name="c">A Unicode character. </param>
		<returns>
			<para> The uppercase equivalent of <paramref name="c"/>.</para>
			<para>-or-</para>
			<para>The unchanged value of <paramref name="c"/>, if <paramref name="c"/> is
already uppercase or not alphabetic.</para>
		</returns>
		<remarks>
			<para>Casing rules are obtained from the current
      culture.</para>
			<para>Use <see cref="System.String.ToUpper" qualify="true"/> to convert a string to uppercase.</para>
		</remarks>
		<seealso cref="System.String.ToUpper" qualify="true"/>
		<seealso cref="System.Char.ToLower" qualify="true"/>
	</doc>
	<doc for="Char.ToLower1">
		<summary>
			<para>Converts the value of a Unicode character to its lowercase equivalent. </para>
		</summary>
		<param name="c">A Unicode character. </param>
		<returns>
			<para> The lowercase equivalent of <paramref name="c"/>.</para>
			<para>-or-</para>
			<para>The unchanged value of <paramref name="c"/>, if <paramref name="c"/> is
already lowercase or not alphabetic.</para>
		</returns>
		<remarks>
			<para>Casing rules are obtained from the current
      culture.</para>
			<para>Use <see cref="System.String.ToLower" qualify="true"/> to convert a string to lowercase.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.ToLower"/>.</para>
			<codelink SampleID="System.Char.ToLower" SnippetID="16"/>
		</example>
		<seealso cref="System.String.ToLower" qualify="true"/>
		<seealso cref="System.Char.ToUpper" qualify="true"/>
	</doc>
	<doc for="Char.ToUpper">
		<overload>
			<para> Converts the value of a Unicode character to its uppercase
      equivalent.
      </para>
		</overload>
		<summary>
			<para>Converts the value of a specified Unicode character to its uppercase
      equivalent using specified culture-specific formatting information.</para>
		</summary>
		<param name="c">A Unicode character. </param>
		<param name="culture">A <see cref="System.Globalization.CultureInfo" qualify="true"/> object that supplies culture-specific casing rules, or <see langword="null"/>. </param>
		<returns>
			<para> The uppercase equivalent of <paramref name="c"/>, modified according to <paramref name="culture"/>.</para>
			<para>-or-</para>
			<para>The unchanged value of <paramref name="c"/>, if <paramref name="c"/> is
already uppercase or not alphabetic.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="culture"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>Use <see cref="System.String.ToUpper" qualify="true"/> to convert a string to uppercase.</para>
		</remarks>
		<seealso cref="System.Globalization.CultureInfo.CurrentCulture" qualify="true"/>
		<seealso cref="System.String.ToUpper" qualify="true"/>
		<seealso cref="System.Char.ToLower" qualify="true"/>
	</doc>
	<doc for="Char.ToLower">
		<overload>
			<para> Converts the value of a Unicode character to its lowercase
      equivalent.
      </para>
		</overload>
		<summary>
			<para>Converts the value of a specified Unicode character to its lowercase
      equivalent using specified culture-specific formatting information.</para>
		</summary>
		<param name="c">A Unicode character. </param>
		<param name="culture">A <see cref="System.Globalization.CultureInfo" qualify="true"/> object that supplies culture-specific casing rules, or <see langword="null"/>. </param>
		<returns>
			<para> The lowercase equivalent of <paramref name="c"/>, modified according to <paramref name="culture"/>.</para>
			<para>-or-</para>
			<para>The unchanged value of <paramref name="c"/>, if <paramref name="c"/> is
already lowercase or not alphabetic.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="culture"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>Use <see cref="System.String.ToLower" qualify="true"/> to convert a string to lowercase.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.ToLower"/>.</para>
			<codelink SampleID="System.Char.ToLower" SnippetID="16"/>
		</example>
		<seealso cref="System.Globalization.CultureInfo.CurrentCulture" qualify="true"/>
		<seealso cref="System.String.ToLower" qualify="true"/>
		<seealso cref="System.Char.ToUpper" qualify="true"/>
	</doc>
	<doc for="Char">
		<summary>
			<para> Represents a Unicode character.
      </para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para> The <see cref="System.Char"/> value type represents a Unicode character, also called a
   Unicode code point, and is implemented as a 16-bit number ranging in value
   from hexadecimal 0x0000 to 0xFFFF. A single <see cref="System.Char"/> cannot represent a Unicode character
   that is encoded as a surrogate pair. However, a <see cref="System.String"/>, which is a collection of <see cref="System.Char"/>
   objects, can represent a
   Unicode character encoded as a surrogate pair.
   </para>
			<para>For more information about Unicode, see the Unicode 
   Standard at www.unicode.org
   .</para>
			<para><see cref="System.Char"/> provides methods to compare instances of this type,
convert the value of an instance to its string representation, convert the
string representation of a number to an instance of this type, and determine
whether an instance is in a category such as digit, letter, punctuation, control
character, and so on. For information about how format specification codes
control the string representation of value types, see
<see topic="cpConFormattingOverview"/>.</para>
			<para>As a general principle, class members in the .NET Framework
   that take or return a <see cref="System.Char"/> operate on the numeric (ordinal) value of the
<see cref="System.Char"/>. 
   Class members that take or return a <see cref="System.String"/> operate
   on the linguistic value of the string, including handling surrogate
   pairs. For this reason, a <see cref="System.Char"/> is not necessarily equivalent to an individual character in a
<see cref="System.String"/>.</para>
			<para>This type implements the <see cref="System.IComparable"/> interface and the <see cref="System.IConvertible"/> interface. Use the <see cref="System.Convert"/> class for conversions instead of this type's explicit
interface member implementation of <see cref="System.IConvertible"/>.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates some of the methods in <see cref="System.Char"/>.</para>
			<codelink SampleID="System.Char [Type Level]" SnippetID="23"/>
		</example>
		<seealso cref="System.IComparable"/>
		<seealso cref="System.IConvertible"/>
		<seealso cref="System.String"/>
	</doc>
	<doc for="Char.IsWhiteSpace">
		<overload>
			<para> Indicates whether a Unicode character is categorized as white space.</para>
		</overload>
		<summary>
			<para>Indicates whether the specified Unicode character is categorized as white space.</para>
		</summary>
		<param name="c">A Unicode character. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="c "/>is white space;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>Valid white space characters are members of the
      <see langword="SpaceSeparator"/> category in <see cref="System.Globalization.UnicodeCategory"/>, as well as these Unicode characters:
      hexadecimal 0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x0085, 0x2028, and 0x2029. </para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsWhiteSpace"/>.</para>
			<codelink SampleID="System.Char.IsWhiteSpace" SnippetID="14"/>
		</example>
		<seealso cref="System.Boolean"/>
	</doc>
	<doc for="Char.IsWhiteSpace1">
		<summary>
			<para>Indicates whether the character at the specified
      position in a specified string is categorized as white space.</para>
		</summary>
		<param name=" s">A string.</param>
		<param name=" index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para><see langword="true"/> if the
   character at position <paramref name="index"/> in <paramref name="s "/>is white space;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>Character positions in a string are indexed starting from zero.
      </para>
			<para>Valid white space characters are members of the
   <see langword="SpaceSeparator"/> category in <see cref="System.Globalization.UnicodeCategory"/>, as well as these Unicode characters:
      hexadecimal 0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x0085, 0x2028, and 0x2029. </para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.IsWhiteSpace"/>.</para>
			<codelink SampleID="System.Char.IsWhiteSpace" SnippetID="14"/>
		</example>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.String"/>
	</doc>
	<doc for="Char.GetUnicodeCategory">
		<overload>
			<para> Categorizes a Unicode character into a group identified
      by one of the <see cref="System.Globalization.UnicodeCategory"/> values.</para>
		</overload>
		<summary>
			<para> Categorizes a specified Unicode character into a group
      identified by one of the <see cref="System.Globalization.UnicodeCategory"/> values.</para>
		</summary>
		<param name="c">A Unicode character.</param>
		<returns>
			<para>A <see cref="System.Globalization.UnicodeCategory"/> value
   that identifies the group that contains <paramref name="c"/>.</para>
		</returns>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.GetUnicodeCategory"/>.</para>
			<codelink SampleID="System.Char.GetUnicodeCategory" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Char.GetUnicodeCategory1">
		<summary>
			<para>Categorizes the character at the specified position in a
      specified string
      into a group identified by one of the <see cref="System.Globalization.UnicodeCategory"/> values.</para>
		</summary>
		<param name=" s">A <see cref="System.String"/>.</param>
		<param name="index">The character position in <paramref name="s"/>.</param>
		<returns>
			<para>A <see cref="System.Globalization.UnicodeCategory"/> enumerated constant that identifies the
   group that contains the character at position <paramref name="index"/>
   in
<paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than the last position in <paramref name="s"/>.</exception>
		<remarks>
			<para>Character positions in a string are indexed starting from zero.</para>
		</remarks>
		<example>
			<para>The following sample demonstrates <see cref="System.Char.GetUnicodeCategory"/>.</para>
			<codelink SampleID="System.Char.GetUnicodeCategory" SnippetID="1"/>
		</example>
	</doc>
</docs>
