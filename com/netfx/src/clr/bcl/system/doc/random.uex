<docs>
	<doc for="Random.Random1">
		<summary>
			<para>Initializes a new instance of the
   <see cref="System.Random"/> class, using the specified
      seed value.</para>
		</summary>
		<param name="Seed">A number used to calculate a starting value for the pseudo-random number sequence.</param>
		<remarks>
			<para>If your application requires different random number sequences, invoke this
      constructor repeatedly with different seed values. One way to produce a unique
      seed value is to make it time-dependent. For example, derive the seed value from
      the system clock. </para>
			<para>However, if your application runs on a fast computer the system clock might not
      have time to change between invocations of this constructor; the seed value
      might be the same for different instances of <see langword="Random"/>. In that
      case, apply an algorithm to differentiate the seed value in each invocation. </para>
			<para>For instance, the following C# expressions use a bitwise complement operation
      to generate two different seed values even if the system time value is the same. </para>
			<para><c>Random rdm1 = new
      Random(unchecked((int)DateTime.Now.Ticks));</c>
			</para>
			<para><c>Random rdm2 = new
   Random(~unchecked((int)DateTime.Now.Ticks));</c>
			</para>
		</remarks>
	</doc>
	<doc for="Random.Sample">
		<summary>
			<para> Returns a random number
      between 0.0 and 1.0.</para>
		</summary>
		<returns>
			<para> A
      double-precision floating point number greater than or equal to 0.0, and
      less than 1.0.</para>
		</returns>
		<remarks>
			<para>Create a derived class of <see cref="System.Random"/> to override this method and produce a different
   distribution.</para>
		</remarks>
		<seealso cref="System.Random.NextDouble"/>
	</doc>
	<doc for="Random.NextDouble">
		<summary>
			<para>Returns a random number between 0.0 and 1.0.</para>
		</summary>
		<returns>
			<para>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</para>
		</returns>
		<remarks>
			<para>This method is the public version of the
      protected method,
   <see cref="System.Random.Sample"/>.</para>
		</remarks>
	</doc>
	<doc for="Random.Random">
		<overload>
			<para>Initializes a new instance of the
   <see cref="System.Random"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the
   <see langword="Random"/>
   class, using a time-dependent default seed
   value.</para>
		</summary>
		<remarks>
			<para>The distribution of the generated numbers is uniform; each number is equally
      likely to be returned.</para>
			<para> The default seed value is derived from the system clock. 
      However, when generating random numbers on high-performance systems, the system clock
      value might not produce the expected behavior. For details, see the Remarks
      section of the <see topic="frlrfsystemrandomclassctortopic2" title="Random"/>(<see cref="System.Int32"/>) constructor.</para>
		</remarks>
	</doc>
	<doc for="Random.Next">
		<overload>
			<para>Returns a random number.</para>
		</overload>
		<summary>
			<para>Returns a nonnegative random number.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer greater than or equal to zero and less than
   <see cref="System.Int32.MaxValue"/>.</para>
		</returns>
		<seealso cref="System.Int32"/>
	</doc>
	<doc for="Random.Next1">
		<summary>
			<para>Returns a random number within a specified range.</para>
		</summary>
		<param name="minValue">The lower bound of the random number returned.</param>
		<param name="maxValue">The upper bound of the random number returned. <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
		<returns>
			<para>A 32-bit signed integer greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>; that is, the
   range of return values includes <paramref name="minValue"/> but not <paramref name="MaxValue"/>. If <paramref name="minValue"/> equals <paramref name="maxValue"/>,
<paramref name="minValue"/>
is returned.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="minValue"/> is greater than <paramref name="maxValue"/>.</exception>
		<seealso cref="System.Int32"/>
	</doc>
	<doc for="Random.Next2">
		<summary>
			<para>Returns a nonnegative random number less than the specified maximum.</para>
		</summary>
		<param name="maxValue">The upper bound of the random number to be generated. <paramref name="maxValue"/> must be greater than or equal to zero.</param>
		<returns>
			<para>A 32-bit signed integer greater than or equal to zero, and less than
   <paramref name="maxValue"/>; that is, the range of return values includes zero but not
   <paramref name="MaxValue"/>.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="maxValue"/> is less than zero.</exception>
		<seealso cref="System.Int32"/>
	</doc>
	<doc for="Random">
		<summary>
			<para> Represents
      a pseudo-random number generator, a device
      that produces a sequence of numbers that meet certain statistical requirements
      for randomness.</para>
		</summary>
		<remarks>
			<para>Pseudo-random numbers are chosen with equal probability from a finite set of
      numbers. The chosen numbers are not completely random because a definite
      mathematical algorithm is used to select them, but they are sufficiently random
      for practical purposes. </para>
			<para> The random number generation starts from a seed value. If
      the same seed is used repeatedly, the same series of numbers is generated. One
      way to produce different sequences is to make the seed value time-dependent,
      thereby producing a different series with each new instance of <see cref="System.Random"/>.</para>
			<para> To improve performance, create one <see cref="System.Random"/> to generate many random numbers over
   time, instead of repeatedly creating a new <see cref="System.Random"/> to generate one random
   number. </para>
			<para> To generate a cryptographically secure random number suitable for creating a
   random password, for example, use a class derived from <see cref="System.Security.Cryptography.RandomNumberGenerator" qualify="true"/> such as <see cref="System.Security.Cryptography.RNGCryptoServiceProvider" qualify="true"/>. </para>
		</remarks>
	</doc>
	<doc for="Random.NextBytes">
		<summary>
			<para>Fills the elements of a specified array of bytes with random numbers.</para>
		</summary>
		<param name="buffer">An array of bytes to contain random numbers.</param>
		<exception cref="System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>Each element of the array of bytes is set to a random number greater than or
      equal to zero, and less than or equal to <see cref="System.Byte.MaxValue"/>.</para>
			<para> To generate a cryptographically secure random number suitable for creating a
      random password, for example, use a method such as <see cref="System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes" qualify="true"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic Random.NextBytes Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Byte"/>
	</doc>
</docs>
