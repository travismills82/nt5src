<docs>
	<doc for="Exception.HResult">
		<summary>
			<para>Gets or sets HRESULT, a coded numerical value
      that is assigned to a specific exception.</para>
		</summary>
		<value>
			<para>The HRESULT value.</para>
		</value>
		<remarks>
			<para>HRESULT is a 32-bit value, divided into three different fields: a severity
      code, a facility code, and an error code. The severity code indicates whether
      the return value represents information, warning, or error. The facility code
      identifies the area of the system responsible for the error. The error code is a
      unique number that is assigned to represent the exception. Each exception is
      mapped to a distinct HRESULT. When managed code throws an exception, the runtime passes the HRESULT to
      the COM client. When unmanaged code returns an error, the HRESULT is converted
      to an exception, which is then thrown by the runtime.</para>
		</remarks>
	</doc><doc for="Exception.Exception3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Exception"/> class with
   serialized data.</para>
		</summary>
		<param name="info">The <see cref="System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
		<param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="info"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Runtime.Serialization.SerializationException">The class name is <see langword="null"/> or <see cref="System.Exception.HResult"/> is zero (0).</exception>
		<remarks>
			<para>This constructor is called during deserialization to reconstitute the
      exception object transmitted over a stream. For more information, see
   <see topic="cpconSerialization"/>.</para>
		</remarks>
		<seealso cref="System.Runtime.Serialization.SerializationInfo"/>
		<seealso cref="System.Runtime.Serialization.StreamingContext"/>
		<seealso topic="cpconSerialization"/>
	</doc><doc for="Exception.HelpLink">
		<summary>
			<para>Gets or sets a link to the help file associated with this
      exception.</para>
		</summary>
		<value>
			<para> The Uniform Resource Name (URN) or Uniform Resource
      Locator (URL).</para>
		</value>
		<remarks>
			<para> The return value, which represents a help file, is a URN 
      or URL. For example, the <see langword="HelpLink"/>
      value could be:</para>
			<para>"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</para>
		</remarks>
	</doc><doc for="Exception.StackTrace">
		<summary>
			<para> Gets a string representation of the frames on the call stack at the time the
      current exception was thrown.</para>
		</summary>
		<value>
			<para>A string that describes the contents of the call stack, with the most recent method call appearing
      first.</para>
		</value>
		<remarks>
			<para> The execution
      stack keeps track of all the methods that are in execution at a given instant. A trace of the method calls is called
      a stack trace. The stack trace listing provides a means to follow the call sequence to the line number in
      the method where the exception occurs.</para>
			<para><see langword="StackTrace "/>
may not report as many method calls as expected, due to code transformations, such
as inlining, that occur during optimization.</para>
			<note type="inheritinfo">
   The
<see langword="StackTrace"/> property is overridden in classes that require 
   control over the stack trace content or format.
</note>
			<para>By default, the stack trace is captured immediately
   before an exception object is thrown. Use <see cref="System.Environment.StackTrace" qualify="true"/>
   to get stack trace
   information when no exception is being thrown.</para>
		</remarks>
		<seealso cref="System.Environment.StackTrace" qualify="true"/>
	</doc>
	<doc for="Exception.Source">
		<summary>
			<para> Gets or sets the name
      of the application or the object that causes the error.</para>
		</summary>
		<value>
			<para> The name of the application or the object that causes the
      error.</para>
		</value>
		<remarks>
			<para>If <see cref="System.Exception.Source"/> is not
   set, the name of
   the assembly where the exception originated is returned.</para>
		</remarks>
	</doc>
	<doc for="Exception.Exception1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Exception"/>
class with a specified error message.</para>
		</summary>
		<param name="message"> The message that describes the error.</param>
		<remarks>
			<para>This constructor initializes the <see cref="System.Exception.Message"/>
property of the new instance using the <paramref name="message"/> parameter.</para>
			<para>The following table
   shows the initial property values for an instance of <see cref="System.Exception"/>. </para>
			<list type="table"><listheader>
					<term>Property</term>
					<description>Value</description>
				</listheader>
				<item>
					<term><see cref="System.Exception.InnerException"/></term>
					<description>A 
   null reference (<see langword="Nothing"/> in Visual Basic).</description>
				</item>
				<item>
					<term><see cref="System.Exception.Message"/></term>
					<description>The error message string.</description>
				</item>
			</list>
		</remarks>
	</doc><doc for="Exception.Exception2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Exception"/>
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
		</summary>
		<param name="message">The error message that explains the reason for the exception.</param>
		<param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference (<see langword="Nothing"/> in Visual Basic), the current exception is raised in a <see langword="catch"/> block that handles the inner exception.</param>
		<remarks>
			<para>An exception that is thrown as a direct result of a
      previous exception should include a reference to the previous exception in
      the <see cref="System.Exception.InnerException"/> property. The
   <see cref="System.Exception.InnerException"/> property returns 
      the same value that is passed into the constructor, or a null reference
      (<see langword="Nothing"/> in Visual Basic) if the <see cref="System.Exception.InnerException"/>
      property does not supply the inner exception value to
      the constructor. </para>
			<para> The following
      table shows the initial property values for an instance of <see cref="System.Exception"/>. </para>
			<list type="table"><listheader>
					<term>Property</term>
					<description>Value</description>
				</listheader>
				<item>
					<term><see cref="System.Exception.InnerException"/></term>
					<description>The inner exception reference.</description>
				</item>
				<item>
					<term><see cref="System.Exception.Message"/></term>
					<description>The error message string.</description>
				</item>
			</list>
		</remarks>
	</doc><doc for="Exception.GetBaseException">
		<summary>
			<para> When overridden in a derived class, returns the <see cref="System.Exception"/> that is the root cause of one or more subsequent exceptions.</para>
		</summary>
		<returns>
			<para>The first exception thrown in a chain of exceptions. If
      the <see cref="System.Exception.InnerException"/> property of the
      current exception is a null reference (<see langword="Nothing"/> in Visual
      Basic), this property returns the current exception.</para>
		</returns>
		<remarks>
			<para>A chain of exceptions consists of a set of exceptions
      such that each exception in the chain was thrown as a direct result of the
      exception referenced in its <see langword="InnerException"/> property. For a
      given chain, there can be exactly one exception that is the root cause of all
      other exceptions in the chain. This exception is called the base exception and
      its <see langword="InnerException"/> property always contains a null reference.</para>
			<para>For all exceptions in a chain of exceptions, the
   <see langword="GetBaseException"/> method must return the same object (the base
      exception).</para>
			<para>Use the <see langword="GetBaseException "/>method when you want to find the
   root cause of an exception but do not need information about exceptions that may
   have occurred between the current exception and the first exception.</para>
			<note type="inheritinfo">
   The
<see langword="GetBaseException"/> method is overridden in classes that require
   control over the exception content or format.
   
</note>
		</remarks>
	</doc><doc for="Exception.InnerException">
		<summary>
			<para> Gets the <see cref="System.Exception"/> instance that caused the current exception.</para>
		</summary>
		<value>
			<para>An instance of <see langword="Exception"/> that describes the error that caused the
   current exception. The <see langword="InnerException"/>
   property returns the same value as was passed into the constructor, or a
   null reference (<see langword="Nothing"/> in Visual Basic) if the inner
   exception value was not supplied
   to the constructor. This property is read-only.</para>
		</value>
		<remarks>
			<para> When an exception <paramref name="X"/> is thrown as a direct
   result of a previous exception <paramref name="Y"/>, the <see langword="InnerException"/>
   property of <paramref name="X"/> should contain a reference to <paramref name="Y"/>
   .</para>
			<para> Use the <see langword="InnerException"/> property to obtain the set of
exceptions that led to the current exception.</para>
			<para> You can create a new exception that catches an earlier exception. The
   code that handles the second exception can make use of the additional information from
   the earlier exception to handle the error more appropriately.</para>
			<para> Suppose that there is a function that reads a file and
   formats the data from that file. In this example, as the code tries to read
   the file, an <see cref="System.IO.IOException"/> is thrown. The function catches the <see cref="System.IO.IOException"/> and throws a
<see cref="System.IO.FileNotFoundException"/>. The <see cref="System.IO.IOException"/> could be
   saved in the <see cref="System.Exception.InnerException"/> property of the <see cref="System.IO.FileNotFoundException"/>,
   enabling the code that catches the <see cref="System.IO.FileNotFoundException"/>
   to examine what causes the initial error.</para>
			<para>The <see cref="System.Exception.InnerException"/> property, which holds a reference to the inner
exception, is set upon initialization of the exception object.</para>
		</remarks>
		<example>
			<para>The following example demonstrates throwing and catching
      an exception that references an inner exception.</para>
			<codelink SampleID="InnerEx" SnippetID="1"/>
			<para>This code has the following output:</para>
			<para><c>In Main
 catch block. Caught: Error caused by trying ThrowInner. Inner Exception is
 MyAppException: ExceptExample inner exception at ExceptExample.ThrowInner() at
 ExceptExample.CatchInner()</c></para>
		</example>
	</doc><doc for="Exception.TargetSite">
		<summary>
			<para> Gets the method that throws
      the current exception.</para>
		</summary>
		<value>
			<para>The <see cref="System.Reflection.MethodBase"/> that threw the current exception.</para>
		</value>
		<remarks>
			<para>If the method that throws this exception is not 
      available and the stack trace is not a null reference
      (<see langword="Nothing"/> in Visual Basic), <see cref="System.Exception.TargetSite"/> obtains the method from the stack trace. If
      the stack trace is a null reference , <see cref="System.Exception.TargetSite"/> also returns a null reference.</para>
		</remarks>
	</doc><doc for="Exception.ToString">
		<summary>
			<para> Creates and returns a string
      representation of the current
      exception.</para>
		</summary>
		<returns>
			<para>A string
      representation of the current exception.</para>
		</returns>
		<remarks>
			<para><see langword="ToString"/> returns a representation of
   the current exception that is intended to be understood by humans. Where the
   exception contains culture-sensitive data, the string representation returned by
<see langword="ToString"/> is required to take into account 
   the current system culture. Although there are no exact requirements for the
   format of the returned string, it should attempt to reflect the value of the object
   as perceived by the user. </para>
			<para>The default implementation of <see langword="Exception.ToString"/> obtains the
name of the class that threw the current exception, the message, the result of
calling <see langword="ToString"/> on the inner exception, and the result of
calling <see cref="System.Environment.StackTrace" qualify="true"/>. If any of these
members is a null reference (<see langword="Nothing"/> in Visual Basic), its value is not included in the returned string.</para>
			<para>If there is no error message or if it is an empty string 
   (""), then no error message is returned. The name of the inner exception and the
   stack trace are returned only if they are not a null reference.</para>
			<para> This method overrides <see cref="System.Object.ToString" qualify="true"/>.</para>
			<note type="inheritinfo">
   It is recommended, but
   not required, that <see langword="ToString"/> be overridden to return information
   about members declared in the derived class. For example, the <see cref="System.ArgumentException"/> class
   implements <see langword="ToString"/> so that it returns the value of the
<see langword="ParamName"/> property, if that value is not a 
   null reference.
</note>
		</remarks>
		<example>
			<para>The following example causes an exception and displays
      the result of calling <see langword="ToString"/> on that exception.</para>
			<codelink SampleID="ExToString" SnippetID="1"/>
			<para>This code has the following output:</para>
			<para><c>Error:
 System.ArgumentException: Object must be of type String. at
 System.String.CompareTo(Object value) at ArgExceptionExample.Main()</c></para>
		</example>
	</doc><doc for="Exception.GetObjectData">
		<summary>
			<para>When overridden in a derived class, sets the <see cref="System.Runtime.Serialization.SerializationInfo"/>
with information about the exception.</para>
		</summary>
		<param name="info">The <see cref="System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
		<param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. </param>
		<exception cref="System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (<see langword="Nothing"/> in Visual Basic).</exception>
		<remarks>
			<para><see langword="GetObjectData"/> sets a <see cref="System.Runtime.Serialization.SerializationInfo"/> with all the exception object
   data targeted for serialization. During deserialization, the exception is
   reconstituted from the <see langword="SerializationInfo"/> transmitted over the stream.</para>
		</remarks>
		<seealso cref="System.Runtime.Serialization.SerializationInfo"/>
		<seealso cref="System.Runtime.Serialization.StreamingContext"/>
	</doc><doc for="Exception.Exception">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Exception"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Exception"/> class.</para>
		</summary>
		<remarks>
			<para>This constructor initializes the <see cref="System.Exception.Message"/>
property of the new instance to a system-supplied message that describes the
error and takes into account the current system
culture.</para>
			<para>All the derived classes should provide this default constructor.
   The following table shows the initial property values for an instance of
<see cref="System.Exception"/> .</para>
			<list type="table"><listheader>
					<term>Property</term>
					<description>Value</description>
				</listheader>
				<item>
					<term><see cref="System.Exception.InnerException"/></term>
					<description>A
   null reference (<see langword="Nothing"/> in Visual Basic).</description>
				</item>
				<item>
					<term><see cref="System.Exception.Message"/></term>
					<description>A 
   system-supplied localized description.</description>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="Exception.Message">
		<summary>
			<para> Gets a message that describes the current exception.</para>
		</summary>
		<value>
			<para> The error message that explains the reason for the exception, or an empty string("").</para>
		</value>
		<remarks>
			<para> The text of <see langword="Message"/> should completely
   describe the error and should, when possible, explain how to correct it. The
   value of the <see langword="Message "/>property is included in the information
   returned by <see cref="System.Exception.ToString"/>
   
   .</para>
			<para> The <see langword="Message"/> property is set only when
creating an <see cref="System.Exception"/>
. If no message was supplied to the constructor
for the current instance, the system supplies a default message that is
formatted using the current system culture.</para>
			<note type="inheritinfo">
   The
<see langword="Message"/> property is 
   overridden in classes that require control over message content or format. Application
   code typically accesses this property when it needs to display information about an exception that has
   been caught.
</note>
			<para> The error message should be localized.</para>
		</remarks>
	</doc>
	<doc for="Exception">
		<summary>
			<para> Represents errors that occur during application execution.</para>
		</summary>
		<remarks>
			<para> This
      class is the base class for all exceptions. When an error occurs,
      either the system or the currently executing application reports it by throwing an
      exception containing information about the error. Once thrown, an exception is handled by the application
      or by the default exception handler.</para>
			<para> The common language runtime provides an exception
      handling model that is based on the representation of exceptions as objects, and
      the separation of program code and exception handling code into
   <see langword="try"/> blocks and <see langword="catch"/> blocks, respectively.
      There can be one or more <see langword="catch"/>
      
      blocks, each
      designed to handle a particular type of exception, or one block designed to catch a
      more specific exception than another block.</para>
			<para>If an
      application handles exceptions that occur during the execution of a block of application code,
      the code must be placed within a <see langword="try"/> statement. Application code
      within a <see langword="try"/> statement is a <see langword="try"/> block.
      Application code that handles exceptions thrown by a <see langword="try"/> block
      is placed within a <see langword="catch"/> statement, and is called a
   <see langword="catch"/> block. Zero or more <see langword="catch"/> blocks are
      associated with a <see langword="try"/> block, and each <see langword="catch"/> block includes a type filter that
      determines the types of exceptions it
      
      handles.</para>
			<para> When an exception occurs in a <see langword="try"/> block, the system searches
   the associated <see langword="catch"/> blocks in the order they appear in
   application code, until it locates a <see langword="catch"/> block that handles
   the exception. A <see langword="catch"/> block handles an exception of type
<see langword="T"/> if the type filter of the catch block specifies
<see langword="T"/> or any type that <see langword="T"/> derives from. The system
   stops searching after it finds the first <see langword="catch"/> block that
   handles the exception. For this reason, in application code, a
<see langword="catch"/> block that handles a type must be specified before a
<see langword="catch"/> block that handles its base types, as demonstrated in the
   example that follows this section. A catch block that handles
<see langword="System.Exception"/> is
   specified last.</para>
			<para>If none of the
<see langword="catch"/> blocks associated with the current <see langword="try"/>
block handle the exception, and the current <see langword="try"/> block is
nested within other <see langword="try"/> blocks in the current call, the
<see langword="catch"/> blocks associated with the next enclosing 
<see langword="try"/> block are searched. If no <see langword="catch"/> block for 
the exception is found, the system searches previous nesting levels in the
current call. If no <see langword="catch"/> block for the exception is found in
the current call, the exception is passed up the call stack, and the previous
stack frame is searched for a <see langword="catch"/> block that
handles the exception. The search of the call stack continues until the exception
is handled or until no more frames exist on the call stack. If the top of the call stack is
reached without finding a <see langword="catch"/> block that handles the exception,
the default exception handler handles it and the application terminates.</para>
			<para>Exception types support the following features: </para>
			<list type="bullet"><item>
					<term>
      
      Human-readable text that describes the error. When an exception occurs, the runtime makes available a
      text message to inform the user of the nature of the error and to suggest
      action to resolve the problem. This text message is held in the <see cref="System.Exception.Message"/> property of the exception object. During the
      creation of the exception object, you can pass a text string to the
      constructor to describe the details of that particular exception. If no error
      message argument is supplied to the constructor, the default error message is
      used.</term>
				</item>
				<item>
					<term>
      
      The state of the call stack when the exception was
      thrown. The <see cref="System.Exception.StackTrace"/> property carries
      a stack trace that can be used to determine where in the code the error
      occurs. The stack trace lists all the called methods, and the line numbers in
      the source file where the calls are made.</term>
				</item>
			</list>
			<para> Two categories of exceptions exist under the base
   class <see cref="System.Exception"/>
   : </para>
			<list type="bullet"><item>
					<term>
      
      The pre-defined common language runtime exception classes derived from
   <see cref="System.SystemException"/>.</term>
				</item>
			</list>
			<list type="bullet"><item>
					<term>
      
      The user-defined application exception classes derived from <see cref="System.ApplicationException"/>.</term>
				</item>
			</list>
			<para><see cref="System.Exception"/> includes a number
of properties that help identify
the code location, the type, the help file, and the reason for the
exception: <see cref="System.Exception.StackTrace"/>, <see cref="System.Exception.InnerException"/>, <see cref="System.Exception.Message"/>,
<see cref="System.Exception.HelpLink"/>, <see cref="System.Exception.HResult"/>, <see cref="System.Exception.Source"/>, and 
<see cref="System.Exception.TargetSite"/>.</para>
			<para> When a
   causal relationship exists between two or more exceptions, the <see langword="InnerException"/>
   property maintains this
   information. The outer exception is
   thrown in response to this inner exception. The code that handles the outer exception can use the information from the earlier inner
   exception to handle the error more appropriately.</para>
			<para> The error message string passed to the constructor during the creation of the exception
   object should be localized, and can be supplied from a resource file using
   the <see cref="System.Resources.ResourceManager"/>. For more information on localized
   resources, see the <see cref="System.Resources"/> namespace overview and
<see topic="packaging_and_deploying__net_framework_applications" title="Packaging and Deploying .NET Framework Application"/> .</para>
			<para> To provide the user with extensive information
   concerning why the exception occurred, the <see cref="System.Exception.HelpLink"/>
   property can hold a URL (or URN) to a help file.</para>
			<para><see cref="System.Exception"/>
uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.</para>
			<para>For a list of initial property values for an instance of <see cref="System.Exception"/>, see the <see langword="Exception"/>
constructors.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates a <see langword="catch"/> block that
   is defined to handle <see cref="System.ArithmeticException"/> errors. This <see langword="catch"/> block also catches
<see cref="System.DivideByZeroException"/> errors because <see langword="DivideByZeroException"/> 
derives from <see langword="ArithmeticException"/>, and there is no
<see langword="catch"/> block explicitly defined for 
<see langword="DivideByZeroException"/> errors.</para>
			<codelink SampleID="CatchException" SnippetID="1"/>
			<para>The C# code has the following output: </para>
			<para><c>ArithmeticException Handler:
 System.DivideByZeroException: Attempted to divide by zero. at
 ExceptionTestClass.Main()</c></para>
			<para>The Visual Basic code has the following output:</para>
			<para><c>ArithmeticException Handler:
 System.OverflowException: Exception of type System.OverflowException was thrown.
 at ExceptionTestClass.Main()</c></para>
		</example>
		<seealso topic="cpconHandlingThrowingExceptions"/>
		<seealso topic="cpconpackagingdeployingresources"/>
		<seealso cref="System.SystemException"/>
		<seealso cref="System.ApplicationException"/>
	</doc>
</docs>
