<docs>
	<doc for="Math.Round1">
		<summary>
			<para> Returns the whole number nearest the
      specified value.</para>
		</summary>
		<param name="d">A <see cref="System.Decimal"/> number to be rounded.</param>
		<returns>
			<para> The whole number nearest parameter <paramref name="d"/>. If <paramref name="d"/> is halfway between two whole numbers, one of which by definition is even and the other odd, then the even number is returned.</para>
		</returns>
		<remarks>
			<para>The behavior of this method follows IEEE Standard 754,
      section 4. This kind of rounding is sometimes called rounding to nearest, or banker's rounding.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates rounding to nearest.</para>
			<codelink SampleID="Classic Math.Round Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Math.Ceiling"/>
		<seealso cref="System.Math.Floor"/>
	</doc><doc for="Math.Round3">
		<summary>
			<para> Returns the number with the specified precision nearest the
      specified value.</para>
		</summary>
		<param name="d">A <see cref="System.Decimal"/> number to be rounded.</param>
		<param name=" decimals">The number of significant fractional digits (precision) in the return value.</param>
		<returns>
			<para> The number nearest <paramref name="d"/>
with precision equal to <paramref name="decimals"/>. If <paramref name="d"/> is halfway between two numbers, one of
which is even and the other odd, then the even number is returned. If the
precision of <paramref name="d"/> is less than <paramref name="decimals"/>, then <paramref name="d"/> is returned unchanged.</para>
		</returns>
		<remarks>
			<para>The <paramref name="decimals"/> parameter specifies the number of
   significant fractional digits in the return value and ranges from 0 to 28. If
<paramref name="decimals"/> is zero, then a whole number is returned. </para>
			<para>The behavior of this method follows IEEE Standard 754,
   section 4. This kind of rounding is sometimes called rounding to nearest, or
   banker's rounding. If <paramref name="decimals"/> is zero, this kind of rounding is sometimes called rounding toward zero.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates rounding to nearest.</para>
			<codelink SampleID="Classic Math.Round2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Math.Ceiling"/>
		<seealso cref="System.Math.Floor"/>
	</doc><doc for="Math.Sinh">
		<summary>
			<para>Returns the hyperbolic sine of the specified angle.</para>
		</summary>
		<param name=" value">An angle, measured in radians.</param>
		<returns>
			<para>The hyperbolic sine of <paramref name="value"/>.
   If <paramref name="value"/> is equal to <see cref="System.Double.NegativeInfinity"/>,
<see cref="System.Double.PositiveInfinity"/>, or <see cref="System.Double.NaN"/>, this method returns a <see cref="System.Double"/> equal to <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para>The angle, <paramref name="value"/>, must be in radians. Multiply by (pi)/180 to convert
   degrees to radians.</para>
		</remarks>
	</doc>
	<doc for="Math.E">
		<summary>
			<para> Represents the natural logarithmic base, specified by the 
      constant, <see langword="e"/>.</para>
		</summary>
		<remarks>
			<para>The value of this field is 2.7182818284590452354.</para>
		</remarks>
	</doc><doc for="Math.Cosh">
		<summary>
			<para>Returns the hyperbolic cosine of the specified angle.</para>
		</summary>
		<param name="value">An angle, measured in radians.</param>
		<returns>
			<para>The hyperbolic cosine of <paramref name="value"/>. If <paramref name="value"/> is equal
   to <see cref="System.Double.NegativeInfinity"/> or <see cref="System.Double.PositiveInfinity"/>, <see cref="System.Double.PositiveInfinity"/> is returned. If <paramref name="value"/> is equal to <see cref="System.Double.NaN"/>,
<see cref="System.Double.NaN"/> is returned.</para>
		</returns>
		<remarks>
			<para>The angle, <paramref name="value"/>, must be in radians. Multiply by (pi)/180 to convert
   degrees to radians.</para>
		</remarks>
	</doc><doc for="Math.Exp">
		<summary>
			<para>Returns <see langword="e"/> raised to the
   specified power.</para>
		</summary>
		<param name="d">A number specifying a power.</param>
		<returns>
			<para> The number <see langword="e"/> raised to the power <paramref name="d"/>. If <paramref name="d"/> equals <see cref="System.Double.NaN"/> or <see cref="System.Double.PositiveInfinity"/>,
   that value is returned. If <paramref name="d"/> equals <see cref="System.Double.NegativeInfinity"/>, 0 is returned.</para>
		</returns>
		<remarks>
			<para> Use the <see cref="System.Math.Pow"/> method to calculate powers of other bases.</para>
			<para><see langword="Exp"/> is the inverse of <see cref="System.Math.Log"/>.</para>
		</remarks>
		<seealso cref="System.Math.E"/>
		<seealso cref="System.Math.Pow"/>
		<seealso cref="System.Math.Log"/>
	</doc><doc for="Math.Sin">
		<summary>
			<para> Returns the sine of the specified angle.</para>
		</summary>
		<param name="a">An angle, measured in radians.</param>
		<returns>
			<para>The sine of <paramref name="a"/>. If <paramref name="a"/> is equal to <see cref="System.Double.NaN"/>, <see cref="System.Double.NegativeInfinity"/>,
   or <see cref="System.Double.PositiveInfinity"/>, this method returns <see cref="System.Double.NaN"/>.</para>
		</returns>
		<remarks>
			<para>The angle, <paramref name="a"/>, must be in radians. Multiply by (pi)/180 to convert degrees to radians.</para>
		</remarks>
	</doc><doc for="Math.Tanh">
		<summary>
			<para>Returns the hyperbolic tangent of the specified angle.</para>
		</summary>
		<param name=" value">An angle, measured in radians.</param>
		<returns>
			<para>The hyperbolic tangent of <paramref name="value"/>. If <paramref name="value"/> is equal to
<see cref="System.Double.NegativeInfinity"/>, this method returns -1. If value is equal to <see cref="System.Double.PositiveInfinity"/>, this method returns 1. If <paramref name="value"/> is equal to <see cref="System.Double.NaN"/>, this method returns 
<see cref="System.Double.NaN"/>.</para>
		</returns>
		<remarks>
			<para>The angle, <paramref name="value"/>, must be in radians. Multiply by (pi)/180 to convert
   degrees to radians.</para>
		</remarks>
	</doc><doc for="Math.PI">
		<summary>
			<para>Represents the ratio of the circumference of a circle to its diameter, specified by the constant, (pi).</para>
		</summary>
		<remarks>
			<para>The value of this field is 3.14159265358979323846.</para>
		</remarks>
		<example>
			<para>The following code sample uses <see langword="PI"/> to assist in the 
   computation of the inner angles of a given trapezoid.</para>
			<codelink SampleID="MathSample" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Round">
		<overload>
			<para> Returns
      the number nearest the specified value.</para>
		</overload>
		<summary>
			<para> Returns the whole number nearest the
      specified value.</para>
		</summary>
		<param name="a">A double-precision floating-point number to be rounded.</param>
		<returns>
			<para> The
      whole number nearest <paramref name="a"/>. If <paramref name="a"/> is halfway between two whole numbers, one of which by definition is even and the other odd, then the even number is returned.</para>
		</returns>
		<remarks>
			<para>The behavior of this method follows IEEE Standard 754, section 4. This kind
      of rounding is sometimes called rounding to nearest, or banker's rounding.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates rounding to nearest whole number value.</para>
			<codelink SampleID="Classic Math.Round Example" SnippetID="1"/>
			<para>The following code sample uses <see langword="Round"/> to 
assist in the computation of the inner angles of a given trapezoid.</para>
			<codelink SampleID="MathSample" SnippetID="1"/>
		</example>
		<seealso cref="System.Math.Ceiling"/>
		<seealso cref="System.Math.Floor"/>
	</doc>
	<doc for="Math.Sqrt">
		<summary>
			<para>Returns the square root of a specified number.</para>
		</summary>
		<param name="d">A number.</param>
		<returns>
			<list type="table">
				<listheader>
					<term>Value of <paramref name="d"/></term>
					<description>Returns</description>
				</listheader>
				<item>
					<term> Zero, or positive</term>
					<description>The positive square root of <paramref name="d"/>.</description>
				</item>
				<item>
					<term> Negative</term>
					<description><see cref="System.Double.NaN"/></description>
				</item>
			</list>
			<para>If <paramref name="d"/> is equal
to <see cref="System.Double.NaN"/> or <see cref="System.Double.PositiveInfinity"/>, that value is returned.</para>
		</returns>
		<example>
			<para>The following code sample uses <see langword="Sqrt"/> to assist in the 
   computation of the inner angles of a given trapezoid.</para>
			<codelink SampleID="MathSample" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Pow">
		<summary>
			<para>Returns a specified number raised to the specified power.</para>
		</summary>
		<param name="x">A number to be raised to a power.</param>
		<param name="y">A number that specifies a power.</param>
		<returns>
			<para> The number <paramref name="x"/> raised to the power <paramref name="y"/>. The following table specifies the results if <paramref name="x"/> or <paramref name="y"/> is equal to <see cref="System.Double.NaN"/>, <see cref="System.Double.NegativeInfinity"/>,
   or <see cref="System.Double.PositiveInfinity"/>.</para>
			<list type="table">
				<listheader>
					<term>Parameter Values</term>
					<description>Returns</description>
				</listheader>
				<item>
					<term><paramref name="x"/> or <paramref name="y"/> is equal to Double.NaN</term>
					<description>
						<para><see cref="System.Double.NaN"/>.</para></description>
				</item>
				<item>
					<term><paramref name="x"/> is equal to Double.NegativeInfinity</term>
					<description><see cref="System.Double.NegativeInfinity"/> if <paramref name="y"/> is
an odd integer; otherwise, <see cref="System.Double.PositiveInfinity"/>.</description>
				</item>
				<item>
					<term><paramref name="y"/> is equal to Double.NegativeInfinity</term>
					<description>0.</description>
				</item>
				<item>
					<term><paramref name="x"/> is equal to Double.PositiveInfinity</term>
					<description>0 if <paramref name="y"/> is equal to <see cref="System.Double.NegativeInfinity"/>; otherwise, <see cref="System.Double.PositiveInfinity"/>
.</description>
				</item>
				<item>
					<term><paramref name="y"/> is equal to Double.PositiveInfinity</term>
					<description><see cref="System.Double.PositiveInfinity"/>.</description>
				</item>
			</list>
		</returns>
		<example>
			<para>The following code sample uses <see langword="Pow"/> to assist in the 
   computation of the inner angles of a given trapezoid.</para>
			<codelink SampleID="MathSample" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math">
		<summary>
			<para>Provides constants and static methods for trigonometric, logarithmic,
      and other common mathematical functions.</para>
		</summary>
		<example>
   The following code sample uses several mathematical and trigonometric
   functions from the <see langword="Math"/> class to calculate the inner angles of
   a trapezoid.
   
<codelink SampleID="MathSample" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Abs4">
		<summary>
			<para> Returns the absolute value of a single-precision floating-point
      number.</para>
		</summary>
		<param name="value">A number in the range <see cref="System.Single.MinValue"/> (&lt;= ) <paramref name="value"/> (&lt;=) <see cref="System.Single.MaxValue"/>.</param>
		<returns>
			<para>A single-precision floating-point number,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="System.Single.MaxValue"/>.</para>
		</returns>
		<remarks>
			<para>If <paramref name="value"/> is equal to <see cref="System.Single.NegativeInfinity"/> or <see cref="System.Single.PositiveInfinity"/>, the return value is <see cref="System.Single.PositiveInfinity"/>. If <paramref name="value"/> is equal to <see cref="System.Single.NaN"/>, the return value is <see cref="System.Single.NaN"/>.</para>
		</remarks>
		<example>
			<para>The following code sample uses <see langword="Abs"/> to assist in the
   computation of the inner angles of a given trapezoid.</para>
			<codelink SampleID="MathSample" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Abs5">
		<summary>
			<para> Returns the absolute value of a double-precision floating-point
      number.</para>
		</summary>
		<param name="value">A number in the range <see cref="System.Double.MinValue"/> (&lt;= ) <paramref name="value"/> (&lt;=) <see cref="System.Double.MaxValue"/>.</param>
		<returns>
			<para>A double-precision floating-point number,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="System.Double.MaxValue"/>.</para>
		</returns>
		<remarks>
			<para>If <paramref name="value"/> is equal to <see cref="System.Double.NegativeInfinity"/> or <see cref="System.Double.PositiveInfinity"/>,
   the return value is <see cref="System.Double.PositiveInfinity"/>. If <paramref name="value"/> is equal to <see cref="System.Double.NaN"/>, the return
   value is <see cref="System.Double.NaN"/>.</para>
		</remarks>
		<example>
			<para>The following code sample uses <see langword="Abs"/> to assist in the
   computation of the inner angles of a given trapezoid.</para>
			<codelink SampleID="MathSample" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Log">
		<overload>
			<para>Returns the logarithm of a specified number.</para>
		</overload>
		<summary>
			<para>Returns the natural (base <see langword="e"/>
) logarithm of a specified number.</para>
		</summary>
		<param name="d">A number whose logarithm is to be found. </param>
		<returns>
			<list type="table">
				<listheader>
					<term>Sign of <paramref name="d"/></term>
					<description>Returns</description>
				</listheader>
				<item>
					<term> Positive</term>
					<description> The natural logarithm of <paramref name="d"/>; that is, ln <paramref name="d"/>,
   or log<subscript term="e"/><paramref name="d"/></description>
				</item>
				<item>
					<term> Zero</term>
					<description><see cref="System.Double.NegativeInfinity"/></description>
				</item>
				<item>
					<term> Negative</term>
					<description><see cref="System.Double.NaN"/></description>
				</item>
			</list>
			<para>If <paramref name="d"/> is equal to <see cref="System.Double.NaN"/>, returns <see cref="System.Double.NaN"/>. If <paramref name="d"/> is equal to
<see cref="System.Double.PositiveInfinity"/>, returns <see cref="System.Double.PositiveInfinity"/>.</para>
		</returns>
		<remarks>
			<para>Parameter <paramref name="d"/> is specified as a base 10 number.</para>
		</remarks>
		<seealso cref="System.Math.E"/>
		<seealso cref="System.Math.Exp"/>
	</doc>
	<doc for="Math.Log1">
		<summary>
			<para>Returns the
      logarithm of a specified number in a specified base.</para>
		</summary>
		<param name="a">A number whose logarithm is to be found.</param>
		<param name="newBase">The base of the logarithm.</param>
		<returns>
			<list type="table">
				<listheader>
					<term>Sign of <paramref name="a"/></term>
					<description>Returns</description>
				</listheader>
				<item>
					<term> Positive</term>
					<description>If 
      <paramref name="newBase"/> (&gt;=) 0, the logarithm of <paramref name="a"/>, in base <paramref name="newBase"/>; that is, log<subscript term="newBase"/><paramref name="a"/>). Otherwise,
      <see cref="System.Double.NaN"/>.</description>
				</item>
				<item>
					<term> Zero</term>
					<description><see cref="System.Double.NegativeInfinity"/></description>
				</item>
				<item>
					<term> Negative</term>
					<description><see cref="System.Double.NaN"/></description>
				</item>
			</list>
			<para>If <paramref name="a"/> is equal
to <see cref="System.Double.PositiveInfinity"/> and <paramref name="newBase"/> is not equal to <see cref="System.Double.PositiveInfinity"/>,
<see cref="System.Double.NegativeInfinity"/>, or <see cref="System.Double.NaN"/>, this method returns <see cref="System.Double.PositiveInfinity"/>.</para>
			<para> If <paramref name="newBase"/> is equal 
to <see cref="System.Double.PositiveInfinity"/> and <paramref name="a"/> is not equal to
<see cref="System.Double.PositiveInfinity"/>, <see cref="System.Double.NegativeInfinity"/>, or <see cref="System.Double.NaN"/>, this method returns 0. </para>
			<para> If both <paramref name="a"/> and <paramref name="newBase"/> are equal to <see cref="System.Double.PositiveInfinity"/>, or <paramref name="a"/> or <paramref name="newBase"/> is equal 
to <see cref="System.Double.NaN"/> or <see cref="System.Double.NegativeInfinity"/>, this method returns <see cref="System.Double.NaN"/>.</para>
		</returns>
		<remarks>
			<para>Parameters <paramref name="a"/> and <paramref name="newBase"/> are specified as base 10 numbers.</para>
		</remarks>
	</doc>
	<doc for="Math.Log10">
		<summary>
			<para>Returns the base 10 logarithm of a specified number.</para>
		</summary>
		<param name="d">A number whose logarithm is to be found. </param>
		<returns>
			<list type="table">
				<listheader>
					<term>Sign of <paramref name="d"/></term>
					<description>Returns</description>
				</listheader>
				<item>
					<term> Positive</term>
					<description>The base 10 log of <paramref name="d"/>; that is, log<subscript term="10"/><paramref name="d"/>.</description>
				</item>
				<item>
					<term> Zero</term>
					<description><see cref="System.Double.NegativeInfinity"/></description>
				</item>
				<item>
					<term> Negative</term>
					<description><see cref="System.Double.NaN"/></description>
				</item>
			</list>
			<para>If <paramref name="d"/> is equal to <see cref="System.Double.NaN"/>, thsi method returns
<see cref="System.Double.NaN"/>. If <paramref name="d"/> is equal to <see cref="System.Double.PositiveInfinity"/>, this method 
returns <see cref="System.Double.PositiveInfinity"/>.</para>
		</returns>
		<remarks>
			<para>Parameter <paramref name="d"/> is specified as a base 10 number.</para>
		</remarks>
	</doc>
	<doc for="Math.Round2">
		<summary>
			<para> Returns the number with the specified precision nearest the
      specified value.</para>
		</summary>
		<param name="value">A double-precision floating-point number to be rounded.</param>
		<param name=" digits">The number of significant digits (precision) in the return value.</param>
		<returns>
			<para> The number nearest <paramref name="value"/>
with precision equal to <paramref name="digits"/>. If <paramref name="value"/> is halfway between two numbers, one of
which is even and the other odd, then the even number is returned. If the
precision of <paramref name="value"/> is less than <paramref name="digits"/>, then <paramref name="value"/> is returned unchanged.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="digits"/> is less than 0 or greater than 15.</para></exception>
		<remarks>
			<para>The <paramref name="digits"/> parameter specifies the number
   of significant digits in the return value and ranges from 0 to 15. If
<paramref name="digits"/> is zero, then a whole number is returned. </para>
			<para>The maximum total number of integral and fractional
   digits that can be returned is 15. If the rounded value contains more than 15
   integral and fractional digits, the 15 most significant digits are returned. If
   the rounded value contains 15 or fewer integral and fractional digits, the
   integral digits and as many fractional digits as the <paramref name="digits"/> parameter specifies are returned. </para>
			<para>The behavior of this method follows IEEE Standard 754,
   section 4. This kind of rounding is sometimes called rounding to nearest, or
   banker's rounding. If <paramref name="digits"/>
   is zero, this kind of rounding is sometimes called rounding toward zero.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates rounding to nearest.</para>
			<codelink SampleID="Classic Math.Round2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Math.Ceiling"/>
		<seealso cref="System.Math.Floor"/>
	</doc>
	<doc for="Math.Acos">
		<summary>
			<para> Returns the angle whose cosine is the specified number.</para>
		</summary>
		<param name="d">A number representing a cosine, where -1 (&lt;=) <paramref name="d"/> (&lt;=) 1.</param>
		<returns>
			<para> An angle, (theta), measured in radians, such that 0 (&lt;=) (theta) (&lt;=) (pi)</para>
			<para> -or-</para>
			<para><see cref="System.Double.NaN"/> if 
<paramref name="d"/> &lt; -1 or <paramref name="d"/> &gt; 1.</para>
		</returns>
		<remarks>
			<para> Multiply the return value by 180/(pi) to convert from radians
      to degrees.</para>
		</remarks>
		<example>
			<para>The following code sample uses <see langword="Acos"/> to assist in the
   computation of the inner angles of a given trapezoid.</para>
			<codelink SampleID="MathSample" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Asin">
		<summary>
			<para>Returns the angle whose sine is the specified number.</para>
		</summary>
		<param name="d">A number representing a sine, where -1 (&lt;=) <paramref name="d"/> (&lt;=) 1.</param>
		<returns>
			<para>An angle, (theta), measured in radians, such that -(pi)/2 (&lt;=) (theta) (&lt;=) (pi)/2</para>
			<para>-or-</para>
			<para><see cref="System.Double.NaN"/> if <paramref name="d"/> &lt; -1 or <paramref name="d"/> &gt; 1.</para>
		</returns>
		<remarks>
			<para> A positive return value represents a counterclockwise angle from
      the x-axis; a negative return value represents a clockwise angle.</para>
			<para>Multiply the return value by 180/(pi) to convert from radians to degrees.</para>
		</remarks>
		<example>
			<para>The following code sample uses <see langword="Asin"/> to assist in the
   computation of the inner angles of a given trapezoid.</para>
			<codelink SampleID="MathSample" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Abs">
		<overload>
			<para>Returns the absolute value of a specified number.</para>
		</overload>
		<summary>
			<para> Returns the absolute value of an 8-bit signed
      integer.</para>
		</summary>
		<param name="value">A number in the range <see cref="System.SByte.MinValue"/> &lt; <paramref name="value"/> (&lt;=) <see cref="System.SByte.MaxValue"/>.</param>
		<returns>
			<para>An 8-bit signed integer,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="System.SByte.MaxValue"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> equals <see cref="System.SByte.MinValue"/>.</exception>
		<example>
			<codelink SampleID="math.abs" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Abs1">
		<summary>
			<para> Returns the absolute value of a 16-bit signed
      integer.</para>
		</summary>
		<param name="value">A number in the range <see cref="System.Int16.MinValue"/> &lt; <paramref name="value"/> (&lt;=) <see cref="System.Int16.MaxValue"/>.</param>
		<returns>
			<para>A 16-bit signed integer,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="System.Int16.MaxValue"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> equals <see cref="System.Int16.MinValue"/>.</exception>
		<example>
			<codelink SampleID="math.abs" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Abs2">
		<summary>
			<para> Returns the absolute value of a 32-bit signed
      integer.</para>
		</summary>
		<param name="value">A number in the range <see cref="System.Int32.MinValue"/> &lt; <paramref name="value"/> (&lt;=) <see cref="System.Int32.MaxValue"/>.</param>
		<returns>
			<para>A 32-bit signed integer,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="System.Int32.MaxValue"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> equals <see cref="System.Int32.MinValue"/>.</exception>
		<example>
			<codelink SampleID="math.abs" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Abs3">
		<summary>
			<para> Returns the absolute value of a 64-bit signed
      integer.</para>
		</summary>
		<param name="value">A number in the range <see cref="System.Int64.MinValue"/> &lt; <paramref name="value"/> (&lt;=) <see cref="System.Int64.MaxValue"/>.</param>
		<returns>
			<para>A 64-bit signed integer,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="System.Int64.MaxValue"/>.</para>
		</returns>
		<exception cref="System.OverflowException"><paramref name="value"/> equals <see cref="System.Int64.MinValue"/>.</exception>
		<example>
			<codelink SampleID="math.abs" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Abs6">
		<summary>
			<para> Returns the absolute value of a <see cref="System.Decimal"/> number.</para>
		</summary>
		<param name="value"><para>A number in the range <see cref="System.Decimal.MinValue"/> (&lt;=) value (&lt;=) <see cref="System.Decimal.MaxValue"/>. </para></param>
		<returns>
			<para>A <see cref="System.Decimal"/>, x, such that 0 (&lt;=) x (&lt;=) <see cref="System.Decimal.MaxValue"/>.</para>
		</returns>
		<example>
			<codelink SampleID="math.abs" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Atan">
		<summary>
			<para> Returns the
      angle whose tangent is the specified number.</para>
		</summary>
		<param name="d">A number representing a tangent.</param>
		<returns>
			<para>An angle, (theta), measured in radians, such that -(pi)/2 (&lt;=) (theta) (&lt;= )
      (pi)/2.</para>
			<para>-or-</para>
			<para><see cref="System.Double.NaN"/> if
<paramref name="d"/> equals <see cref="System.Double.NaN"/>, -(pi)/2 rounded to double precision (-1.5707963267949) 
   if <paramref name="d"/> equals <see cref="System.Double.NegativeInfinity"/>, or (pi)/2 rounded to double precision
   (1.5707963267949) if <paramref name="d"/> equals <see cref="System.Double.PositiveInfinity"/>.</para>
		</returns>
		<remarks>
			<para> A positive return value represents a counterclockwise angle from the x-axis; a
      negative return value represents a clockwise angle.</para>
			<para>Multiply the return value by 180/(pi) to convert from radians to degrees.</para>
		</remarks>
		<example>
			<codelink SampleID="math.atanx" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Atan2">
		<summary>
			<para> Returns the angle whose tangent is the quotient of two
      specified numbers.</para>
		</summary>
		<param name="y">The y coordinate of a point.</param>
		<param name="x">The x coordinate of a point.</param>
		<returns>
			<para> An angle, (theta), measured in radians, such that -(pi)
      (&lt;= ) (theta) (&lt;=)
      (pi), and tan((theta)) = <paramref name="y"/>/<paramref name="x"/>, where
      (<paramref name="x"/>,<paramref name="y"/>) is a point in the Cartesian plane. Observe the following:</para>
			<list type="bullet"><item>
					<term>
         
         For (<paramref name="x"/>,<paramref name="y"/> ) in quadrant 1, 0 &lt; (theta) &lt; (pi)/2.</term>
				</item>
				<item>
					<term>
         
         For (<paramref name="x"/>,<paramref name="y"/> ) in quadrant 2, (pi)/2 &lt; (theta) (&lt;=) (pi).</term>
				</item>
				<item>
					<term>
         
         For (<paramref name="x"/>,<paramref name="y"/> ) in quadrant 3, -(pi) &lt; (theta) &lt; -(pi)/2.</term>
				</item>
				<item>
					<term>
         
         For (<paramref name="x"/>,<paramref name="y"/> ) in quadrant 4, -(pi)/2 &lt; (theta) &lt; 0.</term>
				</item>
			</list>
		</returns>
		<remarks>
			<para>The return value is the angle in the Cartesian plane
      formed by the x-axis, and a vector starting from the origin, (0,0), and
      terminating at the point, (<paramref name="x,y"/>).</para>
		</remarks>
		<example>
			<codelink SampleID="math.atanx" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Tan">
		<summary>
			<para> Returns the tangent of the specified angle.</para>
		</summary>
		<param name="a">An angle, measured in radians.</param>
		<returns>
			<para>The tangent of <paramref name="a"/>. If <paramref name="a"/> is equal to <see cref="System.Double.NaN"/>, <see cref="System.Double.NegativeInfinity"/>,
   or <see cref="System.Double.PositiveInfinity"/>, this method returns <see cref="System.Double.NaN"/>.</para>
		</returns>
		<remarks>
			<para>The angle, <paramref name="a"/>, must be in radians. Multiply by (pi)/180 to convert degrees to radians.</para>
		</remarks>
		<example>
			<codelink SampleID="math.atanx" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.BigMul">
		<summary>
			<para>Produces the full product of two 32-bit numbers.</para>
		</summary>
		<param name="a">The first <see cref="System.Int32"/> to multiply.</param>
		<param name=" b">The second <see cref="System.Int32"/> to multiply.</param>
		<returns>
			<para>The <see cref="System.Int64"/>
containing the product of the specified numbers. </para>
		</returns>
		<example>
			<codelink SampleID="math.bigmul" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Ceiling">
		<summary>
			<para> Returns the smallest whole number greater than or equal to the specified
      number.</para>
		</summary>
		<param name="a">A number.</param>
		<returns>
			<para> The smallest whole number greater than or
      equal to <paramref name="a"/>. If <paramref name="a"/> is equal to <see cref="System.Double.NaN"/>, <see cref="System.Double.NegativeInfinity"/>,
      or <see cref="System.Double.PositiveInfinity"/>, that value is returned.</para>
		</returns>
		<remarks>
			<para>The behavior of this method follows IEEE Standard 754,
      section 4. This kind of rounding is sometimes called rounding toward
      positive infinity.</para>
		</remarks>
		<example>
			<codelink SampleID="Math.Ceiling_Floor" SnippetID="1"/>
		</example>
		<seealso cref="System.Math.Round"/>
		<seealso cref="System.Math.Floor"/>
	</doc>
	<doc for="Math.Floor">
		<summary>
			<para> Returns the largest whole number less than or equal
      to the specified number.</para>
		</summary>
		<param name="d">A number.</param>
		<returns>
			<para> The largest whole number
      less than or equal to <paramref name="d"/>. If <paramref name="d"/> is equal to <see cref="System.Double.NaN"/>, <see cref="System.Double.NegativeInfinity"/>,
      or <see cref="System.Double.PositiveInfinity"/>, then that value is returned.</para>
		</returns>
		<remarks>
			<para>The behavior of this method follows IEEE Standard 754,
      section 4. This kind of rounding is sometimes called rounding toward negative infinity.</para>
		</remarks>
		<example>
			<codelink SampleID="Math.Ceiling_Floor" SnippetID="1"/>
		</example>
		<seealso cref="System.Math.Round"/>
		<seealso cref="System.Math.Ceiling"/>
	</doc>
	<doc for="Math.Cos">
		<summary>
			<para> Returns the cosine of the specified angle.</para>
		</summary>
		<param name="d">An angle, measured in radians.</param>
		<returns>
			<para>The cosine of <paramref name="d"/>.</para>
		</returns>
		<remarks>
			<para>The angle, <paramref name="d"/>, must be in radians. Multiply by
   (pi)/180 to convert degrees to radians.</para>
		</remarks>
	</doc>
	<doc for="Math.IEEERemainder">
		<summary>
			<para>Returns the remainder resulting from the division of a
      specified number by another specified number.</para>
		</summary>
		<param name="x">A dividend.</param>
		<param name="y">A divisor.</param>
		<returns>
			<para> A number equal to <paramref name="x"/> -
   (<paramref name="y"/>Q), where Q is the quotient
   of <paramref name="x"/>/<paramref name="y"/> rounded to the
   nearest integer (if <paramref name="x"/>/<paramref name="y"/> falls
   halfway between two integers, the even
   integer is returned).</para>
			<para> If <paramref name="x"/> - (<paramref name="y"/>Q) is zero, the value +0 is returned if
<paramref name="x"/> is positive, or -0 if <paramref name="x"/> is negative. </para>
			<para> If <paramref name="y"/> = 
0, <see cref="System.Double.NaN"/> (Not-A-Number) is returned.</para>
		</returns>
		<remarks>
			<para>This operation complies with the remainder operation defined in Section 5.1
      of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic;
      Institute of Electrical and Electronics Engineers, Inc; 1985.</para>
		</remarks>
		<example>
			<codelink SampleID="Math.DivRem" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.DivRem">
		<overload>
			<para>Returns the quotient of two numbers, also passing the remainder as an output
      parameter. </para>
		</overload>
		<summary>
			<para>Returns the quotient of two 32-bit signed integers, also passing the
      remainder as an output parameter.</para>
		</summary>
		<param name="a">The <see cref="System.Int32" qualify="true"/> that contains the dividend.</param>
		<param name=" b">The <see cref="System.Int32" qualify="true"/> that contains the divisor. </param>
		<param name=" result">The <see cref="System.Int32" qualify="true"/> that receives the remainder. </param>
		<returns>
			<para>The <see cref="System.Int32" qualify="true"/> containing the quotient of the specified numbers.</para>
		</returns>
		<example>
			<codelink SampleID="Math.DivRem" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.DivRem1">
		<summary>
			<para>Returns the quotient of two 64-bit signed integers, also passing the remainder as an output parameter.</para>
		</summary>
		<param name="a">The <see cref="System.Int64" qualify="true"/> that contains the dividend.</param>
		<param name="b">The <see cref="System.Int64" qualify="true"/> that contains the divisor. </param>
		<param name="result">The <see cref="System.Int64" qualify="true"/> that receives the remainder. </param>
		<returns>
			<para>The <see cref="System.Int64" qualify="true"/>
containing the quotient of the specified numbers.</para>
		</returns>
		<example>
			<codelink SampleID="Math.DivRem" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Max">
		<overload>
			<para>Returns the larger of two specified numbers.</para>
		</overload>
		<summary>
			<para>Returns the larger of two 8-bit signed
      integers.</para>
		</summary>
		<param name="val1">The first of two 8-bit unsigned integers to compare.</param>
		<param name="val2">The second of two 8-bit unsigned integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is
   larger.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Max" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Max1">
		<summary>
			<para>Returns the larger of two 8-bit unsigned
      integers.</para>
		</summary>
		<param name="val1">The first of two 8-bit unsigned integers to compare.</param>
		<param name="val2">The second of two 8-bit unsigned integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is
   larger.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Max" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Max2">
		<summary>
			<para>Returns the larger of two 16-bit signed integers.</para>
		</summary>
		<param name=" val1">The first of two 16-bit signed integers to compare.</param>
		<param name=" val2">The second of two 16-bit signed integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is
   larger.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Max" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Max3">
		<summary>
			<para>Returns the larger of two 16-bit unsigned
      integers.</para>
		</summary>
		<param name="val1">The first of two 16-bit unsigned integers to compare.</param>
		<param name="val2">The second of two 16-bit unsigned integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is
   larger.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Max" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Max4">
		<summary>
			<para>Returns the larger of two 32-bit signed integers.</para>
		</summary>
		<param name="val1">The first of two 32-bit signed integers to compare.</param>
		<param name="val2">The second of two 32-bit signed integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is
   larger.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Max" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Max5">
		<summary>
			<para>Returns the larger of two 32-bit unsigned integers.</para>
		</summary>
		<param name="val1">The first of two 32-bit unsigned integers to compare.</param>
		<param name="val2">The second of two 32-bit unsigned integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is
   larger.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Max" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Max6">
		<summary>
			<para>Returns the larger of two 64-bit signed
      integers.</para>
		</summary>
		<param name="val1">The first of two 64-bit signed integers to compare.</param>
		<param name="val2">The second of two 64-bit signed integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is
   larger.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Max" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Max7">
		<summary>
			<para>Returns the larger of two 64-bit unsigned
      integers.</para>
		</summary>
		<param name="val1">The first of two 64-bit unsigned integers to compare.</param>
		<param name="val2">The second of two 64-bit unsigned integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is
   larger.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Max" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Max8">
		<summary>
			<para>Returns the larger of two single-precision floating-point
      numbers.</para>
		</summary>
		<param name="val1">The first of two single-precision floating-point numbers to compare.</param>
		<param name="val2">The second of two single-precision floating-point numbers to compare.</param>
		<returns>
			<para>Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger. If <paramref name="val1"/>, or
<paramref name="val2"/> , or both <paramref name="val1"/> and <paramref name="val2"/> are equal
   to <see cref="System.Single.NaN"/>, <see cref="System.Single.NaN"/> is returned. </para>
		</returns>
		<example>
			<codelink SampleID="Math.Max" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Max9">
		<summary>
			<para>Returns the larger of two double-precision floating-point
      numbers.</para>
		</summary>
		<param name="val1">The first of two double-precision floating-point numbers to compare.</param>
		<param name="val2">The second of two double-precision floating-point numbers to compare.</param>
		<returns>
			<para>Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger. If <paramref name="val1"/>,
<paramref name="val2"/>, or both 
<paramref name="val1"/> and <paramref name="val2"/> are
   equal to <see cref="System.Double.NaN"/>, <see cref="System.Double.NaN"/> is returned.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Max" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Max10">
		<summary>
			<para>Returns the larger of two decimal
      numbers.</para>
		</summary>
		<param name="val1">The first of two <see cref="System.Decimal"/> numbers to compare.</param>
		<param name="val2">The second of two <see cref="System.Decimal"/> numbers to compare.</param>
		<returns>
			<para>Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Max" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Min">
		<overload>
			<para>Returns the smaller of two numbers.</para>
		</overload>
		<summary>
			<para>Returns the smaller of two 8-bit signed
      integers.</para>
		</summary>
		<param name="val1">The first of two 8-bit signed integers to compare.</param>
		<param name="val2">The second of two 8-bit signed integers to compare.</param>
		<returns>
			<para>Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Min" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Min1">
		<summary>
			<para>Returns the smaller of two 8-bit unsigned
      integers.</para>
		</summary>
		<param name="val1">The first of two 8-bit unsigned integers to compare.</param>
		<param name="val2">The second of two 8-bit unsigned integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Min" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Min2">
		<summary>
			<para>Returns the smaller of two 16-bit signed
      integers.</para>
		</summary>
		<param name="val1">The first of two 16-bit signed integers to compare.</param>
		<param name="val2">The second of two 16-bit signed integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Min" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Min3">
		<summary>
			<para>Returns the smaller of two 16-bit unsigned
      integers.</para>
		</summary>
		<param name="val1">The first of two 16-bit unsigned integers to compare.</param>
		<param name="val2">The second of two 16-bit unsigned integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Min" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Min4">
		<summary>
			<para>Returns the smaller of two 32-bit signed
      integers.</para>
		</summary>
		<param name="val1">The first of two 32-bit signed integers to compare.</param>
		<param name="val2">The second of two 32-bit signed integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Min" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Min5">
		<summary>
			<para>Returns the smaller of two 32-bit unsigned
      integers.</para>
		</summary>
		<param name="val1">The first of two 32-bit unsigned integers to compare.</param>
		<param name="val2">The second of two 32-bit unsigned integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Min" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Min6">
		<summary>
			<para>Returns the smaller of two 64-bit signed
      integers.</para>
		</summary>
		<param name="val1">The first of two 64-bit signed integers to compare.</param>
		<param name="val2">The second of two 64-bit signed integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Min" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Min7">
		<summary>
			<para>Returns the smaller of two 64-bit unsigned integers.</para>
		</summary>
		<param name="val1">The first of two 64-bit unsigned integers to compare.</param>
		<param name="val2">The second of two 64-bit unsigned integers to compare.</param>
		<returns>
			<para> Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Min" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Min8">
		<summary>
			<para>Returns the smaller of two single-precision floating-point
      numbers.</para>
		</summary>
		<param name="val1">The first of two single-precision floating-point numbers to compare.</param>
		<param name="val2">The second of two single-precision floating-point numbers to compare.</param>
		<returns>
			<para>Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller. If
<paramref name="val1"/>, <paramref name="val2"/> , or both <paramref name="val1"/> and <paramref name="val2"/> are equal
   to <see cref="System.Single.NaN"/>, <see cref="System.Single.NaN"/> is returned. </para>
		</returns>
		<example>
			<codelink SampleID="Math.Min" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Min9">
		<summary>
			<para>Returns the smaller of two double-precision floating-point
      numbers.</para>
		</summary>
		<param name="val1">The first of two double-precision floating-point numbers to compare.</param>
		<param name="val2">The second of two double-precision floating-point numbers to compare.</param>
		<returns>
			<para>Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller. If <paramref name="val1"/>,
<paramref name="val2"/> , or both <paramref name="val1"/> and <paramref name="val2"/> are equal
   to <see cref="System.Double.NaN"/>, <see cref="System.Double.NaN"/> is returned.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Min" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Min10">
		<summary>
			<para>Returns the smaller of two decimal
      numbers.</para>
		</summary>
		<param name="val1">The first of two <see cref="System.Decimal"/> numbers to compare.</param>
		<param name="val2">The second of two <see cref="System.Decimal"/> numbers to compare.</param>
		<returns>
			<para>Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.</para>
		</returns>
		<example>
			<codelink SampleID="Math.Min" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Sign">
		<overload>
			<para>Returns a value indicating the sign of a number.</para>
		</overload>
		<summary>
			<para> Returns a value indicating the sign of an 8-bit signed integer.</para>
		</summary>
		<param name="value">A signed number.</param>
		<returns>
			<para>A number indicating the sign of <paramref name="value"/>.</para>
			<list type="table">
				<listheader>
					<term>Number</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> -1</term>
					<description><paramref name="value"/> is less than
      zero.</description>
				</item>
				<item>
					<term> 0</term>
					<description><paramref name="value"/> is equal to zero.</description>
				</item>
				<item>
					<term> 1</term>
					<description><paramref name="value"/> is greater than zero.</description>
				</item>
			</list>
		</returns>
		<example>
			<codelink SampleID="Math.Sign" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Sign1">
		<overload>
			<para>Returns a value indicating the sign of a number.</para>
		</overload>
		<summary>
			<para>Returns a value indicating the sign of a 16-bit signed integer.</para>
		</summary>
		<param name="value">A signed number.</param>
		<returns>
			<para>A number indicating the sign of <paramref name="value"/>.</para>
			<list type="table">
				<listheader>
					<term>Number</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> -1</term>
					<description><paramref name="value"/> is less than
      zero.</description>
				</item>
				<item>
					<term> 0</term>
					<description><paramref name="value"/> is equal to zero.</description>
				</item>
				<item>
					<term> 1</term>
					<description><paramref name="value"/> is greater than zero.</description>
				</item>
			</list>
		</returns>
		<example>
			<codelink SampleID="Math.Sign" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Sign2">
		<overload>
			<para>Returns a value indicating the sign of a number.</para>
		</overload>
		<summary>
			<para>Returns a value indicating the sign of a 32-bit signed integer.</para>
		</summary>
		<param name="value">A signed number.</param>
		<returns>
			<para>A number indicating the sign of <paramref name="value"/>.</para>
			<list type="table">
				<listheader>
					<term>Number</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> -1</term>
					<description><paramref name="value"/> is less than
      zero.</description>
				</item>
				<item>
					<term> 0</term>
					<description><paramref name="value"/> is equal to zero.</description>
				</item>
				<item>
					<term> 1</term>
					<description><paramref name="value"/> is greater than zero.</description>
				</item>
			</list>
		</returns>
		<example>
			<codelink SampleID="Math.Sign" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Sign3">
		<summary>
			<para>Returns a value indicating the sign of a 64-bit signed integer.</para>
		</summary>
		<param name="value">A signed number.</param>
		<returns>
			<para>A number indicating the sign of <paramref name="value"/>.</para>
			<list type="table">
				<listheader>
					<term>Number</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> -1</term>
					<description><paramref name="value"/> is less than
      zero.</description>
				</item>
				<item>
					<term> 0</term>
					<description><paramref name="value"/> is equal to zero.</description>
				</item>
				<item>
					<term> 1</term>
					<description><paramref name="value"/> is greater than zero.</description>
				</item>
			</list>
		</returns>
		<example>
			<codelink SampleID="Math.Sign" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Sign4">
		<summary>
			<para> Returns a value indicating the sign of a single-precision floating-point number.</para>
		</summary>
		<param name="value">A signed number.</param>
		<returns>
			<para>A number indicating the sign of <paramref name="value"/>.</para>
			<list type="table">
				<listheader>
					<term>Number</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> -1</term>
					<description><paramref name="value"/> is less than
      zero.</description>
				</item>
				<item>
					<term> 0</term>
					<description><paramref name="value"/> is equal to zero.</description>
				</item>
				<item>
					<term> 1</term>
					<description><paramref name="value"/> is greater than zero.</description>
				</item>
			</list>
		</returns>
		<exception cref="ArithmeticException"><paramref name="value"/> is equal to <see cref="System.Single.NaN"/>.</exception>
		<example>
			<codelink SampleID="Math.Sign" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Sign5">
		<summary>
			<para> Returns a value indicating the sign of a double-precision floating-point number.</para>
		</summary>
		<param name="value">A signed number.</param>
		<returns>
			<para>A number indicating the sign of <paramref name="value"/>.</para>
			<list type="table">
				<listheader>
					<term>Number</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> -1</term>
					<description><paramref name="value"/> is less than
      zero.</description>
				</item>
				<item>
					<term> 0</term>
					<description><paramref name="value"/> is equal to zero.</description>
				</item>
				<item>
					<term> 1</term>
					<description><paramref name="value"/> is greater than zero.</description>
				</item>
			</list>
		</returns>
		<exception cref="ArithmeticException"><paramref name="value"/> is equal to <see cref="System.Double.NaN"/>.</exception>
		<example>
			<codelink SampleID="Math.Sign" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Math.Sign6">
		<summary>
			<para>Returns a value indicating the sign of a
      decimal number.</para>
		</summary>
		<param name="value">A signed <see cref="System.Decimal"/> number.</param>
		<returns>
			<para>A number indicating the sign of <paramref name="value"/>.</para>
			<list type="table">
				<listheader>
					<term>Number</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> -1</term>
					<description><paramref name="value"/> is less than
      zero.</description>
				</item>
				<item>
					<term> 0</term>
					<description><paramref name="value"/> is equal to zero.</description>
				</item>
				<item>
					<term> 1</term>
					<description><paramref name="value"/> is greater than zero.</description>
				</item>
			</list>
		</returns>
		<example>
			<codelink SampleID="Math.Sign" SnippetID="1"/>
		</example>
	</doc>
</docs>
