<docs>
	<doc for="Object">
		<summary>
			<para>Supports all classes in the .NET Framework class hierarchy and provides
      low-level services to derived classes. This is the ultimate base class
      of all classes in the .NET Framework; it is the root of the type hierarchy.</para>
		</summary>
		<threadsafe>
			<para>Public static (<see langword="Shared"/> in Visual Basic) members of this type are safe for multithreaded operations.
 Instance members are not guaranteed to be thread-safe.</para>
		</threadsafe>
		<remarks>
			<para>Languages typically do not require a class to declare
      inheritance from <see cref="System.Object"/> because the inheritance is implicit.</para>
			<para>Because all classes in the .NET Framework are derived from <see cref="System.Object"/>,
   every method defined in the <see cref="System.Object"/> class is available in all objects in the system.
   Derived classes can and do override some of these methods, including:</para>
			<list type="bullet">
				<item>
					<term>
						<see cref="System.Object.Equals"/> - Supports comparisons between objects.</term>
				</item>
				<item>
					<term>
						<see cref="System.Object.Finalize"/> - Performs cleanup operations before an object
      is automatically reclaimed.</term>
				</item>
				<item>
					<term>
						<see cref="System.Object.GetHashCode"/> - Generates a number corresponding to the value 
      of the object to support the use of a hash table.</term>
				</item>
				<item>
					<term>
						<see cref="System.Object.ToString"/> - Manufactures a human-readable text string
      that describes an instance of the class.</term>
				</item>
			</list>
		</remarks>
	</doc><doc for="Object.Object">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Object"/> class.</para>
		</summary>
		<remarks>
			<para>This constructor is called by constructors in derived classes, but it can
      also be used to directly create an instance of the <see cref="System.Object"/> class.</para>
		</remarks>
	</doc><doc for="Object.ToString">
		<summary>
			<para>Returns a <see cref="System.String"/> that represents the current <see cref="System.Object"/>.</para>
		</summary>
		<returns>
			<para>A <see cref="System.String"/> that represents the current <see cref="System.Object"/>.</para>
		</returns>
		<remarks>
			<para> This method returns a human-readable string that is 
      culture-sensitive. For example, for an instance of the <see cref="System.Double"/> class whose value
      is zero, the implementation of <see cref="System.Double.ToString" qualify="true"/>
      might return "0.00" or "0,00" depending on the current UI culture.</para>
			<para> The default implementation returns the fully qualified name of the type of the <see cref="System.Object"/>.</para>
			<note type="inotes">
   This method can be overridden in a derived class to return values that are meaningful for that type. For example, the base data
   types, such as <see cref="System.Int32"/>, implement <see cref="System.Object.ToString"/> so that it returns the string form of the value that the
   object represents. Derived classes that require more control over the formatting of strings than <see cref="System.Object.ToString"/>
   provides must implement <see cref="System.IFormattable"/>, whose <see cref="System.IFormattable.ToString"/> method uses the current thread's <see cref="System.Threading.Thread.CurrentCulture"/> property.</note>
		</remarks>
		<example>
			<para>The following code example demonstrates what <see cref="System.Object.ToString"/> returns.</para>
			<codelink SampleID="Classic Object.ToString Example" SnippetID="1"/>
		</example>
		<seealso cref="System.String"/>
	</doc><doc for="Object.Equals1">
		<summary>
			<para>Determines whether the specified <see cref="System.Object"/> instances are considered equal.</para>
		</summary>
		<param name="objA">The first <see cref="System.Object"/> to compare.</param>
		<param name="objB">The second <see cref="System.Object"/> to compare.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="objA"/> is the same instance as
   <paramref name="objB"/> or if both are null references or if <c>objA.Equals(objB)</c> returns
   <see langword="true"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The default implementation of <see cref="System.Object.Equals"/> supports reference equality only, but derived classes
   can override this method to support value equality.</para>
			<para>For reference types, equality is defined as object equality; that is, whether
   the references refer to the same object. For value types, equality is defined as
   bitwise equality. The <see cref="System.ValueType"/> class supports value types.</para>
			<para>This method first determines whether both parameters are null
   references before calling <c>objA.Equals(objB)</c>.</para>
		</remarks>
		<example>
			<para>The following code example compares different objects.</para>
			<codelink SampleID="ECMA-System.Object.Equals0" SnippetID="1"/>
		</example>
		<seealso cref="System.Object.ReferenceEquals"/>
		<seealso cref="System.ValueType"/>
	</doc><doc for="Object.ReferenceEquals">
		<summary>
			<para>Determines whether the specified <see cref="System.Object"/> instances are the same instance.</para>
		</summary>
		<param name="objA">The first <see cref="System.Object"/> to compare.</param>
		<param name="objB">The second <see cref="System.Object"/> to compare.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> or if both are null references; otherwise, <see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following code example uses <see cref="System.Object.ReferenceEquals"/> to determine if two objects are the 
   same instance.</para>
			<codelink SampleID="ECMA-System.Object.ReferenceEquals" SnippetID="1"/>
		</example>
		<seealso cref="System.Object.Equals"/>
	</doc><doc for="Object.GetHashCode">
		<summary>
			<para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
		</summary>
		<returns>
			<para>A hash code for the current <see cref="System.Object"/>.</para>
		</returns>
		<remarks>
			<para>This method can be overridden by a derived class. Value
      classes must override this method to provide a hash function that is appropriate
      for the class and that ensures a better distribution in the hash table. Classes
      that might be used as a key in a hash table must also override this method, because objects that are used as
      keys in a hash table are required to generate their own hash code through this method.
 However, if the objects that are used as keys do not provide a useful implementation of GetHashCode,
 you can provide a different hash code provider, that is based on the <see cref="System.Collections.IHashCodeProvider" qualify="true" /> interface,
 when the <see cref="System.Collections.Hashtable"/> is constructed.</para>
			<para>The default implementation of <see cref="System.Object.GetHashCode"/> does not guarantee uniqueness or consistency;
      therefore, it must not be used as a unique object identifier for hashing purposes.
      Derived classes must override <see cref="System.Object.GetHashCode"/> with an implementation that returns a unique hash code.
      For best results, the hash code must be based on the value of an instance field or property, instead of a static field or property.</para>
			<note type="inotes">
			</note>
			<para>A hash function is used to quickly generate a number
   (hash code) that corresponds to the value of an object. Hash functions are
   usually specific to each <see cref="System.Type"/> and must
   use at least one of the instance fields as input.</para>
			<para> A hash function must have the following properties:</para>
			<list type="bullet">
				<item>
					<term>
      
      If two objects of the same type represent the same
      value, the hash function must return the same constant value for either
      object.</term>
				</item>
				<item>
					<term>
      
      For the best performance, a hash function must
      generate a random distribution for all input.</term>
				</item>
				<item>
					<term>
      
      The hash function must return exactly the same value regardless of any
      changes that are made to the object.</term>
				</item>
			</list>
			<para> For example, the implementation of <see cref="System.String.GetHashCode"/> provided
by the <see cref="System.String"/> class returns unique hash codes
for unique string values. Therefore, two <see cref="System.String"/> objects return the
same hash code if they represent the same string value. Also, the
method uses all the characters in the string to generate reasonably
randomly distributed output, even when the input is clustered
in certain ranges (for example, many users might have strings that contain only the
lower 128 ASCII characters, even though a string can contain any of the 65,535 Unicode characters).</para>
			<para><see cref="System.Object.GetHashCode"/> must always
return the same value for a given instance of the object. For derived classes of
<see cref="System.Object"/>, <see cref="System.Object.GetHashCode"/> can delegate to the <see cref="System.Object.GetHashCode" qualify="true"/>
implementation, if and only if that derived class defines value equality to be
reference equality and the type is not a value type. </para>
			<para>Providing a good hash function on a class can
   significantly affect the performance of adding those objects to a hash table. In a hash table with a good implementation of a
   hash function, searching for an element takes constant time (for example, an
   O(1) operation). In a hash table with a poor implementation of a hash function,
   the performance of a search depends on the number of items in the
   hash table (for example, an O(<paramref name="n"/>) operation, where <paramref name="n"/>
   is the number of items in the hash table). Hash functions
   must also be inexpensive to compute.</para>
			<para>Implementations of <see cref="System.Object.GetHashCode"/> must not result in
circular references. For example, if <see langword="ClassA.GetHashCode"/>
calls <see langword="ClassB.GetHashCode"/>, <see langword="ClassB.GetHashCode"/> must not
call <see langword="ClassA.GetHashCode"/> either directly or indirectly.</para>
			<para>Implementations of <see langword="GetHashCode"/> must not throw exceptions.</para>
			<para>Derived classes that override <see cref="System.Object.GetHashCode"/> must also override <see cref="System.Object.Equals"/> to guarantee that two objects
considered equal have the same hash code; otherwise, <see cref="System.Collections.Hashtable"/> might not work correctly.</para>
		</remarks>
		<example>
			<para>In some cases, <see cref="System.Object.GetHashCode"/> is implemented to simply return an
   integer value. The following code example illustrates an implementation of
<see cref="System.Int32.GetHashCode"/>, which returns an integer value.</para>
			<codelink SampleID="ECMA-System.Object.GetHashCode1" SnippetID="1"/>
			<para>Frequently, a type has multiple data fields that can participate in 
generating the hash code. One way to generate a hash code is to combine these 
fields using an <see langword="XOR (eXclusive OR)"/> operation, as shown in the 
following code example.</para>
			<codelink SampleID="ECMA-System.Object.GetHashCode2" SnippetID="1"/>
			<para>The following code example illustrates another case where the type's fields 
are combined using <see langword="XOR (eXclusive OR)"/> to generate the hash 
code. Notice that in this code example, the fields represent user-defined types, 
each of which implements <see cref="System.Object.GetHashCode"/> and <see cref="System.Object.Equals"/>.</para>
			<codelink SampleID="ECMA-System.Object.GetHashCode3" SnippetID="1"/>
			<para>If the data member of the derived class is bigger than an <see cref="System.Int32"/>, you can combine 
the high order bits of the value with the low order bits using an <see langword="XOR (eXclusive OR)"/> operation, as shown in the following code example.</para>
			<codelink SampleID="ECMA-System.Object.GetHashCode4" SnippetID="1"/>
		</example>
		<seealso topic="cpconhashtable"/>
		<seealso cref="System.Collections.Hashtable"/>
	</doc><doc for="Object.GetType">
		<summary>
			<para>Gets the <see cref="System.Type"/> of the current instance.</para>
		</summary>
		<returns>
			<para> The <see cref="System.Type"/> instance that represents the exact runtime type of the current instance.</para>
		</returns>
		<remarks>
			<para>For two objects <paramref name="x"/> and <paramref name="y"/> that have identical runtime types,
   <c>Object.ReferenceEquals(x.GetType(),y.GetType())</c> returns <see langword="true"/>.</para>
			<para> The <see cref="System.Type"/> object exposes the metadata associated with the class of
   the current <see cref="System.Object"/>.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates that <see cref="System.Object.GetType"/> returns 
   the runtime type of the current instance.</para>
			<codelink SampleID="ECMA-System.Object.GetType" SnippetID="1"/>
		</example>
		<seealso cref="System.Type"/>
	</doc><doc for="Object.Finalize">
		<summary>
			<para>Allows an <see cref="System.Object"/> to attempt to free resources and perform other cleanup operations before
   the <see cref="System.Object"/> is reclaimed by garbage collection.</para>
		</summary>
		<remarks>
			<para><see cref="System.Object.Finalize"/> is protected and, therefore, is accessible only through this class or a derived class.</para>
			<para>This method is automatically called after an object becomes inaccessible,
   unless the object has been exempted from finalization by a call to <see cref="System.GC.SuppressFinalize"/>.
   During shutdown of an application domain, <see langword="Finalize"/> is
   automatically called on objects that are not exempt from finalization, even
   those that are still accessible. <see langword="Finalize"/> is automatically
   called only once on a given instance, unless the object is re-registered using a
   mechanism such as <see cref="System.GC.ReRegisterForFinalize"/> and <see langword="GC.SuppressFinalize"/> has not been
   subsequently called.</para>
			<para>Every implementation of <see cref="System.Object.Finalize"/> in a derived type
   must call its base type's implementation of <see cref="System.Object.Finalize"/>. This is the only
   case in which application code is allowed to call <see cref="System.Object.Finalize"/>.</para>
			<para><see cref="System.Object.Finalize"/> operations have the following limitations:</para>
			<list type="bullet">
				<item>
					<term>
         The exact time when the finalizer executes during
         garbage collection is undefined. Resources are not guaranteed to be released
         at any specific time, unless calling a <see langword="Close"/> method or a <see langword="Dispose"/> method.</term>
				</item>
				<item>
					<term>
         The finalizers of two objects are not guaranteed to
         run in any specific order, even if one object refers to the other. That is, if
         Object A has a reference to Object B and both have finalizers, Object B might
         have already finalized when the finalizer of Object A starts.</term>
				</item>
				<item>
					<term>
						<para>The thread on which the finalizer is run is unspecified. </para>
					</term>
				</item>
			</list>
			<para>The <see cref="System.Object.Finalize"/> method might not run to completion or might not
   run at all in the following exceptional circumstances:</para>
			<list type="bullet">
				<item>
					<term>
      Another finalizer blocks indefinitely (goes into an
      infinite loop, tries to obtain a lock it can never obtain and so on). Because
      the runtime attempts to run finalizers to completion, other finalizers might
      not be called if a finalizer blocks indefinitely.</term>
				</item>
				<item>
					<term>
      The process terminates without giving the runtime a chance to clean up. In
      this case, the runtime's first notification of process termination is a
      DLL_PROCESS_DETACH notification.</term>
				</item>
			</list>
			<para>The runtime continues to <see langword="Finalize"/> objects during shutdown
   only while the number of finalizable objects continues to decrease. </para>
			<para>If <see cref="System.Object.Finalize"/> or an override of <see cref="System.Object.Finalize"/> throws an exception,
   the runtime ignores the exception, terminates that <see cref="System.Object.Finalize"/> method, and
   continues the finalization process.</para>
			<note type="inotes">
			</note>
			<para><see cref="System.Object.Finalize" qualify="true"/> does nothing by default. It must be overridden by a derived class only
   if necessary, because reclamation during garbage collection tends to take much longer if a <see cref="System.Object.Finalize"/>
   operation must be run.</para>
			<para>If an <see cref="System.Object"/>
   holds references to any resources, <see cref="System.Object.Finalize"/> must be overridden by a derived
   class in order to free these resources before the <see cref="System.Object"/> is discarded during garbage collection.</para>
			<para>A type must implement <see cref="System.Object.Finalize"/> when it uses
   unmanaged resources such as file handles or database connections that must be
   released when the managed object that uses them is reclaimed. See
   the <see cref="System.IDisposable"/> interface for a complementary and more controllable means of disposing resources.</para>
			<para><see cref="System.Object.Finalize"/> can take any action, including resurrecting an
   object (that is, making the object accessible again) after it has been cleaned
   up during garbage collection. However, the object can only be resurrected once;
   <see cref="System.Object.Finalize"/> cannot be called on resurrected objects during garbage collection.</para>
			<para lang="C#">Destructors are the C# mechanism for
   performing cleanup operations. Destructors provide appropriate safeguards, such
   as automatically calling the base type's destructor. In C# code, <see cref="System.Object.Finalize" qualify="true"/>
   cannot be called or overridden.</para>
		</remarks>
		<seealso cref="System.GC"/>
		<seealso cref="System.WeakReference"/>
	</doc><doc for="Object.MemberwiseClone">
		<summary>
			<para>Creates a shallow copy of the current <see cref="System.Object"/>.</para>
		</summary>
		<returns>
			<para>A shallow copy of the current <see cref="System.Object"/>.</para>
		</returns>
		<remarks>
			<para>This method cannot be overridden; a derived class must implement the <see cref="System.ICloneable"/> interface if
   a shallow copy is not appropriate. <see cref="System.Object.MemberwiseClone"/> is protected and, therefore, is accessible only through this class or a derived class.</para>
			<para>A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.
 If the field is a value type, a bit-by-bit copy of the field is performed.
 If the field is a reference type, the reference is copied but the referred object is not;
 therefore, the reference in the original object and the reference in the clone point to the same object.
 In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</para>
			<para>For example, if X is an <see cref="System.Object"/> with references
to the objects A and B, and the object A also has a reference to an object M, a
shallow copy of X is an object Y, which also has references to objects A and B.
In contrast, a deep copy of X is an object Y with direct references to
objects C and D, and an indirect reference to object N, where C is a copy of A,
D is a copy of B, and N is a copy of M.</para>
			<para>The <see cref="System.Type"/> of the clone is the same as the type of the original <see cref="System.Object"/>.</para>
		</remarks>
		<example>
			<para>The following code example shows how to copy an instance of a class using
      <see cref="System.Object.MemberwiseClone"/>.</para>
			<codelink SampleID="ECMA-System.Object.MemberwiseClone" SnippetID="1"/>
		</example>
		<seealso cref="System.ICloneable"/>
	</doc>
	<doc for="Object.Equals">
		<overload>
			<para>Determines whether two <see cref="System.Object"/> instances are equal.</para>
		</overload>
		<summary>
			<para>Determines whether the specified <see cref="System.Object"/> is equal to the current <see cref="System.Object"/>.</para>
		</summary>
		<param name="obj">The <see cref="System.Object"/> to compare with the current <see cref="System.Object"/>.</param>
		<returns>
			<para><see langword="true"/> if the specified <see cref="System.Object"/> is equal to the
   current <see cref="System.Object"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The default implementation of <see cref="System.Object.Equals"/> supports
   reference equality only, but derived classes can override this method to support value equality.</para>
			<para>For reference types, equality is defined as object
   equality; that is, whether the references refer to the same object. For value
   types, equality is defined as bitwise equality. The <see cref="System.ValueType"/>
   class supports value types.</para>
			<note type="inotes">
			</note>
			<para>This method can be overridden by a derived class. For example, many of
   the base data types return <see langword="true"/> if both objects represent the
   same value; otherwise, <see langword="false"/>.</para>
			<para>This method only compares primitives and objects. It must be overridden
   to compare more complex structures, such as arrays of objects.</para>
			<para>The following statements must be true for all
   implementations of the <see cref="System.Object.Equals"/> method. In the list, x, y, and z
   represent object references that are not <see langword="null"/>.</para>
			<list type="bullet"><item>
					<term>
      
      x.Equals(x) returns <see langword="true"/>, except in cases that involve floating-point
      types. See IEC 60559:1989, Binary Floating-point Arithmetic for Microprocessor
      Systems.</term>
				</item>
				<item>
					<term>
      
      x.Equals(y) returns the same value as y.Equals(x).</term>
				</item>
				<item>
					<term>
      x.Equals(y) returns <see langword="true"/> if both x and y are
   <see langword="NaN"/>.</term>
				</item>
				<item>
					<term>
      
      (x.Equals(y) &amp;&amp; y.Equals(z)) returns <see langword="true"/> if and
      only if x.Equals(z) returns <see langword="true"/>.</term>
				</item>
				<item>
					<term>
      
      Successive calls to x.Equals(y) return the same value
      as long as the objects referenced by x and y are not modified.</term>
				</item>
				<item>
					<term>
      
      x.Equals(<see langword="null"/>) returns <see langword="false"/>.</term>
				</item>
			</list>
			<para>See <see cref="Object.GetHashCode"/> for additional required behaviors pertaining to the <see cref="System.Object.Equals"/> method.</para>
			<para> Implementations of <see cref="System.Object.Equals"/> must not throw exceptions.</para>
			<para>For some kinds of objects, it is desirable to have <see cref="System.Object.Equals"/> test for
value equality instead of referential equality. Such implementations of <see cref="System.Object.Equals"/> return
<see langword="true"/> if the two objects have the same "value", even if they are not the same instance.
The type's implementer decides what constitutes an object's "value", but it is typically
some or all the data stored in the instance variables of the object. For example, the value of a
<see cref="System.String"/> is based on the characters of the string; the <see cref="System.Object.Equals"/> method
of the <see cref="System.String"/> class returns <see langword="true"/> for any two string instances that contain
exactly the same characters in the same order.</para>
			<para>Types that implement <see cref="System.IComparable"/> must override <see cref="System.Object.Equals"/>.</para>
			<para>Types that override <see cref="System.Object.Equals"/> must also override <see cref="System.Object.GetHashCode"/>;
otherwise, <see cref="System.Collections.Hashtable"/> might not work correctly.</para>
			<para>If your programming language supports operator overloading and if you choose
   to overload the equality operator for a given type, that type must override the <see cref="System.Object.Equals"/> method.
   Such implementations of the <see cref="System.Object.Equals"/> method must return the same results as the
   equality operator. Following this guideline will help ensure that class library code using <see cref="System.Object.Equals"/>
   (such as <see cref="System.Collections.ArrayList"/> and <see cref="System.Collections.Hashtable"/>) behaves in a manner that
   is consistent with the way the equality operator is used by application code. </para>
			<para>The following guidelines are for implementing a value type:</para>
			<list type="bullet"><item>
					<term>
      
      Consider overriding <see cref="System.Object.Equals"/> to gain increased performance over that
      provided by the default implementation of <see cref="System.Object.Equals"/> on <see cref="System.ValueType"/>.</term>
				</item>
				<item>
					<term>
      
      If you override <see cref="System.Object.Equals"/> and the language supports operator overloading,
      you must overload the equality operator for your value type.</term>
				</item>
			</list>
			<para>The following guidelines are for implementing a reference type:</para>
			<list type="bullet"><item>
					<term>
      
      Consider overriding <see cref="System.Object.Equals"/> on a reference type if the semantics of the
      type are based on the fact that the type represents some value(s).</term>
				</item>
				<item>
					<term>
      
      Most reference types must not overload the equality
      operator, even if they override <see cref="System.Object.Equals"/>. However, if you are implementing a
      reference type that is intended to have value semantics, such as a complex
      number type, you must override the equality operator.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para> The following code example compares the current instance with another object.</para>
			<codelink SampleID="Classic Object.Equals Example" SnippetID="1"/>
			<para>The following example shows a <see langword="Point"/> 
class that overrides the <see cref="System.Object.Equals"/> method to provide value equality and a 
class <see langword="Point3D"/>, which is derived from <see langword="Point"/>. 
Because <see langword="Point"/>'s override of <see cref="System.Object.Equals"/> is the 
first in the inheritance chain to introduce value equality, the <see cref="System.Object.Equals"/> method of 
the base class (which is inherited from <see cref="System.Object"/> and checks for referential equality) is 
not invoked. However, <see langword="Point3D.Equals"/> invokes 
<see langword="Point.Equals"/> because <see langword="Point"/> 
implements <see cref="System.Object.Equals"/> in a manner that provides value equality.</para>
			<codelink SampleID="ECMA-System.Object.Equals2" SnippetID="1"/>
			<para>The <see langword="Point.Equals"/> method checks that the 
<paramref name="obj"/> argument is not <see langword="null"/> and that it references an 
instance of the same type as this object. If either of those checks fail, the 
method returns <see langword="false"/>.</para>
			<para>The <see cref="System.Object.Equals"/> method 
uses <see cref="System.Object.GetType"/> to determine whether the run-time types of the two 
objects are identical. (Note that <see langword="typeof"/> is not used here 
because it returns the static type.) If the method used a check of the form 
<c>obj is Point</c>, the check would return <see langword="true"/> in cases where <paramref name="obj"/> is an instance of a 
derived class of <see langword="Point"/>, even though <paramref name="obj"/> and the current 
instance are not of the same runtime type. Having verified that both objects are 
of the same type, the method casts <paramref name="obj"/> to type <see langword="Point"/> 
and returns the result of comparing the instance variables of the two objects.</para>
			<para>In <see langword="Point3D.Equals"/>, the inherited <see cref="System.Object.Equals"/> method is 
invoked before anything else is done; the inherited <see cref="System.Object.Equals"/> method 
checks to see that <paramref name="obj"/> is not <see langword="null"/>, that <paramref name="obj"/> 
is an instance of the same class as this object and that the inherited instance 
variables match. Only when the inherited <see cref="System.Object.Equals"/> returns 
<see langword="true"/> does the method compare the instance variables introduced 
in the derived class. Specifically, the cast to <see langword="Point3D"/> is not 
executed unless <paramref name="obj"/> has been determined to be of type 
<see langword="Point3D"/> or a derived class of <see langword="Point3D"/>.</para>
			<para>In the previous example, <see langword="operator =="/> 
(the equality operator) is used to compare the individual instance variables. In 
some cases, it is appropriate to use the <see cref="System.Object.Equals"/> method to 
compare instance variables in an <see cref="System.Object.Equals"/> implementation,
 as shown in the following code example.</para>
			<codelink SampleID="ECMA-System.Object.Equals3" SnippetID="1"/>
			<para>In some languages, such as C#, operator overloading is supported. When a type overloads 
<see langword="operator =="/>, it must also override the <see cref="System.Object.Equals"/> method to 
provide the same functionality. This is typically accomplished by writing 
the <see cref="System.Object.Equals"/> method in terms of the overloaded <see langword="operator =="/>,
 as in the following code example.</para>
			<codelink SampleID="ECMA-System.Object.Equals4" SnippetID="1"/>
			<para>Because <see langword="Complex"/> is a C# struct (a value 
type), it cannot be derived from; therefore, the <see cref="System.Object.Equals"/> method 
need not compare the <see cref="System.Object.GetType"/> results for each object, but can instead use the 
<see langword="is"/> operator to check the type of the <paramref name="obj"/> parameter.</para>
		</example>
		<seealso cref="System.Object.ReferenceEquals"/>
		<seealso cref="System.Object.GetHashCode"/>
		<seealso cref="System.ValueType"/>
		<seealso cref="System.IComparable"/>
		<seealso cref="System.Collections.ArrayList" qualify="true"/>
		<seealso cref="System.Collections.Hashtable" qualify="true"/>
	</doc></docs>
