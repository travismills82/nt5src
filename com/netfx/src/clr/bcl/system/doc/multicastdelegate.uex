<docs>
	<doc for="MulticastDelegate">
		<summary>
			<para> Represents a multicast delegate;
      that is, a delegate that can have more than one element in
      its invocation list.
      </para>
		</summary>
		<remarks>
			<para><see cref="System.MulticastDelegate"/> is a special class. Compilers
   and other tools can derive from this class, but you cannot derive from it
   explicitly. The same is true of the <see cref="System.Delegate"/> class. </para>
			<para>A <see cref="System.MulticastDelegate"/> has a linked list of delegates, called
an invocation list, consisting of one or more elements. When a multicast delegate is invoked,
the delegates in the invocation list are called synchronously in the order in which they
appear. If an error occurs during execution of the list then
an exception is thrown. </para>
		</remarks>
		<example>
			<para>The following example demonstrates the use of a class 
      that is derived from <see cref="System.MulticastDelegate"/>.</para>
			<codelink SampleID="Multicast Delegate Introduction" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MulticastDelegate.operatorNE">
		<summary>
			<para> Determines whether two <see cref="System.MulticastDelegate"/>
objects are not equal.</para>
		</summary>
		<altmember cref="System.MulticastDelegate.Equals"/>
		<param name="d1">The left operand. </param>
		<param name="d2">The right operand. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="d1"/> and <paramref name="d2"/> do not have the same invocation lists; otherwise <see langword="false"/>. </para>
		</returns>
		<exception cref="System.MemberAccessException">Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism.</exception>
		<remarks>
			<para>Two delegates are equal if they are not <see langword="null"/> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</para>
			<para>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method. </para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="MulticastDelegate.MulticastDelegate">
		<overload>
			<para>Initializes a new instance of the <see cref="System.MulticastDelegate"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.MulticastDelegate"/> class.</para>
		</summary>
		<param name="target">The object on which <paramref name="method"/> is defined.</param>
		<param name="method">The name of the method for which a delegate is created.</param>
		<exception cref="System.MemberAccessException">Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism.</exception>
		<remarks>
			<para> This <see cref="M:System.MulticastDelegate.#ctor"/> constructor is called from the class
   produced by the compiler-generated
   code.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="MulticastDelegate.MulticastDelegate1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.MulticastDelegate"/> class.</para>
		</summary>
		<param name="target">The type of object on which <paramref name="method"/> is defined.</param>
		<param name="method">The name of the static method for which a delegate is created.</param>
		<exception cref="System.MemberAccessException">Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism.</exception>
		<remarks>
			<para>This <see cref="M:System.MulticastDelegate.#ctor"/>
constructor is called from a class to generate a delegate based on a static
method name and the <see cref="System.Type"/>
of the class that defines the method.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="MulticastDelegate.DynamicInvokeImpl">
		<summary>
			<para>Processes the full invocation list.</para>
		</summary>
		<param name="args">The arguments to pass to the encapsulated method.</param>
		<returns>
			<para>An array of type <see cref="System.Object"/> that contains the return value of the
   encapsulated method.</para>
		</returns>
		<exception cref="System.MemberAccessException"><para>Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism.</para>
			<para>-or-</para>
			<para>There is an attempt to invoke a method to which the caller does not have access (that is, a private method).</para></exception>
		<exception cref="System.ArgumentException">The number, order, or type of parameters is invalid.</exception>
		<exception cref="System.Reflection.TargetException"><para>An encapsulated method is not static, and the target object is null.</para>
			<para>-or-</para>
			<para>There is an attempt to invoke a method on an object or class that does not support the method.</para></exception>
		<exception cref="System.Reflection.TargetInvocationException">One of the encapsulated methods throws an exception.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="MulticastDelegate.GetObjectData">
		<summary>
			<para>Populates a <see cref="System.Runtime.Serialization.SerializationInfo"/> object with all the data
   needed to serialize this instance.</para>
		</summary>
		<param name=" info">An object that holds all the data needed to serialize or deserialize this instance.</param>
		<param name=" context">(Reserved) The location where serialized data is stored and retrieved. </param>
		<exception cref="System.ArgumentNullException"><paramref name="info "/>is <see langword="null"/>.</exception>
		<exception cref="System.MemberAccessException">Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism.</exception>
		<remarks>
			<para>This method stores all the information in <paramref name="info"/> necessary to serialize
   this instance.</para>
			<para>The <paramref name="context"/> parameter is reserved and is not currently used in the
execution of this method.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<seealso cref="System.Object"/>
		<seealso cref="System.Runtime.Serialization.SerializationInfo"/>
	</doc>
	<doc for="MulticastDelegate.Equals">
		<summary>
			<para>Determines whether this multicast delegate and the specified
      object are equal.</para>
		</summary>
		<param name="obj">The object to compare with this instance.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="obj"/> and this instance
   have the same invocation lists; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.MemberAccessException">Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism.</exception>
		<remarks>
			<para>Two delegates are equal if they are not
   <see langword="null"/> and
      are of exactly the same type, their invocation lists contain the same number
      of elements, and every element in the invocation list of the first
      delegate is equal to the corresponding element in the invocation list of
      the second delegate.</para>
			<para>Two invocation list elements are equal if they invoke the same instance
      method on the same target instance, or they invoke the same static method. </para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="MulticastDelegate.CombineImpl">
		<summary>
			<para>Combines this <see cref="System.Delegate"/> with the specified <see cref="System.Delegate"/> to form a
   new delegate. </para>
		</summary>
		<param name="follow">The delegate to combine with this delegate.</param>
		<returns>
			<para>A <see cref="System.Delegate"/> that is the new
   root of the <see cref="System.MulticastDelegate"/>
   invocation list.</para>
		</returns>
		<exception cref="System.MemberAccessException">Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="MulticastDelegate.RemoveImpl">
		<summary>
			<para>Removes an element from the invocation list of this
   <see cref="System.MulticastDelegate"/>
   that is equal to the specified delegate. </para>
		</summary>
		<param name="value">The delegate to search for in the invocation list.</param>
		<returns>
			<para>If <paramref name="value"/> is found in the invocation list for
   this instance, then a new <see cref="System.Delegate"/> without <paramref name="value"/>
   in its invocation list; otherwise, this instance
   with its original invocation list. </para>
		</returns>
		<exception cref="System.MemberAccessException">Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="MulticastDelegate.GetInvocationList">
		<summary>
			<para>Returns the invocation list of this multicast delegate, in
      invocation order.</para>
		</summary>
		<returns>
			<para> An array of delegates whose invocation lists
      collectively match the invocation list of this instance.</para>
		</returns>
		<exception cref="System.MemberAccessException">Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism.</exception>
		<remarks>
			<para> The array contains a set of delegates, each with an invocation list
      of one entry. Invoking these delegates sequentially, in the order they appear
      in the array, produces the same results as invoking the current instance.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="MulticastDelegate.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A 32-bit signed integer hash code.</para>
		</returns>
		<exception cref="System.MemberAccessException">Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="MulticastDelegate.operatorEQ">
		<summary>
			<para> Determines whether two <see cref="System.MulticastDelegate"/>
objects are equal.</para>
		</summary>
		<altmember cref="System.MulticastDelegate.Equals"/>
		<param name="d1">The left operand. </param>
		<param name="d2">The right operand. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="d1"/>
and <paramref name="d2"/> have the same
invocation lists; otherwise <see langword="false"/>.</para>
		</returns>
		<exception cref="System.MemberAccessException">Cannot create an instance of an abstract class or this member was invoked with a late-binding mechanism.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<remarks>
			<para>Two delegates are equal if they are not <see langword="null"/> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</para>
			<para>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method. </para>
		</remarks>
	</doc>
</docs>
