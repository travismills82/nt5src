<docs>

	<doc for="Boolean.IConvertible.ToBoolean">
		<summary>
			<para>Returns the value of this instance of 
    <see langword="Boolean"/> 
    .</para>
		</summary>
		<returns>
			<para><see cref="System.Boolean.True"/> or <see cref="System.Boolean.False"/>
 .</para>
		</returns>
	</doc>
	<doc for="Boolean.IConvertible.ToChar">
		<summary>
			<note type="note">
				<see langword="Boolean"/> objects cannot 
       be converted to char. This method always throws
    <see langword="InvalidCastException"/>
    .
 </note>
		</summary>
		<exception cref="System.InvalidCastException">Attempting to convert Boolean to Char.</exception>
	</doc>
	<doc for="Boolean.IConvertible.ToSByte">
		<summary>
			<para>Converts this instance of <see langword="Boolean"/> 
 to <see cref="System.SByte"/>.</para>
		</summary>
		<returns>
			<para>Returns 1 if this instance is non-zero (that is, <see langword="true"/>); returns 0 otherwise (that is, the instance is <see langword="false"/> ).</para>
		</returns>
	</doc>
	<doc for="Boolean.IConvertible.ToByte">
		<summary>
			<para> 
       Returns a byte
       with a value equivalent to
       either <see langword="true"/> or <see langword="false"/>, depending on the
       value of this instance of <see langword="Boolean"/>.
       </para>
		</summary>
		<returns>
			<para><see cref="System.Boolean.True"/> , coerced to byte, if the value of this 
    instance is non-zero; otherwise, <see cref="System.Boolean.False"/> , coerced to
    byte.
    </para>
		</returns>
		<remarks>
			<para>A byte is defined as an 8-bit unsigned integer.</para>
		</remarks>
		<seealso cref="System.Convert.ToByte"/>
	</doc>
	<doc for="Boolean.IConvertible.ToInt16">
		<summary>
			<para>Converts this instance of <see langword="Boolean"/> 
 to an <see cref="System.Int16"/>.</para>
		</summary>
		<returns>
			<para>Returns 1 if this instance is non-zero (that is, 
    <see langword="true"/>); returns 0 otherwise (that is, the instance is 
    <see langword="false"/> 
    ).</para>
		</returns>
	</doc>
	<doc for="Boolean.IConvertible.ToUInt16">
		<summary>
			<para>Returns a 16-bit unsigned integer representing the value 
       of this instance of <see langword="Boolean"/>
       . </para>
		</summary>
		<returns>
			<para>Returns a value of one if this 
    <see langword="Boolean"/> 
    object is <see cref="System.Boolean.True"/>,
    or zero if this object is <see cref="System.Boolean.False"/> .</para>
		</returns>
		<seealso cref="System.UInt16"/>
		<seealso cref="System.Convert.ToUInt16"/>
	</doc>
	<doc for="Boolean.IConvertible.ToInt32">
		<summary>
			<para>Converts this instance of <see langword="Boolean"/> 
 to an <see cref="System.Int32"/>.</para>
		</summary>
		<returns>
			<para>Returns 1 if this instance is non-zero (that is, <see langword="true"/>); returns 0 otherwise (that is, the instance is <see langword="false"/> ).</para>
		</returns>
	</doc>
	<doc for="Boolean.IConvertible.ToUInt32">
		<summary>
			<para>Returns a 32-bit unsigned integer representing the value of this instance of <see langword="Boolean"/> . </para>
		</summary>
		<returns>
			<para>Returns a value of one if this <see langword="Boolean"/> object is <see cref="System.Boolean.True"/>, or zero if this object is <see cref="System.Boolean.False"/> .</para>
		</returns>
		<seealso cref="System.UInt32"/>
		<seealso cref="System.Convert.ToUInt32"/>
	</doc>
	<doc for="Boolean.IConvertible.ToInt64">
		<summary>
			<para>Converts this instance of <see langword="Boolean"/> 
 to <see cref="System.Int64"/>.</para>
		</summary>
		<returns>
			<para>Returns 1 if this instance is non-zero (that is, <see langword="true"/>); returns 0 otherwise (that is, the instance is <see langword="false"/> ).</para>
		</returns>
	</doc>
	<doc for="Boolean.IConvertible.ToUInt64">
		<summary>
			<para>Returns a 64-bit unsigned integer representing the value of this instance of <see langword="Boolean"/>. </para>
		</summary>
		<returns>
			<para>Returns a value of one if this <see langword="Boolean"/> object is <see cref="System.Boolean.True"/>, or zero if this object is <see cref="System.Boolean.False"/> .</para>
		</returns>
		<seealso cref="System.UInt64"/>
		<seealso cref="System.Convert.ToUInt64"/>
	</doc>
	<doc for="Boolean.IConvertible.ToSingle">
		<summary>
			<note type="note">
       This conversion is not supported. Attempting to do so throws an <see langword="InvalidCastException"/>.
    </note>
		</summary>
		<exception cref="System.InvalidCastException">Unsupported conversion of <see langword="Boolean"/>.</exception>
	</doc>
	<doc for="Boolean.IConvertible.ToDouble">
		<summary>
			<note type="note">
       This conversion is not supported. Attempting to do so throws an <see langword="InvalidCastException"/>.
    </note>
		</summary>
		<exception cref="System.InvalidCastException">Unsupported conversion of <see langword="Boolean"/> .</exception>
	</doc>
	<doc for="Boolean.IConvertible.ToDecimal">
		<summary>
			<note type="note">
       This conversion is not supported. Attempting to do so throws an <see langword="InvalidCastException"/> .
    </note>
		</summary>
		<exception cref="System.InvalidCastException">Unsupported conversion of <see langword="Boolean"/> .</exception>
	</doc>
	<doc for="Boolean.IConvertible.ToDateTime">
		<summary>
			<note type="note">
       This conversion is not supported. Attempting to do so throws an <see langword="InvalidCastException"/> .
    </note>
		</summary>
		<exception cref="System.InvalidCastException">Unsupported conversion of <see langword="Boolean"/> .</exception>
	</doc>
	<doc for="Boolean.IConvertible.ToType">
		<summary>
			<para>Converts this instance of 
    <see langword="Boolean"/> to an object of the specified <see cref="System.Type"/>.</para>
		</summary>
		<param name="type">The desired type.</param>
		<returns>
			<para>An object of the specified type, with a 
       value equivalent to the value of this <see langword="Boolean"/>
       object.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="type"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The requested type conversion is not supported.</exception>
		<seealso cref="System.Convert"/>
	</doc>
	<doc for="Boolean.GetTypeCode">
		<summary>
			<para>Returns the <see cref="System.TypeCode"/> for value type <see cref="System.Boolean"/>.</para>
		</summary>
		<returns>
			<para>The enumerated constant, <see cref="System.TypeCode.Boolean" qualify="true"/>.</para>
		</returns>
	</doc>
	<doc for="Boolean.FalseString">
		<summary>
			<para>Represents the Boolean value <see langword="false"/> as a string. This 
 field is read-only.</para>
		</summary>
		<remarks>
			<para>This field is equal to the string "False".</para>
		</remarks>
		<seealso cref="System.String"/>
		<seealso cref="System.Boolean.TrueString"/>
	</doc>
	<doc for="Boolean.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A hash code for the current <see cref="System.Boolean"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Boolean"/> class implements <see langword="true"/> as the integer, one, and
<see langword="false"/> as the integer, zero. However, a particular 
 programming language might represent <see langword="true"/> and
<see langword="false"/> with other values.</para>
		</remarks>
		<seealso cref="System.Object.GetHashCode"/>
	</doc>
	<doc for="Boolean.Equals">
		<summary>
			<para>Returns a value indicating whether this instance is equal to a specified
 object.</para>
		</summary>
		<param name=" obj">An object to compare to this instance.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="obj"/> is a <see cref="System.Boolean"/> and has the
 same value as this instance; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This method overrides <see cref="System.Object.Equals"/>.</para>
		</remarks>
		<seealso cref="System.Boolean.CompareTo"/>
		<seealso cref="System.Object"/>
	</doc>
	<doc for="Boolean.ToString1">
		<summary>
			<para>Converts the value of this instance to its equivalent 
 string representation.</para>
		</summary>
		<param name=" provider">(Reserved) An <see cref="System.IFormatProvider"/> object.</param>
		<returns>
			<para><see cref="System.Boolean.TrueString"/> if the
 value of this instance is <see langword="true"/>, or
<see cref="System.Boolean.FalseString"/> if the value of this instance is 
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="provider"/> parameter is reserved. It does not participate in the
 execution of this method.</para>
		</remarks>
	</doc>
	<doc for="Boolean.TrueString">
		<summary>
			<para>Represents the Boolean value <see langword="true"/> as a string. This 
 field is read-only.</para>
		</summary>
		<remarks>
			<para>This field is equal to the string "True".</para>
		</remarks>
		<seealso cref="System.String"/>
		<seealso cref="System.Boolean.FalseString"/>
	</doc>
	<doc for="Boolean">
		<summary>
			<para> Represents a Boolean value.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para>Instances of this type have values of either <see langword="true"/> or
<see langword="false"/>.</para>
			<para> This value type implements interfaces <see cref="System.IConvertible"/> and <see cref="System.IComparable"/>. Use the <see cref="System.Convert"/> class for conversions instead of this type's explicit
interface member implementation of <see cref="System.IConvertible"/>.</para>
		</remarks>
	</doc><doc for="Boolean.ToString">
		<overload>
			<para>Converts the value of this instance to its equivalent
      string
      representation. </para>
		</overload>
		<summary>
			<para>Converts the value of this instance to its equivalent
      string
      representation. </para>
		</summary>
		<returns>
			<para><see cref="System.Boolean.TrueString"/> if the
   value of this instance is <see langword="true"/>, or
<see cref="System.Boolean.FalseString"/> if the value of this instance is 
<see langword="false"/>.</para>
		</returns>
		<example>
   The following code sample illustrates the use
   of <see langword="ToString"/> in the context of
<see langword="Boolean"/>:
   
<codelink SampleID="System.Boolean" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Boolean.CompareTo">
		<summary>
			<para>Compares this instance to a specified object and returns an indication of
      their relative values.</para>
		</summary>
		<param name=" obj">An object to compare to this instance, or <see langword="null"/>.</param>
		<returns>
			<para>A signed integer that indicates the relative order of this instance and
   <paramref name="obj"/>.</para>
			<list type="table"><listheader>
					<term>Return Value</term>
					<description>Condition</description>
				</listheader>
				<item>
					<term> Less
         than
         zero</term>
					<description>This instance is <see langword="false"/> and
   <paramref name="obj"/> is <see langword="true"/>.</description>
				</item>
				<item>
					<term> Zero</term>
					<description>This instance and <paramref name="obj"/> are equal
   (either both are <see langword="true"/> or both are <see langword="false"/>
   ).</description>
				</item>
				<item>
					<term> Greater
      than zero</term>
					<description>
						<para>This instance is <see langword="true"/> and <paramref name="obj"/> is
   <see langword="false"/>.</para>
						<para>-or-</para>
						<para><paramref name="obj"/> is
<see langword="null"/>.</para></description>
				</item>
			</list>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="obj"/> is not a <see cref="System.Boolean"/>.</exception>
		<remarks>
			<para><paramref name="obj"/> must be <see langword="null "/>or an instance of <see langword="Boolean"/>; otherwise, an exception is thrown.</para>
			<para>This method is implemented to support the <see cref="System.IComparable"/> interface.</para>
		</remarks>
		<seealso cref="System.Boolean.Equals"/>
		<seealso cref="System.Object"/>
	</doc>
	<doc for="Boolean.Parse">
		<summary>
			<para>Converts the specified string representation of a logical value to
      its <see cref="System.Boolean"/>
      equivalent.</para>
		</summary>
		<param name=" value">A string containing the value to convert.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="value"/> is equivalent to <see cref="System.Boolean.TrueString"/>;
   otherwise,
<see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/> .</exception>
		<exception cref="System.FormatException"><paramref name="value"/> is not equivalent to <see cref="System.Boolean.TrueString"/>or <see cref="System.Boolean.FalseString"/>.</exception>
		<remarks>
			<para> The <paramref name="value"/> parameter, optionally preceded or trailed by
   white space, must contain either <see cref="System.Boolean.TrueString"/> or
<see cref="System.Boolean.FalseString"/>; otherwise, an exception is thrown. The comparison
   is case-insensitive. </para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use
      of <see langword="Parse"/> in the context of <see langword="Boolean"/>:
      </para>
			<codelink SampleID="System.Boolean" SnippetID="2"/>
		</example>
		<seealso cref="System.ArgumentNullException"/>
		<seealso cref="System.FormatException"/>
		<seealso cref="System.String"/>
		<seealso cref="System.Boolean.TrueString"/>
		<seealso cref="System.Boolean.FalseString"/>
	</doc>
</docs>
