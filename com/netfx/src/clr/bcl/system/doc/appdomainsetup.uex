<docs>
	<doc for="AppDomainSetup.AppDomainSetup">
		<summary>
			<para>Initializes a new instance of the <see cref="System.AppDomainSetup"/> class.</para>
		</summary>
	</doc><doc for="AppDomainSetup.PrivateBinPath">
		<summary>
			<para> Gets or sets the list of directories that is combined
      with the <see cref="System.AppDomainSetup.ApplicationBase"/>
      directory to
      probe for private assemblies.
      </para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> containing a list of directory names, where each name is
   separated by a semicolon.</para>
		</value>
		<remarks>
			<para>Private assemblies are deployed in the same directory structure as the
      application. </para>
		</remarks>
	</doc><doc for="AppDomainSetup.DisallowPublisherPolicy">
		<summary>
			<para>Gets or sets a value indicating whether the publisher policy section of the configuration file
      is applied to an application domain.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the <see langword="publisherPolicy"/> section of the 
   configuration file
   for an application domain is ignored; otherwise, the declared publisher policy
   is honored.</para>
		</value>
		<remarks>
			<para>The <see cref="System.AppDomainSetup.DisallowPublisherPolicy"/> property
   specifically applies to a Web application that is loaded locally. Use
   this property to prevent a malicious attempt to execute an unsafe Web
   application in safe mode.</para>
			<para> For more information about bypassing publisher policy, see the
<see topic="cpconassemblyversionredirection"/> topic. For more 
   information about safe mode, see the <see topic="cpconstep1examiningconfigurationfiles"/>
   topic.</para>
		</remarks>
	</doc><doc for="AppDomainSetup.PrivateBinPathProbe">
		<summary>
			<para>      Gets or sets the private binary directory
      path used to locate an application.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> containing a list of directory names, where each name is separated by a semicolon.</para>
		</value>
		<remarks>
			<para>      Set this property
      to exclude the application directory path from the search for the application. The search is
      restricted to private and global binary directory paths, and the global assembly cache.</para>
			<para>This property cannot be changed after the <see cref="System.AppDomain"/> has finished its first bind.</para>
		</remarks>
	</doc><doc for="AppDomainSetup.ShadowCopyFiles">
		<summary>
			<para> Gets or sets a
      
      string that indicates whether shadow
      copying is turned on or off.
      </para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> containing the 
   value "true" to indicate that shadow copying is
   turned on; or "false" to indicate that shadow copying is turned off.</para>
		</value>
		<remarks>
			<para>This property cannot be changed after the <see cref="System.AppDomain"/> has finished its first bind. </para>
		</remarks>
	</doc><doc for="AppDomainSetup.CachePath">
		<summary>
			<para> Gets or
      sets the name of an area specific to
      the application where files are shadow copied.
      </para>
		</summary>
		<value>
			<para> A <see cref="System.String"/> that is the fully-qualified name of the directory path
   and file name where files are shadow copied.</para>
		</value>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the path information. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<seealso cref="System.AppDomainSetup.ShadowCopyFiles"/>
		<seealso cref="System.AppDomainSetup.ShadowCopyDirectories"/>
	</doc>
	<doc for="AppDomainSetup.DisallowBindingRedirects">
		<summary>
			<para>Gets or sets a value indicating if an application domain allows 
      assembly binding redirection.</para>
		</summary>
		<value>
			<para><see langword="true"/> if 
   redirection of assemblies is disallowed; otherwise it is
   allowed. </para>
		</value>
		<remarks>
			<para>The <see cref="System.AppDomainSetup.DisallowBindingRedirects"/>property is designed to be used by 
   services and server applications where assembly binding redirection is not part
   of the application scenario.</para>
		</remarks>
	</doc>
	<doc for="AppDomainSetup.ShadowCopyDirectories">
		<summary>
			<para> Gets or sets the names of the
      directories containing assemblies to be shadow copied.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> containing a list of directory names, where each name is separated by a semicolon.</para>
		</value>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>All directories specified by <see cref="System.AppDomainSetup.PrivateBinPath"/>, including the directory specified by <see cref="System.AppDomainSetup.ApplicationBase"/>, are not
   shadow copied by default if this property is not set.</para>
			<para>If an executable file is in use, updates to the
   executable file are stored in a shadow copy directory. Existing users continue
   using the original executable file until it terminates, while new users use the shadow copied executable file.</para>
			<para>This property cannot be changed after the <see cref="System.AppDomain"/> has finished its first bind.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the path information. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
	</doc>
	<doc for="AppDomainSetup">
		<summary>
			<para>Represents assembly binding information that can be added
      to an instance of <see cref="System.AppDomain"/>.</para>
		</summary>
		<remarks>
			<para>Members of this class are used with the <see cref="System.AppDomain.GetData" qualify="true"/> and
<see cref="System.AppDomain.SetData" qualify="true"/> methods to identify the <see cref="System.AppDomain" qualify="true"/> data to use. </para>
			<para>This class implements the <see cref="System.IAppDomainSetup"/> interface.</para>
			<note type="caution">
   The default value for the <see cref="System.AppdomainSetup.DisalowCodeDownload" qualify="true"/> property is <see langword="false"/>. This
   setting is unsafe for services. To prevent services from downloading partially
   trusted code, set this property to <see langword="true"/>.
</note>
		</remarks>
	</doc>
	<doc for="AppDomainSetup.DisallowCodeDownload">
		<summary>
			<para>Gets or sets a value indicating whether HTTP download of assemblies is allowed for an application domain.</para>
		</summary>
		<value>
			<para><see langword="true"/> if HTTP download of assemblies is to be disallowed; otherwise, it is allowed.</para>
		</value>
		<remarks>
			<para>The <see cref="System.AppDomainSetup.DisallowCodeDownload"/>property is designed to be used by services and server applications
   where downloading code from an intranet or the Internet is not part of
   the application scenario. </para>
			<note type="caution">
   The default value for the <see cref="System.AppdomainSetup.DisalowCodeDownload" qualify="true"/> property is <see langword="false"/>. This
   setting is unsafe for services. To prevent services from downloading partially
   trusted code, set this property to <see langword="true"/>.
</note>
		</remarks>
	</doc>
	<doc for="AppDomainSetup.ApplicationBase">
		<summary>
			<para>Gets or sets the name of the directory containing the
      application.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/>
containg the name of the application base directory.</para>
		</value>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>Used when getting or setting the assembly cache manager's APPBASE variable.
      This is the directory where the assembly manager should begin probing for
      assemblies. This property cannot be changed after the <see cref="System.AppDomain"/> has finished its
      first bind.</para>
			<para> The ApplicationBase property can influence which permissions
      are granted to an AppDomain. For example, an Appdomain originating from the
      local machine normally receives full trust based on its location of origin. However,
      if the ApplicationBase of that AppDomain is set to the full
      name of an intranet directory, the ApplicationBase setting will restrict the
      AppDomain permission to a LocalIntranet grant even though the AppDomain actually
      originates from the local machine.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the path information. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADApplicationBase" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomainSetup.ConfigurationFile">
		<summary>
			<para> Gets or sets the name of the
      configuration file for an application domain.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> that
   specifies the name of the configuration file.</para>
		</value>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para> The
      configuration file describes the search rules and configuration data for the application domain.
      The host that creates the application domain is responsible for supplying
      this data because the meaningful values vary from situation to situation.</para>
			<para>For example, the configuration data for ASP.NET applications is stored for
      each application, site, and computer, while the configuration data for an
      executable is stored for each application, user, and computer. Only the host
      knows the specifics of the configuration data for a particular circumstance. </para>
			<para>This property cannot be changed after the <see cref="System.AppDomain"/> has finished its first bind.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the path information. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADCreateDomain" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomainSetup.DynamicBase">
		<summary>
			<para> Gets or sets the directory where dynamically
      generated files are stored and accessed.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> that
   specifies the directory containing dynamic assemblies.</para>
		</value>
		<exception cref="System.MemberAccessException">The ApplicationName is not being set before the DynamicBase is set.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>When an <see cref="System.AppDomain"/> is created, a directory called the Dynamic Directory can be specified to
   store dynamic assemblies. This directory is logically located under the <see cref="System.AppDomainSetup.ApplicationBase"/>, although it can
   reside in another part of the directory.</para>
			<para>This property cannot be changed after the <see cref="System.AppDomain"/>
has finished its first bind.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the path information. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADDynamicBase" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomainSetup.ApplicationName">
		<summary>
			<para>Gets or sets the name of the application.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> that
   is the name of the application.</para>
		</value>
		<example>
			<codelink SampleID="ADMultiDomain" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomainSetup.LicenseFile">
		<summary>
			<para>Gets or sets the location of the license file associated with this
      domain.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> that specifies the name of the license file.</para>
		</value>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the path information. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ADCreateDomain" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AppDomainSetup.LoaderOptimization">
		<summary>
			<para>Specifies the optimization policy used to load an executable.</para>
		</summary>
		<value>
			<para>A <see cref="System.LoaderOptimization"/> enumerated constant used with the <see cref="System.LoaderOptimizationAttribute"/>.</para>
		</value>
		<example>
			<codelink SampleID="ADDyno" SnippetID="1"/>
		</example>
	</doc>
</docs>
