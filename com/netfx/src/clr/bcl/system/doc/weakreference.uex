<docs>
	<doc for="WeakReference.TrackResurrection">
		<summary>
			<para>Gets an indication whether the object referenced by this instance is tracked 
       after it is garbage collected and finalized.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the object this instance refers to is tracked after 
    finalization; or <see langword="false"/> if the object is only tracked until
    finalization.</para>
		</value>
		<seealso cref="System.GC"/>
	</doc>
	<doc for="WeakReference.Finalize">
		<summary>
			<para>Frees any resources allocated by this instance.</para>
		</summary>
		<seealso cref="System.GC"/>
		<seealso cref="System.Object.Finalize"/>
	</doc>
	<doc for="WeakReference.WeakReference2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.WeakReference"/> class, using deserialized data
   from the specified serialization and stream objects.</para>
		</summary>
		<param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
		<param name=" context">(Reserved) Describes the source and destination of the serialized stream specified by <paramref name="info"/>.</param>
		<exception cref="System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>The <paramref name="context"/> parameter is reserved, and does not
   currently participate in this operation.</para>
		</remarks>
	</doc><doc for="WeakReference.Target">
		<summary>
			<para>Gets or sets the object (the target) referenced by this instance.</para>
		</summary>
		<value>
			<para><see langword="null"/> if the object referenced by this instance has been
   garbage collected; otherwise, a reference to the object referenced by this
   instance.</para>
		</value>
		<exception cref="System.InvalidOperationException">The reference to the target object is invalid.</exception>
		<remarks>
			<para>An exception is thrown if the reference to
      the object referenced by this instance is invalid. This can occur if there is an
      attempt to resurrect the referenced object after it has been finalized.</para>
		</remarks>
		<seealso cref="System.Object"/>
		<seealso cref="System.GC"/>
	</doc><doc for="WeakReference.WeakReference">
		<overload>
			<para>Initializes a new instance of the <see cref="System.WeakReference"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.WeakReference"/> class,
   referencing the specified object.</para>
		</summary>
		<param name=" target">The object to track or <see langword="null"/>.</param>
		<remarks>
			<para>This constructor creates a short weak reference to <paramref name="target"/>.</para>
		</remarks>
		<seealso cref="System.Object"/>
	</doc><doc for="WeakReference.WeakReference1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.WeakReference"/> class,
   referencing the specified object and using the specified resurrection
   tracking.</para>
		</summary>
		<param name=" target">An object to track.</param>
		<param name=" trackResurrection">Indicates when to stop tracking the object. If <see langword="true"/>, the object is tracked after finalization; if <see langword="false"/>, the object is only tracked until finalization.</param>
		<remarks>
			<para>If <paramref name="trackResurrection"/> is <see langword="false"/>, a short weak reference
   is created. If <paramref name="trackResurrection"/> is <see langword="true"/>, a long weak
   reference is created. Typically, only short weak references are needed.</para>
		</remarks>
		<seealso cref="System.Object"/>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.Runtime.InteropServices.GCHandle"/>
	</doc><doc for="WeakReference.GetObjectData">
		<summary>
			<para>Populates a <see cref="System.Runtime.Serialization.SerializationInfo"/> object with all the data
   needed to serialize this instance.</para>
		</summary>
		<param name=" info">An object that holds all the data needed to serialize or deserialize this instance.</param>
		<param name=" context">(Reserved) The location where serialized data will be stored and retrieved. </param>
		<exception cref="System.ArgumentNullException"><paramref name="info "/>is <see langword="null"/>.</exception>
		<remarks>
			<para>This method stores all the information in <paramref name="info"/> necessary to serialize
   this instance.</para>
			<para>The <paramref name="context"/> parameter is reserved and is not currently used in the
execution of this method.</para>
		</remarks>
		<seealso cref="System.Object"/>
		<seealso cref="System.Runtime.Serialization.SerializationInfo"/>
	</doc><doc for="WeakReference.IsAlive">
		<summary>
			<para>Gets an indication whether the object referenced by this instance has been
      garbage collected.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the object referenced by this instance has not been
   garbage collected and is still accessible; otherwise, <see langword="false"/>.</para>
		</value>
		<exception cref="System.InvalidOperationException">The reference to the target object is invalid.</exception>
		<remarks>
			<para>An exception is thrown if the object referenced by
      this instance is invalid. This can occur if there is an attempt to resurrect the
      referenced object after it has been finalized.</para>
		</remarks>
		<seealso cref="System.GC"/>
		<seealso cref="System.Object"/>
	</doc><doc for="WeakReference">
		<summary>
			<para>Represents a weak reference, which references an object while still
      allowing it to be garbage collected.</para>
		</summary>
		<remarks>
			<para> The common language runtime garbage collection mechanism reclaims
      inaccessible (that is, unreachable) memory allocated to an object. An object
      becomes unreachable if all references to it become invalid, for example, by
      setting those references to <see langword="null"/>.</para>
			<para>Garbage collection will call an object's <see cref="System.Object.Finalize"/> method (that is, perform
   finalization), if there is such a method and if instructed to do so. Once
   finalization is complete, unpredictable results will occur if the garbage
   collected object is reacquired somehow and reused.</para>
			<para>A directly or indirectly referenced object is reachable, and the garbage
   collector is not permitted to reclaim it. A reference to a reachable object is
   called a strong reference.</para>
			<para>A weak reference also references a reachable object, which is called the
   target. A user acquires a strong reference to the target by assigning the
   value of the <see cref="System.WeakReference.Target"/> property to a variable. However, if there
   are no strong references to the target, the target becomes eligible for garbage
   collection even though it still has a weak reference.</para>
			<para>There can be a delay between the time an object becomes eligible for garbage
   collection and the time it is collected. If the user attempts to retrieve the
   target after it has been collected, only a null reference will be retrieved. If
   the target has not yet been collected, a valid reference will be retrieved. </para>
			<para>An object can be used (that is, be alive); become unused and eligible for
   garbage collection (that is, dead); then used again (that is, resurrected).
   However, unpredictable behavior results if a resurrected object is accessed
   after finalization.</para>
			<para>A <see langword="WeakReference"/> object can specify whether the reference to
its target be maintained after finalization; that is, whether the weak reference
should track the target's resurrection. A weak reference that does not track
resurrection is called a short weak reference, and a weak reference that
tracks resurrection is called a long weak reference.</para>
		</remarks>
		<seealso cref="System.GC"/>
		<seealso cref="System.WeakReference.Finalize"/>
	</doc></docs>
