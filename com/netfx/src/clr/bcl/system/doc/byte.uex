<docs>
	<doc for="Byte.IConvertible.ToBoolean">
		<summary>
			<para>Converts this instance of <see langword="Byte"/> to a 
    Boolean value.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the value of this 
 <see langword="Byte"/> is non-zero; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc>
	<doc for="Byte.IConvertible.ToChar">
		<summary>
			<para>Converts this instance of <see langword="Byte"/> to a Unicode character.</para>
		</summary>
		<returns>
			<para>The value of this instance as a Unicode character.</para>
		</returns>
	</doc>
	<doc for="Byte.IConvertible.ToSByte">
		<summary>
			<para>Converts this instance of <see langword="Byte"/> 
 to an <see cref="System.SByte"/>.</para>
		</summary>
		<returns>
			<para>The value of this instance as a signed 8-bit integer.</para>
		</returns>
	</doc>
	<doc for="Byte.IConvertible.ToByte">
		<summary>
			<para>Returns the value of this instance of 
    <see langword="Byte"/> .</para>
		</summary>
		<returns>
			<para>The value of this instance as an unsigned 8-bit integer.</para>
		</returns>
	</doc>
	<doc for="Byte.IConvertible.ToInt16">
		<summary>
			<para>Converts this
       instance of a Byte to an <see cref="System.Int16"/>.</para>
		</summary>
		<returns>
			<para>The value of this instance as a signed 16-bit integer.</para>
		</returns>
	</doc>
	<doc for="Byte.IConvertible.ToUInt16">
		<summary>
			<para>Converts this instance of <see langword="Byte"/> to a <see cref="System.UInt16"/>.</para>
		</summary>
		<returns>
			<para>The value of this instance as an unsigned 16-bit integer.</para>
		</returns>
	</doc>
	<doc for="Byte.IConvertible.ToInt32">
		<summary>
			<para>Converts this instance of a <see langword="Byte"/> 
 value to an <see cref="System.Int32"/>.</para>
		</summary>
		<returns>
			<para>The value of this instance as an unsigned 32-bit integer.</para>
		</returns>
	</doc>
	<doc for="Byte.IConvertible.ToUInt32">
		<summary>
			<para>Converts a Byte to a <see cref="System.UInt32"/>.</para>
		</summary>
		<returns>
			<para>The value of this instance as an unsigned 32-bit integer.</para>
		</returns>
		<remarks>
			<para>The ToUInt32method converts a byte value into a <see cref="System.UInt32"/>
 and returns it.</para>
		</remarks>
	</doc>
	<doc for="Byte.IConvertible.ToInt64">
		<summary>
			<para>Converts this
       instance of a Byte to an <see cref="System.Int64"/>.</para>
		</summary>
		<returns>
			<para>The value of this instance as an signed 64-bit integer.</para>
		</returns>
	</doc>
	<doc for="Byte.IConvertible.ToUInt64">
		<summary>
			<para>Converts a Byte to a <see cref="System.UInt64"/>.</para>
		</summary>
		<returns>
			<para>The value of this instance as an unsigned 64-bit integer.</para>
		</returns>
	</doc>
	<doc for="Byte.IConvertible.ToSingle">
		<summary>
			<para>Converts a Byte to a <see cref="System.Single"/>.</para>
		</summary>
		<returns>
			<para>The value of this instance as a single-precision floating point number.</para>
		</returns>
		<exception cref="System.InvalidCastException">is thrown if it doesn't return a float.</exception>
	</doc>
	<doc for="Byte.IConvertible.ToDouble">
		<summary>
			<para>Converts this
       instance of a Byte as a <see cref="System.Double"/>.</para>
		</summary>
		<returns>
			<para>The value of this instance as a double-precision floating point number.</para>
		</returns>
		<exception cref="System.InvalidCastException">is thrown if it doesn't return a byte.</exception>
	</doc>
	<doc for="Byte.IConvertible.ToDecimal">
		<summary>
			<para>Converts this
       instance of a Byte to a <see cref="System.Decimal"/> format.</para>
		</summary>
		<returns>
			<para>The value of this instance as a <see langword="Decimal"/>.</para>
		</returns>
		<exception cref="System.InvalidCastException">is thrown if it doesn't return a byte.</exception>
	</doc>
	<doc for="Byte.IConvertible.ToDateTime">
		<summary>
 This conversion is not supported. Attempting to do so throws an <see langword="InvalidCastException"/>.
 </summary>
		<exception cref="System.InvalidCastException">Unsupported conversion of <see langword="Byte"/>.</exception>
	</doc>
	<doc for="Byte.IConvertible.ToType">
		<summary>
			<para>Converts this instance of <see langword="Byte"/> to an object of the specified <see cref="System.Type"/>.</para>
		</summary>
		<param name="type">The type.</param>
		<returns>
			<para>An object of the specified type, with a value equivalent to the value of this instance of <see langword="Byte"/> .</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="type"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidCastException">The requested type conversion is not supported.</exception>
	</doc>
	<doc for="Byte.GetHashCode">
		<summary>
			<para>Returns the hash code for this instance.</para>
		</summary>
		<returns>
			<para>A hash code for the current <see cref="System.Byte"/> .</para>
		</returns>
		<seealso cref="System.Object.GetHashCode"/>
	</doc>
	<doc for="Byte.Equals">
		<summary>
			<para>Returns a value indicating whether this instance is equal to a specified
 object.</para>
		</summary>
		<param name=" obj">An object to compare with this instance, or <see langword="null"/>.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="obj"/> is an instance of <see cref="System.Byte"/>
and equals the value of this instance; otherwise, <see langword="false"/>.</para>
		</returns>
		<seealso cref="System.Byte.CompareTo"/>
	</doc>
	<doc for="Byte.MaxValue">
		<summary>
			<para> Represents the largest possible value of a <see cref="System.Byte"/>. This field is constant.</para>
		</summary>
		<remarks>
			<para> The value of this constant is 255 (hexadecimal 0xFF).</para>
		</remarks>
		<example>
			<codelink SampleID="System.Byte Examples" SnippetID="1"/>
		</example>
		<seealso cref="System.Byte.MinValue"/>
	</doc>
	<doc for="Byte.GetTypeCode">
		<summary>
			<para>Returns the <see cref="System.TypeCode"/> for value type <see cref="System.Byte"/>.</para>
		</summary>
		<returns>
			<para>The enumerated constant, <see cref="System.TypeCode.Byte" qualify="true"/>.</para>
		</returns>
	</doc>
	<doc for="Byte.MinValue">
		<summary>
			<para> Represents the smallest possible value of a <see cref="System.Byte"/>. This field is constant.</para>
		</summary>
		<remarks>
			<para>The value of this constant is 0.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Byte Examples" SnippetID="1"/>
		</example>
		<seealso cref="System.Byte.MaxValue"/>
	</doc>
	<doc for="Byte.Parse1">
		<summary>
			<para>Converts the string representation of a number in a
 specified style to its <see cref="System.Byte"/>
 equivalent.</para>
		</summary>
		<param name=" s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/> . </param>
		<param name=" style">A bitwise combination of <see cref="System.Globalization.NumberStyles"/> values that indicate the permitted format of <paramref name="s"/>. If <paramref name="style"/> is <see langword="null"/>, the string is interpreted using the <see cref="System.Globalization.NumberStyles.Integer"/> style. </param>
		<returns>
			<para>The <see cref="System.Byte"/>
value equivalent to the number contained in <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><paramref name="s "/>is not of the correct format.</exception>
		<exception cref="System.OverflowException"><paramref name="s "/>represents a number less than <see cref="System.Byte.MinValue"/> or greater than <see cref="System.Byte.MaxValue"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="style"/> is not a valid bitwise combination of <see cref="System.Globalization.NumberStyles"/> values.</exception>
		<remarks>
			<para>The <paramref name="s"/> parameter is parsed using the formatting information in a <see cref="System.Globalization.NumberFormatInfo"/> initialized for the current system culture.</para>
			<para>The <paramref name="s"/> parameter contains a number of the form:</para>
			<para>[ws][sign]digits[ws]</para>
			<para>Items in square brackets ('[' and ']') are optional, and other items are as
 follows.</para>
			<list type="termdef">
				<item>
					<term> ws</term>
					<description>Optional white space.</description>
				</item>
				<item>
					<term> sign</term>
					<description>
						<para>An optional positive sign.</para></description>
				</item>
				<item>
					<term> digits</term>
					<description>A sequence of digits ranging from 0 to
 9.</description>
				</item>
			</list>
			<para>The <paramref name="style "/> parameter is a bitwise
 combination of zero or more <see cref="System.Globalization.NumberStyles"/>
 values, except <see cref="System.Globalization.NumberStyles.Any"/> and <see cref="System.Globalization.NumberStyles.AllowDecimalPoint"/>, which are invalid for the
 type returned by this method.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Byte.ToString"/>
		<seealso cref="System.Byte.MaxValue"/>
		<seealso cref="System.Byte.MinValue"/>
		<seealso cref="System.Globalization.NumberStyles"/>
		<seealso cref="System.Globalization.NumberFormatInfo"/>
		<seealso cref="System.IFormatProvider"/>
	</doc>
	<doc for="Byte.Parse2">
		<summary>
			<para>Converts the string representation of a number in a specified
 culture-specific format to its <see cref="System.Byte"/>
 equivalent.</para>
		</summary>
		<param name=" s">A string containing a number to convert. The string is interpretedusing the <see cref="System.Globalization.NumberStyles.Integer"/> style.</param>
		<param name=" provider">An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="s"/>. If <paramref name="provider"/> is <see langword="null"/>, the current system culture is used.</param>
		<returns>
			<para> The <see cref="System.Byte"/> value equivalent to the number contained in <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><paramref name="s "/>is not of the correct format.</exception>
		<exception cref="System.OverflowException"><paramref name="s "/>represents a number less than <see cref="System.Byte.MinValue"/> or greater than <see cref="System.Byte.MaxValue"/>.</exception>
		<remarks>
			<para>The <paramref name="s"/> parameter is parsed using the
 formatting information in a <see cref="System.Globalization.NumberFormatInfo"/> supplied by <paramref name="provider"/> .</para>
			<para>The <paramref name="s"/> parameter contains a number of the form:</para>
			<para>[ws][sign]digits[ws]</para>
			<para>Items in square brackets ('[' and ']') are optional, and other items are as
 follows.</para>
			<list type="termdef">
				<item>
					<term> ws</term>
					<description>Optional white space.</description>
				</item>
				<item>
					<term> sign</term>
					<description>
						<para>An optional positive sign.</para></description>
				</item>
				<item>
					<term> digits</term>
					<description>A sequence of digits ranging from 0 to
 9.</description>
				</item>
			</list>
			<para>The <paramref name="provider"/> parameter is an <see cref="System.IFormatProvider"/> instance that supplies
 a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see langword="NumberFormatInfo"/> object provides culture-specific information
 about the format of <paramref name="s"/>.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Byte.ToString"/>
		<seealso cref="System.Byte.MaxValue"/>
		<seealso cref="System.Byte.MinValue"/>
		<seealso cref="System.Globalization.NumberStyles"/>
		<seealso cref="System.Globalization.NumberFormatInfo"/>
		<seealso cref="System.IFormatProvider"/>
	</doc>
	<doc for="Byte.Parse3">
		<summary>
			<para>Converts the string representation of a number in a specified style and
 culture-specific format to its <see cref="System.Byte"/>
 equivalent.</para>
		</summary>
		<param name=" s">A string containinga number to convert. The string is interpreted using the style specified by <paramref name="style"/> .</param>
		<param name=" style">A bitwise combination of <see cref="System.Globalization.NumberStyles"/> values that indicate the permitted format of <paramref name="s"/>. If <paramref name="style"/> is <see langword="null"/>, the string is interpreted using the <see cref="System.Globalization.NumberStyles.Integer"/> style.</param>
		<param name=" provider">An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="s"/>. If <paramref name="provider"/> is <see langword="null"/>, the current system culture is used.</param>
		<returns>
			<para>The <see cref="System.Byte"/>
value equivalent to the number contained in <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><paramref name="s "/>is not of the correct format.</exception>
		<exception cref="System.OverflowException"><paramref name="s "/>represents a number less than <see cref="System.Byte.MinValue"/> or greater than <see cref="System.Byte.MaxValue"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="style"/> is not a valid bitwise combination of <see cref="System.Globalization.NumberStyles"/> values.</exception>
		<remarks>
			<para>The <paramref name="s "/> parameter is parsed using the formatting information in a <see cref="System.Globalization.NumberFormatInfo"/> supplied by <paramref name="provider"/>.</para>
			<para>The <paramref name="s "/> parameter contains a number of the form:</para>
			<para>[ws][sign]digits[ws]</para>
			<para>Items in square brackets ('[' and ']') are optional, and other items are as
 follows.</para>
			<list type="termdef">
				<item>
					<term> ws</term>
					<description>Optional white space.</description>
				</item>
				<item>
					<term> sign</term>
					<description>
						<para>An optional positive sign.</para></description>
				</item>
				<item>
					<term> digits</term>
					<description>A sequence of digits ranging from 0 to
 9.</description>
				</item>
			</list>
			<para>The <paramref name="style "/> parameter is a bitwise combination of zero or more <see cref="System.Globalization.NumberStyles"/> values, except <see cref="System.Globalization.NumberStyles.Any"/> and <see cref="System.Globalization.NumberStyles.AllowDecimalPoint"/>, which are invalid for the
 type returned by this method.</para>
			<para>The <paramref name="provider"/> parameter is an <see cref="System.IFormatProvider"/> instance that supplies a <see cref="System.Globalization.NumberFormatInfo"/> object. The <see cref="System.Globalization.NumberFormatInfo"/> object provides culture-specific information
about the format of <paramref name="s"/>.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Byte.ToString"/>
		<seealso cref="System.Byte.MaxValue"/>
		<seealso cref="System.Byte.MinValue"/>
		<seealso cref="System.Globalization.NumberStyles"/>
		<seealso cref="System.Globalization.NumberFormatInfo"/>
		<seealso cref="System.IFormatProvider"/>
	</doc>
	<doc for="Byte.ToString">
		<overload>
			<para>Converts the numeric value of this instance to its
 equivalent string.</para>
		</overload>
		<summary>
			<para>Converts the numeric value of this instance to its
 equivalent string.</para>
		</summary>
		<returns>
			<para> The value of
 this instance.</para>
		</returns>
		<remarks>
			<para>The return value is formatted with the general format specifier ("G") and the
 <see cref="System.Globalization.NumberFormatInfo"/> for the current culture.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Byte.Parse"/>
		<seealso cref="System.String"/>
		<seealso cref="System.Globalization.NumberFormatInfo"/>
	</doc>
	<doc for="Byte.ToString2">
		<summary>
			<para>Converts the numeric value of this instance to its 
 equivalent string using the specified culture-specific
 format information. </para>
		</summary>
		<param name=" provider">An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information. </param>
		<returns>
			<para> The value of this instance, formatted as
 specified by <paramref name="provider"/>.</para>
		</returns>
		<remarks>
			<para>This instance is formatted with the general format specifier ("G").</para>
			<para>The <paramref name="provider"/> parameter is an <see cref="System.IFormatProvider"/> instance
 that supplies a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see cref="System.Globalization.NumberFormatInfo"/> object provides culture-specific information 
 about this instance. If <paramref name="provider"/> is <see langword="null"/> or a <see cref="System.Globalization.NumberFormatInfo"/>
 cannot be obtained from <paramref name="provider"/>, this instance is formatted with the
<see cref="System.Globalization.NumberFormatInfo"/> for the current system
 culture.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Byte.Parse"/>
		<seealso cref="System.String"/>
		<seealso cref="System.Globalization.NumberFormatInfo"/>
		<seealso cref="System.IFormatProvider"/>
	</doc>
	<doc for="Byte.CompareTo">
		<summary>
			<para>Compares this instance to a specified object and returns an indication of
      their relative values.</para>
		</summary>
		<param name=" value">An object to compare, or <see langword="null"/>.</param>
		<returns>
			<para>A signed integer that indicates the relative order of this instance and
   <paramref name="value"/>.</para>
			<list type="table"><listheader>
					<term>Return Value</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> Less than zero</term>
					<description>This instance is less than
      <paramref name="value"/>.</description>
				</item>
				<item>
					<term> Zero</term>
					<description>This instance is equal to
      <paramref name="value"/>.</description>
				</item>
				<item>
					<term> Greater than zero</term>
					<description><para>This instance is greater than
      <paramref name="value"/>.</para>
						<para>-or-</para>
						<para><paramref name="value"/> is <see langword="null"/>.</para></description>
				</item>
			</list>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="value"/> is not a <see cref="System.Byte"/>.</exception>
		<remarks>
			<para><paramref name="value"/> must be <see langword="null "/>or an instance of <see cref="System.Byte"/>; otherwise, an
   exception is thrown.</para>
			<para>Any instance of <see cref="System.Byte"/>, regardless of its value, is considered
greater than <see langword="null"/>.</para>
			<para>This method is implemented to support the <see cref="System.IComparable"/>
interface.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Byte Examples" SnippetID="3"/>
		</example>
		<seealso cref="System.ArgumentException"/>
		<seealso cref="System.IComparable"/>
		<seealso cref="System.Byte.Equals"/>
	</doc>
	<doc for="Byte.Parse">
		<overload>
			<para>Converts the string representation of a number to its
   <see cref="System.Byte"/>
   equivalent.</para>
		</overload>
		<summary>
			<para>Converts the string representation of a number to
      its <see cref="System.Byte"/>
      equivalent.</para>
		</summary>
		<param name=" s">A string containing a number to convert. The string is interpreted using the <see cref="System.Globalization.NumberStyles.Integer"/> style.</param>
		<returns>
			<para>The <see cref="System.Byte"/> value equivalent to the number contained in <paramref name="s"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="System.FormatException"><paramref name="s "/>is not of the correct format.</exception>
		<exception cref="System.OverflowException"><paramref name="s "/>represents a number less than <see cref="System.Byte.MinValue"/> or greater than <see cref="System.Byte.MaxValue"/>.</exception>
		<remarks>
			<para>The <paramref name="s"/> parameter is parsed using the
   formatting information in a <see cref="System.Globalization.NumberFormatInfo"/>
   initialized for the current system culture.</para>
			<para>The <paramref name="s"/> parameter contains a number of the form:</para>
			<para>[ws][sign]digits[ws]</para>
Items in square brackets ('['
and ']') are optional, and other items are as follows.
<list type="termdef">
				<item>
					<term> ws</term>
					<description>Optional white space.</description>
				</item>
				<item>
					<term> sign</term>
					<description>
						<para>An optional positive or negative sign.</para></description>
				</item>
				<item>
					<term> digits</term>
					<description>A sequence of digits ranging from 0 to
            9.</description>
				</item>
			</list>
		</remarks>
		<example>
			<codelink SampleID="System.Byte Examples" SnippetID="2"/>
		</example>
		<seealso topic="cpConFormattingOverview"/>
		<seealso cref="System.Byte.ToString"/>
		<seealso cref="System.Byte.MaxValue"/>
		<seealso cref="System.Byte.MinValue"/>
		<seealso cref="System.Globalization.NumberStyles"/>
		<seealso cref="System.Globalization.NumberFormatInfo"/>
	</doc>
	<doc for="Byte">
		<summary>
			<para>Represents an 8-bit unsigned integer.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para>The <see langword="Byte"/> value type represents unsigned integers with values
   ranging from 0 to 255.</para>
			<para><see langword="Byte"/> provides
methods to compare instances of this type, convert the value of an instance to
its string representation, and convert the string representation of a number to an
instance of this type.</para>
			<para> For information about how format specification codes
   control the string representation of value
   types, see <see topic="cpConFormattingOverview"/>. </para>
			<para>This type implements interfaces <see cref="System.IComparable"/>, <see cref="System.IFormattable"/>, and <see cref="System.IConvertible"/>. Use the <see cref="System.Convert"/> class for conversions instead of this type's explicit
interface member implementation of <see cref="System.IConvertible"/>.</para>
			<para>This type is thread safe; multiple threads can concurrently read from an
   instance of this type.</para>
		</remarks>
		<example>
			<para>The following example demonstrates the use of <see langword="Byte"/> when
   converting an array of bytes into a string of hexadecimal values.</para>
			<codelink SampleID="Convert ByteArray To Hex String Example" SnippetID="1"/>
		</example>
		<seealso cref="System.SByte"/>
		<seealso cref="System.String"/>
		<seealso cref="System.IComparable"/>
		<seealso cref="System.IFormattable"/>
		<seealso cref="System.IConvertible"/>
	</doc>
	<doc for="Byte.ToString1">
		<summary>
			<para>Converts the numeric value of this instance to its
      equivalent string using the specified format. </para>
		</summary>
		<param name=" format">A string thatspecifies the return format. See <see cref="System.Byte.ToString(String, IFormatProvider)"/> for a list of valid values.</param>
		<returns>
			<para> The value of this instance, formatted as
      specified by <paramref name="format"/>.</para>
		</returns>
		<remarks>
			<para>If <paramref name="format"/> is <see langword="null"/> or an empty string (""), the return
   value of this instance is formatted with the general format specifier ("G").</para>
			<para>The return value of this instance is formatted with the <see cref="System.Globalization.NumberFormatInfo"/> for the current culture. </para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso topic="cpConNumericFormatStrings"/>
		<seealso cref="System.Byte.Parse"/>
		<seealso cref="System.String"/>
		<seealso cref="System.Globalization.NumberFormatInfo"/>
	</doc>
	<doc for="Byte.ToString3">
		<summary>
			<para>Converts the numeric value of this instance to its
      equivalent string using the specified format and
      culture-specific format information. </para>
		</summary>
		<param name=" format">A string thatspecifies the return format.</param>
		<param name=" provider">An <see cref="System.IFormatProvider"/> that supplies culture-specific formatting information. </param>
		<returns>
			<para>The value of this instance, formatted as specified by <paramref name="format"/> and <paramref name="provider"/>.</para>
		</returns>
		<remarks>
			<para>If <paramref name="format"/> is <see langword="null"/> or an empty string (""), the return
   value of this instance is formatted with the general format specifier ("G").</para>
			<para>The following table lists the format characters that are
   valid for <see cref="System.Byte"/>.</para>
			<list type="table">
				<listheader>
					<term>Format Characters</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> "C", "c"</term>
					<description>Currency format.</description>
				</item>
				<item>
					<term> "D", "d"</term>
					<description>Decimal format.</description>
				</item>
				<item>
					<term> "E", "e"</term>
					<description>Exponential notation format.</description>
				</item>
				<item>
					<term> "F", "f"</term>
					<description>Fixed-point format.</description>
				</item>
				<item>
					<term> "G", "g"</term>
					<description>General format.</description>
				</item>
				<item>
					<term> "N", "n"</term>
					<description>Number format.</description>
				</item>
				<item>
					<term> "P", "p"</term>
					<description>Percent format.</description>
				</item>
				<item>
					<term> "X", "x"</term>
					<description>Hexadecimal format.</description>
				</item>
			</list>
			<para>The <paramref name="provider"/> parameter is an <see cref="System.IFormatProvider"/> instance that supplies a <see cref="System.Globalization.NumberFormatInfo"/> object. The
<see cref="System.Globalization.NumberFormatInfo"/> object provides culture-specific information 
about this instance. If <paramref name="provider"/> is <see langword="null"/> or a <see cref="System.Globalization.NumberFormatInfo"/> cannot be obtained from <paramref name="provider"/>, this instance is formatted with the
<see cref="System.Globalization.NumberFormatInfo"/> for the current
system culture.</para>
			<para>For a detailed description of formatting, see the <see cref="System.IFormattable"/> interface.
This method is implemented to support the <see cref="System.IFormattable"/>
interface.</para>
		</remarks>
		<seealso topic="cpConFormattingOverview"/>
		<seealso topic="cpConNumericFormatStrings"/>
		<seealso cref="System.Byte.Parse"/>
		<seealso cref="System.String"/>
		<seealso cref="System.Globalization.NumberFormatInfo"/>
		<seealso cref="System.IFormattable"/>
		<seealso cref="System.IFormatProvider"/>
	</doc>
</docs>
