<docs>
	<doc for="IDisposable">
		<summary>
			<para>Defines a method to release allocated unmanaged resources.</para>
		</summary>
		<remarks>
			<para> The garbage collector automatically
      releases the memory allocated to a managed object when that object
      is no longer used, however, it is unpredictable when garbage collection
      will occur. Furthermore, the garbage collector has no knowledge of unmanaged
      resources such as window handles, and open files and streams.</para>
			<para> Use the <see cref="System.IDisposable.Dispose"/> method of this interface to explicitly
   release unmanaged resources in conjunction with the garbage collector. The
   consumer of an object can call
   this method when the object is no longer needed.</para>
			<para>It is a version breaking change to add the <see cref="System.IDisposable"/> interface to an existing class, as it
changes the semantics of the class. </para>
			<para> For a detailed discussion about how this interface and the <see cref="System.Object.Finalize" qualify="true"/>
method are used, see the <see topic="cpconprogrammingessentialsforgarbagecollection"/> and <see topic="cpconimplementingdisposemethod"/> topics.</para>
		</remarks>
		<example>
			<codelink SampleID="System.IDisposable.Dispose Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IDisposable.Dispose">
		<summary>
			<para>Performs application-defined tasks associated with freeing, releasing, or
      resetting unmanaged resources.</para>
		</summary>
		<remarks>
			<para>Use this method to close or release unmanaged resources
      such as files, streams, and handles held by an instance of the class that
      implements this interface. This method is, by convention, used for all tasks associated with freeing resources held by an object, or preparing an object for
      reuse.</para>
			<para> When implementing this method, objects must seek to ensure that all held resources
      are freed by propagating the call through the containment hierarchy. For
      example, if an object A allocates an object B, and object B allocates an object C,
      then A's <see cref="System.IDisposable.Dispose"/> implementation must call <see cref="System.IDisposable.Dispose"/> on
      B, which must in turn call <see cref="System.IDisposable.Dispose"/> on C. Objects
      must also call the <see cref="System.IDisposable.Dispose"/>
      method of their base class if the base class implements <see cref="System.IDisposable"/>. </para>
			<para>If an object's <see cref="System.IDisposable.Dispose"/> method is called more than once, the
   object must ignore all calls after the first one. The object must not throw an exception
   if its <see cref="System.IDisposable.Dispose"/> method is called multiple times. <see cref="System.IDisposable.Dispose"/> can
   throw an exception if an error occurs because a resource has already been freed
   and <see cref="System.IDisposable.Dispose"/> had not been called previously. </para>
			<para> A resource type might use a particular convention to denote an allocated state
   versus a freed state. An example of this is stream classes, which are
   traditionally thought of as open or closed. Classes that have such conventions
   might choose to implement a public method with a customized name, such as Close,
   which calls the <see cref="System.IDisposable.Dispose"/> method. </para>
			<para>Because the <see cref="System.IDisposable.Dispose"/> method must be called explicitly, objects that implement
<see cref="System.IDisposable"/> 
must also implement a finalizer to handle freeing resources when <see cref="System.IDisposable.Dispose"/> is
not called. By default, the garbage collector will automatically call an
object's finalizer prior to reclaiming its memory. However, once the <see cref="System.IDisposable.Dispose"/>
method has been called, it is typically unnecessary for the
garbage collector to call the disposed object's finalizer. To prevent automatic
finalization, <see cref="System.IDisposable.Dispose"/> implementations
can call the <see cref="System.GC.SuppressFinalize" qualify="true"/> method.</para>
			<para>For more information on implementing finalizers, see the <see cref="System.GC"/> class and the
<see cref="System.Object.Finalize" qualify="true"/> method.</para>
		</remarks>
		<example>
			<codelink SampleID="System.IDisposable.Dispose Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
