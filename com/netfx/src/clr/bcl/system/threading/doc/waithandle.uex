<docs>
	<doc for="WaitHandle.WaitHandle">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Threading.WaitHandle"/>
class.</para>
		</summary>
	</doc>
	<doc for="WaitHandle.IDisposable.Dispose">
		<internalonly/>
		<summary>
			<para>Releases all resources used by the <see cref="System.Threading.WaitHandle"/> .</para>
		</summary>
		<remarks>
			<para>Calling <see langword="Dispose"/> allows the resources used by the
<see cref="System.Threading.WaitHandle"/> to be reallocated for other purposes. For more 
   information about <see langword="Dispose"/>, see <see topic="cpconCleaningUpUnmanagedResources"/>.</para>
		</remarks>
	</doc><doc for="WaitHandle.Handle">
		<summary>
			<para> Gets or sets the native operating system handle.</para>
		</summary>
		<value>
			<para>An <see langword="IntPtr"/> 
representing the native operating system handle. The default is the
value of the <see cref="System.Threading.WaitHandle.InvalidHandle"/> property.</para>
		</value>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermissionAttribute">for access to unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/>.</permission>
	</doc>
	<doc for="WaitHandle.Close">
		<summary>
			<para>When overridden in a derived class, releases all 
      resources held by the current <see cref="System.Threading.WaitHandle"/>
      .
      </para>
		</summary>
		<remarks>
			<para>This method is the public version of the <see cref="System.IDisposable.Dispose" qualify="true"/> method implemented to
   support the <see cref="System.IDisposable"/> interface. </para>
			<para>This method releases any unmanaged resources held by the current instance.
   This method can, but is not required to, suppress finalization during garbage
   collection by calling the <see cref="System.GC.SuppressFinalize" qualify="true"/> method. </para>
			<para>Override this method to release resources allocated in derived classes. </para>
			<para>Use this method to release all resources held by an
   instance of <see langword="WaitHandle"/>
   . Once this method is called, references to the
   current instance cause undefined behavior.</para>
		</remarks>
	</doc>
	<doc for="WaitHandle.Dispose">
		<summary>
			<para>When overridden in a derived class, releases the unmanaged resources used by the <see cref="System.Threading.WaitHandle"/>, and
   optionally releases the managed resources.</para>
		</summary>
		<param name="explicitDisposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the <see langword="WaitHandle.Dispose()"/> method and
   the <see langword="Finalize"/> method. <see langword="Dispose()"/> invokes this
   protected method with the <paramref name="explicitDisposing"/> parameter set to
<see langword="true"/>. <see langword="Finalize"/> invokes 
<see langword="Dispose"/> with <paramref name="explicitDisposing"/> set to 
<see langword="false"/>. </para>
			<para>When the <paramref name="explicitDisposing"/>
parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see langword="WaitHandle "/>references. This method invokes the <see langword="Dispose()"/> method
of each referenced object. </para>
			<para><see langword="Dispose"/> can be called multiple times by other objects. When
overriding this method, be careful not to reference objects that have been
previously disposed in an earlier call to <see langword="Dispose"/> or
<see langword="Close"/>.</para>
		</remarks>
	</doc>
	<doc for="WaitHandle.Finalize">
		<summary>
			<para>Releases
      the resources held by the current instance.
      </para>
		</summary>
		<remarks>
			<para>Application code does not call this method; it is automatically invoked
      during garbage collection, unless finalization by the garbage collector has been
      disabled. For more information, see <see cref="System.GC.SuppressFinalize" qualify="true"/>
      and <see cref="System.Object.Finalize" qualify="true"/>. This method overrides <see langword="System.Object.Finalize"/>.</para>
		</remarks>
	</doc>
	<doc for="WaitHandle.WaitOne">
		<overload>
			<para>When overridden in a derived class, blocks the current
      thread until the current <see cref="System.Threading.WaitHandle"/> receives a signal.</para>
		</overload>
		<summary>
			<para>When overridden in a derived class, blocks the current
      thread until the current <see cref="System.Threading.WaitHandle"/> receives a signal, using 32-bit signed
      integer to measure the time interval and specifying whether to exit the synchronization domain before the wait. </para>
		</summary>
		<param name="millisecondsTimeout">The number of milliseconds to wait for the thread to receive a signal. </param>
		<param name="exitContext"><see langword="true"/> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false"/>. </param>
		<returns>
			<para><see langword="true"/> if the current instance receives a signal; otherwise,
<see langword="false"/>.</para>
		</returns>
		<exception cref="System.ObjectDisposedException">The current instance has already been disposed.</exception>
		<remarks>
			<para>The caller of this method blocks indefinitely until the
      current instance receives a signal. Use this method to block until a <see cref="System.Threading.WaitHandle"/> receives a signal
      from another thread, such as is generated when an asynchronous operation
      completes. For more information, see the <see langword="System.IAsyncResult"/> interface.</para>
			<para>Override this method to customize the behavior of
      derived classes.</para>
		</remarks>
	</doc>
	<doc for="WaitHandle.WaitOne1">
		<summary>
			<para>When overridden in a derived class, blocks the current thread until the current instance receives a signal, using
      a <see cref="System.TimeSpan"/>
      to measure the time interval and specifying whether to exit the synchronization
      domain before the wait.</para>
		</summary>
		<param name="timeout">The number of milliseconds to wait for the thread to receive a signal. </param>
		<param name="exitContext"><see langword="true"/> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false"/>. </param>
		<returns>
			<para><see langword="true"/> if the current instance receives a signal; otherwise,
<see langword="false"/>.</para>
		</returns>
		<exception cref="System.ObjectDisposedException">The current instance has already been disposed.</exception>
		<remarks>
			<para> The caller of this method blocks indefinitely until the
      current instance receives a signal. Use this method to block until a <see cref="System.Threading.WaitHandle"/> receives a signal
      from another thread, such as is generated when an asynchronous operation
      completes. For more information, see the <see langword="System.IAsyncResult"/>
      interface.
      </para>
			<para>Override this method to customize the behavior of derived classes. </para>
		</remarks>
	</doc>
	<doc for="WaitHandle.WaitOne2">
		<summary>
			<para>When overridden in a derived class, blocks the current
      thread until the current <see cref="System.Threading.WaitHandle"/>
      receives a signal.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the current instance receives a signal; otherwise,
<see langword="false"/>.</para>
		</returns>
		<exception cref="System.ObjectDisposedException">The current instance has already been disposed.</exception>
		<remarks>
			<para> The caller of this method blocks indefinitely until the
      current instance receives a signal. Use this method to block until a <see cref="System.Threading.WaitHandle"/> receives a signal
      from another thread, such as is generated when an asynchronous operation
      completes. For more information, see the <see langword="System.IAsyncResult"/>
      interface.
      </para>
			<para>Override this method to customize the behavior of derived classes.</para>
		</remarks>
	</doc>
	<doc for="WaitHandle.WaitAny">
		<overload>
			<para>Waits for any of the elements in the specified array to receive a signal.</para>
		</overload>
		<summary>
			<para>Waits for any of the elements in the specified array to
      receive a signal, using a 32-bit signed
      integer to measure the time interval, and specifying whether to exit the
      synchronization domain before the wait.</para>
		</summary>
		<param name="waitHandles">A <see langword="WaitHandle"/> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
		<param name="millisecondsTimeout">The number of milliseconds to wait for the thread to receive a signal.</param>
		<param name="exitContext"><see langword="true"/> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false"/> . </param>
		<returns>
			<para>The array index of the object that satisfied the wait,
      or <see cref="System.Threading.WaitHandle.WaitTimeout"/> if no
      object satisfied the wait and a time interval equivalent to
   <paramref name="millisecondsTimeout"/> has passed.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="waitHandles"/> parameter is <see langword="null"/> or one or more of the objects in the <paramref name="waitHandles "/>array is <see langword="null"/> .</exception>
		<exception cref="System.DuplicateWaitObjectException">The <paramref name="waitHandles "/>array contains elements that are duplicates.</exception>
		<exception cref="System.NotSupportedException">The number of objects in <paramref name="waitHandles"/> is greater than the system permits. </exception>
		<remarks>
			<para>This method returns when the wait terminates, either when any of the handles are signaled or when a time out occurrs. If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects. On some implementations, if more that 64 handles are passed, a <see cref="System.NotSupportedException"/>
is
thrown. If the array contains duplicates, the call will fail.</para>
			<note type="note">
   If a thread exits or aborts without
   explicitly releasing a <see cref="System.Threading.Mutex"/>, and
   that <see langword="Mutex"/> is included in a <see langword="WaitAny"/>
   on another thread, the index returned by <see langword="WaitAny"/> will be
   the correct value plus 128. To guard against this, check the index before using
   it, with C# code such as <c>if (index &gt;= 128) index -= 128;</c> or Visual Basic code such as <c>If index &gt;= 128 Then index -= 128</c> .
</note>
		</remarks>
	</doc>
	<doc for="WaitHandle.WaitAny1">
		<summary>
			<para>Waits for any of the elements in the specified array to receive a signal,
      using a <see cref="System.TimeSpan"/>
      to measure the time interval and specifying whether to exit the
      synchronization domain before the wait.</para>
		</summary>
		<param name="waitHandles">A <see langword="WaitHandle"/> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
		<param name="timeout">The number of milliseconds to wait for the thread to receive a signal.</param>
		<param name="exitContext"><see langword="true"/> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false"/> . </param>
		<returns>
			<para>The array index of the object that satisfied the wait,
      or <see cref="System.Threading.WaitHandle.WaitTimeout"/> if no
      object satisfied the wait and a time interval equivalent to <paramref name="timeout"/> has
      passed.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="waitHandles"/> parameter is <see langword="null"/> or one or more of the objects in the <paramref name="waitHandles "/>array is <see langword="null"/> .</exception>
		<exception cref="System.DuplicateWaitObjectException">The <paramref name="waitHandles "/>array contains elements that are duplicates.</exception>
		<exception cref="System.NotSupportedException">The number of objects in <paramref name="waitHandles"/> is greater than the system permits. </exception>
		<remarks>
			<para>This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurrs. If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects. On some implementations, if more that 64 handles are passed, a <see cref="System.NotSupportedException"/>
is
thrown. If the array contains duplicates, the call will fail.</para>
			<note type="note">
   If a thread exits or aborts without
   explicitly releasing a <see cref="System.Threading.Mutex"/>, and
   that <see langword="Mutex"/> is included in a <see langword="WaitAny"/>
   on another thread, the index returned by <see langword="WaitAny"/> will be
   the correct value plus 128. To guard against this, check the index before using
   it, with C# code such as <c>if (index &gt;= 128) index -= 128;</c> or Visual Basic code such as <c>If index &gt;= 128 Then index -= 128</c>.
</note>
		</remarks>
	</doc>
	<doc for="WaitHandle.WaitAny2">
		<summary>
			<para>Waits for any of the elements in the specified array to receive a signal.</para>
		</summary>
		<param name="waitHandles">A <see langword="WaitHandle"/> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
		<returns>
			<para>The array index of the object that satisfied the wait.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="waitHandles"/> parameter is <see langword="null"/> or one or more of the objects in the <paramref name="waitHandles "/>array is <see langword="null"/> .</exception>
		<exception cref="System.DuplicateWaitObjectException">The <paramref name="waitHandles "/>array contains elements that are duplicates.</exception>
		<exception cref="System.NotSupportedException">The number of objects in <paramref name="waitHandles"/> is greater than the system permits. </exception>
		<remarks>
			<para>This method returns when the wait terminates, either when any of the handles are signaled or a time out occurrs. If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects. On some implementations, if more that 64 handles are passed, a <see cref="System.NotSupportedException"/>
is
thrown. If the array contains duplicates, the call will fail.</para>
			<note type="note">
   If a thread exits or aborts without
   explicitly releasing a <see cref="System.Threading.Mutex"/>, and
   that <see langword="Mutex"/> is included in a <see langword="WaitAny"/>
   on another thread, the index returned by <see langword="WaitAny"/> will be
   the correct value plus 128. To guard against this, check the index before using
   it, with C# code such as <c>if (index &gt;= 128) index -= 128;</c> or Visual Basic code such as <c>If index &gt;= 128 Then index -= 128</c>.
</note>
		</remarks>
	</doc>
	<doc for="WaitHandle.WaitTimeout">
		<summary>
			<para>Indicates that a <see cref="System.Threading.WaitHandle.WaitAny"/> operation timed out before any of the wait handles were signaled. This field is constant.</para>
		</summary>
		<remarks>
			<para>This field is one of the possible return values of
   <see langword="WaitAny"/>.</para>
		</remarks>
	</doc>
	<doc for="WaitHandle.WaitAll">
		<overload>
			<para>Waits for all the elements in the specified array to receive a signal.</para>
		</overload>
		<summary>
			<para>Waits for all the elements in the specified array to receive a signal,
      using an <see cref="System.Int32"/>
      value to measure the time interval and specifying whether to exit the
      synchronization domain before the wait.</para>
		</summary>
		<param name="waitHandles">A <see langword="WaitHandle"/> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
		<param name="millisecondsTimeout">The number of milliseconds to wait for the thread to receive a signal.</param>
		<param name="exitContext"><see langword="true"/> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false"/> . </param>
		<returns>
			<para><see langword="true"/> to exit the synchronization domain before the wait;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="waitHandles"/> parameter is <see langword="null"/> or one or more of the objects in the <paramref name="waitHandles "/>array is <see langword="null"/> .</exception>
		<exception cref="System.DuplicateWaitObjectException">The <paramref name="waitHandles "/>array contains elements that are duplicates.</exception>
		<exception cref="System.NotSupportedException">The number of objects in <paramref name="waitHandles"/> is greater than the system permits. </exception>
		<remarks>
			<para>Returns when the wait terminates, which means either
      when all the handles are signaled or when time-out occurs. On some
      implementations, if more than 64 handles are passed, a <see cref="System.NotSupportedException"/>
      is thrown. If there
      are duplicates in the array, the call will fail.</para>
		</remarks>
	</doc>
	<doc for="WaitHandle.WaitAll1">
		<summary>
			<para>Waits for all the elements in the specified array to receive a signal,
      using a <see cref="System.TimeSpan"/>
      value to measure the time interval and specifying whether to exit the
      synchronization domain before the wait.</para>
		</summary>
		<param name="waitHandles">A <see langword="WaitHandle"/> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
		<param name="timeout">The number of milliseconds to wait for the thread to receive a signal.</param>
		<param name="exitContext"><see langword="true"/> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false"/> . </param>
		<returns>
			<para><see langword="true"/> if the
   method exited the synchronization domain before the wait; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="waitHandles"/> parameter is <see langword="null"/> or one or more of the objects in the <paramref name="waitHandles "/>array is <see langword="null"/> .</exception>
		<exception cref="System.DuplicateWaitObjectException">The <paramref name="waitHandles "/>array contains elements that are duplicates.</exception>
		<exception cref="System.NotSupportedException">The number of objects in <paramref name="waitHandles"/> is greater than the system permits. </exception>
		<remarks>
			<para>Returns when the wait terminates, which means either all the handles are signaled or a time out occurs. On some implementations, if more than 64 handles are passed, a <see cref="System.NotSupportedException"/> is thrown. If the array contains duplicates, the call will fail.</para>
		</remarks>
	</doc>
	<doc for="WaitHandle.WaitAll2">
		<summary>
			<para>Waits for all the elements in the specified array to receive a signal.</para>
		</summary>
		<param name="waitHandles">A <see langword="WaitHandle"/> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
		<returns>
			<para><see langword="true "/>when every element in <paramref name="waitHandles "/>has received
   a signal. If the current thread receives a request to abort before the signals
   are received, this method returns <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="waitHandles"/> parameter is <see langword="null"/> or one or more of the objects in the <paramref name="waitHandles "/>array are <see langword="null"/> .</exception>
		<exception cref="System.DuplicateWaitObjectException">The <paramref name="waitHandles "/>array contains elements that are duplicates.</exception>
		<exception cref="System.NotSupportedException">The number of objects in <paramref name="waitHandles"/> is greater than the system permits. </exception>
		<remarks>
			<para>Returns when the wait terminates, which means either all the handles are signaled or a time-out occurs. On some implementations, if more than 64 handles are passed, a <see cref="System.NotSupportedException"/> is thrown. If the array contains duplicates, the call will fail.</para>
		</remarks>
	</doc>
	<doc for="WaitHandle.InvalidHandle">
		<summary>
			<para> Represents an invalid native operating system handle.
      This field is read-only.</para>
		</summary>
		<remarks>
			<para>Used internally to initialize the <see cref="System.Threading.WaitHandle.Handle"/> property.</para>
			<note type="inheritinfo">
   You can use this value
   to determine whether the <see cref="System.Threading.WaitHandle.Handle"/> property contains a valid
   native operating system handle.
</note>
		</remarks>
	</doc>
	<doc for="WaitHandle">
		<summary>
			<para>Encapsulates operating system-specific objects that wait for exclusive access
      to shared resources.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para>This class is typically used as a base class for
      synchronization objects. Classes derived from <see langword="WaitHandle "/>define
      a signaling mechanism to indicate taking or releasing exclusive access to a
      shared resource, but use the inherited <see langword="WaitHandle"/> methods to
      block while waiting for
      access to shared
      resources.</para>
			<para>Use the static methods of this class to block a thread
      until one or more synchronization
      objects receive a
      signal. </para>
		</remarks>
		<seealso topic="cpconWaitHandle"/>
	</doc>
</docs>
