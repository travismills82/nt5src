<docs>
	<doc for="NativeOverlapped.ReservedCOR1">
		<summary>
			<para>
		  Reserved for COR.
	   </para>
		</summary>
		<remarks>
			<para>
		  COR manages this field.
	   </para>
		</remarks>
	</doc>
	<doc for="NativeOverlapped.ReservedCOR2">
		<summary>
			<para>
		  Reserved for COR.
	   </para>
		</summary>
		<remarks>
			<para>
		  COR manages this field.
	   </para>
		</remarks>
	</doc>
	<doc for="NativeOverlapped.ReservedClasslib">
		<summary>
			<para>
		  Reserved for Class Library data.
	   </para>
		</summary>
		<remarks>
			<para>
		  COR manages this field.
	   </para>
		</remarks>
	</doc>
	<doc for="Overlapped.Overlapped">
		<overload>
			<para>
		  Initializes a new instance of the <see langword="Overlapped"/> class.
	   </para>
		</overload>
		<summary>
			<para>
		  Initializes a new, empty instance of the <see langword="Overlapped"/> class.
	   </para>
		</summary>
	</doc>
	<doc for="Overlapped">
		<summary>
			<para> Used to pack and unpack the managed overlapped class to and from the native overlapped
      class.
      </para>
		</summary>
	</doc>
	<doc for="NativeOverlapped.InternalLow">
		<summary>
			<para>Specifies a system-dependent status. Reserved for operating system use. </para>
		</summary>
	</doc>
	<doc for="NativeOverlapped.InternalHigh">
		<summary>
			<para> Specifies 
      the length of the data transferred. Reserved for operating system
      use. </para>
		</summary>
	</doc>
	<doc for="Overlapped.Overlapped1">
		<summary>
			<para> Initializes a new instance of the <see langword="Overlapped"/> class from the constructor
   parameters.
   </para>
		</summary>
		<param name="offsetLo">The file position at which to start the transfer.</param>
		<param name="offsetHi">The high word of the byte offset at which to start the transfer.</param>
		<param name="hEvent">The handle to an event.</param>
		<param name="ar">The results of an asynchronous operation on an asynchronous delegate.</param>
	</doc>
	<doc for="Overlapped.AsyncResult">
		<summary>
			<para>Gets or sets the results of an asynchronous operation on an asynchronous 
      delegate.</para>
		</summary>
		<value>
			<para> The <see cref="System.IAsyncResult"/> interface.
   </para>
		</value>
	</doc>
	<doc for="Overlapped.OffsetLow">
		<summary>
			<para>Gets or sets the file position at which to start the transfer.</para>
		</summary>
		<value>
			<para>An <see langword="Int32 "/>value representing the file position.</para>
		</value>
	</doc>
	<doc for="Overlapped.OffsetHigh">
		<summary>
			<para>Gets or sets the high word of the byte offset at 
      which to start the transfer. </para>
		</summary>
		<value>
			<para>An <see langword="Int32"/> value 
   representing the high word of
   the byte offset.</para>
		</value>
	</doc>
	<doc for="Overlapped.EventHandle">
		<summary>
			<para> 
      Gets or sets the handle to an event.</para>
		</summary>
		<value>
			<para>An <see langword="Int32"/> value representing the event handle.</para>
		</value>
	</doc>
	<doc for="Overlapped.Pack">
		<summary>
			<para> Packs a managed overlapped class into a <see cref="System.Threading.NativeOverlapped"/> value type.
   </para>
		</summary>
		<param name="iocb"></param>
		<returns>
			<para> An unmanaged pointer. This unmanaged pointer can be passed to the operating
      system in overlapped I/O operations. The <see cref="System.Threading.NativeOverlapped"/> value type is fixed in
      physical memory until <see cref="System.Threading.Overlapped.Unpack"/> is called.
      </para>
		</returns>
	</doc>
	<doc for="Overlapped.Unpack">
		<summary>
			<para> Unpacks an unmanaged <see cref="System.Threading.NativeOverlapped"/>
value type into a managed overlapped class.</para>
		</summary>
		<param name="nativeOverlappedPtr"></param>
		<returns>
			<para> The <see cref="System.Threading.NativeOverlapped"/> value type is not freed from physical memory 
   until you call <see cref="System.Threading.Overlapped.Free"/>
   .
   </para>
		</returns>
	</doc>
	<doc for="Overlapped.Free">
		<summary>
			<para>Frees the unmanaged memory associated with a native
      overlapped structure, allocated by <see cref="System.Threading.Overlapped.Pack"/>
      .</para>
		</summary>
		<param name="nativeOverlappedPtr"></param>
		<remarks>
			<para>You must call <see langword="Free"/> only once on every 
<see langword="NativeOverlapped*"/> you receive from <see cref="System.Threading.Overlapped.Pack"/>. If you don't call <see langword="Free"/>, 
   you will leak memory. If call <see langword="Free"/>
   more than once, memory will be corrupted.</para>
		</remarks>
	</doc>
	<doc for="Overlapped.UnsafePack">
		<summary>
			<para>Unpacks an unmanaged <see cref="System.Threading.NativeOverlapped"/> value type into an unmanaged overlapped class.</para>
		</summary>
		<param name="iocb"></param>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">to provide evidence and view and modify policy. Associated enumerations: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" qualify="true"/>, <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/>.</permission>
	</doc><doc for="NativeOverlapped">
		<summary>
			<para>Provides an explicit layout that is visible from unmanaged code and that will have the
 same layout as the Win32 OVERLAPPED structure with additional reserved fields at
 the end.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Threading.NativeOverlapped"/> .NET Framework value type represents an unmanaged version of the Win32
 OVERLAPPED structure. The layout of this structure must be identical to
 OVERLAPPED. Four additional DWORDs are reserved at the end.</para>
		</remarks>
	</doc>
	<doc for="NativeOverlapped.EventHandle">
		<summary>
			<para>Specifies the handle to an event set to the signaled state when the operation is
 complete. The calling process must set this member either to zero or to a valid
 event handle before calling any overlapped functions. </para>
		</summary>
	</doc>
	<doc for="NativeOverlapped.OffsetHigh">
		<summary>
			<para> 
 Specifies the high word of the byte offset
 at which to start the transfer.</para>
		</summary>
		<remarks>
			<para>This member is ignored when reading from or writing to named pipes and communications 
 devices and in those cases its value should be zero.</para>
		</remarks>
	</doc>
	<doc for="NativeOverlapped.OffsetLow">
		<summary>
			<para>Specifies a file position at which to start the
 transfer.</para>
		</summary>
		<remarks>
			<para>The file position is a byte offset from the start of the
 file. The calling process sets this member before calling the OR function. This member
 is ignored when reading from or writing to named pipes and communications devices, and in those
 cases its value should be zero.</para>
		</remarks>
	</doc>
</docs>
