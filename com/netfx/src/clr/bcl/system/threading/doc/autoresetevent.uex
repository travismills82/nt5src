<docs>
	<doc for="AutoResetEvent.Reset">
		<summary>
			<para> Sets the state of the specified event to
      nonsignaled.</para>
		</summary>
		<returns>
			<para><see langword="true "/>if the function succeeds; otherwise,
<see langword="false"/>. </para>
		</returns>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconAutoResetEvent"/>
	</doc>
	<doc for="AutoResetEvent.AutoResetEvent">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Threading.AutoResetEvent"/> class with a Boolean value indicating whether to set the initial
   state to signaled.</para>
		</summary>
		<param name="initialState"><see langword="true"/> to set the initial state to signaled; <see langword="false"/> to set the initial state to nonsignaled.</param>
		<example>
			<codelink SampleID="System.Threading.AutoResetEvent" SnippetID="1"/>
		</example>
		<seealso cref="System.Threading.WaitHandle"/>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconAutoResetEvent"/>
	</doc>
	<doc for="AutoResetEvent.Set">
		<summary>
			<para> Sets the state of the specified event to signaled.</para>
		</summary>
		<returns>
			<para><see langword="true "/>if the function succeeds; otherwise,
<see langword="false"/>. </para>
		</returns>
		<example>
			<codelink SampleID="System.Threading.AutoResetEvent" SnippetID="1"/>
		</example>
		<seealso cref="System.Threading.WaitHandle"/>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconAutoResetEvent"/>
	</doc>
	<doc for="AutoResetEvent">
		<summary>
			<para> Notifies a waiting thread that an event has occurred. This class cannot be inherited.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para><see langword="AutoResetEvent"/>
allows threads to communicate with each other by signaling. Typically, this
communication concerns a resource to which threads need exclusive
access.</para>
			<para> A thread waits for a signal by calling <see cref="System.Threading.WaitHandle.WaitOne"/> on the
<see langword="AutoResetEvent"/>. If the <see langword="AutoResetEvent"/> is in
the nonsignaled state, the thread blocks, waiting for the thread that currently
controls the resource to signal that the resource is available by calling
<see cref="System.Threading.AutoResetEvent.Set"/> 
.</para>
			<para> Calling <see langword="Set"/> signals
<see langword="AutoResetEvent"/> to release a waiting thread. 
<see langword="AutoResetEvent"/> 
remains signaled until a
single waiting thread is released, and then automatically returns to the nonsignaled state.
If no threads are waiting, the state remains signaled
indefinitely.</para>
			<para>You can control the initial state of an
<see langword="AutoResetEvent"/> by passing a Boolean value to the constructor, 
<see langword="true"/> if the initial state is signaled and 
<see langword="false"/> otherwise. </para>
			<para><see langword="AutoResetEvent"/> can also be used with the
<see langword="static"/>
				<see cref="System.Threading.WaitHandle.WaitAll"/> and <see cref="System.Threading.WaitHandle.WaitAny"/>
methods.</para>
			<para>For more information about thread synchronization mechanisms, see <see topic="cpconautoresetevent"/> in the
conceptual documentation.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Threading.AutoResetEvent" SnippetID="1"/>
		</example>
		<seealso cref="System.Threading.WaitHandle"/>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconAutoResetEvent"/>
	</doc>
</docs>
