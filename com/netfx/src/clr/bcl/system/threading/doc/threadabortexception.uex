<docs>
	<doc for="ThreadAbortException.ExceptionState">
		<summary>
			<para> Gets an object that contains application-specific
      information related to the thread abort.
      </para>
		</summary>
		<value>
			<para>An object containing application-specific information.</para>
		</value>
		<remarks>
			<para> The object returned by this property is specified
      through the <paramref name="stateInfo"/> parameter of the <see cref="System.Threading.Thread.Abort"/> method. The exact content and usage of
      this object is application defined; it is typically used to convey
      information that is meaningful to the thread being aborted.
      </para>
		</remarks>
		<seealso cref="System.Threading.Thread.CurrentThread"/>
		<seealso cref="System.Threading.Thread.Abort" qualify="true"/>
		<seealso topic="cpconDestroyingThreads"/>
	</doc>
	<doc for="ThreadAbortException">
		<summary>
			<para> The exception that is thrown when a call is made to the
   <see cref="System.Threading.Thread.Abort"/> method. This
      class cannot be inherited.
      </para>
		</summary>
		<remarks>
			<para> When a call is made to the <see cref="System.Threading.Thread.Abort"/> method
   to destroy a thread, the common language runtime throws a <see cref="System.Threading.ThreadAbortException"/>. <see cref="System.Threading.ThreadAbortException"/> is a special
   exception that can be caught, but it will automatically be raised again at the
   end of the <see langword="catch"/> block. When this
   exception is raised, the runtime executes all the <see langword="finally "/>blocks before
   killing the thread. Since the thread can do an unbounded computation in the
<see langword="finally"/> blocks, 
   you must call the
<see cref="System.Threading.Thread.Join"/> method to guarantee that the thread has 
   died. <see cref="System.Threading.Thread.Join"/> is a blocking call that does not return
   until the thread actually stops executing.</para>
			<para><see cref="System.Threading.ThreadAbortException"/> uses the HRESULT
COR_E_THREADABORTED, which has the value 0x80131530.</para>
		</remarks>
		<example>
			<para>The following example demonstrates aborting a thread. The thread that
      receives the <see langword="ThreadAbortException"/> uses the <see cref="System.Threading.Thread.ResetAbort"/> method to cancel the abort request and
      continue executing.</para>
			<codelink SampleID="ThreadAbEx" SnippetID="1"/>
			<para>This code produces the following output:</para>
			<code>
Thread - working.
Main - aborting my thread.
Thread - caught ThreadAbortException - resetting.
Exception message: Thread was being aborted.
Thread - still alive and working.
Thread - finished working.
Main ending.
</code>
		</example>
		<seealso cref="System.Threading.Thread"/>
		<seealso cref="System.Threading.Thread.Abort" qualify="true"/>
		<seealso topic="cpconDestroyingThreads"/>
	</doc>
</docs>
