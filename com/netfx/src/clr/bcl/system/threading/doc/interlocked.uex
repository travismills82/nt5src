<docs>
	<doc for="Interlocked.Decrement">
		<overload>
			<para>Decrements a specified variable and stores the result, as an atomic operation.</para>
		</overload>
		<summary>
			<para> Decrements a specified variable and stores the result, as an atomic operation.
      </para>
		</summary>
		<param name="location">The variable whose value is to be decremented. </param>
		<returns>
			<para>
      The decremented value.
      </para>
		</returns>
		<remarks>
			<para>This method handles an overflow condition by wrapping: If
      <paramref name="location"/> = <see cref="System.Int32.MinValue" qualify="true"/>, <paramref name="location"/> - 1 = <see cref="System.Int32.MaxValue" qualify="true"/>. No
      exception is thrown.</para>
		</remarks>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconInterlocked"/>
	</doc>
	<doc for="Interlocked.Increment1">
		<summary>
			<para> Increments a specified variable and stores the result,
      as an atomic operation.
      </para>
		</summary>
		<param name="location">The variable whose value is to be incremented. </param>
		<returns>
			<para> The incremented value.
      </para>
		</returns>
		<remarks>
			<para>This method handles an overflow condition by wrapping: if <paramref name="location"/> = 
<see cref="System.Int64.MaxValue" qualify="true"/> , <paramref name="location"/> + 1 = <see cref="System.Int64.MinValue" qualify="true"/> . No 
   exception is thrown.</para>
			<para>The 64-bit versions of <see langword="Increment"/> and <see cref="System.Threading.Interlocked.Decrement"/> are truly atomic only on systems where a
<see cref="System.IntPtr" qualify="true"/> is 64 
bits long. On other systems, these methods are atomic with respect to each
other, but not with respect to other means of accessing the data.</para>
		</remarks>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconInterlocked"/>
	</doc>
	<doc for="Interlocked.Decrement1">
		<summary>
			<para> Decrements the specified variable and stores the result, as an atomic operation.
      </para>
		</summary>
		<param name="location">The variable whose value is to be decremented. </param>
		<returns>
			<para> The
      decremented value.
      </para>
		</returns>
		<remarks>
			<para>This method handles an overflow condition by wrapping: if
      <paramref name="location"/> = <see cref="System.Int64.MinValue" qualify="true"/>, <paramref name="location"/> - 1 = <see cref="System.Int64.MaxValue" qualify="true"/>. No
      exception is thrown.</para>
			<para> The 64-bit versions of <see cref="System.Threading.Interlocked.Increment"/> and <see langword="Decrement "/>are truly
   atomic only on systems where a <see cref="System.IntPtr" qualify="true"/> is 64 bits long. On other
   systems, these methods are atomic with respect to each other, but not with
   respect to other means of accessing the data.</para>
		</remarks>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconInterlocked"/>
	</doc>
	<doc for="Interlocked.Exchange">
		<overload>
			<para> Sets a variable to a specified value as an atomic operation.
      </para>
		</overload>
		<summary>
			<para> Sets a 32-bit signed integer to a specified value as an atomic
      operation, and returns the original value.
      </para>
		</summary>
		<param name="location1">The variable to set to the specified value. </param>
		<param name="value">The value to which the <paramref name="location1"/> parameter is set. </param>
		<returns>
			<para> The
      original value of <paramref name="location1"/>.</para>
		</returns>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconInterlocked"/>
	</doc>
	<doc for="Interlocked.Exchange1">
		<overload>
			<para> Sets a variable to a specified value as an atomic operation.
      </para>
		</overload>
		<summary>
			<para> Sets a single-precision floating point number to a specified value as an atomic
      operation, and returns the original value.
      </para>
		</summary>
		<param name="location1">The variable to set to the specified value. </param>
		<param name="value">The value to which the <paramref name="location1"/> parameter is set. </param>
		<returns>
			<para> The original value of <paramref name="location1"/>.</para>
		</returns>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconInterlocked"/>
	</doc>
	<doc for="Interlocked.CompareExchange1">
		<summary>
			<para>Compares two single-precision floating point numbers for equality and,
      if they are equal, replaces one of the values.</para>
		</summary>
		<param name="location1">The destination value that will be compared with the value of the <paramref name="comparand"/> parameter and will possibly be replaced. </param>
		<param name="value">The value that will replace the destination value if the comparison results in equality. </param>
		<param name="comparand">The value to be compared to the <paramref name="location1"/> parameter.</param>
		<returns>
			<para> The original destination value.
      </para>
		</returns>
		<remarks>
			<para> If <paramref name="comparand"/> and <paramref name="location1"/>
are equal, then<paramref name="value"/> is stored in the destination. Otherwise,
no operation is performed. The compare and exchange operations are performed in
an atomic operation.</para>
		</remarks>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconInterlocked"/>
	</doc>
	<doc for="Interlocked.Exchange2">
		<summary>
			<para> Sets an object to a specified value as an
      atomic operation, and returns a reference to the original object.
      </para>
		</summary>
		<param name="location1">The variable to set to the specified. </param>
		<param name="value">The value to which the <paramref name="location1"/> parameter is set. </param>
		<returns>
			<para> The original value of <paramref name="location1"/> .
   </para>
		</returns>
		<exception cref="System.ArgumentNullException">The address of <paramref name="location1"/> is <see langword="null"/>.</exception>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconInterlocked"/>
	</doc>
	<doc for="Interlocked.CompareExchange2">
		<summary>
			<para> Compares two objects for equality and,
      if they are equal, replaces one of the objects.</para>
		</summary>
		<param name="location1">The destination object that will be compared with the value of the <paramref name="comparand"/> parameter and will possibly be replaced. </param>
		<param name="value">The object that will replace the destination object if the comparison results in equality.</param>
		<param name="comparand">The object to be compared to the <paramref name="location1"/> parameter. </param>
		<returns>
			<para> The original value of the <paramref name="location1"/> parameter.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException">The address of <paramref name="location1"/> is <see langword="null"/>.</exception>
		<remarks>
			<para> If <paramref name="comparand "/>and <paramref name="location1 "/>
are equal, then<paramref name="value"/> is stored in the destination. Otherwise, no
operation is performed. The compare and exchange operations are performed as an
atomic operation.</para>
		</remarks>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconInterlocked"/>
	</doc>
	<doc for="Interlocked">
		<summary>
			<para> Provides atomic operations for variables that are shared by
      multiple threads.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para> The methods of this class protect against errors that 
      can occur when the scheduler switches contexts
      while a thread is updating a variable that can be accessed by other threads,
      or when two threads are executing concurrently on separate processors. The
      members of this class do not throw exceptions.</para>
			<para>The <see cref="System.Threading.Interlocked.Increment"/> and <see cref="System.Threading.Interlocked.Decrement"/> methods increment or decrement a 
   variable and store the resulting value in a single operation. On most computers,
   incrementing a variable is not an atomic operation, requiring the following
   steps:
   
</para>
			<list type="number"><item>
					<term>Load a value from an instance variable into a register.</term>
				</item>
				<item>
					<term>Increment or decrement the value.</term>
				</item>
				<item>
					<term>Store the value in the instance variable.</term>
				</item>
			</list>
			<para>If you do not use <see cref="System.Threading.Interlocked.Increment"/> and <see cref="System.Threading.Interlocked.Decrement"/>, a thread can be preempted after 
executing the first two steps. Another thread can then execute all three steps.
When the first thread resumes execution, it overwrites the value in the instance
variable, and the effect of the increment or decrement performed by the second
thread is lost.</para>
			<para>The <see cref="System.Threading.Interlocked.Exchange"/> method atomically exchanges the values of the
specified variables. The <see cref="System.Threading.Interlocked.CompareExchange"/> method combines two operations:
comparing two values and storing a third value in one
of the variables, based on the outcome of the comparison. The compare and
exchange operations are performed as an atomic operation.</para>
		</remarks>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconInterlocked"/>
	</doc>
	<doc for="Interlocked.CompareExchange">
		<overload>
			<para> Compares two values for equality and, if they are equal, replaces one of
      the values.
      </para>
		</overload>
		<summary>
			<para> Compares two 32-bit signed integers for equality and, if they are
      equal, replaces one of the values.</para>
		</summary>
		<param name="location1"><para>The destination value that will be compared with the value of the <paramref name="comparand"/> parameter and will possibly be replaced.</para></param>
		<param name="value">The value that will replace the destination value if the comparison results in equality. </param>
		<param name="comparand">The value to be compared to the <paramref name="location1"/> parameter. </param>
		<returns>
			<para> The original value of the <paramref name="location1"/> parameter.
   </para>
		</returns>
		<remarks>
			<para> If <paramref name="comparand "/>and <paramref name="location1 "/>
are equal, then<paramref name="value"/> is stored in the destination. Otherwise,
no operation is performed. The compare and exchange operations are performed as
an atomic operation.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Threading.Interlocked CompareExchange0" SnippetID="1"/>
		</example>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconInterlocked"/>
	</doc>
	<doc for="Interlocked.Increment">
		<overload>
			<para>Increments a specified variable and stores the result, as an atomic operation. </para>
		</overload>
		<summary>
			<para> Increments a specified variable and stores the result,
      as an atomic operation.
      </para>
		</summary>
		<param name="location">The variable whose value is to be incremented. </param>
		<returns>
			<para> The incremented value.
      </para>
		</returns>
		<remarks>
			<para>This method handles an overflow condition by wrapping:
      if <paramref name="location"/>
      = <see cref="System.Int32.MaxValue" qualify="true"/> ,
   <paramref name="location"/> + 1 = <see cref="System.Int32.MinValue" qualify="true"/> . No exception is thrown.</para>
		</remarks>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconInterlocked"/>
	</doc>
</docs>
