<docs>
	<doc for="IObjectHandle">
		<summary>
			<para>Defines the interface for unwrapping marshal by value objects from
      indirection.</para>
		</summary>
		<remarks>
			<para> Marshal by value objects can be returned through an
      indirection, allowing the caller to control when the object is loaded into their
      domain. The caller can unwrap the object from the indirection through this
      interface. </para>
			<para>The class implementing the <see cref="System.Runtime.Remoting.IObjectHandle"/> interface can be used to pass an object
   (in a wrapped state) between multiple application domains without loading the
   metadata for the wrapped object in each <see cref="System.AppDomain"/>
   through which the
<see cref="System.Runtime.Remoting.IObjectHandle"/> travels. Thus, the <see cref="System.Runtime.Remoting.IObjectHandle"/> class gives the caller control of 
   when the <see cref="System.Type"/> of
   the remote object is loaded into their domain.</para>
		</remarks>
	</doc><doc for="IObjectHandle.Unwrap">
		<summary>
			<para>Unwraps the object.</para>
		</summary>
		<returns>
			<para>The unwrapped object.</para>
		</returns>
		<remarks>
			<note type="cnotes">
      An <see cref="System.Runtime.Remoting.ObjectHandle"/> is a remoted <see cref="System.MarshalByRefObject"/> and
      is tracked by the remoting lifetime service. A call to the current method might fail
      if the lifetime lease on the <see cref="System.Runtime.Remoting.ObjectHandle"/> expires.
      
   </note>
		</remarks>
	</doc></docs>
