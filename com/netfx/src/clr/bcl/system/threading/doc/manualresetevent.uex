<docs>
	<doc for="ManualResetEvent.ManualResetEvent">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Threading.ManualResetEvent"/> class with a Boolean value indicating whether
   to set the initial state to signaled.
   </para>
		</summary>
		<param name="initialState"><see langword="true"/> to set the initial state signaled; <see langword="false"/> to set the initial state to nonsignaled. </param>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconManualResetEvent"/>
	</doc>
	<doc for="ManualResetEvent.Reset">
		<summary>
			<para> Sets the state of the specified event to nonsignaled.
      </para>
		</summary>
		<returns>
			<para><see langword="true"/> if the function succeeds;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconManualResetEvent"/>
	</doc>
	<doc for="ManualResetEvent.Set">
		<summary>
			<para> Sets the state of the specified event to signaled.
      </para>
		</summary>
		<returns>
			<para><see langword="true"/> if the function succeeds; otherwise,
<see langword="false"/>.
   </para>
		</returns>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconManualResetEvent"/>
	</doc>
	<doc for="ManualResetEvent">
		<summary>
			<para> Notifies one
      or more waiting threads that an event has occurred. This
      class cannot be inherited.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para><see cref="System.Threading.ManualResetEvent"/>
allows threads to
communicate with each other by signaling. Typically, this communication concerns a task which
one thread must complete before other threads can proceed.</para>
			<para>When a thread begins an activity that must complete
   before other threads proceed, it calls <see cref="System.Threading.ManualResetEvent.Reset"/> to put <see langword="ManualResetEvent"/> in
   the nonsignaled state. This thread can be thought of as controlling the
<see langword="ManualResetEvent"/>. Threads that call <see cref="System.Threading.WaitHandle.WaitOne"/> on the 
<see langword="ManualResetEvent"/> will block, awaiting the signal. When the 
   controlling thread completes the activity, it calls <see cref="System.Threading.ManualResetEvent.Set"/>
   
   to signal that the
   waiting threads can proceed. All waiting threads are released.</para>
			<para>Once it has been signaled,
<see langword="ManualResetEvent"/> remains signaled until it is manually reset. 
   That is, calls to <see langword="WaitOne"/>
   
   return immediately.</para>
			<para>You can control the initial state of a
<see langword="ManualResetEvent"/> by passing a Boolean value to the constructor, 
<see langword="true"/> if the initial state is signaled and 
<see langword="false"/> 
otherwise.</para>
			<para><see langword="ManualResetEvent"/> can also be used with
the <see langword="static"/>
				<see cref="System.Threading.WaitHandle.WaitAll"/> and <see cref="System.Threading.WaitHandle.WaitAny"/>
methods.</para>
			<para>For more information about thread synchronization mechanisms, see <see topic="cpconmanualresetevent"/> in the conceptual documentation.</para>
		</remarks>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconManualResetEvent"/>
	</doc>
</docs>
