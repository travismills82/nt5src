<docs>
	<doc for="Mutex.Mutex">
		<overload>
			<para> Initializes a new instance of the <see cref="System.Threading.Mutex"/> class.</para>
		</overload>
		<summary>
			<para> Initializes a new instance of the <see cref="System.Threading.Mutex"/> class with a Boolean value indicating whether the calling thread should have initial ownership
   of the mutex, a string that is the name of the mutex, and a Boolean value that, when the
   method returns, will indicate whether the calling thread was granted initial ownership of the
   mutex.</para>
		</summary>
		<param name="initiallyOwned"><see langword="true"/> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false"/>. </param>
		<param name="name">The name of the <see cref="System.Threading.Mutex"/>. If the value is <see langword="null"/>, the <see cref="System.Threading.Mutex"/> is unnamed. </param>
		<param name="createdNew">When this method returns, contains a Boolean that is <see langword="true"/> if the calling thread was granted initial ownership of the mutex; otherwise, <see langword="false"/>. This parameter is passed uninitialized. </param>
		<remarks>
			<para>If <paramref name="name"/> is not <see langword="null"/> and <paramref name="initiallyOwned"/> is
<see langword="true"/>, then the application must ensure that a 
   mutex that has the same name and is owned by
   the calling thread does not already exist. If the mutex is being used for
   cross-process communication, you should set <paramref name="initiallyOwned"/> to
<see langword="false"/>, or use the <see topic="frlrfSystemThreadingMutexClassctorTopic4" title="Mutex(Boolean, String, Boolean)"/> constructor. 
   Otherwise, it will be difficult to determine which process has initial
   ownership. </para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermissionAttribute">for calling unmanaged code to create a named mutex. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/>. </permission>
		<example>
			<codelink SampleID="System.Threading.Mutex 3Arg Ctor Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconMutex"/>
	</doc>
	<doc for="Mutex.Mutex1">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Threading.Mutex"/> class with a Boolean value indicating whether the calling thread should have
   initial ownership of the mutex, and a string that is the name of the
   mutex.</para>
		</summary>
		<param name="initiallyOwned"><see langword="true"/> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false"/>. </param>
		<param name="name">The name of the <see cref="System.Threading.Mutex"/>. If the value is <see langword="null"/>, the <see cref="System.Threading.Mutex"/> is unnamed. </param>
		<remarks>
			<para>If <paramref name="name"/> is not <see langword="null"/> and <paramref name="initiallyOwned"/> is
<see langword="true"/>, then the application must ensure that a 
   mutex that has the same name and is owned by
   the calling thread does not already exist. If the mutex is being used for
   cross-process communication, you should set <paramref name="initiallyOwned"/> to
<see langword="false"/>, or use the <see topic="frlrfSystemThreadingMutexClassctorTopic4" title="Mutex(Boolean, String, Boolean)"/> constructor. 
   Otherwise, it will be difficult to determine which process has initial
   ownership. </para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermissionAttribute">for calling unmanaged code to create a named mutex. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/>. </permission>
		<example>
			<codelink SampleID="System.Threading.Mutex 2Arg Ctor Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconMutex"/>
	</doc>
	<doc for="Mutex.Mutex2">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Threading.Mutex"/> class with a Boolean value indicating whether the
   calling thread should have initial ownership of the mutex.
   </para>
		</summary>
		<param name="initiallyOwned"><see langword="true"/> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false"/>.</param>
		<example>
			<codelink SampleID="System.Threading.Mutex 1Arg Ctor Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconMutex"/>
	</doc>
	<doc for="Mutex.Mutex3">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Threading.Mutex"/> class with default properties.</para>
		</summary>
		<example>
			<codelink SampleID="System.Threading.Mutex Default Ctor Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconMutex"/>
	</doc>
	<doc for="Mutex.ReleaseMutex">
		<summary>
			<para> Releases the <see cref="System.Threading.Mutex"/> once.
   </para>
		</summary>
		<exception cref="System.ApplicationException">The calling thread does not own the mutex.</exception>
		<remarks>
			<para>A thread that owns a mutex can specify the same mutex in
      repeated wait function calls without blocking its execution. The number of calls
      is kept by the runtime. The thread must call <see cref="System.Threading.Mutex.ReleaseMutex"/> the same number of times to release
      ownership of the mutex. If a thread terminates normally while owning a mutex,
      the state of the mutex is set to signaled and the next waiting thread gets
      ownership. If no
      one owns the mutex, the state of the mutex is signaled.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Threading.Mutex Default Ctor Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconMutex"/>
	</doc>
	<doc for="Mutex">
		<summary>
			<para>A synchronization primitive than can also be used for interprocess
      synchronization.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para> When two or more threads need to access
      a shared resource at the same time, the system needs a synchronization
      mechanism to ensure that only one thread at a time uses the resource. <see cref="System.Threading.Mutex"/>
      is
      a synchronization primitive that grants exclusive access to the shared resource to only one thread. If a
      thread acquires a mutex, the second thread
      that wants to acquire that mutex is suspended until the first thread releases the mutex.</para>
			<para>You can use <see cref="System.Threading.WaitHandle.WaitOne" qualify="true"/> to request ownership of a mutex.
   The thread that owns a mutex can request the same mutex in repeated calls
   to <see langword="Wait"/> without blocking its execution. However, the thread
   must call the <see cref="System.Threading.Mutex.ReleaseMutex"/> method the same number of times to release
   ownership of the mutex. If a thread terminates normally
   while owning a mutex, the state of the mutex is set to signaled
   and the next waiting thread gets ownership. If no one owns the mutex, the state of
   the mutex is signaled.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Threading.Mutex Default Ctor Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Threading.WaitHandle"/>
		<seealso cref="System.Threading.Thread"/>
		<seealso topic="cpconThreading"/>
		<seealso topic="cpconMutex"/>
		<seealso topic="cpconManagedUnmanagedThreading"/>
	</doc>
</docs>
