<docs>
    <doc for="JulianCalendar">
        <summary>
            <para>Represents the Julian calendar.</para>
        </summary>
        <remarks>
            <para>In 45 B.C., Julius Caesar ordered a calendar reform, which resulted in the calendar called the
 Julian calendar. The Julian calendar is the predecessor of the Gregorian calendar.
 </para>
            <para> The <see cref="System.Globalization.JulianCalendar" /> class recognizes only the current era.</para>
            <para>Unlike the Gregorian calendar, the Julian calendar defines a leap year as a
 year that is evenly divisible by four with no exceptions; therefore, the
 calendar is inaccurate by one day every 128 years. A common year has 365 days
 and a leap year has 366 days.</para>
            <para>Like the Gregorian calendar, the Julian calendar has 12 months with 28 to 31 days each:
 January (31 days), February (28 or 29 days), March (31 days), April (30 days),
 May (31 days), June (30 days), July (31 days), August (31 days),
 September (30 days), October (31 days), November (30 days), and December (31 days).
 February has 29 days during leap years and 28 during common years.</para>
            <para>The date January 1, 2001 A.D. in the Gregorian calendar is equivalent to
 the 19th day of December in the year 2000 A.D. in the Julian calendar.</para>
            <para>Currently, the <see cref="System.Globalization.JulianCalendar" /> is not used
 by any of the cultures supported by the <see cref="System.Globalization.CultureInfo" /> class;
 therefore, this class can only be used to calculate dates in the Julian calendar.</para>
            <para>Each <see cref="System.Globalization.CultureInfo" /> supports a set of calendars.
 The <see cref="System.Globalization.CultureInfo.Calendar" /> property returns the default calendar for the culture, and
 the <see cref="System.Globalization.CultureInfo.OptionalCalendars" /> property returns an array containing all the calendars supported by the culture.
 To change the calendar used by a <see cref="System.Globalization.CultureInfo" />,
 set the <see cref="System.Globalization.DateTimeFormatInfo.Calendar" /> property of <see cref="System.Globalization.CultureInfo.DateTimeFormat" qualify="true" />
 to a new <see cref="System.Globalization.Calendar" />.</para>
        </remarks>
        <seealso cref="System.Globalization.Calendar" />
        <seealso cref="System.Globalization.GregorianCalendar" />
        <seealso cref="System.Globalization.CultureInfo.Calendar" />
        <seealso cref="System.Globalization.CultureInfo.OptionalCalendars" />
    </doc><doc for="JulianCalendar.JulianEra">
        <summary>
            <para>Represents the current era. This field is constant.</para>
        </summary>
        <remarks>
            <para>The <see cref="System.Globalization.JulianCalendar" /> class recognizes only the current era.
   This field always returns 1.</para>
        </remarks>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.JulianCalendar.Eras" />
    </doc><doc for="JulianCalendar.JulianCalendar">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Globalization.JulianCalendar" /> class.</para>
        </summary>
    </doc><doc for="JulianCalendar.AddMonths">
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is the specified number of months
   away from the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to which to add months.</param>
        <param name="months">The number of months to add.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that results from adding the specified number of months to the specified <see cref="System.DateTime" />.</para>
        </returns>
        <exception cref="System.ArgumentException">The resulting <see cref="System.DateTime" /> is outside the supported range.</exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="months" /> is less than -120000.</para><para>-or-</para>
            <para><paramref name="months" /> is greater than 120000.</para></exception>
<remarks>
            <para>The day part of the resulting <see cref="System.DateTime" /> is affected if the resulting day is not a valid day in the resulting month of the resulting year;
   it is changed to the last valid day in the resulting month of the resulting year.
   The year part of the resulting <see cref="System.DateTime" /> is affected if the resulting month is outside the year of the specified <see cref="System.DateTime" />.
   This implementation only supports the current era; therefore, <see cref="System.ArgumentException" /> is thrown if the resulting year is outside the era of the specified <see cref="System.DateTime" />.
   The time-of-day part of the resulting <see cref="System.DateTime" /> remains the same as the specified <see cref="System.DateTime" />.</para>
            <para>For example, if the specified month is October, which has 31 days,
   the specified day is the 31st day of that month,
   and the value of the <paramref name="months" /> parameter is 6,
   the resulting year is one more than the specified year,
   the resulting month is April,
   and the resulting day is the 30th day, which is the last day in April.</para>
            <para>If the value of the <paramref name="months" /> parameter is negative, the resulting <see cref="System.DateTime" /> is earlier than the specified <see cref="System.DateTime" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.JulianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.JulianCalendar.AddYears" />
        <seealso cref="System.Globalization.Calendar.AddWeeks" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddDays" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddHours" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddMinutes" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddSeconds" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddMilliseconds" qualify="true" />
    </doc><doc for="JulianCalendar.AddYears">
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is the specified number of years away from the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to which to add years.</param>
        <param name="years">The number of years to add.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that results from adding the specified number of years to the specified <see cref="System.DateTime" />.</para>
        </returns>
        <exception cref="System.ArgumentException">The resulting <see cref="System.DateTime" /> is outside the supported range. </exception>
        <remarks>
            <para>The day part of the resulting <see cref="System.DateTime" /> is affected if the resulting day is not a valid day in the resulting month of the resulting year;
   it is changed to the last valid day in the resulting month of the resulting year.
   The month part of the resulting <see cref="System.DateTime" /> remains the same as the specified <see cref="System.DateTime" />.
   This implementation only supports the current era; therefore, <see cref="System.ArgumentException" /> is thrown if the resulting year is outside the era of the specified <see cref="System.DateTime" />.
   The time-of-day part of the resulting <see cref="System.DateTime" /> remains the same as the specified <see cref="System.DateTime" />.</para>
            <para>For example, February has 28 days, except during leap years when it has 29 days.
   If the specified date is the 29th day of February in a leap year and the value of <paramref name="years" /> is 1,
   the resulting date will be the 28th day of February in the following year.</para>
            <para>If <paramref name="years" /> is negative, the resulting <see cref="System.DateTime" /> is earlier than the specified
<see cref="System.DateTime" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.JulianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.JulianCalendar.AddMonths" />
        <seealso cref="System.Globalization.Calendar.AddWeeks" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddDays" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddHours" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddMinutes" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddSeconds" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddMilliseconds" qualify="true" />
    </doc><doc for="JulianCalendar.GetDayOfMonth">
        <summary>
            <para>Returns the day of the month in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>An integer from 1 to 31 that represents the day of the month in <paramref name="time" />.</para>
        </returns>
        <example>
            <codelink SampleID="System.Globalization.JulianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.Day" qualify="true" />
        <seealso cref="System.Globalization.JulianCalendar.GetEra" />
        <seealso cref="System.Globalization.JulianCalendar.GetYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetMonth" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" qualify="true" />
    </doc><doc for="JulianCalendar.GetDayOfWeek">
        <summary>
            <para>Returns the day of the week in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>A <see cref="System.DayOfWeek" /> value that represents the day of the week in <paramref name="time" />.</para>
        </returns>
        <remarks>
            <para>The <see cref="System.DayOfWeek" /> values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.JulianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.DayOfWeek" qualify="true" />
        <seealso cref="System.DayOfWeek" qualify="true" />
        <seealso cref="System.Globalization.JulianCalendar.GetEra" />
        <seealso cref="System.Globalization.JulianCalendar.GetYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetMonth" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" qualify="true" />
    </doc><doc for="JulianCalendar.GetDayOfYear">
        <summary>
            <para>Returns the day of the year in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>An integer from 1 to 366 that represents the day of the year in <paramref name="time" />.</para>
        </returns>
        <remarks>
            <para>The day of the year is defined as the number of days from the first day of the year.
      For example, <see cref="System.Globalization.JulianCalendar.GetDayOfYear" /> for the first day of the first month returns 1,
      and <see cref="System.Globalization.JulianCalendar.GetDayOfYear" /> for the last day of the last month returns the total number of days in that year,
      which is the same value returned by <see cref="System.Globalization.JulianCalendar.GetDaysInYear" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.JulianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.DayOfYear" qualify="true" />
        <seealso cref="System.Globalization.JulianCalendar.GetEra" />
        <seealso cref="System.Globalization.JulianCalendar.GetYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetMonth" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" qualify="true" />
    </doc><doc for="JulianCalendar.GetDaysInMonth">
        <overload>
            <para>Returns the number of days in the specified month.</para>
        </overload>
        <summary>
            <para>Returns the number of days in the specified month in the specified year in the specified era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para>The number of days in the specified month in the specified year in the specified era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para>For example, this method returns 28 or 29 for February (<paramref name="month" /> = 2), depending on whether <paramref name="year" /> is a leap year.</para>
        </remarks>
        <example>
            <para>The following code example calls GetDaysInMonth for the second month in each of five years in each era.</para>
            <codelink SampleID="System.Globalization.JulianCalendar.GetDaysInMonth" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.JulianCalendar.JulianEra" />
        <seealso cref="System.Globalization.JulianCalendar.Eras" />
        <seealso cref="System.Globalization.JulianCalendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetDaysInYear" />
    </doc><doc for="JulianCalendar.GetDaysInYear">
        <overload>
            <para>Returns the number of days in the specified year.</para>
        </overload>
        <summary>
            <para>Returns the number of days in the specified year in the specified era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para>The number of days in the specified year in the specified era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="year" /> is outside the range supported by the calendar.</exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para>For example, this method returns 365 or 366, depending on whether
   <paramref name="year" /> is a leap year.</para>
        </remarks>
        <example>
            <para>The following code example calls GetDaysInYear for five years in each era.</para>
            <codelink SampleID="System.Globalization.JulianCalendar.GetDaysInYear" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.JulianCalendar.JulianEra" />
        <seealso cref="System.Globalization.JulianCalendar.Eras" />
        <seealso cref="System.Globalization.JulianCalendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetDaysInMonth" />
    </doc><doc for="JulianCalendar.GetEra">
        <summary>
            <para>Returns the era in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>An integer that represents the era in <paramref name="time" />.</para>
        </returns>
        <remarks>
            <para>The <see cref="System.Globalization.JulianCalendar" /> class recognizes only the current era.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.JulianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.JulianCalendar.JulianEra" />
        <seealso cref="System.Globalization.JulianCalendar.Eras" />
        <seealso cref="System.Globalization.JulianCalendar.GetYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetMonth" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetHour" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetMinute" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetSecond" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" qualify="true" />
    </doc><doc for="JulianCalendar.GetMonth">
        <summary>
            <para>Returns the month in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>An integer from 1 to 12 that represents the month in <paramref name="time" />.</para>
        </returns>
        <example>
            <codelink SampleID="System.Globalization.JulianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.Month" qualify="true" />
        <seealso cref="System.Globalization.JulianCalendar.GetEra" />
        <seealso cref="System.Globalization.JulianCalendar.GetYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetHour" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetMinute" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetSecond" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" qualify="true" />
    </doc><doc for="JulianCalendar.Eras">
        <summary>
            <para>Gets the list of eras in the <see cref="System.Globalization.JulianCalendar" />.</para>
        </summary>
        <value>
            <para>An array of integers that represents the eras in the <see cref="System.Globalization.JulianCalendar" />.</para>
        </value>
        <remarks>
            <para>The <see cref="System.Globalization.JulianCalendar" /> class recognizes only the current era. 
   This property always returns an array with only one element.</para>
        </remarks>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.JulianCalendar.JulianEra" />
    </doc><doc for="JulianCalendar.GetMonthsInYear">
        <overload>
            <para>Returns the number of months in the specified year.</para>
        </overload>
        <summary>
            <para>Returns the number of months in the specified year in the specified era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para>The number of months in the specified year in the specified era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="year" /> is outside the range supported by the calendar.</exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <example>
            <para>The following code example calls GetMonthsInYear for five years in each era.</para>
            <codelink SampleID="System.Globalization.JulianCalendar.GetMonthsInYear" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.JulianCalendar.JulianEra" />
        <seealso cref="System.Globalization.JulianCalendar.Eras" />
        <seealso cref="System.Globalization.JulianCalendar.GetDaysInYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetDaysInMonth" />
    </doc><doc for="JulianCalendar.GetYear">
        <summary>
            <para>Returns the year in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>An integer that represents the year in <paramref name="time" />.</para>
        </returns>
        <example>
            <codelink SampleID="System.Globalization.JulianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.Year" qualify="true" />
        <seealso cref="System.Globalization.JulianCalendar.GetEra" />
        <seealso cref="System.Globalization.JulianCalendar.GetMonth" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.JulianCalendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetHour" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetMinute" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetSecond" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" qualify="true" />
    </doc><doc for="JulianCalendar.IsLeapDay">
        <overload>
            <para>Determines whether the specified day is a leap day.</para>
        </overload>
        <summary>
            <para>Determines whether the specified date in the specified era is a leap day.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="day">An integer from 1 to 31 that represents the day.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para><see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="day" /> is outside the range supported by the calendar.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para>Unlike the Gregorian calendar, the Julian calendar 
      defines a leap year as a year that is evenly divisible by four with no exceptions; therefore, the calendar is
      inaccurate by one day every 128 years. For example, the year 1999 was
      not a leap year, but the year 2000 was. A common year has 365 days
      and a leap year has 366 days.</para>
            <para> A leap day is a day that occurs only in a leap year. In the Julian calendar, the 29th day of February is
      the only leap day.</para>
        </remarks>
        <example>
            <para>The following code example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.</para>
            <codelink SampleID="System.Globalization.JulianCalendar.IsLeapDay" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.JulianCalendar.JulianEra" />
        <seealso cref="System.Globalization.JulianCalendar.Eras" />
        <seealso cref="System.Globalization.JulianCalendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetDaysInMonth" />
        <seealso cref="System.Globalization.JulianCalendar.IsLeapYear" />
        <seealso cref="System.Globalization.JulianCalendar.IsLeapMonth" />
    </doc><doc for="JulianCalendar.IsLeapMonth">
        <overload>
            <para>Determines whether the specified month is a leap month.</para>
        </overload>
        <summary>
            <para>Determines whether the specified month in the specified year in the specified era is a leap month.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para>This method always returns <see langword="false" />,
   unless overridden by a derived class.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para>Unlike the Gregorian calendar, the Julian calendar 
      defines a leap year as a year that is evenly divisible by four with no exceptions; therefore, the calendar is
      inaccurate by one day every 128 years. For example, the year 1999 was
      not a leap year, but the year 2000 was. A common year has 365 days
      and a leap year has 366 days.</para>
            <para> 
      A leap month is an entire month that occurs only in a leap year. The Julian calendar does not have any leap months.</para>
        </remarks>
        <example>
            <para>The following code example calls IsLeapMonth for all the months in five years in the current era.</para>
            <codelink SampleID="System.Globalization.JulianCalendar.IsLeapMonth" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.JulianCalendar.JulianEra" />
        <seealso cref="System.Globalization.JulianCalendar.Eras" />
        <seealso cref="System.Globalization.JulianCalendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.JulianCalendar.IsLeapYear" />
        <seealso cref="System.Globalization.JulianCalendar.IsLeapDay" />
    </doc><doc for="JulianCalendar.IsLeapYear">
        <overload>
            <para>Determines whether the specified year is a leap year.</para>
        </overload>
        <summary>
            <para>Determines whether the specified year in the specified era is a leap year.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para><see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="year" /> is outside the range supported by the calendar.</exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para>Unlike the Gregorian calendar, the Julian calendar 
      defines a leap year as a year that is evenly divisible by four with no exceptions; therefore, the calendar is
      inaccurate by one day every 128 years. For example, the year 1999 was
      not a leap year, but the year 2000 was. A common year has 365 days
      and a leap year has 366 days.</para>
        </remarks>
        <example>
            <para>The following code example calls IsLeapYear for five years in each of the eras.</para>
            <codelink SampleID="System.Globalization.JulianCalendar.IsLeapYear" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.JulianCalendar.JulianEra" />
        <seealso cref="System.Globalization.JulianCalendar.Eras" />
        <seealso cref="System.Globalization.JulianCalendar.IsLeapMonth" />
        <seealso cref="System.Globalization.JulianCalendar.IsLeapDay" />
    </doc><doc for="JulianCalendar.ToDateTime">
        <overload>
            <para>Returns a <see cref="System.DateTime" /> that is set to the specified date.</para>
        </overload>
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is set to the specified date and
   time in the specified era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="day">An integer from 1 to 31 that represents the day.</param>
        <param name="hour">An integer from 0 to 23 that represents the hour.</param>
        <param name="minute">An integer from 0 to 59 that represents the minute.</param>
        <param name="second">An integer from 0 to 59 that represents the second.</param>
        <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that is set to the specified date and time in the current era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="day" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="hour" /> is less than zero or greater than 23.</para><para>-or-</para>
            <para><paramref name="minute" /> is less than zero or greater than 59.</para><para>-or-</para>
            <para><paramref name="second" /> is less than zero or greater than 59.</para><para>-or-</para>
            <para><paramref name="millisecond" /> is less than zero or greater than 999.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.JulianCalendar.JulianEra" />
        <seealso cref="System.Globalization.JulianCalendar.Eras" />
        <seealso cref="System.Globalization.JulianCalendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.JulianCalendar.GetDaysInMonth" />
    </doc><doc for="JulianCalendar.TwoDigitYearMax">
        <summary>
            <para>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</para>
        </summary>
        <value>
            <para>The last year of a 100-year range that can be represented by a 2-digit year.</para>
        </value>
        <remarks>
            <para>This property allows a 2-digit year to be properly translated to a 4-digit
      year. For example, if this property is set to 2029, the 100-year range is from
      1930 to 2029; therefore, a 2-digit value of 30 is interpreted as 1930, while a
      2-digit value of 29 is interpreted as 2029.</para>
            <para>The <see cref="System.Globalization.JulianCalendar" /> class does not detect changes in the system settings.</para>
        </remarks>
        <seealso cref="System.Globalization.JulianCalendar.ToFourDigitYear" />
    </doc><doc for="JulianCalendar.ToFourDigitYear">
        <summary>
            <para>Converts the specified two-digit year to a four-digit year by
      using the <see cref="System.Globalization.JulianCalendar.TwoDigitYearMax" /> property to determine the
      appropriate century.</para>
        </summary>
        <param name="year">A two-digit integer that represents the year to convert.</param>
        <returns>
            <para>An integer that contains the four-digit representation of <paramref name="year" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="year" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para><see cref="System.Globalization.JulianCalendar.TwoDigitYearMax" /> is the last year in the 100-year
   range that can be represented by a two-digit year. The century is
   determined by finding the sole occurrence of the
   two-digit <paramref name="year" /> within that 100-year
   range. For example, if <see cref="System.Globalization.JulianCalendar.TwoDigitYearMax" /> is set
   to 2029, the 100-year range is from 1930 to 2029; therefore, a 2-digit value of
   30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.</para>
        </remarks>
        <seealso cref="System.Globalization.JulianCalendar.TwoDigitYearMax" />
    </doc>
</docs>
