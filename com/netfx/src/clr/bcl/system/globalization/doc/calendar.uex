<docs>
    <doc for="CalendarWeekRule">
        <summary>
            <para>Defines different rules for determining the first week of the year.</para>
        </summary>
        <remarks>
            <para>These calendar week rules depend on the <see cref="System.DayOfWeek" qualify="true" /> value that is designated as the first day of the week.
   The <see cref="System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" qualify="true" /> property provides the default value for a culture,
   but any <see cref="System.DayOfWeek" /> value can be specified as the first day of the week in the <see cref="System.Globalization.Calendar.GetWeekOfYear" qualify="true" /> method.</para>
            <para>The first week based on the <see cref="System.Globalization.CalendarWeekRule.FirstDay" /> value can have one to seven days.
   The first week based on the <see cref="System.Globalization.CalendarWeekRule.FirstFullWeek" /> value always has seven days.
   The first week based on the <see cref="System.Globalization.CalendarWeekRule.FirstFourDayWeek" /> value can have four to seven days.</para>
            <para>For example, in the Gregorian calendar, suppose that the first day of the year (January 1) falls on a Tuesday and the designated first day of the week is Sunday.
   Selecting <see cref="System.Globalization.CalendarWeekRule.FirstFullWeek" /> defines the first Sunday (January 6) as the beginning of the first week of the year.
   The first five days of the year are considered part of the last week of the previous year.
   In contrast, selecting <see cref="System.Globalization.CalendarWeekRule.FirstFourDayWeek" /> defines the first day of the year (January 1) as the beginning of the first week of the year
   because there are more than four days from January 1 to the day before the following Sunday.</para>
            <list type="table">
                <listheader>
                    <term>Date</term>
                    <description>FirstDay</description>
                    <description>FirstFullWeek</description>
                    <description>FirstFourDayWeek</description>
                </listheader>
                <item>
                    <term> Dec 31 Mon</term>
                    <description>Last week of the previous year</description>
                    <description>Last week of the previous year</description>
                    <description>Last week of the previous year</description>
                </item>
                <item>
                    <term> Jan 1 Tue</term>
                    <description>Week 1</description>
                    <description>Last week of the previous year</description>
                    <description>Week 1</description>
                </item>
                <item>
                    <term> Jan 2 Wed</term>
                    <description>Week 1</description>
                    <description>Last week of the previous year</description>
                    <description>Week 1</description>
                </item>
                <item>
                    <term> Jan 3 Thu</term>
                    <description>Week 1</description>
                    <description>Last week of the previous year</description>
                    <description>Week 1</description>
                </item>
                <item>
                    <term> Jan 4 Fri</term>
                    <description>Week 1</description>
                    <description>Last week of the previous year</description>
                    <description>Week 1</description>
                </item>
                <item>
                    <term> Jan 5 Sat</term>
                    <description>Week 1</description>
                    <description>Last week of the previous year</description>
                    <description>Week 1</description>
                </item>
                <item>
                    <term> Jan 6 Sun</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 2</description>
                </item>
                <item>
                    <term> Jan 7 Mon</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 2</description>
                </item>
                <item>
                    <term> Jan 8 Tue</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 2</description>
                </item>
                <item>
                    <term> Jan 9 Wed</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 2</description>
                </item>
                <item>
                    <term> Jan 10 Thu</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 2</description>
                </item>
                <item>
                    <term> Jan 11 Fri</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 2</description>
                </item>
                <item>
                    <term> Jan 12 Sat</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 2</description>
                </item>
            </list>
            <para>Suppose the first day of the year (January 1) falls on a Friday and the designated first day of the week is Sunday.
   Selecting <see cref="System.Globalization.CalendarWeekRule.FirstFourDayWeek" /> defines the first Sunday (January 3) as the beginning of the first week of the year
   because there are fewer than four days from January 1 to the day before the following Sunday.</para>
            <list type="table">
                <listheader>
                    <term>Date</term>
                    <description>FirstDay</description>
                    <description>FirstFullWeek</description>
                    <description>FirstFourDayWeek</description>
                </listheader>
                <item>
                    <term> Dec 31 Thu</term>
                    <description>Last week of the previous year</description>
                    <description>Last week of the previous year</description>
                    <description>Last week of the previous year</description>
                </item>
                <item>
                    <term> Jan 1 Fri</term>
                    <description>Week 1</description>
                    <description>Last week of the previous year</description>
                    <description>Last week of the previous year</description>
                </item>
                <item>
                    <term> Jan 2 Sat</term>
                    <description>Week 1</description>
                    <description>Last week of the previous year</description>
                    <description>Last week of the previous year</description>
                </item>
                <item>
                    <term> Jan 3 Sun</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 1</description>
                </item>
                <item>
                    <term> Jan 4 Mon</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 1</description>
                </item>
                <item>
                    <term> Jan 5 Tue</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 1</description>
                </item>
                <item>
                    <term> Jan 6 Wed</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 1</description>
                </item>
                <item>
                    <term> Jan 7 Thu</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 1</description>
                </item>
                <item>
                    <term> Jan 8 Fri</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 1</description>
                </item>
                <item>
                    <term> Jan 9 Sat</term>
                    <description>Week 2</description>
                    <description>Week 1</description>
                    <description>Week 1</description>
                </item>
            </list>
            <para>Each <see cref="System.Globalization.CultureInfo" /> supports a set of calendars.
 The <see cref="System.Globalization.CultureInfo.Calendar" /> property returns the default calendar for the culture, and
 the <see cref="System.Globalization.CultureInfo.OptionalCalendars" /> property returns an array containing all the calendars supported by the culture.
 To change the calendar used by a <see cref="System.Globalization.CultureInfo" />,
 set the <see cref="System.Globalization.DateTimeFormatInfo.Calendar" /> property of <see cref="System.Globalization.CultureInfo.DateTimeFormat" qualify="true" />
 to a new <see cref="System.Globalization.Calendar" />.</para>
        </remarks>
        <seealso cref="System.Globalization.CultureInfo.Calendar" />
        <seealso cref="System.Globalization.CultureInfo.OptionalCalendars" />
    </doc><doc for="CalendarWeekRule.FirstDay">
        <summary>
            <para>Indicates that the first week of the year starts on the first day of the year and ends before the following designated first day of the week.
        The value is 0.</para>
        </summary>
    </doc><doc for="CalendarWeekRule.FirstFullWeek">
        <summary>
            <para> Indicates that the first week of the year begins on the first occurrence of the designated first day of the week on or after the first day of the year.
        The value is 1.</para>
        </summary>
    </doc><doc for="CalendarWeekRule.FirstFourDayWeek">
        <summary>
            <para>Indicates that the first week of the year is the first week with four or more days before the designated first day of the week.
        The value is 2.</para>
        </summary>
    </doc><doc for="Calendar">
        <summary>
            <para>Represents time in divisions, such as weeks, months, and years.</para>
        </summary>
        <remarks>
            <para>A calendar divides time into measures, such as weeks, months, and years.
      The number, length, and start of the divisions vary in each calendar.</para>
            <para>Any moment in time can be represented as a set of numeric values using a particular calendar.
      For example, the last vernal equinox occurred at (0.0, 0, 46, 8, 20, 3, 1999) in the Gregorian calendar.
      An implementation of <see cref="System.Globalization.Calendar" /> can map any <see cref="System.DateTime" /> value
      to a similar set of numeric values, and <see cref="System.DateTime" /> can map such sets of numeric values to a textual representation
      using information from <see cref="System.Globalization.Calendar" /> and <see cref="System.Globalization.DateTimeFormatInfo" />.
      The textual representation can be culture-sensitive (for example, "8:46 AM March 20th 1999 AD" for the en-US culture)
      or culture-insensitive (for example, "1999-03-20T08:46:00" in ISO 8601 format).</para>
            <para>A <see cref="System.Globalization.Calendar" /> implementation can define one or more eras.
   The <see cref="System.Globalization.Calendar" /> class identifies the eras as enumerated integers
   where the current era (<see cref="System.Globalization.Calendar.CurrentEra" />) has the value 0.</para>
            <para>In order to make up for the difference between the calendar year and the actual time that the earth rotates around the sun
   or the actual time that the moon rotates around the earth, a leap year has a different number of days than a standard calendar year.
   Each <see cref="System.Globalization.Calendar" /> implementation defines leap years differently.</para>
            <para>For consistency, the first unit in each interval (for example, the first month) is assigned the value 1.</para>
            <para>The <see cref="System.Globalization" /> namespace includes the following <see cref="System.Globalization.Calendar" /> implementations:
<see cref="System.Globalization.GregorianCalendar" />,
<see cref="System.Globalization.HebrewCalendar" />,
<see cref="System.Globalization.HijriCalendar" />,
<see cref="System.Globalization.JapaneseCalendar" />,
<see cref="System.Globalization.JulianCalendar" />,
<see cref="System.Globalization.KoreanCalendar" />,
<see cref="System.Globalization.TaiwanCalendar" />, and
<see cref="System.Globalization.ThaiBuddhistCalendar" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" />
        <seealso cref="System.Globalization.DateTimeFormatInfo" />
        <seealso cref="System.Globalization.GregorianCalendar" />
        <seealso cref="System.Globalization.HebrewCalendar" />
        <seealso cref="System.Globalization.HijriCalendar" />
        <seealso cref="System.Globalization.JapaneseCalendar" />
        <seealso cref="System.Globalization.JulianCalendar" />
        <seealso cref="System.Globalization.KoreanCalendar" />
        <seealso cref="System.Globalization.TaiwanCalendar" />
        <seealso cref="System.Globalization.ThaiBuddhistCalendar" />
    </doc><doc for="Calendar.Calendar">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Globalization.Calendar" /> class.</para>
        </summary>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
    </doc><doc for="Calendar.CurrentEra">
        <summary>
            <para> Represents the current era for the current calendar. This field is constant.</para>
        </summary>
        <seealso cref="System.Globalization.Calendar.Eras" />
    </doc><doc for="Calendar.AddDays">
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is the specified number of days away from the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to which to add days.</param>
        <param name="days">The number of days to add.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that results from adding the specified number of days to the specified <see cref="System.DateTime" />.</para>
        </returns>
        <exception cref="System.ArgumentException">The resulting <see cref="System.DateTime" /> is outside the supported range.</exception>
        <remarks>
            <para> The <paramref name="days" /> value is rounded to the nearest millisecond before it is added to the specified <see cref="System.DateTime" />.
   If <paramref name="days" /> is negative, the resulting <see cref="System.DateTime" /> is earlier than the specified <see cref="System.DateTime" />.</para>
            <para>The month part of the resulting <see cref="System.DateTime" /> is affected if the resulting day is outside the month of the specified <see cref="System.DateTime" />.
   The year part of the resulting <see cref="System.DateTime" /> is affected if the resulting month is outside the year of the specified <see cref="System.DateTime" />.
   The era part of the resulting <see cref="System.DateTime" /> is affected if the resulting year is outside the era of the specified <see cref="System.DateTime" />.
   The time-of-day part of the resulting <see cref="System.DateTime" /> remains the same as the specified <see cref="System.DateTime" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddYears" />
        <seealso cref="System.Globalization.Calendar.AddMonths" />
        <seealso cref="System.Globalization.Calendar.AddWeeks" />
        <seealso cref="System.Globalization.Calendar.AddHours" />
        <seealso cref="System.Globalization.Calendar.AddMinutes" />
        <seealso cref="System.Globalization.Calendar.AddSeconds" />
        <seealso cref="System.Globalization.Calendar.AddMilliseconds" />
    </doc><doc for="Calendar.AddHours">
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is the specified number of hours away from the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to which to add hours.</param>
        <param name="hours">The number of hours to add.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that results from adding the specified number of hours to the specified <see cref="System.DateTime" />.</para>
        </returns>
        <exception cref="System.ArgumentException">The resulting <see cref="System.DateTime" /> is outside the supported range.</exception>
        <remarks>
            <para>The <paramref name="hours" /> value is rounded to the nearest millisecond before it is added to the specified <see cref="System.DateTime" />.
   If <paramref name="hours" /> is negative, the resulting <see cref="System.DateTime" /> is earlier than the specified <see cref="System.DateTime" />.</para>
            <para>The day part of the resulting <see cref="System.DateTime" /> is affected if the resulting time is outside the day of the specified <see cref="System.DateTime" />.
   The month part of the resulting <see cref="System.DateTime" /> is affected if the resulting day is outside the month of the specified <see cref="System.DateTime" />.
   The year part of the resulting <see cref="System.DateTime" /> is affected if the resulting month is outside the year of the specified <see cref="System.DateTime" />.
   The era part of the resulting <see cref="System.DateTime" /> is affected if the resulting year is outside the era of the specified <see cref="System.DateTime" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddYears" />
        <seealso cref="System.Globalization.Calendar.AddMonths" />
        <seealso cref="System.Globalization.Calendar.AddWeeks" />
        <seealso cref="System.Globalization.Calendar.AddDays" />
        <seealso cref="System.Globalization.Calendar.AddMinutes" />
        <seealso cref="System.Globalization.Calendar.AddSeconds" />
        <seealso cref="System.Globalization.Calendar.AddMilliseconds" />
    </doc><doc for="Calendar.AddMilliseconds">
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is the specified number of milliseconds away from the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to which to add milliseconds.</param>
        <param name="milliseconds">The number of milliseconds to add.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that results from adding the specified number of milliseconds to the specified <see cref="System.DateTime" />.</para>
        </returns>
        <exception cref="System.ArgumentException">The resulting <see cref="System.DateTime" /> is outside the supported range.</exception>
        <remarks>
            <para>The <paramref name="milliseconds" /> value is rounded to the nearest integer before it is added to the specified <see cref="System.DateTime" />.
   If <paramref name="milliseconds" /> is negative, the resulting <see cref="System.DateTime" /> is earlier than the specified <see cref="System.DateTime" />.</para>
            <para>The day part of the resulting <see cref="System.DateTime" /> is affected if the resulting time is outside the day of the specified <see cref="System.DateTime" />.
   The month part of the resulting <see cref="System.DateTime" /> is affected if the resulting day is outside the month of the specified <see cref="System.DateTime" />.
   The year part of the resulting <see cref="System.DateTime" /> is affected if the resulting month is outside the year of the specified <see cref="System.DateTime" />.
   The era part of the resulting <see cref="System.DateTime" /> is affected if the resulting year is outside the era of the specified <see cref="System.DateTime" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddYears" />
        <seealso cref="System.Globalization.Calendar.AddMonths" />
        <seealso cref="System.Globalization.Calendar.AddWeeks" />
        <seealso cref="System.Globalization.Calendar.AddDays" />
        <seealso cref="System.Globalization.Calendar.AddHours" />
        <seealso cref="System.Globalization.Calendar.AddMinutes" />
        <seealso cref="System.Globalization.Calendar.AddSeconds" />
    </doc><doc for="Calendar.AddMinutes">
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is the specified number of minutes away from the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to which to add minutes.</param>
        <param name="minutes">The number of minutes to add.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that results from adding the specified number of minutes to the specified <see cref="System.DateTime" />.</para>
        </returns>
        <exception cref="System.ArgumentException">The resulting <see cref="System.DateTime" /> is outside the supported range.</exception>
        <remarks>
            <para>The <paramref name="minutes" /> value is rounded to the nearest millisecond before it is added to the specified <see cref="System.DateTime" />.
   If <paramref name="minutes" /> is negative, the resulting <see cref="System.DateTime" /> is earlier than the specified <see cref="System.DateTime" />.</para>
            <para>The day part of the resulting <see cref="System.DateTime" /> is affected if the resulting time is outside the day of the specified <see cref="System.DateTime" />.
   The month part of the resulting <see cref="System.DateTime" /> is affected if the resulting day is outside the month of the specified <see cref="System.DateTime" />.
   The year part of the resulting <see cref="System.DateTime" /> is affected if the resulting month is outside the year of the specified <see cref="System.DateTime" />.
   The era part of the resulting <see cref="System.DateTime" /> is affected if the resulting year is outside the era of the specified <see cref="System.DateTime" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddYears" />
        <seealso cref="System.Globalization.Calendar.AddMonths" />
        <seealso cref="System.Globalization.Calendar.AddWeeks" />
        <seealso cref="System.Globalization.Calendar.AddDays" />
        <seealso cref="System.Globalization.Calendar.AddHours" />
        <seealso cref="System.Globalization.Calendar.AddSeconds" />
        <seealso cref="System.Globalization.Calendar.AddMilliseconds" />
    </doc><doc for="Calendar.AddMonths">
        <summary>
            <para>When overridden in a derived class, returns a <see cref="System.DateTime" /> that is the specified number of months away from the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to which to add months.</param>
        <param name="months">The number of months to add.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that results from adding the specified number of months to the specified <see cref="System.DateTime" />.</para>
        </returns>
        <exception cref="System.ArgumentException">The resulting <see cref="System.DateTime" /> is outside the supported range.</exception>
        <remarks>
            <para>The day part of the resulting <see cref="System.DateTime" /> is affected if the resulting day is not a valid day in the resulting month of the resulting year;
   it is changed to the last valid day in the resulting month of the resulting year.
   The year part of the resulting <see cref="System.DateTime" /> is affected if the resulting month is outside the year of the specified <see cref="System.DateTime" />.
   The era part of the resulting <see cref="System.DateTime" /> is affected if the resulting year is outside the era of the specified <see cref="System.DateTime" />.
   The time-of-day part of the resulting <see cref="System.DateTime" /> remains the same as the specified <see cref="System.DateTime" />.</para>
            <para>For example, suppose that the current calendar has 12 months where the fourth month has 30 days and the tenth month has 31 days.
   If the specified month is the tenth month, the specified day is the 31st day of that month, and the value of the <paramref name="months" /> parameter is 6,
   the resulting year is one more than the specified year, the resulting month is the fourth month, and the resulting day is the 30th day, which is the last day of the resulting month.</para>
            <para>If the value of the <paramref name="months" /> parameter is negative, the resulting <see cref="System.DateTime" /> is earlier than the specified <see cref="System.DateTime" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddYears" />
        <seealso cref="System.Globalization.Calendar.AddWeeks" />
        <seealso cref="System.Globalization.Calendar.AddDays" />
        <seealso cref="System.Globalization.Calendar.AddHours" />
        <seealso cref="System.Globalization.Calendar.AddMinutes" />
        <seealso cref="System.Globalization.Calendar.AddSeconds" />
        <seealso cref="System.Globalization.Calendar.AddMilliseconds" />
    </doc><doc for="Calendar.AddSeconds">
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is the specified number of seconds away from the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to which to add seconds.</param>
        <param name="seconds">The number of seconds to add.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that results from adding the specified number of seconds to the specified <see cref="System.DateTime" />.</para>
        </returns>
        <exception cref="System.ArgumentException">The resulting <see cref="System.DateTime" /> is outside the supported range.</exception>
        <remarks>
            <para>The <paramref name="value" /> parameter is rounded to the nearest millisecond before it is added to the specified <see cref="System.DateTime" />.
   If <paramref name="value" /> is negative, the resulting <see cref="System.DateTime" /> is earlier than the specified <see cref="System.DateTime" />.</para>
            <para>The day part of the resulting <see cref="System.DateTime" /> is affected if the resulting time is outside the day of the specified <see cref="System.DateTime" />.
   The month part of the resulting <see cref="System.DateTime" /> is affected if the resulting day is outside the month of the specified <see cref="System.DateTime" />.
   The year part of the resulting <see cref="System.DateTime" /> is affected if the resulting month is outside the year of the specified <see cref="System.DateTime" />.
   The era part of the resulting <see cref="System.DateTime" /> is affected if the resulting year is outside the era of the specified <see cref="System.DateTime" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddYears" />
        <seealso cref="System.Globalization.Calendar.AddMonths" />
        <seealso cref="System.Globalization.Calendar.AddWeeks" />
        <seealso cref="System.Globalization.Calendar.AddDays" />
        <seealso cref="System.Globalization.Calendar.AddHours" />
        <seealso cref="System.Globalization.Calendar.AddMinutes" />
        <seealso cref="System.Globalization.Calendar.AddMilliseconds" />
    </doc><doc for="Calendar.AddWeeks">
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is the specified number of weeks away from the
   specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to which to add weeks.</param>
        <param name="weeks">The number of weeks to add.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that results from adding the specified number of weeks to the specified <see cref="System.DateTime" />.</para>
        </returns>
        <exception cref="System.ArgumentException">The resulting <see cref="System.DateTime" /> is outside the supported range.</exception>
        <remarks>
            <para>If <paramref name="weeks" /> is negative, the resulting <see cref="System.DateTime" /> is earlier than the specified <see cref="System.DateTime" />.</para>
            <para>The month part of the resulting <see cref="System.DateTime" /> is affected if the resulting day is outside the month of the specified <see cref="System.DateTime" />.
   The year part of the resulting <see cref="System.DateTime" /> is affected if the resulting month is outside the year of the specified <see cref="System.DateTime" />.
   The era part of the resulting <see cref="System.DateTime" /> is affected if the resulting year is outside the era of the specified <see cref="System.DateTime" />.
   The time-of-day part of the resulting <see cref="System.DateTime" /> remains the same as the specified <see cref="System.DateTime" />.</para>
            <para>In all .NET Framework classes derived from the <see cref="System.Globalization.Calendar" /> class, a week is defined as seven days.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddYears" />
        <seealso cref="System.Globalization.Calendar.AddMonths" />
        <seealso cref="System.Globalization.Calendar.AddDays" />
        <seealso cref="System.Globalization.Calendar.AddHours" />
        <seealso cref="System.Globalization.Calendar.AddMinutes" />
        <seealso cref="System.Globalization.Calendar.AddSeconds" />
        <seealso cref="System.Globalization.Calendar.AddMilliseconds" />
    </doc><doc for="Calendar.AddYears">
        <summary>
            <para>When overridden in a derived class, returns a <see cref="System.DateTime" /> that is the specified number of years away from the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to which to add years.</param>
        <param name="years">The number of years to add.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that results from adding the specified number of years to the specified <see cref="System.DateTime" />.</para>
        </returns>
        <exception cref="System.ArgumentException">The resulting <see cref="System.DateTime" /> is outside the supported range.</exception>
        <remarks>
            <para>The day part of the resulting <see cref="System.DateTime" /> is affected if the resulting day is not a valid day in the resulting month of the resulting year;
   it is changed to the last valid day in the resulting month of the resulting year.
   The month part of the resulting <see cref="System.DateTime" /> is affected if the resulting month is not a valid month in the resulting year;
   it is changed to the last valid month in the resulting year.
   The era part of the resulting <see cref="System.DateTime" /> is affected if the resulting year is outside the era of the specified <see cref="System.DateTime" />.
   The time-of-day part of the resulting <see cref="System.DateTime" /> remains the same as the specified <see cref="System.DateTime" />.</para>
            <para>For example, in the Gregorian calendar, February has 28 days, except during a leap year when it has 29 days.
   If the specified date is the 29th day of February in a leap year and the value of <paramref name="years" /> is 1,
   the resulting date will be the 28th day of February in the following year.</para>
            <para>If <paramref name="years" /> is negative, the resulting <see cref="System.DateTime" /> is earlier than the specified <see cref="System.DateTime" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddMonths" />
        <seealso cref="System.Globalization.Calendar.AddWeeks" />
        <seealso cref="System.Globalization.Calendar.AddDays" />
        <seealso cref="System.Globalization.Calendar.AddHours" />
        <seealso cref="System.Globalization.Calendar.AddMinutes" />
        <seealso cref="System.Globalization.Calendar.AddSeconds" />
        <seealso cref="System.Globalization.Calendar.AddMilliseconds" />
    </doc><doc for="Calendar.GetDayOfMonth">
        <summary>
            <para>When overridden in a derived class, returns the day of the month in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para> A 1-based integer that represents the day of the month in <paramref name="time" />.</para>
        </returns>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.Day" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetEra" />
        <seealso cref="System.Globalization.Calendar.GetYear" />
        <seealso cref="System.Globalization.Calendar.GetMonth" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetHour" />
        <seealso cref="System.Globalization.Calendar.GetMinute" />
        <seealso cref="System.Globalization.Calendar.GetSecond" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" />
    </doc><doc for="Calendar.GetDayOfWeek">
        <summary>
            <para>When overridden in a derived class, returns the day of the week in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>A <see cref="System.DayOfWeek" /> value that represents the day of the week in <paramref name="time" />.</para>
        </returns>
        <remarks>
            <para>The <see cref="System.DayOfWeek" /> values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.DayOfWeek" qualify="true" />
        <seealso cref="System.DayOfWeek" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetEra" />
        <seealso cref="System.Globalization.Calendar.GetYear" />
        <seealso cref="System.Globalization.Calendar.GetMonth" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.Calendar.GetHour" />
        <seealso cref="System.Globalization.Calendar.GetMinute" />
        <seealso cref="System.Globalization.Calendar.GetSecond" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" />
    </doc><doc for="Calendar.GetDayOfYear">
        <summary>
            <para>When overridden in a derived class, returns the day of the year in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>A 1-based integer that represents the day of the year in <paramref name="time" />.</para>
        </returns>
        <remarks>
            <para>The day of the year is defined as the number of days from the first day of the year.
      For example, in <see cref="System.Globalization.GregorianCalendar" />,
      <see cref="System.Globalization.Calendar.GetDayOfYear" /> for January 1 returns 1,
      and <see cref="System.Globalization.Calendar.GetDayOfYear" /> for December 31 returns 365 in a common year or 366 in a leap year.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.DayOfYear" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetEra" />
        <seealso cref="System.Globalization.Calendar.GetYear" />
        <seealso cref="System.Globalization.Calendar.GetMonth" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.Calendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetHour" />
        <seealso cref="System.Globalization.Calendar.GetMinute" />
        <seealso cref="System.Globalization.Calendar.GetSecond" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" />
    </doc><doc for="Calendar.GetDaysInMonth">
        <overload>
            <para>Returns the number of days in the specified month.</para>
        </overload>
        <summary>
            <para>Returns the number of days in the specified month in the specified year in the current era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">A 1-based integer that represents the month.</param>
        <returns>
            <para> The number of days in the specified month in the specified year in the current era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para></exception>
        <remarks>
            <para>For example, in <see cref="System.Globalization.GregorianCalendar" />,
            <see cref="System.Globalization.Calendar.GetDaysInMonth" /> for February returns 28 in a common year or 29 in a leap year.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar_Compare" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.GregorianCalendar" />
        <seealso cref="System.Globalization.Calendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.Calendar.GetDaysInYear" />
    </doc><doc for="Calendar.GetDaysInMonth1">
        <summary>
            <para>When overridden in a derived class, returns the number of days in the specified month in the specified year in the specified era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">A 1-based integer that represents the month.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para> The number of days in the specified month in the specified year in the specified era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="era" /> is outside the range supported by the calendar.</para></exception>
<remarks>
            <para>For example, in <see cref="System.Globalization.GregorianCalendar" />,
            <see cref="System.Globalization.Calendar.GetDaysInMonth" /> for February returns 28 in a common year or 29 in a leap year.</para>
            <note type="inheritinfo">
   The derived class must support <see cref="System.Globalization.Calendar.CurrentEra" />
   when it is passed as the <paramref name="era" /> parameter.
   One way to support <see cref="System.Globalization.Calendar.CurrentEra" /> is by replacing it
   with the value stored in <c>Eras[0]</c>, which is the value for the current era of the calendar.
            </note>
        </remarks>
        <seealso cref="System.Globalization.GregorianCalendar" />
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.Calendar.Eras" />
        <seealso cref="System.Globalization.Calendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.Calendar.GetDaysInYear" />
    </doc><doc for="Calendar.GetDaysInYear">
        <overload>
            <para>Returns the number of days in the specified year.</para>
        </overload>
        <summary>
            <para>Returns the number of days in the specified year in the current era.</para>
        </summary>
        <param name="year">An integer that represents the year. </param>
        <returns>
            <para>The number of days in the specified year in the current era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="year" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para>For example, in <see cref="System.Globalization.GregorianCalendar" />,
            <see cref="System.Globalization.Calendar.GetDaysInYear" /> returns 365 for a common year or 366 for a leap year.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar_Compare" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.GregorianCalendar" />
        <seealso cref="System.Globalization.Calendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.Calendar.GetDaysInMonth" />
    </doc><doc for="Calendar.GetDaysInYear1">
        <summary>
            <para> When overridden in a derived class, returns the number of days in the specified year in the specified era.</para>
        </summary>
        <param name="year">An integer that represents the year. </param>
        <param name="era">An integer that represents the era. </param>
        <returns>
            <para>The number of days in the specified year in the specified era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="era" /> is outside the range supported by the calendar.</para></exception>
        <remarks>
            <para>For example, in <see cref="System.Globalization.GregorianCalendar" />,
            <see cref="System.Globalization.Calendar.GetDaysInYear" /> returns 365 for a common year or 366 for a leap year.</para>
            <note type="inheritinfo">
   The derived class must support <see cref="System.Globalization.Calendar.CurrentEra" />
   when it is passed as the <paramref name="era" /> parameter.
   One way to support <see cref="System.Globalization.Calendar.CurrentEra" /> is by replacing it
   with the value stored in <c>Eras[0]</c>, which is the value for the current era of the calendar.
            </note>
        </remarks>
        <seealso cref="System.Globalization.GregorianCalendar" />
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.Calendar.Eras" />
        <seealso cref="System.Globalization.Calendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.Calendar.GetDaysInMonth" />
    </doc><doc for="Calendar.GetEra">
        <summary>
            <para>When overridden in a derived class, returns the era in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para> An integer that represents the era in <paramref name="time" />.</para>
        </returns>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.Calendar.Eras" />
        <seealso cref="System.Globalization.Calendar.GetYear" />
        <seealso cref="System.Globalization.Calendar.GetMonth" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.Calendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetHour" />
        <seealso cref="System.Globalization.Calendar.GetMinute" />
        <seealso cref="System.Globalization.Calendar.GetSecond" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" />
    </doc><doc for="Calendar.Eras">
        <summary>
            <para>When overridden in a derived class, gets the list of eras in the current calendar.</para>
        </summary>
        <value>
            <para>An array of integers that represents the eras in the current calendar.</para>
        </value>
        <remarks>
            <para>The eras are in reverse chronological order,
            such that the current era is the first element of the array,
            and the oldest era is the last element of the array.
            For example, the value of the current era in <see cref="System.Globalization.JapaneseCalendar" /> is 4,
            which is the first element of the array.</para>
        </remarks>
        <example>
            <para>The following code example displays the values contained in <see cref="System.Globalization.JapaneseCalendar.Eras" qualify="true" />.</para>
            <codelink SampleID="System.Globalization.JapaneseCalendar.Eras" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
    </doc><doc for="Calendar.GetHour">
        <summary>
            <para>Returns the hours value in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>An integer from 0 to 23 that represents the hour in <paramref name="time" />.</para>
        </returns>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.Hour" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetEra" />
        <seealso cref="System.Globalization.Calendar.GetYear" />
        <seealso cref="System.Globalization.Calendar.GetMonth" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.Calendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetMinute" />
        <seealso cref="System.Globalization.Calendar.GetSecond" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" />
    </doc><doc for="Calendar.GetMilliseconds">
        <summary>
            <para>Returns the milliseconds value in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>An integer from 0 to 999 that represents the milliseconds in <paramref name="time" />.</para>
        </returns>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.Millisecond" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetEra" />
        <seealso cref="System.Globalization.Calendar.GetYear" />
        <seealso cref="System.Globalization.Calendar.GetMonth" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.Calendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetHour" />
        <seealso cref="System.Globalization.Calendar.GetMinute" />
        <seealso cref="System.Globalization.Calendar.GetSecond" />
    </doc><doc for="Calendar.GetMinute">
        <summary>
            <para>Returns the minutes value in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>An integer from 0 to 59 that represents the minutes in <paramref name="time" />.</para>
        </returns>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.Minute" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetEra" />
        <seealso cref="System.Globalization.Calendar.GetYear" />
        <seealso cref="System.Globalization.Calendar.GetMonth" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.Calendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetHour" />
        <seealso cref="System.Globalization.Calendar.GetSecond" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" />
    </doc><doc for="Calendar.GetMonth">
        <summary>
            <para>When overridden in a derived class, returns the month in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>A 1-based integer that represents the month in <paramref name="time" />.</para>
        </returns>
        <remarks>
            <para>For example, in <see cref="System.Globalization.HebrewCalendar" />,
   <see cref="System.Globalization.Calendar.GetMonth" /> for Tishrei returns 1, 
   and <see cref="System.Globalization.Calendar.GetMonth" /> for Elul returns 12 in a common year or 13 in a leap year.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.Month" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetEra" />
        <seealso cref="System.Globalization.Calendar.GetYear" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.Calendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetHour" />
        <seealso cref="System.Globalization.Calendar.GetMinute" />
        <seealso cref="System.Globalization.Calendar.GetSecond" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" />
    </doc><doc for="Calendar.GetMonthsInYear">
        <overload>
            <para>Returns the number of months in the specified year.</para>
        </overload>
        <summary>
            <para>Returns the number of months in the specified year in the current era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <returns>
            <para>The number of months in the specified year in the current era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="year" /> is outside the range supported by the calendar.</exception>
<remarks>
            <para>For example, in <see cref="System.Globalization.HebrewCalendar" />,
   <see cref="System.Globalization.Calendar.GetMonthsInYear" /> returns 12 for a common year or 13 for a leap year.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar_Compare" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.GetDaysInYear" />
        <seealso cref="System.Globalization.Calendar.GetDaysInMonth" />
    </doc><doc for="Calendar.GetMonthsInYear1">
        <summary>
            <para>When overridden in a derived class, returns the number of months in the specified year in the specified era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para>The number of months in the specified year in the specified era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="era" /> is outside the range supported by the calendar.</para></exception>
        <remarks>
            <para>For example, in <see cref="System.Globalization.HebrewCalendar" />,
   <see cref="System.Globalization.Calendar.GetMonthsInYear" /> returns 12 for a common year or 13 for a leap year.</para>
            <note type="inheritinfo">
   The derived class must support <see cref="System.Globalization.Calendar.CurrentEra" />
   when it is passed as the <paramref name="era" /> parameter.
   One way to support <see cref="System.Globalization.Calendar.CurrentEra" /> is by replacing it
   with the value stored in <c>Eras[0]</c>, which is the value for the current era of the calendar.
            </note>
        </remarks>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.Calendar.Eras" />
        <seealso cref="System.Globalization.Calendar.GetDaysInYear" />
        <seealso cref="System.Globalization.Calendar.GetDaysInMonth" />
    </doc><doc for="Calendar.GetSecond">
        <summary>
            <para>Returns the seconds value in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para> An integer from 0 to 59 that represents the seconds in <paramref name="time" />.</para>
        </returns>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.Second" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetEra" />
        <seealso cref="System.Globalization.Calendar.GetYear" />
        <seealso cref="System.Globalization.Calendar.GetMonth" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.Calendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetHour" />
        <seealso cref="System.Globalization.Calendar.GetMinute" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" />
    </doc><doc for="Calendar.GetWeekOfYear">
        <summary>
            <para>Returns the week of the year that includes the date in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <param name="rule">A <see cref="System.Globalization.CalendarWeekRule" /> value that defines a calendar week.</param>
        <param name="firstDayOfWeek">A <see cref="System.DayOfWeek" /> value that represents the first day of the week.</param>
        <returns>
            <para>A 1-based integer that represents the week of the year that includes the date in <paramref name="time" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="rule" /> is not a valid <see cref="System.Globalization.CalendarWeekRule" /> value.</para></exception>
        <remarks>
            <para>This method can be used to determine the number of weeks in the year by setting <paramref name="time" /> to the last day of the year.</para>
            <para><see cref="System.Globalization.CultureInfo.DateTimeFormat" qualify="true" /> contains culture-specific values
 that can be used for <paramref name="rule" /> and <paramref name="firstDayOfWeek" />.</para>
            <para><see cref="System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" /> of <see cref="System.Globalization.CultureInfo.DateTimeFormat" qualify="true" />
 contains the default <see cref="System.DayOfWeek" /> value that represents the first day of the week for a specific culture,
 using the calendar specified in the <see cref="System.Globalization.DateTimeFormatInfo.Calendar" /> property of <see cref="System.Globalization.CultureInfo.DateTimeFormat" qualify="true" />.</para>
            <para><see cref="System.Globalization.DateTimeFormatInfo.CalendarWeekRule" /> of <see cref="System.Globalization.CultureInfo.DateTimeFormat" qualify="true" />
 contains the default <see cref="System.Globalization.CalendarWeekRule" /> value that defines a calendar week for a specific culture,
 using the calendar specified in the <see cref="System.Globalization.DateTimeFormatInfo.Calendar" /> property of <see cref="System.Globalization.CultureInfo.DateTimeFormat" qualify="true" />.</para>
            <para>For example, in <see cref="System.Globalization.GregorianCalendar" />, <see cref="System.Globalization.Calendar.GetWeekOfYear" /> for January 1 returns 1.</para>
        </remarks>
        <example>
            <para>The following code example shows how the result of <see cref="System.Globalization.Calendar.GetWeekOfYear" /> varies depending on the <see cref="System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" /> and the <see cref="System.Globalization.CalendarWeekRule" /> used.
 If the specified date is the last day of the year, <see cref="System.Globalization.Calendar.GetWeekOfYear" /> returns the total number of weeks in that year.</para>
            <codelink SampleID="System.Globalization.Calendar.GetWeekOfYear" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.CalendarWeekRule" />
        <seealso cref="System.DayOfWeek" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetEra" />
        <seealso cref="System.Globalization.Calendar.GetYear" />
        <seealso cref="System.Globalization.Calendar.GetMonth" />
        <seealso cref="System.Globalization.Calendar.GetDayOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.Calendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetHour" />
        <seealso cref="System.Globalization.Calendar.GetMinute" />
        <seealso cref="System.Globalization.Calendar.GetSecond" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" />
    </doc><doc for="Calendar.GetYear">
        <summary>
            <para>When overridden in a derived class, returns the year in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para> An integer that represents the year in <paramref name="time" />.</para>
        </returns>
        <example>
            <codelink SampleID="System.Globalization.Calendar" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.Year" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetEra" />
        <seealso cref="System.Globalization.Calendar.GetMonth" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfYear" />
        <seealso cref="System.Globalization.Calendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.Calendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetHour" />
        <seealso cref="System.Globalization.Calendar.GetMinute" />
        <seealso cref="System.Globalization.Calendar.GetSecond" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" />
    </doc><doc for="Calendar.IsLeapDay">
        <overload>
            <para> Determines whether a date is a leap day.</para>
        </overload>
        <summary>
            <para> Determines whether the specified date in the current era is a leap day.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">A 1-based integer that represents the month.</param>
        <param name="day">A 1-based integer that represents the day.</param>
        <returns>
            <para><see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="day" /> is outside the range supported by the calendar.</para></exception>
        <remarks>
            <para>In order to make up for the difference between the calendar year and the actual time that the earth rotates around the sun
      or the actual time that the moon rotates around the earth, a leap year has a different number of days than a standard calendar year.
      Each <see cref="System.Globalization.Calendar" /> implementation defines leap years differently.</para>
            <para>A leap day is a day that occurs only in a leap year.
      For example, in the Gregorian calendar, the 29th day of February is the only leap day.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar_Compare" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.Calendar.GetDaysInMonth" />
        <seealso cref="System.Globalization.Calendar.IsLeapYear" />
        <seealso cref="System.Globalization.Calendar.IsLeapMonth" />
    </doc><doc for="Calendar.IsLeapDay1">
        <summary>
            <para> When overridden in a derived class, determines whether the specified date in the specified era is a leap day.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">A 1-based integer that represents the month.</param>
        <param name="day">A 1-based integer that represents the day.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para><see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="day" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="era" /> is outside the range supported by the calendar.</para></exception>
<remarks>
            <para>In order to make up for the difference between the calendar year and the actual time that the earth rotates around the sun
      or the actual time that the moon rotates around the earth, a leap year has a different number of days than a standard calendar year.
      Each <see cref="System.Globalization.Calendar" /> implementation defines leap years differently.</para>
            <para>A leap day is a day that occurs only in a leap year.
      For example, in the Gregorian calendar, the 29th day of February is the only leap day.</para>
            <note type="inheritinfo">
   The derived class must support <see cref="System.Globalization.Calendar.CurrentEra" />
   when it is passed as the <paramref name="era" /> parameter.
   One way to support <see cref="System.Globalization.Calendar.CurrentEra" /> is by replacing it
   with the value stored in <c>Eras[0]</c>, which is the value for the current era of the calendar.
            </note>
        </remarks>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.Calendar.Eras" />
        <seealso cref="System.Globalization.Calendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.Calendar.GetDaysInMonth" />
        <seealso cref="System.Globalization.Calendar.IsLeapYear" />
        <seealso cref="System.Globalization.Calendar.IsLeapMonth" />
    </doc><doc for="Calendar.IsLeapMonth">
        <overload>
            <para> Determines whether a month is a leap month.</para>
        </overload>
        <summary>
            <para>Determines whether the specified month in the specified year in the current era is a leap month.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">A 1-based integer that represents the month.</param>
        <returns>
            <para><see langword="true" /> if the specified month is a leap month; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para></exception>
        <remarks>
            <para>In order to make up for the difference between the calendar year and the actual time that the earth rotates around the sun
      or the actual time that the moon rotates around the earth, a leap year has a different number of days than a standard calendar year.
      Each <see cref="System.Globalization.Calendar" /> implementation defines leap years differently.</para>
            <para>A leap month is an entire month that occurs only in a leap year.
      For example, in the Hebrew calendar, Adar Beit is the only leap month.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar_Compare" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.Calendar.IsLeapYear" />
        <seealso cref="System.Globalization.Calendar.IsLeapDay" />
    </doc><doc for="Calendar.IsLeapMonth1">
        <summary>
            <para>When overridden in a derived class, determines whether the specified month in the specified year in the specified era is a leap month.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">A 1-based integer that represents the month.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para><see langword="true" /> if the specified month is a leap month; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="era" /> is outside the range supported by the calendar.</para></exception>
        <remarks>
            <para>In order to make up for the difference between the calendar year and the actual time that the earth rotates around the sun
      or the actual time that the moon rotates around the earth, a leap year has a different number of days than a standard calendar year.
      Each <see cref="System.Globalization.Calendar" /> implementation defines leap years differently.</para>
            <para>A leap month is an entire month that occurs only in a leap year.
      For example, in the Hebrew calendar, Adar Beit is the only leap month.</para>
            <note type="inheritinfo">
   The derived class must support <see cref="System.Globalization.Calendar.CurrentEra" />
   when it is passed as the <paramref name="era" /> parameter.
   One way to support <see cref="System.Globalization.Calendar.CurrentEra" /> is by replacing it
   with the value stored in <c>Eras[0]</c>, which is the value for the current era of the calendar.
            </note>
        </remarks>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.Calendar.Eras" />
        <seealso cref="System.Globalization.Calendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.Calendar.IsLeapYear" />
        <seealso cref="System.Globalization.Calendar.IsLeapDay" />
    </doc><doc for="Calendar.IsLeapYear">
        <overload>
            <para>Determines whether a year is a leap year.</para>
        </overload>
        <summary>
            <para>Determines whether the specified year in the current era is a leap year.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <returns>
            <para><see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="year" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para>In order to make up for the difference between the calendar year and the actual time that the earth rotates around the sun
 or the actual time that the moon rotates around the earth, a leap year has a different number of days than a standard calendar year.
 Each <see cref="System.Globalization.Calendar" /> implementation defines leap years differently.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.Calendar_Compare" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.IsLeapMonth" />
        <seealso cref="System.Globalization.Calendar.IsLeapDay" />
    </doc><doc for="Calendar.IsLeapYear1">
        <summary>
            <para>When overridden in a derived class, determines whether the specified year in the specified era is a leap year.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para><see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="era" /> is outside the range supported by the calendar.</para></exception>
        <remarks>
            <para>In order to make up for the difference between the calendar year and the actual time that the earth rotates around the sun
      or the actual time that the moon rotates around the earth, a leap year has a different number of days than a standard calendar year.
      Each <see cref="System.Globalization.Calendar" /> implementation defines leap years differently.</para>
            <note type="inheritinfo">
   The derived class must support <see cref="System.Globalization.Calendar.CurrentEra" />
   when it is passed as the <paramref name="era" /> parameter.
   One way to support <see cref="System.Globalization.Calendar.CurrentEra" /> is by replacing it
   with the value stored in <c>Eras[0]</c>, which is the value for the current era of the calendar.
            </note>
        </remarks>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.Calendar.Eras" />
        <seealso cref="System.Globalization.Calendar.IsLeapMonth" />
        <seealso cref="System.Globalization.Calendar.IsLeapDay" />
    </doc><doc for="Calendar.ToDateTime">
        <overload>
            <para>Returns a <see cref="System.DateTime" /> that is set to the specified date and time.</para>
        </overload>
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is set to the specified date and time in the current era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">A 1-based integer that represents the month.</param>
        <param name="day">A 1-based integer that represents the day.</param>
        <param name="hour">An integer from 0 to 23 that represents the hour.</param>
        <param name="minute">An integer from 0 to 59 that represents the minute.</param>
        <param name="second">An integer from 0 to 59 that represents the second.</param>
        <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that is set to the specified date and time in the current era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="day" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="hour" /> is less than zero or greater than 23.</para><para> -or-</para>
            <para><paramref name="minute" /> is less than zero or greater than 59.</para><para> -or-</para>
            <para><paramref name="second" /> is less than zero or greater than 59.</para><para> -or-</para>
            <para><paramref name="millisecond" /> is less than zero or greater than 999.</para></exception>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.Calendar.GetDaysInMonth" />
    </doc><doc for="Calendar.ToDateTime1">
        <summary>
            <para>When overridden in a derived class, returns a <see cref="System.DateTime" /> that is set to the
   specified date and time in the specified era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">A 1-based integer that represents the month.</param>
        <param name="day">A 1-based integer that represents the day.</param>
        <param name="hour">An integer from 0 to 23 that represents the hour.</param>
        <param name="minute">An integer from 0 to 59 that represents the minute.</param>
        <param name="second">An integer from 0 to 59 that represents the second.</param>
        <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that is set to the specified date and time in the current era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="day" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="hour" /> is less than zero or greater than 23.</para><para> -or-</para>
            <para><paramref name="minute" /> is less than zero or greater than 59.</para><para> -or-</para>
            <para><paramref name="second" /> is less than zero or greater than 59.</para><para> -or-</para>
            <para><paramref name="millisecond" /> is less than zero or greater than 999.</para><para>-or-</para>
            <para><paramref name="era" /> is outside the range supported by the calendar.</para></exception>
        <remarks>
            <note type="inheritinfo">
   The derived class must support <see cref="System.Globalization.Calendar.CurrentEra" />
   when it is passed as the <paramref name="era" /> parameter.
   One way to support <see cref="System.Globalization.Calendar.CurrentEra" /> is by replacing it
   with the value stored in <c>Eras[0]</c>, which is the value for the current era of the calendar.
            </note>
        </remarks>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.Calendar.Eras" />
        <seealso cref="System.Globalization.Calendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.Calendar.GetDaysInMonth" />
    </doc><doc for="Calendar.TwoDigitYearMax">
        <summary>
            <para>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</para>
        </summary>
        <value>
            <para>The last year of a 100-year range that can be represented by a 2-digit year.</para>
        </value>
        <remarks>
            <para>This property allows a 2-digit year to be properly translated to a 4-digit year.
 For example, if this property is set to 2029, the 100-year range is from 1930 to 2029;
 therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.</para>
            <para>The initial value of this property is derived from the settings in Regional and Language Options (or Regional Options or Regional Settings) in Control Panel in Windows.
 However, that information can change during the life of the <see cref="System.AppDomain" />.
 The <see cref="System.Globalization.Calendar" /> class does not detect changes in the system settings automatically.
 If the calendar is not supported in Regional and Language Options (or Regional Options or Regional Settings),
 the initial value of this property is the default value defined by the calendar class.</para>
        </remarks>
        <seealso cref="System.Globalization.Calendar.ToFourDigitYear" />
    </doc><doc for="Calendar.ToFourDigitYear">
        <summary>
            <para>Converts the specified two-digit year to a four-digit year by using the <see cref="System.Globalization.Calendar.TwoDigitYearMax" /> property
 to determine the appropriate century.</para>
        </summary>
        <param name="year">A two-digit integer that represents the year to convert.</param>
        <returns>
            <para>An integer that contains the four-digit representation of <paramref name="year" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="year" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para><see cref="System.Globalization.Calendar.TwoDigitYearMax" /> is the last year in the 100-year range that can be represented by a two-digit year.
 The century is determined by finding the sole occurrence of the two-digit <paramref name="year" /> within that 100-year range.
 For example, if <see cref="System.Globalization.Calendar.TwoDigitYearMax" /> is set to 2029, the 100-year range is from 1930 to 2029;
 therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.</para>
            <para>If <paramref name="year" /> is greater than or equal to 100, the value of <paramref name="year" /> is returned unchanged.</para>
        </remarks>
        <seealso cref="System.Globalization.Calendar.TwoDigitYearMax" />
    </doc>
</docs>
