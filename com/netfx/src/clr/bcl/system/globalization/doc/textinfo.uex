<docs>
    <doc for="TextInfo">
        <summary>
            <para>Defines properties and behaviors, such as casing, that are specific to a writing system.</para>
        </summary>
        <remarks>
            <para>A writing system is the collection of scripts and orthographic rules required to represent a language as text.</para>
            <para>To create a <see cref="System.Globalization.TextInfo" /> for any culture, use the <see cref="System.Globalization.CultureInfo.TextInfo" qualify="true" /> property.
 If a security decision depends on a string comparison or a case-change operation,
 use <see cref="System.Globalization.CultureInfo.TextInfo" qualify="true" />
 of the <see cref="System.Globalization.CultureInfo.InvariantCulture" />
 to ensure that the behavior will be consistent
 regardless of the culture settings of the system.</para>
            <para> The user might choose to override some of the values associated with the current culture of Windows
 through Regional and Language Options (or Regional Options or Regional Settings) in Control Panel.
 For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.
 If the <see cref="System.Globalization.CultureInfo.UseUserOverride" qualify="true" /> property is set to <see langword="true" />,
 the properties of the <see cref="System.Globalization.CultureInfo.DateTimeFormat" qualify="true" /> instance,
 the <see cref="System.Globalization.CultureInfo.NumberFormat" qualify="true" /> instance,
 and the <see cref="System.Globalization.CultureInfo.TextInfo" qualify="true" /> instance
 are also retrieved from the user settings.
 If the user settings are incompatible with the culture associated with the <see cref="System.Globalization.CultureInfo" />
 (for example, if the selected calendar is not one of the <see cref="System.Globalization.CultureInfo.OptionalCalendars" />),
 the results of the methods and the values of the properties are undefined. </para>
        </remarks>
        <seealso cref="System.Globalization.StringInfo" />
    </doc><doc for="TextInfo.ANSICodePage">
        <summary>
            <para>Gets the American National Standards Institute (ANSI) code page used by the writing system represented by the current <see cref="System.Globalization.TextInfo" />.</para>
        </summary>
        <value>
            <para>The ANSI code page used by the writing system represented by the current <see cref="System.Globalization.TextInfo" />.</para>
        </value>
        <seealso cref="System.Globalization.TextInfo.OEMCodePage" />
        <seealso cref="System.Globalization.TextInfo.MacCodePage" />
        <seealso cref="System.Globalization.TextInfo.EBCDICCodePage" />
    </doc><doc for="TextInfo.OEMCodePage">
        <summary>
            <para>Gets the original equipment manufacturer (OEM) code page used by the writing system represented by the current <see cref="System.Globalization.TextInfo" />.</para>
        </summary>
        <value>
            <para>The OEM code page used by the writing system represented by the current <see cref="System.Globalization.TextInfo" />.</para>
        </value>
        <seealso cref="System.Globalization.TextInfo.ANSICodePage" />
        <seealso cref="System.Globalization.TextInfo.MacCodePage" />
        <seealso cref="System.Globalization.TextInfo.EBCDICCodePage" />
    </doc><doc for="TextInfo.MacCodePage">
        <summary>
            <para>Gets the Macintosh code page used by the writing system represented by the current <see cref="System.Globalization.TextInfo" />.</para>
        </summary>
        <value>
            <para>The Macintosh code page used by the writing system represented by the current <see cref="System.Globalization.TextInfo" />.</para>
        </value>
        <seealso cref="System.Globalization.TextInfo.ANSICodePage" />
        <seealso cref="System.Globalization.TextInfo.OEMCodePage" />
        <seealso cref="System.Globalization.TextInfo.EBCDICCodePage" />
    </doc><doc for="TextInfo.EBCDICCodePage">
        <summary>
            <para>Gets the Extended Binary Coded Decimal Interchange Code (EBCDIC) code page used by the writing system represented by the current <see cref="System.Globalization.TextInfo" />.</para>
        </summary>
        <value>
            <para>The EBCDIC code page used by the writing system represented by the current <see cref="System.Globalization.TextInfo" />.</para>
        </value>
        <seealso cref="System.Globalization.TextInfo.ANSICodePage" />
        <seealso cref="System.Globalization.TextInfo.OEMCodePage" />
        <seealso cref="System.Globalization.TextInfo.MacCodePage" />
    </doc><doc for="TextInfo.ListSeparator">
        <summary>
            <para>Gets the string that separates items in a list.</para>
        </summary>
        <value>
            <para>The string that separates items in a list.</para>
        </value>
        <remarks>
            <para>The default for the invariant culture is ",".</para>
        </remarks>
    </doc><doc for="TextInfo.ToLower">
        <overload>
            <para> Converts the specified character or string to lowercase.</para>
        </overload>
        <summary>
            <para> Converts the specified character to lowercase.</para>
        </summary>
        <param name="c">The character to convert to lowercase.</param>
        <returns>
            <para> The specified character converted to lowercase.</para>
        </returns>
        <remarks>
            <para>Casing semantics depend on the culture in use.
      If using the invariant culture, the casing semantics are not culture-sensitive.
      If using a specific culture, the casing semantics are sensitive to that culture.</para>
            <para>If a security decision depends on a string comparison or a case-change operation,
      use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
      regardless of the culture settings of the system.
      However, the invariant culture must be used only by processes that require culture-independent results,
      such as system services; otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.</para>
            <para>For more information on cultures, see <see cref="System.Globalization.CultureInfo" />.</para>
        </remarks>
        <example>
            <para>The following code example changes the casing of a string based on the "en-US" culture.</para>
            <codelink SampleID="System.Globalization.TextInfo_casing" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.TextInfo.ToUpper" />
        <seealso cref="System.Globalization.TextInfo.ToTitleCase" />
    </doc><doc for="TextInfo.ToLower1">
        <summary>
            <para>Converts the specified string to lowercase.</para>
        </summary>
        <param name="str">The string to convert to lowercase.</param>
        <returns>
            <para>The specified string converted to lowercase.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="str" /> is <see langword="null" />.</exception>
        <remarks>
            <para>The returned string might differ in length from the input string.
      For more information on casing, refer to the Unicode Technical Report #21 "Case Mappings," published by the Unicode Consortium (http://www.unicode.org).
      The current implementation preserves the length of the string; however, this behavior is not guaranteed and could change in future implementations.</para>
            <para>Casing semantics depend on the culture in use.
      If using the invariant culture, the casing semantics are not culture-sensitive.
      If using a specific culture, the casing semantics are sensitive to that culture.</para>
            <para>If a security decision depends on a string comparison or a case-change operation,
      use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
      regardless of the culture settings of the system.
      However, the invariant culture must be used only by processes that require culture-independent results,
      such as system services; otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.</para>
            <para>For more information on cultures, see <see cref="System.Globalization.CultureInfo" />.</para>
        </remarks>
        <example>
            <para>The following code example changes the casing of a string based on the "en-US" culture.</para>
            <codelink SampleID="System.Globalization.TextInfo_casing" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.TextInfo.ToUpper" />
        <seealso cref="System.Globalization.TextInfo.ToTitleCase" />
    </doc><doc for="TextInfo.ToUpper">
        <overload>
            <para>Converts the specified character or string to uppercase.</para>
        </overload>
        <summary>
            <para>Converts the specified character to uppercase.</para>
        </summary>
        <param name="c">The character to convert to uppercase.</param>
        <returns>
            <para>The specified character converted to uppercase.</para>
        </returns>
        <remarks>
            <para>Casing semantics depend on the culture in use.
      If using the invariant culture, the casing semantics are not culture-sensitive.
      If using a specific culture, the casing semantics are sensitive to that culture.</para>
            <para>If a security decision depends on a string comparison or a case-change operation,
      use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
      regardless of the culture settings of the system.
      However, the invariant culture must be used only by processes that require culture-independent results,
      such as system services; otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.</para>
            <para>For more information on cultures, see <see cref="System.Globalization.CultureInfo" />.</para>
        </remarks>
        <example>
            <para>The following code example changes the casing of a string based on the "en-US" culture.</para>
            <codelink SampleID="System.Globalization.TextInfo_casing" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.TextInfo.ToLower" />
        <seealso cref="System.Globalization.TextInfo.ToTitleCase" />
    </doc><doc for="TextInfo.ToUpper1">
        <summary>
            <para>Converts the specified string to uppercase.</para>
        </summary>
        <param name="str">The string to convert to uppercase.</param>
        <returns>
            <para>The specified string converted to uppercase.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="str" /> is <see langword="null" />.</exception>
        <remarks>
            <para>The returned string might differ in length from the input string.
      For more information on casing, refer to the Unicode Technical Report #21 "Case Mappings," published by the Unicode Consortium (http://www.unicode.org).
      The current implementation preserves the length of the string; however, this behavior is not guaranteed and could change in future implementations.</para>
            <para>Casing semantics depend on the culture in use.
      If using the invariant culture, the casing semantics are not culture-sensitive.
      If using a specific culture, the casing semantics are sensitive to that culture.</para>
            <para>If a security decision depends on a string comparison or a case-change operation,
      use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
      regardless of the culture settings of the system.
      However, the invariant culture must be used only by processes that require culture-independent results,
      such as system services; otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.</para>
            <para>For more information on cultures, see <see cref="System.Globalization.CultureInfo" />.</para>
        </remarks>
        <example>
            <para>The following code example changes the casing of a string based on the "en-US" culture.</para>
            <codelink SampleID="System.Globalization.TextInfo_casing" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.TextInfo.ToLower" />
        <seealso cref="System.Globalization.TextInfo.ToTitleCase" />
    </doc><doc for="TextInfo.Equals">
        <summary>
            <para>Determines whether the specified object represents the same writing system
      as the current <see cref="System.Globalization.TextInfo" />.</para>
        </summary>
        <param name="obj">The object to compare with the current <see cref="System.Globalization.TextInfo" />.</param>
        <returns>
            <para><see langword="true" /> if <paramref name="obj" /> represents the same writing system
as the current <see cref="System.Globalization.TextInfo" />; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>
            <para>This method overrides <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <seealso cref="System.Object.Equals" qualify="true" />
    </doc><doc for="TextInfo.GetHashCode">
        <summary>
            <para>Serves as a hash function for the current <see cref="System.Globalization.TextInfo" />, suitable for use in hashing algorithms and data structures, such as a hash table.</para>
        </summary>
        <returns>
            <para>A hash code for the current <see cref="System.Globalization.TextInfo" />.</para>
        </returns>
        <remarks>
            <para>This method overrides <see cref="System.Object.GetHashCode" qualify="true" />.</para>
            <para>This method generates the same hash code for two objects
   that are equal according to the <see cref="System.Globalization.TextInfo.Equals" /> method.</para>
        </remarks>
        <seealso cref="System.Object.GetHashCode" qualify="true" />
        <seealso cref="System.Collections.Hashtable" qualify="true" />
        <seealso cref="System.Globalization.TextInfo.Equals" />
    </doc><doc for="TextInfo.ToString">
        <summary>
            <para>Returns a string that represents the current <see cref="System.Globalization.TextInfo" />.</para>
        </summary>
        <returns>
            <para>A string that represents the current <see cref="System.Globalization.TextInfo" />.</para>
        </returns>
        <remarks>
            <para>This method overrides <see cref="System.Object.ToString" qualify="true" />.</para>
        </remarks>
        <seealso cref="System.Object.ToString" qualify="true" />
        <seealso cref="System.String" />
    </doc><doc for="TextInfo.ToTitleCase">
        <summary>
            <para>Converts the specified string to titlecase.</para>
        </summary>
        <param name="str">The string to convert to titlecase.</param>
        <returns>
            <para>The specified string converted to titlecase.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="str" /> is <see langword="null" />.</exception>
        <remarks>
            <para>Generally, title casing converts the first character of a word to uppercase and converts the rest of the letters to lowercase. </para>
            <para>The returned string might differ in length from the input string.
 For more information on casing, refer to the Unicode Technical Report #21 "Case Mappings," published by the Unicode Consortium (http://www.unicode.org).
 The current implementation preserves the length of the string; however, this behavior is not guaranteed and could change in future implementations.</para>
            <para>Casing semantics depend on the culture in use.
 If using the invariant culture, the casing semantics are not culture-sensitive.
 If using a specific culture, the casing semantics are sensitive to that culture.
 Words that are selected for title casing depend on the language.</para>
            <para>If a security decision depends on a string comparison or a case-change operation,
      use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
      regardless of the culture settings of the system.
      However, the invariant culture must be used only by processes that require culture-independent results,
      such as system services; otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.</para>
            <para>For more information on cultures, see <see cref="System.Globalization.CultureInfo" />.</para>
        </remarks>
        <example>
            <para>The following code example changes the casing of a string based on the "en-US" culture.</para>
            <codelink SampleID="System.Globalization.TextInfo_casing" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.TextInfo.ToLower" />
        <seealso cref="System.Globalization.TextInfo.ToUpper" />
    </doc><doc for="TextInfo.IDeserializationCallback.OnDeserialization">
        <summary>
            <para>Implements the <see cref="System.Runtime.Serialization.ISerializable" /> interface and raises the deserialization event when the deserialization is complete.</para>
        </summary>
        <param name="sender">The source of the deserialization event.</param>
<exception cref="System.Runtime.Serialization.SerializationException">The <see cref="System.Runtime.Serialization.SerializationInfo" qualify="true" /> object associated with the current <see cref="System.Globalization.TextInfo" /> is invalid.</exception>
        <seealso cref="System.Runtime.Serialization.ISerializable" />
    </doc>
</docs>
