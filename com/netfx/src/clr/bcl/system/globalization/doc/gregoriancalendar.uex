<docs>
    <doc for="GregorianCalendarTypes">
        <summary>
            <para>Defines the different language versions of the Gregorian calendar.</para>
        </summary>
        <remarks>
            <para>The date and time patterns associated with the <see cref="System.Globalization.GregorianCalendar" /> vary depending on the language.
 If the <see cref="System.Globalization.GregorianCalendar" /> is selected in <see cref="System.Globalization.DateTimeFormatInfo.Calendar" qualify="true" />,
 <see cref="System.Globalization.GregorianCalendarTypes" /> can be used to specify which date and time patterns to use in that <see cref="System.Globalization.DateTimeFormatInfo" />.</para>
            <para>For Arabic cultures, more language versions of the Gregorian calendar are available.
 For example, you can use the French version of <see cref="System.Globalization.GregorianCalendar" /> using the <see cref="System.Globalization.GregorianCalendarTypes.MiddleEastFrench" /> value.</para>
            <para>A culture that supports <see cref="System.Globalization.GregorianCalendar" /> might not support all language versions of <see cref="System.Globalization.GregorianCalendar" />.
 The <see cref="System.Globalization.CultureInfo.Calendar" qualify="true" /> and <see cref="System.Globalization.CultureInfo.OptionalCalendars" qualify="true" /> properties specify the calendars supported by that culture.
 If <see cref="System.Globalization.GregorianCalendar" /> is supported, <see cref="System.Globalization.GregorianCalendar.CalendarType" /> can be used to determine which language versions of <see cref="System.Globalization.GregorianCalendar" /> are supported.</para>
        </remarks>
        <example>
            <para>The following code example demonstrates how to determine the GregorianCalendar language version supported by the culture.</para>
            <codelink SampleID="System.Globalization.GregorianCalendarTypes" SnippetID="1" />
            <para>The following code example prints a <see cref="System.DateTime" /> using a <see cref="System.Globalization.GregorianCalendar" /> that is localized.</para>
            <codelink SampleID="System.Globalization.GregorianCalendarLocalized" SnippetID="1" />
        </example>
    </doc><doc for="GregorianCalendarTypes.Localized">
        <summary>
            <para>Refers to the localized version of the Gregorian calendar,
 based on the language of the <see cref="System.Globalization.CultureInfo" />
 that uses the <see cref="System.Globalization.DateTimeFormatInfo" />.</para>
        </summary>
    </doc><doc for="GregorianCalendarTypes.USEnglish">
        <summary>
            <para>Refers to the U.S. English version of the Gregorian calendar.</para>
        </summary>
    </doc><doc for="GregorianCalendarTypes.MiddleEastFrench">
        <summary>
            <para>Refers to the Middle East French version of the Gregorian calendar.</para>
        </summary>
    </doc><doc for="GregorianCalendarTypes.Arabic">
        <summary>
            <para>Refers to the Arabic version of the Gregorian calendar.</para>
        </summary>
    </doc><doc for="GregorianCalendarTypes.TransliteratedEnglish">
        <summary>
            <para>Refers to the transliterated English version of the Gregorian calendar.</para>
        </summary>
    </doc><doc for="GregorianCalendarTypes.TransliteratedFrench">
        <summary>
            <para>Refers to the transliterated French version of the Gregorian calendar.</para>
        </summary>
    </doc><doc for="GregorianCalendar">
        <summary>
            <para>Represents the Gregorian calendar.</para>
        </summary>
        <remarks>
            <para>The Gregorian calendar recognizes two eras: B.C. (before Christ) or B.C.E. (before common era),
 and A.D. (Latin "Anno Domini", which means "in the year of the Lord") or C.E. (common era).
 This implementation of the <see cref="System.Globalization.GregorianCalendar" /> class recognizes only the current era (A.D. or C.E.).</para>
            <para>A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four,
 except if it is divisible by 100; however, years that are divisible by 400 are leap years.
 For example, the year 1900 was not a leap year, but the year 2000 was.
 A common year has 365 days and a leap year has 366 days.</para>
            <para>The Gregorian calendar has 12 months with 28 to 31 days each:
 January (31 days), February (28 or 29 days), March (31 days), April (30 days),
 May (31 days), June (30 days), July (31 days), August (31 days),
 September (30 days), October (31 days), November (30 days), and December (31 days).
 February has 29 days during leap years and 28 during common years.</para>
            <para>Each <see cref="System.Globalization.CultureInfo" /> supports a set of calendars.
 The <see cref="System.Globalization.CultureInfo.Calendar" /> property returns the default calendar for the culture, and
 the <see cref="System.Globalization.CultureInfo.OptionalCalendars" /> property returns an array containing all the calendars supported by the culture.
 To change the calendar used by a <see cref="System.Globalization.CultureInfo" />,
 set the <see cref="System.Globalization.DateTimeFormatInfo.Calendar" /> property of <see cref="System.Globalization.CultureInfo.DateTimeFormat" qualify="true" />
 to a new <see cref="System.Globalization.Calendar" />.</para>
            <para><see cref="System.Globalization.DateTimeFormatInfo.GetEra" /> ignores punctuation in abbreviated era names,
 only if the <see cref="System.Globalization.GregorianCalendar" /> is selected in <see cref="System.Globalization.DateTimeFormatInfo.Calendar" qualify="true" />
 and the culture uses "A.D." as the era name; that is, "A.D." is equivalent to "AD".</para>
        </remarks>
        <example>
            <para>The following code example shows that <see cref="System.Globalization.DateTimeFormatInfo" /> ignores the punctuation in the era name, only if the calendar is Gregorian and the culture uses the era name "A.D.".</para>
            <codelink SampleID="System.Globalization.GregorianCalendar.GetEra" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar" />
        <seealso cref="System.Globalization.CultureInfo.Calendar" qualify="true" />
        <seealso cref="System.Globalization.CultureInfo.OptionalCalendars" qualify="true" />
    </doc><doc for="GregorianCalendar.ADEra">
        <summary>
            <para>Represents the current era. This field is constant.</para>
        </summary>
        <remarks>
            <para>The Gregorian calendar recognizes two eras: B.C. (before Christ) or B.C.E. (before common era),
      and A.D. (Latin "Anno Domini", which means "in the year of the Lord") or C.E. (common era).
      This implementation of the <see cref="System.Globalization.GregorianCalendar" /> class recognizes only the current era (A.D. or C.E.).
      This field always returns 1.</para>
        </remarks>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.GregorianCalendar.Eras" />
    </doc><doc for="GregorianCalendar.GregorianCalendar">
        <overload>
            <para>Initializes a new instance of the <see cref="System.Globalization.GregorianCalendar" /> class.</para>
        </overload>
        <summary>
            <para>Initializes a new instance of the <see cref="System.Globalization.GregorianCalendar" /> class
 using the default <see cref="System.Globalization.GregorianCalendarTypes" /> value.</para>
        </summary>
        <remarks>
            <para>The default <see cref="System.Globalization.GregorianCalendarTypes" /> value is <see cref="System.Globalization.GregorianCalendarTypes.Localized" />.
 If the <see cref="System.Globalization.DateTimeFormatInfo.Calendar" qualify="true" /> property of the <see cref="System.Globalization.CultureInfo" />
 is set to a <see cref="System.Globalization.GregorianCalendar" /> that is created with this constructor,
 the dates and times are localized in the language associated with the <see cref="System.Globalization.CultureInfo" />.</para>
        </remarks>
        <example>
            <para>The following code example prints a <see cref="System.DateTime" /> using a <see cref="System.Globalization.GregorianCalendar" /> that is localized.</para>
            <codelink SampleID="System.Globalization.GregorianCalendarLocalized" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.GregorianCalendarTypes" />
    </doc><doc for="GregorianCalendar.GregorianCalendar1">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Globalization.GregorianCalendar" /> class
 using the specified <see cref="System.Globalization.GregorianCalendarTypes" /> value.</para>
        </summary>
        <param name="type">The <see cref="System.Globalization.GregorianCalendarTypes" /> value that denotes which language version of the calendar to create.</param>
        <seealso cref="System.Globalization.GregorianCalendarTypes" />
    </doc><doc for="GregorianCalendar.CalendarType">
        <summary>
            <para>Gets or sets the <see cref="System.Globalization.GregorianCalendarTypes" /> value
 that denotes the language version of the current <see cref="System.Globalization.GregorianCalendar" />.</para>
        </summary>
        <value>
            <para>A <see cref="System.Globalization.GregorianCalendarTypes" /> value
 that denotes the language version of the current <see cref="System.Globalization.GregorianCalendar" />.</para>
        </value>
        <example>
            <para>The following code example demonstrates how to determine the GregorianCalendar language version supported by the culture.</para>
            <codelink SampleID="System.Globalization.GregorianCalendarTypes" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.GregorianCalendarTypes" />
    </doc><doc for="GregorianCalendar.AddMonths">
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is the specified number of months away from the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to which to add months.</param>
        <param name="months">The number of months to add.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that results from adding the specified number of months to the specified <see cref="System.DateTime" />.</para>
        </returns>
        <exception cref="System.ArgumentException">The resulting <see cref="System.DateTime" /> is outside the supported range.</exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="months" /> is less than -120000.</para><para>-or-</para>
            <para><paramref name="months" /> is greater than 120000.</para></exception>
        <remarks>
            <para>The day part of the resulting <see cref="System.DateTime" /> is affected if the resulting day is not a valid day in the resulting month of the resulting year;
   it is changed to the last valid day in the resulting month of the resulting year.
   The year part of the resulting <see cref="System.DateTime" /> is affected if the resulting month is outside the year of the specified <see cref="System.DateTime" />.
   This implementation only supports the current era; therefore, <see cref="System.ArgumentException" /> is thrown if the resulting year is outside the era of the specified <see cref="System.DateTime" />.
   The time-of-day part of the resulting <see cref="System.DateTime" /> remains the same as the specified <see cref="System.DateTime" />.</para>
            <para>For example, if the specified month is October, which has 31 days,
   the specified day is the 31st day of that month,
   and the value of the <paramref name="months" /> parameter is 6,
   the resulting year is one more than the specified year,
   the resulting month is April,
   and the resulting day is the 30th day, which is the last day in April.</para>
            <para>If the value of the <paramref name="months" /> parameter is negative, the resulting <see cref="System.DateTime" /> is earlier than the specified <see cref="System.DateTime" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.GregorianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.GregorianCalendar.AddYears" />
        <seealso cref="System.Globalization.GregorianCalendar.AddWeeks" />
        <seealso cref="System.Globalization.Calendar.AddDays" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddHours" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddMinutes" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddSeconds" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddMilliseconds" qualify="true" />
    </doc><doc for="GregorianCalendar.AddWeeks">
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is the specified number of weeks away from the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to which to add weeks.</param>
        <param name="weeks">The number of weeks to add.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that results from adding the specified number of weeks to the specified <see cref="System.DateTime" />.</para>
        </returns>
        <exception cref="System.ArgumentException">The resulting <see cref="System.DateTime" /> is outside the supported range. </exception>
        <remarks>
            <para>The month part of the resulting <see cref="System.DateTime" /> is affected if the resulting day is outside the month of the specified <see cref="System.DateTime" />.
   The year part of the resulting <see cref="System.DateTime" /> is affected if the resulting month is outside the year of the specified <see cref="System.DateTime" />.
   This implementation only supports the current era; therefore, <see cref="System.ArgumentException" /> is thrown if the resulting year is outside the era of the specified <see cref="System.DateTime" />.
   The time-of-day part of the resulting <see cref="System.DateTime" /> remains the same as the specified <see cref="System.DateTime" />.</para>
            <para>If <paramref name="weeks" /> is negative, the resulting <see cref="System.DateTime" /> is earlier than the specified <see cref="System.DateTime" />.</para>
            <para>In all .NET Framework classes derived from the <see cref="System.Globalization.Calendar" /> class, a week is defined as seven days.</para>
        </remarks>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.GregorianCalendar.AddYears" />
        <seealso cref="System.Globalization.GregorianCalendar.AddMonths" />
        <seealso cref="System.Globalization.Calendar.AddDays" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddHours" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddMinutes" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddSeconds" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddMilliseconds" qualify="true" />
    </doc><doc for="GregorianCalendar.AddYears">
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is the specified number of years
   away from the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to which to add years.</param>
        <param name="years">The number of years to add.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that results from adding the specified number of years to the specified <see cref="System.DateTime" />.</para>
        </returns>
        <exception cref="System.ArgumentException">The resulting <see cref="System.DateTime" /> is outside the supported range. </exception>
        <remarks>
            <para>The day part of the resulting <see cref="System.DateTime" /> is affected if the resulting day is not a valid day in the resulting month of the resulting year;
   it is changed to the last valid day in the resulting month of the resulting year.
   The month part of the resulting <see cref="System.DateTime" /> remains the same as the specified <see cref="System.DateTime" />.
   This implementation only supports the current era; therefore, <see cref="System.ArgumentException" /> is thrown if the resulting year is outside the era of the specified <see cref="System.DateTime" />.
   The time-of-day part of the resulting <see cref="System.DateTime" /> remains the same as the specified <see cref="System.DateTime" />.</para>
            <para>For example, February has 28 days, except during leap years when it has 29 days.
   If the specified date is the 29th day of February in a leap year and the value of <paramref name="years" /> is 1,
   the resulting date will be the 28th day of February in the following year.</para>
            <para>If <paramref name="years" /> is negative, the resulting <see cref="System.DateTime" /> is earlier than the specified <see cref="System.DateTime" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.GregorianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.GregorianCalendar.AddMonths" />
        <seealso cref="System.Globalization.GregorianCalendar.AddWeeks" />
        <seealso cref="System.Globalization.Calendar.AddDays" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddHours" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddMinutes" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddSeconds" qualify="true" />
        <seealso cref="System.Globalization.Calendar.AddMilliseconds" qualify="true" />
    </doc><doc for="GregorianCalendar.GetDayOfMonth">
        <summary>
            <para>Returns the day of the month in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>An integer from 1 to 31 that represents the day of the month in <paramref name="time" />.</para>
        </returns>
        <example>
            <codelink SampleID="System.Globalization.GregorianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.Day" qualify="true" />
        <seealso cref="System.Globalization.GregorianCalendar.GetEra" />
        <seealso cref="System.Globalization.GregorianCalendar.GetYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetMonth" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" qualify="true" />
    </doc><doc for="GregorianCalendar.GetDayOfWeek">
        <summary>
            <para>Returns the day of the week in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>A <see cref="System.DayOfWeek" /> value that represents the day of the week in <paramref name="time" />.</para>
        </returns>
        <remarks>
            <para>The <see cref="System.DayOfWeek" /> values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.GregorianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.DayOfWeek" qualify="true" />
        <seealso cref="System.DayOfWeek" qualify="true" />
        <seealso cref="System.Globalization.GregorianCalendar.GetEra" />
        <seealso cref="System.Globalization.GregorianCalendar.GetYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetMonth" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" qualify="true" />
    </doc><doc for="GregorianCalendar.GetDayOfYear">
        <summary>
            <para>Returns the day of the year in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>An integer from 1 to 366 that represents the day of the year in <paramref name="time" />.</para>
        </returns>
        <remarks>
            <para>The day of the year is defined as the number of days from the first day of the year.
      For example, <see cref="System.Globalization.GregorianCalendar.GetDayOfYear" /> for the first day of the first month returns 1,
      and <see cref="System.Globalization.GregorianCalendar.GetDayOfYear" /> for the last day of the last month returns the total number of days in that year,
      which is the same value returned by <see cref="System.Globalization.GregorianCalendar.GetDaysInYear" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.GregorianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.DayOfYear" qualify="true" />
        <seealso cref="System.Globalization.GregorianCalendar.GetEra" />
        <seealso cref="System.Globalization.GregorianCalendar.GetYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetMonth" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" qualify="true" />
    </doc><doc for="GregorianCalendar.GetDaysInMonth">
        <overload>
            <para>Returns the number of days in the specified month.</para>
        </overload>
        <summary>
            <para>Returns the number of days in the specified month in the specified year in the specified era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para>The number of days in the specified month in the specified year in the specified era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para>For example, this method returns 28 or 29 for February (<paramref name="month" /> = 2),
   depending on whether <paramref name="year" /> is a leap year.</para>
        </remarks>
        <example>
            <para>The following code example calls GetDaysInMonth for the second month in each of five years in each era.</para>
            <codelink SampleID="System.Globalization.GregorianCalendar.GetDaysInMonth" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.GregorianCalendar.ADEra" />
        <seealso cref="System.Globalization.GregorianCalendar.Eras" />
        <seealso cref="System.Globalization.GregorianCalendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDaysInYear" />
    </doc><doc for="GregorianCalendar.GetDaysInYear">
        <overload>
            <para>Returns the number of days in the specified year.</para>
        </overload>
        <summary>
            <para>Returns the number of days in the specified year in the specified era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para>The number of days in the specified year in the specified era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="year" /> is outside the range supported by the calendar.</exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para>For example, this method returns 365 or 366, depending on whether <paramref name="year" /> is a leap year.</para>
        </remarks>
        <example>
            <para>The following code example calls GetDaysInYear for five years in each era.</para>
            <codelink SampleID="System.Globalization.GregorianCalendar.GetDaysInYear" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.GregorianCalendar.ADEra" />
        <seealso cref="System.Globalization.GregorianCalendar.Eras" />
        <seealso cref="System.Globalization.GregorianCalendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDaysInMonth" />
    </doc><doc for="GregorianCalendar.GetEra">
        <summary>
            <para>Returns the era in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>An integer that represents the era in <paramref name="time" />.</para>
        </returns>
        <remarks>
            <para>The Gregorian calendar recognizes two eras: B.C. (before Christ) or B.C.E. (before common era),
      and A.D. (Latin "Anno Domini", which means "in the year of the Lord") or C.E. (common era).
      This implementation of the <see cref="System.Globalization.GregorianCalendar" /> class recognizes only the current era (A.D. or C.E.).</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.GregorianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.GregorianCalendar.ADEra" />
        <seealso cref="System.Globalization.GregorianCalendar.Eras" />
        <seealso cref="System.Globalization.GregorianCalendar.GetYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetMonth" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetHour" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetMinute" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetSecond" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" qualify="true" />
    </doc><doc for="GregorianCalendar.Eras">
        <summary>
            <para>Gets the list of eras in the <see cref="System.Globalization.GregorianCalendar" />.</para>
        </summary>
        <value>
            <para>An array of integers that represents the eras in the <see cref="System.Globalization.GregorianCalendar" />.</para>
        </value>
        <remarks>
            <para>The Gregorian calendar recognizes two eras: B.C. (before Christ) or B.C.E. (before common era),
      and A.D. (Latin "Anno Domini", which means "in the year of the Lord") or C.E. (common era).
      This implementation of the <see cref="System.Globalization.GregorianCalendar" /> class recognizes only the current era (A.D. or C.E.).
      This property always returns an array with only one element.</para>
        </remarks>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.GregorianCalendar.ADEra" />
    </doc><doc for="GregorianCalendar.GetMonth">
        <summary>
            <para>Returns the month in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>An integer from 1 to 12 that represents the month in <paramref name="time" />.</para>
        </returns>
        <example>
            <codelink SampleID="System.Globalization.GregorianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.Month" qualify="true" />
        <seealso cref="System.Globalization.GregorianCalendar.GetEra" />
        <seealso cref="System.Globalization.GregorianCalendar.GetYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetHour" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetMinute" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetSecond" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" qualify="true" />
    </doc><doc for="GregorianCalendar.GetMonthsInYear">
        <overload>
            <para>Returns the number of months in the specified year.</para>
        </overload>
        <summary>
            <para>Returns the number of months in the specified year in the specified era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para>The number of months in the specified year in the specified era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="year" /> is outside the range supported by the calendar.</exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <example>
            <para>The following code example calls GetMonthsInYear for five years in each era.</para>
            <codelink SampleID="System.Globalization.GregorianCalendar.GetMonthsInYear" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.GregorianCalendar.ADEra" />
        <seealso cref="System.Globalization.GregorianCalendar.Eras" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDaysInYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDaysInMonth" />
    </doc><doc for="GregorianCalendar.GetYear">
        <summary>
            <para>Returns the year in the specified <see cref="System.DateTime" />.</para>
        </summary>
        <param name="time">The <see cref="System.DateTime" /> to read.</param>
        <returns>
            <para>An integer that represents the year in <paramref name="time" />.</para>
        </returns>
        <example>
            <codelink SampleID="System.Globalization.GregorianCalendar_AddGet" SnippetID="1" />
        </example>
        <seealso cref="System.DateTime.Year" qualify="true" />
        <seealso cref="System.Globalization.GregorianCalendar.GetEra" />
        <seealso cref="System.Globalization.GregorianCalendar.GetMonth" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfMonth" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDayOfWeek" />
        <seealso cref="System.Globalization.Calendar.GetWeekOfYear" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetHour" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetMinute" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetSecond" qualify="true" />
        <seealso cref="System.Globalization.Calendar.GetMilliseconds" qualify="true" />
    </doc><doc for="GregorianCalendar.IsLeapDay">
        <overload>
            <para>Determines whether the specified day is a leap day.</para>
        </overload>
        <summary>
            <para>Determines whether the specified date in the specified era is a leap day.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="day">An integer from 1 to 31 that represents the day.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para><see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="day" /> is outside the range supported by the calendar.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para>A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four,
 except if it is divisible by 100; however, years that are divisible by 400 are leap years.
 For example, the year 1900 was not a leap year, but the year 2000 was.
 A common year has 365 days and a leap year has 366 days.</para>
            <para>A leap day is a day that occurs only in a leap year.
 In the Gregorian calendar, the 29th day of February is the only leap day.</para>
        </remarks>
        <example>
            <para>The following code example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.</para>
            <codelink SampleID="System.Globalization.GregorianCalendar.IsLeapDay" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.GregorianCalendar.ADEra" />
        <seealso cref="System.Globalization.GregorianCalendar.Eras" />
        <seealso cref="System.Globalization.GregorianCalendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDaysInMonth" />
        <seealso cref="System.Globalization.GregorianCalendar.IsLeapYear" />
        <seealso cref="System.Globalization.GregorianCalendar.IsLeapMonth" />
    </doc><doc for="GregorianCalendar.IsLeapMonth">
        <overload>
            <para>Determines whether the specified month is a leap month.</para>
        </overload>
        <summary>
            <para>Determines whether the specified month in the specified year in the specified era is a leap month.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para>This method always returns <see langword="false" />, unless overridden by a derived class.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para>A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four,
 except if it is divisible by 100; however, years that are divisible by 400 are leap years.
 For example, the year 1900 was not a leap year, but the year 2000 was.
 A common year has 365 days and a leap year has 366 days.</para>
            <para>A leap month is an entire month that occurs only in a leap year.
 The Gregorian calendar does not have any leap months.</para>
        </remarks>
        <example>
            <para>The following code example calls IsLeapMonth for all the months in five years in the current era.</para>
            <codelink SampleID="System.Globalization.GregorianCalendar.IsLeapMonth" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.GregorianCalendar.ADEra" />
        <seealso cref="System.Globalization.GregorianCalendar.Eras" />
        <seealso cref="System.Globalization.GregorianCalendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.GregorianCalendar.IsLeapYear" />
        <seealso cref="System.Globalization.GregorianCalendar.IsLeapDay" />
    </doc><doc for="GregorianCalendar.IsLeapYear">
        <overload>
            <para>Determines whether the specified year is a leap year.</para>
        </overload>
        <summary>
            <para>Determines whether the specified year in the specified era is a leap year.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para><see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="year" /> is outside the range supported by the calendar.</exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <remarks>
            <para>A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four,
 except if it is divisible by 100; however, years that are divisible by 400 are leap years.
 For example, the year 1900 was not a leap year, but the year 2000 was.
 A common year has 365 days and a leap year has 366 days.</para>
        </remarks>
        <example>
            <para>The following code example calls IsLeapYear for five years in each of the eras.</para>
            <codelink SampleID="System.Globalization.GregorianCalendar.IsLeapYear" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.GregorianCalendar.ADEra" />
        <seealso cref="System.Globalization.GregorianCalendar.Eras" />
        <seealso cref="System.Globalization.GregorianCalendar.IsLeapMonth" />
        <seealso cref="System.Globalization.GregorianCalendar.IsLeapDay" />
    </doc><doc for="GregorianCalendar.ToDateTime">
        <overload>
            <para>Returns a <see cref="System.DateTime" /> that is set to the specified date.</para>
        </overload>
        <summary>
            <para>Returns a <see cref="System.DateTime" /> that is set to the specified date and time in the specified era.</para>
        </summary>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="day">An integer from 1 to 31 that represents the day.</param>
        <param name="hour">An integer from 0 to 23 that represents the hour.</param>
        <param name="minute">An integer from 0 to 59 that represents the minute.</param>
        <param name="second">An integer from 0 to 59 that represents the second.</param>
        <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
        <param name="era">An integer that represents the era.</param>
        <returns>
            <para>The <see cref="System.DateTime" /> that is set to the specified date and time in the current era.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="month" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="day" /> is outside the range supported by the calendar.</para><para>-or-</para>
            <para><paramref name="hour" /> is less than zero or greater than 23.</para><para>-or-</para>
            <para><paramref name="minute" /> is less than zero or greater than 59.</para><para>-or-</para>
            <para><paramref name="second" /> is less than zero or greater than 59.</para><para>-or-</para>
            <para><paramref name="millisecond" /> is less than zero or greater than 999.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="era" /> is outside the range supported by the calendar.</exception>
        <seealso cref="System.DateTime" qualify="true" />
        <seealso cref="System.Globalization.Calendar.CurrentEra" />
        <seealso cref="System.Globalization.GregorianCalendar.ADEra" />
        <seealso cref="System.Globalization.GregorianCalendar.Eras" />
        <seealso cref="System.Globalization.GregorianCalendar.GetMonthsInYear" />
        <seealso cref="System.Globalization.GregorianCalendar.GetDaysInMonth" />
    </doc><doc for="GregorianCalendar.TwoDigitYearMax">
        <summary>
            <para>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</para>
        </summary>
        <value>
            <para>The last year of a 100-year range that can be represented by a 2-digit year.</para>
        </value>
        <remarks>
            <para>This property allows a 2-digit year to be properly translated to a 4-digit year.
 For example, if this property is set to 2029, the 100-year range is from 1930 to 2029;
 therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.</para>
            <para>The initial value of this property is derived from the settings in Regional and Language Options (or Regional Options or Regional Settings) in Control Panel in Windows.
 However, that information can change during the life of the <see cref="System.AppDomain" />.
 The <see cref="System.Globalization.GregorianCalendar" /> class does not detect changes in the system settings automatically.</para>
        </remarks>
        <seealso cref="System.Globalization.GregorianCalendar.ToFourDigitYear" />
    </doc><doc for="GregorianCalendar.ToFourDigitYear">
        <summary>
            <para>Converts the specified two-digit year to a four-digit year by
      using the <see cref="System.Globalization.GregorianCalendar.TwoDigitYearMax" /> property to determine the
      appropriate century.</para>
        </summary>
        <param name="year">A two-digit integer that represents the year to convert.</param>
        <returns>
            <para>An integer that contains the four-digit representation of <paramref name="year" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="year" /> is outside the range supported by the calendar.</para></exception>
        <remarks>
            <para><see cref="System.Globalization.GregorianCalendar.TwoDigitYearMax" /> is the last year in the 100-year range that can be represented by a two-digit year.
 The century is determined by finding the sole occurrence of the two-digit <paramref name="year" /> within that 100-year range.
 For example, if <see cref="System.Globalization.GregorianCalendar.TwoDigitYearMax" /> is set to 2029, the 100-year range is from 1930 to 2029;
 therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.</para>
        </remarks>
        <seealso cref="System.Globalization.GregorianCalendar.TwoDigitYearMax" />
    </doc>
</docs>
