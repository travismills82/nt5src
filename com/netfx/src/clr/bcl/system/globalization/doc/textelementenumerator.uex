<docs>
    <doc for="TextElementEnumerator">
        <summary>
            <para>Enumerates the text elements of a string.</para>
        </summary>
        <remarks>
            <para>The .NET Framework defines a text element as a unit of text that is displayed as a single character; that is, a grapheme.
      A text element can be a base character, a surrogate pair, or a combining character sequence.
      The Unicode Standard defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units,
      where the first unit of the pair is a high-surrogate and the second is a low-surrogate.
      The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.
      A surrogate pair can represent a base character or a combining character.
      For more information on surrogate pairs and combining character sequences, see The Unicode Standard at http://www.unicode.org.</para>
            <para>Text element enumerators are intended to be used only to read data in the string.
      Enumerators cannot be used to modify the underlying string.</para>
            <para>The enumerator does not have exclusive access to the string.</para>
            <para>When an enumerator is created, it takes a snapshot of the current state of the string.
      If changes are made to the string, such as adding, modifying, or deleting text elements,
      the snapshot gets out of sync and the enumerator throws an <see cref="System.InvalidOperationException" />.
      Two enumerators created from the same string at the same time can have different snapshots of the string.</para>
            <para>The enumerator is in an invalid state if it is positioned before the first text element in the string or after the last text element in the string.
      Whenever the enumerator is in an invalid state, calling <see cref="System.Globalization.TextElementEnumerator.Current" /> throws an exception.</para>
            <para>Initially, the enumerator is positioned before the first text element in the string.
   <see cref="System.Globalization.TextElementEnumerator.Reset" /> also brings the enumerator back to this position.
      Therefore, after an enumerator is created or after a <see cref="System.Globalization.TextElementEnumerator.Reset" />,
   <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> must be called to advance the enumerator
      to the first text element of the string before reading the value of <see cref="System.Globalization.TextElementEnumerator.Current" />.</para>
            <para><see cref="System.Globalization.TextElementEnumerator.Current" /> returns the same object
   until either <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> or <see cref="System.Globalization.TextElementEnumerator.Reset" /> is called.</para>
            <para>After the end of the string is passed, the enumerator is again in an invalid state and calling <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> returns <see langword="false" />.
 Calling <see cref="System.Globalization.TextElementEnumerator.Current" /> throws an exception if the last call to <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> returned <see langword="false" />.</para>
        </remarks>
        <example>
            <para>The following code example shows the values returned by TextElementEnumerator.</para>
            <codelink SampleID="System.Globalization.TextElementEnumerator.Summary" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.IEnumerator" qualify="true" />
    </doc><doc for="TextElementEnumerator.MoveNext">
        <summary>
            <para>Advances the enumerator to the next text element of the string.</para>
        </summary>
        <returns>
            <para><see langword="true" /> if the enumerator was successfully advanced to the next text element;
 <see langword="false" /> if the enumerator has passed the end of the string.</para>
        </returns>
        <exception cref="System.InvalidOperationException"><para>The string was modified after the enumerator was created.</para></exception>
        <remarks>
            <para>The .NET Framework defines a text element as a unit of text that is displayed as a single character; that is, a grapheme.
      A text element can be a base character, a surrogate pair, or a combining character sequence.
      The Unicode Standard defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units,
      where the first unit of the pair is a high-surrogate and the second is a low-surrogate.
      The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.
      A surrogate pair can represent a base character or a combining character.
      For more information on surrogate pairs and combining character sequences, see The Unicode Standard at http://www.unicode.org.</para>
            <para>After an enumerator is created or after a call to <see cref="System.Globalization.TextElementEnumerator.Reset" />,
 the enumerator is positioned before the first text element of the string,
 and the first call to <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> moves the enumerator over the first text element of the string.</para>
            <para>If the string is modified after this enumerator was created,
<see cref="System.Globalization.TextElementEnumerator.MoveNext" /> throws an exception.</para>
            <para>After the end of the string is passed, subsequent calls to <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> return <see langword="false" />
until <see cref="System.Globalization.TextElementEnumerator.Reset" /> is called.</para>
        </remarks>
        <seealso cref="System.Globalization.TextElementEnumerator.Current" />
        <seealso cref="System.Globalization.TextElementEnumerator.Reset" />
    </doc><doc for="TextElementEnumerator.Current">
        <summary>
            <para>Gets the current text element in the string.</para>
        </summary>
        <value>
            <para>An object containing the current text element in the string.</para>
        </value>
        <exception cref="System.InvalidOperationException"><para>The enumerator is positioned before the first text element of the string or after the last text element.</para></exception>
        <remarks>
            <para>The .NET Framework defines a text element as a unit of text that is displayed as a single character; that is, a grapheme.
      A text element can be a base character, a surrogate pair, or a combining character sequence.
      The Unicode Standard defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units,
      where the first unit of the pair is a high-surrogate and the second is a low-surrogate.
      The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.
      A surrogate pair can represent a base character or a combining character.
      For more information on surrogate pairs and combining character sequences, see The Unicode Standard at http://www.unicode.org.</para>
            <para>After an enumerator is created or after a <see cref="System.Globalization.TextElementEnumerator.Reset" />,
   <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> must be called to advance the enumerator to the first text element of the string
before reading the value of <see cref="System.Globalization.TextElementEnumerator.Current" />;
otherwise, <see cref="System.Globalization.TextElementEnumerator.Current" /> is undefined.</para>
            <para><see cref="System.Globalization.TextElementEnumerator.Current" /> also throws an exception
if the last call to <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> returned <see langword="false" />,
which indicates the end of the string.</para>
            <para><see cref="System.Globalization.TextElementEnumerator.Current" /> does not move the position of the enumerator
and consecutive calls to <see cref="System.Globalization.TextElementEnumerator.Current" /> return the same object
until either <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> or <see cref="System.Globalization.TextElementEnumerator.Reset" /> is called.</para>
        </remarks>
        <seealso cref="System.Globalization.TextElementEnumerator.GetTextElement" />
        <seealso cref="System.Globalization.TextElementEnumerator.ElementIndex" />
        <seealso cref="System.Globalization.TextElementEnumerator.MoveNext" />
        <seealso cref="System.Globalization.TextElementEnumerator.Reset" />
    </doc><doc for="TextElementEnumerator.GetTextElement">
        <summary>
            <para>Gets the current text element in the string.</para>
        </summary>
        <returns>
            <para>A new string containing the current text element in the string being read.</para>
        </returns>
        <exception cref="System.InvalidOperationException"><para>The enumerator is positioned before the first text element of the string or after the last text element.</para></exception>
        <remarks>
            <para>The .NET Framework defines a text element as a unit of text that is displayed as a single character; that is, a grapheme.
      A text element can be a base character, a surrogate pair, or a combining character sequence.
      The Unicode Standard defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units,
      where the first unit of the pair is a high-surrogate and the second is a low-surrogate.
      The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.
      A surrogate pair can represent a base character or a combining character.
      For more information on surrogate pairs and combining character sequences, see The Unicode Standard at http://www.unicode.org.</para>
            <para>This method returns the same text element as the <see cref="System.Globalization.TextElementEnumerator.Current" /> property.</para>
        </remarks>
        <seealso cref="System.Globalization.TextElementEnumerator.Current" />
        <seealso cref="System.Globalization.TextElementEnumerator.ElementIndex" />
    </doc><doc for="TextElementEnumerator.ElementIndex">
        <summary>
            <para>Gets the index of the text element that the enumerator is currently positioned over.</para>
        </summary>
        <value>
            <para>The index of the text element that the enumerator is currently positioned over.</para>
        </value>
        <exception cref="System.InvalidOperationException"><para>The enumerator is positioned before the first text element of the string or after the last text element.</para></exception>
        <remarks>
            <para>The .NET Framework defines a text element as a unit of text that is displayed as a single character; that is, a grapheme.
      A text element can be a base character, a surrogate pair, or a combining character sequence.
      The Unicode Standard defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units,
      where the first unit of the pair is a high-surrogate and the second is a low-surrogate.
      The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.
      A surrogate pair can represent a base character or a combining character.
      For more information on surrogate pairs and combining character sequences, see The Unicode Standard at http://www.unicode.org.</para>
        </remarks>
        <seealso cref="System.Globalization.TextElementEnumerator.Current" />
        <seealso cref="System.Globalization.TextElementEnumerator.GetTextElement" />
    </doc><doc for="TextElementEnumerator.Reset">
        <summary>
            <para>Sets the enumerator to its initial position, which is before the first text element in the string.</para>
        </summary>
        <exception cref="System.InvalidOperationException"><para>The string was modified after the enumerator was created.</para></exception>
        <remarks>
            <para>The .NET Framework defines a text element as a unit of text that is displayed as a single character; that is, a grapheme.
      A text element can be a base character, a surrogate pair, or a combining character sequence.
      The Unicode Standard defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units,
      where the first unit of the pair is a high-surrogate and the second is a low-surrogate.
      The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.
      A surrogate pair can represent a base character or a combining character.
      For more information on surrogate pairs and combining character sequences, see The Unicode Standard at http://www.unicode.org.</para>
            <para><see cref="System.Globalization.TextElementEnumerator.Reset" /> moves the enumerator to the beginning of the string, before the first text element.
   After <see cref="System.Globalization.TextElementEnumerator.Reset" />,
<see cref="System.Globalization.TextElementEnumerator.MoveNext" /> must be called
   to advance the enumerator to the first text element of the string
   before reading the value of <see cref="System.Globalization.TextElementEnumerator.Current" />.</para>
        </remarks>
        <seealso cref="System.Globalization.TextElementEnumerator.MoveNext" />
        <seealso cref="System.Globalization.TextElementEnumerator.Current" />
    </doc>
</docs>
