<docs>
    <doc for="StringInfo">
        <summary>
            <para>Provides functionality to split a string into text elements and to iterate through those text elements.</para>
        </summary>
        <remarks>
            <para>The .NET Framework defines a text element as a unit of text that is displayed as a single character; that is, a grapheme.
      A text element can be a base character, a surrogate pair, or a combining character sequence.
      The Unicode Standard defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units,
      where the first unit of the pair is a high-surrogate and the second is a low-surrogate.
      The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.
      A surrogate pair can represent a base character or a combining character.
      For more information on surrogate pairs and combining character sequences, see The Unicode Standard at http://www.unicode.org.</para>
        </remarks>
    </doc><doc for="StringInfo.GetNextTextElement">
        <overload>
            <para>Gets the first text element in a specified string.</para>
        </overload>
        <summary>
            <para> Gets the first text element in a specified string.</para>
        </summary>
        <param name="str">The string from which to get the text element.</param>
        <returns>
            <para>A string containing the first text element in the specified string.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="str" /> is <see langword="null" />.</exception>
        <remarks>
            <para>The .NET Framework defines a text element as a unit of text that is displayed as a single character; that is, a grapheme.
      A text element can be a base character, a surrogate pair, or a combining character sequence.
      The Unicode Standard defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units,
      where the first unit of the pair is a high-surrogate and the second is a low-surrogate.
      The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.
      A surrogate pair can represent a base character or a combining character.
      For more information on surrogate pairs and combining character sequences, see The Unicode Standard at http://www.unicode.org.</para>
            <para> This method only returns the first text element.
      To iterate through the text elements of the string, use the <see cref="System.Globalization.TextElementEnumerator" /> generated by the <see cref="System.Globalization.StringInfo.GetTextElementEnumerator" /> method.</para>
        </remarks>
        <seealso cref="System.Globalization.StringInfo.GetTextElementEnumerator" />
        <seealso cref="System.Globalization.StringInfo.ParseCombiningCharacters" />
    </doc><doc for="StringInfo.GetNextTextElement1">
        <summary>
            <para>Gets the text element at the specified index of the specified string.</para>
        </summary>
        <param name="str">The string from which to get the text element.</param>
        <param name="index">The zero-based index at which the text element starts.</param>
        <returns>
            <para>A string containing the text element at the specified index of the specified string.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="str" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is outside the range of valid indexes for <paramref name="str" />.</exception>
        <remarks>
            <para>The .NET Framework defines a text element as a unit of text that is displayed as a single character; that is, a grapheme.
      A text element can be a base character, a surrogate pair, or a combining character sequence.
      The Unicode Standard defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units,
      where the first unit of the pair is a high-surrogate and the second is a low-surrogate.
      The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.
      A surrogate pair can represent a base character or a combining character.
      For more information on surrogate pairs and combining character sequences, see The Unicode Standard at http://www.unicode.org.</para>
            <para> This method only returns the first text element of the substring that starts at the specified index.
      To iterate through the text elements of the string, use the <see cref="System.Globalization.TextElementEnumerator" /> generated by the <see cref="System.Globalization.StringInfo.GetTextElementEnumerator" /> method.</para>
        </remarks>
        <seealso cref="System.Globalization.StringInfo.GetTextElementEnumerator" />
        <seealso cref="System.Globalization.StringInfo.ParseCombiningCharacters" />
    </doc><doc for="StringInfo.GetTextElementEnumerator">
        <overload>
            <para>Returns an enumerator that can iterate through the text elements of a string.</para>
        </overload>
        <summary>
            <para>Returns an enumerator that can iterate through the text elements of the entire string.</para>
        </summary>
        <param name="str">The string to iterate through.</param>
        <returns>
            <para>A <see cref="System.Globalization.TextElementEnumerator" /> for the entire string.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="str" /> is <see langword="null" />.</exception>
        <remarks>
            <para>The .NET Framework defines a text element as a unit of text that is displayed as a single character; that is, a grapheme.
      A text element can be a base character, a surrogate pair, or a combining character sequence.
      The Unicode Standard defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units,
      where the first unit of the pair is a high-surrogate and the second is a low-surrogate.
      The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.
      A surrogate pair can represent a base character or a combining character.
      For more information on surrogate pairs and combining character sequences, see The Unicode Standard at http://www.unicode.org.</para>
            <para>Text element enumerators are intended to be used only to read data in the string.
      Enumerators cannot be used to modify the underlying string.</para>
            <para>The enumerator does not have exclusive access to the string.</para>
            <para>When an enumerator is created, it takes a snapshot of the current state of the string.
      If changes are made to the string, such as adding, modifying, or deleting text elements,
      the snapshot gets out of sync and the enumerator throws an <see cref="System.InvalidOperationException" />.
      Two enumerators created from the same string at the same time can have different snapshots of the string.</para>
            <para>The enumerator is in an invalid state if it is positioned before the first text element in the string or after the last text element in the string.
      Whenever the enumerator is in an invalid state, calling <see cref="System.Globalization.TextElementEnumerator.Current" /> throws an exception.</para>
            <para>Initially, the enumerator is positioned before the first text element in the string.
   <see cref="System.Globalization.TextElementEnumerator.Reset" /> also brings the enumerator back to this position.
      Therefore, after an enumerator is created or after a <see cref="System.Globalization.TextElementEnumerator.Reset" />,
   <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> must be called to advance the enumerator to the first text element of the string
      before reading the value of <see cref="System.Globalization.TextElementEnumerator.Current" />.</para>
            <para><see cref="System.Globalization.TextElementEnumerator.Current" /> returns the same object
   until either <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> or <see cref="System.Globalization.TextElementEnumerator.Reset" /> is called.</para>
            <para>After the end of the string is passed, the enumerator is again in an invalid state and calling <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> returns <see langword="false" />.
Calling <see cref="System.Globalization.TextElementEnumerator.Current" /> throws an exception if the last call to <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> returned <see langword="false" />.</para>
        </remarks>
        <seealso cref="System.Globalization.TextElementEnumerator" />
    </doc><doc for="StringInfo.GetTextElementEnumerator1">
        <summary>
            <para> Returns an enumerator that can iterate through the text elements of the string, starting at the specified index.</para>
        </summary>
        <param name="str">The string to iterate through.</param>
        <param name="index">The zero-based index at which to start iterating.</param>
        <returns>
            <para>A <see cref="System.Globalization.TextElementEnumerator" /> for the string starting at <paramref name="index" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="str" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is outside the range of valid indexes for <paramref name="str" />.</exception>
        <remarks>
            <para>The .NET Framework defines a text element as a unit of text that is displayed as a single character; that is, a grapheme.
      A text element can be a base character, a surrogate pair, or a combining character sequence.
      The Unicode Standard defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units,
      where the first unit of the pair is a high-surrogate and the second is a low-surrogate.
      The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.
      A surrogate pair can represent a base character or a combining character.
      For more information on surrogate pairs and combining character sequences, see The Unicode Standard at http://www.unicode.org.</para>
            <para>Text element enumerators are intended to be used only to read data in the string.
      Enumerators cannot be used to modify the underlying string.</para>
            <para>The enumerator does not have exclusive access to the string.</para>
            <para>When an enumerator is created, it takes a snapshot of the current state of the string.
      If changes are made to the string, such as adding, modifying or deleting text elements,
      the snapshot gets out of sync and the enumerator throws an <see cref="System.InvalidOperationException" />.
      Two enumerators created from the same string at the same time can have different snapshots of the string.</para>
            <para>The enumerator is in an invalid state if it is positioned before the first text element in the string or after the last text element in the string.
      Whenever the enumerator is in an invalid state, calling <see cref="System.Globalization.TextElementEnumerator.Current" /> throws an exception.</para>
            <para>Initially, the enumerator is positioned before the first text element in the string.
   <see cref="System.Globalization.TextElementEnumerator.Reset" /> also brings the enumerator back to this position.
      Therefore, after an enumerator is created or after a <see cref="System.Globalization.TextElementEnumerator.Reset" />,
   <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> must be called to advance the enumerator to the first text element of the string before reading
      the value of <see cref="System.Globalization.TextElementEnumerator.Current" />.</para>
            <para><see cref="System.Globalization.TextElementEnumerator.Current" /> returns the same object
   until either <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> or <see cref="System.Globalization.TextElementEnumerator.Reset" /> is called.</para>
            <para>After the end of the string is passed, the enumerator is again in an invalid state and calling <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> returns <see langword="false" />.
Calling <see cref="System.Globalization.TextElementEnumerator.Current" /> throws an exception if the last call to <see cref="System.Globalization.TextElementEnumerator.MoveNext" /> returned <see langword="false" />.</para>
        </remarks>
        <seealso cref="System.Globalization.TextElementEnumerator" />
    </doc><doc for="StringInfo.ParseCombiningCharacters">
        <summary>
            <para> Returns the indexes of each base character, high-surrogate, or control character within the specified string.</para>
        </summary>
        <param name="str">The string to search.</param>
        <returns>
            <para> An array of integers that contains the zero-based indexes of each base character, high-surrogate, or control character within the specified string.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="str" /> is <see langword="null" />.</exception>
        <remarks>
            <para> The Unicode Standard defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units,
      where the first unit of the pair is a high-surrogate and the second is a low-surrogate.
      A high-surrogate is a Unicode code point in the range U+D800 through U+DBFF
      and a low-surrogate is a Unicode code point in the range U+DC00 through U+DFFF.</para>
            <para> A control character is a character whose Unicode value is U+007F or in the range U+0000 through U+001F or U+0080 through U+009F.</para>
            <para>The .NET Framework defines a text element as a unit of text that is displayed as a single character; that is, a grapheme.
      A text element can be a base character, a surrogate pair, or a combining character sequence.
      The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.
      A surrogate pair can represent a base character or a combining character.
      For more information on surrogate pairs and combining character sequences, see The Unicode Standard at http://www.unicode.org.</para>
            <para>If a combining character sequence is invalid, every combining character in that sequence is also returned.</para>
            <para>Each index in the resulting array is the beginning of a text element; that is, the index of the base character or the high-surrogate.</para>
            <para>The length of each element is easily computed as the difference between successive indexes.
      The length of the array will always be less than or equal to the length of the string.
      For example, given the string "\u4f00\u302a\ud800\udc00\u4f01", this method would return the indexes 0, 2, and 4.</para>
        </remarks>
    </doc>
</docs>
