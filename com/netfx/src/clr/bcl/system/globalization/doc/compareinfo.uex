<docs>
    <doc for="CompareOptions">
        <summary>
            <para>Defines the string comparison options to use with <see cref="System.Globalization.CompareInfo" />.</para>
        </summary>
        <remarks>
            <para>These options denote case sensitivity or whether to ignore types of characters.</para>
            <para>The .NET Framework uses three distinct ways of sorting: word sort, string sort, and ordinal sort.
 Word sort performs a culture-sensitive comparison of strings.
 Certain nonalphanumeric characters might have special weights assigned to them;
 for example, the hyphen ("-") might have a very small weight assigned to it
 so that "coop" and "co-op" appear next to each other in a sorted list.
 String sort is similar to word sort, except that there are no special cases;
 therefore, all nonalphanumeric symbols come before all alphanumeric characters.
 Ordinal sort compares strings based on the Unicode values of each element of the string.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" /> value can only be used with <see cref="System.Globalization.CompareInfo.Compare" qualify="true" /> and <see cref="System.Globalization.CompareInfo.GetSortKey" qualify="true" />.
<see cref="System.ArgumentException" /> is thrown if the <see cref="System.Globalization.CompareOptions.StringSort" /> value is used with
<see cref="System.Globalization.CompareInfo.IsPrefix" qualify="true" />,
<see cref="System.Globalization.CompareInfo.IsSuffix" qualify="true" />,
<see cref="System.Globalization.CompareInfo.IndexOf" qualify="true" />, or
<see cref="System.Globalization.CompareInfo.LastIndexOf" qualify="true" />.</para>
        </remarks>
        <example>
            <para>The following code example shows how sorting with <see cref="System.Globalization.CompareOptions.StringSort" /> differs from sorting without <see cref="System.Globalization.CompareOptions.StringSort" />.</para>
            <codelink SampleID="System.Globalization.CompareOptions.StringSort" SnippetID="1" />
        </example>
        <seealso topic="cpconbasicstringoperations" />
    </doc><doc for="CompareOptions.None">
        <summary>
            <para>Indicates the default option settings for string comparisons.</para>
        </summary>
    </doc><doc for="CompareOptions.IgnoreCase">
        <summary>
            <para>Indicates that the string comparison must ignore case.</para>
        </summary>
    </doc><doc for="CompareOptions.IgnoreNonSpace">
        <summary>
            <para>Indicates that the string comparison must ignore nonspacing combining characters, such as diacritics.
      The Unicode Standard defines combining characters as characters that are combined with base characters to produce a new character.
      Nonspacing combining characters do not occupy a spacing position by themselves when rendered.
      For more information on nonspacing combining characters, see The Unicode Standard at http://www.unicode.org.</para>
        </summary>
    </doc><doc for="CompareOptions.IgnoreSymbols">
        <summary>
            <para>Indicates that the string comparison must ignore symbols, 
 such as white-space characters, punctuation, currency symbols, the percent sign, mathematical symbols, the ampersand, and so on.</para>
        </summary>
    </doc><doc for="CompareOptions.IgnoreKanaType">
        <summary>
            <para>Indicates that the string comparison must ignore the Kana type.
      Kana type refers to Japanese hiragana and katakana characters, which represent phonetic sounds in the Japanese language.
      Hiragana is used for native Japanese expressions and words, while katakana is used for words borrowed from other languages, such as "computer" or "Internet".
      A phonetic sound can be expressed in both hiragana and katakana.
      If this value is selected, the hiragana character for one sound is considered equal to the katakana character for the same sound.</para>
        </summary>
    </doc><doc for="CompareOptions.IgnoreWidth">
        <summary>
            <para>Indicates that the string comparison must ignore the character width.
 For example, Japanese katakana characters can be written as full-width or half-width and,
 if this value is selected, the katakana characters written as full-width are considered equal to the same characters written in half-width.</para>
        </summary>
    </doc><doc for="CompareOptions.StringSort">
        <summary>
            <para>Indicates that the string comparison must use the string sort algorithm,
      where the hyphen and the apostrophe, as well as other nonalphanumeric symbols, come before alphanumeric characters.</para>
        </summary>
    </doc><doc for="CompareOptions.Ordinal">
        <summary>
            <para>Indicates that the string comparison must be done using the Unicode values of each character, 
 which is a fast comparison but is culture-insensitive. A string starting with "U+xxxx" comes before a string starting with "U+yyyy", if xxxx is less than yyyy.
 This flag cannot be combined with other flags and must be used alone.</para>
        </summary>
    </doc><doc for="CompareInfo">
        <summary>
            <para>Implements a set of methods for culture-sensitive string comparisons.</para>
        </summary>
        <remarks>
            <para>The <see cref="System.Globalization.CultureInfo" /> class includes a <see cref="System.Globalization.CultureInfo.CompareInfo" /> property that is an instance of this class.
 <see cref="System.String.Compare" qualify="true" /> uses the information in <see cref="System.Globalization.CultureInfo.CompareInfo" qualify="true" /> to compare strings.</para>
            <para>Unlike most classes, <see cref="System.Globalization.CompareInfo" /> provides the <see cref="System.Globalization.CompareInfo.GetCompareInfo" /> method,
 instead of public constructors, to allow for late-bound access.</para>
            <para>To create a <see cref="System.Globalization.CompareInfo" /> for any culture, use the <see cref="System.Globalization.CultureInfo.CompareInfo" qualify="true" /> property, or use the <see cref="System.Globalization.CompareInfo.GetCompareInfo" /> method.</para>
            <para> If a security decision depends on a string comparison or a case-change operation,
 use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
 regardless of the culture settings of the system.</para>
        </remarks>
    </doc><doc for="CompareInfo.GetCompareInfo">
        <overload>
            <para>Initializes a new instance of the <see cref="System.Globalization.CompareInfo" /> class.</para>
        </overload>
        <summary>
            <para>Initializes a new instance of the <see cref="System.Globalization.CompareInfo" /> class that is associated
   with the culture having the specified identifier
   and uses string comparison methods in the specified <see cref="System.Reflection.Assembly" />.</para>
        </summary>
        <param name="culture">An integer representing the culture identifier.</param>
        <param name="assembly">An <see cref="System.Reflection.Assembly" /> that contains the string comparison methods to use.</param>
        <returns>
            <para>A new instance of the <see cref="System.Globalization.CompareInfo" /> class
   that is associated with the specified culture
   and uses string comparison methods in the specified <see cref="System.Reflection.Assembly" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="assembly" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentException"><paramref name="assembly" /> is of an invalid type.</exception>
        <remarks>
            <para>The <paramref name="assembly" /> parameter must be of the same type as <see cref="System.Reflection.Module.Assembly" qualify="true" />.</para>
            <para> If a security decision depends on a string comparison or a case-change operation,
 use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
 regardless of the culture settings of the system.</para>
        </remarks>
        <seealso cref="System.Reflection.Module.Assembly" qualify="true" />
    </doc><doc for="CompareInfo.GetCompareInfo1">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Globalization.CompareInfo" /> class
   that is associated with the culture having the specified name
   and uses string comparison methods in the specified <see cref="System.Reflection.Assembly" />.</para>
        </summary>
        <param name="name">A string representing the culture name.</param>
        <param name="assembly">An <see cref="System.Reflection.Assembly" /> that contains the string comparison methods to use.</param>
        <returns>
            <para>A new instance of the <see cref="System.Globalization.CompareInfo" /> class
   that is associated with the culture having the specified name
   and uses string comparison methods in the specified <see cref="System.Reflection.Assembly" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="name" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="assembly" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="name" /> is an invalid culture name.</para><para>-or-</para>
            <para><paramref name="assembly" /> is of an invalid type.</para></exception>
        <remarks>
            <para>The <paramref name="assembly" /> parameter must be of the same type as <see cref="System.Reflection.Module.Assembly" qualify="true" />.</para>
            <para> If a security decision depends on a string comparison or a case-change operation,
 use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
 regardless of the culture settings of the system.</para>
        </remarks>
        <seealso cref="System.Reflection.Module.Assembly" qualify="true" />
    </doc><doc for="CompareInfo.GetCompareInfo2">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Globalization.CompareInfo" /> class
 that is associated with the culture having the specified identifier.</para>
        </summary>
        <param name="culture">An integer representing the culture identifier.</param>
        <returns>
            <para>A new instance of the <see cref="System.Globalization.CompareInfo" /> class
 that is associated with the culture having the specified identifier
 and uses string comparison methods in the current <see cref="System.Reflection.Assembly" />.</para>
        </returns>
        <remarks>
            <para> If a security decision depends on a string comparison or a case-change operation,
 use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
 regardless of the culture settings of the system.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.CompareStrStr" SnippetID="1" />
        </example>
    </doc><doc for="CompareInfo.GetCompareInfo3">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Globalization.CompareInfo" /> class
 that is associated with the culture having the specified name.</para>
        </summary>
        <param name="name">A string representing the culture name.</param>
        <returns>
            <para>A new instance of the <see cref="System.Globalization.CompareInfo" /> class
 that is associated with the culture having the specified name
 and uses string comparison methods in the current <see cref="System.Reflection.Assembly" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="name" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="name" /> is an invalid culture name.</exception>
        <remarks>
            <para> If a security decision depends on a string comparison or a case-change operation,
 use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
 regardless of the culture settings of the system.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.CompareStrStr" SnippetID="1" />
        </example>
    </doc><doc for="CompareInfo.Compare">
        <overload>
            <para>Compares two strings.</para>
        </overload>
        <summary>
            <para>Compares two strings using the default <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="string1">The first string to compare.</param>
        <param name="string2">The second string to compare.</param>
        <returns>
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <description>Condition</description>
                </listheader>
                <item>
                    <term>zero</term>
                    <description>The two strings are equal.</description>
                </item>
                <item>
                    <term>less than zero</term>
                    <description>
                        <paramref name="string1" /> is less than <paramref name="string2" />.</description>
                </item>
                <item>
                    <term>greater than zero</term>
                    <description>
                        <paramref name="string1" /> is greater than <paramref name="string2" />.</description>
                </item>
            </list>
        </returns>
        <remarks>
            <para> If a security decision depends on a string comparison or a case-change operation,
 use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
 regardless of the culture settings of the system.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.CompareStrStr" SnippetID="1" />
        </example>
    </doc><doc for="CompareInfo.Compare1">
        <summary>
            <para>Compares two strings using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="string1">The first string to compare.</param>
        <param name="string2">The second string to compare.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <description>Condition</description>
                </listheader>
                <item>
                    <term> zero</term>
                    <description>The two strings are equal.</description>
                </item>
                <item>
                    <term> less than zero</term>
                    <description>
                        <paramref name="string1" /> is less than <paramref name="string2" />.</description>
                </item>
                <item>
                    <term> greater than zero</term>
                    <description>
                        <paramref name="string1" /> is greater than <paramref name="string2" />.</description>
                </item>
            </list>
        </returns>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
        <remarks>
            <para> If a security decision depends on a string comparison or a case-change operation,
 use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
 regardless of the culture settings of the system.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.CompareStrStrOpt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.Compare2">
        <summary>
            <para>Compares a section of one string with a section of another string.</para>
        </summary>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing.</param>
        <param name="length1">The number of consecutive characters in <paramref name="string1" /> to compare.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing.</param>
        <param name="length2">The number of consecutive characters in <paramref name="string2" /> to compare.</param>
        <returns>
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <description>Condition</description>
                </listheader>
                <item>
                    <term> zero</term>
                    <description>The two strings are equal.</description>
                </item>
                <item>
                    <term> less than zero</term>
                    <description>The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.</description>
                </item>
                <item>
                    <term> greater than zero</term>
                    <description>The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.</description>
                </item>
            </list>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.</para><para>-or-</para>
            <para><paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.</para><para>-or-</para>
            <para><paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.</para><para>-or-</para>
            <para><paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />.</para></exception>
        <remarks>
            <para> If a security decision depends on a string comparison or a case-change operation,
 use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
 regardless of the culture settings of the system.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.CompareStrIntIntStrIntInt" SnippetID="1" />
        </example>
    </doc><doc for="CompareInfo.Compare3">
        <summary>
            <para> Compares the end section of a string with the end section of another string
      using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <description>Condition</description>
                </listheader>
                <item>
                    <term> zero</term>
                    <description>The two strings are equal.</description>
                </item>
                <item>
                    <term> less than zero</term>
                    <description>The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.</description>
                </item>
                <item>
                    <term> greater than zero</term>
                    <description>The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.</description>
                </item>
            </list>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.</para><para>-or-</para>
            <para><paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
        <remarks>
            <para> If a security decision depends on a string comparison or a case-change operation,
 use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
 regardless of the culture settings of the system.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.CompareStrIntStrIntOpt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.Compare4">
        <summary>
            <para>Compares the end section of a string with the end section of another string.</para>
        </summary>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing.</param>
        <returns>
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <description>Condition</description>
                </listheader>
                <item>
                    <term> zero</term>
                    <description>The two strings are equal.</description>
                </item>
                <item>
                    <term> less than zero</term>
                    <description>The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.</description>
                </item>
                <item>
                    <term> greater than zero</term>
                    <description>The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.</description>
                </item>
            </list>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.</para><para>-or-</para>
            <para><paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.</para></exception>
        <remarks>
            <para> If a security decision depends on a string comparison or a case-change operation,
 use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
 regardless of the culture settings of the system.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.CompareStrIntStrInt" SnippetID="1" />
        </example>
    </doc><doc for="CompareInfo.Compare5">
        <summary>
            <para>Compares a section of one string with a section of another string
      using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing.</param>
        <param name="length1">The number of consecutive characters in <paramref name="string1" /> to compare.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing.</param>
        <param name="length2">The number of consecutive characters in <paramref name="string2" /> to compare.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <description>Condition</description>
                </listheader>
                <item>
                    <term> zero</term>
                    <description>The two strings are equal.</description>
                </item>
                <item>
                    <term> less than zero</term>
                    <description>The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.</description>
                </item>
                <item>
                    <term> greater than zero</term>
                    <description>The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.</description>
                </item>
            </list>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.</para><para>-or-</para>
            <para><paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.</para><para>-or-</para>
            <para><paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.</para><para>-or-</para>
            <para><paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
        <remarks>
            <para> If a security decision depends on a string comparison or a case-change operation,
 use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
 regardless of the culture settings of the system.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.IsPrefix">
        <overload>
            <para>Determines whether a string starts with a specific prefix.</para>
        </overload>
        <summary>
            <para>Determines whether the specified source string starts with the specified prefix
   using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search in.</param>
        <param name="prefix">The string to compare with the beginning of <paramref name="source" />.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para><see langword="true" /> if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" />
and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="prefix" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>Every string starts and ends with an empty substring ("");
      therefore, if <paramref name="prefix" /> is an empty string, this method returns <see langword="true" />.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IsPrefixSuffixOpt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IsSuffix" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.IsPrefix1">
        <summary>
            <para>Determines whether the specified source
      string starts with the specified prefix.</para>
        </summary>
        <param name="source">The string to search in.</param>
        <param name="prefix">The string to compare with the beginning of <paramref name="source" />.</param>
        <returns>
            <para><see langword="true" /> if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" />
and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="prefix" /> is <see langword="null" />.</para></exception>
<remarks>
            <para>Every string starts and ends with an empty substring ("");
      therefore, if <paramref name="prefix" /> is an empty string, this method returns <see langword="true" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IsPrefixSuffix" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IsSuffix" />
    </doc><doc for="CompareInfo.IsSuffix">
        <overload>
            <para>Determines whether a string ends with a specific suffix.</para>
        </overload>
        <summary>
            <para>Determines whether the specified source string ends with the specified suffix
   using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search in.</param>
        <param name="suffix">The string to compare with the end of <paramref name="source" />.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para><see langword="true" /> if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" />
and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="suffix" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>Every string starts and ends with an empty substring ("");
      therefore, if <paramref name="suffix" /> is an empty string, this method returns <see langword="true" />.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IsPrefixSuffixOpt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IsPrefix" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.IsSuffix1">
        <summary>
            <para>Determines whether the specified source string ends with the specified suffix.</para>
        </summary>
        <param name="source">The string to search in.</param>
        <param name="suffix">The string to compare with the end of <paramref name="source" />.</param>
        <returns>
            <para><see langword="true" /> if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" />
and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="suffix" /> is <see langword="null" />.</para></exception>
<remarks>
            <para>Every string starts and ends with an empty substring ("");
      therefore, if <paramref name="suffix" /> is an empty string, this method returns <see langword="true" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IsPrefixSuffix" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IsPrefix" />
    </doc><doc for="CompareInfo.IndexOf">
        <overload>
            <para>Returns the zero-based index of the first occurrence of a value within a string or within a portion of it.</para>
        </overload>
        <summary>
            <para>Searches for the specified character and returns the zero-based index of the first occurrence
      within the entire source string.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <paramref name="source" />.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" />
within the entire <paramref name="source" />,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para></exception>
<remarks>
            <para>The source string is searched forward starting at the beginning of the string and ending at the end of the string.</para>
            <para>This overload performs a culture-sensitive search;
 that is, if the char is a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 it might be considered equivalent to any occurrence of its components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 To perform an ordinal (culture-insensitive) search,
 where a char is considered equivalent to another char only if the Unicode values are the same,
 use one of the overloads that accepts a <see cref="System.Globalization.CompareOptions" /> value as a parameter
 and use the <see cref="System.Globalization.CompareOptions.Ordinal" /> value.
 Overloads of <see cref="System.String.IndexOf" qualify="true" /> that search for a char perform an ordinal search,
 while those that search for a string perform a culture-sensitive search.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOf" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.LastIndexOf" />
    </doc><doc for="CompareInfo.IndexOf1">
        <summary>
            <para>Searches for the specified substring and returns the zero-based index of the first occurrence
      within the entire source string.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <paramref name="source" />.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" />
within the entire <paramref name="source" />,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="value" /> is <see langword="null" />.</para></exception>
<remarks>
            <para>The source string is searched forward starting at the beginning of the string and ending at the end of the string.</para>
            <para>This overload performs a culture-sensitive search;
 that is, a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 To perform an ordinal (culture-insensitive) search, where the Unicode values are compared,
 use one of the overloads that accepts a <see cref="System.Globalization.CompareOptions" /> value as a parameter
 and use the <see cref="System.Globalization.CompareOptions.Ordinal" /> value.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOf" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.LastIndexOf" />
    </doc><doc for="CompareInfo.IndexOf2">
        <summary>
            <para>Searches for the specified character and returns the zero-based index of the first occurrence
      within the entire source string using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <paramref name="source" />.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" />
within the entire <paramref name="source" />
using the specified <see cref="System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>The source string is searched forward starting at the beginning of the string and ending at the end of the string.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
            <para>If <paramref name="options" /> does not include the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs a culture-sensitive search;
 that is, if the char is a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 it might be considered equivalent to any occurrence of its components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 If <paramref name="options" /> includes the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs an ordinal (culture-insensitive) search;
 that is, a char is considered equivalent to another char only if the Unicode values are the same.
 Overloads of <see cref="System.String.IndexOf" qualify="true" /> that search for a char perform an ordinal search,
 while those that search for a string perform a culture-sensitive search. </para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOf" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.LastIndexOf" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.IndexOf3">
        <summary>
            <para>Searches for the specified substring and returns the zero-based index of the first occurrence
      within the entire source string using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <paramref name="source" />.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" />
within the entire <paramref name="source" />
using the specified <see cref="System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="value" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>The source string is searched forward starting at the beginning of the string and ending at the end of the string.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
            <para>If <paramref name="options" /> does not include the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs a culture-sensitive search;
 that is, a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 If <paramref name="options" /> includes the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOf" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.LastIndexOf" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.IndexOf4">
        <summary>
            <para>Searches for the specified character and returns the zero-based index of the first occurrence
      within the section of the source string that extends from the specified index to the end of the string.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para></exception>
<remarks>
            <para>The source string is searched forward starting at <paramref name="startIndex" /> and ending at the end of the string.</para>
            <para>This overload performs a culture-sensitive search;
 that is, if the char is a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 it might be considered equivalent to any occurrence of its components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 To perform an ordinal (culture-insensitive) search,
 where a char is considered equivalent to another char only if the Unicode values are the same,
 use one of the overloads that accepts a <see cref="System.Globalization.CompareOptions" /> value as a parameter
 and use the <see cref="System.Globalization.CompareOptions.Ordinal" /> value.
 Overloads of <see cref="System.String.IndexOf" qualify="true" /> that search for a char perform an ordinal search,
 while those that search for a string perform a culture-sensitive search.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.LastIndexOf" />
    </doc><doc for="CompareInfo.IndexOf10">
        <summary>
            <para>Searches for the specified character and returns the zero-based index of the first occurrence
      within the section of the source string that extends from the specified index to the end of the string
      using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />
using the specified <see cref="System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>The source string is searched forward starting at <paramref name="startIndex" /> and ending at the end of the string.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
            <para>If <paramref name="options" /> does not include the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs a culture-sensitive search;
 that is, if the char is a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 it might be considered equivalent to any occurrence of its components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 If <paramref name="options" /> includes the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs an ordinal (culture-insensitive) search;
 that is, a char is considered equivalent to another char only if the Unicode values are the same.
 Overloads of <see cref="System.String.IndexOf" qualify="true" /> that search for a char perform an ordinal search,
 while those that search for a string perform a culture-sensitive search. </para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.LastIndexOf" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.IndexOf5">
        <summary>
            <para>Searches for the specified character and returns the zero-based index of the first occurrence
      within the section of the source string that starts at the specified index and contains the specified number of elements.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</para></exception>
<remarks>
            <para>The source string is searched forward starting at <paramref name="startIndex" /> and ending at <paramref name="startIndex" /> + <paramref name="count" /> - 1.</para>
            <para>This overload performs a culture-sensitive search;
 that is, if the char is a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 it might be considered equivalent to any occurrence of its components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 To perform an ordinal (culture-insensitive) search,
 where a char is considered equivalent to another char only if the Unicode values are the same,
 use one of the overloads that accepts a <see cref="System.Globalization.CompareOptions" /> value as a parameter
 and use the <see cref="System.Globalization.CompareOptions.Ordinal" /> value.
 Overloads of <see cref="System.String.IndexOf" qualify="true" /> that search for a char perform an ordinal search,
 while those that search for a string perform a culture-sensitive search.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfIntInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.LastIndexOf" />
    </doc><doc for="CompareInfo.IndexOf6">
        <summary>
            <para>Searches for the specified substring and returns the zero-based index of the first occurrence
      within the section of the source string that extends from the specified index to the end of the string.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="value" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para></exception>
<remarks>
            <para>The source string is searched forward starting at <paramref name="startIndex" /> and ending at the end of the string.</para>
            <para>This overload performs a culture-sensitive search;
 that is, a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 To perform an ordinal (culture-insensitive) search, where the Unicode values are compared,
 use one of the overloads that accepts a <see cref="System.Globalization.CompareOptions" /> value as a parameter
 and use the <see cref="System.Globalization.CompareOptions.Ordinal" /> value.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.LastIndexOf" />
    </doc><doc for="CompareInfo.IndexOf11">
        <summary>
            <para>Searches for the specified substring and returns the zero-based index of the first occurrence
      within the section of the source string that extends from the specified index to the end of the string
      using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />
using the specified <see cref="System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="value" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>The source string is searched forward starting at <paramref name="startIndex" /> and ending at the end of the string.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
            <para>If <paramref name="options" /> does not include the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs a culture-sensitive search;
 that is, a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 If <paramref name="options" /> includes the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.LastIndexOf" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.IndexOf7">
        <summary>
            <para>Searches for the specified substring and returns the zero-based index of the first occurrence
      within the section of the source string that starts at the specified index and contains the specified number of elements.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="value" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</para></exception>
<remarks>
            <para>The source string is searched forward starting at <paramref name="startIndex" /> and ending at <paramref name="startIndex" /> + <paramref name="count" /> - 1.</para>
            <para>This overload performs a culture-sensitive search;
 that is, a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 To perform an ordinal (culture-insensitive) search, where the Unicode values are compared,
 use one of the overloads that accepts a <see cref="System.Globalization.CompareOptions" /> value as a parameter
 and use the <see cref="System.Globalization.CompareOptions.Ordinal" /> value.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfIntInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.LastIndexOf" />
    </doc><doc for="CompareInfo.IndexOf8">
        <summary>
            <para>Searches for the specified character and returns the zero-based index of the first occurrence
      within the section of the source string that starts at the specified index and contains the specified number of elements
      using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />,
using the specified <see cref="System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>The source string is searched forward starting at <paramref name="startIndex" /> and ending at <paramref name="startIndex" /> + <paramref name="count" /> - 1.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
            <para>If <paramref name="options" /> does not include the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs a culture-sensitive search;
 that is, if the char is a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 it might be considered equivalent to any occurrence of its components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 If <paramref name="options" /> includes the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs an ordinal (culture-insensitive) search;
 that is, a char is considered equivalent to another char only if the Unicode values are the same.
 Overloads of <see cref="System.String.IndexOf" qualify="true" /> that search for a char perform an ordinal search,
 while those that search for a string perform a culture-sensitive search. </para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfIntInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.LastIndexOf" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.IndexOf9">
        <summary>
            <para>Searches for the specified substring and returns the zero-based index of the first occurrence
      within the section of the source string that starts at the specified index and contains the specified number of elements
      using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />,
using the specified <see cref="System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="value" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>The source string is searched forward starting at <paramref name="startIndex" /> and ending at <paramref name="startIndex" /> + <paramref name="count" /> - 1.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
            <para>If <paramref name="options" /> does not include the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs a culture-sensitive search;
 that is, a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 If <paramref name="options" /> includes the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfIntInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.LastIndexOf" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.LastIndexOf">
        <overload>
            <para>Returns the zero-based index of the last occurrence of a value within a string or within a portion of it.</para>
        </overload>
        <summary>
            <para>Searches for the specified character and returns the zero-based index of the last occurrence
      within the entire source string.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <paramref name="source" />.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" />
within the entire <paramref name="source" />,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para></exception>
<remarks>
            <para>The source string is searched backward starting at the end of the string and ending at the beginning of the string.</para>
            <para>This overload performs a culture-sensitive search;
      that is, if the char is a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
      it might be considered equivalent to any occurrence of its components in the correct sequence, such as "AE" (U+0041, U+0045),
      depending on the culture.
      To perform an ordinal (culture-insensitive) search,
      where a char is considered equivalent to another char only if the Unicode values are the same,
      use one of the overloads that accepts a <see cref="System.Globalization.CompareOptions" /> value as a parameter
      and use the <see cref="System.Globalization.CompareOptions.Ordinal" /> value.
      Overloads of <see cref="System.String.LastIndexOf" qualify="true" /> that search for a char perform an ordinal search,
      while those that search for a string perform a culture-sensitive search.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOf" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IndexOf" />
    </doc><doc for="CompareInfo.LastIndexOf1">
        <summary>
            <para>Searches for the specified substring and returns the zero-based index of the last occurrence
      within the entire source string.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <paramref name="source" />.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" />
within the entire <paramref name="source" />,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="value" /> is <see langword="null" />.</para></exception>
<remarks>
            <para>The source string is searched backward starting at the end of the string and ending at the beginning of the string.</para>
            <para>This overload performs a culture-sensitive search;
 that is, a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 To perform an ordinal (culture-insensitive) search, where the Unicode values are compared,
 use one of the overloads that accepts a <see cref="System.Globalization.CompareOptions" /> value as a parameter
 and use the <see cref="System.Globalization.CompareOptions.Ordinal" /> value.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOf" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IndexOf" />
    </doc><doc for="CompareInfo.LastIndexOf2">
        <summary>
            <para>Searches for the specified character and returns the zero-based index of the last occurrence
      within the entire source string using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <paramref name="source" />.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" />
within the entire <paramref name="source" /> using the specified <see cref="System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>The source string is searched backward starting at the end of the string and ending at the beginning of the string.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
            <para>If <paramref name="options" /> does not include the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
this overload performs a culture-sensitive search;
that is, if the char is a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
it might be considered equivalent to any occurrence of its components in the correct sequence, such as "AE" (U+0041, U+0045),
depending on the culture.
If <paramref name="options" /> includes the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
this overload performs an ordinal (culture-insensitive) search;
that is, a char is considered equivalent to another char only if the Unicode values are the same.
Overloads of <see cref="System.String.LastIndexOf" qualify="true" /> that search for a char perform an ordinal search,
while those that search for a string perform a culture-sensitive search. </para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOf" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IndexOf" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.LastIndexOf3">
        <summary>
            <para>Searches for the specified substring and returns the zero-based index of the last occurrence
      within the entire source string using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <paramref name="source" />.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" />
within the entire <paramref name="source" /> using the specified <see cref="System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="value" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>The source string is searched backward starting at the end of the string and ending at the beginning of the string.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
            <para>If <paramref name="options" /> does not include the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs a culture-sensitive search;
 that is, a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 If <paramref name="options" /> includes the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOf" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IndexOf" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.LastIndexOf4">
        <summary>
            <para>Searches for the specified character and returns the zero-based index of the last occurrence
      within the section of the source string that extends from the beginning of the string to the specified index.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para></exception>
<remarks>
            <para>The source string is searched backward starting at <paramref name="startIndex" /> and ending at the beginning of the string.</para>
            <para>This overload performs a culture-sensitive search;
      that is, if the char is a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
      it might be considered equivalent to any occurrence of its components in the correct sequence, such as "AE" (U+0041, U+0045),
      depending on the culture.
      To perform an ordinal (culture-insensitive) search,
      where a char is considered equivalent to another char only if the Unicode values are the same,
      use one of the overloads that accepts a <see cref="System.Globalization.CompareOptions" /> value as a parameter
      and use the <see cref="System.Globalization.CompareOptions.Ordinal" /> value.
      Overloads of <see cref="System.String.LastIndexOf" qualify="true" /> that search for a char perform an ordinal search,
      while those that search for a string perform a culture-sensitive search.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IndexOf" />
    </doc><doc for="CompareInfo.LastIndexOf11">
        <summary>
            <para>Searches for the specified character and returns the zero-based index of the last occurrence
      within the section of the source string that extends from the beginning of the string to the specified index
      using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />
using the specified <see cref="System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>The source string is searched backward starting at <paramref name="startIndex" /> and ending at the beginning of the string.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
            <para>If <paramref name="options" /> does not include the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs a culture-sensitive search;
 that is, if the char is a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 it might be considered equivalent to any occurrence of its components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 If <paramref name="options" /> includes the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs an ordinal (culture-insensitive) search;
 that is, a char is considered equivalent to another char only if the Unicode values are the same.
 Overloads of <see cref="System.String.LastIndexOf" qualify="true" /> that search for a char perform an ordinal search,
 while those that search for a string perform a culture-sensitive search. </para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IndexOf" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.LastIndexOf5">
        <summary>
            <para>Searches for the specified character and returns the zero-based index of the last occurrence
      within the section of the source string that contains the specified number of elements and ends at the specified index.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" />,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</para></exception>
<remarks>
            <para>The source string is searched backward starting at <paramref name="startIndex" /> and ending at <paramref name="startIndex" /> - <paramref name="count" /> + 1.</para>
            <para>This overload performs a culture-sensitive search;
      that is, if the char is a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
      it might be considered equivalent to any occurrence of its components in the correct sequence, such as "AE" (U+0041, U+0045),
      depending on the culture.
      To perform an ordinal (culture-insensitive) search,
      where a char is considered equivalent to another char only if the Unicode values are the same,
      use one of the overloads that accepts a <see cref="System.Globalization.CompareOptions" /> value as a parameter
      and use the <see cref="System.Globalization.CompareOptions.Ordinal" /> value.
      Overloads of <see cref="System.String.LastIndexOf" qualify="true" /> that search for a char perform an ordinal search,
      while those that search for a string perform a culture-sensitive search.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfIntInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IndexOf" />
    </doc><doc for="CompareInfo.LastIndexOf6">
        <summary>
            <para>Searches for the specified substring and returns the zero-based index of the last occurrence
      within the section of the source string that extends from the beginning of the string to the specified index.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="value" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para></exception>
<remarks>
            <para>The source string is searched backward starting at <paramref name="startIndex" /> and ending at the beginning of the string.</para>
            <para>This overload performs a culture-sensitive search;
 that is, a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 To perform an ordinal (culture-insensitive) search, where the Unicode values are compared,
 use one of the overloads that accepts a <see cref="System.Globalization.CompareOptions" /> value as a parameter
 and use the <see cref="System.Globalization.CompareOptions.Ordinal" /> value.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IndexOf" />
    </doc><doc for="CompareInfo.LastIndexOf10">
        <summary>
            <para>Searches for the specified substring and returns the zero-based index of the last occurrence
      within the section of the source string that extends from the beginning of the string to the specified index
      using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />
using the specified <see cref="System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="value" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>The source string is searched backward starting at <paramref name="startIndex" /> and ending at the beginning of the string.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
            <para>If <paramref name="options" /> does not include the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs a culture-sensitive search;
 that is, a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 If <paramref name="options" /> includes the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IndexOf" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.LastIndexOf7">
        <summary>
            <para>Searches for the specified substring and returns the zero-based index of the last occurrence
      within the section of the source string that contains the specified number of elements and ends at the specified index.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" />,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="value" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</para></exception>
<remarks>
            <para>The source string is searched backward starting at <paramref name="startIndex" /> and ending at <paramref name="startIndex" /> - <paramref name="count" /> + 1.</para>
            <para>This overload performs a culture-sensitive search;
 that is, a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 To perform an ordinal (culture-insensitive) search, where the Unicode values are compared,
 use one of the overloads that accepts a <see cref="System.Globalization.CompareOptions" /> value as a parameter
 and use the <see cref="System.Globalization.CompareOptions.Ordinal" /> value.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfIntInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IndexOf" />
    </doc><doc for="CompareInfo.LastIndexOf8">
        <summary>
            <para>Searches for the specified character and returns the zero-based index of the last occurrence
      within the section of the source string that contains the specified number of elements and ends at the specified index
      using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" />
using the specified <see cref="System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>The source string is searched backward starting at <paramref name="startIndex" /> and ending at <paramref name="startIndex" /> - <paramref name="count" /> + 1.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
            <para>If <paramref name="options" /> does not include the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs a culture-sensitive search;
 that is, if the char is a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 it might be considered equivalent to any occurrence of its components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 If <paramref name="options" /> includes the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs an ordinal (culture-insensitive) search;
 that is, a char is considered equivalent to another char only if the Unicode values are the same.
 Overloads of <see cref="System.String.LastIndexOf" qualify="true" /> that search for a char perform an ordinal search,
 while those that search for a string perform a culture-sensitive search. </para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfIntInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IndexOf" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.LastIndexOf9">
        <summary>
            <para>Searches for the specified substring and returns the zero-based index of the last occurrence
      within the section of the source string that contains the specified number of elements and ends at the specified index
      using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <paramref name="source" />.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" />
using the specified <see cref="System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="source" /> is <see langword="null" />.</para><para>-or-</para>
            <para><paramref name="value" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
<remarks>
            <para>The source string is searched backward starting at <paramref name="startIndex" /> and ending at <paramref name="startIndex" /> - <paramref name="count" /> + 1.</para>
            <para>The <see cref="System.Globalization.CompareOptions.StringSort" qualify="true" /> value is not valid for this method.</para>
            <para>If <paramref name="options" /> does not include the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs a culture-sensitive search;
 that is, a Unicode value representing a precomposed character, such as the ligature <htmltext>&amp;#x0027;&amp;#x00c6;&amp;#x0027;</htmltext> (U+00C6),
 might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045),
 depending on the culture.
 If <paramref name="options" /> includes the <see cref="System.Globalization.CompareOptions.Ordinal" /> value,
 this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Globalization.CompareInfo.IndexOfIntInt" SnippetID="1" />
        </example>
        <seealso cref="System.Globalization.CompareInfo.IndexOf" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.GetSortKey">
        <overload>
            <para>Gets the <see cref="System.Globalization.SortKey" /> of a string.</para>
        </overload>
        <summary>
            <para>Gets the <see cref="System.Globalization.SortKey" /> of the specified string
   using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </summary>
        <param name="source">The string for which to get the <see cref="System.Globalization.SortKey" />.</param>
        <param name="options">The <see cref="System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
        <returns>
            <para>The <see cref="System.Globalization.SortKey" /> of  the specified string
 using the specified <see cref="System.Globalization.CompareOptions" /> value.</para>
        </returns>
        <exception cref="System.ArgumentException"><paramref name="options" /> is not a valid <see cref="System.Globalization.CompareOptions" /> value.</exception>
        <remarks>
            <para>Each character in a string is given several categories of sort weights, including script, alphabetic, case, and diacritic weights.
      A sort key serves as the repository of these weights for a particular string.
      For example, a sort key might contain a string of alphabetic weights, followed by a string of case weights, and so on.
   <see cref="System.Globalization.SortKey" /> is equivalent to the Windows API method <see langword="LCMapString" /> with the <see langword="LCMAP_SORTKEY" /> flag.</para>
        </remarks>
        <seealso cref="System.Globalization.SortKey" />
        <seealso cref="System.Globalization.CompareOptions" />
    </doc><doc for="CompareInfo.GetSortKey1">
        <summary>
            <para>Gets the <see cref="System.Globalization.SortKey" /> of the specified string.</para>
        </summary>
        <param name="source">The string for which to get the <see cref="System.Globalization.SortKey" />.</param>
        <returns>
            <para>The <see cref="System.Globalization.SortKey" /> of the specified string.</para>
        </returns>
        <remarks>
            <para>Each character in a string is given several categories of sort weights, including script, alphabetic, case, and diacritic weights.
      A sort key serves as the repository of these weights for a particular string.
      For example, a sort key might contain a string of alphabetic weights, followed by a string of case weights, and so on.
   <see cref="System.Globalization.SortKey" /> is equivalent to the Windows API method <see langword="LCMapString" /> with the <see langword="LCMAP_SORTKEY" /> flag.</para>
        </remarks>
        <seealso cref="System.Globalization.SortKey" />
    </doc><doc for="CompareInfo.Equals">
        <summary>
            <para>Determines whether the specified object is the same instance as the current <see cref="System.Globalization.CompareInfo" />.</para>
        </summary>
        <param name="value">The object to compare with the current <see cref="System.Globalization.CompareInfo" />.</param>
        <returns>
            <para><see langword="true" /> if the specified object is the same instance as the current <see cref="System.Globalization.CompareInfo" />;
   otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>
            <para>This method overrides <see cref="System.Object.Equals" qualify="true" />.</para>
            <para> If a security decision depends on a string comparison or a case-change operation,
 use the <see cref="System.Globalization.CultureInfo.InvariantCulture" /> to ensure that the behavior will be consistent
 regardless of the culture settings of the system.</para>
        </remarks>
        <seealso cref="System.Object.Equals" qualify="true" />
    </doc><doc for="CompareInfo.GetHashCode">
        <summary>
            <para>Serves as a hash function for the current <see cref="System.Globalization.CompareInfo" />
   for use in hashing algorithms and data structures, such as a hash table.</para>
        </summary>
        <returns>
            <para>A hash code for the current <see cref="System.Globalization.CompareInfo" />.</para>
        </returns>
        <remarks>
            <para>This method overrides <see cref="System.Object.GetHashCode" qualify="true" />.</para>
            <para>This method generates the same hash code for two objects that are equal
   according to the <see cref="System.Globalization.CompareInfo.Equals" /> method.</para>
        </remarks>
        <seealso cref="System.Object.GetHashCode" qualify="true" />
        <seealso cref="System.Collections.Hashtable" qualify="true" />
        <seealso cref="System.Globalization.CompareInfo.Equals" />
    </doc><doc for="CompareInfo.ToString">
        <summary>
            <para>Returns a string that represents the current <see cref="System.Globalization.CompareInfo" />.</para>
        </summary>
        <returns>
            <para>A string that represents the current <see cref="System.Globalization.CompareInfo" />.</para>
        </returns>
        <remarks>
            <para>This method overrides <see cref="System.Object.ToString" qualify="true" />.</para>
        </remarks>
        <seealso cref="System.Object.ToString" qualify="true" />
        <seealso cref="System.String" />
    </doc><doc for="CompareInfo.LCID">
        <summary>
            <para>Gets the properly formed culture identifier for the current <see cref="System.Globalization.CompareInfo" />.</para>
        </summary>
        <value>
            <para>The properly formed culture identifier for the current <see cref="System.Globalization.CompareInfo" />.</para>
        </value>
    </doc>
</docs>
