<docs>
	<doc for="SignedXml.debug">
		<summary>
    This functions checks wether the signature
    verifies or not. It computes the digest of the references and the value of the
    signature.
 </summary>
		<returns>
    true if the signature verifies
    otherwise false
 </returns>
	</doc>
	<doc for="SignedXml.m_signature">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SignedXml.m_strSigningKeyName">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SignedXml.KeyInfo">
		<summary>
			<para>Gets or sets the <see cref="System.Security.Cryptography.Xml.KeyInfo"/> of the 
   current <see cref="System.Security.Cryptography.Xml.SignedXml"/>.</para>
		</summary>
		<value>
			<para>The <see cref="System.Security.Cryptography.Xml.KeyInfo"/> of the current <see cref="System.Security.Cryptography.Xml.SignedXml"/>.</para>
		</value>
	</doc><doc for="SignedXml.Signature">
		<summary>
			<para> Gets the <see cref="System.Security.Cryptography.Xml.Signature"/> of the 
   current <see cref="System.Security.Cryptography.Xml.SignedXml"/>.
   </para>
		</summary>
		<value>
			<para>The <see cref="System.Security.Cryptography.Xml.Signature"/> of the current <see cref="System.Security.Cryptography.Xml.SignedXml"/>.</para>
		</value>
	</doc><doc for="SignedXml.SignatureMethod">
		<summary>
			<para> Gets the signature method of the current <see cref="System.Security.Cryptography.Xml.SignedXml"/>.</para>
		</summary>
		<value>
			<para>The signature method of the current <see cref="System.Security.Cryptography.Xml.SignedXml"/>.</para>
		</value>
	</doc><doc for="SignedXml.SignatureValue">
		<summary>
			<para> Gets the signature value of the current <see cref="System.Security.Cryptography.Xml.SignedXml"/>.</para>
		</summary>
		<value>
			<para> A byte array containing the signature value of the 
      current <see cref="System.Security.Cryptography.Xml.SignedXml"/>.
      </para>
		</value>
	</doc><doc for="SignedXml.SignedInfo">
		<summary>
			<para> Gets the <see cref="System.Security.Cryptography.Xml.SignedInfo"/> of the 
   current <see cref="System.Security.Cryptography.Xml.SignedXml"/>.
   </para>
		</summary>
		<value>
			<para> The <see cref="System.Security.Cryptography.Xml.SignedInfo"/> of the 
   current <see cref="System.Security.Cryptography.Xml.SignedXml"/>.
   </para>
		</value>
	</doc><doc for="SignedXml.SigningKey">
		<summary>
			<para>Gets or sets the asymmetric algorithm key used for 
      signing the <see cref="System.Security.Cryptography.Xml.SignedXml"/>.</para>
		</summary>
		<value>
			<para>The asymmetric algorithm key used for signing the <see cref="System.Security.Cryptography.Xml.SignedXml"/>.</para>
		</value>
	</doc><doc for="SignedXml.SigningKeyName">
		<summary>
			<para> Gets or sets the name of the installed key to be used for 
      signing the <see cref="System.Security.Cryptography.Xml.SignedXml"/>.
      </para>
		</summary>
		<value>
			<para>The name of the installed key to be used for signing the 
   <see cref="System.Security.Cryptography.Xml.SignedXml"/>.</para>
		</value>
	</doc><doc for="SignedXml.GetPublicKey">
		<summary>
			<para> 
      Returns the public key of
      the signature.</para>
		</summary>
		<returns>
			<para>An instance of an implementation of <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/> containing the public key of the 
   signature, or <see langword="null"/>
   if the key cannot be found.</para>
		</returns>
		<remarks>
			<para>The key must be either a <see cref="System.Security.Cryptography.DSA"/> or 
   an <see cref="System.Security.Cryptography.RSA"/> key.</para>
		</remarks>
	</doc><doc for="SignedXml.GetXml">
		<summary>
			<para>Returns the XML representation of the <see cref="System.Security.Cryptography.Xml.SignedXml"/>.</para>
		</summary>
		<returns>
			<para>The XML representation of the <see cref="System.Security.Cryptography.Xml.Signature"/>.</para>
		</returns>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The <see cref="System.Security.Cryptography.Xml.SignedXml.SignedInfo"/> property is <see langword="null"/>.</para>
			<para>-or-</para>
			<para>The <see cref="System.Security.Cryptography.Xml.SignedXml.SignatureValue"/> property is <see langword="null"/>.</para></exception>
	</doc><doc for="SignedXml.XmlDsigCanonicalizationUrl">
		<summary>
			<para>Specifies a URL that points to the standard 
      canonicalization algorithm for XML digital signatures. This field is constant.</para>
		</summary>
	</doc><doc for="SignedXml.XmlDsigCanonicalizationWithCommentsUrl">
		<summary>
			<para>Specifies a URL that points to the standard 
      canonicalization algorithm for XML digital signatures and includes comments.
      This field is constant.</para>
		</summary>
	</doc><doc for="SignedXml.XmlDsigDSAUrl">
		<summary>
			<para>Specifies a URL that points to the standard <see cref="System.Security.Cryptography.DSA"/> algorithm for XML digital 
   signatures. This field is constant.</para>
		</summary>
	</doc><doc for="SignedXml.XmlDsigMinimalCanonicalizationUrl">
		<summary>
			<para>Specifies a URL that points to the standard minimal 
      canonicalization algorithm for XML digital signatures. This field is constant.</para>
		</summary>
	</doc><doc for="SignedXml.XmlDsigNamespaceUrl">
		<summary>
			<para>Specifies a URL that points to the standard namespace 
      for XML digital signatures. This field is constant.</para>
		</summary>
	</doc><doc for="SignedXml.XmlDsigSHA1Url">
		<summary>
			<para>Specifies a URL that points to the standard <see cref="System.Security.Cryptography.SHA1"/> digest method for XML digital 
   signatures. This field is constant.</para>
		</summary>
	</doc><doc for="SignedXml.XmlDsigRSASHA1Url">
		<summary>
			<para>Specifies a URL that points to the standard <see cref="System.Security.Cryptography.RSA"/> signature method for XML digital 
   signatures. This field is constant.</para>
		</summary>
	</doc><doc for="SignedXml.XmlDsigHMACSHA1Url">
		<summary>
			<para>Specifies a URL that points to the standard <see cref="System.Security.Cryptography.HMACSHA1"/> algorithm for XML digital 
   signatures. This field is constant.</para>
		</summary>
	</doc><doc for="SignedXml.SignedXml2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.Xml.SignedXml"/> class from the specified 
<see cref="System.Xml.XmlElement"/> .</para>
		</summary>
		<param name="elem">The <see cref="System.Xml.XmlElement"/> from which to initialize the new instance.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="elem"/> parameter is <see langword="null"/>.</exception>
	</doc><doc for="SignedXml.SignatureLength">
		<summary>
			<para> Gets the length of the signature for the current
 <see cref="System.Security.Cryptography.Xml.SignedXml"/>.</para>
		</summary>
		<value>
			<para>The length of the signature for the current <see cref="System.Security.Cryptography.Xml.SignedXml"/>.</para>
		</value>
	</doc><doc for="SignedXml.GetIdElement">
		<summary>
			<para>Returns the <see cref="System.Xml.XmlElement"/> with the specified ID from the 
 specified <see cref="System.Xml.XmlDocument"/>.</para>
		</summary>
		<param name="document">The <see cref="System.Xml.XmlDocument"/> from which to retrieve the <see cref="System.Xml.XmlElement"/>.</param>
		<param name=" idValue">The ID of the <see cref="System.Xml.XmlElement"/> to retrieve from the <see cref="System.Xml.XmlDocument"/>.</param>
		<returns>
			<para>The <see cref="System.Xml.XmlElement"/> with the specified ID from the specified <see cref="System.Xml.XmlDocument"/>, or 
<see langword="null"/> if it could not be found.</para>
		</returns>
	</doc><doc for="SignedXml">
		<summary>
			<para> Provides a wrapper on the core
      XML signature object to facilitate creating XML signatures.
      </para>
		</summary>
		<example>
			<para>The following example demonstrates how to generate an enveloping XML 
      signature.</para>
			<codelink SampleID="XMLDSIG Signing" SnippetID="1"/>
			<para>The following example demonstrates how to 
check an XML signature.</para>
			<codelink SampleID="XMLDSIG Verification" SnippetID="1"/>
		</example>
	</doc><doc for="SignedXml.Resolver">
		<summary>
			<para>Sets the current <see cref="System.Xml.XmlResolver"/> object.</para>
		</summary>
		<value>
			<para>The current <see cref="System.Xml.XmlResolver"/> object.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Xml.XmlResolver"/> resolves external XML resources 
   named by a URI. If you do not trust the source of the XML file, then you might
   not want to allow the XML file to access computer resources named by the URI.
   The <see cref="System.Xml.SignedXml.Resolver"/> property allows you to control the level of access
   that XML files have to computer resources by specifying different <see cref="System.Xml.XmlResolver"/> objects.
   If you don't want to allow any access, you can set this property to
<see langword="null"/> (<see langword="Nothing"/> in Visual Basic). This property 
   defaults to an <see cref="System.Xml.XMLSecureResolver"/>
   
   
   
   object.</para>
		</remarks>
	</doc>
	<doc for="SignedXml.SignedXml">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.Xml.SignedXml"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.Xml.SignedXml"/>
class.</para>
		</summary>
		<example>
			<codelink SampleID="System.Security.Cryptography.XML-XMLDsigDetached" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SignedXml.SignedXml1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.Xml.SignedXml"/> class from the specified XML document.</para>
		</summary>
		<param name="document">The <see cref="System.Xml.XmlDocument"/> with which to initialize the new instance of <see cref="System.Security.Cryptography.Xml.SignedXml"/>.</param>
		<example>
			<codelink SampleID="System.Security.Cryptography.XML.SignedXml.Ctor-document" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SignedXml.LoadXml">
		<summary>
			<para>Loads a <see cref="System.Security.Cryptography.Xml.SignedXml"/> state from an XML element.</para>
		</summary>
		<param name="value">The XML element from which to load the <see cref="System.Security.Cryptography.Xml.SignedXml"/> state.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="value"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The <paramref name="value"/> parameter does not contain a valid <see cref="System.Security.Cryptography.Xml.SignedXml.SignatureValue"/>.</para>
			<para>-or-</para>
			<para>The <paramref name="value"/> parameter does not contain a valid <see cref="System.Security.Cryptography.Xml.SignedXml.SignedInfo"/>.</para></exception>
		<example>
			<codelink SampleID="System.Security.Cryptography.XML-XMLDsigDetached" SnippetID="3"/>
		</example>
	</doc>
	<doc for="SignedXml.AddReference">
		<summary>
			<para>Adds a <see cref="System.Security.Cryptography.Xml.Reference"/> to the list of references
   to be digested and signed.</para>
		</summary>
		<param name="reference">The <see cref="System.Security.Cryptography.Xml.Reference"/> to be added to the list of references to be digested and signed. </param>
		<example>
			<codelink SampleID="System.Security.Cryptography.XML.SignedXml-AddObject-AddReference" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SignedXml.AddObject">
		<summary>
			<para>Adds a <see cref="System.Security.Cryptography.Xml.DataObject"/> to the list of objects to be signed.</para>
		</summary>
		<param name="dataObject">The <see cref="System.Security.Cryptography.Xml.DataObject"/> to be added to the list of objects to be signed.</param>
		<example>
			<codelink SampleID="System.Security.Cryptography.XML.SignedXml-AddObject-AddReference" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SignedXml.CheckSignature">
		<overload>
			<para>Determines whether the <see cref="System.Security.Cryptography.Xml.SignedXml.Signature"/> verifies.</para>
		</overload>
		<summary>
			<para> Determines whether the <see cref="System.Security.Cryptography.Xml.SignedXml.Signature"/> verifies using the
   public key in the
   signature.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the
<see cref="System.Security.Cryptography.Xml.SignedXml.Signature"/> verifies; 
   otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The <see cref="System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm"/> of the public key in the signature does not match the <see cref="System.Security.Cryptography.Xml.SignedXml.SignatureMethod"/> property.</para>
			<para>-or-</para>
			<para>The signature description could not be created.</para>
			<para>-or</para>
			<para>The hash algorithm could not be created.</para></exception>
		<remarks>
			<para>This method also computes the digest of the references and the value of
      the signature.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Cryptography.XML-XMLDsigDetached" SnippetID="3"/>
		</example>
	</doc>
	<doc for="SignedXml.CheckSignature1">
		<summary>
			<para>Determines whether the <see cref="System.Security.Cryptography.Xml.SignedXml.Signature"/> verifies for the specified key.</para>
		</summary>
		<param name="key">The implementation of <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/> that holds the key to be used to verify the <see cref="System.Security.Cryptography.Xml.SignedXml.Signature"/>.</param>
		<returns>
			<para><see langword="true"/> if the
<see cref="System.Security.Cryptography.Xml.SignedXml.Signature"/> verifies for the 
   specified key; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="key"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The <see cref="System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm"/> of the <paramref name="key"/> parameter does not match the <see cref="System.Security.Cryptography.Xml.SignedXml.SignatureMethod"/> property.</para>
			<para>-or-</para>
			<para>The signature description could not be created.</para>
			<para>-or</para>
			<para>The hash algorithm could not be created.</para></exception>
		<example>
			<codelink SampleID="System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached" SnippetID="1"/>
			<codelink SampleID="System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SignedXml.CheckSignature2">
		<summary>
			<para>Determines whether the <see cref="System.Security.Cryptography.Xml.SignedXml.Signature"/>
verifies for the specified message authentication code (MAC) algorithm.</para>
		</summary>
		<param name="macAlg">The implementation of <see cref="System.Security.Cryptography.KeyedHashAlgorithm"/> that holds the MAC to be used to verify the <see cref="System.Security.Cryptography.Xml.SignedXml.Signature"/>.</param>
		<returns>
			<para><see langword="true"/> if the <see cref="System.Security.Cryptography.Xml.SignedXml.Signature"/>
verifies for the specified MAC; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="macAlg"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The <see cref="System.Security.Cryptography.HashAlgorithm.HashSize"/> of the specified <see cref="System.Security.Cryptography.KeyedHashAlgorithm"/> is not valid. </para>
			<para>-or-</para>
			<para>The <see cref="System.Security.Cryptography.Xml.SignedXml.Signature"/> property is <see langword="null"/>.</para>
			<para>-or-</para>
			<para>The cryptographic transform used to check the signature could not be created.</para></exception>
		<example>
			<codelink SampleID="System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached" SnippetID="1"/>
			<codelink SampleID="System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SignedXml.ComputeSignature">
		<overload>
			<para>Computes the signature.</para>
		</overload>
		<summary>
			<para>Computes the signature.</para>
		</summary>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The <see cref="System.Security.Cryptography.Xml.SignedXml.SigningKey"/> property is <see langword="null"/>.</para>
			<para>-or-</para>
			<para>The <see cref="System.Security.Cryptography.Xml.SignedXml.SigningKey"/> property is not an instance of an implementation of either <see cref="System.Security.Cryptography.DSA"/> or <see cref="System.Security.Cryptography.RSA"/>.</para>
			<para>-or-</para>
			<para>The key could not be loaded.</para></exception>
		<remarks>
			<para>You must set the data to be signed and
      the <see cref="System.Security.Cryptography.Xml.SignedXml.SigningKey"/> before calling this
      method.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Cryptography.XML-XMLDsigDetached" SnippetID="1"/>
			<codelink SampleID="System.Security.Cryptography.XML-XMLDsigEnvelope" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SignedXml.ComputeSignature1">
		<summary>
			<para>Computes the signature using the specified message
      authentication code (MAC) algorithm.</para>
		</summary>
		<param name="macAlg">The instance of an implementation of <see cref="System.Security.Cryptography.KeyedHashAlgorithm"/> that holds the MAC to be used to compute the <see cref="System.Security.Cryptography.Xml.SignedXml.Signature"/>.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="macAlg"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The <see cref="System.Security.Cryptography.KeyedHashAlgorithm"/> specified by the <paramref name="macAlg"/> parameter is not an instance of <see cref="System.Security.Cryptography.HMACSHA1"/>.</para>
			<para>-or-</para>
			<para>The <see cref="System.Security.Cryptography.HashAlgorithm.HashSize"/> of the specified <see cref="System.Security.Cryptography.KeyedHashAlgorithm"/> is not valid. </para>
			<para>-or-</para>
			<para>The cryptographic transform used to check the signature could not be created.</para></exception>
		<example>
			<codelink SampleID="System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached" SnippetID="1"/>
			<codelink SampleID="System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SignedXml.CheckSignatureReturningKey">
		<summary>
			<para>Determines whether the <see cref="System.Security.Cryptography.Xml.SignedXml.Signature"/>
verifies using the public key in the signature. </para>
		</summary>
		<param name="signingKey">When this method returns, contains the implementation of <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/> that holds the public key in the signature. This parameter is passed uninitialized.</param>
		<returns>
			<para><see langword="true"/> if the <see cref="System.Security.Cryptography.Xml.SignedXml.Signature"/>
verifies using the public key in the signature; otherwise,
<see langword="false"/>.</para>
		</returns>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The <see cref="System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm"/> of the public key in the signature does not match the <see cref="System.Security.Cryptography.Xml.SignedXml.SignatureMethod"/> property.</para>
			<para>-or-</para>
			<para>The signature description could not be created.</para>
			<para>-or</para>
			<para>The hash algorithm could not be created.</para></exception>
		<example>
			<codelink SampleID="System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached" SnippetID="1"/>
			<codelink SampleID="System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope" SnippetID="1"/>
		</example>
	</doc>
</docs>
