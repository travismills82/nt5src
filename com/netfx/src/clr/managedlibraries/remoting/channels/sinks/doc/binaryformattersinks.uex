<docs>
	<doc for="BinaryClientFormatterSinkProvider.BinaryClientFormatterSinkProvider">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider"/> class with default values.</para>
		</summary>
	</doc><doc for="BinaryClientFormatterSink.BinaryClientFormatterSink">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.BinaryClientFormatterSink"/> class.</para>
		</summary>
		<param name="nextSink">The next <see cref="System.Runtime.Remoting.Channels.IClientChannelSink"/> in the sink chain.</param>
	</doc><doc for="BinaryServerFormatterSinkProvider.BinaryServerFormatterSinkProvider">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider"/> class with default values.</para>
		</summary>
	</doc><doc for="BinaryServerFormatterSinkProvider.Next">
		<summary>
			<para>Gets or sets the next <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> in the sink provider chain.</para>
		</summary>
		<value>
			<para>The next <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> in the sink provider chain.</para>
		</value>
	</doc><doc for="BinaryClientFormatterSinkProvider.Next">
		<summary>
			<para>Gets or sets the next <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> in 
   the sink provider chain.</para>
		</summary>
		<value>
			<para>The next <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> in 
   the sink provider chain.</para>
		</value>
	</doc><doc for="BinaryClientFormatterSink.NextSink">
		<summary>
			<para>Gets the next <see cref="System.Runtime.Remoting.Messaging.IMessageSink"/> in the sink chain.</para>
		</summary>
		<value>
			<para>The next <see cref="System.Runtime.Remoting.Messaging.IMessageSink"/> in the sink chain.</para>
		</value>
	</doc><doc for="BinaryClientFormatterSink.NextChannelSink">
		<summary>
			<para>Gets the next <see cref="System.Runtime.Remoting.Channels.IClientChannelSink"/> in the sink chain.</para>
		</summary>
		<value>
			<para>The next <see cref="System.Runtime.Remoting.Channels.IClientChannelSink"/> in the sink chain.</para>
		</value>
	</doc><doc for="BinaryServerFormatterSink.NextChannelSink">
		<summary>
			<para>Gets the next <see cref="System.Runtime.Remoting.Channels.IServerChannelSink"/> in the sink chain.</para>
		</summary>
		<value>
			<para>The next <see cref="System.Runtime.Remoting.Channels.IServerChannelSink"/> in the sink chain.</para>
		</value>
	</doc><doc for="Protocol.Http">
		<summary>
			<para> Indicates that the current formatter sink is using the HTTP
 protocol, and therefore requires special processing.</para>
		</summary>
	</doc><doc for="Protocol.Other">
		<summary>
			<para>Indicates that a protocol other than HTTP is used with
 the current formatter sink.</para>
		</summary>
	</doc><doc for="BinaryClientFormatterSink.SyncProcessMessage">
		<summary>
			<para>Synchronously processes the provided message.</para>
		</summary>
		<param name="msg">The message to process.</param>
		<returns>
			<para>The response to the processed message.</para>
		</returns>
		<seealso topic="cpconsinkssinkchains"/>
	</doc><doc for="BinaryClientFormatterSink.ProcessMessage">
		<summary>
			<para> Requests message processing from the current sink.</para>
		</summary>
		<param name="msg">The message to process.</param>
		<param name="requestHeaders">The headers to add to the outgoing message heading to the server.</param>
		<param name="requestStream">The stream headed toward the transport sink.</param>
		<param name="responseHeaders">When this method returns, contains an <see cref="System.Runtime.Remoting.Channels.ITransportHeaders"/> interface that holds the headers that the server returned. This parameter is passed uninitialized.</param>
		<param name="responseStream">When this method returns, contains a <see cref="System.IO.Stream"/> coming back from the transport sink. This parameter is passed uninitialized.</param>
		<seealso topic="cpconsinkssinkchains"/>
	</doc><doc for="BinaryServerFormatterSinkProvider.BinaryServerFormatterSinkProvider1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider"/> class with the provided
 properties and provider data.</para>
		</summary>
		<param name="properties">An <see cref="System.Collections.IDictionary"/> of configuration properties to use with the new instance of <see cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider"/>.</param>
		<param name="providerData">An <see cref="System.Collections.ICollection"/> of <see cref="System.Runtime.Remoting.Channels.SinkProviderData"/> to use with the new instance of <see cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider"/>.</param>
	</doc><doc for="BinaryServerFormatterSinkProvider.CreateSink">
		<summary>
			<para>Creates a sink chain.
 </para>
		</summary>
		<param name="channel">The channel for which to create the channel sink chain.</param>
		<returns>
			<para> The first sink of the
 newly formed channel sink chain. </para>
		</returns>
	</doc><doc for="BinaryServerFormatterSink.GetResponseStream">
		<summary>
			<para>Returns the <see cref="System.IO.Stream"/> onto which the provided
 response message is to be serialized.</para>
		</summary>
		<param name="sinkStack">A stack of sinks leading back to the server transport sink.</param>
		<param name=" state">Information associated with the current sink, generated on the request side, and needed on the response side.</param>
		<param name=" msg"> The response message to serialize. </param>
		<param name=" headers">The headers to put in the response stream to the client.</param>
		<returns>
			<para>The <see cref="System.IO.Stream"/> onto which the provided
 response message is to be serialized.</para>
		</returns>
		<remarks>
			<para>This method is called when a response stream needs to be created.</para>
		</remarks>
		<seealso topic="cpconsinkssinkchains"/>
	</doc><doc for="BinaryClientFormatterSinkProvider.BinaryClientFormatterSinkProvider1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider"/> class with the given
 properties and provider data.</para>
		</summary>
		<param name="properties">An <see cref="System.Collections.IDictionary"/> of configuration properties to use with the new instance of <see cref="System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider"/>.</param>
		<param name=" providerData">An <see cref="System.Collections.ICollection"/> of <see cref="System.Runtime.Remoting.Channels.SinkProviderData"/> objects containing provider data to use with the new instance of <see cref="System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider"/>.</param>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc><doc for="BinaryClientFormatterSinkProvider.CreateSink">
		<summary>
			<para> Creates
      a sink chain.
      </para>
		</summary>
		<param name="channel">Channel for which this sink chain is being constructed. </param>
		<param name="url">URL of object to connect to or the channel URI for the target object. </param>
		<param name="remoteChannelData"><para>A channel data object describing a channel on the remote server. </para></param>
		<returns>
			<para> The first sink of the newly formed channel sink chain,
      or <see langword="null"/> indicating that this provider will not or cannot provide a connection for this endpoint.
      </para>
		</returns>
		<remarks>
			<para>When the <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider.CreateSink"/>
method is called, it creates its own channel sink, forwards the <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider.CreateSink"/>
call to the next sink provider in the chain (if there is one), and ensures that
the next sink and the current one are linked together.</para>
		</remarks>
	</doc><doc for="BinaryServerFormatterSinkProvider">
		<summary>
			<para> Provides the implementation for the server formatter channel
      sink provider that uses the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.</para>
		</summary>
		<remarks>
			<para>Channel sinks are connected to a server channel through implementations of the
   <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> interface. All the remoting
      server channels provide constructors that take an <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> as a parameter.</para>
			<para> Channel sink providers are stored in a chain, and
      the user is responsible for chaining all channel sink providers together before
      passing the outer one to the channel constructor. <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> provides a property called
   <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider.Next"/> for this purpose. </para>
   When multiple channel sink providers are provided
   in a configuration file, the remoting infrastructure will chain them together in
   the order they are found in the configuration file. The channel sink providers
   will be created when the channel is created during the <see cref="System.Runtime.Remoting.RemotingConfiguration.Configure" qualify="true"/> call.
   
   <para>Formatter sinks use sink configuration properties to configure the channel at
      run time. Sink properties can be specified in a configuration file, or
      programmatically, inside of an <see cref="System.Collections.IDictionary"/>. In a configuration file
      all values are represented by strings, but when building a property <see cref="System.Collections.IDictionary"/>
      programmatically, value types can be specified with their native values or with
      strings.</para>
			<para>The following table shows the sink configuration properties that can be
      specified for the current sink provider. </para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="includeVersions"/></term>
					<description><see langword="true"/> or
   <see langword="false"/> . Specifies whether the formatter will include
      versioning information.</description>
				</item>
			</list>
		</remarks>
		<seealso cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSink"/>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
		<seealso topic="gnconremotingsettingsschema"/>
	</doc><doc for="BinaryServerFormatterSinkProvider.GetChannelData">
		<summary>
			<para> Returns the channel data for the channel that the
      current sink is associated with.</para>
		</summary>
		<param name="channelData">An <see cref="System.Runtime.Remoting.Channels.IChannelDataStore"/> object in which the channel data is to be returned.</param>
	</doc><doc for="BinaryClientFormatterSinkProvider">
		<summary>
			<para> Provides the implementation for the binary client
      formatter sink provider.</para>
		</summary>
		<remarks>
			<para>A <see cref="System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider"/> creates client formatter sinks
   that use the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> to serialize
   messages for the
   client channel through which remoting messages flow.</para>
			<para>The function of the formatter sink is to generate the necessary headers and
   serialize the message to the stream. After the formatter sink, the <see cref="System.Runtime.Remoting.Messaging.IMessage"/>
   is forwarded to all sinks in the channel
   sink chain through the <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage"/> or <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest"/> calls. At this
   stage the message has already been serialized and is provided as information
   only. Sinks that need to create or modify the message must be placed in the
   sink chain before the formatter.
   
   You can do this by implementing both the
<see cref="System.Runtime.Remoting.Messaging.IMessageSink"/> and <see cref="System.Runtime.Remoting.Channels.IClientChannelSink"/> 
interface. The
formatter sink can then be placed in the sink chain later. </para>
			<para>Formatter sinks use sink configuration properties to configure the channel at
   run time. Sink properties can be specified in a configuration file, or
   programmatically, inside of an <see cref="System.Collections.IDictionary"/>. In a configuration file
   all values are represented by strings, but when building a property <see cref="System.Collections.IDictionary"/>
   programmatically, value types can be specified with their native values or with
   strings.</para>
			<para>The following table shows the sink configuration properties that can be
   specified for the current sink provider. </para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="includeVersions"/></term>
					<description><see langword="true"/> or
<see langword="false"/> . Specifies whether the formatter will include 
   versioning information.</description>
				</item>
			</list>
		</remarks>
		<seealso cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
		<seealso topic="gnconremotingsettingsschema"/>
	</doc><doc for="BinaryServerFormatterSink.AsyncProcessResponse">
		<summary>
			<para> Requests processing of the response from a method call
      sent asynchronously.</para>
		</summary>
		<param name="sinkStack">A stack of sinks leading back to the server transport sink.</param>
		<param name="state">Information associated with the current sink, generated on the request side, and needed on the response side.</param>
		<param name="msg">The response message.</param>
		<param name="headers">The headers to add to the return message heading to the client.</param>
		<param name="stream">The stream heading back to the transport sink.</param>
		<seealso cref="System.Runtime.Remoting.Channels.ServerChannelSinkStack"/>
		<seealso cref="System.Runtime.Remoting.Channels.ServerChannelSinkStack.Push" qualify="true"/>
		<seealso topic="cpconsinkssinkchains"/>
	</doc><doc for="BinaryServerFormatterSink.Properties">
		<summary>
			<para>Gets an <see cref="System.Collections.IDictionary"/> of properties for the
   current channel sink.</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.IDictionary"/> of properties for the current channel sink.</para>
		</value>
		<remarks>
			<note type="note">
      For
      more information, see <see topic="cpconchannelformatterconfigurationproperties"/>.
      
   </note>
		</remarks>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc><doc for="BinaryClientFormatterSink.AsyncProcessMessage">
		<summary>
			<para>Asynchronously processes the provided message.</para>
		</summary>
		<param name="msg">The message to process.</param>
		<param name=" replySink">The sink that will receive the reply to the provided message.</param>
		<returns>
			<para>An <see cref="System.Runtime.Remoting.Messaging.IMessageCtrl"/> that provides a way to
   control the asynchronous message after it has been dispatched.</para>
		</returns>
		<seealso topic="cpconsinkssinkchains"/>
	</doc><doc for="BinaryClientFormatterSink.AsyncProcessRequest">
		<summary>
			<para>Requests asynchronous processing of a method call on the current sink.</para>
		</summary>
		<param name="sinkStack">A stack of channel sinks that called the current sink.</param>
		<param name=" msg">The message to process.</param>
		<param name=" headers">The headers to add to the outgoing message heading to the server.</param>
		<param name=" stream">The stream headed toward the transport sink.</param>
		<seealso topic="cpconsinkssinkchains"/>
	</doc><doc for="BinaryClientFormatterSink.AsyncProcessResponse">
		<summary>
			<para>Requests asynchronous processing of a response to a method call on the
      current sink.</para>
		</summary>
		<param name="sinkStack">A stack of sinks that called the current sink.</param>
		<param name=" state">Information associated with the current sink, generated on the request side, and needed on the response side.</param>
		<param name=" headers">The headers retrieved from the server response stream.</param>
		<param name=" stream">The stream coming back from the transport sink.</param>
		<seealso cref="System.Runtime.Remoting.Channels.ClientChannelSinkStack"/>
		<seealso cref="System.Runtime.Remoting.Channels.ClientChannelSinkStack.Push" qualify="true"/>
		<seealso topic="cpconsinkssinkchains"/>
	</doc><doc for="BinaryClientFormatterSink.GetRequestStream">
		<summary>
			<para>Returns the <see cref="System.IO.Stream"/> onto which
   the provided message is to be serialized.</para>
		</summary>
		<param name="msg">The <see cref="System.Runtime.Remoting.Messaging.IMethodCallMessage"/> containing details about the method call.</param>
		<param name="headers">The headers to add to the outgoing message heading to the server.</param>
		<returns>
			<para>The <see cref="System.IO.Stream"/> onto which the provided
   message is to be serialized.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.BinaryClientFormatterSink.GetRequestStream"/> method is called by the formatter sink before it serializes the
   message.</para>
		</remarks>
		<seealso topic="cpconsinkssinkchains"/>
	</doc><doc for="BinaryClientFormatterSink.Properties">
		<summary>
			<para>Gets an <see cref="System.Collections.IDictionary"/> of properties for the
   current channel sink.</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.IDictionary"/> of properties for the current channel sink.</para>
		</value>
		<remarks>
			<note type="note">
      
      For more information, see <see topic="cpconchannelformatterconfigurationproperties"/>.
      
   </note>
		</remarks>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc><doc for="Protocol">
		<summary>
			<para>Specifies the protocol to use with the <see cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSink"/>class.</para>
		</summary>
	</doc><doc for="BinaryServerFormatterSink.ProcessMessage">
		<summary>
			<para> Requests message processing from the current sink.</para>
		</summary>
		<param name="sinkStack">A stack of channel sinks that called the current sink.</param>
		<param name="requestMsg">The message that contains the request.</param>
		<param name="requestHeaders">Headers retrieved from the incoming message from the client.</param>
		<param name="requestStream">The stream that needs to be processed and passed on to the deserialization sink.</param>
		<param name="responseMsg">When this method returns, contains an <see cref="System.Runtime.Remoting.Messaging.IMessage"/> that holds the response message. This parameter is passed uninitialized.</param>
		<param name="responseHeaders">When this method returns, contains an <see cref="System.Runtime.Remoting.Channels.ITransportHeaders"/> that holds the headers to add to return message heading to the client. This parameter is passed uninitialized. </param>
		<param name="responseStream">When this method returns, contains a <see cref="System.IO.Stream"/> that is heading to the transport sink. This parameter is passed uninitialized. </param>
		<returns>
			<para>A <see cref="System.Runtime.Remoting.Channels.ServerProcessing"/> status value that
   provides information about how the message was processed.</para>
		</returns>
		<remarks>
			<para> The proxy's job is to convert a method
      call invoked on it into a message. The message, which implements the
   <see cref="System.Runtime.Remoting.Messaging.IMessage"/> interface, is passed from the
      client end to the server end by invoking <see cref="System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage"/>
      on message sink objects.
      Message sinks are chained together, which means that every message sink is
      responsible for calling <see cref="System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage"/> on the next
      message sink after the current message sink has finished its
      work. For instance, a synchronization-related message sink might cause a lock
      to be acquired or released and delegated to the downstream message sink.</para>
			<para>When the formatter channel sink gets a message that needs to be sent over the
      channel, it calls <see cref="System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage"/>, passing the
      message as a parameter. The formatter sink then creates the transport header
      array and calls <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.GetRequestStream"/> on
      the formatter sink. This call is forwarded down the sink chain, and any sink
      can create a request stream that will be passed back to the formatter sink.
      After this call returns, the message is serialized, <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage"/> is called
      on the first chain in the sink chain, and the message is passed to the channel
      sinks.</para>
			<para>After the channel sinks get the message, they can write data to the stream,
      add headers to the header array, and add themselves to the sink stack before
      forwarding the call to the next sink. When the call reaches the transport sink
      at the end of the chain, the transport sink sends the headers and serialized
      message over the channel to the server, where the process is reversed.</para>
			<para> When the message gets to the server side, the transport sink
      retrieves the headers and serialized message from the stream and forwards these
      through the sink chain until the formatter sink is reached. The formatter
      sink then deserializes the message and forwards it to the remoting infrastructure.
      Then, the remoting infrastructure turns the message into a method call, and calls the server object.</para>
		</remarks>
	</doc><doc for="BinaryServerFormatterSink.BinaryServerFormatterSink">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSink"/> class.</para>
		</summary>
		<param name="protocol">The <see cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol"/> that will be used with the current instance of <see cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSink"/> .</param>
		<param name=" nextSink">The next sink in the channel sink chain.</param>
		<param name=" receiver">Indicates the channel that will receive the messages serialized by the new instance of <see cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSink"/>.</param>
	</doc>
	<doc for="BinaryServerFormatterSinkProvider.TypeFilterLevel">
		<summary>
			<para>Gets or sets the <see langword="TypeFilterLevel"/> of automatic deserialization the 
<see langword="BinaryServerFormatterSink"/> 
performs. </para>
		</summary>
		<value>
			<para>The <see langword="TypeFilterLevel"/> representing the current automatic deserialization 
   level.</para>
		</value>
		<remarks>
			<para>Supported values are <see langword="Low"/> (the default) and 
<see langword="Full"/>. For details about deserialization levels, see Automatic 
   Deserialization in .NET Remoting.</para>
		</remarks>
	</doc>
	<doc for="BinaryServerFormatterSink.TypeFilterLevel">
		<summary>
			<para>Gets or sets the <see langword="TypeFilterLevel"/> of 
   automatic deserialization the <see langword="BinaryServerFormatterSink"/> performs.</para>
		</summary>
		<value>
			<para>The <see langword="TypeFilterLevel"/> representing the current automatic 
   deserialization level.</para>
		</value>
		<remarks>
   Supported values are <see langword="Low"/>
   (the default) and <see langword="Full"/>. For details about deserialization
   levels, see Automatic Deserialization in .NET Remoting.
</remarks>
	</doc>
	<doc for="BinaryServerFormatterSink">
		<summary>
			<para> Provides the implementation for a server formatter
      sink that uses the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> .</para>
		</summary>
		<remarks>
			<para>The request stream propagates from the server transport sink
      through the server channel sinks until it reaches the appropriate formatter sink.
      The formatter sink deserializes the message and passes it through the pipeline.
      A special dispatch sink is inserted at the end of the channel sink chain
      by the <see cref="System.Runtime.Remoting.Channels.ChannelServices.CreateServerChannelSinkChain" qualify="true"/> method, which
      is called
      by
      server channels to create the server channel sink chains. When the message reaches the
      dispatch sink, the dispatch sink passes the message to the remoting infrastructure.</para>
			<para>The following table shows the sink configuration properties that can be 
      specified for the current sink provider. </para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="includeVersions"/></term>
					<description><see langword="true"/> or 
   <see langword="false"/>. Specifies whether the formatter will include 
      versioning information.</description>
				</item>
				<item>
					<term><see langword="strictBinding"/></term>
					<description><see langword="true"/> or <see langword="false"/>. Indicates that a receiving formatter will first try to identify
the type using complete version information if it exists before using only the type name and assembly name without version information.
The default for both system-provided formatters is false.</description>
				</item>
				<item>
					<term><see langword="typeFilterLevel"/></term>
					<description>
						<para>A 
      string value specifying the level of automatic deserialization a server
      channel attempts. Supported values are <see langword="Low"/> (the default)
      and <see langword="Full"/>. For details about deserialization levels, see
   <see topic="cpconAutomaticDeserializationInNETRemoting"/> 
   .</para>
						<para>This property is supported only by the .NET 
   Framework version 1.1 on the following platforms: Windows 98, Windows NT
   4.0, Windows Millennium Edition, Windows 2000, Windows XP Home Edition,
   Windows XP Professional, Windows .NET Server
   family.</para></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconsinkssinkchains"/>
		<seealso cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider"/>
		<seealso topic="cpconAutomaticDeserializationInNETRemoting"/>
	</doc>
	<doc for="BinaryClientFormatterSink">
		<summary>
			<para> Provides the implementation for a client formatter
      sink that uses the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> .</para>
		</summary>
		<remarks>
			<para>The function of the formatter sink is to generate the necessary headers and
      serialize the message to the stream. After the formatter sink, the <see cref="System.Runtime.Remoting.Messaging.IMessage"/>
      is forwarded to all sinks in the chain through the <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage"/> or <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest"/> calls. At
      this stage the message has already been serialized and is provided as information
      only. Sinks that need to create or modify the message must be placed in the sink
      chain before the formatter. This is easily achieved by implementing the <see cref="System.Runtime.Remoting.Channels.IClientFormatterSink"/> interface,
      which gives the impression of having a reference to the formatter sink. The real
      formatter sink can then be placed later in the sink chain.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="includeVersions"/></term>
					<description><see langword="true"/> or 
   <see langword="false"/>. Specifies whether the formatter will include 
      versioning information.</description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconsinkssinkchains"/>
	</doc>
</docs>
