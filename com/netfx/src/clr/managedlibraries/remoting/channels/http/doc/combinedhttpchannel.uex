<docs>
	<doc for="HttpChannel.HttpChannel">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/> class, activating the
   client and server channels with default values.</para>
		</summary>
		<remarks>
			<para>The default constructor initializes all fields to their default values. If 
      the default constructor is used, the channel functions only as a client channel,
      and does not listen on any ports.</para>
		</remarks>
	</doc><doc for="HttpChannel.StartListening">
		<summary>
			<para> Instructs the current channel to start listening for requests.</para>
		</summary>
		<param name="data">Should always be <see langword="null"/> for <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/> .</param>
		<remarks>
			<para>The data object can be used to pass a specific initialization state to the
      channel.</para>
		</remarks>
	</doc><doc for="HttpChannel.StopListening">
		<summary>
			<para> Instructs the
      current channel to stop listening for requests.</para>
		</summary>
		<param name="data">Should always be <see langword="null"/> for <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/> .</param>
		<remarks>
			<para>The data object can be used to pass a specific state to the channel.</para>
		</remarks>
	</doc><doc for="HttpChannel.ChannelData">
		<summary>
			<para> Gets the channel-specific data.</para>
		</summary>
		<value>
			<para>The channel data.</para>
		</value>
		<remarks>
			<para>The current property is used when <see cref="System.Runtime.Remoting.RemotingServices.Marshal" qualify="true"/> is called and an <see cref="System.Runtime.Remoting.ObjRef"/> is created.</para>
		</remarks>
	</doc><doc for="HttpChannel.ChannelSinkChain">
		<summary>
			<para>Gets the channel sink chain that the current channel is using.
      </para>
		</summary>
		<value>
			<para>The channel sink chain that the current channel is using. </para>
		</value>
		<remarks>
			<para>Channel sinks provide a plug-in point that allows access 
      to the underlying messages flowing through the channel as well as the stream
      used by the transport mechanism to send messages to a remote object. Channel
      sinks are linked together in a chain of <see langword="ChannelSinkProviders"/>
      
      and all channel messages flow through this
      chain of sinks before the message is finally serialized and transported.</para>
		</remarks>
	</doc><doc for="HttpChannel.ChannelScheme">
		<summary>
			<para>Gets the type of listener to hook into (for example "http").</para>
		</summary>
		<value>
			<para>The type of listener to hook into.</para>
		</value>
		<remarks>
			<para>The value of the current property is not case-sensitive. </para>
		</remarks>
	</doc><doc for="HttpChannel.ChannelPriority">
		<summary>
			<para>Returns the priority of the current channel.</para>
		</summary>
		<value>
			<para>An integer representing the priority assigned to this channel.</para>
		</value>
		<remarks>
			<para>Higher numbers indicate a higher chance of being chosen to connect first. The 
 default priority is 1, and negative numbers are allowed.</para>
		</remarks>
	</doc><doc for="HttpChannel.Keys">
		<summary>
			<para> Gets an <see cref="System.Collections.ICollection"/> of keys with which
 the channel properties are associated.</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.ICollection"/> of keys with which the channel
 properties are associated.</para>
		</value>
		<remarks>
			<para>The current property returns the keys of channel properties of both <see cref="System.Runtime.Remoting.Channels.Http.HttpServerChannel"/> and <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel"/>.
For a list of possible channel
 properties and an example, see
<see topic="cpconchannelformatterconfigurationproperties"/>.
 </para>
		</remarks>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc><doc for="HttpChannel.ChannelName">
		<summary>
			<para>Gets the name of the current channel.</para>
		</summary>
		<value>
			<para> The name of this channel.</para>
		</value>
		<remarks>
			<para>This property is used to retrieve a specific channel when
 calling <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetChannel"/>. If this property is not
 set, the system defaults to "http". If you want to register more than one
 <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/>, each must have a unique
 name. Set this property to the <see cref="System.String.Empty"/> string ("") if you want to ignore
 names, but avoid naming collisions. The system will allow any number of channels
 with the <see cref="System.String.Empty"/>.</para>
		</remarks>
	</doc><doc for="HttpChannel.Parse">
		<summary>
			<para> Extracts the channel URI
      and the remote well known object URI from the specified URL.</para>
		</summary>
		<param name="url">The URL from which to extract the URI of the remote well known object.</param>
		<param name=" objectURI">When this method returns, contains a <see cref="System.String"/> that holds the URI of the remote well known object. This parameter is passed uninitialized.</param>
		<returns>
			<para>The URI of the current channel.</para>
		</returns>
		<remarks>
			<para>A URI of an object is a value that uniquely identifies a specific object
      instance.</para>
		</remarks>
		<seealso cref="System.Uri"/>
	</doc><doc for="HttpChannel.AddHookChannelUri">
		<summary>
			<para>Adds a URI on which the channel hook should listen.</para>
		</summary>
		<param name="channelUri">The channel URI on which the channel hook is listening.</param>
		<remarks>
			<note type="note">
      Client code should not call the
   <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel.AddHookChannelUri"/> method directly.
   </note>
		</remarks>
		<example>
			<para>The following example demonstrates the functionality of 
      the <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel.AddHookChannelUri"/> method. Because
      client code should not call this method directly, the example demonstrates an
      implementation of the method in a class that mimics the behavior of the <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/>class.</para>
			<codelink SampleID="HttpChannel.AddHookChannelUri" SnippetID="1"/>
		</example>
	</doc><doc for="HttpChannel.Properties">
		<summary>
			<para>Gets an <see cref="System.Collections.IDictionary"/> of the channel
   properties associated with the current channel.</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.IDictionary"/> of the channel properties associated with
   the current channel.</para>
		</value>
		<remarks>
			<para>Channels properties are used to configure the channel at
      run time. The <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel.Properties"/>
      property returns channel properties of the
      underlying <see cref="System.Runtime.Remoting.Channels.Http.HttpServerChannel"/> and <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel"/> . For a list of
      possible channel properties and an example, see
      <see topic="cpconchannelformatterconfigurationproperties"/> .</para>
		</remarks>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc><doc for="HttpChannel.CreateMessageSink">
		<summary>
			<para>Returns a channel message sink that delivers messages to the specified URL
      or channel data object. </para>
		</summary>
		<param name="url">The URL to which the new sink should deliver messages. Can be <see langword="null"/>.</param>
		<param name="remoteChannelData">The channel data object of the remote host to which the new sink should deliver messages. Can be <see langword="null"/>.</param>
		<param name="objectURI">When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized.</param>
		<returns>
			<para>A channel message sink that delivers messages to
      the specified URL or channel data object.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel.CreateMessageSink"/> method
   returns a channel message sink that delivers messages to either the specified
   URL or channel data object. If the <paramref name="uri "/>parameter is
<see langword="null"/>,<see langword=" "/><paramref name="remoteChannelData"/> is used 
   as a target for the sink. Either the <paramref name="url"/> or
<paramref name="remoteChannelData"/> parameters can be <see langword="null"/>, but not 
   both.</para>
			<para>Channel sinks provide a plug-in point that allows access
   to the underlying messages flowing through the channel as well as the stream
   used by the transport mechanism to send messages to a remote object. Channel
   sinks are linked together in a chain of <see langword="ChannelSinkProviders"/>
   
   and all channel messages flow through this
   chain of sinks before the message is finally serialized and transported.</para>
		</remarks>
		<example>
			<codelink SampleID="HttpChannel.CreateMessageSink" SnippetID="1"/>
		</example>
	</doc><doc for="HttpChannel.GetUrlsForUri">
		<summary>
			<para> Returns an array of all the
      URLs for an object with the specified URI,
      hosted on the current <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/>.
      </para>
		</summary>
		<param name="objectURI">The URI of the object for which URL's are required. </param>
		<returns>
			<para>An array of the URLs for an object with the specified
      URI, hosted on the current <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/> .</para>
		</returns>
		<remarks>
			<para>This method is used by <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject" qualify="true"/>.
   </para>
		</remarks>
		<example>
			<codelink SampleID="HttpChannel.GetUrlsFromUri" SnippetID="1"/>
		</example>
	</doc><doc for="HttpChannel.this">
		<summary>
			<para>Gets or sets a channel property associated with the specified key.</para>
		</summary>
		<param name="key">The key with which the requested property is associated.</param>
		<value>
			<para>A channel property associated with the specified key.</para>
		</value>
		<remarks>
			<note type="note">
      Channel properties are used to configure the
      channel at run time. For a list of possible channel properties and an
      example, see <see topic="cpconchannelformatterconfigurationproperties"/> .
      
   </note>
		</remarks>
		<example>
			<codelink SampleID="HttpChannel.Item" SnippetID="1"/>
		</example>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc><doc for="HttpChannel.WantsToListen">
		<summary>
			<para>Gets a Boolean value indicating whether the current
      instance wants to be hooked into the
      outside listener service. </para>
		</summary>
		<value>
			<para>A Boolean value indicating whether <see cref="System.Runtime.Remoting.Channels.IChannelReceiverHook"/> wants to be hooked into the
   outside listener service.</para>
		</value>
		<example>
			<codelink SampleID="HttpChannel.WantsToListen" SnippetID="1"/>
		</example>
	</doc><doc for="HttpChannel.HttpChannel1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/> class, activating the
   underlying <see cref="System.Runtime.Remoting.Channels.Http.HttpServerChannel"/> on the specified port.</para>
		</summary>
		<param name="port">The port on which to activate the underlying <see cref="System.Runtime.Remoting.Channels.Http.HttpServerChannel"/>.</param>
		<remarks>
   To request that the remoting system choose
   an open port on your behalf, specify port "0" (zero). This will create an
<see langword="HttpServerChannel "/>instance to listen for requests on the 
   dyamically assigned port. This is typically done on the client to make sure that
   an <see langword="HttpServerChannel "/>is listening for callback methods.
</remarks>
	</doc>
	<doc for="HttpChannel.HttpChannel2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/> class with the given
   channel properties and specified <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> and <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/>.</para>
		</summary>
		<param name="properties">The channel properties with which the new instance of <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/> should be initialized.</param>
		<param name="clientSinkProvider">The <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> that creates the client channel sinks for the underlying <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel"/> through which remoting messages flow through.</param>
		<param name="serverSinkProvider">The <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> that creates server channel sinks for the underlying <see cref="System.Runtime.Remoting.Channels.Http.HttpServerChannel"/> through which remoting messages flow through.</param>
		<exception cref="System.ArgumentException">The provided channel properties are not in the correct format.</exception>
		<remarks>
			<para>Channel sinks provide a plug-in point that allows access
      to the underlying messages flowing through the channel as well as the stream used by
      the transport mechanism to send messages to a remote object. Channel sinks are also
      responsible for transporting messages between the client and the server. Channel sinks are
      linked together in a chain, and all channel messages flow through this
      chain of sinks before the message is finally serialized and transported.</para>
			<para>When the
   <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider.CreateSink"/> method is called on a sink
      provider, it should create its own channel sink, forward the
   <see langword="CreateSink"/>
   call to the next sink provider in the
   chain, and ensure that the next sink and the current one are linked together. The
   provider then returns its sink to the caller. Channel sinks are responsible for
   forwarding all calls made on them to the next sink in the chain.</para>
			<note type="note">
   Channel properties are used
   to configure the channel at run time. For a list of possible channel
   properties and an example, see <see topic="cpconchannelformatterconfigurationproperties"/> . To request that the
   remoting system choose an open port on your behalf, specify a "port" property
   of "0" (zero). This will create an <see langword="HttpServerChannel "/>instance to listen for requests on the dyamically assigned port. This
   is typically done on the client to make sure that an <see langword="HttpServerChannel "/>is listening for callback methods.
   
</note>
		</remarks>
		<example>
			<para>The following example demonstrates initialization of an <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/> class with an <see cref="System.Collections.IDictionary"/>
of configuration properties, an <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/>, and an <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/>.</para>
			<codelink SampleID="HttpChannel" SnippetID="4"/>
		</example>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc>
	<doc for="HttpChannel">
		<summary>
			<para>Provides an implementation for a sender-receiver channel
      that uses the HTTP protocol to transmit messages.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/> class is a combined channel, which combines the <see cref="System.Runtime.Remoting.Channels.Http.HttpServerChannel"/> and <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel"/> for convenience. The
<see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/> 
transports messages to and from remote objects
using the SOAP
protocol. All outbound messages are passed through the SOAP formatter, where the message
is changed into XML and serialized, and the required SOAP headers are added
to the stream. The binary formatter can also be specified, which results in a
binary data stream. The data stream is then transported to the URI using the
HTTP protocol. For inbound messages the process is reversed. </para>
			<para>Channels transport messages between applications across remoting
   boundaries (for example application domains, processes, and machines). These crossings
   include both inbound and outbound. The current channel listens on an endpoint
   for inbound messages and sends the outbound messages to the endpoint.
   The <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/> converts the messages
   sent along it to and from the XML format, receiving and sending them using the HTTP
   protocol. </para>
			<para>On the client side, messages are handed off to the client channel sink chain
   after they traverse the client <see cref="System.Runtime.Remoting.Contexts.Context"/> chain. The first channel sink
   is typically an <see cref="System.Runtime.Remoting.Channels.IClientFormatterSink"/> which serializes the message
   into a stream that is passed down the channel sink chain to the client transport
   sink. The client transport sink then writes this stream out to the wire. </para>
			<para>On the server side, the server transport sink reads requests off of the wire
   and passes the request stream to the server channel sink chain. The server
   formatter sink at the end of this chain will deserialize the request into a
   message. It will then hand this message off to the Remoting infrastructure which
   will dispatch it to the server <see cref="System.Runtime.Remoting.Contexts.Context"/> chain. </para>
			<para><see cref="System.Runtime.Remoting.Channels.IChannel"/> implementations use channel configuration properties to configure
the channel at run time. Channel properties can be specified in a
configuration file, or programmatically, inside of an <see cref="System.Collections.IDictionary"/>. In a configuration file all values
are represented by strings, but when building a property <see cref="System.Collections.IDictionary"/>
programatically, value types can be specified with their native values
or with strings.</para>
			<para>The following table
   shows the channel configuration properties that can be specified for
   the current channel.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="name"/></term>
					<description>Indicates the name of the channel. This
      property is used to retrieve a specific channel when calling <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetChannel"/>. If this
      property is not set, the system defaults to "http". If you want to
      register more than one <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/>, each must have a
      unique name. Set this property to the <see cref="System.String.Empty"/> string ("") if you want to
      ignore names, but avoid naming collisions. The system will allow any
      number of channels with the <see cref="System.String.Empty" qualify="true"/>
      name.</description>
				</item>
				<item>
					<term><see langword="priority"/></term>
					<description>An
   integer representing the priority assigned to this channel. Higher numbers indicate a higher chance of being
   chosen to connect first. The default priority is 1, and negative numbers
   are allowed.</description>
				</item>
				<item>
					<term><see langword="clientConnectionLimit"/></term>
					<description>An integer indicating how many connections can be simultaneously
   opened to a given server. The default is 2.</description>
				</item>
				<item>
					<term><see langword="proxyName"/></term>
					<description>The name of the proxy computer.</description>
				</item>
				<item>
					<term><see langword="proxyPort"/></term>
					<description>An integer specifying the proxy port.</description>
				</item>
				<item>
					<term><see langword="port"/></term>
					<description>An
   integer specifying the port on which the channel will listen. To request that the remoting system choose an open port on your
   behalf, specify port "0" (zero). This will create an
<see langword="HttpServerChannel "/>instance to listen for requests on the 
   dyamically assigned port. This is typically done on the client to make
   sure that an <see langword="HttpServerChannel "/>is listening for callback
   methods. </description>
				</item>
				<item>
					<term><see langword="supressChannelData"/></term>
					<description><see langword="true "/>or <see langword="false"/>. Specifies that the
channel will not contribute to the <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel.ChannelData"/>.</description>
				</item>
				<item>
					<term><see langword="useIpAddress"/></term>
					<description><see langword="true"/> or <see langword="false"/>. Specifies whether the
channel shall use the IP address in the publication URL instead of the
computer name.</description>
				</item>
				<item>
					<term><see langword="listen"/></term>
					<description><see langword="true"/> or <see langword="false"/>. Specifies whether to allow activation to
hook into the outside listener
service.</description>
				</item>
				<item>
					<term><see langword="bindTo"/></term>
					<description>An
   IP address resolving to the current computer that specifies which NIC
   to bind the current channel
   to.</description>
				</item>
				<item>
					<term><see langword="machineName"/></term>
					<description>
						<para>A
      string that specifies the machine name used with the current
      channel. Overrides the <see langword="useIpAddress"/> configuration property
      and the machine name channel
      data.</para>
						<para>It is generally a good idea to use the DNS name of the computer, but
      when the IP Address for a particular NIC (usually a wireless NIC) is
      changing rapidly, you must configure the application to use the
      machineName to enable remoting to find the machine through DNS. However,
      where the computer name does not resolve with reasonable speed (if at all)
      and where the computer has more than one NIC, either physical or virtual
      (this is often the case with a dial-up connection or VPN network adapter),
      you should set the machineName property to the IP address of the NIC that
      is currently in use for that connection.</para></description>
				</item>
				<item>
					<term><see langword="timeout"/></term>
					<description>A integer specifying the period after which the request
   will time out. To request an inifinite time-out period, specify
   -1.</description>
				</item>
				<item>
					<term><see langword="allowAutoRedirect"/></term>
					<description>Gets or sets a value indicating whether the automatic handling of server redirects is enabled.</description>
				</item>
				<item>
					<term><see langword="credentials"/></term>
					<description>Gets or sets an <see langword="ICredential"/> implementation that represents the identity of the client.</description>
				</item>
				<item>
					<term><see langword="exclusiveAddressUse"/></term>
					<description>
						<para><see langword="true"/> or <see langword="false"/> . Specifies whether the server
   channel will prevent other applications from reusing the IP address/port
   combination by setting the <see cref="System.Net.Sockets.SocketOptionName"/>
   server socket option
   to SocketOptionName.ExclusiveAddressUse. The default is
<see langword="true"/>. </para>
						<para>This property is supported only by the .NET Framework version 1.1 on
   the following platforms: Windows NT 4.0 with SP4 or later, Windows
   Millennium Edition, Windows 2000, Windows XP Home Edition, Windows XP
   Professional, Windows .NET Server family. </para>
						<para>This property requires administrator privileges on platforms prior to
   the Windows .NET Server family.</para></description>
				</item>
				<item>
					<term><see langword="useAuthenticatedConnectionSharing"/></term>
					<description>
						<para>A <see langword="Boolean"/>
value directing the server channel to reuse authenticated
connections rather than authenticate each incoming call. By default, this
value is set to true if the useDefaultCredentials value is also set to
true; otherwise, the value is set to false, which means that each call
will be authenticated if the server requires authentication. This also
applies to the programmatic equivalent, which is achieved either by
creating an object that implements <see langword="IDictionary"/>, setting
the "credentials" value to
<see langword="CredentialCache.DefaultCredentials"/>, and passing that 
value to the channel sink, or by using the <see langword="IDictionary"/>
returned from the
<see langword="ChannelServices.GetChannelSinkProperties"/> 
method. </para>
						<para>This name/value pair is supported only by version 1.1 of the .NET
   Framework on the following platforms: Windows 98, Windows NT 4.0, Windows
   Millennium Edition, Windows 2000, Windows XP Home Edition, Windows XP
   Professional, Windows .NET Server family.</para></description>
				</item>
				<item>
					<term><see langword="unsafeAuthenticatedConnectionSharing"/></term>
					<description>
						<para>A
   <see langword="Boolean"/> value indicating that the client will supply its
      own credentials and connection group name that the server should use to
      create an authenticated connection group. If this value is set to
   <see langword="true"/>, the <see langword="connectionGroupName"/> value must
      map to only one authenticated user. This name/value pair is ignored if the
   <see langword="useAuthenticatedConnectionSharing"/> value is set to
   <see langword="true"/>
   .</para>
						<para>This name/value pair is supported only by
   version 1.1 of the .NET Framework on the following platforms: Windows 98,
   Windows NT 4.0, Windows Millennium Edition, Windows 2000, Windows XP Home
   Edition, Windows XP Professional, Windows .NET Server
   family.</para></description>
				</item>
				<item>
					<term><see langword="connectionGroupName"/></term>
					<description>
						<para>The name that will be
      used as the connection group name on the server if the
   <see langword="unsafeAuthenticatedConnectionSharing"/> value is also
      specified. This name/value pair is ignored if
   <see langword="unsafeAuthenticatedConnectionSharing"/>
   is not set to true. If specified, make sure that this
   name maps to only one authenticated
   user.</para>
						<para>On Windows 98 and Windows Millennium Edition, 
   there is no security ID to identify the authentication connection group
   name. On these platforms, therefore, there is one connection group
   name.If you want your application to pass an implementation of
<see langword="ICredentials"/> or explicit <see langword="username"/>, 
<see langword="password"/>, and <see langword="domain"/> values in the 
<see langword="HttpClientChannel"/> properties, you can enable 
   authentication connection sharing by also passing the
<see langword="unsafeAuthenticatedConnectionSharing"/> name/value pair and 
   the <see langword="connectionGroupName"/> name/value pair, making sure that
   the <see langword="connectionGroupName"/>
   
   value maps to only one authenticated
   user.</para>
						<para>This name/value pair is supported only by version 
   1.1 of the .NET Framework on the following platforms: Windows 98, Windows
   NT 4.0, Windows Millennium Edition, Windows 2000, Windows XP Home Edition,
   Windows XP Professional, Windows .NET Server
   family.</para></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following code example demonstrates a simple host
      application that registers an <see langword="HttpChannel"/> to listen for
      requests on port 9000.</para>
			<codelink SampleID="HttpChannel" SnippetID="4"/>
		</example>
		<seealso cref="System.Runtime.Serialization.Formatters.Soap.SoapFormatter"/>
		<seealso cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc>
</docs>
