<docs>
	<doc for="HttpClientChannel.HttpClientChannel">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel"/> 
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel"/> class 
   with default values.</para>
		</summary>
	</doc><doc for="HttpClientChannel.HttpClientChannel1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel"/> class
 with the specified channel name and <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/>.</para>
		</summary>
		<param name="name">The name of the new instance of the <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel"/> .</param>
		<param name=" sinkProvider">The <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> to use with the new instance of the <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel"/>.</param>
		<remarks>
			<para>This constructor sets the <see cref="System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelName"/>
property using the <paramref name="name"/> parameter.</para>
		</remarks>
	</doc><doc for="HttpClientChannel.HttpClientChannel2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel"/> class with the specified
   channel properties and <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/>.</para>
		</summary>
		<param name="properties">An <see cref="System.Collections.IDictionary"/> of the channel properties that hold the configuration information for the current channel.</param>
		<param name=" sinkProvider">The <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> to use with the new instance of the <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel"/>.</param>
		<exception cref="System.ArgumentException">A provided channel property was badly formatted.</exception>
		<remarks>
			<para> Channel sinks provide a plug-in point that allows access to the underlying
      messages flowing through the channel as well as the stream used
      by the transport mechanism to send messages to a remote object. Channel sinks are
      also responsible for transporting messages between the client and the server.</para>
			<note type="note">
      For more information on channel
      sinks, see <see topic="cpconsinkssinkchains"/>.
      
   </note>
			<note type="note">
      Channel properties are used
      to configure the channel at run time. For a list of possible channel
      properties and an example, see
   <see topic="cpconchannelformatterconfigurationproperties"/> .
      
   </note>
		</remarks>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc><doc for="HttpClientChannel.Parse">
		<summary>
			<para> Extracts the channel
      URI and the remote well-known object URI from the specified URL.</para>
		</summary>
		<param name="url"> The URL from which to extract the URI of the remote well-known object.</param>
		<param name=" objectURI">When this method returns, contains a <see cref="System.String"/> that holds the URI of the remote well-known object. This parameter is passed uninitialized.</param>
		<returns>
			<para>The URI of the current channel, or <see langword="null "/>if the specified URL is not an HTTP URL.</para>
		</returns>
		<seealso cref="System.Uri"/>
	</doc><doc for="HttpClientChannel.CreateMessageSink">
		<summary>
			<para>Returns a channel message sink that delivers messages to the specified URL
      or channel data object. </para>
		</summary>
		<param name="url">The URL to which the new sink will deliver messages. Can be <see langword="null"/> .</param>
		<param name="remoteChannelData">The channel data object of the remote host to which the new sink will deliver messages. Can be <see langword="null"/> .</param>
		<param name="objectURI">When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized.</param>
		<returns>
			<para>A channel message sink that delivers messages to
      the specified URL or channel data object.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel.CreateMessageSink"/> method
   returns a channel message sink that delivers messages to either the specified
   URL or the channel data object. If the <paramref name="uri "/>parameter is
<see langword="null"/>,<see langword=" "/><paramref name="remoteChannelData"/> is used 
   as a target for the sink. Either the <paramref name="url"/> or
<paramref name="remoteChannelData"/> parameters can be <see langword="null"/>, but not 
   both.</para>
		</remarks>
	</doc><doc for="HttpClientChannel.Keys">
		<summary>
			<para> Gets an <see cref="System.Collections.ICollection"/> of keys that the
   channel properties are associated with.</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.ICollection"/> of keys that the channel properties
   are associated with.</para>
		</value>
		<remarks>
			<note type="note">
      Channel properties are used
      to configure the channel at run time. For a list of possible channel
      properties and an example, see
   <see topic="cpconchannelformatterconfigurationproperties"/> .
      
   </note>
		</remarks>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc><doc for="HttpClientChannel.this">
		<summary>
			<para>Gets or sets a channel property associated with the specified key.</para>
		</summary>
		<param name="key"> The key the requested property is associated with.</param>
		<value>
			<para>A channel property associated with the specified key.</para>
		</value>
		<remarks>
			<note type="note">
      Channel properties are used to configure the
      channel at run time. For a list of possible channel properties and an
      example, see <see topic="cpconchannelformatterconfigurationproperties"/> .
      
   </note>
		</remarks>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc><doc for="HttpClientChannel.ChannelName">
		<summary>
			<para> Gets the name of the channel.</para>
		</summary>
		<value>
			<para> The name of the channel.</para>
		</value>
		<remarks>
			<para>This property is used to retrieve a specific channel when
      calling <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetChannel"/>. If this property is not
      set, the system defaults to "http". If you want to register more than one
   <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel"/>, each must have a unique
      name. Set this property to the <see cref="System.String.Empty"/> string ("") if you want to ignore
      names and avoid naming collisions. The system will allow any number of channels
      with the <see cref="System.String.Empty" qualify="true"/> name.</para>
		</remarks>
	</doc>
	<doc for="HttpClientChannel.ChannelPriority">
		<summary>
			<para> Gets the priority of the channel.</para>
		</summary>
		<value>
			<para> An integer representing the priority assigned to the channel.</para>
		</value>
		<remarks>
			<para> Channels with a larger priority number have the first opportunity to connect to a given endpoint. The
      default priority is 1, and negative numbers are allowed.</para>
		</remarks>
	</doc>
	<doc for="HttpClientChannel">
		<summary>
			<para>Provides an implementation for a client channel that
      uses the HTTP protocol to transmit messages.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.Http.HttpClientChannel"/> transports messages
   to remote objects using the SOAP protocol. By default, all messages are passed
   through the SOAP formatter, where the message is changed into XML and
   serialized, and the required SOAP headers are added to the stream. The binary formatter
   can also be specified, which results in a binary data stream. The data
   stream is then transported to the target URI using the HTTP
   protocol. </para>
			<para>Channels transport messages between applications across remoting
   boundaries (for
   example application domains, processes, and machines). These crossings include both inbound and
   outbound. </para>
			<para> If there are common language runtimes at both ends of the
   channel, then a session is created between the two ends, to connect the client and
   server sink chains on either side of the boundary together. The client channel is
   located at the end of client context sink chain. The server channel is located
   at the start of the server context sink chain. Messages are delivered to the
   client channel, travel through it, and are received by the <see cref="System.Runtime.Remoting.Channels.Http.HttpServerChannel"/>. The server channel then
   deserializes the messages and delivers them to the first server context sink. </para>
			<para><see cref="System.Runtime.Remoting.Channels.IChannel"/> implementations use channel
configuration properties to configure the channel at run time. Channel
properties can be specified in a configuration file, or programmatically, inside
of an <see cref="System.Collections.IDictionary"/>. In a
configuration file, all values are represented by strings, but when building a
property <see cref="System.Collections.IDictionary"/> programmatically,
value types can be specified with their native values or with strings.</para>
			<para>The following table shows the channel configuration
   properties that can be specified for the current channel. </para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="name"/></term>
					<description>Indicates the name of the channel. This property is
      used to retrieve a specific channel when calling <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetChannel"/>. If this
      property is not set, the system defaults to "http". If you want to
      register more than one <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/>, each must have a
      unique name. Set this property to the <see cref="System.String.Empty"/> string ("") if you want to ignore names
      and avoid naming collisions. The system will allow any number of channels
      with the <see cref="System.String.Empty" qualify="true"/>
      name.</description>
				</item>
				<item>
					<term><see langword="priority"/></term>
					<description>An
   integer representing the priority assigned to this channel. Higher numbers
   indicate a higher chance of being chosen to connect first. The default
   priority is 1, and negative numbers are allowed.</description>
				</item>
				<item>
					<term><see langword="clientConnectionLimit"/></term>
					<description>An
   integer indicating how many connections can be simultaneously opened to a
   given server. The default is 2.</description>
				</item>
				<item>
					<term><see langword="proxyName"/></term>
					<description>The name of the proxy computer.</description>
				</item>
				<item>
					<term><see langword="proxyPort"/></term>
					<description>An
   integer specifying the proxy port.</description>
				</item>
				<item>
					<term><see langword="machineName"/></term>
					<description>A
   string that specifies the machine name used with the current channel.
   Overrides the machine name
   specified in the channel data
   object.</description>
				</item>
				<item>
					<term><see langword="timeout"/></term>
					<description>The number of milliseconds to wait before a request times out. -1
   indicates an infinite timeout period.</description>
				</item>
				<item>
					<term><see langword="allowAutoRedirect"/></term>
					<description>Gets or sets a value indicating whether the automatic handling of server redirects is enabled.</description>
				</item>
				<item>
					<term><see langword="credentials"/></term>
					<description>Gets or sets an <see langword="ICredential"/> implementation that represents the identity of the client.</description>
				</item>
				<item>
					<term><see langword="useAuthenticatedConnectionSharing"/></term>
					<description>
						<para>A <see langword="Boolean"/> 
value directing the server channel to reuse authenticated connections
rather than authenticate each incoming call. By default, this value is set
to true if the useDefaultCredentials value is also set to true; otherwise,
the value is set to false, which means that each call will be
authenticated if the server requires authentication. This also applies to
the programmatic equivalent, which is achieved either by creating an
object that implements <see langword="IDictionary"/>,
setting the "credentials" value to <see langword="CredentialCache.DefaultCredentials"/>, and
passing that value to the channel sink, or by using the <see langword="IDictionary"/> returned from the <see langword="ChannelServices.GetChannelSinkProperties"/>
method. </para>
						<para>This name/value pair is supported only by version 
   1.1 of the .NET Framework on the following platforms: Windows 98, Windows
   NT 4.0, Windows Millennium Edition, Windows 2000, Windows XP Home Edition,
   Windows XP Professional, Windows .NET Server
   family.</para></description>
				</item>
				<item>
					<term><see langword="unsafeAuthenticatedConnectionSharing"/></term>
					<description>
						<para>A <see langword="Boolean"/> 
value indicating that the client will supply its own credentials and
connection group name that the server should use to create an
authenticated connection group. If this value is set to <see langword="true"/>, the <see langword="connectionGroupName"/> value must map to only
one authenticated user. This name/value pair is ignored if the <see langword="useAuthenticatedConnectionSharing"/> value is
set to <see langword="true"/> .</para>
						<para>This name/value pair is supported only by version 
   1.1 of the .NET Framework on the following platforms: Windows 98, Windows
   NT 4.0, Windows Millennium Edition, Windows 2000, Windows XP Home Edition,
   Windows XP Professional, Windows .NET Server
   family.</para></description>
				</item>
				<item>
					<term><see langword="connectionGroupName"/></term>
					<description>
						<para>The name that will be used as the connection group 
      name on the server if the <see langword="unsafeAuthenticatedConnectionSharing"/> value
      is also specified. This name/value pair is ignored if <see langword="unsafeAuthenticatedConnectionSharing"/> is not
      set to true. If specified, make sure that this name maps to only one
      authenticated user.</para>
						<para>On Windows 98 and Windows Millennium Edition, 
      there is no security ID to identify the authentication connection group
      name. On these platforms, therefore, there is one connection group
      name.If you want your application to pass an implementation of
   <see langword="ICredentials"/> or explicit <see langword="username"/>, 
   <see langword="password"/>, and <see langword="domain"/> values in the 
   <see langword="HttpClientChannel"/> properties, you can enable 
      authentication connection sharing by also passing the
   <see langword="unsafeAuthenticatedConnectionSharing"/> name/value pair and 
      the <see langword="connectionGroupName"/> name/value pair, making sure that
      the <see langword="connectionGroupName"/> value maps to only one
      authenticated user.</para>
						<para>This name/value pair is supported only by version 
      1.1 of the .NET Framework on the following platforms: Windows 98, Windows
      NT 4.0, Windows Millennium Edition, Windows 2000, Windows XP Home Edition,
      Windows XP Professional, Windows .NET Server
      family.</para></description>
				</item>
			</list>
		</remarks>
	</doc>
</docs>
