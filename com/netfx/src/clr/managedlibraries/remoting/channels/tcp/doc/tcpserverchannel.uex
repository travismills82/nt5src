<docs>
	<doc for="TcpServerChannel.ChannelData">
		<summary>
			<para>
      Gets the channel specific data.</para>
		</summary>
		<value>
			<para>The channel data.</para>
		</value>
		<remarks>
			<para>This property is used when <see cref="System.Runtime.Remoting.RemotingServices.Marshal" qualify="true"/> is called and an <see cref="System.Runtime.Remoting.ObjRef"/> is created.</para>
		</remarks>
	</doc><doc for="TcpServerChannel.StartListening">
		<summary>
			<para>
      Instructs the current channel to start listening for requests.</para>
		</summary>
		<param name="data">Optional ininitialization information.</param>
		<remarks>
			<para>The data object can be used to pass a specific initialization state to the
      channel.</para>
		</remarks>
	</doc><doc for="TcpServerChannel.StopListening">
		<summary>
			<para> Instructs the
 current channel to stop listening for requests.</para>
		</summary>
		<param name="data">Optional state information for the channel.</param>
		<remarks>
			<para>The data object can be used to pass a specific state to the channel.</para>
		</remarks>
	</doc><doc for="TcpServerChannel.GetChannelUri">
		<summary>
			<para>Returns the URI of the current channel.</para>
		</summary>
		<returns>
			<para>The URI of the current channel.</para>
		</returns>
	</doc><doc for="TcpServerChannel.ChannelPriority">
		<summary>
			<para>Returns the priority of the current channel.</para>
		</summary>
		<value>
			<para>An integer representing the priority assigned to this channel.</para>
		</value>
		<remarks>
			<para> For server channels, the priority controls the order
      in that channel data appears in an <see cref="System.Runtime.Remoting.ObjRef"/>. Clients will try to
      connect to the server channels in the order that they are listed in the <see cref="System.Runtime.Remoting.ObjRef"/> . The
      default priority is 1, and negative numbers are allowed.</para>
		</remarks>
	</doc><doc for="TcpServerChannel.ChannelName">
		<summary>
			<para>Gets the name of the current channel.</para>
		</summary>
		<value>
			<para> The name of this channel.</para>
		</value>
		<remarks>
			<para>This property is used to retrieve a specific channel when
      calling <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetChannel"/>. If this property is not
      set, the system defaults to "tcp". If you want to register more than one
   <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/>, each must have a unique
      name. Set this property to the <see cref="System.String.Empty"/> string ("") if you want to ignore
      names, but avoid naming collisions. The system will allow any number of channels
      with the <see cref="System.String.Empty" qualify="true"/> name.</para>
		</remarks>
	</doc><doc for="TcpServerChannel.Parse">
		<summary>
			<para> Extracts the channel
      URI and the remote well-known object URI from the specified URL.</para>
		</summary>
		<param name="url"> The URL from which to extract the URI of the remote well-known object.</param>
		<param name=" objectURI">When this method returns, contains a <see cref="System.String"/> that holds the URI of the remote well-known object. This parameter is passed uninitialized.</param>
		<returns>
			<para>The URI of the current channel.</para>
		</returns>
		<remarks>
			<para>The URI of an object is a value that uniquely identifies a specific object
      instance.</para>
		</remarks>
		<seealso cref="System.Uri"/>
	</doc><doc for="TcpServerChannel.GetUrlsForUri">
		<summary>
			<para> Returns an array of all the
      URLs for an object with the specified URI,
      hosted on the current <see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel"/>.
      </para>
		</summary>
		<param name="objectUri">The URI of the object for which URLs are required. </param>
		<returns>
			<para>An array of the URLs for an object with the specified
      URI, hosted on the current <see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel"/>.
      </para>
		</returns>
		<remarks>
			<para>This method is used by <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject" qualify="true"/>.
   </para>
		</remarks>
		<example>
			<codelink SampleID="TcpServerChannel.GetUrlsForUri" SnippetID="1"/>
		</example>
	</doc><doc for="TcpServerChannel.TcpServerChannel">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/> class at the specified port.</para>
		</summary>
		<param name="port">The port at which to activate the new instance of <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/>.</param>
		<remarks>
			<para>To request that the remoting system choose
      an open port on your behalf, specify port "0" (zero). This will create a
   <see langword="TcpServerChannel "/>instance to listen for requests
      on the dyamically assigned port. This is typically done on the client to make
      sure that a <see langword="TcpServerChannel"/>
      is listening for callback methods.</para>
		</remarks>
	</doc>
	<doc for="TcpServerChannel.TcpServerChannel1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/> class
   with the given name at the specified port.</para>
		</summary>
		<param name="name">The name of the new instance of <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/>.</param>
		<param name=" port">The port at which to activate the new instance of <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/>.</param>
		<remarks>
			<para> This constructor sets the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelName"/> property using the
<paramref name="name "/>parameter. If you want to 
   register more than one <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/>, each must have a unique
   name. Set <paramref name="name"/> parameter to
   the <see cref="System.String.Empty"/>
   string ("") if you want to ignore names, but avoid naming collisions. The system
   will allow any number of channels with the <see cref="System.String.Empty" qualify="true"/> name.</para>
			<para>To request that the remoting system choose an open port on your behalf,
   specify port "0" (zero). This will create a <see langword="TcpServerChannel "/>instance to listen for requests on the dyamically assigned port. This
   is typically done on the client to make sure that a
<see langword="TcpServerChannel"/> is listening for callback 
   methods. </para>
		</remarks>
	</doc>
	<doc for="TcpServerChannel.TcpServerChannel2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/> class at the specified
   port with the given name and <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> .</para>
		</summary>
		<param name="name">The name of the new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/>.</param>
		<param name=" port">The port at which to activate the new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/>.</param>
		<param name=" sinkProvider">The <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> to use with the new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/> .</param>
		<remarks>
			<para> This constructor sets the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelName"/> property using the
<paramref name="name "/>parameter. If you want to register 
   more than one <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/>, each must have a unique
   name. Set <paramref name="name"/> parameter to
   the <see cref="System.String.Empty"/>
   string ("") if you want to ignore names, but avoid naming collisions. The system
   will allow any number of channels with the <see cref="System.String.Empty" qualify="true"/> name.</para>
			<para>To request that the remoting system choose an open port on your behalf,
   specify port "0" (zero). This will create a <see langword="TcpServerChannel "/>instance to listen for requests on the dyamically assigned port. This
   is typically done on the client to make sure that a
<see langword="TcpServerChannel"/> is listening for callback 
   methods. </para>
		</remarks>
	</doc>
	<doc for="TcpServerChannel.TcpServerChannel3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/> class with the specified
   channel properties and the provided <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> .</para>
		</summary>
		<param name="properties">An <see cref="System.Collections.IDictionary"/> of the channel properties that hold the configuration information for the current channel.</param>
		<param name=" sinkProvider">The <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> to use with the new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/> .</param>
		<exception cref="System.ArgumentException">A provided channel property was badly formatted.</exception>
		<remarks>
			<para>Channel sinks provide a plug-in point that allows access to the underlying
      messages flowing through the channel as well as the stream used by the transport
      mechanism to send messages to a remote object. Channel sinks are also
      responsible for transporting messages between the client and the server.</para>
			<para>To request that the remoting system choose an open port on your behalf,
      specify a "port" property of "0" (zero). This will create a
   <see langword="TcpServerChannel "/>instance to listen for requests on the
      dyamically assigned port. This is typically done on the client to make sure that
      a <see langword="TcpServerChannel"/> is listening for callback
      methods. </para>
			<note type="note">
      For more
      information, see <see topic="cpconsinkssinkchains"/>.
      
   </note>
			<note type="note">
      Channel properties are used to configure the
      channel at run time. For a list of possible channel properties and an
      example, see <see topic="cpconchannelformatterconfigurationproperties"/> .
      
   </note>
		</remarks>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc>
	<doc for="TcpServerChannel">
		<summary>
			<para>Provides an implementation for a server channel that
      uses the TCP protocol to transmit messages.</para>
		</summary>
		<remarks>
			<para>By default, the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/> will
   accept either binary or SOAP formatted messages. </para>
			<para>Channels transport messages between applications across remoting boundaries (for example
   application domains, processes, and machines). These crossings include both inbound
   and outbound. The current channel listens on an endpoint for inbound messages.
<see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/> converts the messages sent 
   along using the TCP protocol from binary format into message objects. </para>
			<para>If there are common language runtimes at both ends of the channel, then a
   session is created between the two ends, in order to connect the client and server
   sink chains on either side of the boundary together. The client part of the
   channel is located at the end of the client context sink chain. The server part
   of the channel is located at the start of the server context sink chain.
   Messages are delivered to the client channel, travel through it, and are received
   by an instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/>. The
   channel then delivers received and deserialized messages to the first server
   context sink. </para>
			<para><see cref="System.Runtime.Remoting.Channels.IChannel"/> implementations use channel
configuration properties to configure the channel at run time. Channel
properties can be specified in a configuration file, or programmatically, inside
of an <see cref="System.Collections.IDictionary"/>. In a configuration file all values are
represented by strings, but when building a property <see cref="System.Collections.IDictionary"/>
programmatically, value types can be specified with their native values or with
strings.</para>
			<para>The following table shows the channel configuration properties that can be
   specified for the current channel. </para>
			<list type="table">
					<listheader>
						<term>Property</term>
						<description>Description</description>
					</listheader>
					<item>
						<term><see langword="name"/></term>
						<description>Indicates the name of the channel. This
         property is used to retrieve a specific channel when calling <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetChannel"/>. If this
         property is not set, the system defaults to "http". If you want to
         register more than one <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/>, each must have a
         unique name. Set this property to the <see cref="System.String.Empty"/> string ("") if you want to
         ignore names, but avoid naming collisions. The system will allow any
         number of channels with the <see cref="System.String.Empty" qualify="true"/>
         name.</description>
					</item>
					<item>
						<term><see langword="priority"/></term>
						<description>An
      integer representing the priority assigned to this channel. For
      server channels, the priority controls the order in which the channel data
      appears in an <see cref="System.Runtime.Remoting.ObjRef"/>. Clients will try to connect to
      the server channels in the order that they are listed in the <see cref="System.Runtime.Remoting.ObjRef"/>
      . The default priority is 1, and
      negative numbers are allowed. The default priority is 1, and negative numbers
      are allowed.</description>
					</item>
					<item>
						<term><see langword="port"/></term>
						<description>An
   integer specifying the port on which the channel will listen. To request
   that the remoting system choose an open port on your behalf, specify port
   "0" (zero). This will create a <see langword="TcpServerChannel "/>instance
   to listen for requests on the dyamically assigned port. This is typically
   done on the client to make sure that a <see langword="TcpServerChannel"/> is listening
   for callback methods.</description>
					</item>
					<item>
						<term><see langword="supressChannelData"/></term>
						<description><see langword="true "/>or
<see langword="false"/>. Specifies that the channel will not contribute to 
the <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel.ChannelData"/>.</description>
					</item>
					<item>
						<term><see langword="useIpAddress"/></term>
						<description><see langword="true"/> or
<see langword="false"/>. Specifies whether the channel will use the IP 
address in the publication URL instead of the computer name.</description>
					</item>
					<item>
						<term><see langword="rejectRemoteRequests"/></term>
						<description><see langword="true"/> or
<see langword="false"/>. Specifies whether to refuse requests originating 
from other computers. Specifying <see langword="true"/> allows only inter-<see cref="System.AppDomain"/>
calls on the local
computer.</description>
					</item>
					<item>
						<term><see langword="bindTo"/></term>
						<description>An
   IP address resolving to the current computer that specifies which NIC
   to bind the current channel
   to.</description>
					</item>
					<item>
						<term><see langword="machineName"/></term>
						<description>A
   string that specifies the machine name used with the current
   channel. Overrides the <see langword="useIpAddress"/> configuration property
   and the machine name channel
   data.</description>
					</item>
					<item>
						<term><see langword="exclusiveAddressUse"/></term>
						<description>
							<para><see langword="true"/> or <see langword="false"/> . Specifies whether the
   channel will prevent other applications from reusing the IP address/port
   combination by setting the <see cref="System.Net.Sockets.SocketOptionName"/>
   server socket option to SocketOptionName.ExclusiveAddressUse.
   The default is <see langword="true"/>. </para>
							<para>This property is supported only by the .NET Framework version 1.1 on the following
   platforms: Windows NT 4.0 with SP4 or later, Windows Millennium Edition,
   Windows 2000, Windows XP Home Edition, Windows XP Professional, Windows
   .NET Server family.
   </para>
							<para>This property requires administrator privileges on platforms prior to
   the Windows .NET Server family.</para></description>
					</item>
				</list>
		</remarks>
	</doc>
</docs>
