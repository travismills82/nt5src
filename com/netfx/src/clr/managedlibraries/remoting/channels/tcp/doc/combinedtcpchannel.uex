<docs>
	<doc for="TcpChannel.TcpChannel">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel"/> class, activating only a
   client channel, and not a server channel.</para>
		</summary>
		<remarks>
			<para>The default constructor initializes all fields to their default values. 
      If the default constructor is used, the channel functions only as a client
      channel, and does not listen on any ports.</para>
		</remarks>
	</doc><doc for="TcpChannel.Parse">
		<summary>
			<para> Extracts the channel URI
      and the remote well known object URI from the specified URL.</para>
		</summary>
		<param name="url">The URL from which to extract the URI of the remote well known object.</param>
		<param name=" objectURI">When this method returns, contains a <see cref="System.String"/> that holds the URI of the remote well known object. This parameter is passed uninitialized.</param>
		<returns>
			<para>The URI of the current channel.</para>
		</returns>
		<remarks>
			<para>A URI of an object is a value that uniquely identifies a specific object
      instance.</para>
		</remarks>
		<seealso cref="System.Uri"/>
	</doc><doc for="TcpChannel.CreateMessageSink">
		<summary>
			<para>Returns a channel message sink that delivers messages to the specified URL
      or channel data object. </para>
		</summary>
		<param name="url">The URL to which the new sink should deliver messages. Can be <see langword="null"/>.</param>
		<param name="remoteChannelData">The channel data object of the remote host to which the new sink should deliver messages. Can be <see langword="null"/>.</param>
		<param name="objectURI">When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized.</param>
		<returns>
			<para>A channel message sink, that delivers messages to
      the specified URL or channel data object.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel.CreateMessageSink"/> method
   returns a channel message sink that delivers messages to either the specified
   URL or channel data object. If the <paramref name="uri "/>parameter is
<see langword="null"/>,<see langword=" "/><paramref name="remoteChannelData"/> is used 
   as a target for the sink. Either the <paramref name="url"/> or
<paramref name="remoteChannelData"/> parameters can be <see langword="null"/>, but not 
   both.</para>
			<para>Channel sinks provide a plug-in point that allows access 
   to the underlying messages flowing through the channel as well as the stream
   used by the transport mechanism to send messages to a remote object. Channel
   sinks are linked together in a chain of <see langword="ChannelSinkProviders"/>
   
   and all channel messages flow through this
   chain of sinks before the message is finally serialized and transported.</para>
		</remarks>
	</doc><doc for="TcpChannel.ChannelData">
		<summary>
			<para> Gets the channel-specific data.</para>
		</summary>
		<value>
			<para>The channel data.</para>
		</value>
		<remarks>
			<para>This property is used when <see cref="System.Runtime.Remoting.RemotingServices.Marshal" qualify="true"/> is called and an <see cref="System.Runtime.Remoting.ObjRef"/> is created.</para>
		</remarks>
	</doc><doc for="TcpChannel.StartListening">
		<summary>
			<para> Instructs the current channel to start listening for requests.</para>
		</summary>
		<param name="data">Optional initialization information.</param>
		<remarks>
			<para>The data object can be used to pass a specific initialization state to the
      channel.</para>
		</remarks>
	</doc><doc for="TcpChannel.StopListening">
		<summary>
			<para> Instructs the
 current channel to stop listening for requests.</para>
		</summary>
		<param name="data">Optional state information for the channel.</param>
		<remarks>
			<para>The data object can be used to pass a specific state to the channel.</para>
		</remarks>
	</doc><doc for="TcpChannel.ChannelPriority">
		<summary>
			<para>Returns the priority of the current channel.</para>
		</summary>
		<value>
			<para>An integer representing the priority assigned to this channel.</para>
		</value>
		<remarks>
			<para>Higher numbers indicate a higher chance of being chosen to connect first. The 
 default priority is 1, and negative numbers are allowed.</para>
		</remarks>
	</doc><doc for="TcpChannel.ChannelName">
		<summary>
			<para>Gets the name of the current channel.</para>
		</summary>
		<value>
			<para> The name of this channel.</para>
		</value>
		<remarks>
			<para>This property is used to retrieve a specific channel when 
 calling <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetChannel"/>. If this property is not
 set, the system defaults to "tcp". If you want to register more than one
 <see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel"/>, each must have a unique 
 name. Set this property to the <see cref="System.String.Empty"/> string ("") if you want to ignore
 names, but avoid naming collisions. The system will allow any number of channels
 with the <see cref="System.String.Empty"/>.</para>
		</remarks>
	</doc><doc for="TcpChannel.GetUrlsForUri">
		<summary>
			<para> Returns an array
      of all the URLs for an object with the specified URI,
      hosted on the current <see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel"/>.
      </para>
		</summary>
		<param name="objectURI">The URI of the object for which URLs are required. </param>
		<returns>
			<para> An array of the URLs for an object
      with the specified URI, hosted on the current <see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel"/>.
      </para>
		</returns>
		<remarks>
			<para>This method is used by <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject" qualify="true"/>.
   </para>
		</remarks>
		<example>
			<codelink SampleID="TcpChannel.GetUrlsForUri" SnippetID="1"/>
		</example>
	</doc><doc for="TcpChannel.TcpChannel1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel"/> class, activating a server
   channel at the specified port.</para>
		</summary>
		<param name="port">The port number at which to activate the TCP server channel.</param>
		<remarks>
			<para>To request that the remoting system choose
      an open port on your behalf, specify port "0" (zero). This will create a
   <see langword="TcpServerChannel "/>instance to listen for requests on the
      dyamically assigned port. This is typically done on the client to make sure that
      a <see langword="TcpServerChannel"/> is listening for callback
      methods.</para>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of a TcpChannel that listens
      on the specified port. For a complete listing of the current example, see
      the example for the <see cref="System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType"/>
      method.</para>
			<codelink SampleID="RemotingConfiguration.ServerActivation" SnippetID="2"/>
		</example>
	</doc>
	<doc for="TcpChannel.TcpChannel2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel"/> class with the provided
   channel properties, a <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> and
   a <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/>.</para>
		</summary>
		<param name="properties">An <see cref="System.Collections.IDictionary"/> of the channel properties which hold the configuration information for the current channel.</param>
		<param name=" clientSinkProvider">The <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> that creates the client channel sinks for the underlying <see cref="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel"/> through which remoting messages flow through.</param>
		<param name=" serverSinkProvider">The <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> that creates server channel sinks for the underlying <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/> through which remoting messages flow through.</param>
		<exception cref="System.ArgumentException">A provided channel property was improperly formatted.</exception>
		<remarks>
			<para>Channel sinks provide a plug-in point that allows access to the underlying
      messages flowing through the channel as well as the stream used by the transport
      mechanism to send messages to a remote object. Channel sinks are also
      responsible for transporting messages between the client and the server. Channel
      sinks are linked together in a chain, and all channel messages flow through this
      chain of sinks before the message is finally serialized and transported.</para>
			<para>When the <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider.CreateSink"/> method is
   called on a sink provider, it should create its own channel sink, forward the
<see langword="CreateSink"/> call to the next sink provider in the chain, and 
   ensure that the next sink and the current one are linked together. The provider
   then returns its sink to the caller. Channel sinks are responsible for
   forwarding all calls made on them to the next sink in the chain.</para>
			<para>To request that the remoting system choose an open port on your behalf,
   specify a "port" property of "0" (zero). This will create a
<see langword="TcpServerChannel "/>instance to listen for requests on the 
   dyamically assigned port. This is typically done on the client to make sure that
   a <see langword="TcpServerChannel"/> is listening for callback
   methods.</para>
			<note type="note">
   Channel properties are used
   to configure the channel at run time. For a list of possible channel
   properties and an example, see <see topic="cpconchannelformatterconfigurationproperties"/>.
</note>
		</remarks>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc>
	<doc for="TcpChannel">
		<summary>
			<para>Provides an implementation for a sender-receiver channel
      that uses the TCP protocol to transmit messages.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel"/> class is a combined
   channel, which combines the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/> and
<see cref="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel"/> for convenience. The 
<see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel"/> 
uses a binary formatter to serialize all outbound messages to
a binary stream and transports the stream to the target URI using the
TCP protocol. For inbound messages the process is reversed. </para>
			<para>Channels transport messages between applications across remoting boundaries (for example
   application domains, processes, and machines). These crossings include both inbound
   and outbound. The current channel listens on an endpoint for inbound messages
   and sends the outbound messages to the endpoint. <see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel"/>
   converts the messages sent along it to and from the binary format, receiving and sending them using the TCP protocol. </para>
			<para>On the client side, messages are handed off to the client channel sink chain
   after they traverse the client <see cref="System.Runtime.Remoting.Contexts.Context"/> chain. The first channel sink
   is typically an <see cref="System.Runtime.Remoting.Channels.IClientFormatterSink"/> which serializes the message
   into a stream that is passed down the channel sink chain to the client transport
   sink. The client transport sink then writes this stream out to the wire. </para>
			<para>On the server side, the server transport sink reads requests off of the wire
   and passes the request stream to the server channel sink chain. The server
   formatter sink at the end of this chain will deserialize the request into a
   message. It will then hand this message off to the Remoting infrastructure which
   will dispatch it to the server <see cref="System.Runtime.Remoting.Contexts.Context"/> chain. </para>
			<para><see cref="System.Runtime.Remoting.Channels.IChannel"/> implementations use channel
configuration properties to configure the channel at run time. Channel
properties can be specified in a configuration file, or programmatically, inside
of an <see cref="System.Collections.IDictionary"/>. In a
configuration file all values are represented by strings, but when building a
property <see cref="System.Collections.IDictionary"/> programmatically,
value types can be specified with their native values or with strings.</para>
			<para>The following table shows the channel configuration
   properties that can be specified for the current channel. </para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="name"/></term>
					<description>Indicates the name of the channel. This property is
      used to retrieve a specific channel when calling <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetChannel"/>. If this
      property is not set, the system defaults to "tcp". If you want to register
      more than one <see cref="System.Runtime.Remoting.Channels.Tcp.TcpChannel"/>, each must have a
      unique name. Set this property to the <see cref="System.String.Empty"/> string ("") if you want to ignore names,
      but avoid naming collisions. The system will allow any number of channels
      with the <see cref="System.String.Empty" qualify="true"/>
      name.</description>
				</item>
				<item>
					<term><see langword="priority"/></term>
					<description>An
   integer representing the priority assigned to this channel. Higher numbers
   indicate a higher chance of being chosen to connect first. The default
   priority is 1, and negative numbers are allowed.</description>
				</item>
				<item>
					<term><see langword="port"/></term>
					<description>An
   integer specifying the port on which the channel will listen. To request
   that the remoting system choose an open port on your behalf, specify port
   "0" (zero). This will create a <see langword="TcpServerChannel "/>instance
   to listen for requests on the dyamically assigned port. This is typically
   done on the client to make sure that a <see langword="TcpServerChannel"/>
   is listening for callback methods.</description>
				</item>
				<item>
					<term><see langword="supressChannelData"/></term>
					<description><see langword="true "/>or <see langword="false"/>. Specifies that the channel will not
contribute to the <see cref="System.Runtime.Remoting.Channels.IChannelReceiver.ChannelData"/>.</description>
				</item>
				<item>
					<term><see langword="useIpAddress"/></term>
					<description><see langword="true"/> or <see langword="false"/>. Specifies whether the channel whall
use the IP address in the publication URL instead of the computer
name.</description>
				</item>
				<item>
					<term><see langword="rejectRemoteRequests"/></term>
					<description><see langword="true"/> or <see langword="false"/>.
Specifies whether to refuse requests originating from other computers.
Specifying <see langword="true"/> allows only inter-application-domain
calls from the local computer.</description>
				</item>
				<item>
					<term><see langword="bindTo"/></term>
					<description>An
   IP address resolving to the current computer that specifies which NIC
   to bind the current channel
   to.</description>
				</item>
				<item>
					<term><see langword="machineName"/></term>
					<description>A
   string that specifies the machine name used with the current
   channel. Overrides the <see langword="useIpAddress"/> configuration property
   and the machine name channel
   data.</description>
				</item>
				<item>
					<term><see langword="exclusiveAddressUse"/></term>
					<description><see langword="true"/> or <see langword="false"/>. Specifies whether the server channel will
prevent other applications from reusing the IP address/port combination by
setting the <see cref="System.Net.Sockets.SocketOptionName"/>
server socket option
to SocketOptionName.ExclusiveAddressUse. The default is <see langword="true"/>.
<para>This property is supported only by the .NET Framework version 1.1 on 
   the following platforms: Windows NT 4.0 with SP4 or later, Windows
   Millennium Edition, Windows 2000, Windows XP Home Edition, Windows XP
   Professional, Windows .NET Server family. </para>
						<para>This property requires administrator privileges on platforms prior to
   the Windows .NET Server family.</para></description>
				</item>
			</list>
		</remarks>
		<seealso cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>
	</doc>
</docs>
