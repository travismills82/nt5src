<docs>
	<doc for="TcpClientChannel.TcpClientChannel">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel"/> 
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel"/> class with default values.</para>
		</summary>
	</doc><doc for="TcpClientChannel.TcpClientChannel1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel"/> class with the provided
   name and <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> .</para>
		</summary>
		<param name="name">The name of the new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel"/> .</param>
		<param name=" sinkProvider">The <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> to use with the new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel"/>.</param>
	</doc><doc for="TcpClientChannel.TcpClientChannel2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel"/> class with the specified
   channel properties and <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> .</para>
		</summary>
		<param name="properties">An <see cref="System.Collections.IDictionary"/> of the channel properties that hold the configuration information for the current channel.</param>
		<param name=" sinkProvider">The <see cref="System.Runtime.Remoting.Channels.IClientChannelSinkProvider"/> to use with the new instance of the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel"/>.</param>
		<exception cref="System.ArgumentException">A provided channel property was badly formatted.</exception>
		<remarks>
			<note type="note">
      Channel properties are used to
      configure the channel at run time. For a list of possible channel
      properties and an example, see <see topic="cpconchannelformatterconfigurationproperties"/>.
      
   </note>
		</remarks>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc><doc for="TcpClientChannel.ChannelPriority">
		<summary>
			<para>Returns the priority of the current channel.</para>
		</summary>
		<value>
			<para>An integer representing the priority assigned to the current channel.</para>
		</value>
		<remarks>
			<para>Channels with a larger priority number have the first opportunity to connect to a given endpoint. The
      default priority is 1, and negative numbers are allowed.</para>
		</remarks>
	</doc><doc for="TcpClientChannel.ChannelName">
		<summary>
			<para>Gets the name of the current channel.</para>
		</summary>
		<value>
			<para> The name of the current channel.</para>
		</value>
		<remarks>
			<para>This property is used to retrieve a specific channel when
      calling <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetChannel"/>. If this property is not
      set, the system defaults to "tcp". If you want to register more than one
   <see cref="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel"/>, each must have a unique
      name. Set this property to the <see cref="System.String.Empty"/> string ("") if you want to ignore
      names, but avoid naming collisions. The system will allow any number of channels
      with the <see cref="System.String.Empty" qualify="true"/> name.</para>
		</remarks>
	</doc><doc for="TcpClientChannel.Parse">
		<summary>
			<para> Extracts the channel
      URI and the remote well-known object URI from the specified URL.</para>
		</summary>
		<param name="url">The URL from which to extract the URIs.</param>
		<param name=" objectURI">When this method returns, contains a <see cref="System.String"/> that holds the URI of the remote well-known object. This parameter is passed uninitialized.</param>
		<returns>
			<para>The channel URI.</para>
		</returns>
	</doc><doc for="TcpClientChannel.CreateMessageSink">
		<summary>
			<para>Returns a channel message sink that delivers messages to the specified URL
      or channel data object. </para>
		</summary>
		<param name="url">The URL to which the new sink will deliver messages. Can be <see langword="null"/> .</param>
		<param name="remoteChannelData">The channel data object of the remote host to which the new sink will deliver messages. Can be <see langword="null"/>.</param>
		<param name="objectURI">When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized.</param>
		<returns>
			<para>A channel message sink, that delivers messages to
      the specified URL or channel data object.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.CreateMessageSink"/> method
   returns a channel message sink that delivers messages to either the specified
   URL or channel data object. If the <paramref name="uri "/>parameter is
<see langword="null"/>,<see langword=" "/><paramref name="remoteChannelData"/> is used 
   as a target for the sink. Either the <paramref name="url"/> or
<paramref name="remoteChannelData"/> parameters can be <see langword="null"/>, but not 
   both.</para>
		</remarks>
	</doc><doc for="TcpClientChannel">
		<summary>
			<para>Provides an implementation for a client channel that
      uses the TCP protocol to transmit messages.</para>
		</summary>
		<remarks>
			<para>By default, the <see cref="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel"/> uses a binary formatter to
   serialize all messages to a binary stream and transports the stream to the
   target URI using the TCP protocol. </para>
			<para> Channels transport messages between applications
   across remoting boundaries (for example application domains, processes, and machines). The
   current channel sends outbound messages to an endpoint specified by the message.
<see cref="System.Runtime.Remoting.Channels.Tcp.TcpClientChannel"/> converts the messages sent 
   along it to binary format, and sends them using the TCP protocol. </para>
			<para> If there are common language runtimes at both ends of the channel, then
   a session is created between the two ends, in order to connect the client and
   server sink chains on either side of the boundary together. The client channel
   is located at the end of the client context sink chain. The server channel
   is located at the start of the server context sink chain. Messages are delivered
   to the client channel, travel through it, and are received by an instance of the
<see cref="System.Runtime.Remoting.Channels.Tcp.TcpServerChannel"/>class. The server channel 
   then deserializes the messages and delivers them to the first server context
   sink. </para>
			<para><see cref="System.Runtime.Remoting.Channels.IChannel"/> implementations use channel
configuration properties to configure the channel at run time. Channel
properties can be specified in a configuration file, or programmatically, inside
of an <see cref="System.Collections.IDictionary"/>. In a configuration file all values are
represented by strings, but when building a property <see cref="System.Collections.IDictionary"/>
programmatically, value types can be specified with their native values or with
strings.</para>
			<para>The following table shows the channel configuration properties that can be
   specified for the current channel. </para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="name"/></term>
					<description>Indicates the name of the channel. This
      property is used to retrieve a specific channel when calling <see cref="System.Runtime.Remoting.Channels.ChannelServices.GetChannel"/>. If this
      property is not set, the system defaults to "http". If you want to
      register more than one <see cref="System.Runtime.Remoting.Channels.Http.HttpChannel"/>, each must have a
      unique name. Set this property to the <see cref="System.String.Empty"/> string ("") if you want to
      ignore names, but avoid naming collisions. The system will allow any
      number of channels with the <see cref="System.String.Empty" qualify="true"/>
      name.</description>
				</item>
				<item>
					<term><see langword="priority"/></term>
					<description>An integer representing the priority
   assigned to this channel. Higher numbers indicate a higher chance of being
   chosen to connect first. The default priority is 1, and negative numbers
   are allowed.</description>
				</item>
				<item>
					<term><see langword="machineName"/></term>
					<description>A 
   string that specifies the machine name used with the current channel. Overrides
   the machine name channel data
   object.</description>
				</item>
			</list>
		</remarks>
	</doc></docs>
