<docs>
	<doc for="MetaData.ConvertTypesToSchemaToFile2">
		<summary>
			<para> Converts the specified service types to XML schema, and writes it to
      a specified stream.</para>
		</summary>
		<param name="serviceTypes">The <see cref="System.Runtime.Remoting.MetadataServices.ServiceType"/> instances to convert to XML schema.</param>
		<param name=" sdlType">The type of service description language to use for the XML schema.</param>
		<param name=" outputStream">The <see cref="System.IO.Stream"/> the schema is written to.</param>
		<remarks>
			<para>A <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType"/> instance allows you to
   associate a URL with an object <see cref="System.Type"/>.</para>
		</remarks>
	</doc><doc for="MetaData.RetrieveSchemaFromUrlToStream">
		<summary>
			<para>Downloads the XML schema from a URL, and writes it to the specified stream.</para>
		</summary>
		<param name="url"> The URL where the XML schema is located.</param>
		<param name=" outputStream">The <see cref="System.IO.Stream"/> the schema is written to.</param>
	</doc><doc for="ServiceType.ServiceType">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.MetadataServices.ServiceType"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.MetadataServices.ServiceType"/>class with the object
<see cref="System.Type"/> that is passed to the Web 
   Services Description Language (WSDL) generator.</para>
		</summary>
		<param name="type">The object <see cref="System.Type"/> that is passed to the WSDL generator.</param>
	</doc><doc for="ServiceType.ServiceType1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.MetadataServices.ServiceType"/> class with the URL and
<see cref="System.Type"/> of an object that is passed 
   to the Web Services Description Language (WSDL) generator.</para>
		</summary>
		<param name="type">The object <see cref="System.Type"/> that is passed to the WSDL generator.</param>
		<param name=" url">The well-known endpoint that can process messages sent to a method on the object type specified in the <paramref name="type"/> parameter. </param>
	</doc><doc for="ServiceType.ObjectType">
		<summary>
			<para> Gets the object <see cref="System.Type"/> that is passed to the Web Services Description Language (WSDL)
   generator.</para>
		</summary>
		<value>
			<para> The object <see cref="System.Type"/> that the current <see cref="System.Runtime.Remoting.MetadataServices.ServiceType"/>
was created for.</para>
		</value>
	</doc><doc for="ServiceType.Url">
		<summary>
			<para>Gets the URL of an object <see cref="System.Type"/> that is passed to the Web Services Description Language (WSDL) generator.</para>
		</summary>
		<value>
			<para>The URL of an object <see cref="System.Type"/> that the current <see cref="System.Runtime.Remoting.MetadataServices.ServiceType"/>
was created for.</para>
		</value>
	</doc><doc for="MetaData.ConvertTypesToSchemaToFile1">
		<summary>
			<para>Converts the specified service types to XML schema, and writes it to a file
      specified by name.</para>
		</summary>
		<param name="types">The <see cref="System.Runtime.Remoting.MetadataServices.ServiceType"/> instances to convert to XML schema.</param>
		<param name=" sdlType">The type of service description language to use for the XML schema.</param>
		<param name=" path">The path of the XML file.</param>
		<remarks>
			<para>A <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType"/> instance allows
   you to associate a URL with an object <see cref="System.Type"/>.</para>
			<note type="note">
   If a file with the specified name
   already exists, it is overwritten.
</note>
		</remarks>
	</doc><doc for="MetaData.RetrieveSchemaFromUrlToFile">
		<summary>
			<para> Downloads the XML schema from a URL, and writes it to the specified file.</para>
		</summary>
		<param name="url">The URL where the XML schema is located.</param>
		<param name=" path">The path of the file the schema is written to.</param>
		<remarks>
			<note type="note">
      If a file with the specified name
      already exists, it is overwritten.
   </note>
		</remarks>
	</doc><doc for="MetaData.SaveStreamToFile">
		<summary>
			<para>Saves the input stream to a file with the specified name.</para>
		</summary>
		<param name="inputStream">The stream to write to the specified file.</param>
		<param name=" path">The file the input stream is written to.</param>
		<remarks>
			<note type="note">
      If a file with the specified name
      already exists, it is overwritten.
   </note>
		</remarks>
	</doc><doc for="ServiceType">
		<summary>
			<para>Associates a well-known object type that is passed to the Web Services Description Language (WSDL) generator with a remote
      endpoint that can process messages sent to a method on the type.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.MetadataServices.ServiceType"/> class is used to hold information specified on the
   command line to the <see topic="cpgrfsoapsudsutilitysoapsudsexe " title="Soapsuds tool"/> through the <c>-types</c> argument.</para>
		</remarks>
	</doc><doc for="MetaData">
		<summary>
			<para>Provides methods that allow you to work with XML schema.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.MetadataServices.MetaData"/> class
   provides methods that allow
   you to generate Web Services Description Language (WSDL) from type information, convert an
   XML Schema into a code stream,
   and compile the code stream into an assembly. This functionality is also present
   in the <see topic="cpgrfsoapsudsutilitysoapsudsexe"/>.</para>
		</remarks>
		<seealso topic="cpgrfsoapsudsutilitysoapsudsexe"/>
	</doc><doc for="MetaData.ConvertTypesToSchemaToFile">
		<overload>
			<para>Converts the specified types to XML schema, and writes it
      to a file.</para>
		</overload>
		<summary>
			<para>Converts the specified object types to XML schema, and writes it to a file
      specified by name.</para>
		</summary>
		<param name="types">The object types to convert to XML schema.</param>
		<param name=" sdlType">The type of service description language to use for the XML schema.</param>
		<param name=" path">The path of the XML file.</param>
		<remarks>
			<note type="note">
      If a file with the specified name
      already exists, it is overwritten.
      
   </note>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of the
   <see cref="System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToFile"/> method to write the
      schema definition of the specified types to a file.</para>
			<codelink SampleID="MetaData.ConvertTypesToSchemaToFile" SnippetID="1"/>
		</example>
	</doc><doc for="MetaData.ConvertTypesToSchemaToStream">
		<overload>
			<para>Converts the specified types to XML schema, and writes it
      to a stream.</para>
		</overload>
		<summary>
			<para> Converts the specified object types to XML schema, and writes it to
      a specified stream.</para>
		</summary>
		<param name="types">The object types to convert to XML schema.</param>
		<param name=" sdlType">The type of service description language to use for the XML schema.</param>
		<param name=" outputStream">The <see cref="System.IO.Stream"/> the schema is written to.</param>
		<example>
			<para>The following code example demonstrates the use of the <see cref="System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToStream"/> method to
   write the schema definition of the specified types to a stream.</para>
			<codelink SampleID="MetaData.ConvertTypesToSchemaToStream" SnippetID="1"/>
		</example>
	</doc><doc for="MetaData.ConvertSchemaStreamToCodeSourceStream">
		<overload>
			<para> Converts a specified schema definition to C# source code
      proxy, which can then be compiled into a runtime proxy assembly. </para>
		</overload>
		<summary>
			<para>Converts the specified schema definition into C# proxy source code for a
      remote object located at the specified URL and in the provided class
      namespace.</para>
		</summary>
		<param name="clientProxy">Indicates the type of proxy to generate. If <see langword="true"/>, generates a simple proxy (also known as wrapped proxy) that automatically loads the channels, exposes all the methods of the remote object, and provides access to the channel properties. If <see langword="false"/> , generates a transparent proxy that exposes all the methods of the remote object.</param>
		<param name=" outputDirectory">The directory where the new C# source code files with the proxy are created.</param>
		<param name=" inputStream">The input stream containing the schema definition in Web Services Description Language (WSDL) format.</param>
		<param name=" outCodeStreamList">The list of file names for the code streams that are generated. Note that the <see cref="System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream"/> method can create multiple source code streams.</param>
		<param name=" proxyUrl">The URL where the target remote object represented by the new proxy will be located.</param>
		<param name=" proxyNamespace">The namespace of the newly created proxy. </param>
		<remarks>
			<note type="note">
      If files with the specified names
      already exist, they are overwritten.
      
   </note>
		</remarks>
	</doc><doc for="MetaData.ConvertSchemaStreamToCodeSourceStream2">
		<summary>
			<para>Converts the specified schema definition into C# proxy
      source code for a remote object located at the specified URL.</para>
		</summary>
		<param name="clientProxy">Indicates the type of proxy to generate. If <see langword="true"/>, generates a simple proxy (also known as wrapped proxy) that automatically loads the channels, exposes all the methods of the remote object, and provides access to the channel properties. If <see langword="false"/> , generates a transparent proxy that exposes all the methods of the remote object.</param>
		<param name=" outputDirectory"> The directory where the new C# source code files with the proxy are created.</param>
		<param name=" inputStream">The input stream containing the schema definition in Web Services Description Language (WSDL) format.</param>
		<param name="outCodeStreamList">The list of file names for the code streams that are generated. Note that the <see cref="System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream"/> method can create multiple source code streams.</param>
		<param name=" proxyUrl">The URL where the target remote object represented by the new proxy will be located.</param>
		<remarks>
			<note type="note">
      If files with the specified names
      already exist, they are overwritten.
      
   </note>
		</remarks>
	</doc><doc for="MetaData.ConvertSchemaStreamToCodeSourceStream1">
		<summary>
			<para>Converts the specified schema definition into C# proxy source code. </para>
		</summary>
		<param name="clientProxy">Indicates the type of proxy to generate. If <see langword="true"/>, generates a simple proxy (also known as wrapped proxy) that automatically loads the channels, exposes all the methods of the remote object, and provides access to the channel properties. If <see langword="false"/> , generates a transparent proxy that exposes all the methods of the remote object.</param>
		<param name=" outputDirectory"> The directory where the new C# source code files with the proxy are created.</param>
		<param name=" inputStream">The input stream containing the schema definition in Web Services Description Language (WSDL) format.</param>
		<param name=" outCodeStreamList">The list of file names for the code streams that are generated. Note that the <see cref="System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream"/> method can create multiple source code streams.</param>
		<remarks>
			<note type="note">
      If files with the specified names
      already exist, they are overwritten.
      
   </note>
		</remarks>
	</doc><doc for="MetaData.ConvertCodeSourceStreamToAssemblyFile">
		<summary>
			<para>Compiles specified code source streams into a run-time assembly file.</para>
		</summary>
		<param name="outCodeStreamList">An <see cref="System.Collections.ArrayList"/> of streams with the source code.</param>
		<param name=" assemblyPath">The location where the new run-time assembly is generated.</param>
		<param name=" strongNameFilename">The strong name to compile into the new run-time assembly. Can be <see cref="System.String.Empty" qualify="true"/> .</param>
		<remarks>
			<para>For additional information on strong names, see <see topic="cpconstrong-namedassemblies" title="Strong-Named Assemblies"/> .</para>
			<note type="note">
   If a file with the specified name
   already exists, it is overwritten.
</note>
		</remarks>
	</doc><doc for="MetaData.ConvertCodeSourceFileToAssemblyFile">
		<summary>
			<para> Compiles
      a specified code source file
      into a run-time assembly file.</para>
		</summary>
		<param name="codePath">The path to the file containing the source code.</param>
		<param name=" assemblyPath">The location where the new run-time assembly is generated.</param>
		<param name=" strongNameFilename">The strong name to compile into the new assembly. Can be <see cref="System.String.Empty" qualify="true"/> .</param>
		<remarks>
			<para>For additional information on strong names, see <see topic="cpconstrong-namedassemblies" title="Strong-Named Assemblies"/> .</para>
			<note type="note">
   If a file with the specified name
   already exists, it is overwritten.
</note>
		</remarks>
		<example>
			<para>The following code example demonstrates the use of the <see cref="System.Runtime.Remoting.MetadataServices.MetaData.ConvertCodeSourceFileToAssemblyFile"/> method to
   write the schema definition of the specified types to a runtime assembly with
   the specified name. The <c>CsSource.cs</c> file converted here contains C# source code.</para>
			<codelink SampleID="MetaData.ConvertCodeSourceFileToAssemblyFile" SnippetID="1"/>
		</example>
	</doc></docs>
