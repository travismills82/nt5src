<docs>
	<doc for="SdlChannelSinkProvider.SdlChannelSinkProvider">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider"/> class with default values.</para>
		</summary>
	</doc><doc for="SdlChannelSinkProvider.CreateSink">
		<summary>
			<para>Creates a sink chain.
      </para>
		</summary>
		<param name="channel">The channel for which to create the channel sink chain.</param>
		<returns>
			<para> The first sink of the
      newly formed channel sink chain. </para>
		</returns>
	</doc><doc for="SdlChannelSinkProvider.Next">
		<summary>
			<para>Gets or sets the next <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> in the sink provider chain.</para>
		</summary>
		<value>
			<para>The next <see cref="System.Runtime.Remoting.Channels.IServerChannelSinkProvider"/> in the sink provider chain.</para>
		</value>
	</doc><doc for="SdlChannelSink.AsyncProcessResponse">
		<summary>
			<para>Requests processing from the current sink of the response from a method call
      sent asynchronously.</para>
		</summary>
		<param name="sinkStack">A stack of sinks leading back to the server transport sink.</param>
		<param name="state">Information associated with the current sink, generated on the request side, and needed on the response side.</param>
		<param name="msg">The response message.</param>
		<param name="headers">The headers to add to the return message heading to the client.</param>
		<param name="stream">The stream heading back to the transport sink.</param>
	</doc><doc for="SdlChannelSink.NextChannelSink">
		<summary>
			<para>Gets the next <see cref="System.Runtime.Remoting.Channels.IServerChannelSink"/> in the sink chain.</para>
		</summary>
		<value>
			<para>The next <see cref="System.Runtime.Remoting.Channels.IServerChannelSink"/> in the sink chain.</para>
		</value>
	</doc><doc for="SdlChannelSinkProvider.GetChannelData">
		<summary>
			<para> Returns the channel data for the channel that the
      current sink is associated with.</para>
		</summary>
		<param name="localChannelData">An <see cref="System.Runtime.Remoting.Channels.IChannelDataStore"/> object in which the channel data is to be returned.</param>
	</doc><doc for="SdlChannelSinkProvider.SdlChannelSinkProvider1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider"/> class with specified
   properties and provider data.</para>
		</summary>
		<param name="properties">An <see cref="System.Collections.IDictionary"/> of configuration properties to use with the new instance of <see cref="System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider"/> .</param>
		<param name=" providerData">An <see cref="System.Collections.ICollection"/> of <see cref="System.Runtime.Remoting.Channels.SinkProviderData"/> instances to use with the new instance of <see cref="System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider"/>.</param>
	</doc><doc for="SdlChannelSink.SdlChannelSink">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Runtime.Remoting.MetadataServices.SdlChannelSink"/> class.</para>
		</summary>
		<param name="receiver">Indicates the channel that will receive the messages serialized by the new instance of <see cref="System.Runtime.Remoting.MetadataServices.SdlChannelSink"/>.</param>
		<param name=" nextSink">The next sink in the sink chain.</param>
	</doc><doc for="SdlChannelSink.GetResponseStream">
		<summary>
			<para>Returns the <see cref="System.IO.Stream"/> onto which the provided
   response message is to be serialized.</para>
		</summary>
		<param name="sinkStack">A stack of sinks leading back to the server transport sink.</param>
		<param name=" state">Information associated with the current sink, generated on the request side, and needed on the response side.</param>
		<param name=" msg">The response message to serialize. </param>
		<param name=" headers">The headers to put in the response stream to the client.</param>
		<returns>
			<para>The <see cref="System.IO.Stream"/> onto which the provided
   response message is to be serialized.</para>
		</returns>
		<remarks>
			<para>The current method is called when a response stream needs to be created.</para>
		</remarks>
		<seealso topic="cpconsinkssinkchains"/>
	</doc><doc for="SdlChannelSink.Properties">
		<summary>
			<para>Gets an <see cref="System.Collections.IDictionary"/> of properties for the
   current channel sink.</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.IDictionary"/> of properties for the current channel sink.</para>
		</value>
		<remarks>
			<note type="note">
      For
      more information, see <see topic="cpconchannelformatterconfigurationproperties"/>.
   </note>
		</remarks>
		<seealso topic="cpconchannelformatterconfigurationproperties"/>
	</doc><doc for="SdlChannelSink.ProcessMessage">
		<summary>
			<para> Requests message processing from the current sink.</para>
		</summary>
		<param name="sinkStack">A stack of channel sinks that called the current sink.</param>
		<param name="requestMsg">The message that contains the request.</param>
		<param name="requestHeaders">The headers retrieved from the incoming message from the client.</param>
		<param name="requestStream">The stream that needs to be processed and passed on to the deserialization sink.</param>
		<param name="responseMsg">When this method returns, contains an <see cref="System.Runtime.Remoting.Messaging.IMessage"/> that holds the response message. This parameter is passed uninitialized.</param>
		<param name="responseHeaders">When this method returns, contains an <see cref="System.Runtime.Remoting.Channels.ITransportHeaders"/> that holds the headers to add to return message heading to the client. This parameter is passed uninitialized. </param>
		<param name="responseStream">When this method returns, contains a <see cref="System.IO.Stream"/> that is heading to the transport sink. This parameter is passed uninitialized. </param>
		<returns>
			<para>A <see cref="System.Runtime.Remoting.Channels.ServerProcessing"/> status value that
   provides information about how the message was processed.</para>
		</returns>
		<remarks>
			<para> The proxy's job is to convert a method call invoked
      on it into a message object. The Message object, which implements the
   <see cref="System.Runtime.Remoting.Messaging.IMessage"/> interface, is passed from the
      client end to the server end by invoking <see cref="System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage"/>
      on message sink objects.
      Message sinks are chained together, which means that every message sink is
      responsible for calling <see cref="System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage"/>
      on the next message sink after it has performed its
      work. For instance, a synchronization related message sink might cause a lock
      to be acquired or released and delegated to the downstream message sink.</para>
			<para>When the formatter channel sink gets a message that needs to be sent over the
      channel, it calls <see cref="System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage"/>, passing the
      message as a parameter. The formatter sink then creates the transport header
      array and calls <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.GetRequestStream"/> on
      the formatter sink. This call is forwarded down the sink chain, and any sink
      can create a request stream that will be passed back to the formatter sink.
      After this call returns, the message is serialized, <see cref="System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage"/> is called
      on the first chain in the sink chain, and the message is passed to the channel
      sinks.</para>
			<para>After the channel sinks get the message, they can write data to the stream,
      add headers to the header array, and add themselves to the sink stack before
      forwarding the call to the next sink. When the call reaches the transport sink
      at the end of the chain, the transport sink sends the headers and serialized
      message over the channel to the server, where the process is reversed.</para>
			<para> When the message reaches the server side, the transport sink
      retrieves the headers and serialized message from the stream and forwards these
      through the sink chain until they reach the formatter sink. The formatter sink
      then deserializes the message and forwards it to remoting, where
      the message is turned into a method call and the server object is called.</para>
		</remarks>
	</doc><doc for="SdlChannelSinkProvider">
		<summary>
			<para>Provides the implementation for the server channel
      sink provider that creates <see cref="System.Runtime.Remoting.MetadataServices.SdlChannelSink"/>
      instances.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.MetadataServices.SdlChannelSink"/> is used to create Web
   Services Description Language (WSDL) schema in situations where the URL ends
   with the string "?wsdl", for example, http://localhost/longbeard?wsdl .</para>
		</remarks>
	</doc>
	<doc for="SdlChannelSink">
		<summary>
			<para>Provides the implementation for a server channel sink that generates Web Services Description
      Language (WSDL) dynamically on the server.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Runtime.Remoting.MetadataServices.SdlChannelSink"/> is used to create WSDL
   in situations where the URL ends with the string "?wsdl".</para>
			<para>The following table shows the channel configuration 
   properties that can be specified for this channel sink. The first two properties
   combine to control the WSDL publication of objects published by the application
   domain. If <see langword="false"/> is specified for the first property,
   no WSDL is returned, regardless of the second property. (The default is
<see langword="true."/>) Otherwise, the second controls whether the global 
   metadata object URI is permitted to respond. (The default is
<see langword="false"/> 
.) </para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="metadataEnabled"/></term>
					<description>
						<para>Boolean specifying whether to honor requests that end in "?wsdl" if 
         this sink is in the channel sink chain. The default setting is
      <see langword="true"/>. If false, the sink will throw an exception in all 
         cases where metadata is requested for any object in the application
         domain.</para>
						<para>This property is supported only by the .NET Framework version 1.1 on 
         the following platforms: Windows 98, Windows NT 4.0, Windows Millennium
         Edition, Windows 2000, Windows XP Home Edition, Windows XP Professional,
         Windows .NET Server family.</para></description>
				</item>
				<item>
					<term>
						<para><see langword="remoteApplicationMetadataEnabled"/></para></term>
					<description>
						<para> Boolean specifying whether to honor requests for the object 
            URI "RemoteApplicationMetadata?wsdl", which returns WSDL describing
            all objects published by the application domain.If false, then any request
            to "RemoteApplicationMetadata.rem" will throw an exception. All
            other "?wsdl" requests for particular object URIs will be honored. If true,
            the global metadata request is honored. The default setting is
         <see langword="false"/>. </para>
						<para>This property is supported only by the .NET Framework version 1.1 on 
            the following platforms: Windows 98, Windows NT 4.0, Windows Millennium
            Edition, Windows 2000, Windows XP Home Edition, Windows XP Professional,
            Windows .NET Server family.</para></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconwebservicedescription"/>
	</doc>
</docs>
