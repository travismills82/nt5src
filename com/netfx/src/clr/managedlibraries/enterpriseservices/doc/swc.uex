<docs>
	<doc for="TransactionStatus.Aborting">
		<summary>
			<para>The transaction is in the process of aborting.</para>
		</summary>
	</doc>
	<doc for="TransactionStatus.Aborted">
		<summary>
			<para>The transaction is aborted.</para>
		</summary>
	</doc>
	<doc for="TransactionStatus.Commited">
		<summary>
			<para>The transaction has committed.</para>
		</summary>
	</doc>
	<doc for="TransactionStatus.LocallyOk">
		<summary>
			<para>The transaction has neither committed nor aborted.</para>
		</summary>
	</doc>
	<doc for="TransactionStatus.NoTransaction">
		<summary>
			<para>No transactions are being used through <see cref="System.EnterpriseServices.ServiceDomain.Enter"/>.</para>
		</summary>
	</doc>
	<doc for="InheritanceOption.Ignore">
		<summary>
			<para>The new context is created from the default context.</para>
		</summary>
	</doc>
	<doc for="ServiceConfig.PartitionId">
		<summary>
			<para>Gets or sets the GUID for the COM+ partition that is to be used.</para>
		</summary>
		<value>
			<para>The GUID for the partition to be used. The default is a zero GUID.</para>
		</value>
	</doc>
	<doc for="ThreadPoolOption.None">
		<summary>
			<para>No thread pool is used. If this value is used to 
      configure a <see cref="System.EnterpriseServices.ServiceConfig"/> that is passed to an <see cref="System.EnterpriseServices.Activity"/>, an exception is thrown.</para>
		</summary>
	</doc>
	<doc for="ThreadPoolOption.STA">
		<summary>
			<para>A single-threaded apartment (STA) is used.</para>
		</summary>
	</doc>
	<doc for="SxsOption.New">
		<summary>
			<para> A new side-by-side assembly is created for the enclosed context.</para>
		</summary>
	</doc>
	<doc for="PartitionOption.New">
		<summary>
			<para>The enclosed context runs in a COM+ partition that is 
      different from the current containing partition.</para>
		</summary>
	</doc>
	<doc for="ServiceConfig.SxsOption">
		<summary>
			<para> Gets or sets a value indicating how to configure the
      side-by-side assembly.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.EnterpriseServices.SxsOption"/> values. The default 
   is <see cref="System.EnterpriseServices.SxsOption.Ignore"/>.</para>
		</value>
	</doc>
	<doc for="ServiceConfig.Synchronization">
		<summary>
			<para>Gets or sets a value indicating the type of automatic synchronization 
      requested by the component.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.EnterpriseServices.SynchronizationOption"/> values. 
   The default is <see cref="System.EnterpriseServices.SynchronizationOption.Disabled"/>.</para>
		</value>
	</doc>
	<doc for="ServiceConfig.Transaction">
		<summary>
			<para>Gets or sets a value indicating how transactions 
      are used in the enclosed work.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.EnterpriseServices.TransactionOption"/> values. The default 
   is <see cref="System.EnterpriseServices.TransactionOption.Disabled"/>.</para>
		</value>
	</doc>
	<doc for="ServiceConfig.TransactionDescription">
		<summary>
			<para>Gets or sets the name that is used when transaction
      statistics are displayed.</para>
		</summary>
		<value>
			<para>The name used when transaction statistics are displayed. The default value is 
   <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>If a description if not provided, the value of <see cref="System.EnterpriseServices.ServiceConfig.TrackingComponentName"/> is used to describe the 
   transaction.</para>
		</remarks>
	</doc>
	<doc for="ServiceConfig.TransactionTimeout">
		<summary>
			<para>Gets or sets the transaction time-out for a new transaction.</para>
		</summary>
		<value>
			<para>The transaction time-out, in seconds. </para>
		</value>
	</doc>
	<doc for="IAsyncErrorNotify.OnError">
		<summary>
			<para> 
      Handles errors for asynchronous batch work.</para>
		</summary>
		<param name="hresult">The HRESULT of the error that occurred while the batch work was running asynchronously.</param>
		<remarks>
			<para>This method should be implemented to gracefully handle errors that occur when
      batch work is running asynchronously. Because the process terminates (failfast)
      on any unrecoverable error, without this method there is no way of
      knowing when errors occur in asynchronous batch work. The process also
      terminates when this method returns an error as its return value. The batch work
      itself is implemented in <see cref="System.EnterpriseServices.IServiceCall.OnCall"/>, and it is run
      asynchronously by calling <see cref="System.EnterpriseServices.Activity.AsynchronousCall"/>.</para>
			<para>This method supports the standard return values <see langword="E_FAIL"/>, 
<see langword="E_INVALIDARG"/>, and <see langword="E_OUTOFMEMORY"/>, as well as 
   the following: <see langword="S_OK"/> The method call returned
   successfully. </para>
		</remarks>
	</doc>
	<doc for="Activity.SynchronousCall">
		<summary>
			<para>Runs the specified user-defined batch work
      synchronously.</para>
		</summary>
		<param name="serviceCall">An <see cref="System.EnterpriseServices.IServiceCall"/> object that is used to implement the batch work.</param>
	</doc>
	<doc for="Activity.AsynchronousCall">
		<summary>
			<para>Runs the specified user-defined batch work
      asynchronously.</para>
		</summary>
		<param name="serviceCall">An <see cref="System.EnterpriseServices.IServiceCall"/> object that is used to implement the batch work.</param>
	</doc>
	<doc for="ServiceConfig.SxsName">
		<summary>
			<para>Gets or sets the file name of the side-by-side assembly 
      for the enclosed work.</para>
		</summary>
		<value>
			<para>The file name of the side-by-side assembly. The 
      default value is <see langword="null"/>.</para>
		</value>
	</doc>
	<doc for="ServiceConfig.PartitionOption">
		<summary>
			<para> Gets or sets a value indicating how partitions are used 
      for the enclosed work.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.EnterpriseServices.PartitionOption"/> values. The default 
   is <see cref="System.EnterpriseServices.PartitionOption.Ignore"/>.</para>
		</value>
	</doc>
	<doc for="BindingOption.NoBinding">
		<summary>
			<para>The work submitted by the activity is not bound to a single STA.</para>
		</summary>
	</doc>
	<doc for="BindingOption.BindingToPoolThread">
		<summary>
			<para>The work submitted by the activity is bound to a single STA.</para>
		</summary>
	</doc>
	<doc for="ServiceConfig">
		<summary>
			<para>Specifies and configures the services that are to be active
      in the domain which is entered when calling <see cref="System.EnterpriseServices.ServiceDomain.Enter"/> or creating an
   <see cref="System.EnterpriseServices.Activity"/>.
      This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para><see cref="System.EnterpriseServices.ServiceDomain.Enter"/> and <see cref="M:System.EnterpriseServices.Activity.#ctor"/> allow you to use the services
   configured by <see cref="System.EnterpriseServices.ServiceConfig"/>
   
   with no need to tie those services to a component.</para>
		</remarks>
	</doc>
	<doc for="ServiceConfig.ServiceConfig">
		<summary>
   Initializes a new instance of the <see cref="System.EnterpriseServices.ServiceConfig"/> class, setting the properties to
   configure the desired services.
</summary>
		<exception cref="System.PlatformNotSupportedException"><see cref="System.EnterpriseServices.ServiceConfig"/> is not supported on the current platform.</exception>
		<remarks>
			<para>The following table shows initial property values for an instance of <see cref="System.EnterpriseServices.ServiceConfig"/>.</para>
			<list type="table">
				<listheader>
					<term>Item</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> Binding</term>
					<description><see cref="System.EnterpriseServices.BindingOption.NoBinding"/></description>
				</item>
				<item>
					<term> BringYourOwnTransaction </term>
					<description><see langword="null"/></description>
				</item>
				<item>
					<term> COMTIIntrinsicsEnabled </term>
					<description><see langword="false"/></description>
				</item>
				<item>
					<term> IISIntrinsicsEnabled </term>
					<description><see langword="false"/></description>
				</item>
				<item>
					<term> Inheritance </term>
					<description><see cref="System.EnterpriseServices.InheritanceOption.Inherit"/></description>
				</item>
				<item>
					<term> IsolationLevel </term>
					<description><see cref="System.EnterpriseServices.TransactionIsolationLevel.Any"/></description>
				</item>
				<item>
					<term> PartitionId </term>
					<description>A zero GUID. </description>
				</item>
				<item>
					<term> PartitionOption </term>
					<description><see cref="System.EnterpriseServices.PartitionOption.Ignore"/></description>
				</item>
				<item>
					<term> SxsDirectory </term>
					<description><see langword="null"/></description>
				</item>
				<item>
					<term> SxsName </term>
					<description><see langword="null"/></description>
				</item>
				<item>
					<term> SxsOption </term>
					<description><see cref="System.EnterpriseServices.SxsOption.Ignore"/></description>
				</item>
				<item>
					<term> Synchronization </term>
					<description><see cref="System.EnterpriseServices.SynchronizationOption.Disabled"/></description>
				</item>
				<item>
					<term> ThreadPool </term>
					<description><see cref="System.EnterpriseServices.ThreadPoolOption.None"/></description>
				</item>
				<item>
					<term> TipUrl </term>
					<description><see langword="null"/></description>
				</item>
				<item>
					<term> TrackingAppName </term>
					<description><see langword="null"/></description>
				</item>
				<item>
					<term> TrackingComponentName </term>
					<description><see langword="null"/></description>
				</item>
				<item>
					<term> TrackingEnabled </term>
					<description><see langword="false"/></description>
				</item>
				<item>
					<term> Transaction </term>
					<description><see cref="System.EnterpriseServices.TransactionOption.Disabled"/></description>
				</item>
				<item>
					<term> TransactionDescription </term>
					<description><see langword="null"/></description>
				</item>
				<item>
					<term> TransactionTimeout </term>
					<description>The system default.</description>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="ServiceConfig.Inheritance">
		<summary>
			<para>Gets or sets a value indicating whether to construct a new context based on
      the current context or to create a new context based solely on the information
      in <see cref="System.EnterpriseServices.ServiceConfig"/>.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.EnterpriseServices.InheritanceOption"/> values. The default is <see cref="System.EnterpriseServices.InheritanceOption.Inherit"/>.</para>
		</value>
	</doc>
	<doc for="ServiceConfig.IsolationLevel">
		<summary>
			<para>Gets or sets the isolation level of the transaction.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.EnterpriseServices.TransactionIsolationLevel"/> values.
   The default is <see cref="System.EnterpriseServices.TransactionIsolationLevel.Any"/>.</para>
		</value>
		<remarks>
			<para>A new transaction is created if the enclosing transaction 
      is not running at the specified isolation level. <see cref="System.EnterpriseServices.ServiceConfig.IsolationLevel"/>
      is ignored if the enclosed code
      would not otherwise run in a transaction.</para>
		</remarks>
	</doc>
	<doc for="ServiceConfig.IISIntrinsics">
		<summary>
			<para> Gets or sets
      a value indicating whether IIS intrinsics are enabled.</para>
		</summary>
		<value>
			<para><see langword="true"/> if IIS intrinsics are enabled; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> Enables passing IIS context properties, such as an application session
      object or a user session object, into the context for this class.</para>
		</remarks>
	</doc>
	<doc for="ServiceConfig.COMTIIntriniscs">
		<summary>
			<para>Gets or sets a value indicating whether COM Transaction
      Integrator (COMTI) intrinsics are enabled.</para>
		</summary>
		<value>
			<para><see langword="true"/> if COMTI intrinsics are enabled; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> Enables passing context properties from the COM Transaction Integrator (COMTI) into the context for
      this class. The COMTI eases the task of wrapping mainframe transactions and business
      logic as COM components.</para>
			<para> Configures the COMTI intrinsics for the work
      that is done. The COMTI eases the task of wrapping mainframe transactions and
      business logic with transactions.</para>
		</remarks>
	</doc>
	<doc for="ServiceConfig.ThreadPool">
		<summary>
			<para>Gets or sets a value indicating the thread
      pool which runs the work submitted by the activity.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.EnterpriseServices.ThreadPoolOption"/> values. The default
   is <see cref="System.EnterpriseServices.ThreadPoolOption.None"/>.</para>
		</value>
	</doc>
	<doc for="ServiceConfig.TipUrl">
		<summary>
			<para> Gets or sets the Transaction
      Internet Protocol (TIP) URL that allows the enclosed code to run in
      an existing transaction.</para>
		</summary>
		<value>
			<para>A TIP URL. The default value is
   <see langword="null"/> .</para>
		</value>
		<remarks>
			<para><see cref="System.EnterpriseServices.ServiceConfig.TipUrl"/> is similar to the <see cref="System.EnterpriseServices.ServiceConfig.BringYourOwnTransaction"/> property but allows the enclosed
   code to run as an existing transaction that
   is specified by a TIP URL.</para>
		</remarks>
	</doc>
	<doc for="ServiceConfig.SxsDirectory">
		<summary>
			<para>Gets or sets the directory for the side-by-side assembly
      for the enclosed work.</para>
		</summary>
		<value>
			<para>The name of the directory to be used for the side-by-side
      assembly. The default value is <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>Configures side-by-side assemblies for this <see cref="System.EnterpriseServices.ServiceConfig"/>.</para>
			<note type="note">
   You must set the <see cref="System.EnterpriseServices.ServiceConfig.SxsDirectory"/>
   property, if you create a new side-by-side assembly
   by setting the <see cref="System.EnterpriseServices.ServiceConfig.SxsOption"/> property
   to <see cref="System.EnterpriseServices.SxsOption.New"/>.
   
</note>
		</remarks>
	</doc>
	<doc for="ServiceConfig.TrackingEnabled">
		<summary>
			<para>Gets or sets a value indicating whether tracking is enabled.</para>
		</summary>
		<value>
			<para><see langword="true"/> if tracking is enabled; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> The tracker is a
      reporting mechanism used by monitoring applications to watch running COM+ components. It is the
      reporting mechanism behind the spinning component icons in the Component Services administrative
      tool.</para>
		</remarks>
	</doc>
	<doc for="ServiceDomain">
		<summary>
			<para>Allows a code segment identified by <see cref="System.EnterpriseServices.ServiceDomain.Enter"/> and
<see cref="System.EnterpriseServices.ServiceDomain.Leave"/> to run in its 
   own context and behave as if it were
   a method that is called on an object created within the context. This class cannot
   be inherited.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.EnterpriseServices.ServiceDomain.Enter"/> and <see cref="System.EnterpriseServices.ServiceDomain.Leave"/> methods are used in pairs to surround
   code that can then use COM+ services. Code that is enclosed between calls to
<see cref="System.EnterpriseServices.ServiceDomain.Enter"/> and <see cref="System.EnterpriseServices.ServiceDomain.Leave"/> runs in its own context and 
   behaves as if it were a method that is called on an object created within the
   context. The <see cref="System.EnterpriseServices.ServiceDomain.Enter"/> and <see cref="System.EnterpriseServices.ServiceDomain.Leave"/> pairs can be nested. It is up to
   the user to make sure that pairs of calls are balanced so that every call to
<see cref="System.EnterpriseServices.ServiceDomain.Leave"/> matches a previous call to <see cref="System.EnterpriseServices.ServiceDomain.Enter"/>.</para>
		</remarks>
	</doc>
	<doc for="ServiceDomain.Enter">
		<summary>
			<para>Creates the context specified by the <see cref="System.EnterpriseServices.ServiceConfig"/> object and pushes it onto the context stack to become
   the current context.</para>
		</summary>
		<param name="cfg">A <see cref="System.EnterpriseServices.ServiceConfig"/> that contains the configuration information for the services to be used within the enclosed code.</param>
		<exception cref="System.PlatformNotSupportedException"><see cref="System.EnterpriseServices.ServiceConfig"/> is not supported on the current platform.</exception>
		<remarks>
			<para><see cref="System.EnterpriseServices.ServiceDomain.Enter"/> first
   creates a context configured as specified by the <see cref="System.EnterpriseServices.ServiceConfig"/> object that is passed as the
<paramref name="cfg"/> parameter. Policies on both the client and server sides are then 
   triggered as if a method call had occurred. The new context is then pushed onto
   a context stack and becomes the current context. Because of their efficient
   design and because no thread marshaling is involved, using <see cref="System.EnterpriseServices.ServiceDomain.Enter"/> and
<see cref="System.EnterpriseServices.ServiceDomain.Leave"/> involves significantly reduced overhead compared to an
   equivalent method call. </para>
		</remarks>
	</doc>
	<doc for="ServiceDomain.Leave">
		<summary>
			<para>Triggers the server and then the client side policies as
      if a method call were returning. The current context is then popped from the
      context stack, and the context that was running when <see cref="System.EnterpriseServices.ServiceDomain.Enter"/> was called becomes the current context.</para>
		</summary>
		<returns>
			<para>One of the <see cref="System.EnterpriseServices.TransactionStatus"/> values.</para>
		</returns>
		<exception cref="System.PlatformNotSupportedException"><see cref="System.EnterpriseServices.ServiceConfig"/> is not supported on the current platform.</exception>
	</doc>
	<doc for="SxsOption.Ignore">
		<summary>
			<para> Side-by-side assemblies are not used within the enclosed 
      context. <see cref="System.EnterpriseServices.SxsOption.Ignore"/>
      is the default setting for <see cref="System.EnterpriseServices.ServiceConfig.SxsOption"/> when <see cref="System.EnterpriseServices.ServiceConfig.Inheritance"/> is set to <see cref="System.EnterpriseServices.InheritanceOption.Ignore"/>.</para>
		</summary>
	</doc>
	<doc for="SxsOption.Inherit">
		<summary>
			<para> The current side-by-side assembly of the enclosed 
      context is used. <see cref="System.EnterpriseServices.SxsOption.Inherit"/>
      is the default setting for <see cref="System.EnterpriseServices.ServiceConfig.SxsOption"/> when <see cref="System.EnterpriseServices.ServiceConfig.Inheritance"/> is set to <see cref="System.EnterpriseServices.InheritanceOption.Inherit"/>.</para>
		</summary>
	</doc>
	<doc for="SxsOption">
		<summary>
			<para>Indicates how side-by-side assemblies are configured for
   <see cref="System.EnterpriseServices.ServiceConfig"/>.</para>
		</summary>
		<remarks>
			<para><see cref="System.EnterpriseServices.SxsOption"/> is used for the value 
   of <see cref="System.EnterpriseServices.ServiceConfig.Inheritance"/>.</para>
		</remarks>
	</doc>
	<doc for="ThreadPoolOption">
		<summary>
			<para> Indicates the thread pool in which the work, submitted
      by <see cref="System.EnterpriseServices.Activity"/>, runs.</para>
		</summary>
		<remarks>
			<para><see cref="System.EnterpriseServices.ThreadPoolOption"/> is used for the value of 
<see cref="System.EnterpriseServices.ServiceConfig.ThreadPool"/>.</para>
		</remarks>
	</doc>
	<doc for="TransactionStatus">
		<summary>
			<para>Indicates the transaction status.</para>
		</summary>
		<remarks>
			<para><see cref="System.EnterpriseServices.TransactionStatus"/> is the value returned by <see cref="System.EnterpriseServices.ServiceDomain.Leave"/>.</para>
		</remarks>
	</doc>
	<doc for="InheritanceOption.Inherit">
		<summary>
			<para>The new context is created from the existing 
      context. <see cref="System.EnterpriseServices.InheritanceOption.Inherit"/>
      is the default value for <see cref="System.EnterpriseServices.ServiceConfig.Inheritance"/>.</para>
		</summary>
	</doc>
	<doc for="ThreadPoolOption.Inherit">
		<summary>
			<para>The same type of thread pool apartment as the caller's 
      thread apartment is used. <see cref="System.EnterpriseServices.ThreadPoolOption.Inherit"/> is the default
      thread pool setting for <see cref="System.EnterpriseServices.ServiceConfig.ThreadPool"/>
      when <see cref="System.EnterpriseServices.ServiceConfig.Inheritance"/> is set
      to <see cref="System.EnterpriseServices.InheritanceOption.Inherit"/>.</para>
		</summary>
	</doc>
	<doc for="ThreadPoolOption.MTA">
		<summary>
			<para>A multithreaded apartment (MTA) is used. <see cref="System.EnterpriseServices.ThreadPoolOption.MTA"/> is the default 
   thread pool setting for <see cref="System.EnterpriseServices.ServiceConfig.ThreadPool"/> when <see cref="System.EnterpriseServices.ServiceConfig.Inheritance"/> is set to <see cref="System.EnterpriseServices.InheritanceOption.Ignore"/> .</para>
		</summary>
	</doc>
	<doc for="PartitionOption">
		<summary>
			<para> Indicates the context in
      which to run the COM+ partition.</para>
		</summary>
		<remarks>
			<para> For information on partitions, see the COM+ Partitions topic in the 
      COM+ (Component Services) section in the Platform SDK Documentation in the MSDN
      Library.</para>
		</remarks>
	</doc>
	<doc for="PartitionOption.Ignore">
		<summary>
			<para> The enclosed context runs in the Global 
      Partition. <see cref="System.EnterpriseServices.PartitionOption.Ignore"/>
      is the default setting for <see cref="System.EnterpriseServices.ServiceConfig.PartitionOption"/> when
 <see cref="System.EnterpriseServices.ServiceConfig.Inheritance"/> is set to 
<see cref="System.EnterpriseServices.InheritanceOption.Ignore"/>.</para>
		</summary>
	</doc>
	<doc for="PartitionOption.Inherit">
		<summary>
			<para>The enclosed context runs in the current containing COM+ 
      partition. This is the default setting for <see cref="System.EnterpriseServices.ServiceConfig.PartitionOption"/>
 when <see cref="System.EnterpriseServices.ServiceConfig.Inheritance"/> is set to 
<see cref="System.EnterpriseServices.InheritanceOption.Inherit"/>.</para>
		</summary>
	</doc>
	<doc for="ServiceConfig.BringYourOwnTransaction">
		<summary>
			<para>Gets or sets an <see cref="System.EnterpriseServices.ITransaction"/>
representing an existing transaction that supplies the settings used to run the transaction
identified by <see cref="System.EnterpriseServices.ServiceConfig"/>.</para>
		</summary>
		<value>
			<para>An <see cref="System.EnterpriseServices.ITransaction"/>. The default is
<see langword="null"/>.</para>
		</value>
		<remarks>
			<para><see cref="System.EnterpriseServices.ServiceConfig.BringYourOwnTransaction"/> (BYOT)
   identifies a transaction that supplies the context for the <see cref="System.EnterpriseServices.ServiceConfig"/> transaction. When
   you bring your own transaction, that transaction's settings override the other
   transaction settings in the <see cref="System.EnterpriseServices.ServiceConfig"/> object. The
   default value for <see cref="System.EnterpriseServices.ServiceConfig.BringYourOwnTransaction"/> is
<see langword="null"/>.</para>
For more information on BYOT, see <see cref="System.EnterpriseServices.BYOT"/>.
</remarks>
		<seealso cref="System.EnterpriseServices.BYOT"/>
	</doc>
	<doc for="ServiceConfig.TrackingAppName">
		<summary>
			<para>Gets or sets a text string that corresponds to the
      application ID under which tracker information is reported.</para>
		</summary>
		<value>
			<para>The application ID under which tracker information is
      reported. The default value is <see langword="null"/> .</para>
		</value>
		<remarks>
			<para>Because no component is associated with this tracker property, tracker
      activity is reported as arising from a component with the name specified by
   <see cref="System.EnterpriseServices.ServiceConfig.TrackingAppName"/>.</para>
			<para>For more information, see <see cref="System.EnterpriseServices.ServiceConfig.TrackingEnabled"/>.</para>
		</remarks>
		<seealso cref="System.EnterpriseServices.ServiceConfig.TrackingEnabled"/>
	</doc>
	<doc for="ServiceConfig.TrackingComponentName">
		<summary>
			<para>Gets or sets a text string that corresponds to the context name under
      which tracker information is reported.</para>
		</summary>
		<value>
			<para>The context name under which tracker information is reported.
      The default value is <see langword="null"/> .</para>
		</value>
		<seealso cref="System.EnterpriseServices.ServiceConfig.TrackingEnabled"/>
	</doc>
	<doc for="Activity.Activity">
		<summary>
			<para>Initializes a new instance of the <see cref="System.EnterpriseServices.Activity"/> class.</para>
		</summary>
		<param name="cfg">A <see cref="System.EnterpriseServices.ServiceConfig"/> that contains the configuration information for the services to be used.</param>
		<exception cref="System.PlatformNotSupportedException"><see cref="System.EnterpriseServices.Activity"/> is not supported on the current platform.</exception>
		<remarks>
			<para>Creates an <see cref="System.EnterpriseServices.Activity"/> that is used to submit batch work
   to COM+ services. The context associated with the activity is
   completely determined by the <see cref="System.EnterpriseServices.ServiceConfig"/> object that is
   passed through the <paramref name="cfg"/> parameter.</para>
		</remarks>
	</doc>
	<doc for="Activity.BindToCurrentThread">
		<summary>
			<para>Binds the user-defined work to the current thread.</para>
		</summary>
		<remarks>
			<para><see cref="System.EnterpriseServices.Activity.BindToCurrentThread"/>
binds the batch work that is submitted by the <see cref="System.EnterpriseServices.Activity.SynchronousCall"/> or <see cref="System.EnterpriseServices.Activity.AsynchronousCall"/> methods to the current
single-threaded apartment (STA). <see cref="System.EnterpriseServices.Activity.BindToCurrentThread"/>
has no effect if the current thread is being
run in the multithreaded apartment (MTA). The current thread model is determined
by the configuration of the <see cref="System.EnterpriseServices.ServiceConfig.ThreadPool"/> property of the
<see cref="System.EnterpriseServices.ServiceConfig"/> 
object.</para>
		</remarks>
	</doc>
	<doc for="Activity.UnbindFromThread">
		<summary>
			<para>Unbinds the batch work that is submitted by the
   <see cref="System.EnterpriseServices.Activity.SynchronousCall"/> or <see cref="System.EnterpriseServices.Activity.AsynchronousCall"/> 
   methods from the thread the batch work is running on.</para>
		</summary>
		<remarks>
			<para><see cref="System.EnterpriseServices.Activity.UnbindFromThread"/> has no effect if the batch work 
   was not previously bound to a thread.</para>
		</remarks>
	</doc>
	<doc for="Activity">
		<summary>
			<para> Creates an activity to do synchronous or asynchronous
      batch work that can use COM+ services without needing to create a COM+
      component. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>The context associated with the activity is completely determined by a 
   <see cref="System.EnterpriseServices.ServiceConfig"/> object. </para>
		</remarks>
	</doc>
	<doc for="BindingOption">
		<summary>
			<para> Indicates whether all work submitted
      by <see cref="System.EnterpriseServices.Activity"/>
      should be bound to only one single-threaded apartment (STA).
      This enumeration has no impact on the multithreaded apartment (MTA).</para>
		</summary>
	</doc>
	<doc for="InheritanceOption">
		<summary>
			<para> Indicates whether
      to create a new context based on the current context or on the information in
   <see cref="System.EnterpriseServices.ServiceConfig"/>.</para>
		</summary>
		<remarks>
			<para><see cref="System.EnterpriseServices.InheritanceOption"/> is used
   for the value of <see cref="System.EnterpriseServices.ServiceConfig.Inheritance"/>.</para>
		</remarks>
	</doc>
	<doc for="IServiceCall">
		<summary>
			<para>Implements the batch work that is submitted through
      the activity created by <see cref="System.EnterpriseServices.Activity"/>. </para>
		</summary>
		<remarks>
			<para>Use <see cref="System.EnterpriseServices.IServiceCall"/> to perform batch work that uses COM+ services without creating a component specifically for using
   those services. Script environments such as Internet Information Services (IIS) and ASP .NET can use
   this interface to utilize COM+ services without the need to create a COM+ component.</para>
		</remarks>
	</doc>
	<doc for="IServiceCall.OnCall">
		<summary>
			<para>Starts the execution of the batch work implemented in this method.</para>
		</summary>
		<remarks>
			<para> The batch work that is run in this method runs
      in the context and thread apartment of the activity created by the call to
   <see cref="System.EnterpriseServices.Activity"/>. The batch work in this method is run
      by a call to either <see cref="System.EnterpriseServices.Activity.SynchronousCall" qualify="true"/>
      or <see cref="System.EnterpriseServices.Activity.AsynchronousCall" qualify="true"/>. </para>
			<note type="caution">
      You must ensure that this method is thread
      safe in situations where the activity object created by <see cref="System.EnterpriseServices.Activity"/> is not created with a synchronized
      context, because in such situations many calls to <see cref="System.EnterpriseServices.IServiceCall.OnCall"/>
      can run at the same
      time.
      
   </note>
			<para>To achieve the best performance from the system, the
      context configuration of the activity created by <see cref="System.EnterpriseServices.Activity"/> should be matched to
      the batch work performed by the <see cref="System.EnterpriseServices.IServiceCall.OnCall"/> method. For example,
      if the batch work in the <see cref="System.EnterpriseServices.IServiceCall.OnCall"/> method uses poolable
      objects, the activity created by <see cref="System.EnterpriseServices.Activity"/> should be configured to use the multithreaded apartment
      (MTA). </para>
			<para>For information on poolable objects, see the topic 
      "Requirements for Poolable Objects" in the Platform SDK in
      MSDN. </para>
		</remarks>
	</doc>
	<doc for="IAsyncErrorNotify">
		<summary>
			<para>Implements error trapping on the asynchronous batch work
      that is submitted by the <see cref="System.EnterpriseServices.Activity"/> object.</para>
		</summary>
		<remarks>
			<para><see cref="System.EnterpriseServices.IAsyncErrorNotify"/> is used to implement error trapping
   on the asynchronous batch work that is submitted by the <see cref="System.EnterpriseServices.Activity"/> object. Implement this interface on
   the object that is passed in the call to <see cref="System.EnterpriseServices.Activity.AsynchronousCall"/> on the <see cref="System.EnterpriseServices.Activity"/>
   object. <see cref="System.EnterpriseServices.Activity.AsynchronousCall"/>
   determines if an error occurred in batch work that is
   running asynchronously. This interface enables you to be informed of errors that occur in
   asynchronous batch work, and the process will terminate (failfast) on any
   unrecoverable error. </para>
			<para> 
   For information on failfast, please refer
   to the "Fault Isolation and Failfast Policy" topic in the Platform SDK
   in MSDN. </para>
		</remarks>
	</doc>
	<doc for="ServiceConfig.Binding">
		<summary>
			<para> Gets or
      sets the binding option, indicating whether all work submitted by the
      activity is to be bound to only one single-threaded apartment (STA).</para>
		</summary>
		<value>
			<para>One of the <see cref="System.EnterpriseServices.BindingOption"/> values. The default is <see cref="System.EnterpriseServices.BindingOption.NoBinding"/> .</para>
		</value>
		<remarks>
			<para><see cref="System.EnterpriseServices.ServiceConfig.Binding"/> has no impact on the
   multithreaded apartment (MTA). This property is used to set the
   thread pool binding only when creating an <see cref="System.EnterpriseServices.Activity"/>. An error is returned if an
   attempt is made to set the thread pool binding when calling <see cref="System.EnterpriseServices.ServiceDomain.Enter"/>.</para>
		</remarks>
	</doc>
</docs>
