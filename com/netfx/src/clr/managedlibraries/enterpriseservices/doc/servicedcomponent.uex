<docs>
	<doc for="IRemoteDispatch">
		<summary>
			<para>Used internally to marshal data remotely between service components.</para>
		</summary>
	</doc>
	<doc for="ServicedComponent.ServicedComponent">
		<summary>
			<para>
            Initializes a new instance of the 
            <see cref="System.EnterpriseServices.ServicedComponent"/>
             class.
         </para>
		</summary>
		<remarks>
			<para>This constructor is called by derived class constructors to initialize state 
 in this type.</para>
		</remarks>
	</doc>
	<doc for="IRemoteDispatch.RemoteAutoDone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="IRemoteDispatch.RemoteNotAutoDone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ServicedComponent.Dispose">
		<overload>
			<para>
            Releases the resources used by the 
            <see cref="System.EnterpriseServices.ServicedComponent"/>
            .
         </para>
		</overload>
		<summary>
			<para>
             
      Releases all resources used by the 
            <see cref="System.EnterpriseServices.ServicedComponent"/>
            .
         </para>
		</summary>
		<remarks>
			<para> Finalizes the object and removes the associated COM+ context. </para>
			<para>
             It is recommended to explicitly release COM+ objects and external resources before the 
      garbage collector frees the object. If the external resource is scarce or
      expensive, better performance can be achieved by explicitly releasing COM+ resources
      when they are no longer needed. Explicit control is provided by the 
            <see cref="System.EnterpriseServices.ServicedComponent.Dispose"/>
             method. 
         </para>
			<para>
            Calling 
            <see cref="System.EnterpriseServices.ServicedComponent.Dispose"/>
             allows the
   resources used by the 
            <see cref="System.EnterpriseServices.ServicedComponent"/>
             to be reallocated for other purposes.
   For more information about 
            <see cref="System.EnterpriseServices.ServicedComponent.Dispose"/>
            , see 
            <see topic="cpconCleaningUpUnmanagedResources"/>
            . 
         </para>
			<note type="inheritinfo">
            
   Override the 
            <see cref="System.EnterpriseServices.ServicedComponent.Dispose(bool)"/>
             method to customize the dispose logic
   for this class.

         </note>
		</remarks>
	</doc>
	<doc for="ServicedComponent">
		<summary>
			<para>Represents the base class of all classes using COM+ services. </para>
		</summary>
	</doc>
	<doc for="ServicedComponent.Dispose1">
		<summary>
			<para>
             Releases the unmanaged resources used 
      by the 
            <see cref="System.EnterpriseServices.ServicedComponent"/>
             and optionally releases the managed resources.
         </para>
		</summary>
		<param name="disposing">
			<see langword="true"/>
          to release both managed and unmanaged resources; otherwise, 
         <see langword="false"/>
          to release only unmanaged resources.
      </param>
		<remarks>
			<para>
            This method is called by the public 
            <see langword="Dispose()"/>
             method and the 

            <see cref="System.Object.Finalize"/>
             
method. 
            <see langword="Dispose()"/>
             invokes the protected

            <see langword="Dispose(Boolean)"/>
             method with the 
            <paramref name="disposing"/>
             parameter 
set to 
            <see langword="true"/>
            . 
            <see cref="System.Object.Finalize"/>
             invokes 
            <see langword="Dispose"/>
             with

            <paramref name="disposing"/>
             set to 
            <see langword="false"/>
            .
         </para>
			<para>
            When the 
            <paramref name="disposing"/>
             parameter is 
            <see langword="true"/>
            , this method 
releases all resources held by any managed objects that this 
            <see cref="System.EnterpriseServices.ServicedComponent"/>
             references. This method invokes the

            <see langword="Dispose()"/>
             method of each referenced object.
         </para>
			<note type="inheritinfo">
				<see langword="Dispose"/>
             can be called multiple times by other objects. When 
   overriding 
            <see langword="Dispose(Boolean)"/>
            , be careful not to reference
   objects that have been previously disposed of in an earlier call to

            <see langword="Dispose"/>
            . For more information about how to implement 

            <see langword="Dispose(Boolean)"/>
            , see 
            <see topic="cpconImplementingDisposeMethod"/>
            .

         </note>
			<para>
            For more information about 
            <see langword="Dispose"/>
             and 
            <see cref="System.Object.Finalize"/>
            , see 

            <see topic="cpconCleaningUpUnmanagedResources "/>
             and 
            <see topic="cpconOverridingFinalizeMethod "/>
            .
         </para>
		</remarks>
	</doc>
	<doc for="ServicedComponent.DisposeObject">
		<summary>
			<para> Finalizes the
      object and removes the associated COM+ reference.</para>
		</summary>
		<param name="sc">The object to dispose.</param>
		<remarks>
			<para>
            It is preferable to use the Dispose design 
      pattern rather than 
            <see cref="System.EnterpriseServices.ServicedComponent.DisposeObject"/>
            . 
         </para>
		</remarks>
	</doc>
	<doc for="IServicedComponentInfo">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IServicedComponentInfo.GetComponentInfo">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ServicedComponent.IServicedComponentInfo.GetComponentInfo">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ServicedComponent.IRemoteDispatch.RemoteDispatchAutoDone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ServicedComponent.IRemoteDispatch.RemoteDispatchNotAutoDone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ServicedComponent.IManagedObject.GetSerializedBuffer">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ServicedComponent.IManagedObject.GetObjectIdentity">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ServicedComponent.Activate">
		<summary>
			<para>This method is called by the infrastructure when the object is created
      or allocated from a pool. Override this method to add custom initialization code to
      objects. </para>
		</summary>
	</doc><doc for="ServicedComponent.Deactivate">
		<summary>
			<para>This method is called by the infrastructure when the object is about to
      be deactivated. Override this method to add custom finalization
      code to objects when just-in-time (JIT) compiled code or object pooling is used.</para>
		</summary>
	</doc><doc for="ServicedComponent.CanBePooled">
		<summary>
			<para>This method is called by the infrastructure before the object is put
      back into the pool. Override this method to vote on whether the object is put
      back into the pool.</para>
		</summary>
		<returns>
			<para><see langword="true"/>
if the serviced
component can be pooled; otherwise,
<see langword="false"/>
.</para>
		</returns>
	</doc><doc for="ServicedComponent.Construct">
		<summary>
			<para>This method is called by the infrastructure just after the constructor
      is called, passing in the constructor string. Override this method to
      make use of the construction string value.</para>
		</summary>
		<param name="s">The construction string.</param>
	</doc></docs>
