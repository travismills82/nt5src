<docs>
	<doc for="ComManagedImportUtil">
		<summary>
			<para>Identifies and installs components in the COM+ catalog.</para>
		</summary>
	</doc>
	<doc for="IComManagedImportUtil">
		<summary>
			<para>Identifies and installs components in the COM+ catalog.</para>
		</summary>
		<remarks>
			<para>See <see cref="System.EnterpriseServices.Internal.ComManagedImportUtil"/> for the default implementation of
<see cref="System.EnterpriseServices.Internal.IComManagedImportUtil"/>.</para>
		</remarks>
	</doc>
	<doc for="IComManagedImportUtil.InstallAssembly">
		<summary>
			<para>Installs an assembly into a COM+ application.</para>
		</summary>
		<param name="filename">The path for the assembly.</param>
		<param name=" parname">The COM+ partition name.</param>
		<param name=" appname">The COM+ application name.</param>
		<exception cref="System.Security.SecurityException"><para>A caller in the call chain does not have permission to access unmanaged code.</para></exception>
		<exception cref="System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name.</exception>
		<remarks>
			<para>See <see cref="System.EnterpriseServices.Internal.ComManagedImportUtil.InstallAssembly"/> for
   more information on the implementation of this method.</para>
		</remarks>
	</doc>
	<doc for="ComManagedImportUtil.InstallAssembly">
		<summary>
			<para>Installs an assembly into a COM+ application.</para>
		</summary>
		<param name="asmpath">The path for the assembly.</param>
		<param name=" parname">The COM+ partition name.</param>
		<param name=" appname">The COM+ application name.</param>
		<exception cref="System.Security.SecurityException"><para>A caller in the call chain does not have permission to access unmanaged code.</para></exception>
		<exception cref="System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name.</exception>
		<remarks>
			<para><see cref="System.EnterpriseServices.Internal.ComManagedImportUtil.InstallAssembly"/> calls <see cref="System.EnterpriseServices.RegistrationHelper.InstallAssembly" qualify="true"/> which performs the 
   following steps: registration of the
   assembly, generation of a type library, registration of the type library,
   installation of the type library under the specified application, and
   configuration of the components contained in the type library. </para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.RegistryPermission">for the ability to access the registry. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
	</doc>
	<doc for="IComManagedImportUtil.GetComponentInfo">
		<summary>
			<para>Gets the component information from the assembly.</para>
		</summary>
		<param name="assemblyPath">The path to the assembly.</param>
		<param name=" numComponents">When this method returns, contains the number of components in the assembly.</param>
		<param name=" componentInfo">When this method returns, contains the information about the components.</param>
		<exception cref="System.ArgumentException"><para><paramref name="assemblyPath"/> is an empty string (""), contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</para>
			<para>-or-</para>
			<para>The system could not retrieve the absolute path.</para></exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permissions.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyPath "/> is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException"><paramref name="assemblyPath"/> contains a colon (":").</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<remarks>
			<para>This method is called by the COM+ catalog to identify the class identifiers (CLSIDs) and ProgIDs of the
      components in a DLL before it is registered. </para>
		</remarks>
	</doc>
	<doc for="ComManagedImportUtil.GetComponentInfo">
		<summary>
			<para>Gets the component information from the assembly.</para>
		</summary>
		<param name="assemblyPath">The path to the assembly.</param>
		<param name=" numComponents">When this method returns, contains the number of components in the assembly.</param>
		<param name=" componentInfo">When this method returns, contains the information about the components.</param>
		<exception cref="System.ArgumentException"><para><paramref name="assemblyPath"/> is an empty string (""), string, contains only white space, or contains one or more invalid characters as defined by <see cref="System.IO.Path.InvalidPathChars"/>.</para>
			<para>-or-</para>
			<para>The system could not retrieve the absolute path.</para></exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permissions.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyPath "/> is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException"><paramref name="assemblyPath"/> contains a colon (":").</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<remarks>
			<para>This method is called by the COM+ catalog to identify the class identifiers (CLSIDs) and ProgIDs of the
      components in a DLL before it is registered.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
</docs>
