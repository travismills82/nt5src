<docs>
	<doc for="IComSoapIISVRoot.Create"><internalonly/></doc>
	<doc for="IComSoapIISVRoot.Delete"><internalonly/></doc>
	<doc for="IComSoapMetadata"><internalonly/></doc>
	<doc for="IComSoapMetadata.Generate"><internalonly/></doc>
	<doc for="ComSoapPublishError">
		<summary>
		Error handler for ComSoapPublish
		</summary><internalonly/>
	</doc>
	<doc for="ComSoapPublishError.Report"><internalonly/></doc>
	<doc for="ClientRemotingConfig">
		<summary>
		Creating Client XML format remoting configuration file
		</summary><internalonly/>
	</doc>
	<doc for="ClientRemotingConfig.Write"><internalonly/></doc>
	<doc for="ServerWebConfig">
		<summary>
		Producing/Editing Web.Config file
		</summary><internalonly/>
	</doc>
	<doc for="ServerWebConfig.AddElement"><internalonly/></doc>
	<doc for="HomePage">
		<summary>
		Default.htm home page
		</summary><internalonly/>
	</doc>
	<doc for="GenerateMetadata">
		<summary>
		Generates CLR Metadata for a COM+ component
		</summary><internalonly/>
	</doc>
	<doc for="GenerateMetadata.Generate"><internalonly/></doc>
	<doc for="GenerateMetadata.SearchPath"><internalonly/></doc>
	<doc for="IComSoapMetadata.GenerateSigned">
		<summary>
			<para>[To be supplied.]</para>
		</summary><internalonly/>
	</doc>
	<doc for="IServerWebConfig">
		<summary>
			<para>[To be supplied.]</para>
		</summary><internalonly/>
	</doc>
	<doc for="IServerWebConfig.AddElement">
		<summary>
			<para>[To be supplied.]</para>
		</summary><internalonly/>
	</doc>
	<doc for="IServerWebConfig.Create">
		<summary>
			<para>[To be supplied.]</para>
		</summary><internalonly/>
	</doc>
	<doc for="ServerWebConfig.Create">
		<summary>
			<para>[To be supplied.]</para>
		</summary><internalonly/>
	</doc>
	<doc for="IISVirtualRoot.Create">
		<summary>
			<para>[To be supplied.]</para>
		</summary><internalonly/>
	</doc>
	<doc for="IISVirtualRoot.Delete">
		<summary>
			<para>[To be supplied.]</para>
		</summary><internalonly/>
	</doc>
	<doc for="Publish.GenerateSigned">
		<summary>
			<para>[To be supplied.]</para>
		</summary><internalonly/>
	</doc>
	<doc for="Publish.GenerateMetaData">
		<summary>
			<para>[To be supplied.]</para>
		</summary><internalonly/>
	</doc>
	<doc for="IComSoapIISVRoot">
		<summary>
			<para>Interface definition for creating and deleting IIS 6.0 Virtual Roots.</para>
		</summary><internalonly/>
	</doc>
	<doc for="IISVirtualRoot">
		<summary>
			<para>Creates and deletes IIS 6.0 virtual roots.</para>
		</summary><internalonly/>
	</doc>
	<doc for="Publish.GetClientPhysicalPath">
		<summary>
			<para> Returns the path for 
      the directory for storing client configuration files.</para>
		</summary>
		<param name="CreateDir"><see langword="true"/> to create the directory; <see langword="false"/> to return the path but not create the directory.</param>
		<returns>
			<para>The path for the directory to contain the configuration files.</para>
		</returns>
		<exception cref="System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
		<remarks>
			<para>Creates the directories "\com\SOAPAssembly\" under the system directory.</para>
		</remarks>
	</doc>
	<doc for="Publish.ParseUrl">
		<summary>
			<para> Parses a URL and returns the base URL and virtual root
      portions.</para>
		</summary>
		<param name=" FullUrl">The complete URL address for the virtual root.</param>
		<param name=" BaseUrl">When this method returns, contains the base URL address.</param>
		<param name=" VirtualRoot">When this method returns, contains the name of the virtual root.</param>
		<exception cref="System.ArgumentNullException"><paramref name="FullUrl"/> is <see langword="null"/>.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error is encountered when resolving the local host name.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have permission to access DNS information.</exception>
		<exception cref="System.UriFormatException"><para><paramref name="FullUrl "/> is empty. </para>
			<para>-or- </para>
			<para>The scheme specified in <paramref name="FullUrl"/> is invalid. </para>
			<para>-or- </para>
			<para><paramref name="Fullurl "/> contains too many slashes. </para>
			<para>-or- </para>
			<para>The password specified in <paramref name="FullUrl"/> is invalid. </para>
			<para>-or- </para>
			<para>The host name specified in <paramref name="FullUrl"/> is invalid. </para>
			<para>-or- </para>
			<para>The file name specified in <paramref name="FullUrl"/> is invalid. </para></exception>
	</doc>
	<doc for="IComSoapPublisher">
		<summary>
   Publishes COM interfaces for SOAP-enabled COM+
   applications.
</summary>
		<remarks>
			<para>The implementation of <see cref="System.EnterpriseServices.Internal.IComSoapPublisher"/> is <see cref="System.EnterpriseServices.Internal.Publish"/>. Please refer to
<see cref="System.EnterpriseServices.Internal.Publish"/> for implementation 
   specifics.</para>
		</remarks>
	</doc>
	<doc for="Publish">
		<summary>
			<para> Publishes COM interfaces for SOAP-enabled COM+ applications.</para>
		</summary>
	</doc>
	<doc for="IComSoapPublisher.CreateVirtualRoot">
		<summary>
			<para>Creates a SOAP-enabled COM+ application virtual root. </para>
		</summary>
		<param name="Operation">The operation to perform.</param>
		<param name=" FullUrl">The complete URL address for the virtual root.</param>
		<param name=" BaseUrl">When this method returns, contains the base URL address.</param>
		<param name=" VirtualRoot">When this method returns, contains the name of the virtual root.</param>
		<param name=" PhysicalPath">When this method returns, contains the file path for the virtual root.</param>
		<param name=" Error">When this method returns, contains an error message if a problem was encountered.</param>
		<exception cref="System.Security.SecurityException"><para>A caller in the call chain does not have permission to access unmanaged code.</para>
			<para>-or-</para>
			<para>The caller does not have permission to access DNS information.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="FullUrl"/> is <see langword="null"/>.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error is encountered when resolving the local host name.</exception>
		<exception cref="System.UriFormatException"><para><paramref name="FullUrl "/> is empty. </para>
			<para>-or- </para>
			<para>The scheme specified in <paramref name="FullUrl"/> is invalid. </para>
			<para>-or- </para>
			<para><paramref name="Fullurl "/> contains too many slashes. </para>
			<para>-or- </para>
			<para>The password specified in <paramref name="FullUrl"/> is invalid. </para>
			<para>-or- </para>
			<para>The host name specified in <paramref name="FullUrl"/> is invalid. </para>
			<para>-or- </para>
			<para>The file name specified in <paramref name="FullUrl"/> is invalid. </para></exception>
		<remarks>
			<para>It is recommended that <see cref="System.EnterpriseServices.Internal.ISoapServerVRoot.CreateVirtualRootEx"/> be 
   used in
   lieu of <see cref="System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot"/>. </para>
		</remarks>
	</doc>
	<doc for="IComSoapPublisher.GacInstall">
		<summary>
			<para>Installs an assembly in the global assembly cache.</para>
		</summary>
		<param name="AssemblyPath">The file system path for the assembly.</param>
		<exception cref="System.Security.SecurityException"><para>A caller in the call chain does not have permission to access unmanaged code.</para></exception>
	</doc>
	<doc for="IComSoapPublisher.GacRemove">
		<summary>
			<para>Removes an assembly from the global assembly cache.</para>
		</summary>
		<param name="AssemblyPath">The file system path for the assembly.</param>
		<exception cref="System.ArgumentNullException"><paramref name="AssemblyPath"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="AssemblyPath"/> is empty.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="AssemblyPath"/> is not found.</exception>
		<exception cref="System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="AssemblyPath"/> is not a valid assembly.</exception>
	</doc>
	<doc for="Publish.GacInstall">
		<summary>
			<para>Installs an assembly in the global assembly cache.</para>
		</summary>
		<param name="AssemblyPath">The file system path for the assembly.</param>
		<exception cref="System.Security.SecurityException"><para>A caller in the call chain does not have permission to access unmanaged code.</para></exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="Publish.GacRemove">
		<summary>
			<para>Removes an assembly from the global assembly cache.</para>
		</summary>
		<param name="AssemblyPath">The file system path for the assembly.</param>
		<exception cref="System.Security.SecurityException"><para>A caller in the call chain does not have permission to access unmanaged code.</para>
			<para>-or-</para>
			<para>The caller does not have path discovery permission.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="AssemblyPath"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="AssemblyPath"/> is empty.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="AssemblyPath"/> is not found.</exception>
		<exception cref="System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="AssemblyPath"/> is not a valid assembly.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="IComSoapPublisher.GetAssemblyNameForCache">
		<summary>
			<para> Returns the full path for a strong-named signed
      generated assembly in the SoapCache directory.</para>
		</summary>
		<param name="TypeLibPath">The path for the file containing the typelib.</param>
		<param name=" CachePath">When this method returns, contains the full path of the proxy assembly in the SoapCache directory. </param>
		<exception cref="System.ArgumentNullException"><paramref name=" TypeLibPath"/> is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters.</exception>
		<exception cref="System.UnauthorizedAccessException">Access to <paramref name="TypeLibPath"/> is denied.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.NotSupportedException"><paramref name="TypeLibPath"/> contains a colon (:) in the middle of the string.</exception>
		<remarks>
			<para>For an unmanaged COM+ component to be published through .NET remoting as a SOAP endpoint, a
      proxy needs to be generated to make the unmanaged components available to the
      .NET Framework. This is done by programmatically performing the same steps as
      does Type Library Importer (Tlbimp.exe), the .NET Framework SDK tool that is used to convert
      unmanaged COM+ type libraries to proxy metadata assemblies. For client
      activation over SOAP to succeed, however, client and server machines must share
      the same strong-named signed metadata proxies. For this reason, when a managed
      proxy assembly is generated for an unmanaged COM+ component, a strong name key
      is also generated and used to sign the proxy assembly. </para>
		</remarks>
	</doc>
	<doc for="Publish.GetAssemblyNameForCache">
		<summary>
			<para>Returns the full path for a strong-named signed generated assembly in the 
      SoapCache directory.</para>
		</summary>
		<param name="TypeLibPath">The path for the file containing the typelib.</param>
		<param name=" CachePath">When this method returns, contains the name of the SoapCache directory. </param>
		<exception cref="System.ArgumentNullException"><paramref name=" TypeLibPath"/> is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<exception cref="System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters.</exception>
		<exception cref="System.UnauthorizedAccessException">Access to <paramref name="TypeLibPath"/> is denied.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.NotSupportedException"><paramref name="TypeLibPath"/> contains a colon (:) in the middle of the string.</exception>
		<remarks>
			<para>For an unmanaged COM+ component to be published through .NET remoting as a SOAP endpoint, a
      proxy needs to be generated to make the unmanaged components available to the
      .NET Framework. This is done by programmatically performing the same steps as
      does Type Library Importer (Tlbimp.exe), the .NET Framework SDK tool that is used to convert
      unmanaged COM+ type libraries to proxy metadata assemblies. For client
      activation over SOAP to succeed, however, client and server machines must share
      the same strong-named signed metadata proxies. For this reason, when a managed
      proxy assembly is generated for an unmanaged COM+ component, a strong name key
      is also generated and used to sign the proxy assembly. </para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
	</doc>
	<doc for="IComSoapPublisher.GetTypeNameFromProgId">
		<summary>
			<para> Reflects over an assembly and returns the type name that
      matches the ProgID.</para>
		</summary>
		<param name="AssemblyPath">The file system path for the assembly.</param>
		<param name=" ProgId">The programmatic identifier of the class.</param>
		<returns>
			<para>The type name that matches the ProgID.</para>
		</returns>
		<exception cref="System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.</exception>
	</doc>
	<doc for="Publish.GetTypeNameFromProgId">
		<summary>
			<para> Reflects over an assembly and returns the type name that
      matches the ProgID.</para>
		</summary>
		<param name="AssemblyPath">The file system path for the assembly.</param>
		<param name=" ProgId">The programmatic identifier of the class.</param>
		<returns>
			<para>The type name that matches the ProgID.</para>
		</returns>
		<exception cref="System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="IComSoapPublisher.ProcessClientTlb">
		<summary>
			<para> Processes a client type library, creating a configuration file on the
      client.</para>
		</summary>
		<param name="ProgId">The programmatic identifier of the class.</param>
		<param name=" SrcTlbPath">The path for the file containing the typelib.</param>
		<param name=" PhysicalPath">The Web application directory.</param>
		<param name=" VRoot">The name of the virtual root.</param>
		<param name=" BaseUrl">The base URL that contains the virtual root.</param>
		<param name=" Mode">The activation mode.</param>
		<param name=" Transport">The transport protocol (not used in the implementation).</param>
		<param name=" AssemblyName">When this method returns, contains the display name of the assembly.</param>
		<param name=" TypeName">When this method returns, contains the fully-qualified type name of the assembly.</param>
		<param name=" Error">When this method returns, contains an error message if a problem was encountered.</param>
		<exception cref="System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.</exception>
		<remarks>
			<para>This method is used on a client proxy import to generate a remoting configuration file. </para>
			<para>In the implementation, if the <paramref name="Mode"/> parameter is either 
   "<see langword="wellknownobject"/>" or an empty string (""),
   a well-known object is assumed; otherwise, client activation is
   assumed.</para>
			<note type="note">
   It is
   recommended that <see cref="System.EnterpriseServices.Internal.ISoapClientImport.ProcessClientTlbEx"/> be used instead of <see cref="System.EnterpriseServices.Internal.IComSoapPublisher.ProcessClientTlb"/>.
</note>
		</remarks>
	</doc>
	<doc for="IComSoapPublisher.ProcessServerTlb">
		<summary>
			<para> Processes a server type library, either adding or deleting component
      entries to the Web.config and Default.disco files. Generates a proxy if necessary.</para>
		</summary>
		<param name="ProgId">The programmatic identifier of the class.</param>
		<param name=" SrcTlbPath">The path for the file containing the type library.</param>
		<param name=" PhysicalPath">The Web application directory.</param>
		<param name=" Operation">The operation to perform.</param>
		<param name=" AssemblyName">When this method returns, contains the display name of the assembly.</param>
		<param name=" TypeName">When this method returns, contains the fully-qualified type name of the assembly.</param>
		<param name=" Error">When this method returns, contains an error message if a problem was encountered.</param>
		<exception cref="System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.</exception>
		<exception cref="System.EnterpriseServices.ServicedComponentException">The <paramref name="SrcTlbPath"/> parameter referenced scrobj.dll, SOAP publication of script components is not supported.</exception>
		<remarks>
			<para>Generates web.config and default.disco file entries for COM+ components.
      Generates a proxy if necessary. </para>
			<note type="note">
      It is recommended that <see cref="System.EnterpriseServices.Internal.ISoapServerTlb.AddServerTlb"/> and <see cref="System.EnterpriseServices.Internal.ISoapServerTlb.DeleteServerTlb"/> be used instead of <see cref="System.EnterpriseServices.Internal.IComSoapPublisher.ProcessServerTlb"/> .
      
   </note>
		</remarks>
	</doc>
	<doc for="Publish.ProcessServerTlb">
		<summary>
			<para>Processes a server type library, either adding or
      deleting component entries to the Web.config and Default.disco files. Generates a proxy if necessary.</para>
		</summary>
		<param name="ProgId">The programmatic identifier of the class.</param>
		<param name=" SrcTlbPath">The path for the file containing the type library.</param>
		<param name=" PhysicalPath">The Web application directory.</param>
		<param name=" Operation">The operation to perform.</param>
		<param name=" strAssemblyName">When this method returns, contains the display name of the assembly.</param>
		<param name=" TypeName">When this method returns, contains the fully-qualified type name of the assembly.</param>
		<param name=" Error">When this method returns, contains an error message if a problem was encountered.</param>
		<exception cref="System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.</exception>
		<exception cref="System.EnterpriseServices.ServicedComponentException">The <paramref name="SrcTlbPath"/> parameter referenced scrobj.dll, SOAP publication of script components is not supported.</exception>
		<remarks>
			<para><see cref="System.EnterpriseServices.Internal.Publish.ProcessServerTlb"/> adds an entry to the
   discovery file and the web.config file for the components in the typelib, and
   either generates or copies a proxy to the bin directory for unmanaged
   components. If <paramref name="Operation"/> = "<see langword="delete"/> " then the component entries
   are removed from the web.config and default.disco files.</para>
			<note type="note">
   It is recommended that <see cref="System.EnterpriseServices.Internal.SoapServerTlb.AddServerTlb"/> and
<see cref="System.EnterpriseServices.Internal.SoapServerTlb.DeleteServerTlb"/> be used instead of 
<see cref="System.EnterpriseServices.Internal.Publish.ProcessServerTlb"/>. 
</note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="IComSoapPublisher.RegisterAssembly">
		<summary>
			<para>Registers an assembly for COM interop.</para>
		</summary>
		<param name="AssemblyPath">The file system path for the assembly.</param>
		<exception cref="System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name.</exception>
		<exception cref="System.Security.SecurityException"><para>A caller in the call chain does not have permission to access unmanaged code.</para>
			<para>-or-</para>
			<para>A codebase that does not start with "file://" was specified without the required <see cref="System.Net.WebPermission"/> .</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="AssemblyPath"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="AssemblyPath "/> is not found, or a filename extension is not specified.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="AssemblyPath"/> is not a valid assembly. </exception>
		<exception cref="System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters.</exception>
		<exception cref="System.InvalidOperationException"><para>A method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> is not <see langword="static"/> .</para>
			<para>-or-</para>
			<para>There is more than one method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> at a given level of the hierarchy.</para>
			<para>-or-</para>
			<para>The signature of the method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> is not valid.</para></exception>
		<remarks>
			<para>The implementation of <see cref="System.EnterpriseServices.Internal.IComSoapPublisher.RegisterAssembly"/> 
uses the Assembly Registration tool (Regasm.exe) to register the
creatable classes in the assembly. For more information, see <see topic="cpgrfassemblyregistrationtoolregasmexe"/>.</para>
		</remarks>
	</doc>
	<doc for="Publish.RegisterAssembly">
		<summary>
			<para>Registers an assembly for COM interop.</para>
		</summary>
		<param name="AssemblyPath">The file system path for the assembly.</param>
		<exception cref="System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name.</exception>
		<exception cref="System.Security.SecurityException"><para>A caller in the call chain does not have permission to access unmanaged code.</para>
			<para>-or-</para>
			<para>A codebase that does not start with "file://" was specified without the required <see cref="System.Net.WebPermission"/>.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="AssemblyPath"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="AssemblyPath "/> is not found, or a filename extension is not specified.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="AssemblyPath"/> is not a valid assembly. </exception>
		<exception cref="System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters.</exception>
		<exception cref="System.InvalidOperationException"><para>A method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> is not <see langword="static"/> .</para>
			<para>-or-</para>
			<para>There is more than one method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> at a given level of the hierarchy.</para>
			<para>-or-</para>
			<para>The signature of the method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> is not valid.</para></exception>
		<remarks>
			<para><see cref="System.EnterpriseServices.Internal.Publish.RegisterAssembly"/> uses the Assembly 
   Registration tool (Regasm.exe) to register the
   creatable classes in the assembly. For more information, see <see topic="cpgrfassemblyregistrationtoolregasmexe"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.RegistryPermission">for the ability to access the registry. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for determining the current directory. Associated enumeration: <see cref="System.Security.Permissions.EnvironmentPermissionAccess.AllAccess" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading a URI that begins with "file://". Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<permission cref="System.Net.WebPermission">for reading a URI that does not begin with "file://".</permission>
	</doc>
	<doc for="IComSoapPublisher.UnRegisterAssembly">
		<summary>
			<para>Unregisters a COM interop assembly.</para>
		</summary>
		<param name="AssemblyPath">The file system path for the assembly.</param>
		<exception cref="System.Security.SecurityException"><para>A caller in the call chain does not have permission to access unmanaged code.</para>
			<para>-or-</para>
			<para>A codebase that does not start with "file://" was specified without the required <see cref="System.Net.WebPermission"/>.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="AssemblyPath"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="AssemblyPath "/> is not found, or a filename extension is not specified.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="AssemblyPath"/> is not a valid assembly. </exception>
		<exception cref="System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters.</exception>
		<exception cref="System.InvalidOperationException"><para>A method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> is not <see langword="static"/> .</para>
			<para>-or-</para>
			<para>There is more than one method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> at a given level of the hierarchy.</para>
			<para>-or-</para>
			<para>The signature of the method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> is not valid.</para></exception>
		<remarks>
			<para>The implementation of <see cref="System.EnterpriseServices.Internal.IComSoapPublisher.UnRegisterAssembly"/> uses Regasm.exe to unregister the creatable classes in
   the assembly. For more information, see <see topic="cpgrfassemblyregistrationtoolregasmexe"/>.</para>
		</remarks>
	</doc>
	<doc for="Publish.UnRegisterAssembly">
		<summary>
			<para>Unregisters a COM interop assembly.</para>
		</summary>
		<param name="AssemblyPath">The file system path for the assembly.</param>
		<exception cref="System.Security.SecurityException"><para>A caller in the call chain does not have permission to access unmanaged code.</para>
			<para>-or-</para>
			<para>A codebase that does not start with "file://" was specified without the required <see cref="System.Net.WebPermission"/>.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="AssemblyPath"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="AssemblyPath "/> is not found, or a filename extension is not specified.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="AssemblyPath"/> is not a valid assembly. </exception>
		<exception cref="System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters.</exception>
		<exception cref="System.InvalidOperationException"><para>A method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> is not <see langword="static"/> .</para>
			<para>-or-</para>
			<para>There is more than one method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> at a given level of the hierarchy.</para>
			<para>-or-</para>
			<para>The signature of the method marked with <see cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/> is not valid.</para></exception>
		<remarks>
			<para><see cref="System.EnterpriseServices.Internal.Publish.UnRegisterAssembly"/> uses Regasm.exe to unregister the creatable classes in
   the assembly. For more information, see <see topic="cpgrfassemblyregistrationtoolregasmexe"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.RegistryPermission">for the ability to access the registry. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for determining the current directory. Associated enumeration: <see cref="System.Security.Permissions.EnvironmentPermissionAccess.AllAccess" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading a URI that begins with "file://". Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/></permission>
		<permission cref="System.Net.WebPermission">for reading a URI that does not begin with "file://".</permission>
	</doc>
	<doc for="IComSoapPublisher.DeleteVirtualRoot">
		<summary>
			<para> Deletes
      a SOAP-enabled COM+
      application virtual root. Not fully implemented, see Remarks below. </para>
		</summary>
		<param name="RootWebServer">The root web server.</param>
		<param name=" FullUrl">The complete URL address for the virtual root.</param>
		<param name=" Error">When this method returns, contains an error message if a problem was encountered.</param>
		<exception cref="System.Security.SecurityException"><para>A caller in the call chain does not have permission to access unmanaged code.</para></exception>
		<remarks>
			<para> The functionality for <see cref="System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot"/> is not yet
   available.</para>
			<note type="caution">
   The method currently returns without an error, but the virtual root is not
   deleted.
</note>
			<para> When the functionality becomes
   available, the recommended method will be <see cref="System.EnterpriseServices.Internal.SoapServerVRoot.DeleteVirtualRootEx"/>.</para>
		</remarks>
	</doc>
	<doc for="Publish.CreateVirtualRoot">
		<summary>
			<para>Creates a SOAP-enabled COM+ application virtual root. </para>
		</summary>
		<param name="Operation">The operation to perform.</param>
		<param name=" FullUrl">The complete URL address for the virtual root.</param>
		<param name=" BaseUrl">When this method returns, contains the base URL address.</param>
		<param name=" VirtualRoot">When this method returns, contains the name of the virtual root.</param>
		<param name=" PhysicalPath">When this method returns, contains the file path for the virtual root.</param>
		<param name=" Error">When this method returns, contains an error message if a problem was encountered.</param>
		<exception cref="System.Security.SecurityException"><para>A caller in the call chain does not have permission to access unmanaged code.</para>
			<para>-or-</para>
			<para>The caller does not have permission to access DNS information.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="FullUrl"/> is <see langword="null"/>.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error is encountered when resolving the local host name.</exception>
		<exception cref="System.UriFormatException"><para><paramref name="FullUrl "/> is empty. </para>
			<para>-or- </para>
			<para>The scheme specified in <paramref name="FullUrl"/> is invalid. </para>
			<para>-or- </para>
			<para><paramref name="Fullurl "/> contains too many slashes. </para>
			<para>-or- </para>
			<para>The password specified in <paramref name="FullUrl"/> is invalid. </para>
			<para>-or- </para>
			<para>The host name specified in <paramref name="FullUrl"/> is invalid. </para>
			<para>-or- </para>
			<para>The file name specified in <paramref name="FullUrl"/> is invalid. </para></exception>
		<remarks>
			<para>It is recommended that <see cref="System.EnterpriseServices.Internal.SoapServerVRoot.CreateVirtualRootEx"/> 
be used
instead of <see cref="System.EnterpriseServices.Internal.Publish.CreateVirtualRoot"/>. </para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" qualify="true"/></permission>
	</doc>
	<doc for="Publish.DeleteVirtualRoot">
		<summary>
			<para> Deletes a SOAP-enabled
      COM+ application virtual root. Not fully implemented, see Remarks below.</para>
		</summary>
		<param name="RootWebServer">The root web server.</param>
		<param name=" FullUrl">The complete Url address for the virtual root.</param>
		<param name=" Error">When this method returns, contains an error message if a problem was encountered.</param>
		<exception cref="System.Security.SecurityException"><para>A caller in the call chain does not have permission to access unmanaged code.</para></exception>
		<remarks>
			<para>The functionality for <see cref="System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot"/> is
   not yet available.</para>
			<note type="caution">
   The method currently returns
   without an error, but the virtual root is not deleted.
</note>
			<para>When the functionality becomes available, the recommended method will be
<see cref="System.EnterpriseServices.Internal.SoapServerVRoot.DeleteVirtualRootEx"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="IComSoapPublisher.CreateMailBox">
		<summary>
			<para>Creates a SOAP-enabled COM+ application mailbox at a specified URL. Not fully implemented.</para>
		</summary>
		<param name="RootMailServer">The URL for the root mail server.</param>
		<param name=" MailBox">The mailbox to create.</param>
		<param name=" SmtpName">When this method returns, contains the name of the SMTP server containing the mailbox.</param>
		<param name=" Domain">When this method returns, contains the domain of the SMTP server.</param>
		<param name=" PhysicalPath">When this method returns, contains the file system path for the mailbox.</param>
		<param name=" Error">When this method returns, contains an error message if a problem was encountered.</param>
		<exception cref="System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.</exception>
		<remarks>
			<para>Not fully implemented, does not currently create a mailbox. Returns the error message "COM+ SOAP services SMTP
      publication is not supported."</para>
		</remarks>
	</doc>
	<doc for="IComSoapPublisher.DeleteMailBox">
		<summary>
			<para>Deletes a SOAP-enabled COM+ application mailbox at a specified URL. Not fully implemented.</para>
		</summary>
		<param name="RootMailServer">The URL for the root mail server.</param>
		<param name=" MailBox">The mailbox to delete.</param>
		<param name=" Error">When this method returns, contains an error message if a problem was encountered.</param>
		<exception cref="System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.</exception>
		<remarks>
			<para>Not fully implemented, does not delete the mailbox. Returns the error message "COM+ SOAP services SMTP
      publication is not supported."</para>
		</remarks>
	</doc>
	<doc for="Publish.CreateMailBox">
		<summary>
			<para>Creates a SOAP-enabled COM+ application mailbox at a specified URL. Not fully implemented.</para>
		</summary>
		<param name="RootMailServer">The URL for the root mail server.</param>
		<param name=" MailBox">The mailbox to create.</param>
		<param name=" SmtpName">When this method returns, contains the name of the SMTP server containing the mailbox.</param>
		<param name=" Domain">When this method returns, contains the domain of the SMTP server.</param>
		<param name=" PhysicalPath">When this method returns, contains the file system path for the mailbox.</param>
		<param name=" Error">When this method returns, contains an error message if a problem was encountered.</param>
		<exception cref="System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.</exception>
		<remarks>
			<para>Not fully implemented, does not create a mailbox. Returns the error message "COM+ SOAP services SMTP
      publication is not supported."</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="Publish.DeleteMailBox">
		<summary>
			<para>Deletes a SOAP-enabled COM+ application mailbox at a specified URL. Not fully implemented.</para>
		</summary>
		<param name="RootMailServer">The URL for the root mail server.</param>
		<param name=" MailBox">The mailbox to delete.</param>
		<param name=" Error">When this method returns, contains an error message if a problem was encountered.</param>
		<exception cref="System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.</exception>
		<remarks>
			<para>Not fully implemented, does not delete the mailbox. Returns the error message "COM+ SOAP services SMTP
      publication is not supported."</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="Publish.ProcessClientTlb">
		<summary>
			<para> Processes a client type library, creating a configuration file on the
      client.</para>
		</summary>
		<param name="ProgId">The programmatic identifier of the class.</param>
		<param name=" SrcTlbPath">The path for the file containing the typelib.</param>
		<param name=" PhysicalPath">The Web application directory.</param>
		<param name=" VRoot">The name of the virtual root.</param>
		<param name=" BaseUrl">The base URL that contains the virtual root.</param>
		<param name=" Mode">The activation mode.</param>
		<param name=" Transport">The transport protocol (not used).</param>
		<param name=" AssemblyName">When this method returns, contains the display name of the assembly.</param>
		<param name=" TypeName">When this method returns, contains the fully-qualified type name of the assembly.</param>
		<param name=" Error">When this method returns, contains an error message if a problem was encountered.</param>
		<exception cref="System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.</exception>
		<remarks>
			<para>This method is used on a client proxy import to generate a remoting configuration file. </para>
			<para> If the <paramref name="Mode"/> parameter
   is either "<see langword="wellknownobject"/> " or an empty string
   (""), a well-known object is assumed; otherwise, client activation is
   assumed.</para>
			<note type="note">
   It is
   recommended that <see cref="System.EnterpriseServices.Internal.SoapClientImport.ProcessClientTlbEx"/> be used instead of <see cref="System.EnterpriseServices.Internal.Publish.ProcessClientTlb"/>.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
</docs>
