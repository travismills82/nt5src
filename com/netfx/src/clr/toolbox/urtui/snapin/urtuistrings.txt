# This file is to be parsed by ResGen.exe to create the file
# urtuistrings.resources
    
[strings]
#
# Stuff used for the snapin "about" information
#
SnapinDescription=.NET Configuration Manager
SnapinProvider=Microsoft Corporation
SnapinVersion=1927
#
# Node names
#
RootNodeName=.NET Configuration

#
# Used by the Computer Node
#
Connect To Machine=Connect To Machine
Connect To A Remote Machine=Connect To A Remote Machine
.NET Configuration=.NET Configuration

#
# Used for Machine Properties
#
General=General
Default Runtime Version:=Default Runtime Version:
Runtime Installation Path:=Runtime Installation Path:
Browse...=Browse...
This machine uses code access security=This machine uses code access security
This machine uses the runtime verifier=This machine uses the runtime verifier

#
# Used by Shared Assemblies
#
Shared Assemblies=Shared Assemblies
Global Assembly Name=Global Assembly Name
Version=Version
Locale=Locale
Public Key Token=Public Key Token
unknown=unknown

#
# Used for .NET Framework Properties
#
Garbage Collector:=Garbage Collector:
Normal=Normal
Concurrent=Concurrent

#
# Used by the General Security Node
#
New Security Policy=New Security Policy
NewSecurityPolicyDescription=In order to create a new security policy level, you must choose the type of policy from the options below. Once the new policy has been created, it will replace the existing policy in the security tree for the type you've chosen below.\n\nThis does not mean that the existing policy has been changed or deleted, it just means that you are now editing the new policy file.
NewSecurityChoose=What type of security policy would you like to create:
NewSecurityFileChoose=Please select the file you wish to have the security information saved.

Open Security Policy=Open Security Policy
OpenSecurityPolicyDescription=Please choose which policy level to use for the policy you are about to open. If the existing policy level has been modified, you will be asked whether or not you wish to save the changes before opening another policy file.\n\nOpening another policy file does not mean that the existing policy will be changed or deleted, it just means that you are now editing a different policy file.
OpenSecurityChoose=What type of security policy would you like to open:
OpenSecurityFileChoose=Please select the security file that contains the information you want loaded

#
# Used by the SingleCodeGroupMemCondProp property page
#
MCPropDes=The membership condition determines whether or not a piece of code meets specific requirements to get the permissions associated with this code group.
AllDes=The All Code membership condition is true for all code that is evaluated against it. Any code that is evaluated against this code group will get the permissions in the permission set
AppDirDes=The Application Directory membership condition is true for all code that lives in the same directory or a child directory of the running application. Code that lives with the running application will get the permissions listed in the permission set.
ZoneDes=The Zone membership condition looks at a piece of code to see where it comes from. If the origin of the code matches the values below, the code will get the permissions associated with this code group.
InternetZoneDes=The Internet zone applies to all code that has been downloaded from the Internet.
HashDes=The Hash membership condition is true for all code whose hash matches the value below. Code whose hash matches will get the permissions listed in the permission set.
SiteDes=The Site membership condition is true for all code that comes from the site specified below. Code that comes from this site will get the permissions listed in the permission set.
SiteExample=The name represents the machine either on the local network or on the Internet.\n\nFor example:\n\n\tsome_machine\n\twww.microsoft.com
URLDes=The URL membership condition is true for all code that comes from the URL specified below. Need explanation about sub directories. Code that comes from this URL will get the permissions listed in the permission set.
URLExample=The URL can include a protocol. If the protocol is missing, the 'file://' protocol is used.\n\nFor example:\n\nhttp://www.microsoft.com\nftp://some_machine
SkipVDes=The Skip Verification membership condition is true for all code that presents skip verification evidence. This can be from ..... Code that presents the skip verification evidence will get the permissions listed in the permission set.
SNameDes=The Strong Name membership condition is true for all code whose Strong Name matches the one defined below. Code whose Strong Name matches will get the permissions listed in the permission set.
PublisherDes=The Publisher membership condition looks at a piece of code to see if it is digitally signed with a certificate that matches the one selected below. If so, the code will get the permissions associated with this code group.

#
# Used by the SingleCodeGroupPSetProp property page
#
PSetDesc=If the membership condition is met, the permissions in the selected permission set will be added to the permissions associated with the current policy level.

#
# Used by the new permission set wizard
#
NewPermSetDesc=Names and descriptions are important when sharing administrative roles with others. Assigning a name and good description will assist others when trying to understand policy. The Name field is required. 

#
# Used by the new code group wizard
#
NewCodeGroupDesc=Names and descriptions are important when sharing administration roles with others. Assigning a name and good description will assist others when trying to understand policy. The Name field is required.
AssignPSetDes=You can use an existing permission set already defined in this policy level or you can browse to a file that contains the permission set. If you do not already have a permission set that suits your needs, create a new permission set.
HowPermsApplyDes=By default, if code meets the membership condition for this code group, the permissions associated with this code group will be added into the set of permissions the piece of code is granted for this policy level. After the code has been evaluated against all policy levels, the set of permissions granted is determined by the intersection of the permissions from each of the policy levels.\n\nBelow are two options that can change this behavior.
ExclusiveDes=Checking the box below will instruct the security manager to exclusively use the permissions in this code group for this policy level. The permissions granted by other code groups in this policy level will be ignored.
FinalDes=Checking the box below will instruct the security manager to not evaluate policy levels below the level that contains this code group. An intersection of permissions will still occur over the policy levels that have already been evaluated before this policy level.

#
# Used by the Reflection Permissions Dialog/Property Page
#
MemberAccessPermDes=Member Access gives code the ability to do something probably pretty bad but I am not sure
TypePermDes=Type Information sounds much more reasonable. Code can reflect on types at runtime to see what they are made of.
ReflectionEmitDes=I wouldn't do this if I were you. You are going to let code build additional code. Who knows, it might even create a virus!

#
# Used by the Isolated Storage Permissions Dialog/Property Page
#
UsageAllowedDes=The usage type determines how code can share data in the isolated storage. For more information on the usage types, press F1.
DiskQuotaDes=The disk quota limits the amount of data code can store for the user running the code.

#
# Used by the DNS Permissions Dialog/Property Page
#
DNSPermHelp=Need security to provide some logical reason why we have the ability to give a permission and have its state be nothing. What does this mean to the user?

#
# Used by the first property page of the remoting node
#
RemWellKnownDes=The list below shows the well known objects that are associated with this remote application. To edit the URL for any type, click on the URL and type in the new value

#
# Used by the Exposed Types property page of the remoting node
#
RemExpTypeActDes=The list below shows the client activated objects that are exposed by this application. Each of the lifetimes are editable by clicking on the value.
RemExpTypeWellKnownDes=The list below shows the well known objects that are exposed by this application. The edit the URI for any type, click on the URL and type in the new value.

#
# Used by the Channels property page of the remoting node
#
RemChannelAttribDes=The list below contains the attributes associated with the selected channel. Click on the value to edit.

#
# Used by the Binding Policy Property Page of the Version Policy Node
#
BindingPolicyDes=This is where you can set binding policy for your assembly. The format of a version number is Major.Minor.Build.Revision. A minimum of Major.Minor is required.\n\nExamples:\n     1.2.3.4\n     1.2

#
# Used by the codebase property page of the version policy node
#
CodeBaseDes=This is where you can set Codebase information for your assembly. The format of a version number is Major.Minor.Build.Revision. A minimum of Major.Minor is required. URI's must contain the protocol information \n\nExamples:\n     1.2.3.4\n     http://www.microsoft.com


#
# Used by the Evaluate Assembly Wizard
#
ViewPermHelpDes=This function will display the permissions granted to the assembly based on the policy levels currently loaded into the policy editor. You can choose to view the permissions from a single level or all three levels below.
ViewCGHelpDes=This function will display the code groups that grant permissions to the assembly. You can choose from a single policy level below:

#
# Used by the Full Trust Wizard
#
FullTrustHelp=Giving an application Full Trust means that the application will be able to perform any action on your machine, including opening files on your hard drive and communicating with other computers over the Internet.\n\nBecause this change will allow the application to fully access your computer, make sure you only run this wizard on code that you can fully trust.
FullTrustDisclaimer=The settings made in this wizard will only affect the policy level selected above. You will need to run the wizard again in order to make these changes to more than one policy level.
FullTrustCertificateHelp=This gives full trust to any code that has this publisher's certificate. This could give other applications from this publisher more trust than you expected.
FullTrustStrongNameHelp=This gives full trust to any code that has this strong name. By checking Name and Version, you can limit other code whose name and version do not match.
GiveFullTrustDes=This option gives the application the same permissions granted to applications that live on your computer. Should probably have some additional warning 
GivePermSetDes=This option gives the application the permissions found in the selected permission set.
FullTrustFinishDes=The wizard is finished. Click finish to add a code group to the selected policy level to give this application or assembly the specified permissions.

#
# Used by the security Adjustment wizard
#
SecurityAdjustHomeUserDes=A home user is someone who does not have a network or that has a network and does not have an administrator that controls security policy. This wizard will adjust the machine policy and reset the user policy. 
SecurityAdjustCorpUserDes=A corporate user is someone who has a user account on a network. The network administrators control the security of the computer. Special consideration has to be taken when adjusting policy in this scenario. This wizard will adjust the user policy only. It will also look at the machine policy and copy certain pieces to the user policy.

#
# Used by the Create Deployment Package wizard
#
DeploymentPackageHelp=This wizard will create a deployment package that is suitable for Group Policy. It will allow you to deploy policy to any Windows 2000 client across your Windows 2000 based network.\n\nThe deployment package is a Windows Installer Package (MSI file) that can be dropped into the Group Policy tree. Since Group Policy natively understands MSI files, the policy will be installed during login.
DeploymentPackageDone=You are going to create this MSI file now. If you actually want it to do anything, make sure you drag the MSI file onto the Group Policy snapin located in MMC.

#
# Used by the Duplicate Permission Set Dialog
#
DupPermSetNameDialogDes=The permission set already contains a permission of this type. You can choose to replace the existing permission with the one you are importing, merge the two permissions or intersect the two permissions.\n\nHow would you like to handle the import?
