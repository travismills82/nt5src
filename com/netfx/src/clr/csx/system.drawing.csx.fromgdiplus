<doc>
  <assembly>
    <name>System.Drawing</name>
  </assembly>
  <members>

    <member name="T:System.Drawing.Drawing2D.AdjustableArrowCap">
      <summary>
        <para>Represents an adjustable arrow-shaped line cap. This class cannot be inherited.</para>
      </summary>
    </member>
ith
    <member name="M:System.Drawing.Drawing2D.AdjustableArrowCap.#ctor(System.Single,System.Single)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap"/> class with the specified width and height.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap"/> class with the specified width and height. The arrow end caps created with this constructor are always filled.</para>
      </summary>
      <param name="width">
        The width of the arrow.
      </param>
      <param name="height">
        The height of the arrow.
      </param>
      <example>
        <para> The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object.  The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap"/> object named <paramref name="myArrow"/>.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Pen"/> object named <paramref name="capPen, "/>and sets its <see langword="CustomStartCap"/> and <see langword="CustomStopCap"/> properties equal to <paramref name="myArrow"/>.</term>
          </item>
          <item>
            <term>Uses the <see cref="M:System.Drawing.Graphics.DrawLine"/> method to draw to screen a line capped by two arrows.</term>
          </item>
        </list>

        <code lang="VB">
Public Sub AdjArrowCap_Sing_Sing(ByVal e As PaintEventArgs)
    Dim myArrow As New AdjustableArrowCap(6, 6)
    Dim customArrow As CustomLineCap = myArrow
    Dim capPen As New Pen(Color.Black)
    capPen.CustomStartCap = myArrow
    capPen.CustomEndCap = myArrow
    e.Graphics.DrawLine(capPen, 50, 50, 200, 50)
End Sub
        </code>

        <code lang="C#">
public void AdjArrowCap_Sing_Sing(PaintEventArgs e)
{     
   AdjustableArrowCap myArrow = new AdjustableArrowCap(6, 6);
   Pen capPen = new Pen(Color.Black);
   capPen.CustomStartCap = myArrow;
   capPen.CustomEndCap = myArrow;
   e.Graphics.DrawLine(capPen, 50, 50, 200, 50);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.AdjustableArrowCap.#ctor(System.Single,System.Single,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap"/> class with the specified width, height, and fill property. Whether an arrow end cap is filled depends on the argument passed to the <paramref name="isFilled"/> parameter.</para>
      </summary>
      <param name="width">
        The width of the arrow.
      </param>
      <param name="height">
        The height of the arrow.
      </param>
      <param name="isFilled">
        <see langword="true"/> to fill the arrow cap; otherwise, <see langword="false"/>.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object.  The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap"/> object named <paramref name="myArrow"/>.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Pen"/> object named <paramref name="capPen, "/>and sets its <see langword="CustomStartCap"/> and <see langword="CustomStopCap"/> properties equal to <paramref name="myArrow"/>.</term>
          </item>
          <item>
            <term>Uses the <see cref="M:System.Drawing.Graphics.DrawLine"/> method to draw to screen a line capped by two arrows.</term>
          </item>
        </list>

        <code lang="VB">
Public Sub AdjArrowCap_Sing_Sing_Bool(ByVal e As PaintEventArgs)
    Dim myArrow As New AdjustableArrowCap(6, 6, False)
    Dim customArrow As CustomLineCap = myArrow
    Dim capPen As New Pen(Color.Black)
    capPen.CustomStartCap = myArrow
    capPen.CustomEndCap = myArrow
    e.Graphics.DrawLine(capPen, 50, 50, 200, 50)
End Sub
        </code>

        <code lang="C#">
public void AdjArrowCap_Sing_Sing_Bool(PaintEventArgs e)
{     
   AdjustableArrowCap myArrow = new AdjustableArrowCap(6, 6, false);
   Pen capPen = new Pen(Color.Black);
   capPen.CustomStartCap = myArrow;
   capPen.CustomEndCap = myArrow;
   e.Graphics.DrawLine(capPen, 50, 50, 200, 50);
}
        </code>
      </example>
    </member>

    <member name="P:System.Drawing.Drawing2D.AdjustableArrowCap.Filled">
      <summary>
        <para>Gets or sets whether the arrow cap is filled.</para>
      </summary>
      <value>
        <para>This property is <see langword="true"/> if the arrow cap is filled; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.AdjustableArrowCap.Height">
      <summary>
        <para>Gets or sets the height of the arrow cap.</para>
      </summary>
      <value>
        <para>The height of the arrow cap.</para>
      </value>
      <remarks>
        <para>The height of the arrow cap is scaled by the width of the <see cref="T:System.Drawing.Pen"/> object used to draw the line being capped. For example, if you are drawing a capped line with a pen that has a width of 5 pixels, and the <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap"/> object has a height of 3, then the actual arrow cap is drawn 15 pixels high.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.AdjustableArrowCap.MiddleInset">
      <summary>
        <para>Gets or sets the number of units between the outline of the arrow cap and the fill.</para>
      </summary>
      <value>
        <para>The number of units between the outline of the arrow cap and the fill of the arrow cap.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.AdjustableArrowCap.Width">
      <summary>
        <para>Gets or sets the width of the arrow cap.</para>
      </summary>
      <value>
        <para>The width, in units, of the arrow cap.</para>
      </value>
      <remarks>
        <para>The width of the arrow cap is scaled by the width of the <see cref="T:System.Drawing.Pen"/> object used to draw the line being capped. For example, if you are drawing a capped line with a pen that has a width of 5 pixels, and the <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap"/> object has a width of 3, then the actual arrow cap is drawn 15 pixels wide.</para>
      </remarks>
    </member>



    <member name="T:System.Drawing.Drawing2D.Blend">
      <summary>
        <para>Defines a blend pattern for a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object. This class cannot be inherited.</para>
      </summary>
      <remarks>
        <para>Gradients are commonly used to smoothly shade the interiors of shapes. A blend pattern is defined by two arrays (<see langword="Factors"/> and <see langword="Positions"/>) that each contain the same number of elements. Each element of the <see langword="Positions"/> array represents a proportion of the distance along the gradient line. Each element of the <see langword="Factors"/> array represents the proportion of the starting and ending colors in the gradient blend at the position along the gradient line represented by the corresponding element in the <see langword="Positions"/> array.</para>
        <para>For example, if corresponding elements of the <see langword="Positions"/> and <see langword="Factors"/> arrays are 0.2 and 0.3, respectively, for a linear gradient from blue to red along a 100-pixel line, the color 20 pixels along that line (20 percent of the distance) consists of 30 percent blue and 70 percent red.</para>
      </remarks>
    </member>



    <member name="M:System.Drawing.Drawing2D.Blend.#ctor">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Blend"/> class.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Blend"/> class.</para>
      </summary>
      <example>
        <para>The following example is intended to be used in a Windows Forms environment. It demonstrates how to use the <see cref="T:System.Drawing.Drawing2D.Blend"/> class in conjunction with the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> class to draw an ellipse to screen that has its colors blended. The ellipse is blue on the left, blends to red in the center, and blends back to blue on the right. This is accomplished through the settings in the <paramref name="myFactors"/> and <paramref name="myPositions"/> arrays used in the <see cref="T:System.Drawing.Drawing2D.Blend"/> <see langword="Factors"/> and <see langword="Positions"/> properties. Note that the <see cref="T:System.Drawing.Drawing2D.Blend"/> property of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object named <paramref name="lgBrush2"/> must be made equal to the <see cref="T:System.Drawing.Drawing2D.Blend"/> object <paramref name="myBlend"/>.</para>
        <code lang="VB">Public Sub BlendConstExample(e As PaintEventArgs)
&apos; Draw ellipse using Blend.
Dim startPoint2 As New Point(20, 110)
Dim endPoint2 As New Point(140, 110)
Dim myFactors As Single() =  {0.2F, 0.4F, 0.8F, 0.8F, 0.4F, 0.2F}
Dim myPositions As Single() =  {0F, 0.2F, 0.4F, 0.6F, 0.8F, 1F}
Dim myBlend As New Blend()
myBlend.Factors = myFactors
myBlend.Positions = myPositions
Dim lgBrush2 As New LinearGradientBrush(startPoint2, endPoint2, _
Color.Blue, Color.Red)
lgBrush2.Blend = myBlend
Dim ellipseRect2 As New Rectangle(20, 110, 120, 80)
e.Graphics.FillEllipse(lgBrush2, ellipseRect2)
End Sub
        </code>
        <code lang="C#">public void BlendConstExample(PaintEventArgs e)
{
//Draw ellipse using Blend.
Point startPoint2 = new Point(20, 110);
Point endPoint2 = new Point(140, 110);
float[] myFactors = {.2f,.4f,.8f,.8f,.4f,.2f};
float[] myPositions = {0.0f,.2f,.4f,.6f,.8f,1.0f};
Blend myBlend = new Blend();
myBlend.Factors = myFactors;
myBlend.Positions = myPositions;
LinearGradientBrush lgBrush2 = new LinearGradientBrush(
startPoint2,
endPoint2,
Color.Blue,
Color.Red);
lgBrush2.Blend = myBlend;
Rectangle ellipseRect2 = new Rectangle(20, 110, 120, 80);
e.Graphics.FillEllipse(lgBrush2, ellipseRect2);
// End example.
}
        </code>
      </example>
    </member>




    <member name="M:System.Drawing.Drawing2D.Blend.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Blend"/> class with the specified number of factors and positions.</para>
      </summary>
      <param name="count">
        The number of elements in the <see langword="Factors"/> and <see langword="Positions"/> arrays.
      </param>
      <example>
        <para>For an example, see <see cref="M:System.Drawing.Drawing2D.Blend.#ctor"/>.</para>
      </example>
    </member>





    <member name="P:System.Drawing.Drawing2D.Blend.Factors">
      <summary>
        <para>Gets or sets an array of blend factors for the gradient.</para>
      </summary>
      <value>
        <para>An array of blend factors that specify the percentages of the starting color and the ending color to be used at the corresponding position.</para>
      </value>
      <remarks>
        <para>Typically, the elements of this array are a value from 0.0f through 1.0f. These elements specify the percentages of the starting color and the ending color to use at the corresponding blend position. For example, a value of 0.2 indicates that at the specified position, the blended color is composed of 20 percent of the starting gradient color and 80 percent of the ending gradient color.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.Blend.Positions">
      <summary>
        <para>Gets or sets an array of blend positions for the gradient.</para>
      </summary>
      <value>
        <para>An array of blend positions that specify the percentages of distance along the gradient line.</para>
      </value>
      <remarks>
        <para>The elements of this array specify percentages of distance along the gradient line. For example, an element value of 0.2f specifies that this point is 20 percent of the total distance from the starting point. The elements in this array are represented by float values between 0.0f and 1.0f. The first element of the array must be 0.0f, and the last element must be 1.0f.</para>
      </remarks>
    </member>

    <member name="T:System.Drawing.Drawing2D.ColorBlend">
      <summary>
        <para>Defines arrays of colors and positions used for interpolating color blending in a multicolor gradient. This class cannot be inherited.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Drawing2D.ColorBlend.#ctor">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> class.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> class.</para>
      </summary>
      <example>
        <para>The following example is intended to be used in a Windows Forms environment. It demonstrates how to use the <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> class in conjunction with the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> class to draw an ellipse to screen that has its colors blended. The ellipse is green on the left, blends to yellow, then to blue, and finally to red on the right. This is accomplished through the settings in the <paramref name="myColors"/> and <paramref name="myPositions"/> arrays used in the <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> <see langword="Colors"/> and <see langword="Positions"/> properties. Note that the <see langword="InterpolationColors"/> property of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object named <paramref name="lgBrush2"/> must be made equal to the <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object <paramref name="myBlend"/>.</para>
        <code lang="VB">Public Sub ColorBlendExample(e As PaintEventArgs)
&apos; Begin example.
&apos; Draw ellipse using ColorBlend.
Dim startPoint2 As New Point(20, 110)
Dim endPoint2 As New Point(140, 110)
Dim myColors As Color() =  {Color.Green, Color.Yellow, _
Color.Yellow, Color.Blue, Color.Red, Color.Red}
Dim myPositions As Single() =  {0F, 0.2F, 0.4F, 0.6F, 0.8F, 1F}
Dim myBlend As New ColorBlend()
myBlend.Colors = myColors
myBlend.Positions = myPositions
Dim lgBrush2 As New LinearGradientBrush(startPoint2, endPoint2, _
Color.Green, Color.Red)
lgBrush2.InterpolationColors = myBlend
Dim ellipseRect2 As New Rectangle(20, 110, 120, 80)
e.Graphics.FillEllipse(lgBrush2, ellipseRect2)
End Sub
        </code>
        <code lang="C#">protected override void OnPaint(PaintEventArgs e)
{
//Draw ellipse using ColorBlend.
Point startPoint2 = new Point(20, 110);
Point endPoint2 = new Point(140, 110);
Color[] myColors = {Color.Green,
Color.Yellow,
Color.Yellow,
Color.Blue,
Color.Red
Color.Red};
float[] myPositions = {0.0f,.20f,.40f,.60f,.80f,1.0f};
ColorBlend myBlend = new ColorBlend();
myBlend.Colors = myColors;
myBlend.Positions = myPositions;
LinearGradientBrush lgBrush2 = new LinearGradientBrush(startPoint2,
endPoint2,
Color.Green,
Color.Red);
lgBrush2.InterpolationColors = myBlend;
Rectangle ellipseRect2 = new Rectangle(20, 110, 120, 80);
e.Graphics.FillEllipse(lgBrush2, ellipseRect2);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.ColorBlend.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> class with the specified number of colors and positions.</para>
      </summary>
      <param name="count">
        The number of colors and positions in this <see cref="T:System.Drawing.Drawing2D.ColorBlend"/>.
      </param>
      <example>
        <para>For an example see <see cref="M:System.Drawing.Drawing2D.ColorBlend.#ctor"/></para>
      </example>
    </member>

    <member name="P:System.Drawing.Drawing2D.ColorBlend.Colors">
      <summary>
        <para>Gets or sets an array of colors that represents the colors to use at corresponding positions along a gradient.</para>
      </summary>
      <value>
        <para>An array of <see cref="T:System.Drawing.Color"/> structures that represents the colors to use at corresponding positions along a gradient.</para>
      </value>
      <remarks>
        <para>This property is an array of <see cref="T:System.Drawing.Color"/> structures that represents the colors to use at corresponding positions along a gradient. Along with the <see langword="Positions"/> property, this property defines a multicolor gradient.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.ColorBlend.Positions">
      <summary>
        <para>Gets or sets the positions along a gradient line.</para>
      </summary>
      <value>
        <para>An array of values that specify percentages of distance along the gradient line.</para>
      </value>
      <remarks>
        <para>The elements of this array specify percentages of distance along the gradient line. For example, an element value of 0.2f specifies that this point is 20 percent of the total distance from the starting point. The elements in this array are represented by float values between 0.0f and 1.0f, and the first element of the array must be 0.0f and the last element must be 1.0f.</para>
        <para>Along with the <see langword="Colors"/> property, this property defines a multicolor gradient. </para>
      </remarks>
    </member>

    <member name="T:System.Drawing.Drawing2D.CustomLineCap">
      <summary>
        <para>Encapsulates a custom user-defined line cap.</para>
      </summary>
      <remarks>
        <para>Line caps are used at the beginnings and ends of lines or curves drawn by GDI+ <see cref="T:System.Drawing.Pen"/> objects. GDI+ supports several predefined cap styles, and also allows users to define their own cap styles. This class is used to create custom cap styles.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> class with the specified outline and fill.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> class with the specified outline and fill.</para>
      </summary>
      <param name="fillPath">
        A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object that defines the fill for the custom cap.
      </param>
      <param name="strokePath">
        A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object that defines the outline of the custom cap.
      </param>
      <remarks>
        <para><see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> uses a fill mode of &quot;winding&quot; regardless of the fill mode specified for the operation.</para>
        <para>The<paramref name=" fillPath"/> and <paramref name="strokePath"/> parameters cannot be used at the same time. One parameter must be passed a null value. If neither parameter is passed a null value, <paramref name="fillPath"/> will be ignored. </para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> class from the specified existing <see cref="T:System.Drawing.Drawing2D.LineCap"/> enumeration with the specified outline and fill.</para>
      </summary>
      <param name="fillPath">
        A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object that defines the fill for the custom cap.
      </param>
      <param name="strokePath">
        A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object that defines the outline of the custom cap.
      </param>
      <param name="baseCap">
        The LineCap from which to create the custom cap.
      </param>
      <remarks>
        <para><see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> uses a fill mode of &quot;winding&quot; regardless of the fill mode specified for the operation.</para>
        <para>The<paramref name=" fillPath"/> and <paramref name="strokePath"/> parameters cannot be used at the same time. One parameter must be passed a null value. If neither parameter is passed a null value, <paramref name="fillPath"/> will be ignored. </para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> class from the specified existing <see cref="T:System.Drawing.Drawing2D.LineCap"/> enumeration with the specified outline, fill, and inset.</para>
      </summary>
      <param name="fillPath">
        A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object that defines the fill for the custom cap.
      </param>
      <param name="strokePath">
        A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object that defines the outline of the custom cap.
      </param>
      <param name="baseCap">
        The LineCap from which to create the custom cap.
      </param>
      <param name="baseInset">
        The distance between the cap and the line.
      </param>
      <remarks>
        <para><see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> uses a fill mode of &quot;winding&quot; regardless of the fill mode specified for the operation.</para>
        <para>The<paramref name=" fillPath"/> and <paramref name="strokePath"/> parameters cannot be used at the same time. One parameter must be passed a null value. If neither parameter is passed a null value, <paramref name="fillPath"/> will be ignored. </para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.CustomLineCap.Clone">
      <summary>
        <para>Creates an exact copy of this <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/>.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> this method creates, cast as an object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a custom line cap by using the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> object, <paramref name="firstCap"/>,<paramref name=" "/>using the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object just created.</term>
          </item>
          <item>
            <term>Creates a clone of <paramref name="firstCap"/> by using <paramref name="firstCap&apos;s"/> <see langword="Clone"/> method.</term>
          </item>
          <item>
            <term>Sets up the <see langword="CustomStartCap"/> and <see langword="CustomEndCap"/> properties of the <see cref="T:System.Drawing.Pen"/> object, and uses that pen to draw a line and the custom caps to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub CloneExample(e As PaintEventArgs)
Dim points As Point() = New Point(- 5, - 5) New Point(0, 0) _
New Point(5, - 5)
Dim capPath As New GraphicsPath()
&apos; Create a Path and add two lines to it,
&apos; forming a custom line cap.
capPath.AddLines(points)
&apos; Create a CustomLineCap object.
Dim firstCap As New CustomLineCap(Nothing, capPath)
&apos; Create a copy of firstCap.
Dim secondCap As CustomLineCap = CType(firstCap.Clone(), _
CustomLineCap)
&apos; Create a Pen object.
Dim pen As New Pen(Color.Black, 3F)
&apos;Set up the line.
Dim point1 As New Point(20, 20)
Dim point2 As New Point(100, 100)
&apos; Set up the caps.
pen.CustomStartCap = firstCap
pen.CustomEndCap = secondCap
&apos; Draw the line and caps to the screen.
e.Graphics.DrawLine(pen, point1, point2)
End Sub
        </code>
        <code lang="C#">private void CloneExample(PaintEventArgs e)
{
// Create a Path and add two lines to it,
// forming a custom line cap.
Point[] points =
{
new Point(-5, -5),
new Point(0, 0),
new Point(5, -5)
};
GraphicsPath capPath = new GraphicsPath();
capPath.AddLines(points);
// Create a CustomLineCap object.
CustomLineCap firstCap = new CustomLineCap(null, capPath);
// Create a copy of firstCap.
CustomLineCap secondCap = (CustomLineCap)firstCap.Clone();
// Create a Pen object.
Pen pen = new Pen(Color.Black, 3.0f);
// Set up the line.
Point point1 = new Point(20, 20);
Point point2 = new Point(100, 100);
// Set up the caps.
pen.CustomStartCap = firstCap;
pen.CustomEndCap = secondCap;
// Draw the line and caps to the screen.
e.Graphics.DrawLine(pen, point1, point2);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.CustomLineCap.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)">
      <summary>
        <para>Gets the caps used to start and end lines that make up this custom cap.</para>
      </summary>
      <param name="startCap">
        The <see cref="T:System.Drawing.Drawing2D.LineCap"/> enumeration used at the beginning of a line within this cap.
      </param>
      <param name="endCap">
        The <see cref="T:System.Drawing.Drawing2D.LineCap"/> enumeration used at the end of a line within this cap.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a custom line cap, <paramref name="capPath"/> using a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</term>
          </item>
          <item>
            <term>Adds stroke caps (triangle and round) to <paramref name="capPath"/>.</term>
          </item>
          <item>
            <term>Retrieves the stroke caps using the <see langword="GetStrokeCaps"/> method.</term>
          </item>
          <item>
            <term>Sets up a pen using the <paramref name="startStrokeCap"/> and the <paramref name="endStrokeCap"/> parameters.</term>
          </item>
          <item>
            <term>Uses the pen to draw a line that uses the stroke caps.</term>
          </item>
        </list>
        <para>Notice that the line is pointed end at one end and round on the other.</para>
        <code lang="VB">Public Sub GetStrokeCapsExample(e As PaintEventArgs)
&apos; Create a Path and add two lines to it,
&apos; forming a custom line cap.
Dim points As Point() =  {New Point(- 2, - 2), New Point(0, 0), _
New Point(2, - 2)}
Dim capPath As New GraphicsPath()
capPath.AddLines(points)
&apos; Create a CustomLineCap object.
Dim custCap As New CustomLineCap(Nothing, capPath)
&apos; Set the start and end stroke caps for custCap.
custCap.SetStrokeCaps(LineCap.Triangle, LineCap.Round)
&apos; Retrieve the start and end stroke caps from custCap.
Dim startStrokeCap As New LineCap()
Dim endStrokeCap As New LineCap()
custCap.GetStrokeCaps(startStrokeCap, endStrokeCap)
&apos; Draw a new line that uses the stroke caps retrieved from custCap.
Dim strokeCapPen As New Pen(Color.Black, 15)
strokeCapPen.StartCap = startStrokeCap
strokeCapPen.EndCap = endStrokeCap
e.Graphics.DrawLine(strokeCapPen, New Point(100, 100), _
New Point(300, 100))
End Sub
        </code>
        <code lang="C#">private void GetStrokeCapsExample(PaintEventArgs e)
{
// Create a Path and add two lines to it,
// forming a custom line cap.
Point[] points =
{
new Point(-2, -2),
new Point(0, 0),
new Point(2, -2)
};
GraphicsPath capPath = new GraphicsPath();
capPath.AddLines(points);
// Create a CustomLineCap object.
CustomLineCap custCap = new CustomLineCap(null, capPath);
// Set the start and end stroke caps for custCap.
custCap.SetStrokeCaps(LineCap.Triangle, LineCap.Round);
// Retrieve the start and end stroke caps from custCap.
LineCap startStrokeCap = new LineCap();
LineCap endStrokeCap = new LineCap();
custCap.GetStrokeCaps(out startStrokeCap, out endStrokeCap);
// Draw a  new line that uses the stroke caps retrieved from
// custCap.
Pen strokeCapPen = new Pen(Color.Black, 15);
strokeCapPen.StartCap = startStrokeCap;
strokeCapPen.EndCap = endStrokeCap;
e.Graphics.DrawLine(strokeCapPen,
new Point(100, 100),
new Point(300, 100));
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)">
      <summary>
        <para>Sets the caps used to start and end lines that make up this custom cap.</para>
      </summary>
      <param name="startCap">
        The <see cref="T:System.Drawing.Drawing2D.LineCap"/> enumeration used at the beginning of a line within this cap.
      </param>
      <param name="endCap">
        The <see cref="T:System.Drawing.Drawing2D.LineCap"/> enumeration used at the end of a line within this cap.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a custom line cap, <paramref name="capPath"/> using a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</term>
          </item>
          <item>
            <term>Adds stroke caps (triangle and round) to <paramref name="capPath"/>, creating <paramref name="custCap"/>.</term>
          </item>
          <item>
            <term>Creates a pen that uses <paramref name="custCap"/> as the line caps for a new line.</term>
          </item>
        </list>
        <para>Notice that the line caps are arrows (as created in <paramref name="custCap"/>) and that each side of the arrows have stroke caps applied, triangle on one side and round on the other.</para>
        <code lang="VB">Public Sub SetStrokeCapsExample(e As PaintEventArgs)
&apos; Create a Path and add two lines to it,
&apos; forming a custom line cap.
Dim points As Point() =  {New Point(- 2, - 2), New Point(0, 0), _
New Point(2, - 2)}
Dim capPath As New GraphicsPath()
capPath.AddLines(points)
&apos; Create a CustomLineCap object.
Dim custCap As New CustomLineCap(Nothing, capPath)
&apos; Set the start and end caps for custCap.
custCap.SetStrokeCaps(LineCap.Triangle, LineCap.Round)
&apos; Create a Pen object, assign custCap as the start and end caps,
&apos; and draw a line to the screen.
Dim strokeCapPen As New Pen(Color.Black, 15)
strokeCapPen.CustomStartCap = custCap
strokeCapPen.CustomEndCap = custCap
e.Graphics.DrawLine(strokeCapPen, New Point(100, 100), _
New Point(300, 100))
End Sub
        </code>
        <code lang="C#">private void SetStrokeCapsExample(PaintEventArgs e)
{
// Create a Path and add two lines to it,
// forming a custom line cap.
Point[] points =
{
new Point(-2, -2),
new Point(0, 0),
new Point(2, -2)
};
GraphicsPath capPath = new GraphicsPath();
capPath.AddLines(points);
// Create a CustomLineCap object.
CustomLineCap custCap = new CustomLineCap(null, capPath);
// Set the start and end caps for custCap.
custCap.SetStrokeCaps(LineCap.Triangle, LineCap.Round);
// Create a Pen object, assign custCap as the start and end caps, and draw a line to the screen.
Pen strokeCapPen = new Pen(Color.Black, 15);
strokeCapPen.CustomStartCap = custCap;
strokeCapPen.CustomEndCap = custCap;
e.Graphics.DrawLine(strokeCapPen, new Point(100, 100), new Point(300, 100));
} // SetStrokeCapsExample
        </code>
      </example>
    </member>

    <member name="P:System.Drawing.Drawing2D.CustomLineCap.BaseCap">
      <summary>
        <para>Gets or sets the <see cref="T:System.Drawing.Drawing2D.LineCap"/> enumeration on which this <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> is based.</para>
      </summary>
      <value>
        <para>The <see cref="T:System.Drawing.Drawing2D.LineCap"/> enumeration on which this <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> is based.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.CustomLineCap.BaseInset">
      <summary>
        <para>Gets or sets the distance between the cap and the line.</para>
      </summary>
      <value>
        <para>The distance between the beginning of the cap and the end of the line.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.CustomLineCap.StrokeJoin">
      <summary>
        <para>Gets or sets the <see cref="T:System.Drawing.Drawing2D.LineJoin"/> enumeration that determines how lines that compose this <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> object are joined.</para>
      </summary>
      <value>
        <para>The <see cref="T:System.Drawing.Drawing2D.LineJoin"/> enumeration this <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> object uses to join lines.</para>
      </value>
      <remarks>
        <para>This property specifies a <see cref="T:System.Drawing.Drawing2D.LineJoin"/> enumeration that is used to join lines and curves that make up the stroked path of this <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> object.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.CustomLineCap.WidthScale">
      <summary>
        <para>Gets or sets the amount by which to scale this <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> Class object with respect to the width of the <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>The amount by which to scale the cap.</para>
      </value>
      <remarks>
        <para>This property specifies the multiple of the pen width by which to multiply the size of the custom cap. For example, if this property equals 1, the custom cap width is 10, the custom cap height is 5, and a line is drawn with a pen with a width of 3, then the cap is drawn 30 units wide and 15 units high. Setting this property to 3 causes the cap to be drawn 90 units wide and 45 units high.</para>
      </remarks>
    </member>

    <member name="T:System.Drawing.Drawing2D.GraphicsContainer">
      <summary>
        <para>Represents the internal data of a graphics container. This class is used when saving the state of a <see cref="T:System.Drawing.Graphics"/> object using the <see cref="M:System.Drawing.Graphics.BeginContainer"/> and <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> methods. This class cannot be inherited.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.GraphicsPath">
      <summary>
        <para>Represents a series of connected lines and curves. This class cannot be inherited.</para>
      </summary>
      <remarks>
        <para>Applications use paths to draw outlines of shapes, fill the interiors of shapes, and create clipping regions. The graphics engine maintains the coordinates of geometric shapes in a path in world coordinate space.</para>
        <para>A path may be composed of any number of figures (subpaths). Each figure is either composed of a sequence of connected lines and curves or a geometric shape primitive. The starting point of a figure is the first point in the sequence of connected lines and curves. The ending point is the last point in the sequence. The starting and ending points of a geometric shape primitive are defined by the primitive specification.</para>
        <para>A figure that consists of a sequence of connected lines and curves (whose starting and ending points may be coincident) is an open figure, unless it is closed explicitly. A figure can be closed explicitly, by using the <see langword="CloseFigure"/> method, which closes the current figure by connecting a line from the ending point to the starting point. A figure that consists of a geometric shape primitive is a closed figure.</para>
        <para>For purposes of filling and clipping (for example, if a path is rendered using <see langword="Graphics.FillPath"/>), all open figures are closed by adding a line from the figure&apos;s first point to its last point.</para>
        <para>A new figure is implicitly started when a path is created or when a figure is closed. A new figure is explicitly when the <see langword="StartFigure"/> method is called.</para>
        <para>When a geometric shape primitive is added to a path, it adds a figure containing the geometric shape, and also implicitly starts a new figure. Consequently, there is always a current figure in a path. When lines and curves are added to a path, an implicit line is added as needed to connect the ending point of the current figure to the starting point of the new lines and curves to form a sequence of connected lines and curves.</para>
        <para>A figure has a direction that describes how line and curve segments are traced between the starting point and the ending point. The direction is defined in the order that lines and curves are added to a figure, or is defined by the geometric shape primitive. The direction is used in determining the path interiors for clipping and fill.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.#ctor">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> class with a <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration of <see langword="Alternate"/>.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> class with a <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration of <see langword="Alternate"/>.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Drawing2D.FillMode)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> class with the specified <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration.</para>
      </summary>
      <param name="fillMode">
        The <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration that determines how the interior of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> is filled.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> class with the specified <see cref="T:System.Drawing.Drawing2D.PathPointType"/> and <see cref="T:System.Drawing.Point"/> arrays.</para>
      </summary>
      <param name="pts">
        An array of <see cref="T:System.Drawing.Point"/> structures that defines the coordinates of the points that make up this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
      </param>
      <param name="types">
        An array of <see cref="T:System.Drawing.Drawing2D.PathPointType"/> enumeration elements that specifies the type of each corresponding point in the <paramref name="pts"/> array.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[],System.Drawing.Drawing2D.FillMode)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> class with the specified <see cref="T:System.Drawing.Drawing2D.PathPointType"/> and <see cref="T:System.Drawing.Point"/> arrays and with the specified <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration element.</para>
      </summary>
      <param name="pts">
        An array of <see cref="T:System.Drawing.Point"/> structures that defines the coordinates of the points that make up this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
      </param>
      <param name="types">
        An array of <see cref="T:System.Drawing.Drawing2D.PathPointType"/> enumeration elements that specifies the type of each corresponding point in the <paramref name="pts"/> array.
      </param>
      <param name="fillMode">
        A <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration that specifies how the interiors of shapes in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> are filled.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> array with the specified <see cref="T:System.Drawing.Drawing2D.PathPointType"/> and <see cref="T:System.Drawing.PointF"/> arrays.</para>
      </summary>
      <param name="pts">
        An array of <see cref="T:System.Drawing.PointF"/> structures that defines the coordinates of the points that make up this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
      </param>
      <param name="types">
        An array of <see cref="T:System.Drawing.Drawing2D.PathPointType"/> enumeration elements that specifies the type of each corresponding point in the <paramref name="pts"/> array.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[],System.Drawing.Drawing2D.FillMode)">
    
  <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> array with the specified <see cref="T:System.Drawing.Drawing2D.PathPointType"/> and <see cref="T:System.Drawing.PointF"/> arrays and with the specified <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration element.</para>
      </summary>
      <param name="pts">
        An array of <see cref="T:System.Drawing.PointF"/> structures that defines the coordinates of the points that make up this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
      </param>
      <param name="types">
        An array of <see cref="T:System.Drawing.Drawing2D.PathPointType"/> enumeration elements that specifies the type of each corresponding point in the <paramref name="pts"/> array.
      </param>
      <param name="fillMode">
        A <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration that specifies how the interiors of shapes in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> are filled.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
      <overload>
        Appends an elliptical arc to the current figure.
      </overload>
      <summary>
        <para>Appends an elliptical arc to the current figure.</para>
      </summary>
      <param name="x">
        The x-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.
      </param>
      <param name="y">
        The y-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.
      </param>
      <param name="width">
        The width of the rectangular region that defines the ellipse from which the arc is drawn.
      </param>
      <param name="height">
        The height of the rectangular region that defines the ellipse from which the arc is drawn.
      </param>
      <param name="startAngle">
        The starting angle of the arc, measured in degrees clockwise from the x-axis.
      </param>
      <param name="sweepAngle">
        The angle between <paramref name="startAngle"/> and the end of the arc.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddArc Method (Rectangle, Single, Single)"/>.</para>
      </example>
      <remarks>
        <para>If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.</para>
        <para>The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.Rectangle,System.Single,System.Single)">
      <summary>
        <para>Appends an elliptical arc to the current figure.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangular bounds of the ellipse from which the arc is taken.
      </param>
      <param name="startAngle">
        The starting angle of the arc, measured in degrees clockwise from the x-axis.
      </param>
      <param name="sweepAngle">
        The angle between <paramref name="startAngle"/> and the end of the arc.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle, from which the arc is defined.</term>
          </item>
          <item>
            <term>Creates a path, <paramref name="myPath"/>.</term>
          </item>
          <item>
            <term>Defines a 180-degree elliptical arc that sweeps from 0 degrees to 180 degrees and appends it to a path.</term>
          </item>
          <item>
            <term>Draws the path to screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub AddArcExample(e As PaintEventArgs)
&apos; Create a GraphicsPath object.
Dim myPath As New GraphicsPath()
&apos; Set up and call AddArc, and close the figure.
Dim rect As New Rectangle(20, 20, 50, 100)
myPath.StartFigure()
myPath.AddArc(rect, 0, 180)
myPath.CloseFigure()
&apos; Draw the path to screen.
e.Graphics.DrawPath(New Pen(Color.Red, 3), myPath)
End Sub
        </code>
        <code lang="C#">private void AddArcExample(PaintEventArgs e)
{
// Create a GraphicsPath object.
GraphicsPath myPath = new GraphicsPath();
// Set up and call AddArc, and close the figure.
Rectangle rect = new Rectangle(20, 20, 50, 100);
myPath.StartFigure();
myPath.AddArc(rect, 0, 180);
myPath.CloseFigure();
// Draw the path to screen.
e.Graphics.DrawPath(new Pen(Color.Red, 3), myPath);
}
        </code>
      </example>
      <remarks>
        <para>If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.</para>
        <para>The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.RectangleF,System.Single,System.Single)">
      <summary>
        <para>Appends an elliptical arc to the current figure.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangular bounds of the ellipse from which the arc is taken.
      </param>
      <param name="startAngle">
        The starting angle of the arc, measured in degrees clockwise from the x-axis.
      </param>
      <param name="sweepAngle">
        The angle between <paramref name="startAngle"/> and the end of the arc.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddArc Method (Rectangle, Single, Single)"/>.</para>
      </example>
      <remarks>
        <para>If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.</para>
        <para>The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Appends an elliptical arc to the current figure.</para>
      </summary>
      <param name="x">
        The x-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.
      </param>
      <param name="y">
        The y-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.
      </param>
      <param name="width">
        The width of the rectangular region that defines the ellipse from which the arc is drawn.
      </param>
      <param name="height">
        The height of the rectangular region that defines the ellipse from which the arc is drawn.
      </param>
      <param name="startAngle">
        The starting angle of the arc, measured in degrees clockwise from the x-axis.
      </param>
      <param name="sweepAngle">
        The angle between <paramref name="startAngle"/> and the end of the arc.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddArc Method (Rectangle, Single, Single)"/>.</para>
      </example>
      <remarks>
        <para>If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.</para>
        <para>The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <overload>
        Adds a cubic B&#233;zier curve to the current figure.
      </overload>
      <summary>
        <para>Adds a cubic B&#233;zier curve to the current figure.</para>
      </summary>
      <param name="x1">
        The x-coordinate of the starting point of the curve.
      </param>
      <param name="y1">
        The y-coordinate of the starting point of the curve.
      </param>
      <param name="x2">
        The x-coordinate of the first control point for the curve.
      </param>
      <param name="y2">
        The y-coordinate of the first control point for the curve.
      </param>
      <param name="x3">
        The x-coordinate of the second control point for the curve.
      </param>
      <param name="y3">
        The y-coordinate of the second control point for the curve.
      </param>
      <param name="x4">
        The x-coordinate of the endpoint of the curve.
      </param>
      <param name="y4">
        The y-coordinate of the endpoint of the curve.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path.</term>
          </item>
          <item>
            <term>Adds a cubic B&#233;zier curve defined by the points (50, 50), (70, 0), (100, 120), and (150, 50) to the path.</term>
          </item>
          <item>
            <term>Closes the curve.</term>
          </item>
          <item>
            <term>Draws the path to screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub AddBezierExample(e As PaintEventArgs)
&apos; Create a new Path.
Dim myPath As New GraphicsPath()
&apos; Call AddBezier.
myPath.StartFigure()
myPath.AddBezier(50, 50, 70, 0, 100, 120, 150, 50)
&apos; Close the curve.
myPath.CloseFigure()
&apos; Draw the path to screen.
e.Graphics.DrawPath(New Pen(Color.Red, 2), myPath)
End Sub
        </code>
        <code lang="C#">private void AddBezierExample(PaintEventArgs e)
{
// Create a new Path.
GraphicsPath myPath = new GraphicsPath();
// Call AddBezier.
myPath.StartFigure();
myPath.AddBezier(50, 50, 70, 0, 100, 120, 150, 50);
// Close the curve.
myPath.CloseFigure();
// Draw the path to screen.
e.Graphics.DrawPath(new Pen(Color.Red, 2), myPath);
}
        </code>
      </example>
      <remarks>
        <para>The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.</para>
        <para>If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
      <summary>
        <para>Adds a cubic B&#233;zier curve to the current figure.</para>
      </summary>
      <param name="pt1">
        A <see cref="T:System.Drawing.Point"/> structure that represents the starting point of the curve.
      </param>
      <param name="pt2">
        A <see cref="T:System.Drawing.Point"/> structure that represents the first control point for the curve.
      </param>
      <param name="pt3">
        A <see cref="T:System.Drawing.Point"/> structure that represents the second control point for the curve.
      </param>
      <param name="pt4">
        A <see cref="T:System.Drawing.Point"/> structure that represents the endpoint of the curve.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddBezier Method (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)"/>.</para>
      </example>
      <remarks>
        <para>The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.</para>
        <para>If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
        <para>Adds a cubic B&#233;zier curve to the current figure.</para>
      </summary>
      <param name="pt1">
        A <see cref="T:System.Drawing.PointF"/> structure that represents the starting point of the curve.
      </param>
      <param name="pt2">
        A <see cref="T:System.Drawing.PointF"/> structure that represents the first control point for the curve.
      </param>
      <param name="pt3">
        A <see cref="T:System.Drawing.PointF"/> structure that represents the second control point for the curve.
      </param>
      <param name="pt4">
        A <see cref="T:System.Drawing.PointF"/> structure that represents the endpoint of the curve.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddBezier Method (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)"/>.</para>
      </example>
      <remarks>
        <para>The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.</para>
        <para>If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Adds a cubic B&#233;zier curve to the current figure.</para>
      </summary>
      <param name="x1">
        The x-coordinate of the starting point of the curve.
      </param>
      <param name="y1">
        The y-coordinate of the starting point of the curve.
      </param>
      <param name="x2">
        The x-coordinate of the first control point for the curve.
      </param>
      <param name="y2">
        The y-coordinate of the first control point for the curve.
      </param>
      <param name="x3">
        The x-coordinate of the second control point for the curve.
      </param>
      <param name="y3">
        The y-coordinate of the second control point for the curve.
      </param>
      <param name="x4">
        The x-coordinate of the endpoint of the curve.
      </param>
      <param name="y4">
        The y-coordinate of the endpoint of the curve.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddBezier Method (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)"/>.</para>
      </example>
      <remarks>
        <para>The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.</para>
        <para>If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.Point[])">
      <overload>
        Adds a sequence of connected cubic B&#233;zier curves to the current figure.
      </overload>
      <summary>
        <para>Adds a sequence of connected cubic B&#233;zier curves to the current figure.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.Point"/> structures that represents the points that define the curves.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an array of seven points (representing two connected B&#233;zier curves).</term>
          </item>
          <item>
            <term>Creates a path and adds the series of B&#233;zier curve points to the path.</term>
          </item>
          <item>
            <term>Draws the path to screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub AddBeziersExample(e As PaintEventArgs)
&apos; Adds two Bezier curves.
Dim myArray As Point() =  {New Point(20, 100), New Point(40, 75), _
New Point(60, 125), New Point(80, 100), New Point(100, 50), _
New Point(120, 150), New Point(140, 100)}
Dim myPath As New GraphicsPath()
myPath.AddBeziers(myArray)
Dim myPen As New Pen(Color.Black, 2)
e.Graphics.DrawPath(myPen, myPath)
End Sub
        </code>
        <code lang="C#">private void AddBeziersExample(PaintEventArgs e)
{
// Adds two Bezier curves.
Point[] myArray =
{
new Point(20, 100),
new Point(40, 75),
new Point(60, 125),
new Point(80, 100),
new Point(100, 50),
new Point(120, 150),
new Point(140, 100)
};
// Create the path and add the curves.
GraphicsPath myPath = new GraphicsPath();
myPath.AddBeziers(myArray);
// Draw the path to the screen.
Pen myPen = new Pen(Color.Black, 2);
e.Graphics.DrawPath(myPen, myPath);
}
        </code>
      </example>
      <remarks>
        <para>The<paramref name=" points"/> parameter specifies an array of endpoints and control points of the connected curves. The first curve is constructed from the first point to the fourth point in the <paramref name="points"/> array by using the second and third points as control points. In addition to the endpoint of the previous curve, each subsequent curve in the sequence needs exactly three more points: the next two points in the sequence are control points, and the third is the endpoint for the added curve.</para>
        <para>If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the first cubic curve in the sequence.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.PointF[])">
      <summary>
        <para>Adds a sequence of connected cubic B&#233;zier curves to the current figure.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.PointF"/> structures that represents the points that define the curves.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddBeziers Method (Point[])"/>.</para>
      </example>
      <remarks>
        <para>The <paramref name="points"/> parameter specifies an array of endpoints and control points of the connected curves. The first curve is constructed from the first point to the fourth point in the <paramref name="points"/> array by using the second and third points as control points. In addition to the endpoint of the previous curve, each subsequent curve in the sequence needs exactly three more points: the next two points in the sequence are control points, and the third is the endpoint for the added curve.</para>
        <para>If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the first cubic curve in the sequence.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[])">
      <overload>
        Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.
      </overload>
      <summary>
        <para>Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.Point"/> structures that represents the points that define the curve.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddClosedCurve Method (Point[], Single)"/>.</para>
      </example>
      <remarks>
        <para>The user must keep the original points if they are needed. The original points are converted to cubic B&#233;zier control points internally, therefore there is no mechanism for returning the original points. If the first point and the last point in the <paramref name="points"/> array are not the same point, the curve is closed by connecting these two points. The tension value cannot be set for this method, and defaults to a value equivalent to 0.5.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)">
      <summary>
        <para>Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.Point"/> structures that represents the points that define the curve.
      </param>
      <param name="tension">
        A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an array of six points (representing a cardinal spline).</term>
          </item>
          <item>
            <term>Creates a path and adds the closed cardinal spline curves to the path (closed from the endpoint to the starting point).</term>
          </item>
          <item>
            <term>Draws the path to screen.</term>
          </item>
        </list>
        <para>Notice that a tension of 0.5 is used.</para>
        <code lang="VB">Public Sub AddClosedCurveExample(e As PaintEventArgs)
&apos; Creates a symetrical, closed curve.
Dim myArray As Point() =  {New Point(20, 100), New Point(40, 150), _
New Point(60, 125), New Point(40, 100), New Point(60, 75), _
New Point(40, 50)}
Dim myPath As New GraphicsPath()
myPath.AddClosedCurve(myArray, 0.5F)
Dim myPen As New Pen(Color.Black, 2)
e.Graphics.DrawPath(myPen, myPath)
End Sub
        </code>
        <code lang="C#">private void AddClosedCurveExample(PaintEventArgs e)
{
// Creates a symetrical, closed curve.
Point[] myArray =
{
new Point(20,100),
new Point(40,150),
new Point(60,125),
new Point(40,100),
new Point(60,75),
new Point(40,50)
};
// Create a new path and add curve.
GraphicsPath myPath = new GraphicsPath();
myPath.AddClosedCurve(myArray, .5f);
Pen myPen = new Pen(Color.Black, 2);
// Draw the path to screen.
e.Graphics.DrawPath(myPen, myPath);
}
        </code>
      </example>
      <remarks>
        <para>The user must keep the original points if they are needed. The original points are converted to cubic B&#233;zier control points internally, therefore there is no mechanism for returning the original points. If the first point and the last point in the <paramref name="points"/> array are not the same point, the curve is closed by connecting these two points.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[])">
      <summary>
        <para>Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.PointF"/> structures that represents the points that define the curve.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddClosedCurve Method (Point[], Single)"/>.</para>
      </example>
      <remarks>
        <para>The user must keep the original points if they are needed. The original points are converted to cubic B&#233;zier control points internally, therefore there is no mechanism for returning the original points. If the first point and the last point in the <paramref name="points"/> array are not the same point, the curve is closed by connecting these two points. The tension value cannot be set for this method, and defaults to a value equivalent to 0.5.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[],System.Single)">
      <summary>
        <para>Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.PointF"/> structures that represents the points that define the curve.
      </param>
      <param name="tension">
        A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddClosedCurve Method (Point[], Single)"/>.</para>
      </example>
      <remarks>
        <para>The user must keep the original points if they are needed. The original points are converted to cubic B&#233;zier control points internally, therefore there is no mechanism for returning the original points. If the first point and the last point in the <paramref name="points"/> array are not the same point, the curve is closed by connecting these two points. </para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[])">
      <overload>
        Adds a spline curve to the current figure. A cardinal spline curve is used because the curve travels through each of the points in the array.
      </overload>
      <summary>
        <para>Adds a spline curve to the current figure. A cardinal spline curve is used because the curve travels through each of the points in the array.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.Point"/> structures that represents the points that define the curve.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddCurve Method (Point[], Int32, Int32, Single)"/>.</para>
      </example>
      <remarks>
        <para>The user must keep the original points if they are needed. The original points are converted to cubic B&#233;zier control points internally, therefore there is no mechanism for returning the original points.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)">
      <summary>
        <para>Adds a spline curve to the current figure.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.Point"/> structures that represents the points that define the curve.
      </param>
      <param name="offset">
        The index of the element in the <paramref name="points"/> array that is used as the first point in the curve.
      </param>
      <param name="numberOfSegments">
        A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.
      </param>
      <param name="tension">
        A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an array of four points (representing a cardinal spline).</term>
          </item>
          <item>
            <term>Creates a path and using the array of points, adds the curve to the path.</term>
          </item>
          <item>
            <term>Draws the path to the screen.</term>
          </item>
        </list>
        <para>Notice that while the array holds four points, there are only three segments - which is number specified in the third argument of the call to <see cref="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve"/>.</para>
        <code lang="VB">Public Sub AddCurveExample(e As PaintEventArgs)
&apos; Create some points.
Dim point1 As New Point(20, 20)
Dim point2 As New Point(40, 0)
Dim point3 As New Point(60, 40)
Dim point4 As New Point(80, 20)
&apos; Create an array of the points.
Dim curvePoints As Point() =  {point1, point2, point3, point4}
&apos; Create a GraphicsPath object and add a curve.
Dim myPath As New GraphicsPath()
myPath.AddCurve(curvePoints, 0, 3, 0.8F)
&apos; Draw the path to the screen.
Dim myPen As New Pen(Color.Black, 2)
e.Graphics.DrawPath(myPen, myPath)
End Sub
        </code>
        <code lang="C#">private void AddCurveExample(PaintEventArgs e)
{
// Create some points.
Point point1 = new Point(20, 20);
Point point2 = new Point(40, 0);
Point point3 = new Point(60, 40);
Point point4 = new Point(80, 20);
// Create an array of the points.
Point[] curvePoints = {point1, point2, point3, point4};
// Create a GraphicsPath object and add a curve.
GraphicsPath myPath = new GraphicsPath();
myPath.AddCurve(curvePoints, 0, 3, 0.8f);
// Draw the path to the screen.
Pen myPen = new Pen(Color.Black, 2);
e.Graphics.DrawPath(myPen, myPath);
}
        </code>
      </example>
      <remarks>
        <para>The user must keep the original points if they are needed. The original points are converted to cubic B&#233;zier control points internally, therefore there is no mechanism for returning the original points.</para>
        <para>The curve begins at the point in the array specified by the <paramref name="offset"/> parameter and includes the number of points (segments) specified by <paramref name="numberOfSegments"/>.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Single)">
      <summary>
        <para>Adds a spline curve to the current figure.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.Point"/> structures that represents the points that define the curve.
      </param>
      <param name="tension">
        A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddCurve Method (Point[], Int32, Int32, Single)"/>.</para>
      </example>
      <remarks>
        <para>The user must keep the original points if they are needed. The original points are converted to cubic B&#233;zier control points internally, therefore there is no mechanism for returning the original points.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[])">
      <summary>
        <para>Adds a spline curve to the current figure. A cardinal spline curve is used because the curve travels through each of the points in the array.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.PointF"/> structures that represents the points that define the curve.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddCurve Method (Point[], Int32, Int32, Single)"/>.</para>
      </example>
      <remarks>
        <para>The user must keep the original points if they are needed. The original points are converted to cubic B&#233;zier control points internally, therefore there is no mechanism for returning the original points.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Int32,System.Int32,System.Single)">
      <summary>
        <para>Adds a spline curve to the current figure.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.PointF"/> structures that represents the points that define the curve.
      </param>
      <param name="offset">
        The index of the element in the <paramref name="points"/> array that is used as the first point in the curve.
      </param>
      <param name="numberOfSegments">
        The number of segments used to draw the curve. A segment can be thought of as a line connecting two points.
      </param>
      <param name="tension">
        A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddCurve Method (Point[], Int32, Int32, Single)"/>.</para>
      </example>
      <remarks>
        <para>The user must keep the original points if they are needed. The original points are converted to cubic B&#233;zier control points internally, therefore there is no mechanism for returning the original points.</para>
        <para>The curve begins at the point in the array specified by <paramref name="offset"/>, and includes the number of points (segments) specified by <paramref name="numberOfSegments"/>.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Single)">
      <summary>
        <para>Adds a spline curve to the current figure.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.PointF"/> structures that represents the points that define the curve.
      </param>
      <param name="tension">
        A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddCurve Method (Point[], Int32, Int32, Single)"/>.</para>
      </example>
      <remarks>
        <para>The user must keep the original points if they are needed. The original points are converted to cubic B&#233;zier control points internally, therefore there is no mechanism for returning the original points.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Int32,System.Int32,System.Int32,System.Int32)">
      <overload>
        Adds an ellipse to the current path.
      </overload>
      <summary>
        <para>Adds an ellipse to the current path.</para>
      </summary>
      <param name="x">
        The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
      </param>
      <param name="y">
        The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
      </param>
      <param name="width">
        The width of the bounding rectangle that defines the ellipse.
      </param>
      <param name="height">
        The height of the bounding rectangle that defines the ellipse.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddEllipse Method (Rectangle)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.Rectangle)">
      <summary>
        <para>Adds an ellipse to the current path.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the bounding rectangle that defines the ellipse.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <para>Creates a bounding rectangle that defines an ellipse.</para>
        <para>Creates a path and adds the ellipse to the path.</para>
        <para>Draws the path to screen.</para>
        <code lang="VB">Public Sub AddEllipseExample(e As PaintEventArgs)
&apos; Create a path and add an ellipse.
Dim myEllipse As New Rectangle(20, 20, 100, 50)
Dim myPath As New GraphicsPath()
myPath.AddEllipse(myEllipse)
&apos; Draw the path to the screen.
Dim myPen As New Pen(Color.Black, 2)
e.Graphics.DrawPath(myPen, myPath)
End Sub
        </code>
        <code lang="C#">private void AddEllipseExample(PaintEventArgs e)
{
// Create a path and add an ellipse.
Rectangle myEllipse = new Rectangle(20, 20, 100, 50);
GraphicsPath myPath = new GraphicsPath();
myPath.AddEllipse(myEllipse);
// Draw the path to the screen.
Pen myPen = new Pen(Color.Black, 2);
e.Graphics.DrawPath(myPen, myPath);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.RectangleF)">
      <summary>
        <para>Adds an ellipse to the current path.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle that defines the ellipse.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddEllipse Method (Rectangle)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Adds an ellipse to the current path.</para>
      </summary>
      <param name="x">
        The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
      </param>
      <param name="y">
        The y-coordinate of the upper left corner of the bounding rectangle that defines the ellipse.
      </param>
      <param name="width">
        The width of the bounding rectangle that defines the ellipse.
      </param>
      <param name="height">
        The height of the bounding rectangle that defines the ellipse.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddEllipse Method (Rectangle)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Int32,System.Int32,System.Int32,System.Int32)">
      <overload>
        Appends a line segment to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.
      </overload>
      <summary>
        <para>Appends a line segment to the current figure.</para>
      </summary>
      <param name="x1">
        The x-coordinate of the starting point of the line.
      </param>
      <param name="y1">
        The y-coordinate of the starting point of the line.
      </param>
      <param name="x2">
        The x-coordinate of the endpoint of the line.
      </param>
      <param name="y2">
        The y-coordinate of the endpoint of the line.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code creates a path, adds three lines that form a triangle, and then draws the path to the screen.</para>
        <code lang="VB">Public Sub AddLineExample(e As PaintEventArgs)
&apos; Create a path and add a symetrical triangle using AddLine.
Dim myPath As New GraphicsPath()
myPath.AddLine(30, 30, 60, 60)
myPath.AddLine(60, 60, 0, 60)
myPath.AddLine(0, 60, 30, 30)
&apos; Draw the path to the screen.
Dim myPen As New Pen(Color.Black, 2)
e.Graphics.DrawPath(myPen, myPath)
End Sub
        </code>
        <code lang="C#">private void AddLineExample(PaintEventArgs e)
{
//Create a path and add a symetrical triangle using AddLine.
GraphicsPath myPath = new GraphicsPath();
myPath.AddLine(30, 30, 60, 60);
myPath.AddLine(60, 60, 0, 60);
myPath.AddLine(0, 60, 30, 30);
// Draw the path to the screen.
Pen myPen = new Pen(Color.Black, 2);
e.Graphics.DrawPath(myPen, myPath);
}
        </code>
      </example>
      <remarks>
        <para>This method adds the line segment defined by the specified points to the end of the current figure. If there are previous lines or curves in the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object, a line segment is drawn to connect the last point in the path to the first point in the new line segment.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.Point,System.Drawing.Point)">
      <summary>
        <para>Appends a line segment to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="pt1">
        A <see cref="T:System.Drawing.Point"/> structure that represents the starting point of the line.
      </param>
      <param name="pt2">
        A <see cref="T:System.Drawing.Point"/> structure that represents the endpoint of the line.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddLine Method (Int32, Int32, Int32, Int32)"/>.</para>
      </example>
      <remarks>
        <para>This method adds the line segment defined by the specified points to the end of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object. If there are previous lines or curves in the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object, a line segment is drawn to connect the last point in the path to the first point in the new line segment.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
        <para>Appends a line segment to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="pt1">
        A <see cref="T:System.Drawing.PointF"/> structure that represents the starting point of the line.
      </param>
      <param name="pt2">
        A <see cref="T:System.Drawing.PointF"/> structure that represents the endpoint of the line.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddLine Method (Int32, Int32, Int32, Int32)"/>.</para>
      </example>
      <remarks>
        <para>This method adds the line segment defined by the specified points to the end of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object. If there are previous lines or curves in the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object, a line segment is drawn to connect the last point in the path to the first point in the new line segment.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Appends a line segment to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="x1">
        The x-coordinate of the starting point of the line.
      </param>
      <param name="y1">
        The y-coordinate of the starting point of the line.
      </param>
      <param name="x2">
        The x-coordinate of the endpoint of the line.
      </param>
      <param name="y2">
        The y-coordinate of the endpoint of the line.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddLine Method (Int32, Int32, Int32, Int32)"/>.</para>
      </example>
      <remarks>
        <para>This method adds the line segment defined by the specified points to the end of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object. If there are previous lines or curves in the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object, a line segment is drawn to connect the last point in the path to the first point in the new line segment.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.Point[])">
      <overload>
        Appends a series of connected line segments to the end of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.
      </overload>
      <summary>
        <para>Appends a series of connected line segments to the end of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.Point"/> structures that represents the points that define the line segments to add.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an array of four points that describe a triangle.</term>
          </item>
          <item>
            <term>Creates a path and adds the array of lines.</term>
          </item>
          <item>
            <term>Draws the path to screen.</term>
          </item>
        </list>
        <para>Notice that each line after the first point, uses the previous point as the starting point and the new point as the endpoint.</para>
        <code lang="VB">Public Sub AddLinesExample(e As PaintEventArgs)
&apos;Create a symetrical triangle using an array of points.
Dim myArray As Point() =  {New Point(30, 30), New Point(60, 60), _
New Point(0, 60), New Point(30, 30)}
Dim myPath As New GraphicsPath()
myPath.AddLines(myArray)
&apos; Draw the path to the screen.
Dim myPen As New Pen(Color.Black, 2)
e.Graphics.DrawPath(myPen, myPath)
End Sub
        </code>
        <code lang="C#">private void AddLinesExample(PaintEventArgs e)
{
// Create a symetrical triangle using an array of points.
Point[] myArray =
{
new Point(30,30),
new Point(60,60),
new Point(0,60),
new Point(30,30)
};
//Create a path and add lines.
GraphicsPath myPath = new GraphicsPath();
myPath.AddLines(myArray);
// Draw the path to the screen.
Pen myPen = new Pen(Color.Black, 2);
e.Graphics.DrawPath(myPen, myPath);
}
        </code>
      </example>
      <remarks>
        <para>If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment the starting point of the line. The <paramref name="points"/> parameter specifies an array of endpoints. The first two specify the first line. Each additional point specifies the endpoint of a line segment whose starting point is the endpoint of the previous line.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.PointF[])">
      <summary>
        <para>Appends a series of connected line segments to the end of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.PointF"/> structures that represents the points that define the line segments to add.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddLines Method (Point[])"/>.</para>
      </example>
      <remarks>
        <para>If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment the starting point of the line. The <paramref name="points"/> parameter specifies an array of endpoints. The first two specify the first line. Each additional point specifies the endpoint of a line segment whose starting point is the endpoint of the previous line.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
      <summary>
        <para>Appends the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object to this path.</para>
      </summary>
      <param name="addingPath">
        The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> to add.
      </param>
      <param name="connect">
        A Boolean value that specifies whether the first figure in the added path is part of the last figure in this path. A value of <see langword="true"/> specifies that (if possible) the first figure in the added path is part of the last figure in this path. A value of <see langword="false"/> specifies that the first figure in the added path is separate from the last figure in this path.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates two paths &#190; one a right-side-up triangle and the other an up-side-down triangle.</term>
          </item>
          <item>
            <term>Adds the second path to the first.</term>
          </item>
          <item>
            <term>Draws the resultant path to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub AddPathExample(e As PaintEventArgs)
&apos; Creates a symetrical triangle and adds an inverted triangle.
&apos; Create the first path - right side up triangle.
Dim myArray As Point() =  {New Point(30, 30), New Point(60, 60), _
New Point(0, 60), New Point(30, 30)}
Dim myPath As New GraphicsPath()
myPath.AddLines(myArray)
&apos; Create the second path - inverted triangle.
Dim myArray2 As Point() =  {New Point(30, 30), New Point(0, 0), _
New Point(60, 0), New Point(30, 30)}
Dim myPath2 As New GraphicsPath()
myPath2.AddLines(myArray2)
&apos; Add the second path to the first path.
myPath.AddPath(myPath2, True)
&apos; Draw the combined path to the screen.
Dim myPen As New Pen(Color.Black, 2)
e.Graphics.DrawPath(myPen, myPath)
End Sub
        </code>
        <code lang="C#">private void AddPathExample(PaintEventArgs e)
{
// Create the first path&#190;right side up triangle.
Point[] myArray =
{
new Point(30,30),
new Point(60,60),
new Point(0,60),
new Point(30,30)
};
GraphicsPath myPath = new GraphicsPath();
myPath.AddLines(myArray);
// Create the second path&#190;inverted triangle.
Point[] myArray2 =
{
new Point(30,30),
new Point(0,0),
new Point(60,0),
new Point(30,30)
};
GraphicsPath myPath2 = new GraphicsPath();
myPath2.AddLines(myArray2);
// Add the second path to the first path.
myPath.AddPath(myPath2,true);
// Draw the combined path to the screen.
Pen myPen = new Pen(Color.Black, 2);
e.Graphics.DrawPath(myPen, myPath);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
      <overload>
        Adds the outline of a pie shape to this path.
      </overload>
      <summary>
        <para>Adds the outline of a pie shape to this path.</para>
      </summary>
      <param name="x">
        The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.
      </param>
      <param name="y">
        The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.
      </param>
      <param name="width">
        The width of the bounding rectangle that defines the ellipse from which the pie is drawn.
      </param>
      <param name="height">
        The height of the bounding rectangle that defines the ellipse from which the pie is drawn.
      </param>
      <param name="startAngle">
        The starting angle for the pie section, measured in degrees clockwise from the x-axis.
      </param>
      <param name="sweepAngle">
        The angle between <paramref name="startAngle"/> and the end of the pie section, measured in degrees clockwise from <paramref name="startAngle"/>.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code creates a graphics path, adds the pie shape, and then draws the path to the screen.</para>
        <code lang="VB">Public Sub AddPieExample(e As PaintEventArgs)
&apos; Create a pie slice of a circle using the AddPie method.
Dim myPath As New GraphicsPath()
myPath.AddPie(20, 20, 70, 70, - 45, 90)
&apos; Draw the path to the screen.
Dim myPen As New Pen(Color.Black, 2)
e.Graphics.DrawPath(myPen, myPath)
End Sub
        </code>
        <code lang="C#">private void AddPieExample(PaintEventArgs e)
{
// Create a pie slice of a circle using the AddPie method.
GraphicsPath myPath = new GraphicsPath();
myPath.AddPie(20, 20, 70, 70, -45, 90);
// Draw the path to the screen.
Pen myPen = new Pen(Color.Black, 2);
e.Graphics.DrawPath(myPen, myPath);
}
        </code>
      </example>
      <remarks>
        <para>The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline. The partial outline begins at <paramref name="startAngle"/> (measured clockwise from the x-axis) and ends at <paramref name="startAngle"/> + <paramref name="sweepAngle"/>.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Drawing.Rectangle,System.Single,System.Single)">
      <summary>
        <para>Adds the outline of a pie shape to this path.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the bounding rectangle that defines the ellipse from which the pie is drawn.
      </param>
      <param name="startAngle">
        The starting angle for the pie section, measured in degrees clockwise from the x-axis.
      </param>
      <param name="sweepAngle">
        The angle between <paramref name="startAngle"/> and the end of the pie section, measured in degrees clockwise from <paramref name="startAngle"/>.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddPie Method (Int32, Int32, Int32, Int32, Single, Single)"/>.</para>
      </example>
      <remarks>
        <para>The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline. The partial outline begins at <paramref name="startAngle"/> (measured clockwise from the x-axis) and ends at <paramref name="startAngle"/> + <paramref name="sweepAngle"/>.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Adds the outline of a pie shape to this path.</para>
      </summary>
      <param name="x">
        The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.
      </param>
      <param name="y">
        The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.
      </param>
      <param name="width">
        The width of the bounding rectangle that defines the ellipse from which the pie is drawn.
      </param>
      <param name="height">
        The height of the bounding rectangle that defines the ellipse from which the pie is drawn.
      </param>
      <param name="startAngle">
        The starting angle for the pie section, measured in degrees clockwise from the x-axis.
      </param>
      <param name="sweepAngle">
        The angle between <paramref name="startAngle"/> and the end of the pie section, measured in degrees clockwise from <paramref name="startAngle"/>.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddPie Method (Int32, Int32, Int32, Int32, Single, Single)"/>.</para>
      </example>
      <remarks>
        <para>The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline. The partial outline begins at <paramref name="startAngle"/> (measured clockwise from the x-axis) and ends at <paramref name="startAngle"/> + <paramref name="sweepAngle"/>.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.Point[])">
      <overload>
        Adds a polygon to this path.
      </overload>
      <summary>
        <para>Adds a polygon to this path.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.Point"/> structures that defines the polygon to add.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an array of points that defines a polygon.</term>
          </item>
          <item>
            <term>Creates a path and adds the polygon to the path.</term>
          </item>
          <item>
            <term>Draws the path to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub AddPolygonExample(e As PaintEventArgs)
&apos; Create an array of points.
Dim myArray As Point() =  {New Point(23, 20), New Point(40, 10), _
New Point(57, 20), New Point(50, 40), New Point(30, 40)}
&apos; Create a GraphicsPath object and add a polygon.
Dim myPath As New GraphicsPath()
myPath.AddPolygon(myArray)
&apos; Draw the path to the screen.
Dim myPen As New Pen(Color.Black, 2)
e.Graphics.DrawPath(myPen, myPath)
End Sub
        </code>
        <code lang="C#">private void AddPolygonExample(PaintEventArgs e)
{
// Create an array of points.
Point[] myArray =
{
new Point(23, 20),
new Point(40, 10),
new Point(57, 20),
new Point(50, 40),
new Point(30, 40)
};
// Create a GraphicsPath object and add a polygon.
GraphicsPath myPath = new GraphicsPath();
myPath.AddPolygon(myArray);
// Draw the path to the screen.
Pen myPen = new Pen(Color.Black, 2);
e.Graphics.DrawPath(myPen, myPath);
}
        </code>
      </example>
      <remarks>
        <para>The points in the <paramref name="points"/> array specify the vertices of a polygon. If the first point in the array is not the same as the last point, those two points are connected to close the polygon.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.PointF[])">
      <summary>
        <para>Adds a polygon to this path.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.PointF"/> structures that defines the polygon to add.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddPolygon Method (Point[])"/>.</para>
      </example>
      <remarks>
        <para>The points in the <paramref name="points"/> array specify the vertices of a polygon. If the first point in the array is not the same as the last point, those two points are connected to close the polygon.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.Rectangle)">
      <overload>
        Adds a rectangle to this path.
      </overload>
      <summary>
        <para>Adds a rectangle to this path.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle to add.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path.</term>
          </item>
          <item>
            <term>Creates a rectangle and adds the rectangle to the path.</term>
          </item>
          <item>
            <term>Draws the path to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub AddRectangleExample(e As PaintEventArgs)
&apos; Create a GraphicsPath object and add a rectangle to it.
Dim myPath As New GraphicsPath()
Dim pathRect As New Rectangle(20, 20, 100, 200)
myPath.AddRectangle(pathRect)
&apos; Draw the path to the screen.
Dim myPen As New Pen(Color.Black, 2)
e.Graphics.DrawPath(myPen, myPath)
End Sub
        </code>
        <code lang="C#">private void AddRectangleExample(PaintEventArgs e)
{
// Create a GraphicsPath object and add a rectangle to it.
GraphicsPath myPath = new GraphicsPath();
Rectangle pathRect = new Rectangle(20, 20, 100, 200);
myPath.AddRectangle(pathRect);
// Draw the path to the screen.
Pen myPen = new Pen(Color.Black, 2);
e.Graphics.DrawPath(myPen, myPath);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.RectangleF)">
      <summary>
        <para>Adds a rectangle to this path.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to add.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddRectangle Method (Rectangle)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.Rectangle[])">
      <overload>
        Adds a series of rectangles to this path.
      </overload>
      <summary>
        <para>Adds a series of rectangles to this path.</para>
      </summary>
      <param name="rects">
        An array of <see cref="T:System.Drawing.Rectangle"/> structures that represents the rectangles to add.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path.</term>
          </item>
          <item>
            <term>Creates an array of rectangles and adds the rectangles to the path.</term>
          </item>
          <item>
            <term>Draws the path to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub AddRectanglesExample(e As PaintEventArgs)
&apos; Adds a pattern of rectangles to a GraphicsPath object.
Dim myPath As New GraphicsPath()
Dim pathRects As Rectangle() =  {New Rectangle(20, 20, 100, 200), _
New Rectangle(40, 40, 120, 220), New Rectangle(60, 60, 240, 140)}
myPath.AddRectangles(pathRects)
&apos; Draw the path to the screen.
Dim myPen As New Pen(Color.Black, 2)
e.Graphics.DrawPath(myPen, myPath)
End Sub
        </code>
        <code lang="C#">private void AddRectanglesExample(PaintEventArgs e)
{
// Adds a pattern of rectangles to a GraphicsPath object.
GraphicsPath myPath = new GraphicsPath();
Rectangle[] pathRects =
{
new Rectangle(20,20,100,200),
new Rectangle(40,40,120,220),
new Rectangle(60,60,240,140)
};
myPath.AddRectangles(pathRects);
// Draw the path to the screen.
Pen myPen = new Pen(Color.Black, 2);
e.Graphics.DrawPath(myPen, myPath);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.RectangleF[])">
      <summary>
        <para>Adds a series of rectangles to this path.</para>
      </summary>
      <param name="rects">
        An array of <see cref="T:System.Drawing.RectangleF"/> structures that represents the rectangles to add.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddRectangles Method (Rectangle[])"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Point,System.Drawing.StringFormat)">
      <overload>
        Adds a text string to this path.
      </overload>
      <summary>
        <para>Adds a text string to this path.</para>
      </summary>
      <param name="s">
        The <see cref="T:System.String"/> to add.
      </param>
      <param name="family">
        A <see cref="T:System.Drawing.FontFamily"/> object that represents the name of the font with which the test is drawn.
      </param>
      <param name="style">
        A <see cref="T:System.Drawing.FontStyle"/> enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section).
      </param>
      <param name="emSize">
        The height of the Em square box that bounds the character.
      </param>
      <param name="origin">
        A <see cref="T:System.Drawing.Point"/> structure that represents the point where the text starts.
      </param>
      <param name="format">
        A <see cref="T:System.Drawing.StringFormat"/> object that specifies text formatting information, such as line spacing and alignment.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path.</term>
          </item>
          <item>
            <term>Sets up string and font arguments.</term>
          </item>
          <item>
            <term>Adds the string to the path.</term>
          </item>
          <item>
            <term>Draws the string to the screen.</term>
          </item>
        </list>
        <para>There are two important things to be pointed out. First, notice that the <paramref name="fontStyle"/> argument is cast as an <see langword="int"/>. The <see cref="M:System.Drawing.Drawing2D.GraphicsPath.AddString"/> method requires this so that two or more <see cref="T:System.Drawing.FontStyle"/> members can be combined to create the desired font style (in this case, <see langword="Italic"/> and <see langword="Underline"/>). Secondly, notice that the <see cref="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)"/> method is used rather than the <see cref="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)"/> method. If <see cref="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)"/> is used, solid text is rendered, whereas if <see cref="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)"/> is used, the text will be an outline style.</para>
        <code lang="VB">Public Sub AddStringExample(e As PaintEventArgs)
&apos; Create a GraphicsPath object.
Dim myPath As New GraphicsPath()
&apos; Set up all the string parameters.
Dim stringText As String = &quot;Sample Text&quot;
Dim family As New FontFamily(&quot;Arial&quot;)
Dim myfontStyle As Integer = CInt(FontStyle.Italic)
Dim emSize As Integer = 26
Dim origin As New Point(20, 20)
Dim format As StringFormat = StringFormat.GenericDefault
&apos; Add the string to the path.
myPath.AddString(stringText, family, myfontStyle, emSize, _
origin, format)
&apos;Draw the path to the screen.
e.Graphics.FillPath(Brushes.Black, myPath)
End Sub
        </code>
        <code lang="C#">private void AddStringExample(PaintEventArgs e)
{
// Create a GraphicsPath object.
GraphicsPath myPath = new GraphicsPath();
// Set up all the string parameters.
string stringText = &quot;Sample Text&quot;;
FontFamily family = new FontFamily(&quot;Arial&quot;);
int fontStyle = (int)FontStyle.Italic;
int emSize = 26;
Point origin = new Point(20, 20);
StringFormat format = StringFormat.GenericDefault;
// Add the string to the path.
myPath.AddString(stringText,
family,
fontStyle,
emSize,
origin,
format);
//Draw the path to the screen.
e.Graphics.FillPath(Brushes.Black, myPath);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.PointF,System.Drawing.StringFormat)">
      <summary>
        <para>Adds a text string to this path.</para>
      </summary>
      <param name="s">
        The <see cref="T:System.String"/> to add.
      </param>
      <param name="family">
        A <see cref="T:System.Drawing.FontFamily"/> object that represents the name of the font with which the test is drawn.
      </param>
      <param name="style">
        A <see cref="T:System.Drawing.FontStyle"/> enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section).
      </param>
      <param name="emSize">
        The height of the Em square box that bounds the character.
      </param>
      <param name="origin">
        A <see cref="T:System.Drawing.PointF"/> that represents the point where the text starts.
      </param>
      <param name="format">
        A <see cref="T:System.Drawing.StringFormat"/> object that specifies text formatting information, such as line spacing and alignment.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddString Method (String, FontFamily, Int32, Single, Point, StringFormat)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Rectangle,System.Drawing.StringFormat)">
      <summary>
        <para>Adds a text string to this path.</para>
      </summary>
      <param name="s">
        The <see cref="T:System.String"/> to add.
      </param>
      <param name="family">
        A <see cref="T:System.Drawing.FontFamily"/> object that represents the name of the font with which the test is drawn.
      </param>
      <param name="style">
        A <see cref="T:System.Drawing.FontStyle"/> enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section).
      </param>
      <param name="emSize">
        The height of the Em square box that bounds the character.
      </param>
      <param name="layoutRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the text.
      </param>
      <param name="format">
        A <see cref="T:System.Drawing.StringFormat"/> object that specifies text formatting information, such as line spacing and alignment.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddString Method (String, FontFamily, Int32, Single, Point, StringFormat)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.RectangleF,System.Drawing.StringFormat)">
      <summary>
        <para>Adds a text string to this path.</para>
      </summary>
      <param name="s">
        The <see cref="T:System.String"/> to add.
      </param>
      <param name="family">
        A <see cref="T:System.Drawing.FontFamily"/> object that represents the name of the font with which the test is drawn.
      </param>
      <param name="style">
        A <see cref="T:System.Drawing.FontStyle"/> enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section).
      </param>
      <param name="emSize">
        The height of the Em square box that bounds the character.
      </param>
      <param name="layoutRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the text.
      </param>
      <param name="format">
        A <see cref="T:System.Drawing.StringFormat"/> object that specifies text formatting information, such as line spacing and alignment.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.AddString Method (String, FontFamily, Int32, Single, Point, StringFormat)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.ClearMarkers">
      <summary>
        <para>Clears all markers from this path.</para>
      </summary>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path.</term>
          </item>
          <item>
            <term>Adds several objects to the path.</term>
          </item>
          <item>
            <term>Adds markers to the path.</term>
          </item>
          <item>
            <term>Clears all markers from the path.</term>
          </item>
          <item>
            <term>Draws the path to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub ClearMarkersExample(e As PaintEventArgs)
&apos; Set several markers in a path.
Dim myPath As New GraphicsPath()
myPath.AddEllipse(0, 0, 100, 200)
myPath.SetMarkers()
myPath.AddLine(New Point(100, 100), New Point(200, 100))
Dim rect As New Rectangle(200, 0, 100, 200)
myPath.AddRectangle(rect)
myPath.SetMarkers()
myPath.AddLine(New Point(250, 200), New Point(250, 300))
myPath.SetMarkers()
&apos; Clear the markers.
myPath.ClearMarkers()
&apos; Draw the path to the screen.
Dim myPen As New Pen(Color.Black, 2)
e.Graphics.DrawPath(myPen, myPath)
End Sub
        </code>
        <code lang="C#">private void ClearMarkersExample(PaintEventArgs e)
{
// Set several markers in a path.
GraphicsPath myPath = new GraphicsPath();
myPath.AddEllipse(0, 0, 100, 200);
myPath.SetMarkers();
myPath.AddLine(new Point(100, 100), new Point(200, 100));
Rectangle rect = new Rectangle(200, 0, 100, 200);
myPath.AddRectangle(rect);
myPath.SetMarkers();
myPath.AddLine(new Point(250, 200), new Point(250, 300));
myPath.SetMarkers();
// Clear the markers.
myPath.ClearMarkers();
// Draw the path to the screen.
Pen myPen = new Pen(Color.Black, 2);
e.Graphics.DrawPath(myPen, myPath);
}
        </code>
      </example>
      <remarks>
        <para>Use the <see cref="M:System.Drawing.Drawing2D.GraphicsPath.SetMarkers"/> method to create a marker at the current location in a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object. Use the <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker"/> method to iterate through the existing markers in a path.</para>
        <para>Markers are used to separate groups of subpaths. One or more subpaths can be contained between two markers.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Clone">
      <summary>
        <para>Creates an exact copy of this path.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> this method creates, cast as an object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path.</term>
          </item>
          <item>
            <term>Adds several figures to the path.</term>
          </item>
          <item>
            <term>Draws the path to the screen.</term>
          </item>
          <item>
            <term>Clones a copy of that path.</term>
          </item>
          <item>
            <term>Draws the new path to the screen.</term>
          </item>
        </list>
        <para>Notice that the call the <see langword="Clone"/> method must be cast as a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
        <code lang="VB">Public Sub CloneExample(e As PaintEventArgs)
&apos; Set several markers in a path.
Dim myPath As New GraphicsPath()
myPath.AddEllipse(0, 0, 100, 200)
myPath.AddLine(New Point(100, 100), New Point(200, 100))
Dim rect As New Rectangle(200, 0, 100, 200)
myPath.AddRectangle(rect)
myPath.AddLine(New Point(250, 200), New Point(250, 300))
&apos; Draw the path to the screen.
Dim myPen As New Pen(Color.Black, 2)
e.Graphics.DrawPath(myPen, myPath)
&apos; Clone a copy of myPath.
Dim myPath2 As GraphicsPath = CType(myPath.Clone(), GraphicsPath)
&apos; Draw the path to the screen.
Dim myPen2 As New Pen(Color.Red, 4)
e.Graphics.DrawPath(myPen2, myPath2)
End Sub
        </code>
        <code lang="C#">private void CloneExample(PaintEventArgs e)
{
// Set several markers in a path.
GraphicsPath myPath = new GraphicsPath();
myPath.AddEllipse(0, 0, 100, 200);
myPath.AddLine(new Point(100, 100), new Point(200, 100));
Rectangle rect = new Rectangle(200, 0, 100, 200);
myPath.AddRectangle(rect);
myPath.AddLine(new Point(250, 200), new Point(250, 300));
// Draw the path to the screen.
Pen myPen = new Pen(Color.Black, 2);
e.Graphics.DrawPath(myPen, myPath);
// Clone a copy of myPath.
GraphicsPath myPath2 = (GraphicsPath)myPath.Clone();
// Draw the path to the screen.
Pen myPen2 = new Pen(Color.Red, 4);
e.Graphics.DrawPath(myPen2, myPath2);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures">
      <summary>
        <para>Closes all open figures in this path and starts a new figure. It closes each open figure by connecting a line from its endpoint to its starting point.</para>
      </summary>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path.</term>
          </item>
          <item>
            <term>Adds several open figures to the path.</term>
          </item>
          <item>
            <term>Closes all figures in the path.</term>
          </item>
          <item>
            <term>Draws the path to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub CloseAllFiguresExample(e As PaintEventArgs)
&apos; Create a path containing several open-ended figures.
Dim myPath As New GraphicsPath()
myPath.StartFigure()
myPath.AddLine(New Point(10, 10), New Point(150, 10))
myPath.AddLine(New Point(150, 10), New Point(10, 150))
myPath.StartFigure()
myPath.AddArc(200, 200, 100, 100, 0, 90)
myPath.StartFigure()
Dim point1 As New Point(300, 300)
Dim point2 As New Point(400, 325)
Dim point3 As New Point(400, 375)
Dim point4 As New Point(300, 400)
Dim points As Point() =  {point1, point2, point3, point4}
myPath.AddCurve(points)
&apos; close all the figures.
myPath.CloseAllFigures()
&apos; Draw the path to the screen.
e.Graphics.DrawPath(New Pen(Color.Black, 3), myPath)
End Sub
        </code>
        <code lang="C#">private void CloseAllFiguresExample(PaintEventArgs e)
{
// Create a path containing several open-ended figures.
GraphicsPath myPath = new GraphicsPath();
myPath.StartFigure();
myPath.AddLine(new Point(10, 10), new Point(150, 10));
myPath.AddLine(new Point(150, 10), new Point(10, 150));
myPath.StartFigure();
myPath.AddArc(200, 200, 100, 100, 0, 90);
myPath.StartFigure();
Point point1 = new Point(300, 300);
Point point2 = new Point(400, 325);
Point point3 = new Point(400, 375);
Point point4 = new Point(300, 400);
Point[] points = {point1, point2, point3, point4};
myPath.AddCurve(points);
// Close all the figures.
myPath.CloseAllFigures();
// Draw the path to the screen.
e.Graphics.DrawPath(new Pen(Color.Black, 3), myPath);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.CloseFigure">
      <summary>
        <para>Closes the current figure and starts a new figure. If the current figure contains a sequence of connected lines and curves, the method closes the loop by connecting a line from the endpoint to the starting point.</para>
      </summary>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code creates a triangle by creating a new path, starting a figure, adding two intersecting lines to the figure, and then closing the figure to form a triangle. The path is then drawn to the screen.</para>
        <code lang="VB">Public Sub CloseFigureExample(e As PaintEventArgs)
&apos; Create a path consisting of two, open-ended lines and close
&apos; the lines using CloseFigure.
Dim myPath As New GraphicsPath()
myPath.StartFigure()
myPath.AddLine(New Point(10, 10), New Point(200, 10))
myPath.AddLine(New Point(200, 10), New Point(200, 200))
myPath.CloseFigure()
&apos; Draw the path to the screen.
e.Graphics.DrawPath(Pens.Black, myPath)
End Sub
        </code>
        <code lang="C#">private void CloseFigureExample(PaintEventArgs e)
{
// Create a path consisting of two, open-ended lines and close
// the lines using CloseFigure.
GraphicsPath myPath = new GraphicsPath();
myPath.StartFigure();
myPath.AddLine(new Point(10, 10), new Point(200, 10));
myPath.AddLine(new Point(200, 10), new Point(200, 200));
myPath.CloseFigure();
// Draw the path to the screen.
e.Graphics.DrawPath(Pens.Black, myPath);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Flatten">
      <overload>
        Converts each curve in this path into a sequence of connected line segments.
      </overload>
      <summary>
        <para>Converts each curve in this path into a sequence of connected line segments.</para>
      </summary>
      <example>
        <para>For an example, see <see langword="GraphicsPath.Flatten Method (Matrix, Single)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix)">
      <summary>
        <para>Applies the specified transform and then converts each curve in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object into a sequence of connected line segments.</para>
      </summary>
      <param name="matrix">
        A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by which to transform this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> before flattening.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.Flatten Method (Matrix, Single)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix,System.Single)">
      <summary>
        <para>Converts each curve in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object into a sequence of connected line segments.</para>
      </summary>
      <param name="matrix">
        A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by which to transform this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> before flattening.
      </param>
      <param name="flatness">
        Specifies the maximum permitted error between the curve and its flattened approximation. A value of 0.25 is the default. Reducing the flatness value will increase the number of line segments in the approximation.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a graphics path and a translation matrix.</term>
          </item>
          <item>
            <term>Adds a curve to the path using four points.</term>
          </item>
          <item>
            <term>Draws the path (curve) to the screen, using a black pen.</term>
          </item>
          <item>
            <term>Shifts the curve down 10 pixels and flattens it.</term>
          </item>
          <item>
            <term>Draws the curve to the screen using, a red pen.</term>
          </item>
        </list>
        <para>Notice that the red curve has flattened lines connecting the points.</para>
        <code lang="VB">Public Sub FlattenExample(e As PaintEventArgs)
Dim myPath As New GraphicsPath()
Dim translateMatrix As New Matrix()
translateMatrix.Translate(0, 10)
Dim point1 As New Point(20, 100)
Dim point2 As New Point(70, 10)
Dim point3 As New Point(130, 200)
Dim point4 As New Point(180, 100)
Dim points As Point() =  {point1, point2, point3, point4}
myPath.AddCurve(points)
e.Graphics.DrawPath(New Pen(Color.Black, 2), myPath)
myPath.Flatten(translateMatrix, 10F)
e.Graphics.DrawPath(New Pen(Color.Red, 1), myPath)
End Sub &apos;FlattenExample
        </code>
        <code lang="C#">private void FlattenExample(PaintEventArgs e)
{
GraphicsPath myPath = new GraphicsPath();
Matrix translateMatrix = new Matrix();
translateMatrix.Translate(0, 10);
Point point1 = new Point(20, 100);
Point point2 = new Point(70, 10);
Point point3 = new Point(130, 200);
Point point4 = new Point(180, 100);
Point[] points = {point1, point2, point3, point4};
myPath.AddCurve(points);
e.Graphics.DrawPath(new Pen(Color.Black, 2), myPath);
myPath.Flatten(translateMatrix, 10f);
e.Graphics.DrawPath(new Pen(Color.Red, 1), myPath);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.GetBounds">
      <overload>
        Returns a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.
      </overload>
      <summary>
        <para>Returns a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Drawing.RectangleF"/> structure that represents a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a graphics path.</term>
          </item>
          <item>
            <term>Adds an ellipse (circle) to it and draws it to the screen.</term>
          </item>
          <item>
            <term>Retrieves the bounding rectangle for the circle with a call to <see langword="GetBounds()"/> and draws the rectangle to the screen.</term>
          </item>
          <item>
            <term>Creates a second graphics path.</term>
          </item>
          <item>
            <term>Adds a circle and widens the path to a width of 10.</term>
          </item>
          <item>
            <term>Draws the path to the screen.</term>
          </item>
          <item>
            <term>Retrieves the bounding rectangle for the second circle.</term>
          </item>
          <item>
            <term>Draws the bounding rectangle to the screen.</term>
          </item>
          <item>
            <term>Displays the rectangle size in a dialog box.</term>
          </item>
        </list>
        <para>Notice that the bounding rectangle on the right is larger (to account for the extra width of the line).</para>
        <code lang="VB">Public Sub GetBoundsExample(e As PaintEventArgs)
&apos; Create path number 1 and a Pen for drawing.
Dim myPath As New GraphicsPath()
Dim pathPen As New Pen(Color.Black, 1)
&apos; Add an Ellipse to the path and Draw it (circle in start
&apos; position).
myPath.AddEllipse(20, 20, 100, 100)
e.Graphics.DrawPath(pathPen, myPath)
&apos; Get the path bounds for Path number 1 and draw them.
Dim boundRect As RectangleF = myPath.GetBounds()
e.Graphics.DrawRectangle(New Pen(Color.Red, 1), boundRect.X, _
boundRect.Y, boundRect.Height, boundRect.Width)
&apos; Create a second graphics path and a wider Pen.
Dim myPath2 As New GraphicsPath()
Dim pathPen2 As New Pen(Color.Black, 10)
&apos; Create a new ellipse with a width of 10.
myPath2.AddEllipse(150, 20, 100, 100)
myPath2.Widen(pathPen2)
e.Graphics.FillPath(Brushes.Black, myPath2)
&apos; Get the second path bounds.
Dim boundRect2 As RectangleF = myPath2.GetBounds()
&apos; Show the bounds in a message box.
e.Graphics.DrawString(&quot;Rectangle2 Bounds: &quot; + _
boundRect2.ToString(), New Font(&quot;Arial&quot;, 8), Brushes.Black, _
20, 150)
&apos; Draw the bounding rectangle.
e.Graphics.DrawRectangle(New Pen(Color.Red, 1), boundRect2.X, _
boundRect2.Y, boundRect2.Height, boundRect2.Width)
End Sub
        </code>
        <code lang="C#">public void GetBoundsExample(PaintEventArgs e)
{
// Create path number 1 and a Pen for drawing.
GraphicsPath myPath = new GraphicsPath();
Pen pathPen = new Pen(Color.Black, 1);
// Add an Ellipse to the path and Draw it (circle in start
// position).
myPath.AddEllipse(20, 20, 100, 100);
e.Graphics.DrawPath(pathPen, myPath);
// Get the path bounds for Path number 1 and draw them.
RectangleF boundRect = myPath.GetBounds();
e.Graphics.DrawRectangle(new Pen(Color.Red, 1),
boundRect.X,
boundRect.Y,
boundRect.Height,
boundRect.Width);
// Create a second graphics path and a wider Pen.
GraphicsPath myPath2 = new GraphicsPath();
Pen pathPen2 = new Pen(Color.Black, 10);
// Create a new ellipse with a width of 10.
myPath2.AddEllipse(150, 20, 100, 100);
myPath2.Widen(pathPen2);
e.Graphics.FillPath(Brushes.Black, myPath2);
// Get the second path bounds.
RectangleF boundRect2 = myPath2.GetBounds();
// Draw the bounding rectangle.
e.Graphics.DrawRectangle(new Pen(Color.Red, 1),
boundRect2.X,
boundRect2.Y,
boundRect2.Height,
boundRect2.Width);
// Display the rectangle size.
MessageBox.Show(boundRect2.ToString());
}
        </code>
      </example>
      <remarks>
        <para>The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a &quot;loose fit&quot; to the bounded path. The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix)">
      <summary>
        <para>Returns a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when this path is transformed by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </summary>
      <param name="matrix">
        The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that specifies a transformation to be applied to this path before the bounding rectangle is calculated. This path is not permanently transformed; the transformation is used only during the process of calculating the bounding rectangle.
      </param>
      <returns>
        <para>A <see cref="T:System.Drawing.RectangleF"/> structure that represents a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.GetBounds()"/></para>
      </example>
      <remarks>
        <para>The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a &quot;loose fit&quot; to the bounded path. The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix,System.Drawing.Pen)">
      <summary>
        <para>Returns a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when the current path is transformed by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> object and drawn with the specified <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <param name="matrix">
        The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that specifies a transformation to be applied to this path before the bounding rectangle is calculated. This path is not permanently transformed; the transformation is used only during the process of calculating the bounding rectangle.
      </param>
      <param name="pen">
        The <see cref="T:System.Drawing.Pen"/> object with which to draw the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
      </param>
      <returns>
        <para>A <see cref="T:System.Drawing.RectangleF"/> structure that represents a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.GetBounds()"/></para>
      </example>
      <remarks>
        <para>The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a &quot;loose fit&quot; to the bounded path. The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.GetLastPoint">
      <summary>
        <para>Gets the last point in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints"/> array of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Drawing.PointF"/> structure that represents the last point in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code creates a path, adds a line to the path, and then gets the last point in the path.</para>
        <code lang="VB">Public Sub GetLastPointExample(e As PaintEventArgs)
Dim myPath As New GraphicsPath()
myPath.AddLine(20, 20, 100, 20)
Dim lastPoint As PointF = myPath.GetLastPoint()
If lastPoint.IsEmpty = False Then
Dim lastPointXString As String = lastPoint.X.ToString()
Dim lastPointYString As String = lastPoint.Y.ToString()
MessageBox.Show((lastPointXString + &quot;, &quot; + lastPointYString))
Else
MessageBox.Show(&quot;lastPoint is empty&quot;)
End If
End Sub
        </code>
        <code lang="C#">private void GetLastPointExample(PaintEventArgs e)
{
GraphicsPath myPath = new GraphicsPath();
myPath.AddLine(20, 20, 100, 20);
PointF lastPoint = myPath.GetLastPoint();
if(lastPoint.IsEmpty == false)
{
string lastPointXString = lastPoint.X.ToString();
string lastPointYString = lastPoint.Y.ToString();
MessageBox.Show(lastPointXString + &quot;, &quot; + lastPointYString);
}
else
MessageBox.Show(&quot;lastPoint is empty&quot;);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen)">
      <overload>
        Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when drawn with the specified <see cref="T:System.Drawing.Pen"/> object.
      </overload>
      <summary>
        <para>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when drawn with the specified <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the point to test.
      </param>
      <param name="y">
        The y-coordinate of the point to test.
      </param>
      <param name="pen">
        The <see cref="T:System.Drawing.Pen"/> object to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when drawn with the specified <see cref="T:System.Drawing.Pen"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsOutlineVisible Method (Int32, Int32, Pen, Graphics)"/>.</para>
      </example>
      <remarks>
        <para>This method tests to see if the outline of a given path is rendered visible at the specified point. </para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Graphics)">
      <summary>
        <para>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when drawn with the specified <see cref="T:System.Drawing.Pen"/> object and using the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the point to test.
      </param>
      <param name="y">
        The y-coordinate of the point to test.
      </param>
      <param name="pen">
        The <see cref="T:System.Drawing.Pen"/> object to test.
      </param>
      <param name="graphics">
        The <see cref="T:System.Drawing.Graphics"/> object for which to test visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object as drawn with the specified <see cref="T:System.Drawing.Pen"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path.</term>
          </item>
          <item>
            <term>Adds a rectangle to the path.</term>
          </item>
          <item>
            <term>Creates a wide pen and widens the path with that pen (to make the example clearer),</term>
          </item>
          <item>
            <term>Tests a point (100, 50) to see if it lies within (under) one of the edges of the rectangle by calling <see langword="IsOutlineVisible"/>.</term>
          </item>
        </list>
        <para>The result is shown in the message box (in this case, true). In other words the edge is rendered over that point.</para>
        <code lang="VB">Public Sub IsOutlineVisibleExample(e As PaintEventArgs)
Dim myPath As New GraphicsPath()
Dim rect As New Rectangle(20, 20, 100, 100)
myPath.AddRectangle(rect)
Dim testPen As New Pen(Color.Black, 20)
myPath.Widen(testPen)
e.Graphics.FillPath(Brushes.Black, myPath)
Dim visible As Boolean = myPath.IsOutlineVisible(100, 50, _
testPen, e.Graphics)
MessageBox.Show((&quot;visible = &quot; + visible.ToString()))
End Sub
        </code>
        <code lang="C#">public void IsOutlineVisibleExample(PaintEventArgs e)
{
GraphicsPath myPath = new GraphicsPath();
Rectangle rect = new Rectangle(20, 20, 100, 100);
myPath.AddRectangle(rect);
Pen testPen = new Pen(Color.Black, 20);
myPath.Widen(testPen);
e.Graphics.FillPath(Brushes.Black, myPath);
bool visible = myPath.IsOutlineVisible(100, 50, testPen,
e.Graphics);
MessageBox.Show(&quot;visible = &quot; + visible.ToString());
}
        </code>
      </example>
      <remarks>
        <para>This method tests to see if the outline of a given path is rendered visible at the specified point. The coordinates of the point to be tested are given in world coordinates. The transform matrix of <paramref name="graphics "/>is temporarily applied before testing for visibility.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen)">
      <summary>
        <para>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when drawn with the specified <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <param name="point">
        A <see cref="T:System.Drawing.Point"/> structure that specifies the location to test.
      </param>
      <param name="pen">
        The <see cref="T:System.Drawing.Pen"/> object to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when drawn with the specified <see cref="T:System.Drawing.Pen"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsOutlineVisible Method (Int32, Int32, Pen, Graphics)"/>.</para>
      </example>
      <remarks>
        <para>This method tests to see if the outline of a given path is rendered visible at the specified point. </para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen,System.Drawing.Graphics)">
      <summary>
        <para>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when drawn with the specified <see cref="T:System.Drawing.Pen"/> object and using the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="pt">
        A <see cref="T:System.Drawing.Point"/> structure that specifies the location to test.
      </param>
      <param name="pen">
        The <see cref="T:System.Drawing.Pen"/> object to test.
      </param>
      <param name="graphics">
        The <see cref="T:System.Drawing.Graphics"/> object for which to test visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object as drawn with the specified <see cref="T:System.Drawing.Pen"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsOutlineVisible Method (Int32, Int32, Pen, Graphics)"/>.</para>
      </example>
      <remarks>
        <para>This method tests to see if the outline of a given path is rendered visible at the specified point. The coordinates of the point to be tested are given in world coordinates. The transform matrix of <paramref name="graphics "/>is temporarily applied before testing for visibility.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen)">
      <summary>
        <para>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when drawn with the specified <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <param name="point">
        A <see cref="T:System.Drawing.PointF"/> structure that specifies the location to test.
      </param>
      <param name="pen">
        The <see cref="T:System.Drawing.Pen"/> object to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when drawn with the specified <see cref="T:System.Drawing.Pen"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsOutlineVisible Method (Int32, Int32, Pen, Graphics)"/>.</para>
      </example>
      <remarks>
        <para>This method tests to see if the outline of a given path is rendered visible at the specified point. </para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen,System.Drawing.Graphics)">
      <summary>
        <para>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when drawn with the specified <see cref="T:System.Drawing.Pen"/> object and using the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="pt">
        A <see cref="T:System.Drawing.PointF"/> structure that specifies the location to test.
      </param>
      <param name="pen">
        The <see cref="T:System.Drawing.Pen"/> object to test.
      </param>
      <param name="graphics">
        The <see cref="T:System.Drawing.Graphics"/> object for which to test visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object as drawn with the specified <see cref="T:System.Drawing.Pen"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsOutlineVisible Method (Int32, Int32, Pen, Graphics)"/>.</para>
      </example>
      <remarks>
        <para>This method tests to see if the outline of a given path is rendered visible at the specified point. The coordinates of the point to be tested are given in world coordinates. The transform matrix of <paramref name="graphics "/>is temporarily applied before testing for visibility.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen)">
      <summary>
        <para>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when drawn with the specified <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the point to test.
      </param>
      <param name="y">
        The y-coordinate of the point to test.
      </param>
      <param name="pen">
        The <see cref="T:System.Drawing.Pen"/> object to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when drawn with the specified <see cref="T:System.Drawing.Pen"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsOutlineVisible Method (Int32, Int32, Pen, Graphics)"/>.</para>
      </example>
      <remarks>
        <para>This method tests to see if the outline of a given path is rendered visible at the specified point. </para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen,System.Drawing.Graphics)">
      <summary>
        <para>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object when drawn with the specified <see cref="T:System.Drawing.Pen"/> object and using the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the point to test.
      </param>
      <param name="y">
        The y-coordinate of the point to test.
      </param>
      <param name="pen">
        The <see cref="T:System.Drawing.Pen"/> object to test.
      </param>
      <param name="graphics">
        The <see cref="T:System.Drawing.Graphics"/> object for which to test visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object as drawn with the specified <see cref="T:System.Drawing.Pen"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsOutlineVisible Method (Int32, Int32, Pen, Graphics)"/>.</para>
      </example>
      <remarks>
        <para>This method tests to see if the outline of a given path is rendered visible at the specified point. The coordinates of the point to be tested are given in world coordinates. The transform matrix of the <paramref name="graphics"/> parameter is temporarily applied before testing for visibility.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32)">
      <overload>
        Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.
      </overload>
      <summary>
        <para>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the point to test.
      </param>
      <param name="y">
        The y-coordinate of the point to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsVisible Method (Int32, Int32, Graphics)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)">
      <summary>
        <para>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object, using the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the point to test.
      </param>
      <param name="y">
        The y-coordinate of the point to test.
      </param>
      <param name="graphics">
        The <see cref="T:System.Drawing.Graphics"/> object for which to test visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path and adds an ellipse to the path.</term>
          </item>
          <item>
            <term>Tests whether the specified point is contained within the path.</term>
          </item>
          <item>
            <term>Displays the result in a dialog box.</term>
          </item>
        </list>
        <code lang="VB">Public Sub IsVisibleExample(e As PaintEventArgs)
Dim myPath As New GraphicsPath()
myPath.AddEllipse(0, 0, 100, 100)
Dim visible As Boolean = myPath.IsVisible(50, 50, e.Graphics)
MessageBox.Show(visible.ToString())
End Sub
        </code>
        <code lang="C#">private void IsVisibleExample(PaintEventArgs e)
{
// Create a path and add an ellipse.
GraphicsPath myPath = new GraphicsPath();
myPath.AddEllipse(0, 0, 100, 100);
// Test the visibility of point (50, 50).
bool visible = myPath.IsVisible(50, 50, e.Graphics);
// Show the result.
MessageBox.Show(visible.ToString());
}
        </code>
      </example>
      <remarks>
        <para>The coordinates of the point to be tested are given in world coordinates. The transform matrix of <paramref name="graphics "/>is temporarily applied before testing for visibility.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point)">
      <summary>
        <para>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="point">
        A <see cref="T:System.Drawing.Point"/> structure that represents the point to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsVisible Method (Int32, Int32, Graphics)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point,System.Drawing.Graphics)">
      <summary>
        <para>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="pt">
        A <see cref="T:System.Drawing.Point"/> structure that represents the point to test.
      </param>
      <param name="graphics">
        The <see cref="T:System.Drawing.Graphics"/> object for which to test visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsVisible Method (Int32, Int32, Graphics)"/>.</para>
      </example>
      <remarks>
        <para>The coordinates of the point to be tested are given in world coordinates. The transform matrix of the <paramref name="graphics "/>parameter is temporarily applied before testing for visibility.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF)">
      <summary>
        <para>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="point">
        A <see cref="T:System.Drawing.PointF"/> structure that represents the point to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsVisible Method (Int32, Int32, Graphics)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF,System.Drawing.Graphics)">
      <summary>
        <para>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="pt">
        A <see cref="T:System.Drawing.PointF"/> structure that represents the point to test.
      </param>
      <param name="graphics">
        The <see cref="T:System.Drawing.Graphics"/> object for which to test visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within this; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsVisible Method (Int32, Int32, Graphics)"/>.</para>
      </example>
      <remarks>
        <para>The coordinates of the point to be tested are given in world coordinates. The transform matrix of the <paramref name="graphics "/>parameter is temporarily applied before testing for visibility.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single)">
      <summary>
        <para>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the point to test.
      </param>
      <param name="y">
        The y-coordinate of the point to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsVisible Method (Int32, Int32, Graphics)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single,System.Drawing.Graphics)">
      <summary>
        <para>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object in the visible clip region of the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the point to test.
      </param>
      <param name="y">
        The y-coordinate of the point to test.
      </param>
      <param name="graphics">
        The <see cref="T:System.Drawing.Graphics"/> object for which to test visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="GraphicsPath.IsVisible Method (Int32, Int32, Graphics)"/>.</para>
      </example>
      <remarks>
        <para>The coordinates of the point to be tested are given in world coordinates. The transform matrix of the <paramref name="graphics "/>parameter is temporarily applied before testing for visibility.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Reset">
      <summary>
        <para>Empties the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints"/> and <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes"/> arrays and sets the <see cref="T:System.Drawing.Drawing2D.FillMode"/> to <see langword="Alternate"/>.</para>
      </summary>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path.</term>
          </item>
          <item>
            <term>Adds several primitives to it.</term>
          </item>
          <item>
            <term>Draws the path&apos;s points array to the screen.</term>
          </item>
          <item>
            <term>Resets the path to an empty state.</term>
          </item>
          <item>
            <term>Re-acquires the points array (if it exists).</term>
          </item>
          <item>
            <term>Draws the array to the screen.</term>
          </item>
        </list>
        <para>Notice that it finds no array following the reset call.</para>
        <code lang="VB">Public Sub GraphicsPathResetExample(e As PaintEventArgs)
Dim myFont As New Font(&quot;Arial&quot;, 8)
&apos; Create a path and add a line, an ellipse, and an arc.
Dim myPath As New GraphicsPath()
myPath.AddLine(New Point(0, 0), New Point(100, 100))
myPath.AddEllipse(100, 100, 200, 250)
myPath.AddArc(300, 250, 100, 100, 0, 90)
&apos; Draw the pre-reset points array to the screen.
DrawPointsHelper(e, myPath.PathPoints, 20)
&apos; Reset the path.
myPath.Reset()
&apos; See if any points remain.
If myPath.PointCount &gt; 0 Then
&apos; Draw the post-reset points array to the screen.
DrawPointsHelper(e, myPath.PathPoints, 150)
&apos; If there are no points, say so.
Else
e.Graphics.DrawString(&quot;No Points&quot;, myFont, Brushes.Black, _
150, 20)
End If
End Sub
&apos; A helper function used by GraphicsPathResetExample to draw points.
Public Sub DrawPointsHelper(e As PaintEventArgs, _
pathPoints() As PointF, xOffset As Integer)
Dim y As Integer = 20
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim i As Integer
For i = 0 To pathPoints.Length - 1
e.Graphics.DrawString(pathPoints(i).X.ToString() + _
&quot;, &quot; + pathPoints(i).Y.ToString(), myFont, Brushes.Black, _
xOffset, y)
y += 20
Next i
End Sub
        </code>
        <code lang="C#">public void GraphicsPathResetExample(PaintEventArgs e)
{
Font myFont = new Font(&quot;Arial&quot;, 8);
// Create a path and add a line, an ellipse, and an arc.
GraphicsPath myPath = new GraphicsPath();
myPath.AddLine(new Point(0, 0), new Point(100, 100));
myPath.AddEllipse(100, 100, 200, 250);
myPath.AddArc(300, 250, 100, 100, 0, 90);
// Draw the pre-reset points array to the screen.
DrawPoints(e, myPath.PathPoints, 20);
// Reset the path.
myPath.Reset();
// See if any points remain.
if(myPath.PointCount &gt; 0)
{
// Draw the post-reset points array to the screen.
DrawPoints(e, myPath.PathPoints, 150);
}
else
// If there are no points, say so.
e.Graphics.DrawString(&quot;No Points&quot;,
myFont,
Brushes.Black,
150,
20);
} //End GraphicsPathResetExample
// A helper function GraphicsPathResetExample uses to draw the points.
// to the screen.
public void DrawPoints(PaintEventArgs e, PointF[] pathPoints, int xOffset)
{
int y = 20;
Font myFont = new Font(&quot;Arial&quot;, 8);
for(int i=0;i &lt; pathPoints.Length; i++)
{
e.Graphics.DrawString(pathPoints[i].X.ToString() + &quot;, &quot; +
pathPoints[i].Y.ToString(),
myFont,
Brushes.Black,
xOffset,
y);
y += 20;
}
} // End DrawPoints
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Reverse">
      <summary>
        <para>Reverses the order of points in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints"/> array of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path and adds several primitives to the path.</term>
          </item>
          <item>
            <term>Draws the path&apos;s points array to the screen.</term>
          </item>
          <item>
            <term>Draws the reversed points array to the screen.</term>
          </item>
        </list>
        <para>Notice that the second listing of points is in reverse order from the first.</para>
        <code lang="VB">Public Sub GraphicsPathReverseExample(e As PaintEventArgs)
&apos; Create a path and add a line, ellipse, and arc.
Dim myPath As New GraphicsPath()
myPath.AddLine(New Point(0, 0), New Point(100, 100))
myPath.AddEllipse(100, 100, 200, 250)
myPath.AddArc(300, 250, 100, 100, 0, 90)
&apos; Draw the first set of points to the screen.
DrawPointsHelper(e, myPath.PathPoints, 20)
&apos; Call GraphicsPath.Reverse.
myPath.Reverse()
&apos; Draw the reversed set of points to the screen.
DrawPointsHelper(e, myPath.PathPoints, 150)
End Sub
&apos; A helper function used by GraphicsPathReverseExample to draw points.
Public Sub DrawPointsHelper(e As PaintEventArgs, _
pathPoints() As PointF, xOffset As Integer)
Dim y As Integer = 20
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim i As Integer
For i = 0 To pathPoints.Length - 1
e.Graphics.DrawString(pathPoints(i).X.ToString() + _
&quot;, &quot; + pathPoints(i).Y.ToString(), myFont, Brushes.Black, _
xOffset, y)
y += 20
Next i
End Sub
        </code>
        <code lang="C#">public void GraphicsPathReverseExample(PaintEventArgs e)
{
// Create a path and add a line, ellipse, and arc.
GraphicsPath myPath = new GraphicsPath();
myPath.AddLine(new Point(0, 0), new Point(100, 100));
myPath.AddEllipse(100, 100, 200, 250);
myPath.AddArc(300, 250, 100, 100, 0, 90);
// Draw the first set of points to the screen.
DrawPoints(e, myPath.PathPoints, 20);
// Call GraphicsPath.Reverse.
myPath.Reverse();
// Draw the reversed set of points to the screen.
DrawPoints(e, myPath.PathPoints, 150);
}//End GraphicsPathReverseExample.
// A helper function GraphicsPathReverseExample is used to draw the
// points to the screen.
public void DrawPoints(PaintEventArgs e, PointF[] pathPoints, int xOffset)
{
int y = 20;
Font myFont = new Font(&quot;Arial&quot;, 8);
for(int i=0;i &lt; pathPoints.Length; i++)
{
e.Graphics.DrawString(pathPoints[i].X.ToString() + &quot;, &quot; +
pathPoints[i].Y.ToString(),
myFont,
Brushes.Black,
xOffset,
y);
y += 20;
}
} // End DrawPoints
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.SetMarkers">
      <summary>
        <para>Sets a marker on this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code creates a path and adds several primitives to the path separated by markers, and draws the path to the screen.</para>
        <code lang="VB">Public Sub SetMarkersExample(e As PaintEventArgs)
&apos; Create a path and set two markers.
Dim myPath As New GraphicsPath()
myPath.AddLine(New Point(0, 0), New Point(50, 50))
myPath.SetMarkers()
Dim rect As New Rectangle(50, 50, 50, 50)
myPath.AddRectangle(rect)
myPath.SetMarkers()
myPath.AddEllipse(100, 100, 100, 50)
&apos; Draw the path to screen.
e.Graphics.DrawPath(New Pen(Color.Black, 2), myPath)
End Sub
        </code>
        <code lang="C#">private void SetMarkersExample(PaintEventArgs e)
{
// Create a path and set two markers.
GraphicsPath myPath = new GraphicsPath();
myPath.AddLine(new Point(0, 0), new Point(50, 50));
myPath.SetMarkers();
Rectangle rect = new Rectangle(50, 50, 50, 50);
myPath.AddRectangle(rect);
myPath.SetMarkers();
myPath.AddEllipse(100, 100, 100, 50);
// Draw the path to screen.
e.Graphics.DrawPath(new Pen(Color.Black, 2), myPath);
}
        </code>
      </example>
      <remarks>
        <para>This method creates a marker on the path that can be used to separate sections of the path. You can then use the <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker"/> methods to iterate through the markers in the path.</para>
        <para>Markers are used to separate groups of subpaths. One or more subpaths can be contained between two markers in the path.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.StartFigure">
      <summary>
        <para>Starts a new figure without closing the current figure. All subsequent points added to the path are added to this new figure.</para>
      </summary>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path.</term>
          </item>
          <item>
            <term>Adds two sets of figures. The first set of figures combines four primitives into two figures. The second set of figures combines the same four primitives (except that they are offset in the y-axis) into three figures.</term>
          </item>
          <item>
            <term>Draws all the figures to the screen.</term>
          </item>
        </list>
        <para>Notice the difference in the appearance between the two sets of figures.</para>
        <code lang="VB">Public Sub StartFigureExample(e As PaintEventArgs)
&apos; Create a GraphicsPath object.
Dim myPath As New GraphicsPath()
&apos; First set of figures.
myPath.StartFigure()
myPath.AddArc(10, 10, 50, 50, 0, 270)
myPath.AddLine(New Point(50, 0), New Point(100, 50))
myPath.AddArc(50, 100, 75, 75, 0, 270)
myPath.CloseFigure()
myPath.StartFigure()
myPath.AddArc(100, 10, 50, 50, 0, 270)
&apos; Second set of figures.
myPath.StartFigure()
myPath.AddArc(10, 200, 50, 50, 0, 270)
myPath.CloseFigure()
myPath.StartFigure()
myPath.AddLine(New Point(60, 200), New Point(110, 250))
myPath.AddArc(50, 300, 75, 75, 0, 270)
myPath.CloseFigure()
myPath.StartFigure()
myPath.AddArc(100, 200, 50, 50, 0, 270)
&apos; Draw the path to the screen.
e.Graphics.DrawPath(New Pen(Color.Black), myPath)
End Sub
        </code>
        <code lang="C#">public void StartFigureExample(PaintEventArgs e)
{
// Create a GraphicsPath object.
GraphicsPath myPath = new GraphicsPath();
// First set of figures.
myPath.StartFigure();
myPath.AddArc(10, 10, 50, 50, 0, 270);
myPath.AddLine(new Point(50, 0), new Point(100, 50));
myPath.AddArc(50, 100, 75, 75, 0, 270);
myPath.CloseFigure();
myPath.StartFigure();
myPath.AddArc(100, 10, 50, 50, 0, 270);
// Second set of figures.
myPath.StartFigure();
myPath.AddArc(10, 200, 50, 50, 0, 270);
myPath.CloseFigure();
myPath.StartFigure();
myPath.AddLine(new Point(60, 200), new Point(110, 250));
myPath.AddArc(50, 300, 75, 75, 0, 270);
myPath.CloseFigure();
myPath.StartFigure();
myPath.AddArc(100, 200, 50, 50, 0, 270);
// Draw the path to the screen.
e.Graphics.DrawPath(new Pen(Color.Black), myPath);
} // End StartFigureExample
        </code>
      </example>
      <remarks>
        <para>The user must keep the original points if they are needed. The original points are converted to cubic B&#233;zier control points internally, therefore there is no mechanism for returning the original points.</para>
        <para>This method starts a new subpath in the path. Subpaths allow you to separate a path into sections and use the <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator"/> class to iterate through the subpaths.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Transform(System.Drawing.Drawing2D.Matrix)">
      <summary>
        <para>Applies a transform matrix to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="matrix">
        A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that represents the transformation to apply.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path and adds an ellipse to the path.</term>
          </item>
          <item>
            <term>Draws path to the screen.</term>
          </item>
          <item>
            <term>Creates a transform matrix to translate the path 100 units in the x-axis direction.</term>
          </item>
          <item>
            <term>Draws the transformed path to the screen.</term>
          </item>
        </list>
        <para>Notice that the original ellipse is drawn in black and the transformed ellipse is drawn in red.</para>
        <code lang="VB">Public Sub TransformExample(e As PaintEventArgs)
&apos; Create a path and add and ellipse.
Dim myPath As New GraphicsPath()
myPath.AddEllipse(0, 0, 100, 200)
&apos; Draw the starting position to screen.
e.Graphics.DrawPath(Pens.Black, myPath)
&apos; Move the ellipse 100 points to the right.
Dim translateMatrix As New Matrix()
translateMatrix.Translate(100, 0)
myPath.Transform(translateMatrix)
&apos; Draw the transformed ellipse to the screen.
e.Graphics.DrawPath(New Pen(Color.Red, 2), myPath)
End Sub
        </code>
        <code lang="C#">private void TransformExample(PaintEventArgs e)
{
// Create a path and add and ellipse.
GraphicsPath myPath = new GraphicsPath();
myPath.AddEllipse(0, 0, 100, 200);
// Draw the starting position to screen.
e.Graphics.DrawPath(Pens.Black, myPath);
// Move the ellipse 100 points to the right.
Matrix translateMatrix = new Matrix();
translateMatrix.Translate(100, 0);
myPath.Transform(translateMatrix);
// Draw the transformed ellipse to the screen.
e.Graphics.DrawPath(new Pen(Color.Red, 2), myPath);
}
        </code>
      </example>
      <remarks>
        <para>The transformation can scale, translate, rotate, or skew the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF)">
      <overload>
        Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.
      </overload>
      <summary>
        <para>Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="destPoints">
        An array of <see cref="T:System.Drawing.PointF"/> structures that define a parallelogram to which the rectangle defined by <paramref name="srcRect"/> is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.
      </param>
      <param name="srcRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that is transformed to the parallelogram defined by <paramref name="destPoints"/>.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.Warp Method (PointF[], RectangleF, Matrix, WarpMode, Single)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)">
      <summary>
        <para>Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="destPoints">
        An array of <see cref="T:System.Drawing.PointF"/> structures that define a parallelogram to which the rectangle defined by <paramref name="srcRect"/> is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.
      </param>
      <param name="srcRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that is transformed to the parallelogram defined by <paramref name="destPoints"/>.
      </param>
      <param name="matrix">
        A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that specifies a geometric transform to apply to the path.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.Warp Method (PointF[], RectangleF, Matrix, WarpMode, Single)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode)">
      <summary>
        <para>Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="destPoints">
        An array of <see cref="T:System.Drawing.PointF"/> structures that defines a parallelogram to which the rectangle defined by <paramref name="srcRect"/> is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.
      </param>
      <param name="srcRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that is transformed to the parallelogram defined by <paramref name="destPoints"/>.
      </param>
      <param name="matrix">
        A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that specifies a geometric transform to apply to the path.
      </param>
      <param name="warpMode">
        A <see cref="T:System.Drawing.Drawing2D.WarpMode"/> enumeration that specifies whether this warp operation uses perspective or bilinear mode.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.Warp Method (PointF[], RectangleF, Matrix, WarpMode, Single)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)">
      <summary>
        <para>Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="destPoints">
        An array of <see cref="T:System.Drawing.PointF"/> structures that define a parallelogram to which the rectangle defined by <paramref name="srcRect"/> is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.
      </param>
      <param name="srcRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that is transformed to the parallelogram defined by <paramref name="destPoints"/>.
      </param>
      <param name="matrix">
        A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that specifies a geometric transform to apply to the path.
      </param>
      <param name="warpMode">
        A <see cref="T:System.Drawing.Drawing2D.WarpMode"/> enumeration that specifies whether this warp operation uses perspective or bilinear mode.
      </param>
      <param name="flatness">
        A value from 0 through 1 that specifies how flat the resulting path is. For more information, see the <see cref="M:System.Drawing.Drawing2D.GraphicsPath.Flatten"/> methods.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path and adds a rectangle to the path.</term>
          </item>
          <item>
            <term>Draws that rectangle to the screen in black.</term>
          </item>
          <item>
            <term>Warps the path with a perspective warp.</term>
          </item>
          <item>
            <term>Draws the warped rectangle (path) to the screen in red.</term>
          </item>
        </list>
        <code lang="VB">Public Sub WarpExample(e As PaintEventArgs)
&apos; Create a path and add a rectangle.
Dim myPath As New GraphicsPath()
Dim srcRect As New RectangleF(0, 0, 100, 200)
myPath.AddRectangle(srcRect)
&apos; Draw the source path (rectangle)to the screen.
e.Graphics.DrawPath(Pens.Black, myPath)
&apos; Create a destination for the warped rectangle.
Dim point1 As New PointF(200, 200)
Dim point2 As New PointF(400, 250)
Dim point3 As New PointF(220, 400)
Dim destPoints As PointF() =  {point1, point2, point3}
&apos; Create a translation matrix.
Dim translateMatrix As New Matrix()
translateMatrix.Translate(100, 0)
&apos; Warp the source path (rectangle).
myPath.Warp(destPoints, srcRect, translateMatrix, _
WarpMode.Perspective, 0.5F)
&apos; Draw the warped path (rectangle) to the screen.
e.Graphics.DrawPath(New Pen(Color.Red), myPath)
End Sub
        </code>
        <code lang="C#">private void WarpExample(PaintEventArgs e)
{
// Create a path and add a rectangle.
GraphicsPath myPath = new GraphicsPath();
RectangleF srcRect = new RectangleF(0, 0, 100, 200);
myPath.AddRectangle(srcRect);
// Draw the source path (rectangle)to the screen.
e.Graphics.DrawPath(Pens.Black, myPath);
// Create a destination for the warped rectangle.
PointF point1 = new PointF(200, 200);
PointF point2 = new PointF(400, 250);
PointF point3 = new PointF(220, 400);
PointF[] destPoints = {point1, point2, point3};
// Create a translation matrix.
Matrix translateMatrix = new Matrix();
translateMatrix.Translate(100, 0);
// Warp the source path (rectangle).
myPath.Warp(destPoints, srcRect, translateMatrix,
WarpMode.Perspective, 0.5f);
// Draw the warped path (rectangle) to the screen.
e.Graphics.DrawPath(new Pen(Color.Red), myPath);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen)">
      <overload>
        Replaces this path with curves that enclose the area that is filled when this path is drawn by the specified pen.
      </overload>
      <summary>
        <para>Adds an additional outline to the path.</para>
      </summary>
      <param name="pen">
        A <see cref="T:System.Drawing.Pen"/> object that specifies the width between the original outline of the path and the new outline this method creates.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.Widen Method (Pen, Matrix, Single)"/>.</para>
      </example>
      <remarks>
        <para>This method creates an outline around the original lines in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object, with a distance between the existing lines and the new outline equal to that of the width of the <see cref="T:System.Drawing.Pen"/> object used in the call to <see langword="Widen"/>. If you want to fill the space between the lines you must use the <see cref="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)"/> object rather then the <see cref="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix)">
      <summary>
        <para>Adds an additional outline to the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="pen">
        A <see cref="T:System.Drawing.Pen"/> object that specifies the width between the original outline of the path and the new outline this method creates.
      </param>
      <param name="matrix">
        A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that specifies a transform to apply to the path before widening.
      </param>
      <example>
        <para>For an example, see <see langword="GraphicsPath.Widen Method (Pen, Matrix, Single)"/>.</para>
      </example>
      <remarks>
        <para>This method creates an outline around the original lines in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object, with a distance between the existing lines and the new outline equal to that of the width of the <see cref="T:System.Drawing.Pen"/> object used in the call to <see langword="Widen"/>. If you want to fill the space between the lines you must use the <see cref="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)"/> object rather then the <see cref="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix,System.Single)">
      <summary>
        <para>Replaces this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object with curves that enclose the area that is filled when this path is drawn by the specified pen.</para>
      </summary>
      <param name="pen">
        A <see cref="T:System.Drawing.Pen"/> object that specifies the width between the original outline of the path and the new outline this method creates.
      </param>
      <param name="matrix">
        A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that specifies a transform to apply to the path before widening.
      </param>
      <param name="flatness">
        A value that specifies the flatness for curves.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a path and adds two ellipses to the path.</term>
          </item>
          <item>
            <term>Draws the path in black.</term>
          </item>
          <item>
            <term>Widens the path.</term>
          </item>
          <item>
            <term>Draws the path in red.</term>
          </item>
        </list>
        <para>Notice that the second rendering uses <see cref="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)"/> instead of <see cref="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)"/>, and hence the rendered figure has the outline filled..</para>
        <code lang="VB">Public Sub WidenExample(e As PaintEventArgs)
Dim myPath As New GraphicsPath()
myPath.AddEllipse(0, 0, 100, 100)
myPath.AddEllipse(100, 0, 100, 100)
e.Graphics.DrawPath(Pens.Black, myPath)
Dim widenPen As New Pen(Color.Black, 10)
Dim widenMatrix As New Matrix()
widenMatrix.Translate(50, 50)
myPath.Widen(widenPen, widenMatrix, 1F) &apos; Sets tension for curves.
e.Graphics.FillPath(New SolidBrush(Color.Red), myPath)
End Sub
        </code>
        <code lang="C#">private void WidenExample(PaintEventArgs e)
{
// Create a path and add two ellipses.
GraphicsPath myPath = new GraphicsPath();
myPath.AddEllipse(0, 0, 100, 100);
myPath.AddEllipse(100, 0, 100, 100);
// Draw the original ellipses to the screen in black.
e.Graphics.DrawPath(Pens.Black, myPath);
// Widen the path.
Pen widenPen = new Pen(Color.Black, 10);
Matrix widenMatrix = new Matrix();
widenMatrix.Translate(50, 50);
myPath.Widen(widenPen, widenMatrix, 1.0f);
// Draw the widened path to the screen in red.
e.Graphics.FillPath(new SolidBrush(Color.Red), myPath);
}
        </code>
      </example>
      <remarks>
        <para>This method creates an outline around the original lines in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object, with a distance between the existing lines and the new outline equal to that of the width of the <see cref="T:System.Drawing.Pen"/> object used in the call to <see langword="Widen"/>. If you want to fill the space between the lines you must use the <see cref="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)"/> object rather then the <see cref="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)"/> object.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.GraphicsPath.FillMode">
      <summary>
        <para>Gets or sets a <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration that determines how the interiors of shapes in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object are filled.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration that specifies how the interiors of shapes in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object are filled.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.GraphicsPath.PathData">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Drawing2D.PathData"/> object that encapsulates arrays of points (<paramref name="points"/> ) and types (<paramref name="types"/> ) for this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.PathData"/> object that encapsulates arrays for both the points and types for this <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints">
      <summary>
        <para>Gets the points in the path. </para>
      </summary>
      <value>
        <para>A an array of <see cref="T:System.Drawing.PointF"/> objects that represent the path.</para>
      </value>
    </member>
	
    <member name="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes">
      <summary>
        <para>Gets the types of the corresponding points in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints"/> array.</para>
      </summary>
      <value>
        <para>A an array of bytes that specify the types of the corresponding points in the path.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.GraphicsPath.PointCount">
      <summary>
        <para>Gets the number of elements in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints"/> or the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes"/> array.</para>
      </summary>
      <value>
        <para>An integer that specifies the number of elements in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints"/> or the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes"/> array.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Drawing2D.GraphicsPathIterator">
      <summary>
        <para>Provides the ability to iterate through subpaths in a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object and test the types of shapes contained in each subpath. This class cannot be inherited.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator"/> class with the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="path">
        The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object for which this helper class is to be initialized.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)">
      <summary>
        <para>Copies the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints"/> property and  cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes"/> property arrays of the associated <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object into the two specified arrays.</para>
      </summary>
      <param name="points">
        Upon return, contains an array of <see cref="T:System.Drawing.PointF"/> structures that represents the points in the path.
      </param>
      <param name="types">
        Upon return, contains an array of bytes that represents the types of points in the path.
      </param>
      <param name="startIndex">
        Specifies the starting index of the arrays.
      </param>
      <param name="endIndex">
        Specifies the ending index of the arrays.
      </param>
      <returns>
        <para>The number of points copied.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a graphics path.</term>
          </item>
          <item>
            <term>Populates it with several primitives and some markers.</term>
          </item>
          <item>
            <term>Lists the path data on the left side of the screen.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator"/> object and rewinds it.</term>
          </item>
          <item>
            <term>Increments the path data index to the second marker.</term>
          </item>
          <item>
            <term>Calls the <see langword="CopyData "/>method to copy the path data contained between the start and end indexes to the points and types arrays.</term>
          </item>
          <item>
            <term>Lists this copied data on the right side of the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub CopyDataExample(e As PaintEventArgs)
&apos; Create a graphics path.
Dim myPath As New GraphicsPath()
&apos; Set up a points array.
Dim myPoints As Point() =  {New Point(20, 20), _
New Point(120, 120), New Point(20, 120), New Point(20, 20)}
&apos; Create a rectangle.
Dim myRect As New Rectangle(120, 120, 100, 100)
&apos; Add the points, rectangle, and an ellipse to the path.
myPath.AddLines(myPoints)
myPath.SetMarkers()
myPath.AddRectangle(myRect)
myPath.SetMarkers()
myPath.AddEllipse(220, 220, 100, 100)
&apos; Get the total number of points for the path, and arrays of the
&apos; points and types.
Dim myPathPointCount As Integer = myPath.PointCount
Dim myPathPoints As PointF() = myPath.PathPoints
Dim myPathTypes As Byte() = myPath.PathTypes
&apos; Set up variables for listing the array of points on the left side
&apos; of the screen.
Dim i As Integer
Dim j As Single = 20
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim myBrush As New SolidBrush(Color.Black)
&apos; List the set of points and types and types to the left side of
&apos; the screen.
For i = 0 To myPathPointCount - 1
e.Graphics.DrawString(myPathPoints(i).X.ToString() + &quot;, &quot; + _
myPathPoints(i).Y.ToString() + &quot;, &quot; + _
myPathTypes(i).ToString(), myFont, myBrush, 20, j)
j += 20
Next i
&apos; Create a GraphicsPathIterator for myPath and rewind it.
Dim myPathIterator As New GraphicsPathIterator(myPath)
myPathIterator.Rewind()
&apos; Set up the arrays to receive the copied data.
Dim points(myPathIterator.Count) As PointF
Dim types(myPathIterator.Count) As Byte
Dim myStartIndex As Integer
Dim myEndIndex As Integer
&apos; Increment the starting index to the second marker in the path.
myPathIterator.NextMarker(myStartIndex, myEndIndex)
myPathIterator.NextMarker(myStartIndex, myEndIndex)
&apos; Copy all the points and types from the starting index to the
&apos; ending index to the  points array and the types array
&apos; respectively.
Dim numPointsCopied As Integer = myPathIterator.CopyData(points, _
types, myStartIndex, myEndIndex)
&apos; List the copied points to the right side of the screen.
j = 20
Dim copiedStartIndex As Integer = 0
For i = 0 To numPointsCopied - 1
copiedStartIndex = myStartIndex + i
e.Graphics.DrawString(&quot;Point: &quot; + _
copiedStartIndex.ToString() + &quot;, Value: &quot; + _
points(i).ToString() + &quot;, Type: &quot; + types(i).ToString(), _
myFont, myBrush, 200, j)
j += 20
Next i
End Sub
        </code>
        <code lang="C#">public void CopyDataExample(PaintEventArgs e)
{
// Create a graphics path.
GraphicsPath myPath = new GraphicsPath();
// Set up a points array.
Point[] myPoints =
{
new Point(20, 20),
new Point(120, 120),
new Point(20, 120),
new Point(20, 20)
};
// Create a rectangle.
Rectangle myRect = new Rectangle(120, 120, 100, 100);
// Add the points, rectangle, and an ellipse to the path.
myPath.AddLines(myPoints);
myPath.SetMarkers();
myPath.AddRectangle(myRect);
myPath.SetMarkers();
myPath.AddEllipse(220, 220, 100, 100);
// Get the total number of points for the path, and arrays of
// the  points and types.
int myPathPointCount = myPath.PointCount;
PointF[] myPathPoints = myPath.PathPoints;
byte[] myPathTypes = myPath.PathTypes;
// Set up variables for listing the array of points on the left
// side of the screen.
int i;
float j = 20;
Font myFont = new Font(&quot;Arial&quot;, 8);
SolidBrush myBrush = new SolidBrush(Color.Black);
// List the set of points and types and types to the left side
// of the screen.
for(i=0; i&lt;myPathPointCount; i++)
{
e.Graphics.DrawString(myPathPoints[i].X.ToString()+
&quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +
myPathTypes[i].ToString(),
myFont,
myBrush,
20,
j);
j+=20;
}
// Create a GraphicsPathIterator for myPath and rewind it.
GraphicsPathIterator myPathIterator =
new GraphicsPathIterator(myPath);
myPathIterator.Rewind();
// Set up the arrays to receive the copied data.
PointF[] points = new PointF[myPathIterator.Count];
byte[] types = new byte[myPathIterator.Count];
int myStartIndex;
int myEndIndex;
// Increment the starting index to the second marker in the
// path.
myPathIterator.NextMarker(out myStartIndex, out myEndIndex);
myPathIterator.NextMarker(out myStartIndex, out myEndIndex);
// copy all the points and types from the starting index to the
// ending index to the points array and the types array
//respectively.
int numPointsCopied = myPathIterator.CopyData(
ref points,
ref types,
myStartIndex,
myEndIndex);
// List the copied points to the right side of the screen.
j = 20;
int copiedStartIndex = 0;
for(i=0; i&lt;numPointsCopied; i++)
{
copiedStartIndex = myStartIndex + i;
e.Graphics.DrawString(
&quot;Point: &quot; + copiedStartIndex.ToString() +
&quot;, Value: &quot; + points[i].ToString() +
&quot;, Type: &quot; + types[i].ToString(),
myFont,
myBrush,
200,
j);
j+=20;
}
}
        </code>
      </example>
      <remarks>
        <para>Use the <paramref name="startIndex"/> and <paramref name="endIndex"/> parameters to copy a specified range of the path data.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPathIterator.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)">
      <summary>
        <para>Copies the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints"/> property and <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes"/> property arrays of the associated <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object into the two specified arrays.</para>
      </summary>
      <param name="points">
        Upon return, contains an array of <see cref="T:System.Drawing.PointF"/> structures that represents the points in the path.
      </param>
      <param name="types">
        Upon return, contains an array of bytes that represents the types of points in the path.
      </param>
      <returns>
        <para>The number of points copied.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a graphics path.</term>
          </item>
          <item>
            <term>Populates it with several primitives and some markers.</term>
          </item>
          <item>
            <term>Lists the path data on the left side of the screen.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator"/> object and rewinds it.</term>
          </item>
          <item>
            <term>Increments the path data index to the second marker.</term>
          </item>
          <item>
            <term>Calls the <see langword="Enumerate"/> method to copy the path data to the <paramref name="points"/> and <paramref name="types"/> arrays.</term>
          </item>
          <item>
            <term>Lists this copied data on the right side of the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub EnumerateExample(e As PaintEventArgs)
Dim myPath As New GraphicsPath()
Dim myPoints As Point() =  {New Point(20, 20), _
New Point(120, 120), New Point(20, 120), New Point(20, 20)}
Dim myRect As New Rectangle(120, 120, 100, 100)
myPath.AddLines(myPoints)
myPath.AddRectangle(myRect)
myPath.AddEllipse(220, 220, 100, 100)
&apos; Get the total number of points for the path, and arrays of the
&apos; points and types.
Dim myPathPointCount As Integer = myPath.PointCount
Dim myPathPoints As PointF() = myPath.PathPoints
Dim myPathTypes As Byte() = myPath.PathTypes
&apos; Set up variables for listing the array of points on the left side
&apos; of the screen.
Dim i As Integer
Dim j As Single = 20
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim myBrush As New SolidBrush(Color.Black)
&apos; List the set of points and types and types to the left side of
&apos; the screen.
e.Graphics.DrawString(&quot;Original Data&quot;, myFont, myBrush, 20, j)
j += 20
For i = 0 To myPathPointCount - 1
e.Graphics.DrawString(myPathPoints(i).X.ToString() &amp; &quot;, &quot; &amp; _
myPathPoints(i).Y.ToString() &amp; &quot;, &quot; &amp; _
myPathTypes(i).ToString(), myFont, myBrush, 20, j)
j += 20
Next i
&apos; Create a GraphicsPathIterator for myPath.
Dim myPathIterator As New GraphicsPathIterator(myPath)
myPathIterator.Rewind()
Dim points(myPathIterator.Count) As PointF
Dim types(myPathIterator.Count) As Byte
Dim numPoints As Integer = myPathIterator.Enumerate(points, types)
&apos; Draw the set of copied points and types to the screen.
j = 20
e.Graphics.DrawString(&quot;Copied Data&quot;, myFont, myBrush, 200, j)
j += 20
For i = 0 To points.Length - 1
e.Graphics.DrawString(&quot;Point: &quot; &amp; i &amp; &quot;, &quot; &amp; &quot;Value: &quot; &amp; _
points(i).ToString() &amp; &quot;, &quot; &amp; &quot;Type: &quot; &amp; _
types(i).ToString(), myFont, myBrush, 200, j)
j += 20
Next i
End Sub
        </code>
        <code lang="C#">public void EnumerateExample(PaintEventArgs e)
{
GraphicsPath myPath = new GraphicsPath();
Point[] myPoints =
{
new Point(20, 20),
new Point(120, 120),
new Point(20, 120),
new Point(20, 20)
};
Rectangle myRect = new Rectangle(120, 120, 100, 100);
myPath.AddLines(myPoints);
myPath.AddRectangle(myRect);
myPath.AddEllipse(220, 220, 100, 100);
// Get the total number of points for the path, and arrays of
//the  points and types.
int myPathPointCount = myPath.PointCount;
PointF[] myPathPoints = myPath.PathPoints;
byte[] myPathTypes = myPath.PathTypes;
// Set up variables for listing the array of points on the left
// side of the screen.
int i;
float j = 20;
Font myFont = new Font(&quot;Arial&quot;, 8);
SolidBrush myBrush = new SolidBrush(Color.Black);
// List the set of points and types and types to the left side
// of the screen.
e.Graphics.DrawString(&quot;Original Data&quot;,
myFont,
myBrush,
20,
j);
j += 20;
for(i=0; i&lt;myPathPointCount; i++)
{
e.Graphics.DrawString(myPathPoints[i].X.ToString()+
&quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +
myPathTypes[i].ToString(),
myFont,
myBrush,
20,
j);
j+=20;
}
// Create a GraphicsPathIterator for myPath.
GraphicsPathIterator myPathIterator =
new GraphicsPathIterator(myPath);
myPathIterator.Rewind();
PointF[] points = new PointF[myPathIterator.Count];
byte[] types = new byte[myPathIterator.Count];
int numPoints = myPathIterator.Enumerate(ref points, ref types);
// Draw the set of copied points and types to the screen.
j = 20;
e.Graphics.DrawString(&quot;Copied Data&quot;,
myFont,
myBrush,
200,
j);
j += 20;
for(i=0; i&lt;points.Length; i++)
{
e.Graphics.DrawString(&quot;Point: &quot; + i +
&quot;, &quot; + &quot;Value: &quot; + points[i].ToString() + &quot;, &quot; +
&quot;Type: &quot; + types[i].ToString(),
myFont,
myBrush,
200,
j);
j+=20;
}
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve">
      <summary>
        <para>Indicates whether the path associated with this <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator"/> object contains a curve.</para>
      </summary>
      <returns>
        <para>This method returns <see langword="true"/> if the current subpath contains a curve; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object, <paramref name="myPath"/>.</term>
          </item>
          <item>
            <term>Adds three lines, a rectangle, and an ellipse.</term>
          </item>
          <item>
            <term>Creates a GraphicsPathIterator object for <paramref name="myPath"/>.</term>
          </item>
          <item>
            <term>Tests to see if the current path <paramref name="myPath"/> contains a curve.</term>
          </item>
          <item>
            <term>Shows the result of the test in a message box.</term>
          </item>
        </list>
        <code lang="VB">Public Sub HasCurveExample(e As PaintEventArgs)
Dim myPath As New GraphicsPath()
Dim myPoints As Point() =  {New Point(20, 20), _
New Point(120, 120), New Point(20, 120), New Point(20, 20)}
Dim myRect As New Rectangle(120, 120, 100, 100)
myPath.AddLines(myPoints)
myPath.AddRectangle(myRect)
myPath.AddEllipse(220, 220, 100, 100)
&apos; Create a GraphicsPathIterator for myPath.
Dim myPathIterator As New GraphicsPathIterator(myPath)
Dim myHasCurve As Boolean = myPathIterator.HasCurve()
MessageBox.Show(myHasCurve.ToString())
End Sub
        </code>
        <code lang="C#">private void HasCurveExample(PaintEventArgs e)
{
// Create a path and add three lines,
// a rectangle and an ellipse.
GraphicsPath myPath = new GraphicsPath();
Point[] myPoints =
{
new Point(20, 20),
new Point(120, 120),
new Point(20, 120),
new Point(20, 20)
};
Rectangle myRect = new Rectangle(120, 120, 100, 100);
myPath.AddLines(myPoints);
myPath.AddRectangle(myRect);
myPath.AddEllipse(220, 220, 100, 100);
// Create a GraphicsPathIterator for myPath.
GraphicsPathIterator myPathIterator = new
GraphicsPathIterator(myPath);
// Test for a curve.
bool myHasCurve = myPathIterator.HasCurve();
// Show the test result.
MessageBox.Show(myHasCurve.ToString());
}
        </code>
      </example>
      <remarks>
        <para>All curves in a path are stored as sequences of B&#233;zier splines. For example, when you add an ellipse to a path, you specify the upper-left corner, the width, and the height of the ellipse&apos;s bounding rectangle. Those numbers (upper-left corner, width, and height) are not stored in the path; instead; the ellipse is converted to a sequence of four B&#233;zier splines. The path stores the endpoints and control points of those B&#233;zier splines.</para>
        <para>A path stores an array of data points, each of which belongs to a line or a B&#233;zier spline. If some of the points in the array belong to B&#233;zier splines, then <see langword="HasCurve"/> returns <see langword="true"/>. If all points in the array belong to lines, then <see langword="HasCurve"/> returns <see langword="false"/>.</para>
        <para>Certain methods flatten a path, which means that all the curves in the path are converted to sequences of lines. After a path has been flattened, <see langword="HasCurve"/> will always return <see langword="false"/>. Calling the <see langword="Flatten"/>, <see langword="Widen"/>, or <see langword="Warp"/> method of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> class will flatten a path.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)">
      <overload>
        Moves the iterator to the next marker in the path.
      </overload>
      <summary>
        <para>This <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator"/> object has a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object associated with it. The <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker"/> method increments the associated <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object to the next marker in its path and copies all the points contained between the current marker and the next marker (or end of path) to a second <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object passed in to the parameter.</para>
      </summary>
      <param name="path">
        The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object to which the points will be copied.
      </param>
      <returns>
        <para>The number of points between this marker and the next.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</term>
          </item>
          <item>
            <term>Adds three lines, a rectangle, and an ellipse &#190; plus a couple of markers.</term>
          </item>
          <item>
            <term>Lists the values of all the path&apos;s points to the left side of the screen.</term>
          </item>
          <item>
            <term>Creates a <see langword="GraphicsPathIterator "/>object.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object, <paramref name="myPathSection"/>, to receive copied points.</term>
          </item>
          <item>
            <term>Calls the <see langword="NextMarker(GraphicsPath)"/> method, which iterates to the first marker and copies all the points contained between that marker and the next to <paramref name="myPathSection"/>.</term>
          </item>
          <item>
            <term>Returns the number of points copied to <paramref name="markerPoints"/>.</term>
          </item>
          <item>
            <term>Lists the marker number (the first marker) and number of points it contains to the right side of the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub NextMarkerExample2(e As PaintEventArgs)
&apos; Create a graphics path.
Dim myPath As New GraphicsPath()
&apos; Set up primitives to add to myPath.
Dim myPoints As Point() =  {New Point(20, 20), _
New Point(120, 120), New Point(20, 120), New Point(20, 20)}
Dim myRect As New Rectangle(120, 120, 100, 100)
&apos; Add 3 lines, a rectangle, an ellipse, and 2 markers.
myPath.AddLines(myPoints)
myPath.SetMarkers()
myPath.AddRectangle(myRect)
myPath.SetMarkers()
myPath.AddEllipse(220, 220, 100, 100)
&apos; Get the total number of points for the path,
&apos; and the arrays of the points and types.
Dim myPathPointCount As Integer = myPath.PointCount
Dim myPathPoints As PointF() = myPath.PathPoints
Dim myPathTypes As Byte() = myPath.PathTypes
&apos; Set up variables for drawing the array
&apos; of points to the screen.
Dim i As Integer
Dim j As Single = 20
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim myBrush As New SolidBrush(Color.Black)
&apos; Draw the set of path points and types to the screen.
For i = 0 To myPathPointCount - 1
e.Graphics.DrawString(myPathPoints(i).X.ToString() + _
&quot;, &quot; + myPathPoints(i).Y.ToString() + &quot;, &quot; + _
myPathTypes(i).ToString(), myFont, myBrush, 20, j)
j += 20
Next i
&apos; Create a GraphicsPathIterator.
Dim myPathIterator As New GraphicsPathIterator(myPath)
&apos; Rewind the iterator.
myPathIterator.Rewind()
&apos; Create a GraphicsPath section.
Dim myPathSection As New GraphicsPath()
&apos; List the points contained in the first marker
&apos; to the screen.
Dim markerPoints As Integer
markerPoints = myPathIterator.NextMarker(myPathSection)
e.Graphics.DrawString(&quot;Marker: 1&quot; + &quot;  Num Points: &quot; + _
markerPoints.ToString(), myFont, myBrush, 200, 20)
End Sub
        </code>
        <code lang="C#">public void NextMarkerExample2(PaintEventArgs e)
{
// Create a graphics path.
GraphicsPath myPath = new GraphicsPath();
// Set up primitives to add to myPath.
Point[] myPoints =
{
new Point(20, 20),
new Point(120, 120),
new Point(20, 120),
new Point(20, 20)
};
Rectangle myRect = new Rectangle(120, 120, 100, 100);
// Add 3 lines, a rectangle, an ellipse, and 2 markers.
myPath.AddLines(myPoints);
myPath.SetMarkers();
myPath.AddRectangle(myRect);
myPath.SetMarkers();
myPath.AddEllipse(220, 220, 100, 100);
// Get the total number of points for the path,
// and the arrays of the points and types.
int myPathPointCount = myPath.PointCount;
PointF[] myPathPoints = myPath.PathPoints;
byte[] myPathTypes = myPath.PathTypes;
// Set up variables for listing all the values of the path&apos;s
// points to the screen.
int i;
float j = 20;
Font myFont = new Font(&quot;Arial&quot;, 8);
SolidBrush myBrush = new SolidBrush(Color.Black);
// List the values for all of path points and types to
// the left side of the screen.
for(i=0; i&lt;myPathPointCount; i++)
{
e.Graphics.DrawString(myPathPoints[i].X.ToString()+
&quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +
myPathTypes[i].ToString(),
myFont,
myBrush,
20,
j);
j+=20;
}
// Create a GraphicsPathIterator.
GraphicsPathIterator myPathIterator = new
GraphicsPathIterator(myPath);
// Rewind the iterator.
myPathIterator.Rewind();
// Create a GraphicsPath to receive a section of myPath.
GraphicsPath myPathSection = new GraphicsPath();
// Retrieve and list the number of points contained in
// the first marker to the right side of the screen.
int markerPoints;
markerPoints = myPathIterator.NextMarker(myPathSection);
e.Graphics.DrawString(&quot;Marker: 1&quot; +
&quot;  Num Points: &quot; +
markerPoints.ToString(),
myFont,
myBrush,
200,
20);
}
        </code>
      </example>
      <remarks>
        <para>Use the <see cref="M:System.Drawing.Drawing2D.GraphicsPath.SetMarkers"/> method to set markers in a path. Markers are used to create groups of subpaths. One or more subpaths can be between two markers.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)">
      <summary>
        <para>Increments the <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator"/> object to the next marker in the path and returns the start and stop indexes by way of the out parameters.</para>
      </summary>
      <param name="startIndex">
        [out] The integer reference supplied to this parameter receives the index of the point that starts a subpath.
      </param>
      <param name="endIndex">
        [out] The integer reference supplied to this parameter receives the index of the point that ends the subpath to which <paramref name="startIndex"/> points.
      </param>
      <returns>
        <para>The number of points between this marker and the next.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</term>
          </item>
          <item>
            <term>Adds three lines, a rectangle, and an ellipse &#190; with markers between each.</term>
          </item>
          <item>
            <term>Draws the values for the array of points to the screen.</term>
          </item>
          <item>
            <term>Creates a <see langword="GraphicsPathIterator "/>object.</term>
          </item>
          <item>
            <term>Calls the <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker"/> method.</term>
          </item>
          <item>
            <term>Uses the values returned from the iterative calls to <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker"/> to draw the start and stop points for each marker to the screen.</term>
          </item>
          <item>
            <term>Draws the value for the total number of points to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub NextMarkerExample(e As PaintEventArgs)
&apos; Create the GraphicsPath.
Dim myPath As New GraphicsPath()
Dim myPoints As Point() =  {New Point(20, 20), _
New Point(120, 120), New Point(20, 120), New Point(20, 20)}
Dim myRect As New Rectangle(120, 120, 100, 100)
&apos; Add 3 lines, a rectangle, an ellipse, and 2 markers.
myPath.AddLines(myPoints)
myPath.SetMarkers()
myPath.AddRectangle(myRect)
myPath.SetMarkers()
myPath.AddEllipse(220, 220, 100, 100)
&apos; Get the total number of points for the path,
&apos; and the arrays of the points and types.
Dim myPathPointCount As Integer = myPath.PointCount
Dim myPathPoints As PointF() = myPath.PathPoints
Dim myPathTypes As Byte() = myPath.PathTypes
&apos; Set up variables for drawing the array of points to the screen.
Dim i As Integer
Dim j As Single = 20
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim myBrush As New SolidBrush(Color.Black)
&apos; Draw the set of path points and types to the screen.
For i = 0 To myPathPointCount - 1
e.Graphics.DrawString(myPathPoints(i).X.ToString() + &quot;, &quot; + _
myPathPoints(i).Y.ToString() + &quot;, &quot; + _
myPathTypes(i).ToString(), myFont, myBrush, 20, j)
j += 20
Next i
&apos; Create a GraphicsPathIterator.
Dim myPathIterator As New GraphicsPathIterator(myPath)
Dim myStartIndex As Integer
Dim myEndIndex As Integer
&apos; Rewind the Iterator.
myPathIterator.Rewind()
&apos; Draw the Markers and their start and end points to the screen.
j = 20
For i = 0 To 2
myPathIterator.NextMarker(myStartIndex, myEndIndex)
e.Graphics.DrawString(&quot;Marker &quot; + i.ToString() + &quot;:  _
Start: &quot; + myStartIndex.ToString() + &quot;  End: &quot; + _
myEndIndex.ToString(), myFont, myBrush, 200, j)
j += 20
Next i
&apos; Draw the total number of points to the screen.
j += 20
Dim myPathTotalPoints As Integer = myPathIterator.Count
e.Graphics.DrawString(&quot;Total Points = &quot; + _
myPathTotalPoints.ToString(), myFont, myBrush, 200, j)
End Sub
        </code>
        <code lang="C#">private void NextMarkerExample(PaintEventArgs e)
{
// Create the GraphicsPath.
GraphicsPath myPath = new GraphicsPath();
Point[] myPoints =
{
new Point(20, 20),
new Point(120, 120),
new Point(20, 120),
new Point(20, 20)
};
Rectangle myRect = new Rectangle(120, 120, 100, 100);
// Add 3 lines, a rectangle, an ellipse, and 2 markers.
myPath.AddLines(myPoints);
myPath.SetMarkers();
myPath.AddRectangle(myRect);
myPath.SetMarkers();
myPath.AddEllipse(220, 220, 100, 100);
// Get the total number of points for the path,
// and the arrays of the points and types.
int myPathPointCount = myPath.PointCount;
PointF[] myPathPoints = myPath.PathPoints;
byte[] myPathTypes = myPath.PathTypes;
// Set up variables for drawing the array
// of points to the screen.
int i;
float j = 20;
Font myFont = new Font(&quot;Arial&quot;, 8);
SolidBrush myBrush = new SolidBrush(Color.Black);
// Draw the set of path points and types to the screen.
for(i=0; i&lt;myPathPointCount; i++)
{
e.Graphics.DrawString(myPathPoints[i].X.ToString()+
&quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +
myPathTypes[i].ToString(),
myFont,
myBrush,
20,
j);
j+=20;
}
// Create a GraphicsPathIterator.
GraphicsPathIterator myPathIterator = new
GraphicsPathIterator(myPath);
int myStartIndex;
int myEndIndex;
// Rewind the Iterator.
myPathIterator.Rewind();
// Draw the Markers and their start and end points
// to the screen.
j=20;
for(i=0;i&lt;3;i++)
{
myPathIterator.NextMarker(out myStartIndex, out myEndIndex);
e.Graphics.DrawString(&quot;Marker &quot; + i.ToString() +
&quot;:  Start: &quot; + myStartIndex.ToString()+
&quot;  End: &quot; + myEndIndex.ToString(),
myFont,
myBrush,
200,
j);
j += 20;
}
// Draw the total number of points to the screen.
j += 20;
int myPathTotalPoints = myPathIterator.Count;
e.Graphics.DrawString(&quot;Total Points = &quot; +
myPathTotalPoints.ToString(),
myFont,
myBrush,
200,
j);
}
        </code>
      </example>
      <remarks>
        <para>Use the <see cref="M:System.Drawing.Drawing2D.GraphicsPath.SetMarkers"/> method to set markers in a path. Markers are used to create groups of subpaths. One or more subpaths can be between two markers.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)">
      <summary>
        <para>Gets the starting index and the ending index of the next group of data points that all have the same type.</para>
      </summary>
      <param name="pathType">
        [out] Receives the point type shared by all points in the group. Possible types can be retrieved from the <see cref="T:System.Drawing.Drawing2D.PathPointType"/> enumeration.
      </param>
      <param name="startIndex">
        [out] Receives the starting index of the group of points.
      </param>
      <param name="endIndex">
        [out] Receives the ending index of the group of points.
      </param>
      <returns>
        <para>This method returns the number of data points in the group. If there are no more groups in the path, this method returns 0.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</term>
          </item>
          <item>
            <term>Adds three lines, a rectangle, and an ellipse.</term>
          </item>
          <item>
            <term>Lists the values of all the points to the left side of the screen.</term>
          </item>
          <item>
            <term>Creates a <see langword="GraphicsPathIterator "/>object and rewinds it.</term>
          </item>
          <item>
            <term>In a <see langword="for"/> loop, iterates through the points using the <see langword="NextSubpath"/> and <see langword="NextPathType"/> methods.</term>
          </item>
          <item>
            <term>Uses the values returned from the iterative calls to list the subpath number, the number of points in it, and the type of the path points to the right side of the screen.</term>
          </item>
          <item>
            <term>Displays the value for the total number of points to the screen.</term>
          </item>
        </list>
        <para>Note that <see langword="ListPathPoints"/> is a helper function that separates most (not all) of the display code from the graphics path code.</para>
        <code lang="VB">Public Sub NextPathTypeExample(e As PaintEventArgs)
&apos; Create the GraphicsPath.
Dim myPath As New GraphicsPath()
Dim myPoints As Point() =  {New Point(20, 20), _
New Point(120, 120), New Point(20, 120), New Point(20, 20)}
Dim myRect As New Rectangle(120, 120, 100, 100)
&apos; Add 3 lines, a rectangle, and an ellipse.
myPath.AddLines(myPoints)
myPath.AddRectangle(myRect)
myPath.AddEllipse(220, 220, 100, 100)
&apos; List all of the path points to the screen.
ListPathPointsHelper(e, myPath, Nothing, 20, 1)
&apos; Create a GraphicsPathIterator.
Dim myPathIterator As New GraphicsPathIterator(myPath)
&apos; Rewind the Iterator.
myPathIterator.Rewind()
&apos; Iterate the subpaths and types, and list the results
&apos; to the screen.
Dim j As Integer = 20
Dim i As Integer
Dim mySubPaths, subPathStartIndex, subPathEndIndex As Integer
Dim IsClosed As [Boolean]
Dim subPathPointType As Byte
Dim pointTypeStartIndex, pointTypeEndIndex, _
numPointsFound As Integer
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim myBrush As New SolidBrush(Color.Black)
j = 20
For i = 0 To 2
mySubPaths = myPathIterator.NextSubpath(subPathStartIndex, _
subPathEndIndex, IsClosed)
numPointsFound = myPathIterator.NextPathType(subPathPointType, _
pointTypeStartIndex, pointTypeEndIndex)
e.Graphics.DrawString(&quot;SubPath: &quot; &amp; i &amp; &quot;  Points Found: &quot; &amp; _
numPointsFound.ToString() &amp; &quot;  Type of Points: &quot; &amp; _
subPathPointType.ToString(), myFont, myBrush, 200, j)
j += 20
Next i
&apos; List the total number of path points to the screen.
ListPathPointsHelper(e, myPath, myPathIterator, 200, 2)
End Sub
&apos; This is a helper function used by NextPathTypeExample.
Public Sub ListPathPointsHelper(e As PaintEventArgs, _
myPath As GraphicsPath, myPathIterator As GraphicsPathIterator, _
xOffset As Integer, listType As Integer)
&apos; Get the total number of points for the path,
&apos; and the arrays of the points and types.
Dim myPathPointCount As Integer = myPath.PointCount
Dim myPathPoints As PointF() = myPath.PathPoints
Dim myPathTypes As Byte() = myPath.PathTypes
&apos; Set up variables for drawing the points to the screen.
Dim i As Integer
Dim j As Single = 20
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim myBrush As New SolidBrush(Color.Black)
If listType = 1 Then &apos; List all the path points to the screen.
&apos; Draw the set of path points and types to the screen.
For i = 0 To myPathPointCount - 1
e.Graphics.DrawString(myPathPoints(i).X.ToString() + &quot;, &quot; + _
myPathPoints(i).Y.ToString() + &quot;, &quot; + _
myPathTypes(i).ToString(), myFont, myBrush, xOffset, j)
j += 20
Next i
Else
If listType = 2 Then &apos; Display the total number of path points.
&apos; Draw the total number of points to the screen.
Dim myPathTotalPoints As Integer = myPathIterator.Count
e.Graphics.DrawString(&quot;Total Points = &quot; + _
myPathTotalPoints.ToString(), myFont, myBrush, xOffset, _
100)
Else
e.Graphics.DrawString(&quot;Wrong or no list type argument.&quot;, _
myFont, myBrush, xOffset, 200)
End If
End If
End Sub
        </code>
        <code lang="C#">public void NextPathTypeExample(PaintEventArgs e)
{
// Create the GraphicsPath.
GraphicsPath myPath = new GraphicsPath();
Point[] myPoints =
{
new Point(20, 20),
new Point(120, 120),
new Point(20, 120),
new Point(20, 20)
};
Rectangle myRect = new Rectangle(120, 120, 100, 100);
// Add 3 lines, a rectangle, and an ellipse.
myPath.AddLines(myPoints);
myPath.AddRectangle(myRect);
myPath.AddEllipse(220, 220, 100, 100);
// List all of the path points to the screen.
ListPathPoints(e, myPath, null, 20, 1);
// Create a GraphicsPathIterator.
GraphicsPathIterator myPathIterator = new
GraphicsPathIterator(myPath);
// Rewind the Iterator.
myPathIterator.Rewind();
// Iterate the subpaths and types, and list the results to
// the screen.
int i, j = 20;
int mySubPaths, subPathStartIndex, subPathEndIndex;
Boolean IsClosed;
byte subPathPointType;
int pointTypeStartIndex,  pointTypeEndIndex, numPointsFound;
Font myFont = new Font(&quot;Arial&quot;, 8);
SolidBrush myBrush = new SolidBrush(Color.Black);
j = 20;
for(i = 0;i &lt; 3; i++)
{
mySubPaths = myPathIterator.NextSubpath(
out subPathStartIndex,
out subPathEndIndex,
out IsClosed);
numPointsFound = myPathIterator.NextPathType(
out subPathPointType,
out pointTypeStartIndex,
out pointTypeEndIndex);
e.Graphics.DrawString(
&quot;SubPath: &quot; + i +
&quot;  Points Found: &quot; + numPointsFound.ToString() +
&quot;  Type of Points: &quot; + subPathPointType.ToString(),
myFont,
myBrush,
200,
j);
j+=20;
}
// List the total number of path points to the screen.
ListPathPoints(e, myPath, myPathIterator, 200, 2);
}
//-------------------------------------------------------
//This function is a helper function used by
// NextPathTypeExample.
//-------------------------------------------------------
public void ListPathPoints(
PaintEventArgs e,
GraphicsPath myPath,
GraphicsPathIterator myPathIterator,
int xOffset,
int listType)
{
// Get the total number of points for the path,
// and the arrays of the points and types.
int myPathPointCount = myPath.PointCount;
PointF[] myPathPoints = myPath.PathPoints;
byte[] myPathTypes = myPath.PathTypes;
// Set up variables for drawing the points to the screen.
int i;
float j = 20;
Font myFont = new Font(&quot;Arial&quot;, 8);
SolidBrush myBrush = new SolidBrush(Color.Black);
if (listType == 1) // List all the path points to the screen.
{
// Draw the set of path points and types to the screen.
for(i=0; i&lt;myPathPointCount; i++)
{
e.Graphics.DrawString(myPathPoints[i].X.ToString()+
&quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +
myPathTypes[i].ToString(),
myFont,
myBrush,
xOffset,
j);
j+=20;
}
}
else if (listType == 2) // Display the total number of path points.
{
// Draw the total number of points to the screen.
int myPathTotalPoints = myPathIterator.Count;
e.Graphics.DrawString(&quot;Total Points = &quot; +
myPathTotalPoints.ToString(),
myFont,
myBrush,
xOffset,
100);
}
else
{
e.Graphics.DrawString(&quot;Wrong or no list type argument.&quot;,
myFont,
myBrush,
xOffset,
200);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)">
      <overload>
        Moves the subpath to the next subpath in the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.
      </overload>
      <summary>
        <para>Gets the next figure (subpath) from this <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator"/> object&apos;s associated path.</para>
      </summary>
      <param name="path">
        A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object that is to have its data points set to match the data points of the retrieved figure (subpath) for this iterator.
      </param>
      <param name="isClosed">
        [out] Indicates whether the current subpath is closed. It is <see langword="true"/> if the if the figure is closed, otherwise it is <see langword="false"/>.
      </param>
      <returns>
        <para>The number of data points in the retrieved figure (subpath). If there are no more figures to retrieve, zero is returned.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</term>
          </item>
          <item>
            <term>Adds three lines, a rectangle, and an ellipse &#190; plus a couple of markers.</term>
          </item>
          <item>
            <term>Lists the values of all the path&apos;s points to the left side of the screen.</term>
          </item>
          <item>
            <term>Creates a <see langword="GraphicsPathIterator "/>object.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object, <paramref name="myPathSection"/>, to receive copied points.</term>
          </item>
          <item>
            <term>Calls the <see langword="NextSubpath(GraphicsPath)"/> method, which iterates to the third subpath (figure) and copies all the points contained in that subpath to the <paramref name="myPathSection"/> path, and also returns the number of points copied to <paramref name="subpathPoints"/>.</term>
          </item>
          <item>
            <term>Lists the subpath number and number of points it contains to the right side of the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub NextSubpathExample2(e As PaintEventArgs)
&apos; Create a graphics path.
Dim myPath As New GraphicsPath()
&apos; Set up primitives to add to myPath.
Dim myPoints As Point() =  {New Point(20, 20), +
New Point(120, 120), New Point(20, 120), New Point(20, 20)}
Dim myRect As New Rectangle(120, 120, 100, 100)
&apos; Add 3 lines, a rectangle, an ellipse, and 2 markers.
myPath.AddLines(myPoints)
myPath.SetMarkers()
myPath.AddRectangle(myRect)
myPath.SetMarkers()
myPath.AddEllipse(220, 220, 100, 100)
&apos; Get the total number of points for the path,
&apos; and the arrays of the points and types.
Dim myPathPointCount As Integer = myPath.PointCount
Dim myPathPoints As PointF() = myPath.PathPoints
Dim myPathTypes As Byte() = myPath.PathTypes
&apos; Set up variables for drawing the array
&apos; of points to the screen.
Dim i As Integer
Dim j As Single = 20
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim myBrush As New SolidBrush(Color.Black)
&apos; Draw the set of path points and types to the screen.
For i = 0 To myPathPointCount - 1
e.Graphics.DrawString(myPathPoints(i).X.ToString() + _
&quot;, &quot; + myPathPoints(i).Y.ToString() + &quot;, &quot; + _
myPathTypes(i).ToString(), myFont, myBrush, 20, j)
j += 20
Next i
&apos; Create a GraphicsPathIterator for myPath.
Dim myPathIterator As New GraphicsPathIterator(myPath)
&apos; Rewind the iterator.
myPathIterator.Rewind()
&apos; Create the GraphicsPath section.
Dim myPathSection As New GraphicsPath()
&apos; Draw the 3rd subpath and the number of points therein
&apos; to the screen.
Dim subpathPoints As Integer
Dim IsClosed2 As Boolean
&apos; Iterate to the third subpath.
subpathPoints = myPathIterator.NextSubpath(myPathSection, _
IsClosed2)
subpathPoints = myPathIterator.NextSubpath(myPathSection, _
IsClosed2)
subpathPoints = myPathIterator.NextSubpath(myPathSection, _
IsClosed2)
&apos; Write the number of subpath points to the screen.
e.Graphics.DrawString(&quot;Subpath: 3&quot; + &quot;   Num Points: &quot; + _
subpathPoints.ToString(), myFont, myBrush, 200, 20)
End Sub
        </code>
        <code lang="C#">public void NextSubpathExample2(PaintEventArgs e)
{
// Create a graphics path.
GraphicsPath myPath = new GraphicsPath();
// Set up primitives to add to myPath.
Point[] myPoints =
{
new Point(20, 20),
new Point(120, 120),
new Point(20, 120),
new Point(20, 20)
};
Rectangle myRect = new Rectangle(120, 120, 100, 100);
// Add 3 lines, a rectangle, an ellipse, and 2 markers.
myPath.AddLines(myPoints);
myPath.SetMarkers();
myPath.AddRectangle(myRect);
myPath.SetMarkers();
myPath.AddEllipse(220, 220, 100, 100);
// Get the total number of points for the path,
// and the arrays of the points and types.
int myPathPointCount = myPath.PointCount;
PointF[] myPathPoints = myPath.PathPoints;
byte[] myPathTypes = myPath.PathTypes;
// Set up variables for listing all of the path&apos;s
// points to the screen.
int i;
float j = 20;
Font myFont = new Font(&quot;Arial&quot;, 8);
SolidBrush myBrush = new SolidBrush(Color.Black);
// List the values of all the path points and types to the screen.
for(i=0; i&lt;myPathPointCount; i++)
{
e.Graphics.DrawString(myPathPoints[i].X.ToString()+
&quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +
myPathTypes[i].ToString(),
myFont,
myBrush,
20,
j);
j+=20;
}
// Create a GraphicsPathIterator for myPath.
GraphicsPathIterator myPathIterator = new
GraphicsPathIterator(myPath);
// Rewind the iterator.
myPathIterator.Rewind();
// Create the GraphicsPath section.
GraphicsPath myPathSection = new GraphicsPath();
// Iterate to the 3rd subpath and list the number of points therein
// to the screen.
int subpathPoints;
bool IsClosed2;
// Iterate to the third subpath.
subpathPoints = myPathIterator.NextSubpath(
myPathSection, out IsClosed2);
subpathPoints = myPathIterator.NextSubpath(
myPathSection, out IsClosed2);
subpathPoints = myPathIterator.NextSubpath(
myPathSection, out IsClosed2);
// Write the number of subpath points to the screen.
e.Graphics.DrawString(&quot;Subpath: 3&quot;  +
&quot;   Num Points: &quot; +
subpathPoints.ToString(),
myFont,
myBrush,
200,
20);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)">
      <summary>
        <para>Moves the <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator"/> object to the next subpath in the path. The start index and end index of the next subpath are contained in the [out] parameters.</para>
      </summary>
      <param name="startIndex">
        [out] Receives the starting index of the next subpath.
      </param>
      <param name="endIndex">
        [out] Receives the ending index of the next subpath.
      </param>
      <param name="isClosed">
        [out] Indicates whether the subpath is closed.
      </param>
      <returns>
        <para>The number of subpaths in the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</term>
          </item>
          <item>
            <term>Adds three lines, a rectangle, and an ellipse.</term>
          </item>
          <item>
            <term>Draws the values for the array of points to the screen.</term>
          </item>
          <item>
            <term>Creates a <see langword="GraphicsPathIterator "/>object.</term>
          </item>
          <item>
            <term>Calls the <see langword="NextSubpath"/> method.</term>
          </item>
          <item>
            <term>Uses the values returned from the iterative calls to <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubPath"/> to draw the start and stop values for each subpath to the screen.</term>
          </item>
          <item>
            <term>Draws the value for the total number of subpaths to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub NextSubpathExample(e As PaintEventArgs)
&apos; Create the GraphicsPath.
Dim myPath As New GraphicsPath()
Dim myPoints As Point() =  {New Point(20, 20), _
New Point(120, 120), New Point(20, 120), New Point(20, 20)}
Dim myRect As New Rectangle(120, 120, 100, 100)
&apos; Add 3 lines, a rectangle, an ellipse, and 2 markers.
myPath.AddLines(myPoints)
myPath.AddRectangle(myRect)
myPath.AddEllipse(220, 220, 100, 100)
&apos; Get the total number of points for the path,
&apos; and the arrays of the points and types.
Dim myPathPointCount As Integer = myPath.PointCount
Dim myPathPoints As PointF() = myPath.PathPoints
Dim myPathTypes As Byte() = myPath.PathTypes
&apos; Set up variables for drawing the array of points to the screen.
Dim i As Integer
Dim j As Single = 20
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim myBrush As New SolidBrush(Color.Black)
&apos; Draw the set of path points and types to the screen.
For i = 0 To myPathPointCount - 1
e.Graphics.DrawString(myPathPoints(i).X.ToString() + &quot;, &quot; + _
myPathPoints(i).Y.ToString() + &quot;, &quot; + _
myPathTypes(i).ToString(), myFont, myBrush, 20, j)
j += 20
Next i
&apos; Create a GraphicsPathIterator.
Dim myPathIterator As New GraphicsPathIterator(myPath)
Dim myStartIndex As Integer
Dim myEndIndex As Integer
Dim myIsClosed As Boolean
&apos; get the number of Subpaths.
Dim numSubpaths As Integer = myPathIterator.NextSubpath(myPath, _
myIsClosed)
numSubpaths -= 1
&apos; Rewind the Iterator.
myPathIterator.Rewind()
&apos; List the Subpaths to the screen.
j = 20
For i = 0 To numSubpaths - 1
myPathIterator.NextSubpath(myStartIndex, myEndIndex, _
myIsClosed)
e.Graphics.DrawString(&quot;Subpath &quot; + i.ToString() + _
&quot;:  Start: &quot; + myStartIndex.ToString() + &quot;  End: &quot; + _
myEndIndex.ToString() + &quot;  IsClosed: &quot; + _
myIsClosed.ToString(), myFont, myBrush, 200, j)
j += 20
Next i
&apos; Draw the total number of Subpaths to the screen.
j += 20
e.Graphics.DrawString(&quot;Number Subpaths = &quot; + _
numSubpaths.ToString(), myFont, myBrush, 200, j)
End Sub
        </code>
        <code lang="C#">private void NextSubpathExample(PaintEventArgs e)
{
// Create the GraphicsPath.
GraphicsPath myPath = new GraphicsPath();
Point[] myPoints =
{
new Point(20, 20),
new Point(120, 120),
new Point(20, 120),
new Point(20, 20)
};
Rectangle myRect = new Rectangle(120, 120, 100, 100);
// Add 3 lines, a rectangle, an ellipse, and 2 markers.
myPath.AddLines(myPoints);
myPath.AddRectangle(myRect);
myPath.AddEllipse(220, 220, 100, 100);
// Get the total number of points for the path,
// and the arrays of the points and types.
int myPathPointCount = myPath.PointCount;
PointF[] myPathPoints = myPath.PathPoints;
byte[] myPathTypes = myPath.PathTypes;
// Set up variables for drawing the array of
// points to the screen.
int i;
float j = 20;
Font myFont = new Font(&quot;Arial&quot;, 8);
SolidBrush myBrush = new SolidBrush(Color.Black);
// Draw the set of path points and types to the screen.
for(i=0; i&lt;myPathPointCount; i++)
{
e.Graphics.DrawString(myPathPoints[i].X.ToString()+
&quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +
myPathTypes[i].ToString(),
myFont,
myBrush,
20,
j);
j+=20;
}
// Create a GraphicsPathIterator.
GraphicsPathIterator myPathIterator = new
GraphicsPathIterator(myPath);
int myStartIndex;
int myEndIndex;
bool myIsClosed;
// get the number of Subpaths.
int numSubpaths = myPathIterator.NextSubpath(myPath,
out myIsClosed);
numSubpaths -= 1;
// Rewind the Iterator.
myPathIterator.Rewind();
// List the Subpaths to the screen.
j=20;
for(i=0;i&lt;numSubpaths;i++)
{
myPathIterator.NextSubpath(out myStartIndex,
out myEndIndex,
out myIsClosed);
e.Graphics.DrawString(&quot;Subpath &quot; + i.ToString() +
&quot;:  Start: &quot; + myStartIndex.ToString()+
&quot;  End: &quot; + myEndIndex.ToString() +
&quot;  IsClosed: &quot; + myIsClosed.ToString(),
myFont,
myBrush,
200,
j);
j += 20;
}
// Draw the total number of Subpaths to the screen.
j += 20;
e.Graphics.DrawString(&quot;Number Subpaths = &quot; +
numSubpaths.ToString(),
myFont,
myBrush,
200,
j);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind">
      <summary>
        <para>Rewinds this <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator"/> object to the beginning of its associated path.</para>
      </summary>
      <remarks>
        <para>The first time you call the <see langword="NextSubpath"/> method of an iterator, it gets the first figure (subpath) of that iterator&apos;s associated path. The second time, it gets the second figure, and so on. When you call the <see langword="Rewind"/> method, the sequence starts over; that is, after you call <see langword="Rewind"/>, the next call to <see langword="NextSubpath"/> gets the first figure in the path. The <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker"/> and <see langword="NextPathType"/> methods behave similarly.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.GraphicsPathIterator.Count">
      <summary>
        <para>Gets the number of points in the path.</para>
      </summary>
      <value>
        <para>The number of points in the path.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount">
      <summary>
        <para>Gets the number of subpaths in the path.</para>
      </summary>
      <value>
        <para>The number of subpaths in the path.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Drawing2D.GraphicsState">
      <summary>
        <para>Represents the state of a <see cref="T:System.Drawing.Graphics"/> object. This object is returned by a call to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> methods. This class cannot be inherited.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.HatchBrush">
      <summary>
        <para>Defines a rectangular brush with a hatch style, a foreground color, and a background color. This class cannot be inherited.</para>
      </summary>
      <remarks>
        <para>There are six hatch styles. The foreground color defines the color of lines; the background color defines the color of gaps between the lines.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.HatchBrush.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.HatchBrush"/> class with the specified <see langword="HatchStyle"/> enumeration and foreground color.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.HatchBrush"/> class with the specified <see langword="HatchStyle"/> enumeration and foreground color.</para>
      </summary>
      <param name="hatchstyle">
        The <see langword="HatchStyle"/> enumeration that represents the pattern drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush"/>.
      </param>
      <param name="foreColor">
        The <see cref="T:System.Drawing.Color"/> structure that represents the color of lines drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush"/>.
      </param>
      <remarks>
        <para>The background color is initialized to black.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.HatchBrush.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.HatchBrush"/> class with the specified <see langword="HatchStyle"/> enumeration, foreground color, and background color.</para>
      </summary>
      <param name="hatchstyle">
        The <see langword="HatchStyle"/> enumeration that represents the pattern drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush"/>.
      </param>
      <param name="foreColor">
        The <see cref="T:System.Drawing.Color"/> structure that represents the color of lines drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush"/>.
      </param>
      <param name="backColor">
        The <see cref="T:System.Drawing.Color"/> structure that represents the color of spaces between the lines drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.HatchBrush.Clone">
      <summary>
        <para>Creates an exact copy of this <see cref="T:System.Drawing.Drawing2D.HatchBrush"/> object.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.Drawing2D.HatchBrush"/> this method creates, cast as an object.</para>
      </returns>
    </member>

    <member name="P:System.Drawing.Drawing2D.HatchBrush.BackgroundColor">
      <summary>
        <para>Gets the color of spaces between the hatch lines drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that represents the background color for this <see cref="T:System.Drawing.Drawing2D.HatchBrush"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.HatchBrush.ForegroundColor">
      <summary>
        <para>Gets the color of hatch lines drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that represents the foreground color for this <see cref="T:System.Drawing.Drawing2D.HatchBrush"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.HatchBrush.HatchStyle">
      <summary>
        <para>Gets the hatch style of this <see cref="T:System.Drawing.Drawing2D.HatchBrush"/> object.</para>
      </summary>
      <value>
        <para>A <see langword="HatchStyle"/> enumeration that represents the pattern of this <see cref="T:System.Drawing.Drawing2D.HatchBrush"/>.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Drawing2D.LinearGradientBrush">
      <summary>
        <para>Encapsulates a <see cref="T:System.Drawing.Brush"/> object with a linear gradient. This class cannot be inherited.</para>
      </summary>
      <remarks>
        <para>This class encapsulates both two-color gradients and custom multicolor gradients.</para>
        <para>All linear gradients are defined along a line specified either by the width of a rectangle or by two points.</para>
        <para>By default, a two-color linear gradient is an even horizontal linear blend from the starting color to the ending color along the specified line. Customize the blend pattern using the <see cref="T:System.Drawing.Drawing2D.Blend"/> class, the <see langword="SetSigmaBellShape"/> methods, or the <see langword="SetBlendTriangularShape"/> methods. Customize the direction of the gradient by specifying the <see langword="LinearGradientMode"/> enumeration or the angle in the constructor.</para>
        <para>Use the <see langword="InterpolationColors"/> property to create a multicolor gradient.</para>
        <para>The <see langword="Transform"/> property specifies a local geometric transform applied to the gradient.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> class with the specified points and colors.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> class with the specified points and colors.</para>
      </summary>
      <param name="point1">
        A <see cref="T:System.Drawing.Point"/> structure that represents the starting point of the linear gradient.
      </param>
      <param name="point2">
        A <see cref="T:System.Drawing.Point"/> structure that represents the endpoint of the linear gradient.
      </param>
      <param name="color1">
        A <see cref="T:System.Drawing.Color"/> structure that represents the starting color of the linear gradient.
      </param>
      <param name="color2">
        A <see cref="T:System.Drawing.Color"/> structure that represents the ending color of the linear gradient.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Drawing.Color)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> class with the specified points and colors.</para>
      </summary>
      <param name="point1">
        A <see cref="T:System.Drawing.PointF"/> structure that represents the starting point of the linear gradient.
      </param>
      <param name="point2">
        A <see cref="T:System.Drawing.PointF"/> structure that represents the endpoint of the linear gradient.
      </param>
      <param name="color1">
        A <see cref="T:System.Drawing.Color"/> structure that represents the starting color of the linear gradient.
      </param>
      <param name="color2">
        A <see cref="T:System.Drawing.Color"/> structure that represents the ending color of the linear gradient.
      </param>
    </member>
    
    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> class based on a rectangle, starting and ending colors, and orientation.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that specifies the bounds of the linear gradient.
      </param>
      <param name="color1">
        A <see cref="T:System.Drawing.Color"/> structure that represents the starting color for the gradient.
      </param>
      <param name="color2">
        A <see cref="T:System.Drawing.Color"/> structure that represents the ending color for the gradient.
      </param>
      <param name="linearGradientMode">
        A <see langword="LinearGradientMode"/> enumeration element that specifies the orientation of the gradient. The orientation determines the starting and ending points of the gradient. For example, LinearGradientMode.ForwardDiagonal specifies that the starting point is the upper-left corner of the rectangle and the ending point is the lower-right corner of the rectangle.
      </param>
    </member>
    
    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> class based on a rectangle, starting and ending colors, and an orientation angle.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that specifies the bounds of the linear gradient.
      </param>
      <param name="color1">
        A <see cref="T:System.Drawing.Color"/> structure that represents the starting color for the gradient.
      </param>
      <param name="color2">
        A <see cref="T:System.Drawing.Color"/> structure that represents the ending color for the gradient.
      </param>
      <param name="angle">
        The angle, measured in degrees clockwise from the x-axis, of the gradient's orientation line.
      </param>        
      <remarks>
        <para>All points along any line perpendicular to the orientation line are the same color.</para>
        <para>The starting line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the starting line are the starting color. Then ending line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the ending line are the ending color.</para>       
        <para>The angle of the orientation line determines which corners the starting and ending lines pass through. For example, if the angle is between 0 and 90 degrees, the starting line passes through the upper-left corner, and the ending line passes through the lower-right corner.</para>        
      </remarks>      
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> class based on a rectangle, starting and ending colors, and an orientation angle.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that specifies the bounds of the linear gradient.
      </param>
      <param name="color1">
        A <see cref="T:System.Drawing.Color"/> structure that represents the starting color for the gradient.
      </param>
      <param name="color2">
        A <see cref="T:System.Drawing.Color"/> structure that represents the ending color for the gradient.
      </param>
      <param name="angle">
        The angle, measured in degrees clockwise from the x-axis, of the gradient's orientation line.
      </param>
      <param name="isAngleScaleable">
        Set to <see langword="true"/> to specify that the angle is affected by the transform associated with this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/>; otherwise, <see langword="false"/>.
      </param>      
      <remarks>
        <para>All points along any line perpendicular to the orientation line are the same color.</para>
        <para>The starting line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the starting line are the starting color. Then ending line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the ending line are the ending color.</para>       
        <para>The angle of the orientation line determines which corners the starting and ending lines pass through. For example, if the angle is between 0 and 90 degrees, the starting line passes through the upper-left corner, and the ending line passes through the lower-right corner.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> based on a rectangle, starting and ending colors, and an orientation mode.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that specifies the bounds of the linear gradient.
      </param>
      <param name="color1">
        A <see cref="T:System.Drawing.Color"/> structure that represents the starting color for the gradient.
      </param>
      <param name="color2">
        A <see cref="T:System.Drawing.Color"/> structure that represents the ending color for the gradient.
      </param>
      <param name="linearGradientMode">
        A <see langword="LinearGradientMode"/> enumeration element that specifies the orientation of the gradient. The orientation determines the starting and ending points of the gradient. For example, LinearGradientMode.ForwardDiagonal specifies that the starting point is the upper-left corner of the rectangle and the ending point is the lower-right corner of the rectangle.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> class based on a rectangle, starting and ending colors, and an orientation angle.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that specifies the bounds of the linear gradient.
      </param>
      <param name="color1">
        A <see cref="T:System.Drawing.Color"/> structure that represents the starting color for the gradient.
      </param>
      <param name="color2">
        A <see cref="T:System.Drawing.Color"/> structure that represents the ending color for the gradient.
      </param>
      <param name="angle">
        The angle, measured in degrees clockwise from the x-axis, of the gradient's orientation line.
      </param>     
      <remarks>
        <para>All points along any line perpendicular to the orientation line are the same color.</para>
        <para>The starting line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the starting line are the starting color. Then ending line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the ending line are the ending color.</para>       
        <para>The angle of the orientation line determines which corners the starting and ending lines pass through. For example, if the angle is between 0 and 90 degrees, the starting line passes through the upper-left corner, and the ending line passes through the lower-right corner.</para>      
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> class based on a rectangle, starting and ending colors, and an orientation angle.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that specifies the bounds of the linear gradient.
      </param>
      <param name="color1">
        A <see cref="T:System.Drawing.Color"/> structure that represents the starting color for the gradient.
      </param>
      <param name="color2">
        A <see cref="T:System.Drawing.Color"/> structure that represents the ending color for the gradient.
      </param>
      <param name="angle">
        The angle, measured in degrees clockwise from the x-axis, of the gradient's orientation line.
      </param>
      <param name="isAngleScaleable">
        Set to <see langword="true"/> to specify that the angle is affected by the transform associated with this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/>; otherwise, <see langword="false"/>.
      </param>
      <remarks>
        <para>All points along any line perpendicular to the orientation line are the same color.</para>
        <para>The starting line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the starting line are the starting color. Then ending line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the ending line are the ending color.</para>       
        <para>The angle of the orientation line determines which corners the starting and ending lines pass through. For example, if the angle is between 0 and 90 degrees, the starting line passes through the upper-left corner, and the ending line passes through the lower-right corner.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.Clone">
      <summary>
        <para>Creates an exact copy of this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> this method creates, cast as an object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see langword="PaintEventArgs "/><paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a new <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</term>
          </item>
          <item>
            <term>Draws an ellipse to the screen using this brush.</term>
          </item>
          <item>
            <term>Clones the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object (<paramref name="clonedLGBrush"/>).</term>
          </item>
          <item>
            <term>Draws an ellipse to the screen directly below the first ellipse, using the cloned brush.</term>
          </item>
        </list>
        <code lang="VB">Public Sub CloneExample(e As PaintEventArgs)
&apos; Create a LinearGradientBrush.
Dim x As Integer = 20
Dim y As Integer = 20
Dim h As Integer = 100
Dim w As Integer = 200
Dim myRect As New Rectangle(x, y, w, h)
Dim myLGBrush As New LinearGradientBrush(myRect, Color.Blue, _
Color.Aquamarine, 45F, True)
&apos; Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, x, y, w, h)
&apos; Clone the LinearGradientBrush.
Dim clonedLGBrush As LinearGradientBrush = _
CType(myLGBrush.Clone(), LinearGradientBrush)
&apos; Justify the left edge of the gradient with the left edge of the
&apos; ellipse.
clonedLGBrush.TranslateTransform(- 100F, 0F)
&apos; Draw a second ellipse to the screen using the cloned HBrush.
y = 150
e.Graphics.FillEllipse(clonedLGBrush, x, y, w, h)
End Sub
        </code>
        <code lang="C#">private void CloneExample(PaintEventArgs e)
{
// Create a LinearGradientBrush.
int x=20, y=20, h=100, w=200;
Rectangle myRect = new Rectangle(x, y, w, h);
LinearGradientBrush myLGBrush = new LinearGradientBrush(
myRect,
Color.Blue,
Color.Aquamarine,
45.0f,
true);
// Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, x, y, w, h);
// Clone the LinearGradientBrush.
LinearGradientBrush clonedLGBrush =
(LinearGradientBrush)myLGBrush.Clone();
// Justify the left edge of the gradient with the
// left edge of the ellipse.
clonedLGBrush.TranslateTransform(-100.0f, 0.0f);
// Draw a second ellipse to the screen using the cloned HBrush.
y=150;
e.Graphics.FillEllipse(clonedLGBrush, x, y, w, h);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix)">
      <overload>
        Multiplies the <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that represents the local geometric transform of this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> by prepending the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </overload>
      <summary>
        <para>Multiplies the <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that represents the local geometric transform of this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> by prepending the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/>.</para>
      </summary>
      <param name="matrix">
        The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by which to multiply the geometric transform.
      </param>
      <example>
        <para>For an example, see <see langword="LinearGradientBrush.MultiplyTransform Method (Matrix, MatrixOrder)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Multiplies the <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that represents the local geometric transform of this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> in the specified order.</para>
      </summary>
      <param name="matrix">
        The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by which to multiply the geometric transform.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies in which order to multiply the two matrices.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a new <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</term>
          </item>
          <item>
            <term>Draws an ellipse to the screen using this brush.</term>
          </item>
          <item>
            <term>Calls the <see langword="MultiplyTransform"/> method, to transform the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</term>
          </item>
          <item>
            <term>Draws an ellipse to the screen directly below the first ellipse, using the transformed brush.</term>
          </item>
        </list>
        <para>Notice that the lower ellipse is stretched in the horizontal direction, and that the gradient is stretched to match the new shape.</para>
        <code lang="VB">Public Sub MultiplyTransformExample(e As PaintEventArgs)
&apos; Create a LinearGradientBrush.
Dim myRect As New Rectangle(20, 20, 200, 100)
Dim myLGBrush As New LinearGradientBrush(myRect, Color.Blue, _
Color.Red, 0F, True)
&apos; Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, myRect)
&apos; Transform the LinearGradientBrush.
Dim transformArray As Point() =  {New Point(20, 150), _
New Point(400, 150), New Point(20, 200)}
Dim myMatrix As New Matrix(myRect, transformArray)
myLGBrush.MultiplyTransform(myMatrix, MatrixOrder.Prepend)
&apos; Draw a second ellipse to the screen using the transformed brush.
e.Graphics.FillEllipse(myLGBrush, 20, 150, 380, 50)
End Sub
        </code>
        <code lang="C#">private void MultiplyTransformExample(PaintEventArgs e)
{
// Create a LinearGradientBrush.
Rectangle myRect = new Rectangle(20, 20, 200, 100);
LinearGradientBrush myLGBrush = new LinearGradientBrush(
myRect,
Color.Blue,
Color.Red,
0.0f,
true);
// Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, myRect);
// Transform the LinearGradientBrush.
Point[] transformArray =
{
new Point(20, 150),
new Point(400,150),
new Point(20, 200)
};
Matrix myMatrix = new Matrix(myRect, transformArray);
myLGBrush.MultiplyTransform(
myMatrix,
MatrixOrder.Prepend);
// Draw a second ellipse to the screen using
// the transformed brush.
e.Graphics.FillEllipse(myLGBrush, 20, 150, 380, 50);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform">
      <summary>
        <para>Resets the <see langword="Transform"/> property to identity.</para>
      </summary>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a new <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</term>
          </item>
          <item>
            <term>Draws an ellipse to the screen using this brush.</term>
          </item>
          <item>
            <term>Calls the <see langword="MultiplyTransform"/> method to transform the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</term>
          </item>
          <item>
            <term>Draws an ellipse to the screen directly below the first ellipse, using the transformed brush.</term>
          </item>
          <item>
            <term>Resets the transform.</term>
          </item>
          <item>
            <term>Draws a third ellipse to the screen below the first two.</term>
          </item>
        </list>
        <para>Notice that the lowest ellipse is drawn the same size as the first, and that, due to the call to the <see langword="ResetTransform"/> method, the gradient has been reduced to match.</para>
        <code lang="VB">Public Sub ResetTransformExample(e As PaintEventArgs)
&apos; Create a LinearGradientBrush.
Dim myRect As New Rectangle(20, 20, 200, 100)
Dim myLGBrush As New LinearGradientBrush(myRect, Color.Blue, _
Color.Red, 0F, True)
&apos; Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, myRect)
&apos; Transform the LinearGradientBrush.
Dim transformArray As Point() =  {New Point(20, 150), _
New Point(400, 150), New Point(20, 200)}
Dim myMatrix As New Matrix(myRect, transformArray)
myLGBrush.MultiplyTransform(myMatrix, MatrixOrder.Prepend)
&apos; Draw a second ellipse to the screen using the transformed brush.
e.Graphics.FillEllipse(myLGBrush, 20, 150, 380, 50)
&apos; Reset the brush transform.
myLGBrush.ResetTransform()
&apos; Draw a third ellipse to the screen using the reset brush.
e.Graphics.FillEllipse(myLGBrush, 20, 250, 200, 100)
End Sub
        </code>
        <code lang="C#">private void ResetTransformExample(PaintEventArgs e)
{
// Create a LinearGradientBrush.
Rectangle myRect = new Rectangle(20, 20, 200, 100);
LinearGradientBrush myLGBrush = new LinearGradientBrush(
myRect,
Color.Blue,
Color.Red,
0.0f,
true);
// Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, myRect);
// Transform the LinearGradientBrush.
Point[] transformArray =
{
new Point(20, 150),
new Point(400,150),
new Point(20, 200)
};
Matrix myMatrix = new Matrix(myRect, transformArray);
myLGBrush.MultiplyTransform(
myMatrix,
MatrixOrder.Prepend);
// Draw a second ellipse to the screen
// using the transformed brush.
e.Graphics.FillEllipse(myLGBrush, 20, 150, 380, 50);
// Reset the brush transform.
myLGBrush.ResetTransform();
// Draw a third ellipse to the screen using the reset brush.
e.Graphics.FillEllipse(myLGBrush, 20, 250, 200, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single)">
      <overload>
        Rotates the local geometric transform by the specified amount. This method prepends the rotation to the transform.
      </overload>
      <summary>
        <para>Rotates the local geometric transform by the specified amount. This method prepends the rotation to the transform.</para>
      </summary>
      <param name="angle">
        The angle of rotation.
      </param>
      <example>
        <para>For an example, see <see langword="LinearGradientBrush.RotateTransform Method (Single, MatrixOrder)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Rotates the local geometric transform by the specified amount in the specified order.</para>
      </summary>
      <param name="angle">
        The angle of rotation.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies whether to append or prepend the rotation matrix.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code</para>
        <list type="bullet">
          <item>
            <term>Creates a new <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</term>
          </item>
          <item>
            <term>Draws an ellipse to the screen using this brush.</term>
          </item>
          <item>
            <term>Rotates the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object 45 degrees by calling the <see langword="RotateTransform"/> method.</term>
          </item>
          <item>
            <term>Draws an ellipse to the screen directly below the first ellipse, using the rotated brush.</term>
          </item>
        </list>
        <para>Notice that the gradient of the lower ellipse is at a 45 degree angle to the x-axis of the top ellipse. Also notice that a call to the <see langword="TranslateTransform"/> method is used to justify the left edge of the gradient fill with the left edge of the lower ellipse.</para>
        <code lang="VB">Public Sub RotateTransformExample(e As PaintEventArgs)
&apos; Create a LinearGradientBrush.
Dim myRect As New Rectangle(20, 20, 200, 100)
Dim myLGBrush As New LinearGradientBrush(myRect, Color.Blue, _
Color.Red, 0F, True)
&apos; Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, myRect)
&apos; Rotate the LinearGradientBrush.
myLGBrush.RotateTransform(45F, MatrixOrder.Prepend)
&apos; Rejustify the brush to start at the left edge of the ellipse.
myLGBrush.TranslateTransform(- 100F, 0F)
&apos; Draw a second ellipse to the screen using the transformed brush.
e.Graphics.FillEllipse(myLGBrush, 20, 150, 200, 100)
End Sub
        </code>
        <code lang="C#">private void RotateTransformExample(PaintEventArgs e)
{
// Create a LinearGradientBrush.
Rectangle myRect = new Rectangle(20, 20, 200, 100);
LinearGradientBrush myLGBrush = new LinearGradientBrush(
myRect,
Color.Blue,
Color.Red,
0.0f,
true);
// Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, myRect);
// Rotate the LinearGradientBrush.
myLGBrush.RotateTransform(
45.0f,
MatrixOrder.Prepend);
// Rejustify the brush to start at the left edge of the ellipse.
myLGBrush.TranslateTransform(-100.0f, 0.0f);
// Draw a second ellipse to the screen using
// the transformed brush.
e.Graphics.FillEllipse(myLGBrush, 20, 150, 200, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single)">
      <overload>
        Scales the local geometric transform by the specified amounts. This method prepends the scaling matrix to the transform.
      </overload>
      <summary>
        <para>Scales the local geometric transform by the specified amounts. This method prepends the scaling matrix to the transform.</para>
      </summary>
      <param name="sx">
        The amount by which to scale the transform in the x-axis direction.
      </param>
      <param name="sy">
        The amount by which to scale the transform in the y-axis direction.
      </param>
      <example>
        <para>For an example, see <see langword="LinearGradientBrush.ScaleTransform Method (Single, Single, MatrixOrder)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Scales the local geometric transform by the specified amounts in the specified order.</para>
      </summary>
      <param name="sx">
        The amount by which to scale the transform in the x-axis direction.
      </param>
      <param name="sy">
        The amount by which to scale the transform in the y-axis direction.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies whether to append or prepend the scaling matrix.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a new <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</term>
          </item>
          <item>
            <term>Draw an ellipse to the screen using this brush.</term>
          </item>
          <item>
            <term>Scales the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object by a factor of two in the x-axis.</term>
          </item>
          <item>
            <term>Draws an ellipse to the screen directly below the first ellipse, using the scaled brush.</term>
          </item>
        </list>
        <para>Notice that the gradient of the lower ellipse is stretched by a factor of two. Also notice that a call to the <see langword="TranslateTransform"/> method is used to justify the left edge of the gradient fill with the left edge of ellipse.</para>
        <code lang="VB">Public Sub ScaleTransformExample(e As PaintEventArgs)
&apos; Create a LinearGradientBrush.
Dim myRect As New Rectangle(20, 20, 200, 100)
Dim myLGBrush As New LinearGradientBrush(myRect, Color.Blue, _
Color.Red, 0F, True)
&apos; Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, myRect)
&apos; Scale the LinearGradientBrush.
myLGBrush.ScaleTransform(2F, 1F, MatrixOrder.Prepend)
&apos; Rejustify the brush to start at the left edge of the ellipse.
myLGBrush.TranslateTransform(- 20F, 0F)
&apos; Draw a second ellipse to the screen using the transformed brush.
e.Graphics.FillEllipse(myLGBrush, 20, 150, 200, 100)
End Sub
        </code>
        <code lang="C#">private void ScaleTransformExample(PaintEventArgs e)
{
// Create a LinearGradientBrush.
Rectangle myRect = new Rectangle(20, 20, 200, 100);
LinearGradientBrush myLGBrush = new LinearGradientBrush(
myRect,
Color.Blue,
Color.Red,
0.0f,
true);
// Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, myRect);
// Scale the LinearGradientBrush.
myLGBrush.ScaleTransform(
2.0f,
1.0f,
MatrixOrder.Prepend);
// Rejustify the brush to start at the left edge of the ellipse.
myLGBrush.TranslateTransform(-20.0f, 0.0f);
// Draw a second ellipse to the screen using
// the transformed brush.
e.Graphics.FillEllipse(myLGBrush, 20, 150, 200, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single)">
      <overload>
        Creates a linear gradient with a center color and a linear falloff to a single color on both ends.
      </overload>
      <summary>
        <para>Creates a linear gradient with a center color and a linear falloff to a single color on both ends.</para>
      </summary>
      <param name="focus">
        A value from 0 through 1 that specifies the center of the gradient (the point where the gradient is composed of only the ending color).
      </param>
      <example>
        <para>For an example, see <see langword="LinearGradientBrush.SetBlendTriangularShape Method (Single, Single)"/>.</para>
      </example>
      <remarks>
        <para>This method specifies a <paramref name="focus"/>, which is the point where the gradient is composed only of the ending color. The <paramref name="focus"/> parameter represents a location as a proportion of the distance along the gradient line. The gradient falls off to the starting color linearly to either side.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single,System.Single)">
      <summary>
        <para>Creates a linear gradient with a center color and a linear falloff to a single color on both ends.</para>
      </summary>
      <param name="focus">
        A value from 0 through 1 that specifies the center of the gradient (the point where the gradient is composed of only the ending color).
      </param>
      <param name="scale">
        A value from 0 through1 that specifies how fast the colors falloff from the starting color to <paramref name="focus"/> (ending color)
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a new <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</term>
          </item>
          <item>
            <term>Uses this brush to draw an ellipse to the screen that has a linear, left-to-right transition of colors.</term>
          </item>
          <item>
            <term>Transforms the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object into a triangular shape with its peak in the center.</term>
          </item>
          <item>
            <term>Draws a second ellipse to the screen using the transformed brush.</term>
          </item>
        </list>
        <para>Notice that the gradient of the lower ellipse transitions from blue to red and then back to blue.</para>
        <code lang="VB">Public Sub SetBlendTriangularShapeExample(e As PaintEventArgs)
&apos; Create a LinearGradientBrush.
Dim myRect As New Rectangle(20, 20, 200, 100)
Dim myLGBrush As New LinearGradientBrush(myRect, Color.Blue, _
Color.Red, 0F, True)
&apos; Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, myRect)
&apos; Create a triangular shaped brush with the peak at the center
&apos; of the drawing area.
myLGBrush.SetBlendTriangularShape(0.5F, 1F)
&apos; Use the triangular brush to draw a second ellipse.
myRect.Y = 150
e.Graphics.FillEllipse(myLGBrush, myRect)
End Sub
        </code>
        <code lang="C#">private void SetBlendTriangularShapeExample(PaintEventArgs e)
{
// Create a LinearGradientBrush.
Rectangle myRect = new Rectangle(20, 20, 200, 100);
LinearGradientBrush myLGBrush = new LinearGradientBrush(
myRect,
Color.Blue,
Color.Red,
0.0f,
true);
// Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, myRect);
// Create a triangular shaped brush with the peak at the center
// of the drawing area.
myLGBrush.SetBlendTriangularShape(.5f, 1.0f);
// Use the triangular brush to draw a second ellipse.
myRect.Y = 150;
e.Graphics.FillEllipse(myLGBrush, myRect);
}
        </code>
      </example>
      <remarks>
        <para>This method specifies a <paramref name="focus"/>, which is the point where the gradient is composed only of the ending color. The <paramref name="focus"/> parameter represents a location as a proportion of the distance along the gradient line. The gradient falls off to the starting color linearly to either side.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single)">
      <overload>
        Creates a gradient falloff based on a bell-shaped curve.
      </overload>
      <summary>
        <para>Creates a gradient falloff based on a bell-shaped curve.</para>
      </summary>
      <param name="focus">
        A value from 0 through 1 that specifies the center of the gradient (the point where the starting color and ending color are blended equally).
      </param>
      <example>
        <para>For an example, see <see langword="LinearGradientBrush.SetSigmaBellShape Method (Single, Single)"/>.</para>
      </example>
      <remarks>
        <para>This method specifies a <paramref name="focus"/>, which is the point where the gradient is composed only of the ending color. The <paramref name="focus"/> parameter represents a location as a proportion of the distance along the gradient line. The gradient falls off to the starting color based on a bell curve shape (normal distribution) to either side.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single,System.Single)">
      <summary>
        <para>Creates a gradient falloff based on a bell-shaped curve.</para>
      </summary>
      <param name="focus">
        A value from 0 through 1 that specifies the center of the gradient (the point where the gradient is composed of only the ending color).
      </param>
      <param name="scale">
        A value from 0 through 1 that specifies how fast the colors falloff from the <paramref name="focus"/>.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a new <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</term>
          </item>
          <item>
            <term>Uses this brush to draw an ellipse to the screen that has a linear, left-to-right transition of colors.</term>
          </item>
          <item>
            <term>Transforms the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object to have a bell shaped curve with its peak in the center.</term>
          </item>
          <item>
            <term>Draws a second ellipse to the screen using the bell-shaped brush.</term>
          </item>
        </list>
        <para>Notice that the gradient of the lower ellipse transitions from blue to red and then back to blue.</para>
        <code lang="VB">Public Sub SetSigmaBellShapeExample(e As PaintEventArgs)
&apos; Create a LinearGradientBrush.
Dim myRect As New Rectangle(20, 20, 200, 100)
Dim myLGBrush As New LinearGradientBrush(myRect, Color.Blue, _
Color.Red, 0F, True)
&apos; Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, myRect)
&apos; Create a triangular shaped brush with the peak at the center
&apos; of the drawing area.
myLGBrush.SetSigmaBellShape(0.5F, 1F)
&apos; Use the triangular brush to draw a second ellipse.
myRect.Y = 150
e.Graphics.FillEllipse(myLGBrush, myRect)
End Sub
        </code>
        <code lang="C#">private void SetSigmaBellShapeExample(PaintEventArgs e)
{
// Create a LinearGradientBrush.
Rectangle myRect = new Rectangle(20, 20, 200, 100);
LinearGradientBrush myLGBrush = new LinearGradientBrush(
myRect,
Color.Blue,
Color.Red,
0.0f,
true);
// Draw an ellipse to the screen using the LinearGradientBrush.
e.Graphics.FillEllipse(myLGBrush, myRect);
// Create a bell-shaped brush with the peak at the
// center of the drawing area.
myLGBrush.SetSigmaBellShape(.5f, 1.0f);
// Use the bell- shaped brush to draw a second
// ellipse.
myRect.Y = 150;
e.Graphics.FillEllipse(myLGBrush, myRect);
}
        </code>
      </example>
      <remarks>
        <para>This method specifies a <paramref name="focus"/>, which is the point where the gradient is composed only of the ending color. The <paramref name="focus"/> parameter represents a location as a proportion of the distance along the gradient line. The gradient falls off to the starting color based on a bell curve shape (normal distribution) to either side.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single)">
      <overload>
        Translates the local geometric transform by the specified dimensions. This method prepends the translation to the transform.
      </overload>
      <summary>
        <para>Translates the local geometric transform by the specified dimensions. This method prepends the translation to the transform.</para>
      </summary>
      <param name="dx">
        The value of the translation in x.
      </param>
      <param name="dy">
        The value of the translation in y.
      </param>
      <example>
        <para>For an example, see <see langword="LinearGradientBrush.TranslateTransform Method (Single, Single, MatrixOrder)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Translates the local geometric transform by the specified dimensions in the specified order.</para>
      </summary>
      <param name="dx">
        The value of the translation in x.
      </param>
      <param name="dy">
        The value of the translation in y.
      </param>
      <param name="order">
        The order (prepend or append) in which to apply the translation.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a new <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</term>
          </item>
          <item>
            <term>Uses this brush to draw a rectangle to the screen that has a linear, left-to-right transition of colors.</term>
          </item>
          <item>
            <term>Rotates the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object by 90 degrees and scales the gradient.</term>
          </item>
          <item>
            <term>Draws the rectangle, with the rotated and scaled gradient, to the screen.</term>
          </item>
          <item>
            <term>Translates the rectangle so that it has a linear gradient running from top to bottom.</term>
          </item>
          <item>
            <term>Draws the translated rectangle to the screen.</term>
          </item>
        </list>
        <para>Notice that there are three rectangles displayed &#190; the top one showing the left-to-right gradient, the middle one showing the rotated and scaled gradient, and the bottom one showing the final, translated gradient.</para>
        <code lang="VB">Public Sub TranslateTransformExample(e As PaintEventArgs)
&apos; Create a LinearGradientBrush.
Dim myRect As New Rectangle(20, 20, 200, 100)
Dim myLGBrush As New LinearGradientBrush(myRect, Color.Blue, _
Color.Red, 0F, True)
&apos; Draw a rectangle to the screen using the LinearGradientBrush.
e.Graphics.FillRectangle(myLGBrush, myRect)
&apos; Rotate the LinearGradientBrush.
myLGBrush.RotateTransform(90F)
&apos; Scale the gradient for the height of the rectangle.
myLGBrush.ScaleTransform(0.5F, 1F)
&apos; Draw to the screen, the rotated and scaled gradient.
e.Graphics.FillRectangle(myLGBrush, 20, 150, 200, 100)
&apos; Rejustify the brush to start at the top edge of the rectangle.
myLGBrush.TranslateTransform(- 20F, 0F)
&apos; Draw a third rectangle to the screen using the translated brush.
e.Graphics.FillRectangle(myLGBrush, 20, 300, 200, 100)
End Sub
        </code>
        <code lang="C#">private void TranslateTransformExample(PaintEventArgs e)
{
// Create a LinearGradientBrush.
Rectangle myRect = new Rectangle(20, 20, 200, 100);
LinearGradientBrush myLGBrush = new LinearGradientBrush(
myRect,
Color.Blue,
Color.Red,
0.0f,
true);
// Draw a rectangle to the screen using the LinearGradientBrush.
e.Graphics.FillRectangle(myLGBrush, myRect);
// Rotate the LinearGradientBrush.
myLGBrush.RotateTransform(90.0f);
// Scale the gradient for the height of the rectangle.
myLGBrush.ScaleTransform(0.5f, 1.0f);
// Draw to the screen, the rotated and scaled gradient.
e.Graphics.FillRectangle(myLGBrush, 20, 150, 200, 100);
// Rejustify the brush to start at the top edge of the
// rectangle.
myLGBrush.TranslateTransform(-20.0f, 0.0f);
// Draw a third rectangle to the screen using the translated
// brush.
e.Graphics.FillRectangle(myLGBrush, 20, 300, 200, 100);
}
        </code>
      </example>
    </member>

    <member name="P:System.Drawing.Drawing2D.LinearGradientBrush.Blend">
      <summary>
        <para>Gets or sets a <see cref="T:System.Drawing.Drawing2D.Blend"/> object that specifies positions and factors that define a custom falloff for the gradient.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.Blend"/> object that represents a custom falloff for the gradient.</para>
      </value>
      <remarks>
        <para>A <see cref="T:System.Drawing.Drawing2D.Blend"/> object contains corresponding arrays of blend factors and positions. The blend factors specify the percentages of the starting color and ending color to use at the corresponding position. The positions are given as a percentage of distance along the gradient line.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.LinearGradientBrush.GammaCorrection">
      <summary>
        <para>Gets or sets a value indicating whether gamma correction is enabled for this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</para>
      </summary>
      <value>
        <para>The value is <see langword="true"/> if gamma correction is enabled for this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/>; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors">
      <summary>
        <para>Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object that defines a multicolor linear gradient.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object that defines a multicolor linear gradient.</para>
      </value>
      <remarks>
        <para>A <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object contains corresponding arrays of colors and positions. The positions are values from 0 through 1 that specify the percentage of the distance along the gradient line where the corresponding color is located.</para>
        <para>Setting this property creates a multicolor gradient with one color at each position along the gradient line. Setting this property nullifies all previous color, position, and falloff settings for this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.LinearGradientBrush.LinearColors">
      <summary>
        <para>Gets or sets the starting and ending colors of the gradient.</para>
      </summary>
      <value>
        <para>An array of two <see cref="T:System.Drawing.Color"/> structures that represents the starting and ending colors of the gradient.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.LinearGradientBrush.Rectangle">
      <summary>
        <para>Gets a rectangular region that defines the starting and ending points of the gradient.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.RectangleF"/> structure that specifies the starting and ending points of the gradient.</para>
      </value>
      <remarks>
        <para>The left side of the rectangle specifies the starting point of the linear gradient, and the right side of the rectangle specifies the endpoint.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.LinearGradientBrush.Transform">
      <summary>
        <para>Gets or sets a <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that defines a local geometric transform for this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that defines a geometric transform that applies only to fills drawn with this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</para>
      </value>
      <remarks>
        <para>A geometric transform can be used to translate, scale, rotate, or skew the gradient fill.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.LinearGradientBrush.WrapMode">
      <summary>
        <para>Gets or sets a <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that indicates the wrap mode for this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/>.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that specifies how fills drawn with this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> are tiled.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Drawing2D.Matrix">
      <summary>
        <para>Encapsulates a 3-by-3 affine matrix that represents a geometric transform. This class cannot be inherited.</para>
      </summary>
      <remarks>
        <para>The 3-by-3 matrix contains x values in the first column, y values in the second column, and w values in the third column.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.#ctor">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Matrix"/> class.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Matrix"/> class as the identity matrix.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.Rectangle,System.Drawing.Point[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Matrix"/> class to the geometric transform defined by the specified rectangle and array of points.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle to be transformed.
      </param>
      <param name="plgpts">
        An array of three <see cref="T:System.Drawing.Point"/> structures that represents the points of a parallelogram to which the upper-left, upper-right, and lower-left corners of the rectangle is to be transformed. The lower-right corner of the parallelogram is implied by the first three corners.
      </param>
      <remarks>
        <para>This method initializes the new Matrix such that it represents the geometric transform that maps the rectangle specified by the <paramref name="rect"/> parameter to the parallelogram defined by the three points in the <paramref name="plgpts"/> parameter. The upper-left corner of the rectangle is mapped to the first point in the <paramref name="plgpts"/> array, the upper-right corner is mapped to the second point, and the lower-left corner is mapped to the third point. The lower-left point of the parallelogram is implied by the first three.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Matrix"/> class to the geometric transform defined by the specified rectangle and array of points.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to be transformed.
      </param>
      <param name="plgpts">
        An array of three <see cref="T:System.Drawing.PointF"/> structures that represents the points of a parallelogram to which the upper-left, upper-right, and lower-left corners of the rectangle is to be transformed. The lower-right corner of the parallelogram is implied by the first three corners.
      </param>
      <remarks>
        <para>This method initializes the new <see cref="T:System.Drawing.Drawing2D.Matrix"/> object such that it represents the geometric transform that maps the rectangle specified by the <paramref name="rect"/> parameter to the parallelogram defined by the three points in the <paramref name="plgpts"/> parameter. The upper-left corner of the rectangle is mapped to the first point in the <paramref name="plgpts"/> array, the upper-right corner is mapped to the second point, and the lower-left corner is mapped to the third point. The lower-left point of the parallelogram is implied by the first three.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Matrix"/> class with the specified elements.</para>
      </summary>
      <param name="m11">
        The value in the first row and first column of the new <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </param>
      <param name="m12">
        The value in the first row and second column of the new <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </param>
      <param name="m21">
        The value in the second row and first column of the new <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </param>
      <param name="m22">
        The value in the second row and second column of the new <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </param>
      <param name="dx">
        The value in the third row and first column of the new <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </param>
      <param name="dy">
        The value in the third row and second column of the new <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Clone">
      <summary>
        <para>Creates an exact copy of this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that this method creates.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Equals(System.Object)">
      <summary>
        <para>Tests whether the specified object is a <see cref="T:System.Drawing.Drawing2D.Matrix"/> object and is identical to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </summary>
      <param name="obj">
        The object to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <paramref name="obj"/> is the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> object identical to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.GetHashCode">
      <summary>
        <para>Returns a hash code.</para>
      </summary>
      <returns>
        <para>The hash code for this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Invert">
      <summary>
        <para>Inverts this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object, if it is invertible.</para>
      </summary>
      <example>
        <para>The following example creates a matrix and inverts it:</para>
        <code lang="C#">Matrix myMatrix = new Matrix(3, 5, 1, 2, 2, 4);
myMatrix.Invert();
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix)">
      <overload>
        Multiplies this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by prepending the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </overload>
      <summary>
        <para>Multiplies this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by the matrix specified in the <paramref name="matrix"/> parameter, by prepending the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </summary>
      <param name="matrix">
        The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by which this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object is to be multiplied.
      </param>
      <example>
        <para>For an example, see <see langword="Matrix.Multiply Method (Matrix, MatrixOrder)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Multiplies this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by the matrix specified in the <paramref name="matrix"/> parameter, and in the order specified in the <paramref name="order"/> parameter.</para>
      </summary>
      <param name="matrix">
        The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by which this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object is to be multiplied.
      </param>
      <param name="order">
        The <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that represents the order of the multiplication.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates three matrices.</term>
          </item>
          <item>
            <term>Lists the contents of matrix 1 to the screen.</term>
          </item>
          <item>
            <term>Multiplies matrix 1 by matrix 2 and stores the result in matrix 1.</term>
          </item>
          <item>
            <term>Lists the contents of matrix 1 to the screen.</term>
          </item>
          <item>
            <term>Multiplies the result stored in matrix 1 by matrix 3, and again stores the result in matrix 1.</term>
          </item>
          <item>
            <term>Lists the contents of matrix 1 to the screen.</term>
          </item>
          <item>
            <term>Draws a rectangle to the screen prior to applying the matrix 1 transform (the blue rectangle).</term>
          </item>
          <item>
            <term>Applies the transform to the rectangle.</term>
          </item>
          <item>
            <term>Draws the transformed rectangle to the screen (the red rectangle), using the same coordinates as the previous rectangle.</term>
          </item>
        </list>
        <para>Notice that the red rectangle has been scaled by a factor of two in the horizontal direction, then rotated 90 degrees, and then moved (translated) 250 points in the x direction and 50 points in the y direction.</para>
        <code lang="VB">Public Sub MultiplyExample(e As PaintEventArgs)
Dim myPen As New Pen(Color.Blue, 1)
Dim myPen2 As New Pen(Color.Red, 1)
&apos; Set up the matrices.
Dim myMatrix1 As New Matrix(2F, 0F, 0F, 1F, 0F, 0F)
&apos; Scale.
Dim myMatrix2 As New Matrix(0F, 1F, - 1F, 0F, 0F, 0F)
&apos; Rotate 90.
Dim myMatrix3 As New Matrix(1F, 0F, 0F, 1F, 250F, 50F)
&apos; Translate.
&apos; Display the elements of the starting matrix.
ListMatrixElementsHelper(e, myMatrix1, &quot;Beginning Matrix&quot;, 6, 40)
&apos; Multiply Matrix1 by Matrix 2.
myMatrix1.Multiply(myMatrix2, MatrixOrder.Append)
&apos; Display the result of the multiplication of Matrix1 and
&apos; Matrix2.
ListMatrixElementsHelper(e, myMatrix1, _
&quot;Matrix After 1st Multiplication&quot;, 6, 60)
&apos; Multiply the result from the pervious multiplication by
&apos; Matrix3.
myMatrix1.Multiply(myMatrix3, MatrixOrder.Append)
&apos; Display the result of the previous multiplication
&apos; multiplied by Matrix3.
ListMatrixElementsHelper(e, myMatrix1, _
&quot;Matrix After 2nd Multiplication&quot;, 6, 80)
&apos; Draw the rectangle prior to transformation.
e.Graphics.DrawRectangle(myPen, 0, 0, 100, 100)
e.Graphics.Transform = myMatrix1
&apos; Draw the rectangle after transformation.
e.Graphics.DrawRectangle(myPen2, 0, 0, 100, 100)
End Sub
&apos; A helper function to list the contents of a matrix.
Public Sub ListMatrixElementsHelper(e As PaintEventArgs, _
matrix As Matrix, matrixName As String, numElements As Integer, _
y As Integer)
&apos; Set up variables for drawing the array
&apos; of points to the screen.
Dim i As Integer
Dim x As Single = 20
Dim j As Single = 200
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim myBrush As New SolidBrush(Color.Black)
&apos; Draw the matrix name to the screen.
e.Graphics.DrawString(matrixName + &quot;:  &quot;, myFont, myBrush, x, y)
&apos; Draw the set of path points and types to the screen.
For i = 0 To numElements - 1
e.Graphics.DrawString(matrix.Elements(i).ToString() + &quot;, &quot;, _
myFont, myBrush, j, y)
j += 30
Next i
End Sub
        </code>
        <code lang="C#">public void MultiplyExample(PaintEventArgs e)
{
Pen myPen = new Pen(Color.Blue, 1);
Pen myPen2 = new Pen(Color.Red, 1);
// Set up the matrices.
Matrix myMatrix1 = new Matrix(
2.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f);  // Scale
Matrix myMatrix2 = new Matrix(
0.0f, 1.0f, -1.0f, 0.0f, 0.0f, 0.0f); // Rotate 90,
Matrix myMatrix3 = new Matrix(
1.0f, 0.0f, 0.0f, 1.0f, 250.0f, 50.0f);  // Translate
// Display the elements of the starting matrix.
ListMatrixElements(e, myMatrix1, &quot;Beginning Matrix&quot;, 6, 40);
// Multiply Matrix1 by Matrix 2.
myMatrix1.Multiply(myMatrix2, MatrixOrder.Append);
// Display the result of the multiplication of Matrix1 and
// Matrix2.
ListMatrixElements(e,
myMatrix1,
&quot;Matrix After 1st Multiplication&quot;,
6,
60);
// Multiply the result from the pervious multiplication by
// Matrix3.
myMatrix1.Multiply(myMatrix3, MatrixOrder.Append);
// Display the result of the previous multiplication
// multiplied by Matrix3.
ListMatrixElements(e,
myMatrix1,
&quot;Matrix After 2nd Multiplication&quot;,
6,
80);
// Draw the rectangle prior to transformation.
e.Graphics.DrawRectangle(myPen, 0, 0, 100, 100);
// Make the transformation.
e.Graphics.Transform = myMatrix1;
// Draw the rectangle after transformation.
e.Graphics.DrawRectangle(myPen2, 0, 0, 100, 100);
}
//-------------------------------------------------------
// The following function is a helper function to
// list the contents of a matrix.
//-------------------------------------------------------
public void ListMatrixElements(
PaintEventArgs e,
Matrix matrix,
string matrixName,
int numElements,
int y)
{
// Set up variables for drawing the array
// of points to the screen.
int i;
float x = 20, X = 200;
Font myFont = new Font(&quot;Arial&quot;, 8);
SolidBrush myBrush = new SolidBrush(Color.Black);
// Draw the matrix name to the screen.
e.Graphics.DrawString(
matrixName + &quot;:  &quot;,
myFont,
myBrush,
x,
y);
// Draw the set of path points and types to the screen.
for(i=0; i&lt;numElements; i++)
{
e.Graphics.DrawString(
matrix.Elements[i].ToString() + &quot;, &quot;,
myFont,
myBrush,
X,
y);
X += 30;
}
}
        </code>
      </example>
      <remarks>
        <para>If the specified order is <see langword="MatrixOrder.Prepend"/>, this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object is multiplied by the specified matrix in a prepended order. If the specified order is <see langword="MatrixOrder.Append"/>, this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object is multiplied by the specified matrix in an appended order.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Reset">
      <summary>
        <para>Resets this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object to have the elements of the identity matrix.</para>
      </summary>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a scaling matrix.</term>
          </item>
          <item>
            <term>Lists the matrix elements to the screen.</term>
          </item>
          <item>
            <term>Resets the matrix to identity.</term>
          </item>
          <item>
            <term>Lists the elements to the screen.</term>
          </item>
          <item>
            <term>Translates the matrix by 50 points in the x-axis and 40 points in the y-axis.</term>
          </item>
          <item>
            <term>Lists the elements of the translated matrix to the screen.</term>
          </item>
          <item>
            <term>Draws a rectangle is drawn to the screen prior to applying the matrix transform (the blue rectangle).</term>
          </item>
          <item>
            <term>Applies the transform to the rectangle.</term>
          </item>
          <item>
            <term>Draws the transformed rectangle is drawn to the screen (the red rectangle), using the same coordinates as the previous rectangle.</term>
          </item>
        </list>
        <para>Notice that the red rectangle was not scaled (because of the reset) but was translated in the x-axis and y-axis.</para>
        <code lang="VB">Public Sub ResetExample(e As PaintEventArgs)
Dim myPen As New Pen(Color.Blue, 1)
Dim myPen2 As New Pen(Color.Red, 1)
Dim myMatrix As New Matrix(5F, 0F, 0F, 3F, 0F, 0F)
&apos; Scale.
ListMatrixElementsHelper(e, myMatrix, &quot;Beginning Matrix&quot;, 6, 20)
myMatrix.Reset()
ListMatrixElementsHelper(e, myMatrix, &quot;Matrix After Reset&quot;, 6, 40)
myMatrix.Translate(50F, 40F) &apos; Translate
ListMatrixElementsHelper(e, myMatrix, &quot;Matrix After Translation&quot;, _
6, 60)
e.Graphics.DrawRectangle(myPen, 0, 0, 100, 100)
e.Graphics.Transform = myMatrix
e.Graphics.DrawRectangle(myPen2, 0, 0, 100, 100)
End Sub
&apos; A helper function to list the contents of a matrix.
Public Sub ListMatrixElementsHelper(e As PaintEventArgs, _
matrix As Matrix, matrixName As String, numElements As Integer, _
y As Integer)
&apos; Set up variables for drawing the array
&apos; of points to the screen.
Dim i As Integer
Dim x As Single = 20
Dim j As Single = 200
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim myBrush As New SolidBrush(Color.Black)
&apos; Draw the matrix name to the screen.
e.Graphics.DrawString(matrixName + &quot;:  &quot;, myFont, myBrush, x, y)
&apos; Draw the set of path points and types to the screen.
For i = 0 To numElements - 1
e.Graphics.DrawString(matrix.Elements(i).ToString() + &quot;, &quot;, _
myFont, myBrush, j, y)
j += 30
Next i
End Sub
        </code>
        <code lang="C#">public void ResetExample(PaintEventArgs e)
{
Pen myPen = new Pen(Color.Blue, 1);
Pen myPen2 = new Pen(Color.Red, 1);
// Create a matrix that scales by 5 in the x direction and
// by 3 in the y direction.
Matrix myMatrix = new Matrix(
5.0f, 0.0f, 0.0f, 3.0f, 0.0f, 0.0f); // Scale
// List the matrix elements to the screen.
ListMatrixElements(e, myMatrix, &quot;Beginning Matrix&quot;, 6, 20);
// Reset the matrix to identity.
myMatrix.Reset();
// Again list the matrix elements to the screen.
ListMatrixElements(e, myMatrix, &quot;Matrix After Reset&quot;, 6, 40);
// Translate the matrix by 50 points in the x-axis and 40 points
// in the y-axis.
myMatrix.Translate(50.0f, 40.0f); // Translate
// List the matrix elements to the screen.
ListMatrixElements(e, myMatrix, &quot;Matrix After Translation&quot;, 6, 60);
// Draw a rectangle to the screen.
e.Graphics.DrawRectangle(myPen, 0, 0, 100, 100);
// Apply the matrix transform to the Graphics.
e.Graphics.Transform = myMatrix;
// Draw another rectangle to the screen that has the transform
// applied.
e.Graphics.DrawRectangle(myPen2, 0, 0, 100, 100);
}
//-------------------------------------------------------
// This function is a helper function to
// list the contents of a matrix.
//-------------------------------------------------------
public void ListMatrixElements(
PaintEventArgs e,
Matrix matrix,
string matrixName,
int numElements,
int y)
{
// Set up variables for drawing the array
// of points to the screen.
int i;
float x = 20, X = 200;
Font myFont = new Font(&quot;Arial&quot;, 8);
SolidBrush myBrush = new SolidBrush(Color.Black);
// Draw the matrix name to the screen.
e.Graphics.DrawString(
matrixName + &quot;:  &quot;,
myFont,
myBrush,
x,
y);
// Draw the set of path points and types to the screen.
for(i=0; i&lt;numElements; i++)
{
e.Graphics.DrawString(
matrix.Elements[i].ToString() + &quot;, &quot;,
myFont,
myBrush,
X,
y);
X += 30;
}
}
        </code>
      </example>
      <remarks>
        <para>The elements on the main diagonal of the identity matrix are 1. All other elements of the identity matrix are 0.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Rotate(System.Single)">
      <overload>
        Applies a clockwise rotation of the specified angle about the origin to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.
      </overload>
      <summary>
        <para>Prepend to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object a clockwise rotation, around the origin and by the specified angle.</para>
      </summary>
      <param name="angle">
        The angle of the rotation.
      </param>
      <example>
        <para>For an example, see<see langword=" "/><see langword="Matrix.Rotate Method (Single, MatrixOrder)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Applies a clockwise rotation of an amount specified in the <paramref name="angle"/> parameter, around the origin (zero x and y coordinates) for this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </summary>
      <param name="angle">
        The angle (extent) of the rotation.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies the order (append or prepend) in which the rotation is applied to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Draws a rectangle to the screen prior to applying a rotation transform (the blue rectangle).</term>
          </item>
          <item>
            <term>Creates a matrix and rotates it 45 degrees.</term>
          </item>
          <item>
            <term>Applies this matrix transform to the rectangle.</term>
          </item>
          <item>
            <term>Draws the transformed rectangle to the screen (the red rectangle).</term>
          </item>
        </list>
        <para>Notice that the red rectangle has been rotated around the 0, 0 screen coordinates.</para>
        <code lang="VB">Public Sub RotateExample(e As PaintEventArgs)
Dim myPen As New Pen(Color.Blue, 1)
Dim myPen2 As New Pen(Color.Red, 1)
&apos; Draw the rectangle to the screen before applying the transform.
e.Graphics.DrawRectangle(myPen, 150, 50, 200, 100)
&apos; Create a matrix and rotate it 45 degrees.
Dim myMatrix As New Matrix()
myMatrix.Rotate(45, MatrixOrder.Append)
&apos; Draw the rectangle to the screen again after applying the
&apos; transform.
e.Graphics.Transform = myMatrix
e.Graphics.DrawRectangle(myPen2, 150, 50, 200, 100)
End Sub
        </code>
        <code lang="C#">public void RotateExample(PaintEventArgs e)
{
Pen myPen = new Pen(Color.Blue, 1);
Pen myPen2 = new Pen(Color.Red, 1);
// Draw the rectangle to the screen before applying the transform.
e.Graphics.DrawRectangle(myPen, 150, 50, 200, 100);
// Create a matrix and rotate it 45 degrees.
Matrix myMatrix = new Matrix();
myMatrix.Rotate(45, MatrixOrder.Append);
// Draw the rectangle to the screen again after applying the
// transform.
e.Graphics.Transform = myMatrix;
e.Graphics.DrawRectangle(myPen2, 150, 50, 200, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF)">
      <overload>
        Applies a clockwise rotation about the specified point to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by prepending the rotation.
      </overload>
      <summary>
        <para>Applies a clockwise rotation to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object around the point specified in the <paramref name="point"/> parameter, and by prepending the rotation.</para>
      </summary>
      <param name="angle">
        The angle (extent) of the rotation.
      </param>
      <param name="point">
        A <see cref="T:System.Drawing.PointF"/> structure that represents the center of the rotation.
      </param>
      <example>
        <para>For an example, see <see langword="Matrix.RotateAt Method (Single, PointF, MatrixOrder)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Applies a clockwise rotation about the specified point to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object in the specified order.</para>
      </summary>
      <param name="angle">
        The angle of the rotation.
      </param>
      <param name="point">
        A <see cref="T:System.Drawing.PointF"/> structure that represents the center of the rotation.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies the order (append or prepend) in which the rotation is applied.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Draws a rectangle to the screen prior to applying a rotation transform (the blue rectangle).</term>
          </item>
          <item>
            <term>Creates a matrix and rotates it 45 degrees around a specified point.</term>
          </item>
          <item>
            <term>Applies this matrix transform is to the rectangle.</term>
          </item>
          <item>
            <term>Draws the transformed rectangle to the screen (the red rectangle).</term>
          </item>
        </list>
        <para>Notice that the red rectangle has been rotated around the upper left-hand corner of the rectangle (the rotation point specified the <see langword="RotateAt"/> method).</para>
        <code lang="VB">Public Sub RotateAtExample(e As PaintEventArgs)
Dim myPen As New Pen(Color.Blue, 1)
Dim myPen2 As New Pen(Color.Red, 1)
Dim rotatePoint As New PointF(150F, 50F)
&apos; Draw the rectangle to the screen before applying the
&apos; transform.
e.Graphics.DrawRectangle(myPen, 150, 50, 200, 100)
&apos; Create a matrix and rotate it 45 degrees.
Dim myMatrix As New Matrix()
myMatrix.RotateAt(45, rotatePoint, MatrixOrder.Append)
&apos; Draw the rectangle to the screen again after applying the
&apos; transform.
e.Graphics.Transform = myMatrix
e.Graphics.DrawRectangle(myPen2, 150, 50, 200, 100)
End Sub
        </code>
        <code lang="C#">public void RotateAtExample(PaintEventArgs e)
{
Pen myPen = new Pen(Color.Blue, 1);
Pen myPen2 = new Pen(Color.Red, 1);
PointF rotatePoint = new PointF(150.0f, 50.0f);
// Draw the rectangle to the screen before applying the
// transform.
e.Graphics.DrawRectangle(myPen, 150, 50, 200, 100);
// Create a matrix and rotate it 45 degrees.
Matrix myMatrix = new Matrix();
myMatrix.RotateAt(45, rotatePoint, MatrixOrder.Append);
// Draw the rectangle to the screen again after applying the
// transform.
e.Graphics.Transform = myMatrix;
e.Graphics.DrawRectangle(myPen2, 150, 50, 200, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single)">
      <overload>
        Applies the specified scale vector to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by prepending the scale vector.
      </overload>
      <summary>
        <para>Applies the specified scale vector to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by prepending the scale vector.</para>
      </summary>
      <param name="scaleX">
        The value by which to scale this <see cref="T:System.Drawing.Drawing2D.Matrix"/> in the x-axis direction.
      </param>
      <param name="scaleY">
        The value by which to scale this <see cref="T:System.Drawing.Drawing2D.Matrix"/> in the y-axis direction.
      </param>
      <example>
        <para>For an example, see <see langword="Matrix.Scale Method (Single, Single, MatrixOrder)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Applies the specified scale vector (<paramref name="scaleX"/> and <paramref name="scaleY"/>) to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object using the specified order.</para>
      </summary>
      <param name="scaleX">
        The value by which to scale this <see cref="T:System.Drawing.Drawing2D.Matrix"/> in the x-axis direction.
      </param>
      <param name="scaleY">
        The value by which to scale this <see cref="T:System.Drawing.Drawing2D.Matrix"/> in the y-axis direction.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies the order (append or prepend) in which the scale vector is applied to this <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Draws a rectangle to the screen prior to applying a scaling transform (the blue rectangle).</term>
          </item>
          <item>
            <term>Creates a matrix and scales it by 3 in the x-axis and 2 in the y-axis.</term>
          </item>
          <item>
            <term>Applies this matrix transform to the rectangle.</term>
          </item>
          <item>
            <term>Draws the transformed rectangle to the screen (the red rectangle).</term>
          </item>
        </list>
        <para>Notice that the red rectangle has been scaled by a factor of 3 in the x-axis and by 2 in the y-axis, including the upper left-hand corner of the rectangle (the beginning point of the rectangle).</para>
        <code lang="VB">Public Sub ScaleExample(e As PaintEventArgs)
Dim myPen As New Pen(Color.Blue, 1)
Dim myPen2 As New Pen(Color.Red, 1)
&apos; Draw the rectangle to the screen before applying the
&apos; transform.
e.Graphics.DrawRectangle(myPen, 50, 50, 100, 100)
&apos; Create a matrix and scale it.
Dim myMatrix As New Matrix()
myMatrix.Scale(3, 2, MatrixOrder.Append)
&apos; Draw the rectangle to the screen again after applying the
&apos; transform.
e.Graphics.Transform = myMatrix
e.Graphics.DrawRectangle(myPen2, 50, 50, 100, 100)
End Sub
        </code>
        <code lang="C#">public void ScaleExample(PaintEventArgs e)
{
Pen myPen = new Pen(Color.Blue, 1);
Pen myPen2 = new Pen(Color.Red, 1);
// Draw the rectangle to the screen before applying the
// transform.
e.Graphics.DrawRectangle(myPen, 50, 50, 100, 100);
// Create a matrix and scale it.
Matrix myMatrix = new Matrix();
myMatrix.Scale(3, 2, MatrixOrder.Append);
// Draw the rectangle to the screen again after applying the
// transform.
e.Graphics.Transform = myMatrix;
e.Graphics.DrawRectangle(myPen2, 50, 50, 100, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single)">
      <overload>
        Applies the specified shear vector to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> by prepending the shear vector.
      </overload>
      <summary>
        <para>Applies the specified shear vector to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by prepending the shear transformation.</para>
      </summary>
      <param name="shearX">
        The horizontal shear factor.
      </param>
      <param name="shearY">
        The vertical shear factor.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following action:</para>
        <list type="bullet">
          <item>
            <term>Draws a rectangle to the screen, using a green pen, prior to applying a scaling transform.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.Matrix"/> object and uses it to set a world-coordinate transform for the <see cref="T:System.Drawing.Graphics"/> object.</term>
          </item>
          <item>
            <term>Draws another rectangle using a red pen.</term>
          </item>
          <item>
            <term>Draws an ellipse using a blue pen.</term>
          </item>
        </list>
        <para>The result is a green rectangle, a red parallelogram and a transformed, blue ellipse. Notice that the green rectangle (drawn prior to setting the transform) directly uses the coordinates supplied in the <see cref="M:System.Drawing.Graphics.DrawRectangle"/> method call. The other two figures are transformed prior to drawing. The rectangle is transformed to a parallelogram (red), and the ellipse (blue) is transformed to fit into the transformed parallelogram. Notice the bottom of the rectangle is moved (sheared) in the x-axis by a factor of two times the height of the rectangle, thus forming the parallelogram.</para>
        <code lang="VB">Public Sub MatrixShearExample(e As PaintEventArgs)
Dim myMatrix As New Matrix()
myMatrix.Shear(2, 0)
e.Graphics.DrawRectangle(New Pen(Color.Green), 0, 0, 100, 50)
e.Graphics.MultiplyTransform(myMatrix)
e.Graphics.DrawRectangle(New Pen(Color.Red), 0, 0, 100, 50)
e.Graphics.DrawEllipse(New Pen(Color.Blue), 0, 0, 100, 50)
End Sub
        </code>
        <code lang="C#">public void MatrixShearExample(PaintEventArgs e)
{
Matrix myMatrix = new Matrix();
myMatrix.Shear(2, 0);
e.Graphics.DrawRectangle(new Pen(Color.Green), 0, 0 , 100 , 50);
e.Graphics.MultiplyTransform(myMatrix);
e.Graphics.DrawRectangle(new Pen(Color.Red), 0, 0, 100, 50);
e.Graphics.DrawEllipse(new Pen(Color.Blue), 0, 0, 100, 50);
}
        </code>
      </example>
      <remarks>
        <para>The transformation applied in this method is a pure shear only if one of the parameters is 0. Applied to a rectangle at the origin, when the <paramref name="shearY"/> factor is 0, the transformation moves the bottom edge horizontally by <paramref name="shearX "/>times the height of the rectangle. When the <paramref name="shearX"/> factor is 0, it moves the right edge vertically by <paramref name="shearY "/>times the width of the rectangle. Caution is in order when both parameters are nonzero, because the results are hard to predict. For example, if both factors are 1, the transformation is singular (hence noninvertible), squeezing the entire plane to a single line.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Applies the specified shear vector to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object in the specified order.</para>
      </summary>
      <param name="shearX">
        The horizontal shear factor.
      </param>
      <param name="shearY">
        The vertical shear factor.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies the order (append or prepend) in which the shear is applied.
      </param>
      <example>
        <para>For an example, see <see langword="Matrix.Shear Method (Single, Single)"/></para>
      </example>
      <remarks>
        <para>The transformation applied in this method is a pure shear only if one of the parameters is 0. Applied to a rectangle at the origin, when the <paramref name="shearY"/> factor is 0, the transformation moves the bottom edge horizontally by <paramref name="shearX "/>times the height of the rectangle. When the <paramref name="shearX"/> factor is 0, it moves the right edge vertically by <paramref name="shearY "/>times the width of the rectangle. Caution is in order when both parameters are nonzero, because the results are hard to predict. For example, if both factors are 1, the transformation is singular (hence noninvertible), squeezing the entire plane to a single line.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])">
      <overload>
        Applies the geometric transform this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object represents to an array of points.
      </overload>
      <summary>
        <para>Applies the geometric transform represented by this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object to a specified array of points.</para>
      </summary>
      <param name="pts">
        An array of <see cref="T:System.Drawing.Point"/> structures that represents the points to transform.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an array of points that form a rectangle.</term>
          </item>
          <item>
            <term>Draws this array of points (to the screen prior to applying a scaling transform (the blue rectangle).</term>
          </item>
          <item>
            <term>Creates a matrix and scales it by 3 in the x-axis and 2 in the y-axis.</term>
          </item>
          <item>
            <term>Applies this matrix transform to the array of points.</term>
          </item>
          <item>
            <term>Draws the transformed array to the screen (the red rectangle).</term>
          </item>
        </list>
        <para>Notice that the red rectangle has been scaled by a factor of 3 in the x-axis and by 2 in the y-axis, including the upper left-hand corner of the rectangle (the beginning point of the rectangle).</para>
        <code lang="VB">Public Sub TransformPointsExample(e As PaintEventArgs)
Dim myPen As New Pen(Color.Blue, 1)
Dim myPen2 As New Pen(Color.Red, 1)
&apos; Create an array of points.
Dim myArray As Point() =  {New Point(20, 20), New Point(120, 20), _
New Point(120, 120), New Point(20, 120), New Point(20, 20)}
&apos; Draw the Points to the screen before applying the
&apos; transform.
e.Graphics.DrawLines(myPen, myArray)
&apos; Create a matrix and scale it.
Dim myMatrix As New Matrix()
myMatrix.Scale(3, 2, MatrixOrder.Append)
myMatrix.TransformPoints(myArray)
&apos; Draw the Points to the screen again after applying the
&apos; transform.
e.Graphics.DrawLines(myPen2, myArray)
End Sub
        </code>
        <code lang="C#">public void TransformPointsExample(PaintEventArgs e)
{
Pen myPen = new Pen(Color.Blue, 1);
Pen myPen2 = new Pen(Color.Red, 1);
// Create an array of points.
Point[] myArray =
{
new Point(20, 20),
new Point(120, 20),
new Point(120, 120),
new Point(20, 120),
new Point(20,20)
};
// Draw the Points to the screen before applying the
// transform.
e.Graphics.DrawLines(myPen, myArray);
// Create a matrix and scale it.
Matrix myMatrix = new Matrix();
myMatrix.Scale(3, 2, MatrixOrder.Append);
myMatrix.TransformPoints(myArray);
// Draw the Points to the screen again after applying the
// transform.
e.Graphics.DrawLines(myPen2, myArray);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.PointF[])">
      <summary>
        <para>Applies the geometric transform represented by this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object to a specified array of points.</para>
      </summary>
      <param name="pts">
        An array of <see cref="T:System.Drawing.PointF"/> structures that represents the points to transform.
      </param>
      <example>
        <para>For an example, see <see langword="Matrix.TransformPoints Method (Point[])"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])">
      <overload>
        Multiplies each vector in an array by the matrix. The translation elements of this matrix (third row) are ignored.
      </overload>
      <summary>
        <para>Applies only the scale and rotate components of this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object to the specified array of points.</para>
      </summary>
      <param name="pts">
        An array of <see cref="T:System.Drawing.Point"/> structures that represents the points to transform.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an array of points that form a rectangle.</term>
          </item>
          <item>
            <term>Draws this array of points to the screen prior to applying a scaling transform (the blue rectangle).</term>
          </item>
          <item>
            <term>Creates a matrix and scales it by 3 in the x-axis and 2 in the y-axis, and translates it by 100 in both axes.</term>
          </item>
          <item>
            <term>Lists the matrix elements to the screen.</term>
          </item>
          <item>
            <term>Applies this matrix transform to the array of points.</term>
          </item>
          <item>
            <term>Draws the transformed array to the screen (the red rectangle).</term>
          </item>
        </list>
        <para>Notice that the red rectangle has been scaled by a factor of 3 in the x-axis and by 2 in the y-axis, including the upper left-hand corner of the rectangle (the beginning point of the rectangle) &#190; but the translation vector (the last two elements of the matrix) is ignored.</para>
        <code lang="VB">Public Sub TransformVectorsExample(e As PaintEventArgs)
Dim myPen As New Pen(Color.Blue, 1)
Dim myPen2 As New Pen(Color.Red, 1)
&apos; Create an array of points.
Dim myArray As Point() =  {New Point(20, 20), New Point(120, 20), _
New Point(120, 120), New Point(20, 120), New Point(20, 20)}
&apos; Draw the Points to the screen before applying the
&apos; transform.
e.Graphics.DrawLines(myPen, myArray)
&apos; Create a matrix and scale it.
Dim myMatrix As New Matrix()
myMatrix.Scale(3, 2, MatrixOrder.Append)
myMatrix.Translate(100, 100, MatrixOrder.Append)
ListMatrixElementsHelper(e, myMatrix, _
&quot;Scaled and Translated Matrix&quot;, 6, 20)
myMatrix.TransformVectors(myArray)
&apos; Draw the Points to the screen again after applying the
&apos; transform.
e.Graphics.DrawLines(myPen2, myArray)
End Sub
&apos; A helper function to list the contents of a matrix.
Public Sub ListMatrixElementsHelper(e As PaintEventArgs, _
matrix As Matrix, matrixName As String, numElements As Integer, _
y As Integer)
&apos; Set up variables for drawing the array
&apos; of points to the screen.
Dim i As Integer
Dim x As Single = 20
Dim j As Single = 200
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim myBrush As New SolidBrush(Color.Black)
&apos; Draw the matrix name to the screen.
e.Graphics.DrawString(matrixName + &quot;:  &quot;, myFont, myBrush, x, y)
&apos; Draw the set of path points and types to the screen.
For i = 0 To numElements - 1
e.Graphics.DrawString(matrix.Elements(i).ToString() + &quot;, &quot;, _
myFont, myBrush, j, y)
j += 30
Next i
End Sub
        </code>
        <code lang="C#">public void TransformVectorsExample(PaintEventArgs e)
{
Pen myPen = new Pen(Color.Blue, 1);
Pen myPen2 = new Pen(Color.Red, 1);
// Create an array of points.
Point[] myArray =
{
new Point(20, 20),
new Point(120, 20),
new Point(120, 120),
new Point(20, 120),
new Point(20,20)
};
// Draw the Points to the screen before applying the
// transform.
e.Graphics.DrawLines(myPen, myArray);
// Create a matrix, scale it, and translate it.
Matrix myMatrix = new Matrix();
myMatrix.Scale(3, 2, MatrixOrder.Append);
myMatrix.Translate(100, 100, MatrixOrder.Append);
// List the matrix elements to the screen.
ListMatrixElements(e,
myMatrix,
&quot;Scaled and Translated Matrix&quot;,
6,
20);
// Apply the transform to the array.
myMatrix.TransformVectors(myArray);
// Draw the Points to the screen again after applying the
// transform.
e.Graphics.DrawLines(myPen2, myArray);
}
//-------------------------------------------------------
// This function is a helper function to
// list the contents of a matrix.
//-------------------------------------------------------
public void ListMatrixElements(
PaintEventArgs e,
Matrix matrix,
string matrixName,
int numElements,
int y)
{
// Set up variables for drawing the array
// of points to the screen.
int i;
float x = 20, X = 200;
Font myFont = new Font(&quot;Arial&quot;, 8);
SolidBrush myBrush = new SolidBrush(Color.Black);
// Draw the matrix name to the screen.
e.Graphics.DrawString(
matrixName + &quot;:  &quot;,
myFont,
myBrush,
x,
y);
// Draw the set of path points and types to the screen.
for(i=0; i&lt;numElements; i++)
{
e.Graphics.DrawString(
matrix.Elements[i].ToString() + &quot;, &quot;,
myFont,
myBrush,
X,
y);
X += 30;
}
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.PointF[])">
      <summary>
        <para>Multiplies each vector in an array by the matrix. The translation elements of this matrix (third row) are ignored.</para>
      </summary>
      <param name="pts">
        An array of <see cref="T:System.Drawing.Point"/> structures that represents the points to transform.
      </param>
      <example>
        <para>For an example, see<see langword=" "/><see langword="Matrix.TransformVectors Method (Point[])"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single)">
      <overload>
        Applies the specified translation vector to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by prepending the translation vector.
      </overload>
      <summary>
        <para>Applies the specified translation vector (<paramref name="offsetX"/> and <paramref name="offsetY"/>) to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by prepending the translation vector.</para>
      </summary>
      <param name="offsetX">
        The x value by which to translate this <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </param>
      <param name="offsetY">
        The y value by which to translate this <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </param>
      <example>
        <para>For an example, see <see langword="Matrix.Translate Method (Single, Single, MatrixOrder)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Applies the specified translation vector to this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object in the specified order.</para>
      </summary>
      <param name="offsetX">
        The x value by which to translate this <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </param>
      <param name="offsetY">
        The y value by which to translate this <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies the order (append or prepend) in which the translation is applied to this <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Draws a rectangle to the screen prior to applying a translate transform (the blue rectangle).</term>
          </item>
          <item>
            <term>Creates a matrix and translates it by 100 in both axes.</term>
          </item>
          <item>
            <term>Applies this matrix transform to the rectangle,</term>
          </item>
          <item>
            <term>Draws the transformed rectangle to the screen (the red rectangle).</term>
          </item>
        </list>
        <para>Notice that the beginning of the red rectangle is located 100 points in both axes from the beginning of the blue triangle.</para>
        <code lang="VB">Public Sub TranslateExample(e As PaintEventArgs)
Dim myPen As New Pen(Color.Blue, 1)
Dim myPen2 As New Pen(Color.Red, 1)
&apos; Draw a rectangle to the screen before applying the
&apos; transform.
e.Graphics.DrawRectangle(myPen, 20, 20, 100, 50)
&apos; Create a matrix and translate it.
Dim myMatrix As New Matrix()
myMatrix.Translate(100, 100, MatrixOrder.Append)
&apos; Draw the Points to the screen again after applying the
&apos; transform.
e.Graphics.Transform = myMatrix
e.Graphics.DrawRectangle(myPen2, 20, 20, 100, 50)
End Sub
        </code>
        <code lang="C#">public void TranslateExample(PaintEventArgs e)
{
Pen myPen = new Pen(Color.Blue, 1);
Pen myPen2 = new Pen(Color.Red, 1);
// Draw a rectangle to the screen before applying the
// transform.
e.Graphics.DrawRectangle(myPen, 20, 20, 100, 50);
// Create a matrix and translate it.
Matrix myMatrix = new Matrix();
myMatrix.Translate(100, 100, MatrixOrder.Append);
// Draw the Points to the screen again after applying the
// transform.
e.Graphics.Transform = myMatrix;
e.Graphics.DrawRectangle(myPen2, 20, 20, 100, 50);
}
        </code>
      </example>
    </member>

    <member name="P:System.Drawing.Drawing2D.Matrix.Elements">
      <summary>
        <para>Gets an array of floating-point values that represents the elements of this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </summary>
      <value>
        <para>An array of floating-point values that represents the elements of this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </value>
      <remarks>
        <para>The elements m11, m12, m21, m22, dx, dy of the <see cref="T:System.Drawing.Drawing2D.Matrix"/> object are represented by the values in the array in that order.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.Matrix.IsIdentity">
      <summary>
        <para>Gets a value indicating whether this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object is the identity matrix.</para>
      </summary>
      <value>
        <para>This property is <see langword="true"/> if this <see cref="T:System.Drawing.Drawing2D.Matrix"/> is identity; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.Matrix.IsInvertible">
      <summary>
        <para>Gets a value indicating whether this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object is invertible.</para>
      </summary>
      <value>
        <para>This property is <see langword="true"/> if this <see cref="T:System.Drawing.Drawing2D.Matrix"/> is invertible; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.Matrix.OffsetX">
      <summary>
        <para>Gets the x translation value (the dx value, or the element in the third row and first column) of this <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </summary>
      <value>
        <para>The x translation value of this <see cref="T:System.Drawing.Drawing2D.Matrix"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.Matrix.OffsetY">
      <summary>
        <para>Gets the y translation value (the dy value, or the element in the third row and second column) of this <see cref="T:System.Drawing.Drawing2D.Matrix"/>.</para>
      </summary>
      <value>
        <para>The y translation value of this <see cref="T:System.Drawing.Drawing2D.Matrix"/>.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Drawing2D.PathData">
      <summary>
        <para>Contains the graphical data that makes up a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object. This class cannot be inherited.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathData.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.PathData"/> class.</para>
      </summary>
    </member>

    <member name="P:System.Drawing.Drawing2D.PathData.Points">
      <summary>
        <para>Gets or sets an array of <see cref="T:System.Drawing.PointF"/> structures that represents the points through which the path is constructed.</para>
      </summary>
      <value>
        <para>An array of <see cref="T:System.Drawing.PointF"/> objects that represents the points through which the path is constructed.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.PathData.Types">
      <summary>
        <para>Gets or sets the types of the corresponding points in the path.</para>
      </summary>
      <value>
        <para>An array of bytes that specify the types of the corresponding points in the path.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Drawing2D.PathGradientBrush">
      <summary>
        <para>Encapsulates a <see cref="T:System.Drawing.Brush"/> object that fills the interior of a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object with a gradient. This class cannot be inherited.</para>
      </summary>
      <remarks>
        <para>The color gradient is a smooth shading of colors from the center point of the path to the outside boundary edge of the path. Blend factors, positions, and style affect where the gradient starts and ends, and how fast it changes shade.</para>
         <para>Path gradient brushes do not obey the <see cref="P:System.Drawing.Graphics.SmoothingMode"/> property of the <see cref="T:System.Drawing.Graphics"/> object used to do the drawing. Areas filled using a <see langword="PathGradientBrush"/> object are rendered the same way (aliased) regardless of the smoothing mode.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> class with the specified path.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> class with the specified path.</para>
      </summary>
      <param name="path">
        The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object that defines the area filled by this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.#ctor(System.Drawing.Point[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> class with the specified points.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.Point"/> structures that represents the points that make up the vertices of the path.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.#ctor(System.Drawing.Point[],System.Drawing.Drawing2D.WrapMode)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> class with the specified points and wrap mode.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.Point"/> structures that represents the points that make up the vertices of the path.
      </param>
      <param name="wrapMode">
        A <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that specifies how fills drawn with this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object are tiled.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.#ctor(System.Drawing.PointF[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> class with the specified points.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.PointF"/> structures that represents the points that make up the vertices of the path.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.#ctor(System.Drawing.PointF[],System.Drawing.Drawing2D.WrapMode)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> class with the specified points and wrap mode.</para>
      </summary>
      <param name="points">
        An array of <see cref="T:System.Drawing.PointF"/> structures that represents the points that make up the vertices of the path.
      </param>
      <param name="wrapMode">
        A <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that specifies how fills drawn with this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object are tiled.
      </param>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.Clone">
      <summary>
        <para>Creates an exact copy of this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> this method creates, cast as an object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix)">
      <overload>
        Multiplies the <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that represents the local geometric transform of this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> by prepending the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </overload>
      <summary>
        <para>Updates the brush&apos;s transformation matrix with the product of brush&apos;s transformation matrix multiplied by another matrix.</para>
      </summary>
      <param name="matrix">
        The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that will be multiplied by the brush&apos;s current transformation matrix.
      </param>
      <example>
        <para>For an example, see <see langword="PathGradientBrush.MultiplyTransform Method (Matrix, MatrixOrder)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Updates the brush&apos;s transformation matrix with the product of the brush&apos;s transformation matrix  multiplied by another matrix.</para>
      </summary>
      <param name="matrix">
        The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that will be multiplied by the brush&apos;s current transformation matrix.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies in which order to multiply the two matrices.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a graphics path and adds a rectangle to it.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object from the path points (in this example, the points form a rectangle, but it could be most any shape).</term>
          </item>
          <item>
            <term>Sets the center color to red and the surrounding color to blue.</term>
          </item>
          <item>
            <term>Draws the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> to the screen prior to applying the multiply transform.</term>
          </item>
          <item>
            <term>Creates s matrix that rotates the brush 90 degrees and translates it by 100 in both axes.</term>
          </item>
          <item>
            <term>Applies this matrix to the brush by using the <see langword="MultiplyTransform"/> method,</term>
          </item>
          <item>
            <term>Draws the brush to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub MultiplyTransformExample(e As PaintEventArgs)
&apos; Create a graphics path and add a rectangle.
Dim myPath As New GraphicsPath()
Dim rect As New Rectangle(20, 20, 100, 50)
myPath.AddRectangle(rect)
&apos; Get the path&apos;s array of points.
Dim myPathPointArray As PointF() = myPath.PathPoints
&apos; Create a path gradient brush.
Dim myPGBrush As New PathGradientBrush(myPathPointArray)
&apos; Set the color span.
myPGBrush.CenterColor = Color.Red
Dim mySurroundColor As Color() = {Color.Blue}
myPGBrush.SurroundColors = mySurroundColor
&apos; Draw the brush to the screen prior to transformation.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 200)
&apos; Create a new matrix that rotates by 90 degrees, and
&apos; translates by 100 in each direction.
Dim myMatrix As New Matrix(0, 1, - 1, 0, 100, 100)
&apos; Apply the transform to the brush.
myPGBrush.MultiplyTransform(myMatrix, MatrixOrder.Append)
&apos; Draw the brush to the screen again after applying the
&apos; transform.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 300)
End Sub
        </code>
        <code lang="C#">public void MultiplyTransformExample(PaintEventArgs e)
{
// Create a graphics path and add an rectangle.
GraphicsPath myPath = new GraphicsPath();
Rectangle rect = new Rectangle(20, 20, 100, 50);
myPath.AddRectangle(rect);
// Get the path&apos;s array of points.
PointF[] myPathPointArray = myPath.PathPoints;
// Create a path gradient brush.
PathGradientBrush myPGBrush = new
PathGradientBrush(myPathPointArray);
// Set the color span.
myPGBrush.CenterColor = Color.Red;
Color[] mySurroundColor = {Color.Blue};
myPGBrush.SurroundColors = mySurroundColor;
// Draw the brush to the screen prior to transformation.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 200);
// Create a new matrix that rotates by 90 degrees, and
// translates by 100 in each direction.
Matrix myMatrix = new Matrix(0, 1, -1, 0, 100, 100);
// Apply the transform to the brush.
myPGBrush.MultiplyTransform(myMatrix, MatrixOrder.Append);
// Draw the brush to the screen again after applying the
// transform.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 300);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.ResetTransform">
      <summary>
        <para>Resets the <see langword="Transform"/> property to identity.</para>
      </summary>
      <example>
        <para>The following example resets the geometric transform of <paramref name="pgBrush"/> to identity. It is assumed that <paramref name="myPath"/> is an existing <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
        <code lang="C#">PathGradientBrush pgBrush = new PathGradientBrush(myPath);
pgBrush.ResetTransform();
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.RotateTransform(System.Single)">
      <overload>
        Applies a clockwise rotation of the specified angle to the local geometric transform.
      </overload>
      <summary>
        <para>Rotates the local geometric transform by the specified amount. This method prepends the rotation to the transform.</para>
      </summary>
      <param name="angle">
        The angle (extent) of rotation.
      </param>
      <example>
        <para>For an example, see <see langword="PathGradientBrush.RotateTransform Method (Single, MatrixOrder)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Rotates the local geometric transform by the specified amount in the specified order.</para>
      </summary>
      <param name="angle">
        The angle (extent)of rotation.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies whether to append or prepend the rotation matrix.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a graphics path and adds a rectangle to it.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object from the path points (in this example, the points form a rectangle, but it could be most any shape).</term>
          </item>
          <item>
            <term>Sets the center color to red and the surrounding color to blue.</term>
          </item>
          <item>
            <term>Draws the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> to the screen prior to applying the rotate transform.</term>
          </item>
          <item>
            <term>Applies the rotate transform to the brush by using its <see langword="RotateTransform"/> method.</term>
          </item>
          <item>
            <term>Draws the rotated brush (rectangle) to the screen.</term>
          </item>
        </list>
        <para>Notice that the bottom rectangle is rotated 45 degrees as compared to the one drawn prior to the translation.</para>
        <code lang="VB">Public Sub RotateTransformExample(e As PaintEventArgs)
&apos; Create a graphics path and add a rectangle.
Dim myPath As New GraphicsPath()
Dim rect As New Rectangle(100, 20, 100, 50)
myPath.AddRectangle(rect)
&apos; Get the path&apos;s array of points.
Dim myPathPointArray As PointF() = myPath.PathPoints
&apos; Create a path gradient brush.
Dim myPGBrush As New PathGradientBrush(myPathPointArray)
&apos; Set the color span.
myPGBrush.CenterColor = Color.Red
Dim mySurroundColor As Color() = {Color.Blue}
myPGBrush.SurroundColors = mySurroundColor
&apos; Draw the brush to the screen prior to transformation.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 200)
&apos; Apply the rotate transform to the brush.
myPGBrush.RotateTransform(45, MatrixOrder.Append)
&apos; Draw the brush to the screen again after applying the
&apos; transform.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 300)
End Sub
        </code>
        <code lang="C#">public void RotateTransformExample(PaintEventArgs e)
{
// Create a graphics path and add an ellipse.
GraphicsPath myPath = new GraphicsPath();
Rectangle rect = new Rectangle(100, 20, 100, 50);
myPath.AddRectangle(rect);
// Get the path&apos;s array of points.
PointF[] myPathPointArray = myPath.PathPoints;
// Create a path gradient brush.
PathGradientBrush myPGBrush = new
PathGradientBrush(myPathPointArray);
// Set the color span.
myPGBrush.CenterColor = Color.Red;
Color[] mySurroundColor = {Color.Blue};
myPGBrush.SurroundColors = mySurroundColor;
// Draw the brush to the screen prior to transformation.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 200);
// Apply the rotate transform to the brush.
myPGBrush.RotateTransform(45, MatrixOrder.Append);
// Draw the brush to the screen again after applying the
// transform.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 300);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.ScaleTransform(System.Single,System.Single)">
      <overload>
        Scales the local geometric transform by the specified amounts. This method prepends the scaling matrix to the transform.
      </overload>
      <summary>
        <para>Scales the local geometric transform by the specified amounts. This method prepends the scaling matrix to the transform.</para>
      </summary>
      <param name="sx">
        The transform scale factor in the x-axis direction.
      </param>
      <param name="sy">
        The transform scale factor in the y-axis direction.
      </param>
      <example>
        <para>for an example, see <see langword="PathGradientBrush.ScaleTransform Method (Single, Single, MatrixOrder)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Scales the local geometric transform by the specified amounts in the specified order.</para>
      </summary>
      <param name="sx">
        The transform scale factor in the x-axis direction.
      </param>
      <param name="sy">
        The transform scale factor in the y-axis direction.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies whether to append or prepend the scaling matrix.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code</para>
        <list type="bullet">
          <item>
            <term>Creates a graphics path and adds a rectangle to it.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object from the path points (in this example, the points form a rectangle, but it could be most any shape).</term>
          </item>
          <item>
            <term>Sets the center color to red and the surrounding color to blue.</term>
          </item>
          <item>
            <term>Draws the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> to the screen prior to applying the scale transform.</term>
          </item>
          <item>
            <term>Applies the scale transform to the brush by using its <see langword="ScaleTransform"/> method.</term>
          </item>
          <item>
            <term>Calls the <see langword="TranslateTransform"/> method to move the brush rectangle such that it does not overlay the one drawn to the screen earlier.</term>
          </item>
          <item>
            <term>Draws the translated brush rectangle to the screen.</term>
          </item>
        </list>
        <para>Notice that the bottom rectangle is twice as long in the x-axis as is the one drawn prior to the translation.</para>
        <code lang="VB">Public Sub ScaleTransformExample(e As PaintEventArgs)
&apos; Create a graphics path and add a rectangle.
Dim myPath As New GraphicsPath()
Dim rect As New Rectangle(100, 20, 100, 50)
myPath.AddRectangle(rect)
&apos; Get the path&apos;s array of points.
Dim myPathPointArray As PointF() = myPath.PathPoints
&apos; Create a path gradient brush.
Dim myPGBrush As New PathGradientBrush(myPathPointArray)
&apos; Set the color span.
myPGBrush.CenterColor = Color.Red
Dim mySurroundColor As Color() = {Color.Blue}
myPGBrush.SurroundColors = mySurroundColor
&apos; Draw the brush to the screen prior to transformation.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 200)
&apos; Scale by a factor of 2 in the x-axis by applying the scale
&apos; transform to the brush.
myPGBrush.ScaleTransform(2, 1, MatrixOrder.Append)
&apos; Move the brush down by 100 by Applying the translate
&apos; transform to the brush.
myPGBrush.TranslateTransform(- 100, 100, MatrixOrder.Append)
&apos; Draw the brush to the screen again after applying the
&apos; transforms.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 300, 300)
End Sub
        </code>
        <code lang="C#">public void ScaleTransformExample(PaintEventArgs e)
{
// Create a graphics path and add a rectangle.
GraphicsPath myPath = new GraphicsPath();
Rectangle rect = new Rectangle(100, 20, 100, 50);
myPath.AddRectangle(rect);
// Get the path&apos;s array of points.
PointF[] myPathPointArray = myPath.PathPoints;
// Create a path gradient brush.
PathGradientBrush myPGBrush = new
PathGradientBrush(myPathPointArray);
// Set the color span.
myPGBrush.CenterColor = Color.Red;
Color[] mySurroundColor = {Color.Blue};
myPGBrush.SurroundColors = mySurroundColor;
// Draw the brush to the screen prior to transformation.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 200);
// Scale by a factor of 2 in the x-axis by applying the scale
// transform to the brush.
myPGBrush.ScaleTransform(2, 1, MatrixOrder.Append);
// Move the brush down by 100 by Applying the translate
// transform to the brush.
myPGBrush.TranslateTransform(-100, 100, MatrixOrder.Append);
// Draw the brush to the screen again after applying the
// transforms.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 300, 300);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.SetBlendTriangularShape(System.Single)">
      <overload>
        Creates a gradient with a center color and a linear falloff to one surrounding color.
      </overload>
      <summary>
        <para>Creates a gradient with a center color and a linear falloff to one surrounding color.</para>
      </summary>
      <param name="focus">
        A value from 0 through 1 that specifies where, along any radial from the center of the path to the path&apos;s boundary, the center color will be at its highest intensity. A value of 1 (the default) places the highest intensity at the center of the path.
      </param>
      <example>
        <para>For an example, see <see langword="PathGradientBrush.SetBlendTriangularShape Method (Single, Single)"/>.</para>
      </example>
      <remarks>
        <para>If there is more than one color in the <see cref="P:System.Drawing.Drawing2D.PathGradientBrush.SurroundColors"/> array, the first color in the array is used for the ending color. The  colors specified in this array are used for discrete points on the brush&apos;s boundary path.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.SetBlendTriangularShape(System.Single,System.Single)">
      <summary>
        <para>Creates a gradient with a center color and a linear falloff to each surrounding color.</para>
      </summary>
      <param name="focus">
        A value from 0 through 1 that specifies where, along any radial from the center of the path to the path&apos;s boundary, the center color will be at its highest intensity. A value of 1 (the default) places the highest intensity at the center of the path.
      </param>
      <param name="scale">
        A value from 0 through 1 that specifies the maximum intensity of the center color that gets blended with the boundary color. A value of 1 causes the highest possible intensity of the center color, and it is the default value.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a graphics path and adds a rectangle to it.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> from the path points (in this example, the points form a rectangle, but it could be most any shape).</term>
          </item>
          <item>
            <term>Sets the center color to red and the surrounding color to blue.</term>
          </item>
          <item>
            <term>Draws the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> to the screen prior to applying the blend transform.</term>
          </item>
          <item>
            <term>Applies the blend transform to the brush by using its <see langword="SetBlendTriangularShape"/> method.</term>
          </item>
          <item>
            <term>Calls the <see langword="TranslateTransform"/> method to move the brush rectangle such that it does not overlay the one drawn to the screen earlier.</term>
          </item>
          <item>
            <term>Draws the transformed-brush rectangle is drawn to the screen.</term>
          </item>
        </list>
        <para>Notice that the maximum center color (red) is located half way from the center of the path to the path boundary.</para>
        <code lang="VB">Public Sub SetBlendTriangularShapeExample(e As PaintEventArgs)
&apos; Create a graphics path and add a rectangle.
Dim myPath As New GraphicsPath()
Dim rect As New Rectangle(100, 20, 100, 50)
myPath.AddRectangle(rect)
&apos; Get the path&apos;s array of points.
Dim myPathPointArray As PointF() = myPath.PathPoints
&apos; Create a path gradient brush.
Dim myPGBrush As New PathGradientBrush(myPathPointArray)
&apos; Set the color span.
myPGBrush.CenterColor = Color.Red
Dim mySurroundColor As Color() = {Color.Blue}
myPGBrush.SurroundColors = mySurroundColor
&apos; Draw the brush to the screen prior to blend.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 200)
&apos; Set the Blend factors.
myPGBrush.SetBlendTriangularShape(0.5F, 1F)
&apos; Move the brush down by 100 by Applying the translate
&apos; transform to the brush.
myPGBrush.TranslateTransform(0, 100, MatrixOrder.Append)
&apos; Draw the brush to the screen again after applying the
&apos; transforms.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 300, 300)
End Sub
        </code>
        <code lang="C#">public void SetBlendTriangularShapeExample(PaintEventArgs e)
{
// Create a graphics path and add a rectangle.
GraphicsPath myPath = new GraphicsPath();
Rectangle rect = new Rectangle(100, 20, 100, 50);
myPath.AddRectangle(rect);
// Get the path&apos;s array of points.
PointF[] myPathPointArray = myPath.PathPoints;
// Create a path gradient brush.
PathGradientBrush myPGBrush = new
PathGradientBrush(myPathPointArray);
// Set the color span.
myPGBrush.CenterColor = Color.Red;
Color[] mySurroundColor = {Color.Blue};
myPGBrush.SurroundColors = mySurroundColor;
// Draw the brush to the screen prior to the blend.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 200);
// Set the Blend factors.
myPGBrush.SetBlendTriangularShape(0.5f, 1.0f);
// Move the brush down by 100 by Applying the translate
// transform to the brush.
myPGBrush.TranslateTransform(0, 100, MatrixOrder.Append);
// Draw the brush to the screen again after applying the
// transforms.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 300, 300);
}
        </code>
      </example>
      <remarks>
        <para>If there is more than one color in the <see cref="P:System.Drawing.Drawing2D.PathGradientBrush.SurroundColors"/> array, the first color in the array is used for the ending color. The  colors specified in this array are colors used for discrete points on the brush&apos;s boundary path.</para>
        <para>By default, as you move from the boundary of a path gradient to the center point, the color changes gradually from the boundary color to the center color. You can customize the positioning and blending of the boundary and center colors by calling this method.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.SetSigmaBellShape(System.Single)">
      <overload>
        Creates a gradient falloff between the center color and the first surrounding color based on a bell-shaped curve.
      </overload>
      <summary>
        <para>Creates a gradient brush that changes color starting from the center of the path outward to the path&apos;s boundary. The transition from one color to another is based on a bell-shaped curve.</para>
      </summary>
      <param name="focus">
        A value from 0 through 1 that specifies where, along any radial from the center of the path to the path&apos;s boundary, the center color will be at its highest intensity. A value of 1 (the default) places the highest intensity at the center of the path.
      </param>
      <example>
        <para>For an example, see <see langword="PathGradientBrush.SetSigmaBellShape Method (Single, Single)"/>.</para>
      </example>
      <remarks>
        <para>If there is more than one color in the <see cref="P:System.Drawing.Drawing2D.PathGradientBrush.SurroundColors"/> array, the first color in the array is used for the ending color. The  colors specified in this array are colors used for discrete points on the brush&apos;s boundary path.</para>
        <para>By default, as you move from the boundary of a path gradient to the center point, the color changes gradually from the boundary color to the center color. You can customize the positioning and blending of the boundary and center colors by calling this method.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.SetSigmaBellShape(System.Single,System.Single)">
      <summary>
        <para>Creates a gradient brush that changes color starting from the center of the path outward to the path&apos;s boundary. The transition from one color to another is based on a bell-shaped curve. </para>
      </summary>
      <param name="focus">
        A value from 0 through 1 that specifies where, along any radial from the center of the path to the path&apos;s boundary, the center color will be at its highest intensity. A value of 1 (the default) places the highest intensity at the center of the path.
      </param>
      <param name="scale">
        A value from 0 through 1 that specifies the maximum intensity of the center color that gets blended with the boundary color. A value of 1 causes the highest possible intensity of the center color, and it is the default value.
      </param>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, an <see cref="M:System.Windows.Forms.Control.OnPaint"/> event object. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a graphics path and adds a rectangle to it.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> from the path points (in this example, the points form a rectangle, but it could be most any shape).</term>
          </item>
          <item>
            <term>Sets the center color to red and the surrounding color to blue.</term>
          </item>
          <item>
            <term>Draws the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> to the screen prior to applying the blend transform.</term>
          </item>
          <item>
            <term>Applies the blend transform to the brush by using its <see langword="SetSigmaBellShape"/> method.</term>
          </item>
          <item>
            <term>Calls the <see langword="TranslateTransform"/> method to move the brush rectangle such that it does not overlay the one drawn to the screen earlier.</term>
          </item>
          <item>
            <term>Draws the transformed-brush rectangle to the screen.</term>
          </item>
        </list>
        <para>Notice that the maximum center color (red) is located half way from the center of the path to the path boundary.</para>
        <code lang="VB">Public Sub SetSigmaBellShapeExample(e As PaintEventArgs)
&apos; Create a graphics path and add a rectangle.
Dim myPath As New GraphicsPath()
Dim rect As New Rectangle(100, 20, 100, 50)
myPath.AddRectangle(rect)
&apos; Get the path&apos;s array of points.
Dim myPathPointArray As PointF() = myPath.PathPoints
&apos; Create a path gradient brush.
Dim myPGBrush As New PathGradientBrush(myPathPointArray)
&apos; Set the color span.
myPGBrush.CenterColor = Color.Red
Dim mySurroundColor As Color() = {Color.Blue}
myPGBrush.SurroundColors = mySurroundColor
&apos; Draw the brush to the screen prior to blend.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 200)
&apos; Set the Blend factors.
myPGBrush.SetSigmaBellShape(0.5F, 1F)
&apos; Move the brush down by 100 by applying the translate
&apos; transform to the brush.
myPGBrush.TranslateTransform(0, 100, MatrixOrder.Append)
&apos; Draw the brush to the screen again after setting the
&apos; blend and applying the transform.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 300, 300)
End Sub
        </code>
        <code lang="C#">public void SetSigmaBellShapeExample(PaintEventArgs e)
{
// Create a graphics path and add a rectangle.
GraphicsPath myPath = new GraphicsPath();
Rectangle rect = new Rectangle(100, 20, 100, 50);
myPath.AddRectangle(rect);
// Get the path&apos;s array of points.
PointF[] myPathPointArray = myPath.PathPoints;
// Create a path gradient brush.
PathGradientBrush myPGBrush = new
PathGradientBrush(myPathPointArray);
// Set the color span.
myPGBrush.CenterColor = Color.Red;
Color[] mySurroundColor = {Color.Blue};
myPGBrush.SurroundColors = mySurroundColor;
// Draw the brush to the screen prior to blend.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 200, 200);
// Set the Blend factors and transform the brush.
myPGBrush.SetSigmaBellShape(0.5f, 1.0f);
// Move the brush down by 100 by applying the translate
// transform to the brush.
myPGBrush.TranslateTransform(0, 100, MatrixOrder.Append);
// Draw the brush to the screen again after setting the
// blend and applying the transform.
e.Graphics.FillRectangle(myPGBrush, 10, 10, 300, 300);
}
        </code>
      </example>
      <remarks>
        <para>If there is more than one color in the <see cref="P:System.Drawing.Drawing2D.PathGradientBrush.SurroundColors"/> array, the first color in the array is used for the ending color. The  colors specified in this array are colors used for discrete points on the brush&apos;s boundary path.</para>
        <para>By default, as you move from the boundary of a path gradient to the center point, the color changes gradually from the boundary color to the center color. You can customize the positioning and blending of the boundary and center colors by calling this method.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.TranslateTransform(System.Single,System.Single)">
      <overload>
        Applies the specified translation to the local geometric transform. This method prepends the translation to the transform.
      </overload>
      <summary>
        <para>Applies the specified translation to the local geometric transform. This method prepends the translation to the transform.</para>
      </summary>
      <param name="dx">
        The value of the translation in x.
      </param>
      <param name="dy">
        The value of the translation in y.
      </param>
      <example>
        <para>For an example, see <see langword="PathGradientBrush.SetBlendTriangularShape Method (Single, Single)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Drawing2D.PathGradientBrush.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Applies the specified translation to the local geometric transform in the specified order.</para>
      </summary>
      <param name="dx">
        The value of the translation in x.
      </param>
      <param name="dy">
        The value of the translation in y.
      </param>
      <param name="order">
        The order (prepend or append) in which to apply the translation.
      </param>
      <example>
        <para>For an example, see <see langword="PathGradientBrush.SetBlendTriangularShape Method (Single, Single)"/>.</para>
      </example>
    </member>

    <member name="P:System.Drawing.Drawing2D.PathGradientBrush.Blend">
      <summary>
        <para>Gets or sets a <see cref="T:System.Drawing.Drawing2D.Blend"/> object that specifies positions and factors that define a custom falloff for the gradient.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.Blend"/> object that represents a custom falloff for the gradient.</para>
      </value>
      <remarks>
        <para>A <see cref="T:System.Drawing.Drawing2D.Blend"/> object contains corresponding arrays of blend factors and positions. The blend factors specify the percentages of the starting color and ending color to use at the corresponding position. The positions are given as a percentage of distance along the gradient path.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.PathGradientBrush.CenterColor">
      <summary>
        <para>Gets or sets the color at the center of the path gradient.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that represents the color at the center of the path gradient.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.PathGradientBrush.CenterPoint">
      <summary>
        <para>Gets or sets the center point of the path gradient.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.PointF"/> structure that represents the center point of the path gradient.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.PathGradientBrush.FocusScales">
      <summary>
        <para>Gets or sets the focus point for the gradient falloff.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.PointF"/> structure that represents the focus point for the gradient falloff.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.PathGradientBrush.InterpolationColors">
      <summary>
        <para>Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object that defines a multicolor linear gradient.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object that defines a multicolor linear gradient.</para>
      </value>
      <remarks>
        <para>A <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object contains corresponding arrays of colors and positions. The positions are values from 0 through 1 that specify the percentage of the distance along the gradient path where the corresponding color is located.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.PathGradientBrush.Rectangle">
      <summary>
        <para>Gets a bounding rectangle for this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.RectangleF"/> structure that represents a rectangular region that bounds the path this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object fills.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Drawing2D.PathGradientBrush.SurroundColors">
      <summary>
        <para>Gets or sets an array of colors that correspond to the points in the path this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object fills.</para>
      </summary>
      <value>
        <para>An array of <see cref="T:System.Drawing.Color"/> structures that represents the colors associated with each point in the path this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object fills.</para>
      </value>
      <remarks>
        <para>Each <see cref="T:System.Drawing.Color"/> structure in the <see cref="P:System.Drawing.Drawing2D.PathGradientBrush.SurroundColors"/> array corresponds to a point in the path.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.PathGradientBrush.Transform">
      <summary>
        <para>Gets or sets a <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that defines a local geometric transform for this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that defines a geometric transform that applies only to fills drawn with this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</para>
      </value>
      <remarks>
        <para>A geometric transform can be used to translate, scale, rotate, or skew the gradient fill.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Drawing2D.PathGradientBrush.WrapMode">
      <summary>
        <para>Gets or sets a <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that indicates the wrap mode for this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that specifies how fills drawn with this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object are tiled.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Drawing2D.RegionData">
      <summary>
        <para>Encapsulates the data that makes up a <see cref="T:System.Drawing.Region"/> object. This class cannot be inherited.</para>
      </summary>
    </member>

    <member name="P:System.Drawing.Drawing2D.RegionData.Data">
      <summary>
        <para>Gets or sets an array of bytes that specify the <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <value>
        <para>An array of bytes that specify the <see cref="T:System.Drawing.Region"/> object.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Drawing2D.CombineMode">
      <summary>
        <para>Specifies how different clipping regions can be combined.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CombineMode.Complement">
      <summary>
        <para>Specifies that the existing region is replaced by the result of the existing region being removed from the new region. Said differently, the existing region is excluded from the new region.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CombineMode.Exclude">
      <summary>
        <para>Specifies that the existing region is replaced by the result of the new region being removed from the existing region. Said differently, the new region is excluded from the existing region.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CombineMode.Intersect">
      <summary>
        <para>Two clipping regions are combined by taking their intersection.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CombineMode.Replace">
      <summary>
        <para>One clipping region is replaced by another.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CombineMode.Union">
      <summary>
        <para>Two clipping regions are combined by taking the union of both.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CombineMode.Xor">
      <summary>
        <para>Two clipping regions are combined by taking only the areas enclosed by one or the other region, but not both.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.CompositingMode">
      <summary>
        <para>Specifies how the source colors are combined with the background colors.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CompositingMode.SourceCopy">
      <summary>
        <para>Specifies that when a color is rendered, it overwrites the background color. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CompositingMode.SourceOver">
      <summary>
        <para>Specifies that when a color is rendered, it is blended with the background color. The blend is determined by the alpha component of the color being rendered. </para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.CompositingQuality">
      <summary>
        <para>Specifies the quality level to use during compositing.</para>
      </summary>
      <remarks>
        <para>Compositing is done during rendering when the source pixels are combined with the destination pixels to produce the resultant pixels. The quality of compositing directly relates to the visual quality of the output and is inversely proportional to the render time. The higher the quality, the slower the render time. This is because the higher the quality level, the more surrounding pixels need to be taken into account during the composite. The linear quality setting (<see langword="AssumeLinear"/>) compromises by providing better quality than the default quality at a slightly lower speed.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Drawing2D.CompositingQuality.AssumeLinear">
      <summary>
        <para>Assume linear values.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CompositingQuality.Default">
      <summary>
        <para>Default quality.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CompositingQuality.GammaCorrected">
      <summary>
        <para>Gamma correction is used.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CompositingQuality.HighQuality">
      <summary>
        <para>High quality, low speed compositing.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CompositingQuality.HighSpeed">
      <summary>
        <para>High speed, low quality.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CompositingQuality.Invalid">
      <summary>
        <para>Invalid quality.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.CoordinateSpace">
      <summary>
        <para>Specifies the system to use when evaluating coordinates.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CoordinateSpace.Device">
      <summary>
        <para>Specifies that coordinates are in the device coordinate context. On a computer screen the device coordinates are usually measured in pixels.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CoordinateSpace.Page">
      <summary>
        <para>Specifies that coordinates are in the page coordinate context. Their units are defined by the <see langword="Graphics.PageUnit"/> property, and must be one of the elements of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.CoordinateSpace.World">
      <summary>
        <para>Specifies that coordinates are in the world coordinate context. World coordinates are used in a nonphysical environment, such as a modeling environment.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.DashCap">
      <summary>
        <para>Specifies the type of graphic shape to use on both ends of each dash in a dashed line.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.DashCap.Flat">
      <summary>
        <para>Specifies a square cap that squares off both ends of each dash. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.DashCap.Round">
      <summary>
        <para>Specifies a circular cap that rounds off both ends of each dash. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.DashCap.Triangle">
      <summary>
        <para>Specifies a triangular cap that points both ends of each dash.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.DashStyle">
      <summary>
        <para>Specifies the style of dashed lines drawn with a <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.DashStyle.Custom">
      <summary>
        <para>Specifies a user-defined custom dash style.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.DashStyle.Dash">
      <summary>
        <para>Specifies a line consisting of dashes.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.DashStyle.DashDot">
      <summary>
        <para>Specifies a line consisting of a repeating pattern of dash-dot.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.DashStyle.DashDotDot">
      <summary>
        <para>Specifies a line consisting of a repeating pattern of dash-dot-dot.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.DashStyle.Dot">
      <summary>
        <para>Specifies a line consisting of dots.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.DashStyle.Solid">
      <summary>
        <para>Specifies a solid line.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.FillMode">
      <summary>
        <para>Specifies how the interior of a closed path is filled.</para>
      </summary>
      <remarks>
        <para>An application fills the interior of a path using one of two fill modes: alternate or winding. The mode determines how to fill and clip the interior of a closed figure.</para>
        <para>The default mode is <see langword="Alternate"/>. To determine the interiors of closed figures in the alternate mode, draw a line from any arbitrary start point in the path to some point obviously outside the path. If the line crosses an odd number of path segments, the starting point is inside the closed region and is therefore part of the fill or clipping area. An even number of crossings means that the point is not in an area to be filled or clipped. An open figure is filled or clipped by using a line to connect the last point to the first point of the figure.</para>
        <para>The <see langword="Winding"/> mode considers the direction of the path segments at each intersection. It adds one for every clockwise intersection, and subtracts one for every counterclockwise intersection. If the result is nonzero, the point is considered inside the fill or clip area. A zero count means that the point lies outside the fill or clip area.</para>
        <para>A figure is considered clockwise or counterclockwise based on the order in which the segments of the figure are drawn.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Drawing2D.FillMode.Alternate">
      <summary>
        <para>Specifies the alternate fill mode.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.FillMode.Winding">
      <summary>
        <para>Specifies the winding fill mode.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.FlushIntention">
      <summary>
        <para>Specifies whether commands in the graphics stack are terminated (flushed) immediately or executed as soon as possible.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.FlushIntention.Flush">
      <summary>
        <para>Specifies that the stack of all graphics operations is flushed immediately.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.FlushIntention.Sync">
      <summary>
        <para>Specifies that all graphics operations on the stack are executed as soon as possible. This synchronizes the graphics state.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.HatchStyle">
      <summary>
        <para>Specifies the different patterns available for <see cref="T:System.Drawing.Drawing2D.HatchBrush"/> objects.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.BackwardDiagonal">
      <summary>
        <para>A pattern of lines on a diagonal from upper right to lower left.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Cross">
      <summary>
        <para>Specifies horizontal and vertical lines that cross.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.DiagonalCross">
      <summary>
        <para>A pattern of crisscross diagonal lines.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.DarkDownwardDiagonal">
      <summary>
        <para>Specifies diagonal lines that slant to the right from top points to bottom points, are spaced 50 percent closer together than, and are twice the width of <see langword="ForwardDiagonal"/>. This hatch pattern is not antialiased. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.DarkHorizontal">
      <summary>
        <para>Specifies horizontal lines that are spaced 50 percent closer together than Horizontal and are twice the width of <see langword="HatchStyleHorizontal"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.DarkUpwardDiagonal">
      <summary>
        <para>Specifies diagonal lines that slant to the left from top points to bottom points, are spaced 50 percent closer together than <see langword="BackwardDiagonal"/>, and are twice its width, but the lines are not antialiased.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.DarkVertical">
      <summary>
        <para>Specifies vertical lines that are spaced 50 percent closer together than <see langword="Vertical"/> and are twice its width.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.DashedDownwardDiagonal">
      <summary>
        <para>Specifies dashed diagonal lines, that slant to the right from top points to bottom points.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.DashedHorizontal">
      <summary>
        <para>Specifies dashed horizontal lines.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.DashedUpwardDiagonal">
      <summary>
        <para>Specifies dashed diagonal lines, that slant to the left from top points to bottom points.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.DashedVertical">
      <summary>
        <para>Specifies dashed vertical lines.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.DiagonalBrick">
      <summary>
        <para>Specifies a hatch that has the appearance of layered bricks that slant to the left from top points to bottom points.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.DiagonalCross">
      <summary>
        <para>Specifies forward diagonal and backward diagonal lines that cross. The lines are antialiased.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Divot">
      <summary>
        <para>Specifies a hatch that has the appearance of divots.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.DottedDiamond">
      <summary>
        <para>Specifies forward diagonal and backward diagonal lines, each of which is composed of dots, that cross.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.DottedGrid">
      <summary>
        <para>Specifies horizontal and vertical lines, each of which is composed of dots, that cross.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.ForwardDiagonal">
      <summary>
        <para>A pattern of lines on a diagonal from upper left to lower right.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Horizontal">
      <summary>
        <para>A pattern of horizontal lines.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.HorizontalBrick">
      <summary>
        <para>Specifies a hatch that has the appearance of horizontally layered bricks.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.LargeCheckerBoard">
      <summary>
        <para>Specifies a hatch that has the appearance of a checkerboard with squares that are twice the size of <see langword="SmallCheckerBoard"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.LargeConfetti">
      <summary>
        <para>Specifies a hatch that has the appearance of confetti, and is composed of larger pieces than <see langword="SmallConfetti"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.LargeGrid">
      <summary>
        <para>Specifies the hatch style <see langword="Cross"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.LightDownwardDiaglonal">
      <summary>
        <para>Specifies diagonal lines that slant to the right from top points to bottom points and are spaced 50 percent closer together than <see langword="ForwardDiagonal"/>, but are not antialiased.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.LightHorizontal">
      <summary>
        <para>Specifies horizontal lines that are spaced 50 percent closer together than <see langword="Horizontal"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.LightUpwardDiagonal">
      <summary>
        <para>Specifies diagonal lines that slant to the left from top points to bottom points and are spaced 50 percent closer together than <see langword="BackwardDiagonal"/>, but they are not antialiased.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.LightVertical">
      <summary>
        <para>Specifies vertical lines that are spaced 50 percent closer together than <see langword="Vertical"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Max">
      <summary>
        <para>Specifies hatch style <see langword="SolidDiamond"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Min">
      <summary>
        <para>Specifies hatch style <see langword="Horizonal"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.NarrowHorizontal">
      <summary>
        <para>Specifies horizontal lines that are spaced 75 percent closer together than hatch style <see langword="Horizontal"/> (or 25 percent closer together than <see langword="LightHorizontal"/>).</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.NarrowVertical">
      <summary>
        <para>Specifies vertical lines that are spaced 75 percent closer together than hatch style <see langword="Vertical"/> (or 25 percent closer together than <see langword="LightVertical"/>).</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.OutlinedDiamond">
      <summary>
        <para>Specifies forward diagonal and backward diagonal lines that cross but are not antialiased.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Percent05">
      <summary>
        <para>Specifies a 5-percent hatch. The ratio of foreground color to background color is 5:100.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Percent10">
      <summary>
        <para>Specifies a 10-percent hatch. The ratio of foreground color to background color is 10:100.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Percent20">
      <summary>
        <para>Specifies a 20-percent hatch. The ratio of foreground color to background color is 20:100.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Percent25">
      <summary>
        <para>Specifies a 25-percent hatch. The ratio of foreground color to background color is 25:100.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Percent30">
      <summary>
        <para>Specifies a 30-percent hatch. The ratio of foreground color to background color is 30:100.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Percent40">
      <summary>
        <para>Specifies a 40-percent hatch. The ratio of foreground color to background color is 40:100.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Percent50">
      <summary>
        <para>Specifies a 50-percent hatch. The ratio of foreground color to background color is 50:100.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Percent60">
      <summary>
        <para>Specifies a 60-percent hatch. The ratio of foreground color to background color is 60:100.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Percent70">
      <summary>
        <para>Specifies a 70-percent hatch. The ratio of foreground color to background color is 70:100.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Percent75">
      <summary>
        <para>Specifies a 75-percent hatch. The ratio of foreground color to background color is 75:100.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Percent80">
      <summary>
        <para>Specifies a 80-percent hatch. The ratio of foreground color to background color is 80:100.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Percent90">
      <summary>
        <para>Specifies a 90-percent hatch. The ratio of foreground color to background color is 90:100.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Plaid">
      <summary>
        <para>Specifies a hatch that has the appearance of a plaid material.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Shingle">
      <summary>
        <para>Specifies a hatch that has the appearance of diagonally-layered shingles that slant to the right from top points to bottom points.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.SmallCheckerBoard">
      <summary>
        <para>Specifies a hatch that has the appearance of a checkerboard.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.SmallConfetti">
      <summary>
        <para>Specifies a hatch that has the appearance of confetti.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.SmallGrid">
      <summary>
        <para>Specifies horizontal and vertical lines that cross and are spaced 50 percent closer together than hatch style <see langword="Cross"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.SolidDiamond">
      <summary>
        <para>Specifies a hatch that has the appearance of a checkerboard placed diagonally.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Sphere">
      <summary>
        <para>Specifies a hatch that has the appearance of spheres laid adjacent to one another.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Trellis">
      <summary>
        <para>Specifies a hatch that has the appearance of a trellis.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Vertical">
      <summary>
        <para>A pattern of vertical lines.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Wave">
      <summary>
        <para>Specifies horizontal lines that are composed of tildes.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.Weave">
      <summary>
        <para>Specifies a hatch that has the appearance of a woven material.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.WideDownwardDiagonal">
      <summary>
        <para>Specifies diagonal lines that slant to the right from top points to bottom points, have the same spacing as hatch style <see langword="ForwardDiagonal"/>, and are triple its width, but are not antialiased.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.WideUpwardDiagonal">
      <summary>
        <para>Specifies diagonal lines that slant to the left from top points to bottom points, have the same spacing as hatch style <see langword="BackwardDiagonal"/>, and are triple its width, but are not antialiased.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.HatchStyle.ZigZag">
      <summary>
        <para>Specifies horizontal lines that are composed of zigzags.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.InterpolationMode">
      <summary>
        <para>Specifies how data is interpolated between endpoints.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.InterpolationMode.Bicubic">
      <summary>
        <para>Specifies bicubic interpolation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.InterpolationMode.Bilinear">
      <summary>
        <para>Specifies bilinear interpolation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.InterpolationMode.Default">
      <summary>
        <para>Specifies default mode.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.InterpolationMode.High">
      <summary>
        <para>Specifies high quality interpolation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic">
      <summary>
        <para>Specifies high quality bicubic interpolation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.InterpolationMode.HighQualityBilinear">
      <summary>
        <para>Specifies high quality bilinear interpolation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.InterpolationMode.Invalid">
      <summary>
        <para>Equivalent to the Invalid element of the <see cref="T:System.Drawing.Drawing2D.QualityMode"/> enumeration.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.InterpolationMode.Low">
      <summary>
        <para>Specifies low quality interpolation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.InterpolationMode.NearestNeighbor">
      <summary>
        <para>Specifies nearest-neighbor interpolation.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.LinearGradientMode">
      <summary>
        <para>Specifies the direction of a linear gradient.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LinearGradientMode.BackwardDiagonal">
      <summary>
        <para>Specifies a gradient from upper right to lower left.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LinearGradientMode.ForwardDiagonal">
      <summary>
        <para>Specifies a gradient from upper left to lower right.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LinearGradientMode.Horizontal">
      <summary>
        <para>Specifies a gradient from left to right.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LinearGradientMode.Vertical">
      <summary>
        <para>Specifies a gradient from top to bottom.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.LineCap">
      <summary>
        <para>Specifies the available cap styles with which a <see cref="T:System.Drawing.Pen"/> object can end a line.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineCap.AnchorMask">
      <summary>
        <para>Specifies a mask used to check whether a line cap is an anchor cap.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineCap.ArrowAnchor">
      <summary>
        <para>Specifies an arrow-shaped anchor cap.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineCap.Custom">
      <summary>
        <para>Specifies a custom line cap.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineCap.DiamondAnchor">
      <summary>
        <para>Specifies a diamond anchor cap.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineCap.Flat">
      <summary>
        <para>Specifies a flat line cap.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineCap.NoAnchor">
      <summary>
        <para>Specifies no anchor.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineCap.Round">
      <summary>
        <para>Specifies a round line cap.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineCap.RoundAnchor">
      <summary>
        <para>Specifies a round anchor cap.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineCap.Square">
      <summary>
        <para>Specifies a square line cap.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineCap.SquareAnchor">
      <summary>
        <para>Specifies a square anchor line cap.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineCap.Triangle">
      <summary>
        <para>Specifies a triangular line cap.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.LineJoin">
      <summary>
        <para>Specifies how to join consecutive line or curve segments in a figure (subpath) contained in a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineJoin.Bevel">
      <summary>
        <para>Specifies a beveled join. This produces a diagonal corner.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineJoin.Miter">
      <summary>
        <para>Specifies a mitered join. This produces a sharp corner or a clipped corner, depending on whether the length of the miter exceeds the miter limit.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineJoin.MiterClipped">
      <summary>
        <para>Specifies a mitered join. This produces a sharp corner or a beveled corner, depending on whether the length of the miter exceeds the miter limit.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.LineJoin.Round">
      <summary>
        <para>Specifies a circular join. This produces a smooth, circular arc between the lines.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.MatrixOrder">
      <summary>
        <para>Specifies the order for matrix transform operations.</para>
      </summary>
      <remarks>
        <para>Matrix transform operations are not necessarily commutative. The order in which they are applied is important.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Drawing2D.MatrixOrder.Append">
      <summary>
        <para>The new operation is applied after the old operation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.MatrixOrder.Prepend">
      <summary>
        <para>The new operation is applied before the old operation.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.PathPointType">
      <summary>
        <para>Specifies the type of point in a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <remarks>
        <para>Each point in a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object has a type associated with it. The type determines how the point is used to draw the path. Point types that make up shapes include start points, stop points, and B&#233;zier curve points. Types also include markers, which allow easy traversal of a path or a mask to show or hide points. The <see langword="Line"/> type and any of the <see langword="Bezier"/> types can be combined with <see langword="CloseSubpath"/> (by using the bitwise operator <see langword="OR"/>) to indicate that the corresponding point is the last point in a figure and that the figure should be closed.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Drawing2D.PathPointType.Bezier (0x00000003)">
      <summary>
        <para>Specifies a default B&#233;zier curve. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PathPointType.Bezier3(0x00000003)">
      <summary>
        <para>Specifies a cubic B&#233;zier curve.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PathPointType.CloseSubpath(0x00000080)">
      <summary>
        <para>Specifies the endpoint of a subpath.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PathPointType.DashMode(0x00000010)">
      <summary>
        <para>Specifies that the corresponding segment is dashed.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PathPointType.Line(0x00000001)">
      <summary>
        <para>Specifies a line segment.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PathPointType.PathMarker(0x00000020)">
      <summary>
        <para>Specifies a path marker.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PathPointType.PathTypeMask(0x00000007)">
      <summary>
        <para>Specifies a mask point.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PathPointType.Start(0x00000000)">
      <summary>
        <para>Specifies the starting point of a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.PenAlignment">
      <summary>
        <para>Specifies the alignment of a <see cref="T:System.Drawing.Pen"/> object in relation to the theoretical, zero-width line.</para>
      </summary>
      <remarks>
        <para>A <see cref="T:System.Drawing.Pen"/> object has width. The center point of this pen width is aligned relative to the line being drawn depending on the alignment value. A <see cref="T:System.Drawing.Pen"/> object can be positioned to draw inside of a line or centered over the line.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Drawing2D.PenAlignment.Center">
      <summary>
        <para>Specifies that the <see cref="T:System.Drawing.Pen"/> object is centered over the theoretical line.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PenAlignment.Inset">
      <summary>
        <para>Specifies that the <see cref="T:System.Drawing.Pen"/> is positioned on the inside of the theoretical line.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.PenType">
      <summary>
        <para>Specifies the type of fill a <see cref="T:System.Drawing.Pen"/> object uses to fill lines.</para>
      </summary>
      <remarks>
        <para>The pen type is determined by the <see cref="T:System.Drawing.Brush"/> property of the <see cref="T:System.Drawing.Pen"/> object.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Drawing2D.PenType.HatchFill">
      <summary>
        <para>Specifies a hatch fill.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PenType.LinearGradient">
      <summary>
        <para>Specifies a linear gradient fill.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PenType.PathGradient">
      <summary>
        <para>Specifies a path gradient fill.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PenType.SolidColor">
      <summary>
        <para>Specifies a solid fill.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PenType.TextureFill">
      <summary>
        <para>Specifies a bitmap texture fill.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.PixelOffsetMode">
      <summary>
        <para>Specifies how pixels are offset during rendering.</para>
      </summary>
      <remarks>
        <para>By offsetting pixels during rendering, you can improve render quality at the cost of render speed.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Drawing2D.PixelOffsetMode.Default">
      <summary>
        <para>Specifies the default mode.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PixelOffsetMode.Half">
      <summary>
        <para>Specifies that pixels are offset by -.5 units, both horizontally and vertically, for high speed antialiasing.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PixelOffsetMode.HighQuality">
      <summary>
        <para>Specifies high quality, low speed rendering.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PixelOffsetMode.HighSpeed">
      <summary>
        <para>Specifies high speed, low quality rendering.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PixelOffsetMode.Invalid">
      <summary>
        <para>Specifies an invalid mode.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.PixelOffsetMode.None">
      <summary>
        <para>Specifies no pixel offset.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.QualityMode">
      <summary>
        <para>Specifies the overall quality when rendering GDI+ objects.</para>
      </summary>
      <remarks>
        <para>The quality level is inversely proportional to the amount of time spent rendering. This mode does not affect text. To set the text rendering quality, use the <see cref="T:System.Drawing.Text.TextRenderingHint"/> enumeration.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Drawing2D.QualityMode.Default">
      <summary>
        <para>Specifies the default mode.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.QualityMode.High">
      <summary>
        <para>Specifies high quality, low speed rendering.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.QualityMode.Invalid">
      <summary>
        <para>Specifies an invalid mode.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.QualityMode.Low">
      <summary>
        <para>Specifies low quality, high speed rendering.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.SmoothingMode">
      <summary>
        <para>Specifies whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas.</para>
      </summary>
      <remarks>
        <para>The SmoothingMode property does not affect text. To set the text rendering quality, use the <see cref="T:System.Drawing.Text.TextRenderingHint"/> enumeration.</para>
         <para>The smoothing mode does not affect areas filled by a path gradient brush. Areas filled using a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object are rendered the same way (aliased) regardless of the <see langword="SmoothingMode"/> property.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Drawing2D.SmoothingMode.AntiAlias">
      <summary>
        <para>Specifies antialiased rendering.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.SmoothingMode.Default">
      <summary>
        <para>Specifies the default mode.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.SmoothingMode.HighQuality">
      <summary>
        <para>Specifies high quality, low speed rendering.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.SmoothingMode.HighSpeed">
      <summary>
        <para>Specifies high speed, low quality rendering.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.SmoothingMode.Invalid">
      <summary>
        <para>Specifies an invalid mode.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.SmoothingMode.None">
      <summary>
        <para>Specifies no antialiasing.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.WarpMode">
      <summary>
        <para>Specifies the type of warp transformation applied in a <see cref="M:System.Drawing.Drawing2D.GraphicsPath.Warp"/> method.</para>
      </summary>
      <remarks>
        <para>A warp style is used by the <see cref="M:System.Drawing.Drawing2D.GraphicsPath.Warp"/> method to warp or distort the figures in a graphics path. This can be used to create unusual shapes.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Drawing2D.WarpMode.Bilinear">
      <summary>
        <para>Specifies a bilinear warp.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.WarpMode.Perspective">
      <summary>
        <para>Specifies a perspective warp.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Drawing2D.WrapMode">
      <summary>
        <para>Specifies how a texture or gradient is tiled when it is larger than the area being filled.</para>
      </summary>
      <remarks>
        <para>Brushes use this enumeration to determine how shapes are filled.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Drawing2D.WrapMode.Clamp">
      <summary>
        <para>Clamps the texture or gradient to the object boundary.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.WrapMode.Tile">
      <summary>
        <para>Tiles the gradient or texture.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.WrapMode.TileFlipX">
      <summary>
        <para>Reverses the texture or gradient horizontally and then tiles the texture or gradient.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.WrapMode.TileFlipXY">
      <summary>
        <para>Reverses the texture or gradient horizontally and vertically and then tiles the texture or gradient.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Drawing2D.WrapMode.TileFlipY">
      <summary>
        <para>Reverses the texture or gradient vertically and then tiles the texture or gradient.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Bitmap">
      <summary>
        <para>Encapsulates a GDI+ bitmap, which consists of the pixel data for a graphics image and its attributes. A <see cref="T:System.Drawing.Bitmap"/> object is an object used to work with images defined by pixel data. </para>
      </summary>
      <remarks>
        <para>A bitmap consists of the pixel data for a graphics image and its attributes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.#ctor(System.Drawing.Image)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Bitmap"/> class.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap"/> class from the specified existing image.</para>
      </summary>
      <param name="original">
        The <see cref="T:System.Drawing.Image"/> object from which to create the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Bitmap.#ctor(System.Drawing.Image,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap"/> class from the specified existing image and with the specified size.</para>
      </summary>
      <param name="original">
        The <see cref="T:System.Drawing.Image"/> object from which to create the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <param name="width">
        The width, in pixels, of the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <param name="height">
        The height, in pixels, of the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Bitmap.#ctor(System.Drawing.Image,System.Drawing.Size)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap"/> class from the specified existing image and with the specified size.</para>
      </summary>
      <param name="original">
        The <see cref="T:System.Drawing.Image"/> object from which to create the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <param name="newSize">
        The <see cref="T:System.Drawing.Size"/> structure that represent the size of the new <see cref="T:System.Drawing.Bitmap"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Bitmap.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap"/> class with the specified size.</para>
      </summary>
      <param name="width">
        The width, in pixels, of the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <param name="height">
        The height, in pixels, of the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <remarks>
        <para>This constructor creates a Bitmap with a <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration of <see langword="Format32bppARGB"/>.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Drawing.Graphics)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap"/> class with the specified size and with the resolution of the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="width">
        The width, in pixels, of the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <param name="height">
        The height, in pixels, of the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <param name="g">
        The <see cref="T:System.Drawing.Graphics"/> object that specifies the resolution for the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <remarks>
        <para>The new <see cref="T:System.Drawing.Bitmap"/> object that this method creates takes its horizontal and vertical resolution from the <see langword="DpiX"/> and <see langword="DpiY"/> properties of <paramref name="g"/>, respectively.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.IntPtr)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap"/> class with the specified size, pixel format, and pixel data.</para>
      </summary>
      <param name="width">
        The width, in pixels, of the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <param name="height">
        The height, in pixels, of the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <param name="stride">
        The memory size of a row in the stream of pixel data.
      </param>
      <param name="format">
        The <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration for the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <param name="scan0">
        The address of a stream of pixel data.
      </param>
      <remarks>
        <para>This method requires UnmanagedCode permission. For more information see <see cref="T:System.Security.Permissions.SecurityPermissionFlag"/>.</para>
       </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap"/> class with the specified size and format.</para>
      </summary>
      <param name="width">
        The width, in pixels, of the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <param name="height">
        The height, in pixels, of the new <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <param name="format">
        The <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration for the new <see cref="T:System.Drawing.Bitmap"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Bitmap.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap"/> class from the specified data stream.</para>
      </summary>
      <param name="stream">
        The data stream used to load the image.
      </param>
	  <remarks>
	    <para>You must keep the stream open for the lifetime of the <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap"/> class from the specified data stream.</para>
      </summary>
      <param name="stream">
        The data stream used to load the image.
      </param>
      <param name="useIcm">
        Set to <see langword="true"/> to use color correction for this <see cref="T:System.Drawing.Bitmap"/> object; otherwise, <see langword="false"/>.
      </param>
	  <remarks>
	    <para>You must keep the stream open for the lifetime of the <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap"/> class from the specified file.</para>
      </summary>
      <param name="filename">
        The name of the bitmap file.
      </param>
	  <remarks>
	    <para>The file remains locked until the <see cref="T:System.Drawing.Bitmap"/> object is disposed.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap"/> class from the specified file.</para>
      </summary>
      <param name="filename">
        The name of the bitmap file.
      </param>
      <param name="useIcm">
        Set to <see langword="true"/> to use color correction for this <see cref="T:System.Drawing.Bitmap"/> object; otherwise, <see langword="false"/>.
      </param>
	  <remarks>
	    <para>The file remains locked until the <see cref="T:System.Drawing.Bitmap"/> object is disposed.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap"/> class from a specified resource.</para>
      </summary>
      <param name="type">
        The class used to extract the resource.
      </param>
      <param name="resource">
        The name of the resource.
      </param>
    </member>

    <member name="M:System.Drawing.Bitmap.Clone(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">
      <overload>
        Creates a copy of the section of this <see cref="T:System.Drawing.Bitmap"/> defined with a specified <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
      </overload>
      <summary>
        <para>Creates a copy of the section of this <see cref="T:System.Drawing.Bitmap"/> object defined by <see cref="T:System.Drawing.Rectangle"/> structure and with a specified <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration.</para>
      </summary>
      <param name="rect">
        Defines the portion of this <see cref="T:System.Drawing.Bitmap"/> object to copy. Coordinates are relative to this <see cref="T:System.Drawing.Bitmap"/>.
      </param>
      <param name="format">
        Specifies the <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration for the destination <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <returns>
        <para>The new <see cref="T:System.Drawing.Bitmap"/> object that this method creates.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Bitmap"/> object from a file.</term>
          </item>
          <item>
            <term>Clones a portion of that <see cref="T:System.Drawing.Bitmap"/> object.</term>
          </item>
          <item>
            <term>Draws the cloned portion to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub Clone_Example(e As PaintEventArgs)
&apos; Create a Bitmap object from a file.
Dim myBitmap As New Bitmap(&quot;Grapes.jpg&quot;)
&apos; Clone a portion of the Bitmap object.
Dim cloneRect As New Rectangle(0, 0, 100, 100)
Dim format As PixelFormat = myBitmap.PixelFormat
Dim cloneBitmap As Bitmap = myBitmap.Clone(cloneRect, format)
&apos; Draw the cloned portion of the Bitmap object.
e.Graphics.DrawImage(cloneBitmap, 0, 0)
End Sub
        </code>
        <code lang="C#">public void Clone_Example(PaintEventArgs e)
{
// Create a Bitmap object from a file.
Bitmap myBitmap = new Bitmap(&quot;Grapes.jpg&quot;);
// Clone a portion of the Bitmap object.
Rectangle cloneRect = new Rectangle(0, 0, 100, 100);
PixelFormat format = myBitmap.PixelFormat;
Bitmap cloneBitmap = myBitmap.Clone(cloneRect, format);
// Draw the cloned portion of the Bitmap object.
e.Graphics.DrawImage(cloneBitmap, 0, 0);
}
        </code>
      </example>
      <remarks>
        <para>This method might throw an <see langword="OutOfMemoryException"/> if the rectangle specified by the <paramref name="rect"/> parameter is outside the bounds of the source bitmap.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.Clone(System.Drawing.RectangleF,System.Drawing.Imaging.PixelFormat)">
      <summary>
        <para>Creates a copy of the section of this <see cref="T:System.Drawing.Bitmap"/> object defined with a specified <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration.</para>
      </summary>
      <param name="rect">
        Defines the portion of this <see cref="T:System.Drawing.Bitmap"/> object to copy.
      </param>
      <param name="format">
        Specifies the <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration for the destination <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Bitmap"/> object that this method creates.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Bitmap"/> object from a file.</term>
          </item>
          <item>
            <term>Clones a portion of that <see cref="T:System.Drawing.Bitmap"/> object.</term>
          </item>
          <item>
            <term>Draws the cloned portion to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub Clone_Example(e As PaintEventArgs)
&apos; Create a Bitmap object from a file.
Dim myBitmap As New Bitmap(&quot;Grapes.jpg&quot;)
&apos; Clone a portion of the Bitmap object.
Dim cloneRect As New RectangleF(0, 0, 100, 100)
Dim format As PixelFormat = myBitmap.PixelFormat
Dim cloneBitmap As Bitmap = myBitmap.Clone(cloneRect, format)
&apos; Draw the cloned portion of the Bitmap object.
e.Graphics.DrawImage(cloneBitmap, 0, 0)
End Sub
        </code>
        <code lang="C#">public void Clone_Example(PaintEventArgs e)
{
// Create a Bitmap object from a file.
Bitmap myBitmap = new Bitmap(&quot;Grapes.jpg&quot;);
// Clone a portion of the Bitmap object.
RectangleF cloneRect = new RectangleF(0, 0, 100, 100);
PixelFormat format = myBitmap.PixelFormat;
Bitmap cloneBitmap = myBitmap.Clone(cloneRect, format);
// Draw the cloned portion of the Bitmap object.
e.Graphics.DrawImage(cloneBitmap, 0, 0);
}
        </code>
      </example>
      <remarks>
        <para>This method might throw an <see langword="OutOfMemoryException"/> if the rectangle specified by the <paramref name="rect"/> parameter is outside the bounds of the source bitmap.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.FromHicon(System.IntPtr)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Bitmap"/> from a Windows handle to an icon.</para>
      </summary>
      <param name="hicon">
        A handle to an icon.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Bitmap"/> object that this method creates.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Gets the handle to an existing icon image.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Bitmap"/> object from the handle.</term>
          </item>
          <item>
            <term>Draws the <see cref="T:System.Drawing.Bitmap"/> object to the screen.</term>
          </item>
        </list>
        <code lang="VB">Private Shared Function &lt;System.Runtime.InteropServices.DllImportAttribute(&quot;user32.dll&quot;)&gt; LoadImage(Hinstance As Integer, name As String, type As Integer, width As Integer, height As Integer, load As Integer) As IntPtr
Public Sub HICON_Example(e As PaintEventArgs)
&apos; Get a handle to an icon.
Dim Hicon As IntPtr = LoadImage(0, &quot;smile.ico&quot;, 1, 0, 0, 16)
&apos; Create a Bitmap object from the icon handle.
Dim iconBitmap As Bitmap = Bitmap.FromHicon(Hicon)
&apos; Draw the Bitmap object to the screen.
e.Graphics.DrawImage(iconBitmap, 0, 0)
End Sub
        </code>
        <code lang="C#">[System.Runtime.InteropServices.DllImportAttribute(&quot;user32.dll&quot;)]
private static extern IntPtr LoadImage(
int Hinstance,
string name,
int type,
int width,
int height,
int load);
public void Hicon_Example(PaintEventArgs e)
{
// Get a handle to an icon.
IntPtr Hicon = LoadImage(
0,
&quot;smile.ico&quot;,
1,
0,
0,
16);
// Create a Bitmap object from the icon handle.
Bitmap iconBitmap = Bitmap.FromHicon(Hicon);
// Draw the Bitmap object to the screen.
e.Graphics.DrawImage(iconBitmap, 0, 0);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Bitmap.FromResource(System.IntPtr,System.String)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Bitmap"/> object from the specified Windows resource.</para>
      </summary>
      <param name="hinstance">
        A handle to an instance of the executable file that contains the resource.
      </param>
      <param name="bitmapName">
        A string containing the name of the resource bitmap.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Bitmap"/> object that this method creates.</para>
      </returns>
      <remarks>
        <para>This method works only with bitmaps that are named resources in a DLL.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.GetHbitmap">
      <overload>
        Creates a GDI bitmap object from a GDI+ <see cref="T:System.Drawing.Bitmap"/> object.
      </overload>
      <summary>
        <para>Creates a GDI bitmap object from this <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </summary>
      <returns>
        <para>A handle to the GDI bitmap object that this method creates.</para>
      </returns>
      <example>
        <code lang="VB">Imports System.Runtime.InteropServices
...
Declare Function DeleteObject Lib "gdi32.dll" (ByVal hObject As IntPtr) As Boolean
...
Dim bm As New Bitmap("Picture.jpg")
Dim hBitmap As IntPtr
hBitmap = bm.GetHbitmap()
&apos; Do something with hBitmap.
DeleteObject(hBitmap)
        </code>        
        <code lang="C#">using System.Runtime.InteropServices;
...
[DllImport("gdi32.dll")]
public static extern bool DeleteObject(IntPtr hObject);
...
Bitmap bm = new Bitmap("Picture.jpg");
IntPtr hBitmap = bm.GetHbitmap();
// Do something with hBitmap.
DeleteObject(hBitmap);
        </code>       
      </example>      
      <remarks>
        <para>You are responsible for calling DeleteObject to free the memory used by the GDI bitmap object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.GetHbitmap(System.Drawing.Color)">
      <summary>
        <para>Creates a GDI bitmap object from this <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </summary>
      <param name="background">
        A <see cref="T:System.Drawing.Color"/> structure that specifies the background color. This parameter is ignored if the bitmap is totally opaque.
      </param>
      <returns>
        <para>A handle to the GDI bitmap object that this method creates.</para>
      </returns>
      <example>
        <code lang="VB">Imports System.Runtime.InteropServices
...
Declare Function DeleteObject Lib "gdi32.dll" (ByVal hObject As IntPtr) As Boolean
...
Dim bm As New Bitmap("Picture.jpg")
Dim hBitmap As IntPtr
hBitmap = bm.GetHbitmap(Color.Blue)
&apos; Do something with hBitmap.
DeleteObject(hBitmap)
        </code>        
        <code lang="C#">using System.Runtime.InteropServices;
...
[DllImport("gdi32.dll")]
public static extern bool DeleteObject(IntPtr hObject);
...
Bitmap bm = new Bitmap("Picture.jpg");
IntPtr hBitmap = bm.GetHbitmap(Color.Blue);
// Do something with hBitmap.
DeleteObject(hBitmap);
        </code>
      </example>      
      <remarks>
        <para>You are responsible for calling DeleteObject to free the memory used by the GDI bitmap object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.GetHicon">
      <summary>
        <para>Returns the handle to an icon.</para>
      </summary>
      <returns>
        <para>A Windows handle to an icon.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Bitmap"/> object.</term>
          </item>
          <item>
            <term>Draws that object to the screen.</term>
          </item>
          <item>
            <term>Gets an icon handle for the <see cref="T:System.Drawing.Bitmap"/> object.</term>
          </item>
          <item>
            <term>Does something with the handle.</term>
          </item>
        </list>
        <code lang="VB">Public Sub GetHicon_Example(e As PaintEventArgs)
&apos; Create a Bitmap object from an image file.
Dim myBitmap As New Bitmap(&quot;Grapes.jpg&quot;)
&apos; Draw myBitmap to the screen.
e.Graphics.DrawImage(myBitmap, 0, 0)
&apos; Get an Hicon for myBitmap.
Dim HIcon As IntPtr = myBitmap.GetHicon()
End Sub
        </code>
        <code lang="C#">public void GetHicon_Example(PaintEventArgs e)
{
// Create a Bitmap object from an image file.
Bitmap myBitmap = new Bitmap(&quot;Grapes.jpg&quot;);
// Draw myBitmap to the screen.
e.Graphics.DrawImage(myBitmap, 0, 0);
// Get an Hicon for myBitmap.
IntPtr Hicon = myBitmap.GetHicon();
// Do something with Hicon.
// ...
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Bitmap.GetPixel(System.Int32,System.Int32)">
      <summary>
        <para>Gets the color of the specified pixel in this <see cref="T:System.Drawing.Bitmap"/>.</para>
      </summary>
      <param name="x">
        The x-coordinate of the pixel to retrieve.
      </param>
      <param name="y">
        The y-coordinate of the pixel to retrieve.
      </param>
      <returns>
        <para>A <see cref="T:System.Drawing.Color"/> structure that represents the color of the specified pixel.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code gets the color of a pixel in a bitmap, and then fills a rectangle with that color.</para>
        <code lang="VB">Public Sub GetPixel_Example(e As PaintEventArgs)
&apos; Create a Bitmap object from an image file.
Dim myBitmap As New Bitmap(&quot;Grapes.jpg&quot;)
&apos; Get the color of a pixel within myBitmap.
Dim pixelColor As Color = myBitmap.GetPixel(50, 50)
&apos; Fill a rectangle with pixelColor.
Dim pixelBrush As New SolidBrush(pixelColor)
e.Graphics.FillRectangle(pixelBrush, 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void GetPixel_Example(PaintEventArgs e)
{
// Create a Bitmap object from an image file.
Bimap myBitmap = new Bitmap(&quot;Grapes.jpg&quot;);
// Get the color of a pixel within myBitmap.
Color pixelColor = myBitmap.GetPixel(50, 50);
// Fill a rectangle with pixelColor.
SolidBrush pixelBrush = new SolidBrush(pixelColor);
e.Graphics.FillRectangle(pixelBrush, 0, 0, 100, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)">
      <summary>
        <para>Locks a <see cref="T:System.Drawing.Bitmap"/> object into system memory.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.Rectangle"/> structure specifying the portion of the <see cref="T:System.Drawing.Bitmap"/> to lock.
      </param>
      <param name="flags">
        An <see cref="T:System.Drawing.Imaging.ImageLockMode"/> enumeration specifying access level (read and write) for the <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <param name="format">
        A <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration specifying the data format of this <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <returns>
        <para>A <see cref="T:System.Drawing.Imaging.BitmapData"/> object containing information about this lock operation.</para>
      </returns>
      <remarks>
        <para>The <see cref="T:System.Drawing.Imaging.BitmapData"/> object specifies the attributes of the Bitmap object, such as size, pixel format, the starting address of the pixel data in memory and length of each scan line (stride).</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.MakeTransparent">
      <overload>
        Makes the default transparent color transparent for this <see cref="T:System.Drawing.Bitmap"/>.
      </overload>
      <summary>
        <para>Makes the default transparent color transparent for this <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code makes the system default transparent color transparent for <paramref name="myBitmap"/>, and then draws the <see cref="T:System.Drawing.Bitmap"/> object to the screen.</para>
        <code lang="VB">Public Sub MakeTransparent_Example(e As PaintEventArgs)
&apos; Create a Bitmap object from an image file.
Dim myBitmap As New Bitmap(&quot;Grapes.gif&quot;)
&apos; Draw myBitmap to the screen.
e.Graphics.DrawImage(myBitmap, 0, 0, myBitmap.Width, _
myBitmap.Height)
&apos; Make the default transparent color transparent for myBitmap.
myBitmap.MakeTransparent()
&apos; Draw the transparent bitmap to the screen.
e.Graphics.DrawImage(myBitmap, myBitmap.Width, 0, myBitmap.Width, _
myBitmap.Height)
End Sub
        </code>
        <code lang="C#">public void MakeTransparent_Example(PaintEventArgs e)
{
// Create a Bitmap object from an image file.
Bitmap myBitmap = new Bitmap(&quot;Grapes.gif&quot;);
// Draw myBitmap to the screen.
e.Graphics.DrawImage(
myBitmap,
0,
0,
myBitmap.Width,
myBitmap.Height);
// Make the default transparent color transparent for myBitmap.
myBitmap.MakeTransparent();
// Draw the transparent bitmap to the screen.
e.Graphics.DrawImage(
myBitmap,
myBitmap.Width,
0,
myBitmap.Width,
myBitmap.Height);
}
        </code>
      </example>
      <remarks>
        <para>The system palette defines one color as the default transparent, or alpha, color. This method makes the default transparent color transparent for this <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Bitmap.MakeTransparent(System.Drawing.Color)">
      <summary>
        <para>Makes the specified color transparent for this <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </summary>
      <param name="transparentColor">
        The <see cref="T:System.Drawing.Color"/> structure that represents the color to make transparent.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Gets the color of a pixel in a <see cref="T:System.Drawing.Bitmap"/> object.</term>
          </item>
          <item>
            <term>Makes that color transparent for the bitmap.</term>
          </item>
          <item>
            <term>Draws the <see cref="T:System.Drawing.Bitmap"/> object to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub MakeTransparent_Example(e As PaintEventArgs)
&apos; Create a Bitmap object from an image file.
Dim myBitmap As New Bitmap(&quot;Grapes.gif&quot;)
&apos; Draw myBitmap to the screen.
e.Graphics.DrawImage(myBitmap, 0, 0, myBitmap.Width, _
myBitmap.Height)
&apos; Get the color of a background pixel.
Dim backColor As Color = myBitmap.GetPixel(1, 1)
&apos; Make backColor transparent for myBitmap.
myBitmap.MakeTransparent(backColor)
&apos; Draw the transparent bitmap to the screen.
e.Graphics.DrawImage(myBitmap, myBitmap.Width, 0, myBitmap.Width, _
myBitmap.Height)
End Sub
        </code>
        <code lang="C#">public void MakeTransparent_Example(PaintEventArgs e)
{
// Create a Bitmap object from an image file.
Bitmap myBitmap = new Bitmap(&quot;Grapes.gif&quot;);
// Draw myBitmap to the screen.
e.Graphics.DrawImage(
myBitmap,
0,
0,
myBitmap.Width,
myBitmap.Height);
// Get the color of a background pixel.
Color backColor = myBitmap.GetPixel(1, 1);
// Make backColor transparent for myBitmap.
myBitmap.MakeTransparent(backColor);
// Draw the transparent bitmap to the screen.
e.Graphics.DrawImage(
myBitmap,
myBitmap.Width,
0,
myBitmap.Width,
myBitmap.Height);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
        <para>Sets the color of the specified pixel in this <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the pixel to set.
      </param>
      <param name="y">
        The y-coordinate of the pixel to set.
      </param>
      <param name="color">
        A <see cref="T:System.Drawing.Color"/> structure that represents the color to assign to the specified pixel.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Bitmap"/> object.</term>
          </item>
          <item>
            <term>Sets the color of each pixel in the bitmap to black.</term>
          </item>
          <item>
            <term>Draws the bitmap.</term>
          </item>
        </list>
        <code lang="VB">Public Sub SetPixel_Example(e As PaintEventArgs)
&apos; Create a Bitmap object from a file.
Dim myBitmap As New Bitmap(&quot;Grapes.jpg&quot;)
&apos; Draw myBitmap to the screen.
e.Graphics.DrawImage(myBitmap, 0, 0, myBitmap.Width, _
myBitmap.Height)
&apos; Set each pixel in myBitmap to black.
Dim Xcount As Integer
For Xcount = 0 To myBitmap.Width - 1
Dim Ycount As Integer
For Ycount = 0 To myBitmap.Height - 1
myBitmap.SetPixel(Xcount, Ycount, Color.Black)
Next Ycount
Next Xcount
&apos; Draw myBitmap to the screen again.
e.Graphics.DrawImage(myBitmap, myBitmap.Width, 0, myBitmap.Width, _
myBitmap.Height)
End Sub
        </code>
        <code lang="C#">public void SetPixel_Example(PaintEventArgs e)
{
// Create a Bitmap object from a file.
Bitmap myBitmap = new Bitmap(&quot;Grapes.jpg&quot;);
// Draw myBitmap to the screen.
e.Graphics.DrawImage(
myBitmap,
0,
0,
myBitmap.Width,
myBitmap.Height);
// Set each pixel in myBitmap to black.
for (int Xcount = 0; Xcount &lt; myBitmap.Width; Xcount++)
{
for (int Ycount = 0; Ycount &lt; myBitmap.Height; Ycount++)
{
myBitmap.SetPixel(Xcount, Ycount, Color.Black);
}
}
// Draw myBitmap to the screen again.
e.Graphics.DrawImage(
myBitmap,
myBitmap.Width,
0,
myBitmap.Width,
myBitmap.Height);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Bitmap.SetResolution(System.Single,System.Single)">
      <summary>
        <para>Sets the resolution for this <see cref="T:System.Drawing.Bitmap"/>.</para>
      </summary>
      <param name="xDpi">
        The horizontal resolution, in dots per inch, of the <see cref="T:System.Drawing.Bitmap"/>.
      </param>
      <param name="yDpi">
        The vertical resolution, in dots per inch, of the <see cref="T:System.Drawing.Bitmap"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Bitmap.UnlockBits(System.Drawing.Imaging.BitmapData)">
      <summary>
        <para>Unlocks this <see cref="T:System.Drawing.Bitmap"/> from system memory.</para>
      </summary>
      <param name="bitmapdata">
        A <see cref="T:System.Drawing.Imaging.BitmapData"/> object specifying information about the lock operation.
      </param>
      <remarks>
        <para>The <see cref="T:System.Drawing.Imaging.BitmapData"/> object specifies the attributes of the Bitmap object, such as size, pixel format, the starting address of the pixel data in memory and length of each scan line (stride).</para>
      </remarks>
    </member>

    <member name="T:System.Drawing.Brush">
      <summary>
        <para>Classes derived from this abstract base class define objects used to fill the interiors of graphical shapes such as rectangles, ellipses, pies, polygons, and paths.</para>
      </summary>
      <remarks>
        <para>This is an abstract base class and cannot be instantiated. To create a brush object, use classes derived from <see cref="T:System.Drawing.Brush"/>, such as <see cref="T:System.Drawing.SolidBrush"/>, <see cref="T:System.Drawing.TextureBrush"/>, and <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/>.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Brush.Clone">
      <summary>
        <para>When overridden in a derived class, creates an exact copy of this <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <returns>
        <para>The new <see cref="T:System.Drawing.Brush"/> object that this method creates.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Brush.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Brush"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="T:System.Drawing.Brushes">
      <summary>
        <para>Brushes for all the standard colors. This class cannot be inherited. </para>
      </summary>
    </member>

    <member name="P:System.Drawing.Brushes.AliceBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.AntiqueWhite">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Aqua">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Aquamarine">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Azure">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Beige">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Bisque">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Black">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.BlanchedAlmond">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Blue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.BlueViolet">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Brown">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.BurlyWood">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.CadetBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Chartreuse">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Chocolate">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Coral">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.CornflowerBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Cornsilk">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Crimson">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Cyan">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkCyan">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkGoldenrod">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkGray">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkKhaki">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkMagenta">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkOliveGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkOrange">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkOrchid">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkRed">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkSalmon">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkSeaGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkSlateBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkSlateGray">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkTurquoise">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DarkViolet">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DeepPink">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DeepSkyBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DimGray">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.DodgerBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Firebrick">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.FloralWhite">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.ForestGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Fuchsia">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Gainsboro">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.GhostWhite">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Gold">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Goldenrod">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Gray">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Green">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.GreenYellow">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Honeydew">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.HotPink">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.IndianRed">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Indigo">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Ivory">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Khaki">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Lavender">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LavenderBlush">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LawnGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LemonChiffon">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LightBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LightCoral">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LightCyan">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LightGoldenrodYellow">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LightGray">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LightGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LightPink">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LightSalmon">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LightSeaGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LightSkyBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LightSlateGray">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LightSteelBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LightYellow">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Lime">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.LimeGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Linen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Magenta">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Maroon">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.MediumAquamarine">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.MediumBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.MediumOrchid">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.MediumPurple">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.MediumSeaGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.MediumSlateBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.MediumSpringGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.MediumTurquoise">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.MediumVioletRed">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.MidnightBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.MintCream">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.MistyRose">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Moccasin">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.NavajoWhite">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Navy">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.OldLace">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Olive">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.OliveDrab">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Orange">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.OrangeRed">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Orchid">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.PaleGoldenrod">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.PaleGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.PaleTurquoise">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.PaleVioletRed">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.PapayaWhip">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.PeachPuff">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Peru">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Pink">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Plum">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.PowderBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Purple">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Red">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.RosyBrown">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.RoyalBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.SaddleBrown">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Salmon">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.SandyBrown">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.SeaGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.SeaShell">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Sienna">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Silver">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.SkyBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.SlateBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.SlateGray">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Snow">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.SpringGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.SteelBlue">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Tan">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Teal">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Thistle">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Tomato">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Transparent">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Turquoise">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Violet">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Wheat">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.White">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.WhiteSmoke">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.Yellow">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Brushes.YellowGreen">
      <summary>
        <para>Gets a system-defined <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="T:System.Drawing.ColorConverter">
      <summary>
        <para>Converts colors from one data type to another. Access this class through the TypeDescriptor.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.ColorConverter"/> class.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Determines if this converter can convert an object in the given source type to the native type of the converter.</para>
      </summary>
      <param name="context">
        An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.
      </param>
      <param name="sourceType">
        The type from which you want to convert.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this object can perform the conversion; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</para>
      </summary>
      <param name="context">
        An <see langword="ITypeDescriptorContext"/> object that provides a format context.
      </param>
      <param name="destinationType">
        A <see cref="T:System.Type"/> object that represents the type to which you want to convert.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this converter can perform the operation; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para>Converts the given object to the converter&apos;s native type.</para>
      </summary>
      <param name="context">
        An <see cref="T:System.ComponentModel.TypeDescriptor"/> object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.
      </param>
      <param name="culture">
        A <see langword="CultureInfo"/> object that specifies the culture to represent the Color.
      </param>
      <param name="value">
        The object to convert.
      </param>
      <returns>
        <para>The converted object. This method will throw an exception if the conversion could not be performed.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the specified object to another type. The most common types to convert are to and from a string object. </para>
      </summary>
      <param name="context">
        A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is null. Also, properties on the context object may also return null.
      </param>
      <param name="culture">
        A <see langword="CultureInfo"/> object that specifies the culture to represent the Color.
      </param>
      <param name="value">
        The object to convert.
      </param>
      <param name="destinationType">
        The type to convert the object to.
      </param>
      <returns>
        <para>The converted object. If this method cannot convert to the destination type, it throws a <see cref="T:System.NotSupportedException"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Retrieves a collection containing a set of standard values for the data type for which this validator is designed. This will return null if the data type does not support a standard set of values.</para>
      </summary>
      <param name="context">
        A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is null. Also, properties on the context object may also return null.
      </param>
      <returns>
        <para>A collection containing null or a standard set of valid values. The default implementation always returns null.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Determines if this object supports a standard set of values that can be chosen from a list.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <see langword="GetStandardValues"/> must be called to find a common set of values the object supports; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="T:System.Drawing.ColorTranslator">
      <summary>
        <para>Translates colors to and from GDI+ <see cref="T:System.Drawing.Color"/> structures. This class cannot be inherited. </para>
      </summary>
    </member>

    <member name="M:System.Drawing.ColorTranslator.FromHtml(System.String)">
      <summary>
        <para>Translates an HTML color representation to a GDI+ <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <param name="htmlColor">
        The string representation of the Html color to translate.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Color"/> structure that represents the translated HTML color.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code translates an HTML color name to a <see cref="T:System.Drawing.Color"/> structure, and then uses that color to fill a rectangle.</para>
        <code lang="VB">Public Sub FromHtml_Example(e As PaintEventArgs)
&apos; Create a string representation of an HTML color.
Dim htmlColor As String = &quot;Blue&quot;
&apos; Translate htmlColor to a GDI+ Color structure.
Dim myColor As Color = ColorTranslator.FromHtml(htmlColor)
&apos; Fill a rectangle with myColor.
e.Graphics.FillRectangle(New SolidBrush(myColor), 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void FromHtml_Example(PaintEventArgs e)
{
// Create a string representation of an HTML color.
string htmlColor = &quot;Blue&quot;;
// Translate htmlColor to a GDI+ Color structure.
Color myColor = ColorTranslator.FromHtml(htmlColor);
// Fill a rectangle with myColor.
e.Graphics.FillRectangle(
new SolidBrush(myColor),
0,
0,
100,
100);
}
        </code>
      </example>
      <remarks>
        <para>This method translates a string representation of an HTML color name, such as Blue or Red, to a GDI+ <see cref="T:System.Drawing.Color"/> structure.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.ColorTranslator.FromOle(System.Int32)">
      <summary>
        <para>Translates an OLE color value to a GDI+ <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <param name="oleColor">
        The OLE color to translate.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Color"/> structure that represents the translated OLE color.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code translates an OLE color value to a <see cref="T:System.Drawing.Color"/> structure, and then uses that color to fill a rectangle.</para>
        <code lang="VB">Public Sub FromOle_Example(e As PaintEventArgs)
&apos; Create an integer representation of an HTML color.
Dim oleColor As Integer = &amp;HFF00
&apos; Translate oleColor to a GDI+ Color structure.
Dim myColor As Color = ColorTranslator.FromOle(oleColor)
&apos; Fill a rectangle with myColor.
e.Graphics.FillRectangle(New SolidBrush(myColor), 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void FromOle_Example(PaintEventArgs e)
{
// Create an integer representation of an OLE color.
int oleColor = 0xFF00;
// Translate oleColor to a GDI+ Color structure.
Color myColor = ColorTranslator.FromOle(oleColor);
// Fill a rectangle with myColor.
e.Graphics.FillRectangle(
new SolidBrush(myColor),
0,
0,
100,
100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.ColorTranslator.FromWin32(System.Int32)">
      <summary>
        <para>Translates a Windows color value to a GDI+ <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <param name="win32Color">
        The Windows color to translate.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Color"/> structure that represents the translated Windows color.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code translates a Windows color value to a <see cref="T:System.Drawing.Color"/> structure, and then uses that color to fill a rectangle.</para>
        <code lang="VB">Public Sub FromWin32_Example(e As PaintEventArgs)
&apos; Create an integer representation of a Win32 color.
Dim winColor As Integer = &amp;HA000
&apos; Translate winColor to a GDI+ Color structure.
Dim myColor As Color = ColorTranslator.FromWin32(winColor)
&apos; Fill a rectangle with myColor.
e.Graphics.FillRectangle(New SolidBrush(myColor), 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void FromWin32_Example(PaintEventArgs e)
{
// Create an integer representation of a Windows color.
int winColor = 0xA000;
// Translate winColor to a GDI+ Color structure.
Color myColor = ColorTranslator.FromWin32(winColor);
// Fill a rectangle with myColor.
e.Graphics.FillRectangle(
new SolidBrush(myColor),
0,
0,
100,
100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.ColorTranslator.ToHtml(System.Drawing.Color)">
      <summary>
        <para>Translates the specified <see cref="T:System.Drawing.Color"/> structure to an HTML string color representation.</para>
      </summary>
      <param name="c">
        The <see cref="T:System.Drawing.Color"/> structure to translate.
      </param>
      <returns>
        <para>The string that represents the HTML color.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code translates a <see cref="T:System.Drawing.Color"/> structure to a string representation of an HTML color, and then shows a message box with the resulting string.</para>
        <code lang="VB">Public Sub ToHtml_Example(e As PaintEventArgs)
&apos; Create an instance of a Color structure.
Dim myColor As Color = Color.Red
&apos; Translate myColor to an HTML color.
Dim htmlColor As String = ColorTranslator.ToHtml(myColor)
&apos; Show a message box with the value of htmlColor.
MessageBox.Show(htmlColor)
End Sub
        </code>
        <code lang="C#">public void ToHtml_Example(PaintEventArgs e)
{
// Create an instance of a Color structure.
Color myColor = Color.Red;
// Translate myColor to an HTML color.
string htmlColor = ColorTranslator.ToHtml(myColor);
// Show a message box with the value of htmlColor.
MessageBox.Show(htmlColor);
}
        </code>
      </example>
      <remarks>
        <para>This method translates a <see cref="T:System.Drawing.Color"/> structure to a string representation of an HTML color. This is the commonly used name of a color, such as &quot;Red&quot;, &quot;Blue&quot;, or &quot;Green&quot;, and not string representation of a numeric color value, such as &quot;FF33AA&quot;.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.ColorTranslator.ToOle(System.Drawing.Color)">
      <summary>
        <para>Translates the specified <see cref="T:System.Drawing.Color"/> structure to an OLE color.</para>
      </summary>
      <param name="c">
        The <see cref="T:System.Drawing.Color"/> structure to translate.
      </param>
      <returns>
        <para>The OLE color value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code translates a <see cref="T:System.Drawing.Color"/> structure to an integer that represents an OLE color, and then shows a message box with the resulting string.</para>
        <code lang="VB">Public Sub ToOle_Example(e As PaintEventArgs)
&apos; Create an instance of a Color structure.
Dim myColor As Color = Color.Green
&apos; Translate myColor to an OLE color.
Dim oleColor As Integer = ColorTranslator.ToOle(myColor)
&apos; Show a message box with the value of htmlColor.
MessageBox.Show(oleColor.ToString())
End Sub
        </code>
        <code lang="C#">public void ToOle_Example(PaintEventArgs e)
{
// Create an instance of a Color structure.
Color myColor = Color.Red;
// Translate myColor to an OLE color.
int oleColor = ColorTranslator.ToOle(myColor);
// Show a message box with the value of oleColor.
MessageBox.Show(oleColor);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.ColorTranslator.ToWin32(System.Drawing.Color)">
      <summary>
        <para>Translates the specified <see cref="T:System.Drawing.Color"/> structure to a Windows color.</para>
      </summary>
      <param name="c">
        The <see cref="T:System.Drawing.Color"/> structure to translate.
      </param>
      <returns>
        <para>The Windows color value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code translates a <see cref="T:System.Drawing.Color"/> structure to an integer that represents a Windows color, and then shows a message box with the resulting string.</para>
        <code lang="VB">Public Sub ToWin32_Example(e As PaintEventArgs)
&apos; Create an instance of a Color structure.
Dim myColor As Color = Color.Red
&apos; Translate myColor to an OLE color.
Dim winColor As Integer = ColorTranslator.ToWin32(myColor)
&apos; Show a message box with the value of winColor.
MessageBox.Show(winColor)
End Sub
        </code>
        <code lang="C#">public void ToWin32_Example(PaintEventArgs e)
{
// Create an instance of a Color structure.
Color myColor = Color.Red;
// Translate myColor to an OLE color.
int winColor = ColorTranslator.ToWin32(myColor);
// Show a message box with the value of winColor.
MessageBox.Show(winColor);
}
        </code>
      </example>
    </member>

    <member name="T:System.Drawing.Font">
      <summary>
        <para>Defines a particular format for text, including font face, size, and style attributes. This class cannot be inherited. </para>
      </summary>
    </member>

    <member name="M:System.Drawing.Font.#ctor(System.Drawing.Font,System.Drawing.FontStyle)">
      <overload>
        Initializes a new <see cref="T:System.Drawing.Font"/> object that uses the specified existing <see cref="T:System.Drawing.Font"/> object and <see cref="T:System.Drawing.FontStyle"/> enumeration.
      </overload>
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Font"/> object that uses the specified existing <see cref="T:System.Drawing.Font"/> object and <see cref="T:System.Drawing.FontStyle"/> enumeration.</para>
      </summary>
      <param name="prototype">
        The existing <see cref="T:System.Drawing.Font"/> object from which to create the new <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="newStyle">
        The <see cref="T:System.Drawing.FontStyle"/> enumeration to apply to the new <see cref="T:System.Drawing.Font"/> object. Multiple values of the <see cref="T:System.Drawing.FontStyle"/> enumeration can be combined with the <see langword="OR"/> operator.
      </param>
    </member>
    <member name="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Font"/> object using a specified size. Sets the style to FontStyle.Regular and sets the unit to GraphicsUnit.Point.</para>
      </summary>
      <param name="family">
        The <see cref="T:System.Drawing.FontFamily"/> object of the new <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="emSize">
        The em-size, in points, of the new font.
      </param>
    </member>

    <member name="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Font"/> object using a specified size and style. Sets the unit to GraphicUnit.Point.</para>
      </summary>
      <param name="family">
        The <see cref="T:System.Drawing.FontFamily"/> object of the new <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="emSize">
        The em-size, in points, of the new font.
      </param>
      <param name="style">
        The <see cref="T:System.Drawing.FontStyle"/> of the new font.
      </param>
    </member>

    <member name="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Font"/> using a specified size, style, and unit.</para>
      </summary>
      <param name="family">
        The <see cref="T:System.Drawing.FontFamily"/> object of the new <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="emSize">
        The em-size of the new font in the units specified by the <paramref name="unit"/> parameter.
      </param>
      <param name="style">
        The <see cref="T:System.Drawing.FontStyle"/> of the new font.
      </param>
      <param name="unit">
        The <see cref="T:System.Drawing.GraphicsUnit"/> of the new font.
      </param>
    </member>

    <member name="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Font"/> object using a specified size, style, unit, and character set.</para>
      </summary>
      <param name="family">
        The <see cref="T:System.Drawing.FontFamily"/> object of the new <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="emSize">
        The em-size of the new font in the units specified by the <paramref name="unit"/> parameter.
      </param>
      <param name="style">
        The <see cref="T:System.Drawing.FontStyle"/> of the new font.
      </param>
      <param name="unit">
        The <see cref="T:System.Drawing.GraphicsUnit"/> of the new font.
      </param>
      <param name="gdiCharSet">
        A <see langword="Byte"/> that specifies a GDI character set to use for the new font.
      </param>
      <remarks>
        <para>The <paramref name="gdiCharSet"/> parameter takes a value from the list defined in the platform SDK header file WinGDI.h.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte,System.Boolean)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Font"/> using a specified size, style, unit, and character set.</para>
      </summary>
      <param name="family">
        The <see cref="T:System.Drawing.FontFamily"/> object of the new <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="emSize">
        The em-size of the new font in the units specified by the <paramref name="unit"/> parameter.
      </param>
      <param name="style">
        The <see cref="T:System.Drawing.FontStyle"/> of the new font.
      </param>
      <param name="unit">
        The <see cref="T:System.Drawing.GraphicsUnit"/> of the new font.
      </param>
      <param name="gdiCharSet">
        A <see langword="Byte"/> that specifies a GDI character set to use for this font.
      </param>
      <param name="gdiVerticalFont">
        A Boolean value indicating whether the new font is derived from a GDI vertical font.
      </param>
      <remarks>
        <para>The <paramref name="gdiCharSet"/> parameter takes a value from the list defined in the platform SDK header file WinGDI.h.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Font"/> using a specified size and unit. Sets the style to FontStyle.Regular.</para>
      </summary>
      <param name="family">
        The <see cref="T:System.Drawing.FontFamily"/> object of the new <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="emSize">
        The em-size of the new font in the units specified by the <paramref name="unit"/> parameter.
      </param>
      <param name="unit">
        The <see cref="T:System.Drawing.GraphicsUnit"/> of the new font.
      </param>
    </member>

    <member name="M:System.Drawing.Font.#ctor(System.String,System.Single)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Font"/> object using a specified size. Sets the unit to GraphicsUnit.Point and sets the style to FontStyle.Regular.</para>
      </summary>
      <param name="familyName">
        A string representation of the <see cref="T:System.Drawing.FontFamily"/> object for the new <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="emSize">
        The em-size, in points, of the new font.
      </param>
    </member>

    <member name="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Font"/> object using a specified size and style. Sets the unit to GraphicsUnit.Point.</para>
      </summary>
      <param name="familyName">
        A string representation of the <see cref="T:System.Drawing.FontFamily"/> object for the new <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="emSize">
        The em-size, in points, of the new font.
      </param>
      <param name="style">
        The <see cref="T:System.Drawing.FontStyle"/> of the new font.
      </param>
    </member>

    <member name="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Font"/> object using a specified size, style, and unit.</para>
      </summary>
      <param name="familyName">
        A string representation of the <see cref="T:System.Drawing.FontFamily"/> object for the new <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="emSize">
        The em-size of the new font in the units specified by the <paramref name="unit"/> parameter.
      </param>
      <param name="style">
        The <see cref="T:System.Drawing.FontStyle"/> of the new font.
      </param>
      <param name="unit">
        The <see cref="T:System.Drawing.GraphicsUnit"/> of the new font.
      </param>
    </member>

    <member name="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Font"/> using a specified size, style, unit, and character set.</para>
      </summary>
      <param name="familyName">
        A string representation of the <see cref="T:System.Drawing.FontFamily"/> object for the new <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="emSize">
        The em-size of the new font in the units specified by the <paramref name="unit"/> parameter.
      </param>
      <param name="style">
        The <see cref="T:System.Drawing.FontStyle"/> of the new font.
      </param>
      <param name="unit">
        The <see cref="T:System.Drawing.GraphicsUnit"/> of the new font.
      </param>
      <param name="gdiCharSet">
        A <see langword="Byte"/> that specifies a GDI character set to use for this font.
      </param>
      <remarks>
        <para>The <paramref name="gdiCharSet"/> parameter takes a value from the list defined in the platform SDK header file WinGDI.h.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte,System.Boolean)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Font"/> object using the specified size, style, unit, and character set.</para>
      </summary>
      <param name="familyName">
        A string representation of the <see cref="T:System.Drawing.FontFamily"/> object for the new <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="emSize">
        The em-size of the new font in the units specified by the <paramref name="unit"/> parameter.
      </param>
      <param name="style">
        The <see cref="T:System.Drawing.FontStyle"/> of the new font.
      </param>
      <param name="unit">
        The <see cref="T:System.Drawing.GraphicsUnit"/> of the new font.
      </param>
      <param name="gdiCharSet">
        A <see langword="Byte"/> that specifies a GDI character set to use for this font.
      </param>
      <param name="gdiVerticalFont">
        A Boolean value indicating whether the new <see cref="T:System.Drawing.Font"/> object is derived from a GDI vertical font.
      </param>
      <remarks>
        <para>The <paramref name="gdiCharSet"/> parameter takes a value from the list defined in the platform SDK header file WinGDI.h.</para>
      </remarks>
    </member>
	
    <member name="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Font"/> object using a specified size and unit. The style is set to FontStyle.Regular.</para>
      </summary>
      <param name="familyName">
        A string representation of the <see cref="T:System.Drawing.FontFamily"/> object for the new <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="emSize">
        The em-size of the new font in the units specified by the <paramref name="unit"/> parameter.
      </param>
      <param name="unit">
        The <see cref="T:System.Drawing.GraphicsUnit"/> of the new font.
      </param>
    </member>

    <member name="M:System.Drawing.Font.Clone">
      <summary>
        <para>Creates an exact copy of this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.Font"/> object this method creates, cast as an <see langword="object"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code clones a <see cref="T:System.Drawing.Font"/> object and draws text with that font.</para>
        <code lang="VB">Public Sub Clone_Example(e As PaintEventArgs)
&apos; Create a Font object.
Dim myFont As New Font(&quot;Arial&quot;, 16)
&apos; Create a copy of myFont.
Dim cloneFont As Font = CType(myFont.Clone(), Font)
&apos; Use cloneFont to draw text to the screen.
e.Graphics.DrawString(&quot;This is a cloned font&quot;, cloneFont, _
Brushes.Black, 0, 0)
End Sub
        </code>
        <code lang="C#">public void Clone_Example(PaintEventArgs e)
{
// Create a Font object.
Font myFont = new Font(&quot;Arial&quot;, 16);
// Create a copy of myFont.
Font cloneFont = (Font)myFont.Clone();
// Use cloneFont to draw text to the screen.
e.Graphics.DrawString(
&quot;This is a cloned font&quot;,
cloneFont,
Brushes.Black,
0,
0);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Font.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Font"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Font.Equals(System.Object)">
      <summary>
        <para>Indicates whether the specified object is a <see cref="T:System.Drawing.Font"/> object and is identical to this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <param name="obj">
        The object to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the <paramref name="obj"/> parameter is a <see cref="T:System.Drawing.Font"/> object and is identical to this <see cref="T:System.Drawing.Font"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code creates two <see cref="T:System.Drawing.Font"/> objects and then tests whether they are equivalent.</para>
        <code lang="VB">Public Sub Equals_Example(e As PaintEventArgs)
&apos; Create a Font object.
Dim firstFont As New Font(&quot;Arial&quot;, 16)
&apos; Create a second Font object.
Dim secondFont As New Font(New FontFamily(&quot;Arial&quot;), 16)
&apos; Test to see if firstFont is identical to secondFont.
Dim fontTest As Boolean = firstFont.Equals(secondFont)
&apos; Display a message box with the result of the test.
MessageBox.Show(fontTest.ToString())
End Sub
        </code>
        <code lang="C#">public void Equals_Example(PaintEventArgs e)
{
// Create a Font object.
Font firstFont = new Font(&quot;Arial&quot;, 16);
// Create a second Font object.
Font secondFont = new Font(new FontFamily(&quot;Arial&quot;), 16);
// Test to see if firstFont is identical to secondFont.
bool fontTest = firstFont.Equals(secondFont);
// Display a message box with the result of the test.
MessageBox.Show(fontTest.ToString());
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Font.FromHdc(System.IntPtr)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Font"/> object from the specified Windows handle to a device context.</para>
      </summary>
      <param name="hdc">
        A handle to a device context.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Font"/> object this method creates.</para>
      </returns>
      <remarks>
        <para>For this method to work, the <paramref name="hdc"/> parameter must contain a handle to a device context in which a font is selected. This method will not work with an <paramref name="hdc"/> acquired from a GDI+ <see cref="T:System.Drawing.Graphics"/> object because the <paramref name="hdc"/> does not have a font selected.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Font.FromHfont(System.IntPtr)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Font"/> object from the specified Windows handle.</para>
      </summary>
      <param name="hfont">
        A Windows handle to a GDI font.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Font"/> object this method creates.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Gets a handle to a GDI font.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Font"/> object from that handle.</term>
          </item>
          <item>
            <term>Draws text to the screen, using the new <see cref="T:System.Drawing.Font"/> object.</term>
          </item>
        </list>
        <code lang="VB">&lt;System.Runtime.InteropServices.DllImportAttribute(&quot;GDI32.DLL&quot;)&gt; _
Private Shared Function GetStockObject(fnObject As Integer) As IntPtr
End Function
Public Sub FromHfont_Example(e As PaintEventArgs)
&apos; Get a handle for a GDI font.
Dim hFont As IntPtr = GetStockObject(0)
&apos; Create a Font object from hFont.
Dim hfontFont As Font = Font.FromHfont(hFont)
&apos; Use hfontFont to draw text to the screen.
e.Graphics.DrawString(&quot;This font is from a GDI HFONT&quot;, hfontFont, _
Brushes.Black, 0, 0)
End Sub
        </code>
        <code lang="C#">[System.Runtime.InteropServices.DllImportAttribute(&quot;gdi32.dll&quot;)]
private static extern IntPtr GetStockObject(int fnObject);
public void FromHfont_Example(PaintEventArgs e)
{
// Get a handle for a GDI font.
IntPtr hFont = GetStockObject(0);
// Create a Font object from hFont.
Font hfontFont = Font.FromHfont(hFont);
// Use hfontFont to draw text to the screen.
e.Graphics.DrawString(
&quot;This font is from a GDI HFONT&quot;,
hfontFont,
Brushes.Black,
0,
0);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Font.FromLogFont(System.Object)">
      <overload>
        Creates a <see cref="T:System.Drawing.Font"/> object from the specified GDI <see langword="LOGFONT"/> structure.
      </overload>
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Font"/> object from the specified GDI <see langword="LOGFONT"/> structure.</para>
      </summary>
      <param name="lf">
        An <see cref="T:System.Object"/> object that represents the GDI <see langword="LOGFONT"/> structure from which to create the <see cref="T:System.Drawing.Font"/> object.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Font"/> object that this method creates.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Font.FromLogFont(System.Object,System.IntPtr)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Font"/> object from the specified GDI <see langword="LOGFONT"/> structure.</para>
      </summary>
      <param name="lf">
        An <see cref="T:System.Object"/> object that represents the GDI <see langword="LOGFONT"/> structure from which to create the <see cref="T:System.Drawing.Font"/> object.
      </param>
      <param name="hdc">
        A handle to a device context that contains additional information about the <paramref name="lf"/> structure.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Font"/> object that this method creates.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Font.GetHashCode">
      <summary>
        <para>Gets the hash code for this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <returns>
        <para>The hash code for this <see cref="T:System.Drawing.Font"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Font"/> object.</term>
          </item>
          <item>
            <term>Gets the hash code for that font.</term>
          </item>
          <item>
            <term>Displays a message box with the value of the hash code.</term>
          </item>
        </list>
        <code lang="VB">Public Sub GetHashCode_Example(e As PaintEventArgs)
&apos; Create a Font object.
Dim myFont As New Font(&quot;Arial&quot;, 16)
&apos; Get the hash code for myFont.
Dim hashCode As Integer = myFont.GetHashCode()
&apos; Display the hash code in a message box.
MessageBox.Show(hashCode.ToString())
End Sub
        </code>
        <code lang="C#">public void GetHashCode_Example(PaintEventArgs e)
{
// Create a Font object.
Font myFont = new Font(&quot;Arial&quot;, 16);
// Get the hash code for myFont.
int hashCode = myFont.GetHashCode();
// Display the hash code in a message box.
MessageBox.Show(hashCode.ToString());
}
        </code>
      </example>
    </member>
    
    <member name="M:System.Drawing.Font.GetHeight">
      <overload>
        Returns the line spacing of this font.
      </overload>
      <summary>
        <para>Returns the line spacing, in pixels, of this font. The line spacing is the vertical distance between the base lines of two consecutive lines of text. Thus, the line spacing includes the blank space between lines along with the height of the character itself.</para>
      </summary>
      <returns>
        <para>The line spacing, in pixels, of this font.</para>
      </returns>     
      <remarks>
        <para>If the <see langword="Unit"/> property of the font is set to anything other than GraphicsUnit.Pixel, the height (in pixels) is calculated using the vertical resolution of the screen display. For example, suppose the font unit is inches and the font size is 0.3. Also suppose that for the corresponding font family, the em height is 2048 and the line spacing is 2355. For a screen display that has a vertical resolution of 96 dots per inch, you can calculate the height as follows:</para>
        <para>2355*(0.3/2048)*96 = 33.11719</para>
       </remarks>     
    </member>

    <member name="M:System.Drawing.Font.GetHeight(System.Drawing.Graphics)">
      <summary>
        <para>Returns the line spacing, in the current unit of a specified <see cref="T:System.Drawing.Graphics"/> object, of this font. The line spacing is the vertical distance between the base lines of two consecutive lines of text. Thus, the line spacing includes the blank space between lines along with the height of the character itself.</para>
      </summary>
      <param name="graphics">
        A <see cref="T:System.Drawing.Graphics"/> object that holds the vertical resolution (dots per inch) of the display device as well as settings for page unit and page scale.
      </param>
      <returns>
        <para>The line spacing, in pixels, of this font.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Font"/> object.</term>
          </item>
          <item>
            <term>Draws a line of text to the screen, using the new <see cref="T:System.Drawing.Font"/> object.</term>
          </item>
          <item>
            <term>Gets the height of the font.</term>
          </item>
          <item>
            <term>Draws a second line of text directly below the first line.</term>
          </item>
        </list>
        <code lang="VB">Public Sub GetHeight_Example(e As PaintEventArgs)
&apos; Create a Font object.
Dim myFont As New Font(&quot;Arial&quot;, 16)
&apos;Draw text to the screen with myFont.
e.Graphics.DrawString(&quot;This is the first line&quot;, myFont, _
Brushes.Black, New PointF(0, 0))
&apos;Get the height of myFont.
Dim height As Single = myFont.GetHeight(e.Graphics)
&apos;Draw text immediately below the first line of text.
e.Graphics.DrawString(&quot;This is the second line&quot;, myFont, _
Brushes.Black, New PointF(0, height))
End Sub
        </code>
        <code lang="C#">public void GetHeight_Example(PaintEventArgs e)
{
// Create a Font object.
Font myFont = new Font(&quot;Arial&quot;, 16);
//Draw text to the screen with myFont.
e.Graphics.DrawString(
&quot;This is the first line&quot;,
myFont,
Brushes.Black,
new PointF(0, 0));
//Get the height of myFont.
float height = myFont.GetHeight(e.Graphics);
//Draw text immediately below the first line of text.
e.Graphics.DrawString(
&quot;This is the second line&quot;,
myFont,
Brushes.Black,
new PointF(0, height));
}
        </code>
      </example>      
      <remarks>
        <para>If the <see langword="Unit"/> property of the font is set to anything other than GraphicsUnit.Pixel, the height, in pixels, is calculated using the vertical resolution of the specified <see cref="T:System.Drawing.Graphics"/> object. For example, suppose the font unit is inches and the font size is 0.3. Also suppose that for the corresponding font family, the em height is 2048 and the line spacing is 2355. If the <see cref="T:System.Drawing.Graphics"/> object has a <see langword="Unit"/> of GraphicsUnit.Pixel and a <see langword="DpiY"/> of 96 dots per inch, the height is calculated as follows:</para>
        <para>2355*(0.3/2048)*96 = 33.1171875</para>
        <para>Continuing with the same example, suppose the <see langword="Unit"/> property of the <see cref="T:System.Drawing.Graphics"/> object is set to something other than GraphicsUnit.Pixel, say GraphicsUnit.Millimeter. Then (using 1 inch = 25.4 millimeters) the height, in millimeters, is calculated as follows:</para>
        <para>2355*(0.3/2048)25.4 = 8.762256</para>
      </remarks>  
    </member>

    <member name="M:System.Drawing.Font.GetHeight(System.Single)">
      <summary>
        <para>Returns the height, in pixels, of this <see cref="T:System.Drawing.Font"/> object when drawn to a device with the specified vertical resolution.</para>
      </summary>
      <param name="dpi">
        The vertical resolution, in dots per inch, used to calculate the height of the font.
      </param>
      <returns>
        <para>The height, in pixels, of this <see cref="T:System.Drawing.Font"/> object.</para>
      </returns>  
	  <remarks>
	    <para>If the <see langword="Unit"/> property of the font is set to anything other than GraphicsUnit.Pixel, the height, in pixels, is calculated using the specified vertical resolution. For example, suppose the font unit is inches and the font size is 0.3. Also suppose that for the corresponding font family, the em height is 2048 and the line spacing is 2355. If the specified vertical resolution is 96 dots per inch, the height is calculated as follows:</para>
        <para>2355*(0.3/2048)*96 = 33.1171875</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Font.ToHfont">
      <summary>
        <para>Returns a handle to this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <returns>
        <para>A Windows handle to this <see cref="T:System.Drawing.Font"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code creates a <see cref="T:System.Drawing.Font"/> object and then gets a handle to that <see cref="T:System.Drawing.Font"/> object.</para>
        <code lang="VB">Public Sub ToHfont_Example(e As PaintEventArgs)
&apos; Create a Font object.
Dim myFont As New Font(&quot;Arial&quot;, 16)
&apos; Get a handle to the Font object.
Dim hFont As IntPtr = myFont.ToHfont()
&apos; Display a message box with the value of hFont.
MessageBox.Show(hFont.ToString())
End Sub
        </code>
        <code lang="C#">public void ToHfont_Example(PaintEventArgs e)
{
// Create a Font object.
Font myFont = new Font(&quot;Arial&quot;, 16);
// Get a handle to the Font object.
IntPtr hFont = myFont.ToHfont();
// Display a message box with the value of hFont.
MessageBox.Show(hFont.ToString());
}
        </code>
      </example>
      <remarks>
        <para>If the Unit property of the font is set to anything other than GraphicsUnit.Pixel, the height, in pixels, is calculated using the specified vertical resolution. For example, suppose the font unit is inches and the font size is 0.3. Also suppose that for the corresponding font family, the em height is 2048 and the line spacing is 2355. If the specified vertical resolution is 96 dots per inch, the height is calculated as follows:</para>
        <para>2355*(0.3/2048)*96 = 33.1171875</para>
      </remarks>     
    </member>

    <member name="M:System.Drawing.Font.ToLogFont(System.Object)">
      <overload>
        Creates a GDI <see langword="LOGFONT"/> structure from this <see cref="T:System.Drawing.Font"/> object.
      </overload>
      <summary>
        <para>Creates a GDI <see langword="LOGFONT"/> structure from this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <param name="logFont">
        An <see langword="object"/> that represents the <see langword="LOGFONT"/> structure that this method creates.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method requires UnmanagedCode permission. For more information see <see cref="T:System.Security.Permissions.SecurityPermissionFlag"/>.</para>
       </remarks>
    </member>
    
    <member name="M:System.Drawing.Font.ToLogFont(System.Object,System.Drawing.Graphics)">
      <summary>
        <para>Creates a GDI+ <see langword="LOGFONT"/> structure from this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <param name="logFont">
        An <see cref="T:System.Object"/> object that represents the <see langword="LOGFONT"/> structure that this method creates.
      </param>
      <param name="graphics">
        A <see cref="T:System.Drawing.Graphics"/> object that provides additional information for the <see langword="LOGFONT"/> structure.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method requires UnmanagedCode permission. For more information see <see cref="T:System.Security.Permissions.SecurityPermissionFlag"/>.</para>
       </remarks>
    </member>

    <member name="M:System.Drawing.Font.ToString">
      <summary>
        <para>Returns a human-readable string representation of this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <returns>
        <para>A string that represents this <see cref="T:System.Drawing.Font"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Font"/> object.</term>
          </item>
          <item>
            <term>Gets a string represents the font.</term>
          </item>
          <item>
            <term>Displays the string in a message box.</term>
          </item>
        </list>
        <code lang="VB">Public Sub ToString_Example(e As PaintEventArgs)
&apos; Create a Font object.
Dim myFont As New Font(&quot;Arial&quot;, 16)
&apos; Get a string that represents myFont.
Dim fontString As String = myFont.ToString()
&apos; Display a message box with fontString.
MessageBox.Show(fontString)
End Sub
        </code>
        <code lang="C#">public void ToString_Example(PaintEventArgs e)
{
// Create a Font object.
Font myFont = new Font(&quot;Arial&quot;, 16);
// Get a string that represents myFont.
string fontString = myFont.ToString();
// Display a message box with fontString.
MessageBox.Show(fontString);
}
        </code>
      </example>
    </member>

    <member name="P:System.Drawing.Font.Bold">
      <summary>
        <para>Gets a value that indicates whether this <see cref="T:System.Drawing.Font"/> object is bold.</para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> if this <see cref="T:System.Drawing.Font"/> object is bold; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Font.FontFamily">
      <summary>
        <para>Gets the <see cref="T:System.Drawing.FontFamily"/> object associated with this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <value>
        <para>The <see cref="T:System.Drawing.FontFamily"/> object associated with this <see cref="T:System.Drawing.Font"/> object.</para>
      </value>
      <remarks>
        <para>A <see cref="T:System.Drawing.FontFamily"/> object represents a group of fonts that have a similar font face, but may have different sizes and styles. For example, Arial, Times New Roman, and Verdana.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Font.GdiCharSet">
      <summary>
        <para>Gets a byte value that specifies the GDI character set that this <see cref="T:System.Drawing.Font"/> object uses. </para>
      </summary>
      <value>
        <para>A byte value that specifies the GDI character set that this <see cref="T:System.Drawing.Font"/> object uses.</para>
      </value>
      <remarks>
        <para>This property takes a value from the list defined in the platform SDK header file WinGDI.h.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Font.GdiVerticalFont">
      <summary>
        <para>Gets a Boolean value that indicates whether this <see cref="T:System.Drawing.Font"/> object is derived from a GDI vertical font. </para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> if this <see cref="T:System.Drawing.Font"/> object is derived from a GDI vertical font; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Font.Height">
      <summary>
        <para>Gets the line spacing of this font.</para>
      </summary>
      <value>
        <para>Gets the line spacing, in pixels, of this font. The line spacing is the vertical distance between the base lines of two consecutive lines of text. Thus, the line spacing includes the blank space between lines along with the height of the character itself.</para>
      </value>    
      <remarks>
        <para>If the <see langword="Unit"/> property of the font is set to anything other than GraphicsUnit.Pixel, the height (in pixels) is calculated using the vertical resolution of the screen display. For example, suppose the font unit is inches and the font size is 0.3. Also suppose that for the corresponding font family, the em height is 2048 and the line spacing is 2355. For a screen display that has a vertical resolution of 96 dots per inch, you can calculate the height as follows:</para>
        <para>2355*(0.3/2048)*96 = 33.11719</para>
        <para>The value returned by the <see cref="M:System.Drawing.Font.GetHeight"/> method would be 33.11719, and the value returned by the <see langword="Height"/> property would be 34. The <see langword="Height"/> property is the ceiling of the value returned by <see cref="M:System.Drawing.Font.GetHeight"/>.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Font.Italic">
      <summary>
        <para>Gets a value that indicates whether this <see cref="T:System.Drawing.Font"/> object is italic.</para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> if this <see cref="T:System.Drawing.Font"/> object is italic; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Font.Name">
      <summary>
        <para>Gets the face name of this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <value>
        <para>A string representation of the face name of this <see cref="T:System.Drawing.Font"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Font.Size">
      <summary>
        <para>Gets the em-size of this <see cref="T:System.Drawing.Font"/> object measured in the unit of this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <value>
        <para>The em-size of this <see cref="T:System.Drawing.Font"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Font.SizeInPoints">
      <summary>
        <para>Gets the em-size, in points, of this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <value>
        <para>The em-size, in points, of this <see cref="T:System.Drawing.Font"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Font.Strikeout">
      <summary>
        <para>Gets a value that indicates whether this <see cref="T:System.Drawing.Font"/> object specifies a horizontal line through the font.</para>
      </summary>
      <value>
        <para>This property is <see langword="true"/> if this <see cref="T:System.Drawing.Font"/> object has a horizontal line through it; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Font.Style">
      <summary>
        <para>Gets style information for this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.FontStyle"/> enumeration that contains style information for this <see cref="T:System.Drawing.Font"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Font.Underline">
      <summary>
        <para>Gets a value that indicates whether this <see cref="T:System.Drawing.Font"/> object is underlined.</para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> if this <see cref="T:System.Drawing.Font"/> object is underlined; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Font.Unit">
      <summary>
        <para>Gets the unit of measure for this <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that represents the unit of measure for this <see cref="T:System.Drawing.Font"/> object.</para>
      </value>
    </member>

    <member name="T:System.Drawing.FontConverter">
      <summary>
        <para>Converts <see cref="T:System.Drawing.Font"/> objects from one data type to another. Access the <see cref="T:System.Drawing.FontConverter"/> class through the <see langword="TypeDescriptor"/> object.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.FontConverter.#ctor">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.FontConverter"/> object.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.FontConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Determines whether this converter can convert an object in the specified source type to the native type of the converter.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="sourceType">
        The type you want to convert from.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this object can perform the conversion.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.FontConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</para>
      </summary>
      <param name="context">
        An <see langword="ITypeDescriptorContext"/> object that provides a format context.
      </param>
      <param name="destinationType">
        A <see cref="T:System.Type"/> object that represents the type you want to convert to.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.</para>
      </returns>
      <remarks>
        <para>The <paramref name="context"/> parameter can be used to extract additional information about the environment this converter is being invoked from. This can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic), so always check. Also, properties on the context object can return a null reference (<see langword="Nothing"/>).</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.FontConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para>Converts the specified object to the native type of the converter.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="culture">
        A <see langword="CultureInfo"/> object that specifies the culture used to represent the font.
      </param>
      <param name="value">
        The object to convert.
      </param>
      <returns>
        <para>The converted object. This method will throw an exception if the conversion could not be performed.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.FontConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the specified object to another type. The most common type conversion is to and from a string type. The default implementation calls the <see langword="ToString"/> method of the object if the object is valid and if the destination type is string. </para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="culture">
        A <see langword="CultureInfo"/> object that specifies the culture used to represent the object.
      </param>
      <param name="value">
        The object to convert.
      </param>
      <param name="destinationType">
        The data type to convert the object to.
      </param>
      <returns>
        <para>The converted object. If this method cannot convert the specified object to the destination type, it throws a <see cref="T:System.NotSupportedException"/> exception.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.FontConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>
        <para>Creates an object of this type by using a specified set of property values for the object. This is useful for creating nonchangeable objects that have changeable properties.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <param name="propertyValues">
        A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the <see langword="GetProperties"/> object.
      </param>
      <returns>
        <para>The newly created object, or <see langword="null"/> if the object could not be created. The default implementation returns <see langword="null"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.FontConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Determines whether  changing a value on this object should require a call to the <see langword="CreateInstance"/> method to create a new value.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the <see langword="CreateInstance"/> object should be called when a change is made to one or more properties of this object; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.FontConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
        <para>Retrieves the set of properties for this type. By default, a type does not have any properties to return. An easy implementation of this method can call the <see langword="TypeDescriptor.GetProperties"/> method for the correct data type.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <param name="value">
        The value of the object to get the properties for.
      </param>
      <param name="attributes">
        An array of <see langword="MemberAttribute"/> objects that specify the attributes of the properties.
      </param>
      <returns>
        <para>The set of properties that should be exposed for this data type. If no properties should be exposed, this may return <see langword="null"/>. The default implementation always returns <see langword="null"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.FontConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Determines whether  this object supports properties. By default, this is <see langword="false"/>.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the <see langword="GetProperties"/> object should be called to find the properties of this object; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="T:System.Drawing.FontFamily">
      <summary>
        <para>Defines a group of type faces having a similar basic design and certain variations in styles. This class cannot be inherited. </para>
      </summary>
    </member>

    <member name="M:System.Drawing.FontFamily.#ctor(System.String)">
      <overload>
        Initializes a new <see cref="T:System.Drawing.FontFamily"/> object that uses the specified name.
      </overload>
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.FontFamily"/> object with the specified name.</para>
      </summary>
      <param name="name">
        The name of the new <see cref="T:System.Drawing.FontFamily"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.FontFamily.#ctor(System.String,System.Drawing.Text.FontCollection)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.FontFamily"/> object in the specified <see cref="T:System.Drawing.Text.FontCollection"/> object with the specified name.</para>
      </summary>
      <param name="name">
        A <see cref="T:System.String"/> object that represents the name of the new <see cref="T:System.Drawing.FontFamily"/> object.
      </param>
      <param name="fontCollection">
        The <see cref="T:System.Drawing.Text.FontCollection"/> object that contains this <see cref="T:System.Drawing.FontFamily"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.FontFamily.#ctor(System.Drawing.Text.GenericFontFamilies)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.FontFamily"/> object from the specified generic font family.</para>
      </summary>
      <param name="genericFamily">
        The <see cref="T:System.Drawing.Text.GenericFontFamilies"/> enumeration from which to create the new <see cref="T:System.Drawing.FontFamily"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.FontFamily.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.FontFamily"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.FontFamily.Equals(System.Object)">
      <summary>
        <para>Indicates whether the specified object is a <see cref="T:System.Drawing.FontFamily"/> object and is identical to this <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </summary>
      <param name="obj">
        The object to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <paramref name="obj"/> is both a <see cref="T:System.Drawing.FontFamily"/> object and is identical to this <see cref="T:System.Drawing.FontFamily"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates two <see cref="T:System.Drawing.Font"/> objects.</term>
          </item>
          <item>
            <term>Tests whether they are equivalent.</term>
          </item>
          <item>
            <term>Displays the result of the test in a message box.</term>
          </item>
        </list>
        <code lang="VB">Public Sub Equals_Example(e As PaintEventArgs)
&apos; Create two FontFamily objects.
Dim firstFontFamily As New FontFamily(&quot;Arial&quot;)
Dim secondFontFamily As New FontFamily(&quot;Times New Roman&quot;)
&apos; Check to see if the two font families are equivalent.
Dim equalFonts As Boolean = _
firstFontFamily.Equals(secondFontFamily)
&apos; Display the result of the test in a message box.
MessageBox.Show(equalFonts.ToString())
End Sub
        </code>
        <code lang="C#">public void Equals_Example(PaintEventArgs e)
{
// Create two FontFamily objects.
FontFamily firstFontFamily = new FontFamily(&quot;Arial&quot;);
FontFamily secondFontFamily = new FontFamily(&quot;Times New Roman&quot;);
// Check to see if the two font families are equivalent.
bool equalFonts = firstFontFamily.Equals(secondFontFamily);
// Display the result of the test in a message box.
MessageBox.Show(equalFonts.ToString());
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.FontFamily.GetCellAscent(System.Drawing.FontStyle)">
      <summary>
        <para>Returns the cell ascent, in design units, of the <see cref="T:System.Drawing.FontFamily"/> object of the specified style. For information about font metrics, see <see langword="Obtaining Font Metrics"/>.</para>
      </summary>
      <param name="style">
        A <see cref="T:System.Drawing.FontStyle"/> enumeration that contains style information for the font.
      </param>
      <returns>
        <para>The cell ascent for this <see cref="T:System.Drawing.FontFamily"/> object that uses the specified <see cref="T:System.Drawing.FontStyle"/> enumeration .</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.FontFamily"/> object.</term>
          </item>
          <item>
            <term>Gets the cell ascent for that font family.</term>
          </item>
          <item>
            <term>Draws the value of the cell ascent to the screen as text.</term>
          </item>
        </list>
        <code lang="VB">Public Sub GetCellAscent_Example(e As PaintEventArgs)
&apos; Create a FontFamily object.
Dim ascentFontFamily As New FontFamily(&quot;arial&quot;)
&apos; Get the cell ascent of the font family in design units.
Dim cellAscent As Integer = _
ascentFontFamily.GetCellAscent(FontStyle.Regular)
&apos; Draw the result as a string to the screen.
e.Graphics.DrawString(&quot;ascentFontFamily.GetCellAscent() returns &quot; _
&amp; cellAscent.ToString() &amp; &quot;.&quot;, New Font(ascentFontFamily, 16), _
Brushes.Black, New PointF(0, 0))
End Sub
        </code>
        <code lang="C#">public void GetCellAscent_Example(PaintEventArgs e)
{
// Create a FontFamily object.
FontFamily ascentFontFamily = new FontFamily(&quot;arial&quot;);
// Get the cell ascent of the font family in design units.
int cellAscent = ascentFontFamily.GetCellAscent(FontStyle.Regular);
// Draw the result as a string to the screen.
e.Graphics.DrawString(
&quot;ascentFontFamily.GetCellAscent() returns &quot; + cellAscent.ToString() + &quot;.&quot;,
new Font(ascentFontFamily, 16),
Brushes.Black,
new PointF(0, 0));
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.FontFamily.GetCellDescent(System.Drawing.FontStyle)">
      <summary>
        <para>Returns the cell descent, in design units, of the <see cref="T:System.Drawing.FontFamily"/> object of the specified style. For information about font metrics, see <see langword="Obtaining Font Metrics"/>.</para>
      </summary>
      <param name="style">
        A <see cref="T:System.Drawing.FontStyle"/> enumeration that contains style information for the font.
      </param>
      <returns>
        <para>The cell descent metric for this <see cref="T:System.Drawing.FontFamily"/> object that uses the specified <see cref="T:System.Drawing.FontStyle"/> enumeration .</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.FontFamily"/> object.</term>
          </item>
          <item>
            <term>Gets the cell descent for that font family.</term>
          </item>
          <item>
            <term>Draws the value of the cell ascent to the screen as text.</term>
          </item>
        </list>
        <code lang="VB">Public Sub GetCellDescent_Example(e As PaintEventArgs)
&apos; Create a FontFamily object.
Dim descentFontFamily As New FontFamily(&quot;arial&quot;)
&apos; Get the cell descent of the font family in design units.
Dim cellDescent As Integer = _
descentFontFamily.GetCellDescent(FontStyle.Regular)
&apos; Draw the result as a string to the screen.
e.Graphics.DrawString(&quot;descentFontFamily.GetCellDescent() returns &quot; _
&amp; cellDescent.ToString() &amp; &quot;.&quot;, New Font(descentFontFamily, 16), _
Brushes.Black, New PointF(0, 0))
End Sub
        </code>
        <code lang="C#">public void GetCellDescent_Example(PaintEventArgs e)
{
// Create a FontFamily object.
FontFamily descentFontFamily = new FontFamily(&quot;arial&quot;);
// Get the cell descent of the font family in design units.
int cellDescent = descentFontFamily.GetCellDescent(FontStyle.Regular);
// Draw the result as a string to the screen.
e.Graphics.DrawString(
&quot;descentFontFamily.GetCellDescent() returns &quot; + cellDescent.ToString() + &quot;.&quot;,
new Font(descentFontFamily, 16),
Brushes.Black,
new PointF(0, 0));
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.FontFamily.GetEmHeight(System.Drawing.FontStyle)">
      <summary>
        <para>Gets the height, in font design units, of the em square for the specified style. For information about font metrics, see <see langword="Obtaining Font Metrics"/>.</para>
      </summary>
      <param name="style">
        The <see cref="T:System.Drawing.FontStyle"/> enumeration for which to get the em height.
      </param>
      <returns>
        <para>The height of the em square.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.FontFamily"/> object.</term>
          </item>
          <item>
            <term>Gets the em square height for that font family.</term>
          </item>
          <item>
            <term>Draws the value of the em height to the screen as text.</term>
          </item>
        </list>
        <code lang="VB">Public Sub GetEmHeight_Example(e As PaintEventArgs)
&apos; Create a FontFamily object.
Dim emFontFamily As New FontFamily(&quot;arial&quot;)
&apos; Get the em height of the font family in design units.
Dim emHeight As Integer = _
emFontFamily.GetEmHeight(FontStyle.Regular)
&apos; Draw the result as a string to the screen.
e.Graphics.DrawString(&quot;emFontFamily.GetEmHeight() returns &quot; &amp; _
emHeight.ToString() + &quot;.&quot;, New Font(emFontFamily, 16), _
Brushes.Black, New PointF(0, 0))
End Sub
        </code>
        <code lang="C#">public void GetEmHeight_Example(PaintEventArgs e)
{
// Create a FontFamily object.
FontFamily emFontFamily = new FontFamily(&quot;arial&quot;);
// Get the em height of the font family in design units.
int emHeight = emFontFamily.GetEmHeight(FontStyle.Regular);
// Draw the result as a string to the screen.
e.Graphics.DrawString(
&quot;emFontFamily.GetEmHeight() returns &quot; + emHeight.ToString() + &quot;.&quot;,
new Font(emFontFamily, 16),
Brushes.Black,
new PointF(0, 0));
        </code>
        <para>}</para>
      </example>
    </member>

    <member name="M:System.Drawing.FontFamily.GetFamilies(System.Drawing.Graphics)">
      <summary>
        <para>Returns an array that contains all the <see cref="T:System.Drawing.FontFamily"/> objects available for the specified graphics context.</para>
      </summary>
      <param name="graphics">
        The <see cref="T:System.Drawing.Graphics"/> object from which to return <see cref="T:System.Drawing.FontFamily"/> objects.
      </param>
      <returns>
        <para>An array of <see cref="T:System.Drawing.FontFamily"/> objects available for the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code gets an array of the available <see cref="T:System.Drawing.FontFamily"/> objects, and then draws text to the screen using each of the font families.</para>
        <code lang="VB">Public Sub GetFamilies_Example(e As PaintEventArgs)
&apos; Get an array of the available font families.
Dim families As FontFamily() = FontFamily.GetFamilies(e.Graphics)
&apos; Draw text using each of the font families.
Dim familiesFont As Font
Dim familyString As String
Dim spacing As Single = 0
Dim family As FontFamily
For Each family In families
familiesFont = New Font(family, 16, FontStyle.Bold)
familyString = &quot;This is the &quot; + family.Name + &quot;family.&quot;
e.Graphics.DrawString(familyString, familiesFont, _
Brushes.Black, New PointF(0, spacing))
spacing += familiesFont.Height
Next family
End Sub
        </code>
        <code lang="C#">public void GetFamilies_Example(PaintEventArgs e)
{
// Get an array of the available font families.
FontFamily[] families = FontFamily.GetFamilies(e.Graphics);
// Draw text using each of the font families.
Font familiesFont;
string familyString;
float spacing = 0;
for each (FontFamily family in families)
{
familiesFont = new Font(family, 16, FontStyle.Bold);
familyString = &quot;This is the &quot; + family.Name + &quot;family.&quot;;
e.Graphics.DrawString(
familyString,
familiesFont,
Brushes.Black,
new PointF(0, spacing));
spacing += familiesFont.Height;
}
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.FontFamily.GetHashCode">
      <summary>
        <para>Gets a hash code for this <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </summary>
      <returns>
        <para>The hash code for this <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.FontFamily"/> object.</term>
          </item>
          <item>
            <term>Gets the hash code for the font family.</term>
          </item>
          <item>
            <term>Draws the value of the hash code to the screen as text.</term>
          </item>
        </list>
        <code lang="VB">Public Sub GetHashCode_Example(e As PaintEventArgs)
&apos; Create a FontFamily object.
Dim myFontFamily As New FontFamily(&quot;Arial&quot;)
&apos; Get the hash code for myFontFamily.
Dim hashCode As Integer = myFontFamily.GetHashCode()
&apos; Draw the value of hashCode to the screen as a string.
e.Graphics.DrawString(&quot;hashCode = &quot; &amp; hashCode.ToString(), _
New Font(myFontFamily, 16), Brushes.Black, New PointF(0, 0))
End Sub
        </code>
        <code lang="C#">public void GetHashCode_Example(PaintEventArgs e)
{
// Create a FontFamily object.
FontFamily myFontFamily = new FontFamily(&quot;Arial&quot;);
// Get the hash code for myFontFamily.
int hashCode = myFontFamily.GetHashCode();
// Draw the value of hashCode to the screen as a string.
e.Graphics.DrawString(
&quot;hashCode = &quot; + hashCode.ToString(),
new Font(myFontFamily, 16),
Brushes.Black,
new PointF(0, 0));
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.FontFamily.GetLineSpacing(System.Drawing.FontStyle)">
      <summary>
        <para>Returns the line spacing, in design units, of the <see cref="T:System.Drawing.FontFamily"/> object of the specified style. The line spacing is the vertical distance between the base lines of two consecutive lines of text. For information about font metrics, see <see langword="Obtaining Font Metrics"/>.</para>
      </summary>
      <param name="style">
        The <see cref="T:System.Drawing.FontStyle"/> enumeration to apply.
      </param>
      <returns>
        <para>The distance between two consecutive lines of text.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.FontFamily"/> object.</term>
          </item>
          <item>
            <term>Gets the line spacing for the font family.</term>
          </item>
          <item>
            <term>Draws the value of the line spacing to the screen as text.</term>
          </item>
        </list>
        <code lang="VB">Public Sub GetLineSpacing_Example(e As PaintEventArgs)
&apos; Create a FontFamily object.
Dim myFontFamily As New FontFamily(&quot;Arial&quot;)
&apos; Get the line spacing for myFontFamily.
Dim lineSpacing As Integer = _
myFontFamily.GetLineSpacing(FontStyle.Regular)
&apos; Draw the value of lineSpacing to the screen as a string.
e.Graphics.DrawString(&quot;lineSpacing = &quot; &amp; lineSpacing.ToString(), _
New Font(myFontFamily, 16), Brushes.Black, New PointF(0, 0))
End Sub
        </code>
        <code lang="C#">public void GetLineSpacing_Example(PaintEventArgs e)
{
// Create a FontFamily object.
FontFamily myFontFamily = new FontFamily(&quot;Arial&quot;);
// Get the line spacing for myFontFamily.
int lineSpacing = myFontFamily.GetLineSpacing(FontStyle.Regular);
// Draw the value of lineSpacing to the screen as a string.
e.Graphics.DrawString(
&quot;lineSpacing = &quot; + lineSpacing.ToString(),
new Font(myFontFamily, 16),
Brushes.Black,
new PointF(0, 0));
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.FontFamily.GetName(System.Int32)">
      <summary>
        <para>Returns the name, in the specified language, of this <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </summary>
      <param name="language">
        The language in which the name is returned.
      </param>
      <returns>
        <para>A <see cref="T:System.String"/> object that represents the name, in the specified language, of this <see cref="T:System.Drawing.FontFamily"/> object. It creates a <see cref="T:System.Drawing.FontFamily"/> object, gets the name of that font family, and then draws the name to the screen as text.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.FontFamily"/> object.</term>
          </item>
          <item>
            <term>Gets the name of the font family.</term>
          </item>
          <item>
            <term>Draws the name of the font family to the screen as text.</term>
          </item>
        </list>
        <code lang="VB">Public Sub GetName_Example(e As PaintEventArgs)
&apos; Create a FontFamily object.
Dim myFontFamily As New FontFamily(&quot;Arial&quot;)
&apos; Get the name of myFontFamily.
Dim familyName As String = myFontFamily.GetName(0)
&apos; Draw the name of the myFontFamily to the screen as a string.
e.Graphics.DrawString(&quot;The family name is &quot; &amp; familyName, _
New Font(myFontFamily, 16), Brushes.Black, New PointF(0, 0))
End Sub
        </code>
        <code lang="C#">public void GetName_Example(PaintEventArgs e)
{
// Create a FontFamily object.
FontFamily myFontFamily = new FontFamily(&quot;Arial&quot;);
// Get the name of myFontFamily.
string familyName = myFontFamily.GetName(0);
// Draw the name of the myFontFamily to the screen as a string.
e.Graphics.DrawString(
&quot;The family name is &quot; + familyName,
new Font(myFontFamily, 16),
Brushes.Black,
new PointF(0, 0));
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.FontFamily.IsStyleAvailable(System.Drawing.FontStyle)">
      <summary>
        <para>Indicates whether the specified <see cref="T:System.Drawing.FontStyle"/> enumeration is available.</para>
      </summary>
      <param name="style">
        The <see cref="T:System.Drawing.FontStyle"/> enumeration to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified <see cref="T:System.Drawing.FontStyle"/> is available; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.FontFamily"/> object.</term>
          </item>
          <item>
            <term>Tests whether the font family is available in an italic font.</term>
          </item>
          <item>
            <term>If it is, draws text to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub IsStyleAvailable_Example(e As PaintEventArgs)
&apos; Create a FontFamily object.
Dim myFontFamily As New FontFamily(&quot;Arial&quot;)
&apos; Test whether myFontFamily is available in Italic.
If myFontFamily.IsStyleAvailable(FontStyle.Italic) Then
&apos; Create a Font object using myFontFamily.
Dim familyFont As New Font(myFontFamily, 16, FontStyle.Italic)
&apos; Use familyFont to draw text to the screen.
e.Graphics.DrawString(myFontFamily.Name &amp; _
&quot; is available in Italic&quot;, familyFont, Brushes.Black, _
New PointF(0, 0))
End If
End Sub
        </code>
        <code lang="C#">public void IsStyleAvailable_Example(PaintEventArgs e)
{
// Create a FontFamily object.
FontFamily myFontFamily = new FontFamily(&quot;Arial&quot;);
// Test whether myFontFamily is available in Italic.
if(myFontFamily.IsStyleAvailable(FontStyle.Italic))
{
// Create a Font object using myFontFamily.
Font familyFont = new Font(myFontFamily, 16, FontStyle.Italic);
// Use familyFont to draw text to the screen.
e.Graphics.DrawString(
myFontFamily.Name + &quot; is available in Italic&quot;,
familyFont,
Brushes.Black,
new PointF(0, 0));
}
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.FontFamily.ToString">
      <summary>
        <para>Converts this <see cref="T:System.Drawing.FontFamily"/> object to a human-readable string representation.</para>
      </summary>
      <returns>
        <para>The string that represents this <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code creates a <see cref="T:System.Drawing.FontFamily"/> object and draws a string representation of the font family to the screen.</para>
        <code lang="VB">Public Sub ToString_Example(e As PaintEventArgs)
&apos; Create a FontFamily object.
Dim myFontFamily As New FontFamily(&quot;Arial&quot;)
&apos; Draw a string representation of myFontFamily to the screen.
e.Graphics.DrawString(myFontFamily.ToString(), _
New Font(myFontFamily, 16), Brushes.Black, New PointF(0, 0))
End Sub
        </code>
        <code lang="C#">public void ToString_Example(PaintEventArgs e)
{
// Create a FontFamily object.
FontFamily myFontFamily = new FontFamily(&quot;Arial&quot;);
// Draw a string representation of myFontFamily to the screen.
e.Graphics.DrawString(
myFontFamily.ToString(),
new Font(myFontFamily, 16),
Brushes.Black,
new PointF(0, 0));
}
        </code>
      </example>
    </member>

    <member name="P:System.Drawing.FontFamily.Families">
      <summary>
        <para>Returns an array that contains all the <see cref="T:System.Drawing.FontFamily"/> objects associated with the current graphics context.</para>
      </summary>
      <value>
        <para>An array of <see cref="T:System.Drawing.FontFamily"/> objects associated with the current graphics context.</para>
      </value>
    </member>

    <member name="P:System.Drawing.FontFamily.GenericMonospace">
      <summary>
        <para>Gets a generic monospace <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.FontFamily"/> object that represents a generic monospace font.</para>
      </value>
    </member>

    <member name="P:System.Drawing.FontFamily.GenericSansSerif">
      <summary>
        <para>Gets a generic sans serif <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.FontFamily"/> object that represents a generic sans serif font.</para>
      </value>
    </member>

    <member name="P:System.Drawing.FontFamily.GenericSerif">
      <summary>
        <para>Gets a generic serif <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.FontFamily"/> object that represents a generic serif font.</para>
      </value>
    </member>

    <member name="P:System.Drawing.FontFamily.Name">
      <summary>
        <para>Gets the name of this <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.String"/> object that represents the name of this <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Graphics">
      <summary>
        <para>Encapsulates a GDI+ drawing surface. This class cannot be inherited. </para>
      </summary>
      <remarks>
        <para>The <see cref="T:System.Drawing.Graphics"/> class provides methods for drawing objects to the display device. A <see cref="T:System.Drawing.Graphics"/> object is associated with a specific device context.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])">
      <summary>
        <para>Adds a comment to the current <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="data">
        Array of bytes that contains the comment.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler, as well as <paramref name="thisForm"/>, the <see cref="T:System.Windows.Forms.Form"/> object for the example. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a temporary <see cref="T:System.Drawing.Graphics"/> object for creating the metafile and gets an <paramref name="hdc"/>, a handle to its device context.</term>
          </item>
          <item>
            <term>Creates a new metafile using the <paramref name="hdc"/>.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Graphics"/> object for display of the metafile from the <see cref="T:System.Drawing.Imaging.Metafile"/> object.</term>
          </item>
          <item>
            <term>Draws a rectangle to the metafile.</term>
          </item>
          <item>
            <term>Adds a comment to the metafile.</term>
          </item>
          <item>
            <term>Disposes the <see cref="T:System.Drawing.Graphics"/> object for the metafile-which closes the metafile.</term>
          </item>
          <item>
            <term>Disposes the metafile.</term>
          </item>
          <item>
            <term>Releases the temporary <paramref name="hdc"/>.</term>
          </item>
          <item>
            <term>Disposes the temporary <see cref="T:System.Drawing.Graphics"/> object.</term>
          </item>
          <item>
            <term>Creates a second metafile from the previously created file.</term>
          </item>
          <item>
            <term>Draws the metafile to the screen.</term>
          </item>
          <item>
            <term>Disposes the metafile.</term>
          </item>
        </list>
        <code lang="VB">Public Sub AddMetafileCommentBytes(e As PaintEventArgs)
&apos; Create temporary graphics object for metafile
&apos; creation and get handle to its device context.
Dim newGraphics As Graphics = thisForm.CreateGraphics()
Dim hdc As IntPtr = newGraphics.GetHdc()
&apos; Create metafile object to record.
Dim metaFile1 As New Metafile(&quot;SampMeta.emf&quot;, hdc)
&apos; Create graphics object to record metaFile.
Dim metaGraphics As Graphics = Graphics.FromImage(metaFile1)
&apos; Draw rectangle in metaFile.
metaGraphics.DrawRectangle(New Pen(Color.Black, 5), 0, 0, 100, 100)
&apos; Create comment and add to metaFile.
Dim metaComment As Byte() =  {CByte(&quot;T&quot;), CByte(&quot;e&quot;), CByte(&quot;s&quot;), _
CByte(&quot;t&quot;)}
metaGraphics.AddMetafileComment(metaComment)
&apos; Dispose of graphics object.
metaGraphics.Dispose()
&apos; Dispose of metafile.
metaFile1.Dispose()
&apos; Release handle to scratch device context.
newGraphics.ReleaseHdc(hdc)
&apos; Dispose of scratch graphics object.
newGraphics.Dispose()
&apos; Create existing metafile object to draw.
Dim metaFile2 As New Metafile(&quot;SampMeta.emf&quot;)
&apos; Draw metaFile to screen.
e.Graphics.DrawImage(metaFile2, New Point(0, 0))
&apos; Dispose of metafile.
metaFile2.Dispose()
End Sub
        </code>
        <code lang="C#">public void AddMetafileCommentBytes(PaintEventArgs e)
{
// Create temporary Graphics object for metafile
//  creation and get handle to its device context.
Graphics newGraphics = thisForm.CreateGraphics();
IntPtr hdc = newGraphics.GetHdc();
// Create metafile object to record.
Metafile metaFile1 = new Metafile(&quot;SampMeta.emf&quot;, hdc);
// Create graphics object to record metaFile.
Graphics metaGraphics = Graphics.FromImage(metaFile1);
// Draw rectangle in metaFile.
metaGraphics.DrawRectangle(new Pen(Color.Black, 5), 0, 0, 100, 100);
// Create comment and add to metaFile.
byte[] metaComment = {(byte)&apos;T&apos;, (byte)&apos;e&apos;, (byte)&apos;s&apos;, (byte)&apos;t&apos;};
metaGraphics.AddMetafileComment(metaComment);
// Dispose of graphics object.
metaGraphics.Dispose();
// Dispose of metafile.
metaFile1.Dispose();
// Release handle to temporary device context.
newGraphics.ReleaseHdc(hdc);
// Dispose of scratch graphics object.
newGraphics.Dispose();
// Create existing metafile object to draw.
Metafile metaFile2 = new Metafile(&quot;SampMeta.emf&quot;);
// Draw metaFile to screen.
e.Graphics.DrawImage(metaFile2, new Point(0, 0));
// Dispose of metafile.
metaFile2.Dispose();
}
        </code>
      </example>
      <remarks>
        <para>This method is valid only if this <see cref="T:System.Drawing.Graphics"/> object is associated with a <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.BeginContainer">
      <overload>
        Saves a graphics container with the current state of this <see cref="T:System.Drawing.Graphics"/> object and opens and uses a new graphics container.
      </overload>
      <summary>
        <para>Saves a graphics container with the current state of this <see cref="T:System.Drawing.Graphics"/> object and opens and uses a new graphics container.</para>
      </summary>
      <returns>
        <para>This method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object that represents the state of this <see cref="T:System.Drawing.Graphics"/> object at the time of the method call.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Opens a new graphics container and saves the old container.</term>
          </item>
          <item>
            <term>Translates the world coordinates in the container.</term>
          </item>
          <item>
            <term>Fills a red rectangle in the (translated coordinates of the) new container.</term>
          </item>
          <item>
            <term>Closes the new container and restores the saved container.</term>
          </item>
          <item>
            <term>Fills a green rectangle (to the untranslated coordinates) of the saved container.</term>
          </item>
        </list>
        <para>The result is a green rectangle that overlies a red rectangle of the same size.</para>
        <code lang="VB">Public Sub BeginContainerVoid(e As PaintEventArgs)
&apos; Begin graphics container.
Dim containerState As GraphicsContainer = _
e.Graphics.BeginContainer()
&apos; Translate world transformation.
e.Graphics.TranslateTransform(100F, 100F)
&apos; Fill translated rectangle in container with red.
e.Graphics.FillRectangle(New SolidBrush(Color.Red), 0, 0, 200, 200)
&apos; End graphics container.
e.Graphics.EndContainer(containerState)
&apos; Fill untransformed rectangle with green.
e.Graphics.FillRectangle(New SolidBrush(Color.Green), 0, 0, _
200, 200)
End Sub
        </code>
        <code lang="C#">public void BeginContainerVoid(PaintEventArgs e)
{
// Begin graphics container.
GraphicsContainer containerState = e.Graphics.BeginContainer();
// Translate world transformation.
e.Graphics.TranslateTransform(100.0F, 100.0F);
// Fill translated rectangle in container with red.
e.Graphics.FillRectangle(new SolidBrush(Color.Red), 0, 0, 200, 200);
// End graphics container.
e.Graphics.EndContainer(containerState);
// Fill untransformed rectangle with green.
e.Graphics.FillRectangle(new SolidBrush(Color.Green), 0, 0, 200, 200);
}
        </code>
      </example>
      <remarks>
        <para>Use this method with the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.</para>
        <para>When you call the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method of a <see cref="T:System.Drawing.Graphics"/> object, an information block that holds the state of the <see cref="T:System.Drawing.Graphics"/> object is put on a stack. The <see cref="M:System.Drawing.Graphics.BeginContainer"/> method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object that identifies that information block. When you pass the identifying object to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, the information block is removed from the stack and is used to restore the <see cref="T:System.Drawing.Graphics"/> object to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call.</para>
        <para>Containers can be nested; that is, you can call the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method several times before you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method. Each time you call the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method, an information block is put on the stack, and you receive a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object for the information block. When you pass one of those objects to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, the <see cref="T:System.Drawing.Graphics"/> object is returned to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call that returned that particular <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object. The information block placed on the stack by that <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call is removed from the stack, and all information blocks placed on that stack after that <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call are also removed.</para>
        <para>Calls to the <see langword="Graphics.Save"/> method place information blocks on the same stack as calls to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method. Just as an <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method call is paired with a <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call, a <see langword="Graphics.Restore"/> method call is paired with a <see langword="Save"/> method call.</para>
        <para>When you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, all information blocks placed on the stack (by the <see langword="Save"/> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method are removed from the stack. Likewise, when you call the <see langword="Restore"/> method, all information blocks placed on the stack (by the <see langword="Save"/> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method) after the corresponding call to the <see langword="Save"/> method are removed from the stack.</para>
        <para>The graphics state established by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Saves a graphics container with the current state of this <see cref="T:System.Drawing.Graphics"/> object and opens and uses a new graphics container with the specified scale transformation.</para>
      </summary>
      <param name="dstrect">
        <see cref="T:System.Drawing.Rectangle"/> structure that, together with the <paramref name="srcrect"/> parameter, specifies a scale transformation for the container.
      </param>
      <param name="srcrect">
        <see cref="T:System.Drawing.Rectangle"/> structure that, together with the <paramref name="dstrect"/> parameter, specifies a scale transformation for the container.
      </param>
      <param name="unit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure for the container.
      </param>
      <returns>
        <para>This method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object that represents the state of this <see cref="T:System.Drawing.Graphics"/> object at the time of the method call.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates two rectangles to specify a scale transformation for the new container.</term>
          </item>
          <item>
            <term>Opens the new graphics container and saves the old container.</term>
          </item>
          <item>
            <term>Fills a red rectangle in the (scaled coordinates of the) new container.</term>
          </item>
          <item>
            <term>Closes the new container and restores the saved container.</term>
          </item>
          <item>
            <term>Fills a green rectangle (to the unscaled coordinates) of the saved container.</term>
          </item>
        </list>
        <para>The result is a green rectangle that overlies a smaller red rectangle.</para>
        <code lang="VB">Public Sub BeginContainerRectangle(e As PaintEventArgs)
&apos; Define transformation for container.
Dim srcRect As New Rectangle(0, 0, 200, 200)
Dim destRect As New Rectangle(100, 100, 150, 150)
&apos; Begin graphics container.
Dim containerState As GraphicsContainer = _
e.Graphics.BeginContainer(destRect, srcRect, GraphicsUnit.Pixel)
&apos; Fill red rectangle in container.
e.Graphics.FillRectangle(New SolidBrush(Color.Red), 0, 0, 200, 200)
&apos; End graphics container.
e.Graphics.EndContainer(containerState)
&apos; Fill untransformed rectangle with green.
e.Graphics.FillRectangle(New SolidBrush(Color.Green), 0, 0, _
200, 200)
End Sub
        </code>
        <code lang="C#">public void BeginContainerRectangle(PaintEventArgs e)
{
// Define transformation for container.
Rectangle srcRect = new Rectangle(0, 0, 200, 200);
Rectangle destRect = new Rectangle(100, 100, 150, 150);
// Begin graphics container.
GraphicsContainer containerState = e.Graphics.BeginContainer(
destRect, srcRect,
GraphicsUnit.Pixel);
// Fill red rectangle in container.
e.Graphics.FillRectangle(new SolidBrush(Color.Red), 0, 0, 200, 200);
// End graphics container.
e.Graphics.EndContainer(containerState);
// Fill untransformed rectangle with green.
e.Graphics.FillRectangle(new SolidBrush(Color.Green), 0, 0, 200, 200);
}
        </code>
      </example>
      <remarks>
        <para>Use this method with the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.</para>
        <para>When you call the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method of a <see cref="T:System.Drawing.Graphics"/> object, an information block that holds the state of the <see cref="T:System.Drawing.Graphics"/> object is put on a stack. The <see cref="M:System.Drawing.Graphics.BeginContainer"/> method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object that identifies that information block. When you pass the identifying object to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, the information block is removed from the stack and is used to restore the <see cref="T:System.Drawing.Graphics"/> object to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call.</para>
        <para>Containers can be nested; that is, you can call the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method several times before you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method. Each time you call the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method, an information block is put on the stack, and you receive a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object for the information block. When you pass one of those objects to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, the <see cref="T:System.Drawing.Graphics"/> object is returned to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call that returned that particular <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object. The information block placed on the stack by that <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call is removed from the stack, and all information blocks placed on that stack after that <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call are also removed.</para>
        <para>Calls to the <see langword="Graphics.Save"/> method place information blocks on the same stack as calls to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method. Just as an <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method call is paired with a <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call, a <see langword="Graphics.Restore"/> method call is paired with a <see langword="Save"/> method call.</para>
        <para>When you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, all information blocks placed on the stack (by the <see langword="Save"/> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method are removed from the stack. Likewise, when you call the <see langword="Restore"/> method, all information blocks placed on the stack (by the <see langword="Save"/> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method) after the corresponding call to the <see langword="Save"/> method are removed from the stack.</para>
        <para>This method specifies a scale transformation for the new graphics container with the <paramref name="dstrect"/> and <paramref name="srcrect"/> parameters. The scale is equal to the transformation that, when applied to <paramref name="srcrect"/>, results in <paramref name="dstrect"/>.</para>
        <para>The graphics state established by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Saves a graphics container with the current state of this <see cref="T:System.Drawing.Graphics"/> object and opens and uses a new graphics container with the specified scale transformation.</para>
      </summary>
      <param name="dstrect">
        <see cref="T:System.Drawing.RectangleF"/> structure that, together with the <paramref name="srcrect"/> parameter, specifies a scale transformation for the new graphics container.
      </param>
      <param name="srcrect">
        <see cref="T:System.Drawing.RectangleF"/> structure that, together with the <paramref name="dstrect"/> parameter, specifies a scale transformation for the new graphics container.
      </param>
      <param name="unit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure for the container.
      </param>
      <returns>
        <para>This method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object that represents the state of this <see cref="T:System.Drawing.Graphics"/> object at the time of the method call.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates two rectangles to specify a scale transformation for the new container.</term>
          </item>
          <item>
            <term>Opens the new graphics container and saves the old container.</term>
          </item>
          <item>
            <term>Fills a red rectangle in the (scaled coordinates of the) new container.</term>
          </item>
          <item>
            <term>Closes the new container and restores the saved container.</term>
          </item>
          <item>
            <term>Fills a green rectangle (to the unscaled coordinates) of the saved container.</term>
          </item>
        </list>
        <para>The result is a green rectangle that overlies a smaller red rectangle.</para>
        <code lang="VB">Public Sub BeginContainerRectangleF(e As PaintEventArgs)
&apos; Define transformation for container.
Dim srcRect As New RectangleF(0F, 0F, 200F, 200F)
Dim destRect As New RectangleF(100F, 100F, 150F, 150F)
&apos; Begin graphics container.
Dim containerState As GraphicsContainer = _
e.Graphics.BeginContainer(destRect, srcRect, GraphicsUnit.Pixel)
&apos; Fill red rectangle in container.
e.Graphics.FillRectangle(New SolidBrush(Color.Red), 0F, 0F, _
200F, 200F)
&apos; End graphics container.
e.Graphics.EndContainer(containerState)
&apos; Fill untransformed rectangle with green.
e.Graphics.FillRectangle(New SolidBrush(Color.Green), 0F, 0F, _
200F, 200F)
End Sub
        </code>
        <code lang="C#">public void BeginContainerRectangleF(PaintEventArgs e)
{
// Define transformation for container.
RectangleF srcRect = new RectangleF(0.0F, 0.0F, 200.0F, 200.0F);
RectangleF destRect = new RectangleF(100.0F, 100.0F, 150.0F, 150.0F);
// Begin graphics container.
GraphicsContainer containerState = e.Graphics.BeginContainer(
destRect, srcRect,
GraphicsUnit.Pixel);
// Fill red rectangle in container.
e.Graphics.FillRectangle(new SolidBrush(Color.Red), 0.0F, 0.0F, 200.0F, 200.0F);
// End graphics container.
e.Graphics.EndContainer(containerState);
// Fill untransformed rectangle with green.
e.Graphics.FillRectangle(new SolidBrush(Color.Green), 0.0F, 0.0F, 200.0F, 200.0F);
}
        </code>
      </example>
      <remarks>
        <para>Use this method with the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.</para>
        <para>When you call the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method of a <see cref="T:System.Drawing.Graphics"/> object, an information block that holds the state of the <see cref="T:System.Drawing.Graphics"/> object is put on a stack. The <see cref="M:System.Drawing.Graphics.BeginContainer"/> method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object that identifies that information block. When you pass the identifying object to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, the information block is removed from the stack and is used to restore the <see cref="T:System.Drawing.Graphics"/> object to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call.</para>
        <para>Containers can be nested; that is, you can call the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method several times before you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method. Each time you call the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method, an information block is put on the stack, and you receive a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object for the information block. When you pass one of those objects to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, the <see cref="T:System.Drawing.Graphics"/> object is returned to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call that returned that particular <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object. The information block placed on the stack by that <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call is removed from the stack, and all information blocks placed on that stack after that <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call are also removed.</para>
        <para>Calls to the <see langword="Graphics.Save"/> method place information blocks on the same stack as calls to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method. Just as an <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method call is paired with a <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call, a <see langword="Graphics.Restore"/> method call is paired with a <see langword="Save"/> method call.</para>
        <para>When you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, all information blocks placed on the stack (by the <see langword="Save"/> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method are removed from the stack. Likewise, when you call the <see langword="Restore"/> method, all information blocks placed on the stack (by the <see langword="Save"/> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method) after the corresponding call to the <see langword="Save"/> method are removed from the stack.</para>
        <para>This method specifies a scale transformation for the new graphics container with the <paramref name="dstrect"/> and <paramref name="srcrect"/> parameters. The scale is equal to the transformation that, when applied to <paramref name="srcrect"/>, results in <paramref name="dstrect"/>.</para>
        <para>The graphics state established by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.Clear(System.Drawing.Color)">
      <summary>
        <para>Clears the entire drawing surface and fills it with the specified background color.</para>
      </summary>
      <param name="color">
        <see cref="T:System.Drawing.Color"/> structure that represents the background color of the drawing surface.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code clears the drawing surface of the <see cref="T:System.Drawing.Graphics"/> object and sets the background color to the system-defined teal color.</para>
        <code lang="VB">Public Sub ClearColor(e As PaintEventArgs)
&apos; Clear screen with teal background.
e.Graphics.Clear(Color.Teal)
End Sub
        </code>
        <code lang="C#">public void ClearColor(PaintEventArgs e)
{
// Clear screen with teal background.
e.Graphics.Clear(Color.Teal);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an <see cref="T:System.Drawing.Image"/> object from a graphics file SampImag.jpg in the example directory.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Graphics"/> object from the <see cref="T:System.Drawing.Image"/> object.</term>
          </item>
          <item>
            <term>Alters the image by filling a rectangle within it.</term>
          </item>
          <item>
            <term>Draws the <see cref="T:System.Drawing.Image"/> object to the screen.</term>
          </item>
          <item>
            <term>Releases the created <see cref="T:System.Drawing.Graphics"/> object.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FromImageImage(e As PaintEventArgs)
&apos; Create image.
Dim imageFile As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create graphics object for alteration.
Dim newGraphics As Graphics = Graphics.FromImage(imageFile)
&apos; Alter image.
newGraphics.FillRectangle(New SolidBrush(Color.Black), 100, _
50, 100, 100)
&apos; Draw image to screen.
e.Graphics.DrawImage(imageFile, New PointF(0F, 0F))
&apos; Dispose of graphics object.
newGraphics.Dispose()
End Sub
        </code>
        <code lang="C#">public void FromImageImage(PaintEventArgs e)
{
// Create image.
Image imageFile = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create graphics object for alteration.
Graphics newGraphics = Graphics.FromImage(imageFile);
// Alter image.
newGraphics.FillRectangle(new SolidBrush(Color.Black), 100, 50, 100, 100);
// Draw image to screen.
e.Graphics.DrawImage(imageFile, new PointF(0.0F, 0.0F));
// Release graphics object.
newGraphics.Dispose();
}
        </code>
      </example>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Graphics"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <overload>
        Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.
      </overload>
      <summary>
        <para>Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the arc.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the rectangle that defines the ellipse.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the rectangle that defines the ellipse.
      </param>
      <param name="width">
        Width of the rectangle that defines the ellipse.
      </param>
      <param name="height">
        Height of the rectangle that defines the ellipse.
      </param>
      <param name="startAngle">
        Angle in degrees measured clockwise from the x-axis to the starting point of the arc.
      </param>
      <param name="sweepAngle">
        Angle in degrees measured clockwise from the <paramref name="startAngle"/> parameter to ending point of the arc.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the position and size of a rectangle to bound an ellipse.</term>
          </item>
          <item>
            <term>Defines the start (45 degrees) and sweep (270 degrees) angles.</term>
          </item>
          <item>
            <term>Draws the elliptical arc to the screen.</term>
          </item>
        </list>
        <para>The result is a partial ellipse missing a segment between + and - 45 degrees of the x axis.</para>
        <code lang="VB">Public Sub DrawArcInt(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create coordinates of rectangle to bound ellipse.
Dim x As Integer = 0
Dim y As Integer = 0
Dim width As Integer = 100
Dim height As Integer = 200
&apos; Create start and sweep angles on ellipse.
Dim startAngle As Integer = 45
Dim sweepAngle As Integer = 270
&apos; Draw arc to screen.
e.Graphics.DrawArc(blackPen, x, y, width, height, startAngle, _
sweepAngle)
End Sub
        </code>
        <code lang="C#">public void DrawArcInt(PaintEventArgs e)
{
// Create pen.
Pen blackPen= new Pen(Color.Black, 3);
// Create coordinates of rectangle to bound ellipse.
int x = 0;
int y = 0;
int width = 100;
int height = 200;
// Create start and sweep angles on ellipse.
int startAngle =  45;
int sweepAngle = 270;
// Draw arc to screen.
e.Graphics.DrawArc(blackPen, x, y, width, height, startAngle, sweepAngle);
}
        </code>
      </example>
      <remarks>
        <para>This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the <paramref name="startAngle"/> parameter and the <paramref name="startAngle"/> <paramref name="+ sweepAngle"/> parameters.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)">
      <summary>
        <para>Draws an arc representing a portion of an ellipse specified by a <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the arc.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF"/> structure that defines the boundaries of the ellipse.
      </param>
      <param name="startAngle">
        Angle in degrees measured clockwise from the x-axis to the starting point of the arc.
      </param>
      <param name="sweepAngle">
        Angle in degrees measured clockwise from the <paramref name="startAngle"/> parameter to ending point of the arc.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates a rectangle to bound an ellipse.</term>
          </item>
          <item>
            <term>Defines the start (45 degrees) and sweep (270 degrees) angles.</term>
          </item>
          <item>
            <term>Draws the elliptical arc to the screen.</term>
          </item>
        </list>
        <para>The result is a partial ellipse missing a segment between + and - 45 degrees of the x axis.</para>
        <code lang="VB">Public Sub DrawArcRectangle(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create rectangle to bound ellipse.
Dim rect As New Rectangle(0, 0, 100, 200)
&apos; Create start and sweep angles on ellipse.
Dim startAngle As Single = 45F
Dim sweepAngle As Single = 270F
&apos; Draw arc to screen.
e.Graphics.DrawArc(blackPen, rect, startAngle, sweepAngle)
End Sub
        </code>
        <code lang="C#">public void DrawArcRectangle(PaintEventArgs e)
{
// Create pen.
Pen blackPen= new Pen(Color.Black, 3);
// Create rectangle to bound ellipse.
Rectangle rect = new Rectangle( 0, 0, 100, 200);
// Create start and sweep angles on ellipse.
float startAngle =  45.0F;
float sweepAngle = 270.0F;
// Draw arc to screen.
e.Graphics.DrawArc(blackPen, rect, startAngle, sweepAngle);
}
        </code>
      </example>
      <remarks>
        <para>This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the <paramref name="startAngle"/> parameter and the <paramref name="startAngle"/> <paramref name="+ sweepAngle"/> parameters.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
      <summary>
        <para>Draws an arc representing a portion of an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the arc.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF"/> structure that defines the boundaries of the ellipse.
      </param>
      <param name="startAngle">
        Angle in degrees measured clockwise from the x-axis to the starting point of the arc.
      </param>
      <param name="sweepAngle">
        Angle in degrees measured clockwise from the <paramref name="startAngle"/> parameter to ending point of the arc.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates a rectangle to bound an ellipse.</term>
          </item>
          <item>
            <term>Defines the start (45 degrees) and sweep (270 degrees) angles.</term>
          </item>
          <item>
            <term>Draws the elliptical arc to the screen.</term>
          </item>
        </list>
        <para>The result is a partial ellipse missing a segment between + and - 45 degrees of the x axis.</para>
        <code lang="VB">Public Sub DrawArcRectangleF(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create rectangle to bound ellipse.
Dim rect As New RectangleF(0F, 0F, 100F, 200F)
&apos; Create start and sweep angles on ellipse.
Dim startAngle As Single = 45F
Dim sweepAngle As Single = 270F
&apos; Draw arc to screen.
e.Graphics.DrawArc(blackPen, rect, startAngle, sweepAngle)
End Sub
        </code>
        <code lang="C#">public void DrawArcRectangleF(PaintEventArgs e)
{
// Create pen.
Pen blackPen= new Pen(Color.Black, 3);
// Create rectangle to bound ellipse.
RectangleF rect = new RectangleF( 0.0F, 0.0F, 100.0F, 200.0F);
// Create start and sweep angles on ellipse.
float startAngle =  45.0F;
float sweepAngle = 270.0F;
// Draw arc to screen.
e.Graphics.DrawArc(blackPen, rect, startAngle, sweepAngle);
}
        </code>
      </example>
      <remarks>
        <para>This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the <paramref name="startAngle"/> parameter and the <paramref name="startAngle"/> <paramref name="+ sweepAngle"/> parameters.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the arc.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the rectangle that defines the ellipse.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the rectangle that defines the ellipse.
      </param>
      <param name="width">
        Width of the rectangle that defines the ellipse.
      </param>
      <param name="height">
        Height of the rectangle that defines the ellipse.
      </param>
      <param name="startAngle">
        Angle in degrees measured clockwise from the x-axis to the starting point of the arc.
      </param>
      <param name="sweepAngle">
        Angle in degrees measured clockwise from the <paramref name="startAngle"/> parameter to ending point of the arc.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the position and size of a rectangle to bound an ellipse.</term>
          </item>
          <item>
            <term>Defines the start (45 degrees) and sweep (270 degrees) angles.</term>
          </item>
          <item>
            <term>Draws the elliptical arc to the screen.</term>
          </item>
        </list>
        <para>The result is a partial ellipse missing a segment between + and - 45 degrees of the x axis.</para>
        <code lang="VB">Public Sub DrawArcFloat(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create coordinates of rectangle to bound ellipse.
Dim x As Single = 0F
Dim y As Single = 0F
Dim width As Single = 100F
Dim height As Single = 200F
&apos; Create start and sweep angles on ellipse.
Dim startAngle As Single = 45F
Dim sweepAngle As Single = 270F
&apos; Draw arc to screen.
e.Graphics.DrawArc(blackPen, x, y, width, height, startAngle, _
sweepAngle)
End Sub
        </code>
        <code lang="C#">public void DrawArcFloat(PaintEventArgs e)
{
// Create pen.
Pen blackPen= new Pen(Color.Black, 3);
// Create coordinates of rectangle to bound ellipse.
float x = 0.0F;
float y = 0.0F;
float width = 100.0F;
float height = 200.0F;
// Create start and sweep angles on ellipse.
float startAngle =  45.0F;
float sweepAngle = 270.0F;
// Draw arc to screen.
e.Graphics.DrawArc(blackPen, x, y, width, height, startAngle, sweepAngle);
}
        </code>
      </example>
      <remarks>
        <para>This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the <paramref name="startAngle"/> parameter and the <paramref name="startAngle"/> <paramref name="+ sweepAngle"/> parameters.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
      <overload>
        Draws a B&#233;zier spline defined by four <see cref="T:System.Drawing.Point"/> structures.
      </overload>
      <summary>
        <para>Draws a B&#233;zier spline defined by four <see cref="T:System.Drawing.Point"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> structure that determines the color, width, and style of the curve.
      </param>
      <param name="pt1">
        <see cref="T:System.Drawing.Point"/> structure that represents the starting point of the curve.
      </param>
      <param name="pt2">
        <see cref="T:System.Drawing.Point"/> structure that represents the first control point for the curve.
      </param>
      <param name="pt3">
        <see cref="T:System.Drawing.Point"/> structure that represents the second control point for the curve.
      </param>
      <param name="pt4">
        <see cref="T:System.Drawing.Point"/> structure that represents the ending point of the curve.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the start, end, and two control points for the curve.</term>
          </item>
          <item>
            <term>Draws the B&#233;zier<paramref name=" "/> curve to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawBezierPoint(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create points for curve.
Dim start As New Point(100, 100)
Dim control1 As New Point(200, 10)
Dim control2 As New Point(350, 50)
Dim [end] As New Point(500, 100)
&apos; Draw arc to screen.
e.Graphics.DrawBezier(blackPen, start, control1, control2, [end])
End Sub
        </code>
        <code lang="C#">public void DrawBezierPoint(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create points for curve.
Point start = new Point(100, 100);
Point control1 = new Point(200, 10);
Point control2 = new Point(350, 50);
Point end = new Point(500, 100);
// Draw arc to screen.
e.Graphics.DrawBezier(blackPen, start, control1, control2, end);
}
        </code>
      </example>
      <remarks>
        <para>The B&#233;zier curve is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
        <para>Draws a B&#233;zier spline defined by four <see cref="T:System.Drawing.PointF"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the curve.
      </param>
      <param name="pt1">
        <see cref="T:System.Drawing.PointF"/> structure that represents the starting point of the curve.
      </param>
      <param name="pt2">
        <see cref="T:System.Drawing.PointF"/> structure that represents the first control point for the curve.
      </param>
      <param name="pt3">
        <see cref="T:System.Drawing.PointF"/> structure that represents the second control point for the curve.
      </param>
      <param name="pt4">
        <see cref="T:System.Drawing.PointF"/> structure that represents the ending point of the curve.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the start, end, and two control points for the curve.</term>
          </item>
          <item>
            <term>Draws the B&#233;zier curve to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawBezierPointF(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create points for curve.
Dim start As New PointF(100F, 100F)
Dim control1 As New PointF(200F, 10F)
Dim control2 As New PointF(350F, 50F)
Dim [end] As New PointF(500F, 100F)
&apos; Draw arc to screen.
e.Graphics.DrawBezier(blackPen, start, control1, control2, [end])
End Sub
        </code>
        <code lang="C#">public void DrawBezierPointF(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create points for curve.
PointF start = new PointF(100.0F, 100.0F);
PointF control1 = new PointF(200.0F, 10.0F);
PointF control2 = new PointF(350.0F, 50.0F);
PointF end = new PointF(500.0F, 100.0F);
// Draw arc to screen.
e.Graphics.DrawBezier(blackPen, start, control1, control2, end);
}
        </code>
      </example>
      <remarks>
        <para>The B&#233;zier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Draws a B&#233;zier spline defined by four ordered pairs of coordinates that represent points.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the curve.
      </param>
      <param name="x1">
        x-coordinate of the starting point of the curve.
      </param>
      <param name="y1">
        y-coordinate of the starting point of the curve.
      </param>
      <param name="x2">
        x-coordinate of the first control point of the curve.
      </param>
      <param name="y2">
        y-coordinate of the first control point of the curve.
      </param>
      <param name="x3">
        x-coordinate of the second control point of the curve.
      </param>
      <param name="y3">
        y-coordinate of the second control point of the curve.
      </param>
      <param name="x4">
        x-coordinate of the ending point of the curve.
      </param>
      <param name="y4">
        y-coordinate of the ending point of the curve.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the coordinates of the start, end, and two control points for the curve.</term>
          </item>
          <item>
            <term>Draws the B&#233;zier curve to the screen.</term>
          </item>
        </list>
        <code lang="VB">&apos; Begin Example03.
Public Sub DrawBezierFloat(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create coordinates of points for curve.
Dim startX As Single = 100F
Dim startY As Single = 100F
Dim controlX1 As Single = 200F
Dim controlY1 As Single = 10F
Dim controlX2 As Single = 350F
Dim controlY2 As Single = 50F
Dim endX As Single = 500F
Dim endY As Single = 100F
&apos; Draw arc to screen.
e.Graphics.DrawBezier(blackPen, startX, startY, controlX1, _
controlY1, controlX2, controlY2, endX, endY)
End Sub
        </code>
        <code lang="C#">public void DrawBezierFloat(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create coordinates of points for curve.
float startX = 100.0F;
float startY = 100.0F;
float controlX1 = 200.0F;
float controlY1 =  10.0F;
float controlX2 = 350.0F;
float controlY2 =  50.0F;
float endX = 500.0F;
float endY = 100.0F;
// Draw arc to screen.
e.Graphics.DrawBezier(blackPen, startX, startY,
controlX1, controlY1,
controlX2, controlY2,
endX, endY);
}
        </code>
      </example>
      <remarks>
        <para>The B&#233;zier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])">
      <overload>
        Draws a series of B&#233;zier splines from an array of <see cref="T:System.Drawing.Point"/> structures.
      </overload>
      <summary>
        <para>Draws a series of B&#233;zier splines from an array of <see cref="T:System.Drawing.Point"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the curve.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.Point"/> structures that represent the points that determine the curve.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the start, end, and two control points for a first curve and end point and two control points for a second curve.</term>
          </item>
          <item>
            <term>Draws the successive B&#233;zier curves to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawBeziersPoint(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create points for curve.
Dim start As New Point(100, 100)
Dim control1 As New Point(200, 10)
Dim control2 As New Point(350, 50)
Dim end1 As New Point(500, 100)
Dim control3 As New Point(600, 150)
Dim control4 As New Point(650, 250)
Dim end2 As New Point(500, 300)
Dim bezierPoints As Point() =  {start, control1, control2, _
end1, control3, control4, end2}
&apos; Draw arc to screen.
e.Graphics.DrawBeziers(blackPen, bezierPoints)
End Sub
        </code>
        <code lang="C#">public void DrawBeziersPoint(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create points for curve.
Point start = new Point(100, 100);
Point control1 = new Point(200, 10);
Point control2 = new Point(350, 50);
Point end1 = new Point(500, 100);
Point control3 = new Point(600, 150);
Point control4 = new Point(650, 250);
Point end2 = new Point(500, 300);
Point[] bezierPoints =
{
start, control1, control2, end1,
control3, control4, end2
};
// Draw arc to screen.
e.Graphics.DrawBeziers(blackPen, bezierPoints);
}
        </code>
      </example>
      <remarks>
        <para>The first B&#233;zier spline is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">
      <summary>
        <para>Draws a series of B&#233;zier splines from an array of <see cref="T:System.Drawing.PointF"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the curve.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that represent the points that determine the curve.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the start, end, and two control points for a first curve and end point and two control points for a second curve.</term>
          </item>
          <item>
            <term>Draws the successive B&#233;zier curves to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawBeziersPointF(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create points for curve.
Dim start As New PointF(100F, 100F)
Dim control1 As New PointF(200F, 10F)
Dim control2 As New PointF(350F, 50F)
Dim end1 As New PointF(500F, 100F)
Dim control3 As New PointF(600F, 150F)
Dim control4 As New PointF(650F, 250F)
Dim end2 As New PointF(500F, 300F)
Dim bezierPoints As PointF() =  {start, control1, control2, _
end1, control3, control4, end2}
&apos; Draw arc to screen.
e.Graphics.DrawBeziers(blackPen, bezierPoints)
End Sub
        </code>
        <code lang="C#">public void DrawBeziersPointF(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create points for curve.
PointF start = new PointF(100.0F, 100.0F);
PointF control1 = new PointF(200.0F, 10.0F);
PointF control2 = new PointF(350.0F, 50.0F);
PointF end1 = new PointF(500.0F, 100.0F);
PointF control3 = new PointF(600.0F, 150.0F);
PointF control4 = new PointF(650.0F, 250.0F);
PointF end2 = new PointF(500.0F, 300.0F);
PointF[] bezierPoints =
{
start, control1, control2, end1,
control3, control4, end2
};
// Draw arc to screen.
e.Graphics.DrawBeziers(blackPen, bezierPoints);
}
        </code>
      </example>
      <remarks>
        <para>The first B&#233;zier curve is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])">
      <overload>
        Draws a closed cardinal spline defined by an array of <see cref="T:System.Drawing.Point"/> structures.
      </overload>
      <summary>
        <para>Draws a closed cardinal spline defined by an array of <see cref="T:System.Drawing.Point"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and height of the curve.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.Point"/> structures that define the spline.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates red and green pens.</term>
          </item>
          <item>
            <term>Creates seven points to define a curve.</term>
          </item>
          <item>
            <term>Draws seven red straight lines between the seven points to form a closed polygon.</term>
          </item>
          <item>
            <term>Draws a green closed curve through the seven points.</term>
          </item>
        </list>
        <para>The method uses a default tension of 0.5.</para>
        <code lang="VB">Public Sub DrawClosedCurvePoint(e As PaintEventArgs)
&apos; Create pens.
Dim redPen As New Pen(Color.Red, 3)
Dim greenPen As New Pen(Color.Green, 3)
&apos; Create points that define curve.
Dim point1 As New Point(50, 50)
Dim point2 As New Point(100, 25)
Dim point3 As New Point(200, 5)
Dim point4 As New Point(250, 50)
Dim point5 As New Point(300, 100)
Dim point6 As New Point(350, 200)
Dim point7 As New Point(250, 250)
Dim curvePoints As Point() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints)
&apos; Draw closed curve to screen.
e.Graphics.DrawClosedCurve(greenPen, curvePoints)
End Sub
        </code>
        <code lang="C#">public void DrawClosedCurvePoint(PaintEventArgs e)
{
// Create pens.
Pen redPen   = new Pen(Color.Red, 3);
Pen greenPen = new Pen(Color.Green, 3);
// Create points that define curve.
Point point1 = new Point( 50,  50);
Point point2 = new Point(100,  25);
Point point3 = new Point(200,   5);
Point point4 = new Point(250,  50);
Point point5 = new Point(300, 100);
Point point6 = new Point(350, 200);
Point point7 = new Point(250, 250);
Point[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints);
// Draw closed curve to screen.
e.Graphics.DrawClosedCurve(greenPen, curvePoints);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close the figure.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.Point"/> structures.</para>
        <para>This method uses a default tension of 0.5.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)">
      <summary>
        <para>Draws a closed cardinal spline defined by an array of <see cref="T:System.Drawing.Point"/> structures using a specified tension.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and height of the curve.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.Point"/> structures that define the spline.
      </param>
      <param name="tension">
        Value greater than or equal to 0.0F that specifies the tension of the curve.
      </param>
      <param name="fillmode">
        Member of the <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration that determines how the curve is filled. This parameter is required but ignored.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates red and green pens.</term>
          </item>
          <item>
            <term>Creates seven points to define the curve.</term>
          </item>
          <item>
            <term>Draws seven red straight lines between the seven points to form a polygon.</term>
          </item>
          <item>
            <term>Creates tension and fill mode settings.</term>
          </item>
          <item>
            <term>Draws a green closed curve through the seven points.</term>
          </item>
        </list>
        <para>The method uses the a tension of 1.0 and sets the fill mode to <see langword="FillMode.Alternate"/>.</para>
        <code lang="VB">Public Sub DrawClosedCurvePointTension(e As PaintEventArgs)
&apos; Create pens.
Dim redPen As New Pen(Color.Red, 3)
Dim greenPen As New Pen(Color.Green, 3)
&apos; Create points that define curve.
Dim point1 As New Point(50, 50)
Dim point2 As New Point(100, 25)
Dim point3 As New Point(200, 5)
Dim point4 As New Point(250, 50)
Dim point5 As New Point(300, 100)
Dim point6 As New Point(350, 200)
Dim point7 As New Point(250, 250)
Dim curvePoints As Point() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints)
&apos; Create tension and fill mode.
Dim tension As Single = 1F
Dim aFillMode As FillMode = FillMode.Alternate
&apos; Draw closed curve to screen.
e.Graphics.DrawClosedCurve(greenPen, curvePoints, tension, _
aFillMode)
End Sub
        </code>
        <code lang="C#">public void DrawClosedCurvePointTension(PaintEventArgs e)
{
// Create pens.
Pen redPen   = new Pen(Color.Red, 3);
Pen greenPen = new Pen(Color.Green, 3);
// Create points that define curve.
Point point1 = new Point( 50,  50);
Point point2 = new Point(100,  25);
Point point3 = new Point(200,   5);
Point point4 = new Point(250,  50);
Point point5 = new Point(300, 100);
Point point6 = new Point(350, 200);
Point point7 = new Point(250, 250);
Point[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints);
// Create tension and fill mode.
float tension = 1.0F;
FillMode aFillMode = FillMode.Alternate;
// Draw closed curve to screen.
e.Graphics.DrawClosedCurve(greenPen, curvePoints, tension, aFillMode);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.Point"/> structures.</para>
        <para>The <paramref name="tension"/> parameter determines the shape of the spline. If the value of the <paramref name="tension"/> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension"/> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])">
      <summary>
        <para>Draws a closed cardinal spline defined by an array of <see cref="T:System.Drawing.PointF"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and height of the curve.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that define the spline.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code preforms the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates red and green pens.</term>
          </item>
          <item>
            <term>Creates seven points to define a curve.</term>
          </item>
          <item>
            <term>Draws seven red straight lines between the seven points to form a closed polygon.</term>
          </item>
          <item>
            <term>Draws a green closed curve through the seven points.</term>
          </item>
        </list>
        <para>The method uses a default tension of 0.5.</para>
        <code lang="VB">Public Sub DrawClosedCurvePointF(e As PaintEventArgs)
&apos; Create pens.
Dim redPen As New Pen(Color.Red, 3)
Dim greenPen As New Pen(Color.Green, 3)
&apos; Create points that define curve.
Dim point1 As New PointF(50F, 50F)
Dim point2 As New PointF(100F, 25F)
Dim point3 As New PointF(200F, 5F)
Dim point4 As New PointF(250F, 50F)
Dim point5 As New PointF(300F, 100F)
Dim point6 As New PointF(350F, 200F)
Dim point7 As New PointF(250F, 250F)
Dim curvePoints As PointF() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints)
&apos; Draw closed curve to screen.
e.Graphics.DrawClosedCurve(greenPen, curvePoints)
End Sub
        </code>
        <code lang="C#">public void DrawClosedCurvePointF(PaintEventArgs e)
{
// Create pens.
Pen redPen   = new Pen(Color.Red, 3);
Pen greenPen = new Pen(Color.Green, 3);
// Create points that define curve.
PointF point1 = new PointF( 50.0F,  50.0F);
PointF point2 = new PointF(100.0F,  25.0F);
PointF point3 = new PointF(200.0F,   5.0F);
PointF point4 = new PointF(250.0F,  50.0F);
PointF point5 = new PointF(300.0F, 100.0F);
PointF point6 = new PointF(350.0F, 200.0F);
PointF point7 = new PointF(250.0F, 250.0F);
PointF[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints);
// Draw closed curve to screen.
e.Graphics.DrawClosedCurve(greenPen, curvePoints);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.PointF"/> structures.</para>
        <para>This method uses a default tension of 0.5.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)">
      <summary>
        <para>Draws a closed cardinal spline defined by an array of <see cref="T:System.Drawing.PointF"/> structures using a specified tension.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and height of the curve.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that define the spline.
      </param>
      <param name="tension">
        Value greater than or equal to 0.0F that specifies the tension of the curve.
      </param>
      <param name="fillmode">
        Member of the <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration that determines how the curve is filled. This parameter is required but is ignored.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>creates red and green pens.</term>
          </item>
          <item>
            <term>Creates seven points to define the curve.</term>
          </item>
          <item>
            <term>Draws seven red straight lines between the seven points to form a polygon.</term>
          </item>
          <item>
            <term>Creates tension and fill mode settings.</term>
          </item>
          <item>
            <term>Draws a green closed curve through the seven points.</term>
          </item>
        </list>
        <para>The method uses the a tension of 1.0 and sets the fill mode to <see langword="FillMode.Alternate"/>.</para>
        <code lang="VB">Public Sub DrawClosedCurvePointFTension(e As PaintEventArgs)
&apos; Create pens.
Dim redPen As New Pen(Color.Red, 3)
Dim greenPen As New Pen(Color.Green, 3)
&apos; Create points that define curve.
Dim point1 As New PointF(50F, 50F)
Dim point2 As New PointF(100F, 25F)
Dim point3 As New PointF(200F, 5F)
Dim point4 As New PointF(250F, 50F)
Dim point5 As New PointF(300F, 100F)
Dim point6 As New PointF(350F, 200F)
Dim point7 As New PointF(250F, 250F)
Dim curvePoints As PointF() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints)
&apos; Create tension and fill mode.
Dim tension As Single = 1F
Dim aFillMode As FillMode = FillMode.Alternate
&apos; Draw closed curve to screen.
e.Graphics.DrawClosedCurve(greenPen, curvePoints, tension, _
aFillMode)
End Sub
        </code>
        <code lang="C#">public void DrawClosedCurvePointFTension(PaintEventArgs e)
{
// Create pens.
Pen redPen   = new Pen(Color.Red, 3);
Pen greenPen = new Pen(Color.Green, 3);
// Create points that define curve.
PointF point1 = new PointF( 50.0F,  50.0F);
PointF point2 = new PointF(100.0F,  25.0F);
PointF point3 = new PointF(200.0F,   5.0F);
PointF point4 = new PointF(250.0F,  50.0F);
PointF point5 = new PointF(300.0F, 100.0F);
PointF point6 = new PointF(350.0F, 200.0F);
PointF point7 = new PointF(250.0F, 250.0F);
PointF[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints);
// Create tension and fill mode.
float tension = 1.0F;
FillMode aFillMode = FillMode.Alternate;
// Draw closed curve to screen.
e.Graphics.DrawClosedCurve(greenPen, curvePoints, tension, aFillMode);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.PointF"/> structures.</para>
        <para>The <paramref name="tension"/> parameter determines the shape of the spline. If the value of the <paramref name="tension"/> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension"/> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])">
      <overload>
        Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.Point"/> structures.
      </overload>
      <summary>
        <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.Point"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and height of the curve.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.Point"/> structures that define the spline.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates red and green pens.</term>
          </item>
          <item>
            <term>Creates seven points to define a curve.</term>
          </item>
          <item>
            <term>Draws six red straight lines between the seven points to form an incomplete polygon.</term>
          </item>
          <item>
            <term>Draws an open green curve through the seven points.</term>
          </item>
        </list>
        <para>The method uses a default tension of 0.5.</para>
        <code lang="VB">Public Sub DrawCurvePoint(e As PaintEventArgs)
&apos; Create pens.
Dim redPen As New Pen(Color.Red, 3)
Dim greenPen As New Pen(Color.Green, 3)
&apos; Create points that define curve.
Dim point1 As New Point(50, 50)
Dim point2 As New Point(100, 25)
Dim point3 As New Point(200, 5)
Dim point4 As New Point(250, 50)
Dim point5 As New Point(300, 100)
Dim point6 As New Point(350, 200)
Dim point7 As New Point(250, 250)
Dim curvePoints As Point() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints)
&apos; Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints)
End Sub
        </code>
        <code lang="C#">public void DrawCurvePoint(PaintEventArgs e)
{
// Create pens.
Pen redPen   = new Pen(Color.Red, 3);
Pen greenPen = new Pen(Color.Green, 3);
// Create points that define curve.
Point point1 = new Point( 50,  50);
Point point2 = new Point(100,  25);
Point point3 = new Point(200,   5);
Point point4 = new Point(250,  50);
Point point5 = new Point(300, 100);
Point point6 = new Point(350, 200);
Point point7 = new Point(250, 250);
Point[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints);
// Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a cardinal spline that passes through each point in the array.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.Point"/> structures.</para>
        <para>This method uses a default tension of 0.5.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)">
      <summary>
        <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.Point"/> structures using a specified tension.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and height of the curve.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.Point"/> structures  that define the spline.
      </param>
      <param name="offset">
        Offset from the first element in the array of the <paramref name="points"/> parameter to the starting point in the curve.
      </param>
      <param name="numberOfSegments">
        Number of segments after the starting point to include in the curve.
      </param>
      <param name="tension">
        Value greater than or equal to 0.0F that specifies the tension of the curve.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates red and green pens.</term>
          </item>
          <item>
            <term>Creates seven points to define a curve.</term>
          </item>
          <item>
            <term>Draws six red straight lines between the seven points to form an incomplete polygon.</term>
          </item>
          <item>
            <term>Defines the starting point offset and number of segments.</term>
          </item>
          <item>
            <term>Defines the tension.</term>
          </item>
          <item>
            <term>Draws an open green curve (starting at the third point) through the last five points.</term>
          </item>
        </list>
        <para>The method sets the tension to 1.0.</para>
        <code lang="VB">Public Sub DrawCurvePointSegmentTension(e As PaintEventArgs)
&apos; Create pens.
Dim redPen As New Pen(Color.Red, 3)
Dim greenPen As New Pen(Color.Green, 3)
&apos; Create points that define curve.
Dim point1 As New Point(50, 50)
Dim point2 As New Point(100, 25)
Dim point3 As New Point(200, 5)
Dim point4 As New Point(250, 50)
Dim point5 As New Point(300, 100)
Dim point6 As New Point(350, 200)
Dim point7 As New Point(250, 250)
Dim curvePoints As Point() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints)
&apos; Create offset, number of segments, and tension.
Dim offset As Integer = 2
Dim numSegments As Integer = 4
Dim tension As Single = 1F
&apos; Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints, offset, numSegments, _
tension)
End Sub
        </code>
        <code lang="C#">public void DrawCurvePointSegmentTension(PaintEventArgs e)
{
// Create pens.
Pen redPen   = new Pen(Color.Red, 3);
Pen greenPen = new Pen(Color.Green, 3);
// Create points that define curve.
Point point1 = new Point( 50,  50);
Point point2 = new Point(100,  25);
Point point3 = new Point(200,   5);
Point point4 = new Point(250,  50);
Point point5 = new Point(300, 100);
Point point6 = new Point(350, 200);
Point point7 = new Point(250, 250);
Point[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints);
// Create offset, number of segments, and tension.
int offset = 2;
int numSegments = 4;
float tension = 1.0F;
// Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints, offset, numSegments, tension);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a cardinal spline that passes through each point in the array.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.Point"/> structures.</para>
        <para>The value of the <paramref name="offset"/> parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.</para>
        <para>The value of the <paramref name="numberOfSegments "/>parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the <paramref name="numberOfSegments "/>parameter must be at least 1. The value of the <paramref name="offset"/> parameter plus the value of the <paramref name="numberOfSegments "/>parameter must be less than the number of elements in the array of the <paramref name="points"/> parameter.</para>
        <para>The <paramref name="tension"/> parameter determines the shape of the spline. If the value of the <paramref name="tension"/> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension"/> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)">
      <summary>
        <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.Point"/> structures using a specified tension.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and height of the curve.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.Point"/> structures that define the spline.
      </param>
      <param name="tension">
        Value greater than or equal to 0.0F that specifies the tension of the curve.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <para>creates red and green pens.</para>
        <list type="bullet">
          <item>
            <term>Creates seven points to define the curve.</term>
          </item>
          <item>
            <term>Draws six red straight lines between the seven points to form an incomplete polygon.</term>
          </item>
          <item>
            <term>Creates a tension setting.</term>
          </item>
          <item>
            <term>Draws an open green closed curve through the seven points.</term>
          </item>
        </list>
        <para>The method uses the a tension of 1.0.</para>
        <code lang="VB">Public Sub DrawCurvePointTension(e As PaintEventArgs)
&apos; Create pens.
Dim redPen As New Pen(Color.Red, 3)
Dim greenPen As New Pen(Color.Green, 3)
&apos; Create points that define curve.
Dim point1 As New Point(50, 50)
Dim point2 As New Point(100, 25)
Dim point3 As New Point(200, 5)
Dim point4 As New Point(250, 50)
Dim point5 As New Point(300, 100)
Dim point6 As New Point(350, 200)
Dim point7 As New Point(250, 250)
Dim curvePoints As Point() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints)
&apos; Create tension.
Dim tension As Single = 1F
&apos; Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints, tension)
End Sub
        </code>
        <code lang="C#">public void DrawCurvePointTension(PaintEventArgs e)
{
// Create pens.
Pen redPen   = new Pen(Color.Red, 3);
Pen greenPen = new Pen(Color.Green, 3);
// Create points that define curve.
Point point1 = new Point( 50,  50);
Point point2 = new Point(100,  25);
Point point3 = new Point(200,   5);
Point point4 = new Point(250,  50);
Point point5 = new Point(300, 100);
Point point6 = new Point(350, 200);
Point point7 = new Point(250, 250);
Point[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints);
// Create tension.
float tension = 1.0F;
// Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints, tension);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a cardinal spline that passes through each point in the array.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.Point"/> structures.</para>
        <para>The <paramref name="tension"/> parameter determines the shape of the spline. If the value of the <paramref name="tension"/> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension"/> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])">
      <summary>
        <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.PointF"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and height of the curve.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that define the spline.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates red and green pens.</term>
          </item>
          <item>
            <term>Creates seven points to define a curve.</term>
          </item>
          <item>
            <term>Draws six red straight lines between the seven points to form an incomplete polygon.</term>
          </item>
          <item>
            <term>Draws an open green curve through the seven points.</term>
          </item>
        </list>
        <para>The method uses a default tension of 0.5.</para>
        <code lang="VB">Public Sub DrawCurvePointF(e As PaintEventArgs)
&apos; Create pens.
Dim redPen As New Pen(Color.Red, 3)
Dim greenPen As New Pen(Color.Green, 3)
&apos; Create points that define curve.
Dim point1 As New PointF(50F, 50F)
Dim point2 As New PointF(100F, 25F)
Dim point3 As New PointF(200F, 5F)
Dim point4 As New PointF(250F, 50F)
Dim point5 As New PointF(300F, 100F)
Dim point6 As New PointF(350F, 200F)
Dim point7 As New PointF(250F, 250F)
Dim curvePoints As PointF() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints)
&apos; Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints)
End Sub
        </code>
        <code lang="C#">public void DrawCurvePointF(PaintEventArgs e)
{
// Create pens.
Pen redPen   = new Pen(Color.Red, 3);
Pen greenPen = new Pen(Color.Green, 3);
// Create points that define curve.
PointF point1 = new PointF( 50.0F,  50.0F);
PointF point2 = new PointF(100.0F,  25.0F);
PointF point3 = new PointF(200.0F,   5.0F);
PointF point4 = new PointF(250.0F,  50.0F);
PointF point5 = new PointF(300.0F, 100.0F);
PointF point6 = new PointF(350.0F, 200.0F);
PointF point7 = new PointF(250.0F, 250.0F);
PointF[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints);
// Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a cardinal spline that passes through each point in the array.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.PointF"/> structures.</para>
        <para>This method uses a default tension of 0.5.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)">
      <summary>
        <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.PointF"/> structures. The drawing begins offset from the beginning of the array.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and height of the curve.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that define the spline.
      </param>
      <param name="offset">
        Offset from the first element in the array of the <paramref name="points"/> parameter to the starting point in the curve.
      </param>
      <param name="numberOfSegments">
        Number of segments after the starting point to include in the curve.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates red and green pens.</term>
          </item>
          <item>
            <term>Creates seven points to define a curve.</term>
          </item>
          <item>
            <term>Draws six red straight lines between the seven points to form an incomplete polygon.</term>
          </item>
          <item>
            <term>Defines the starting point offset and number of segments.</term>
          </item>
          <item>
            <term>Draws an open green curve (starting at the third point) through the last five points.</term>
          </item>
        </list>
        <para>The method uses a default tension of 0.5.</para>
        <code lang="VB">Public Sub DrawCurvePointFSegments(e As PaintEventArgs)
&apos; Create pens.
Dim redPen As New Pen(Color.Red, 3)
Dim greenPen As New Pen(Color.Green, 3)
&apos; Create points that define curve.
Dim point1 As New PointF(50F, 50F)
Dim point2 As New PointF(100F, 25F)
Dim point3 As New PointF(200F, 5F)
Dim point4 As New PointF(250F, 50F)
Dim point5 As New PointF(300F, 100F)
Dim point6 As New PointF(350F, 200F)
Dim point7 As New PointF(250F, 250F)
Dim curvePoints As PointF() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints)
&apos; Create offset and number of segments.
Dim offset As Integer = 2
Dim numSegments As Integer = 4
&apos; Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints, offset, numSegments)
End Sub
        </code>
        <code lang="C#">public void DrawCurvePointFSegments(PaintEventArgs e)
{
// Create pens.
Pen redPen   = new Pen(Color.Red, 3);
Pen greenPen = new Pen(Color.Green, 3);
// Create points that define curve.
PointF point1 = new PointF( 50.0F,  50.0F);
PointF point2 = new PointF(100.0F,  25.0F);
PointF point3 = new PointF(200.0F,   5.0F);
PointF point4 = new PointF(250.0F,  50.0F);
PointF point5 = new PointF(300.0F, 100.0F);
PointF point6 = new PointF(350.0F, 200.0F);
PointF point7 = new PointF(250.0F, 250.0F);
PointF[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints);
// Create offset and number of segments.
int offset = 2;
int numSegments = 4;
// Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints, offset, numSegments);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a cardinal spline that passes through each point in the array.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.PointF"/> structures.</para>
        <para>The value of the <paramref name="offset"/> parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.</para>
        <para>The value of the <paramref name="numberOfSegments"/> parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the <paramref name="numberOfSegments"/> parameter must be at least 1. The value of the <paramref name="offset"/> parameter plus the value of the <paramref name="numberOfSegments"/> parameter must be less than the number of elements in the array of the <paramref name="points"/> parameter.</para>
        <para>This method uses a default tension of 0.5.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)">
      <summary>
        <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.PointF"/> structures using a specified tension. The drawing begins offset from the beginning of the array.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and height of the curve.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that define the spline.
      </param>
      <param name="offset">
        Offset from the first element in the array of the <paramref name="points"/> parameter to the starting point in the curve.
      </param>
      <param name="numberOfSegments">
        Number of segments after the starting point to include in the curve.
      </param>
      <param name="tension">
        Value greater than or equal to 0.0F that specifies the tension of the curve.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates red and green pens.</term>
          </item>
          <item>
            <term>Creates seven points to define a curve.</term>
          </item>
          <item>
            <term>Draws six red straight lines between the seven points to form an incomplete polygon.</term>
          </item>
          <item>
            <term>Defines the starting point offset and number of segments.</term>
          </item>
          <item>
            <term>Defines the tension.</term>
          </item>
          <item>
            <term>Draws an open green curve (starting at the third point) through the last five points.</term>
          </item>
        </list>
        <para>The method sets the tension to 1.0.</para>
        <code lang="VB">Public Sub DrawCurvePointFSegmentTension(e As PaintEventArgs)
&apos; Create pens.
Dim redPen As New Pen(Color.Red, 3)
Dim greenPen As New Pen(Color.Green, 3)
&apos; Create points that define curve.
Dim point1 As New PointF(50F, 50F)
Dim point2 As New PointF(100F, 25F)
Dim point3 As New PointF(200F, 5F)
Dim point4 As New PointF(250F, 50F)
Dim point5 As New PointF(300F, 100F)
Dim point6 As New PointF(350F, 200F)
Dim point7 As New PointF(250F, 250F)
Dim curvePoints As PointF() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints)
&apos; Create offset, number of segments, and tension.
Dim offset As Integer = 2
Dim numSegments As Integer = 4
Dim tension As Single = 1F
&apos; Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints, offset, numSegments, _
tension)
End Sub
        </code>
        <code lang="C#">public void DrawCurvePointFSegmentTension(PaintEventArgs e)
{
// Create pens.
Pen redPen   = new Pen(Color.Red, 3);
Pen greenPen = new Pen(Color.Green, 3);
// Create points that define curve.
PointF point1 = new PointF( 50.0F,  50.0F);
PointF point2 = new PointF(100.0F,  25.0F);
PointF point3 = new PointF(200.0F,   5.0F);
PointF point4 = new PointF(250.0F,  50.0F);
PointF point5 = new PointF(300.0F, 100.0F);
PointF point6 = new PointF(350.0F, 200.0F);
PointF point7 = new PointF(250.0F, 250.0F);
PointF[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints);
// Create offset, number of segments, and tension.
int offset = 2;
int numSegments = 4;
float tension = 1.0F;
// Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints, offset, numSegments, tension);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a cardinal spline that passes through each point in the array.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.PointF"/> structures.</para>
        <para>The value of the <paramref name="offset"/> parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.</para>
        <para>The value of the <paramref name="numberOfSegments"/> parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the <paramref name="numberOfSegments"/> parameter must be at least 1. The value of the <paramref name="offset"/> parameter plus the value of the <paramref name="numberOfSegments"/> parameter must be less than the number of elements in the array of the <paramref name="points"/> parameter.</para>
        <para>The <paramref name="tension"/> parameter determines the shape of the spline. If the value of the <paramref name="tension"/> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension"/> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)">
      <summary>
        <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.PointF"/> structures using a specified tension.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and height of the curve.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that represent the points that define the curve.
      </param>
      <param name="tension">
        Value greater than or equal to 0.0F that specifies the tension of the curve.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates red and green pens.</term>
          </item>
          <item>
            <term>Creates seven points to define the curve.</term>
          </item>
          <item>
            <term>Draws six red straight lines between the seven points to form an incomplete polygon.</term>
          </item>
          <item>
            <term>Creates a tension setting.</term>
          </item>
          <item>
            <term>Draws an open green closed curve through the seven points.</term>
          </item>
        </list>
        <para>The method uses a tension of 1.0.</para>
        <code lang="VB">Public Sub DrawCurvePointFTension(e As PaintEventArgs)
&apos; Create pens.
Dim redPen As New Pen(Color.Red, 3)
Dim greenPen As New Pen(Color.Green, 3)
&apos; Create points that define curve.
Dim point1 As New PointF(50F, 50F)
Dim point2 As New PointF(100F, 25F)
Dim point3 As New PointF(200F, 5F)
Dim point4 As New PointF(250F, 50F)
Dim point5 As New PointF(300F, 100F)
Dim point6 As New PointF(350F, 200F)
Dim point7 As New PointF(250F, 250F)
Dim curvePoints As PointF() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints)
&apos; Create tension.
Dim tension As Single = 1F
&apos; Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints, tension)
End Sub
        </code>
        <code lang="C#">public void DrawCurvePointFTension(PaintEventArgs e)
{
// Create pens.
Pen redPen   = new Pen(Color.Red, 3);
Pen greenPen = new Pen(Color.Green, 3);
// Create points that define curve.
PointF point1 = new PointF( 50.0F,  50.0F);
PointF point2 = new PointF(100.0F,  25.0F);
PointF point3 = new PointF(200.0F,   5.0F);
PointF point4 = new PointF(250.0F,  50.0F);
PointF point5 = new PointF(300.0F, 100.0F);
PointF point6 = new PointF(350.0F, 200.0F);
PointF point7 = new PointF(250.0F, 250.0F);
PointF[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw lines between original points to screen.
e.Graphics.DrawLines(redPen, curvePoints);
// Create tension.
float tension = 1.0F;
// Draw curve to screen.
e.Graphics.DrawCurve(greenPen, curvePoints, tension);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a cardinal spline that passes through each point in the array.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.PointF"/> structures.</para>
        <para>The <paramref name="tension"/> parameter determines the shape of the spline. If the value of the <paramref name="tension"/> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension"/> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
      <overload>
        Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.
      </overload>
      <summary>
        <para>Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the ellipse.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
      </param>
      <param name="width">
        Width of the bounding rectangle that defines the ellipse.
      </param>
      <param name="height">
        Height of the bounding rectangle that defines the ellipse.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the position and size of a rectangle to bound an ellipse.</term>
          </item>
          <item>
            <term>Draws the ellipse to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawEllipseInt(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create location and size of ellipse.
Dim x As Integer = 0
Dim y As Integer = 0
Dim width As Integer = 200
Dim height As Integer = 100
&apos; Draw ellipse to screen.
e.Graphics.DrawEllipse(blackPen, x, y, width, height)
End Sub
        </code>
        <code lang="C#">public void DrawEllipseInt(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create location and size of ellipse.
int x = 0;
int y = 0;
int width = 200;
int height = 100;
// Draw ellipse to screen.
e.Graphics.DrawEllipse(blackPen, x, y, width, height);
}
        </code>
      </example>
      <remarks>
        <para>This method draws an ellipse that is defined by the bounding rectangle described by the <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> parameters.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)">
      <summary>
        <para>Draws an ellipse specified by a bounding <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the ellipse.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle"/> structure that defines the boundaries of the ellipse.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates a rectangle to bound an ellipse.</term>
          </item>
          <item>
            <term>Draws the ellipse to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawEllipseRectangle(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create rectangle for ellipse.
Dim rect As New Rectangle(0, 0, 200, 100)
&apos; Draw ellipse to screen.
e.Graphics.DrawEllipse(blackPen, rect)
End Sub
        </code>
        <code lang="C#">public void DrawEllipseRectangle(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create rectangle for ellipse.
Rectangle rect = new Rectangle( 0, 0, 200, 100);
// Draw ellipse to screen.
e.Graphics.DrawEllipse(blackPen, rect);
}
        </code>
      </example>
      <remarks>
        <para>This method draws an ellipse that is defined by the bounding rectangle specified by the <paramref name="rect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)">
      <summary>
        <para>Draws an ellipse defined by a bounding <see cref="T:System.Drawing.RectangleF"/>.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the ellipse.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF"/> structure that defines the boundaries of the ellipse.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates a rectangle to bound an ellipse.</term>
          </item>
          <item>
            <term>Draws the ellipse to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawEllipseRectangleF(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create rectangle for ellipse.
Dim rect As New RectangleF(0F, 0F, 200F, 100F)
&apos; Draw ellipse to screen.
e.Graphics.DrawEllipse(blackPen, rect)
End Sub
        </code>
        <code lang="C#">public void DrawEllipseRectangleF(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create rectangle for ellipse.
RectangleF rect = new RectangleF( 0.0F, 0.0F, 200.0F, 100.0F);
// Draw ellipse to screen.
e.Graphics.DrawEllipse(blackPen, rect);
}
        </code>
      </example>
      <remarks>
        <para>This method draws an ellipse that is defined by the bounding rectangle specified by the <paramref name="rect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the ellipse.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
      </param>
      <param name="width">
        Width of the bounding rectangle that defines the ellipse.
      </param>
      <param name="height">
        Height of the bounding rectangle that defines the ellipse.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the position and size of a rectangle to bound an ellipse.</term>
          </item>
          <item>
            <term>Draws the ellipse to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawEllipseFloat(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create location and size of ellipse.
Dim x As Single = 0F
Dim y As Single = 0F
Dim width As Single = 200F
Dim height As Single = 100F
&apos; Draw ellipse to screen.
e.Graphics.DrawEllipse(blackPen, x, y, width, height)
End Sub
        </code>
        <code lang="C#">public void DrawEllipseFloat(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create location and size of ellipse.
float x = 0.0F;
float y = 0.0F;
float width = 200.0F;
float height = 100.0F;
// Draw ellipse to screen.
e.Graphics.DrawEllipse(blackPen, x, y, width, height);
}
        </code>
      </example>
      <remarks>
        <para>This method draws an ellipse that is defined by the bounding rectangle described by the <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> parameters.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)">
      <overload>
        Draws the image represented by the specified <see cref="T:System.Drawing.Icon"/> object at the specified coordinates.
      </overload>
      <summary>
        <para>Draws the image represented by the specified <see cref="T:System.Drawing.Icon"/> object at the specified coordinates.</para>
      </summary>
      <param name="icon">
        <see cref="T:System.Drawing.Icon"/> object to draw.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an icon from a standard Windows icon file SampIcon.ico in the example folder.</term>
          </item>
          <item>
            <term>Creates the coordinates of the upper-left corner at which to draw the icon.</term>
          </item>
          <item>
            <term>Draws the icon to the screen.</term>
          </item>
        </list>
        <para>The drawn icon is unscaled.</para>
        <code lang="VB">Public Sub DrawIconInt(e As PaintEventArgs)
&apos; Create icon.
Dim newIcon As New Icon(&quot;SampIcon.ico&quot;)
&apos; Create coordinates for upper-left corner of icon.
Dim x As Integer = 100
Dim y As Integer = 100
&apos; Draw icon to screen.
e.Graphics.DrawIcon(newIcon, x, y)
End Sub
        </code>
        <code lang="C#">public void DrawIconInt(PaintEventArgs e)
{
// Create icon.
Icon newIcon = new Icon(&quot;SampIcon.ico&quot;);
// Create coordinates for upper-left corner of icon.
int x = 100;
int y = 100;
// Draw icon to screen.
e.Graphics.DrawIcon(newIcon, x, y);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)">
      <summary>
        <para>Draws the image represented by the specified <see cref="T:System.Drawing.Icon"/> object within the area specified by a <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="icon">
        <see cref="T:System.Drawing.Icon"/> object to draw.
      </param>
      <param name="targetRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the resulting image on the display surface. The image contained in the <paramref name="icon"/> parameter is scaled to the dimensions of this rectangular area.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an icon from a standard Windows icon file SampIcon.ico in the example folder.</term>
          </item>
          <item>
            <term>Creates a rectangle in which to draw the icon.</term>
          </item>
          <item>
            <term>Draws the icon to the screen.</term>
          </item>
        </list>
        <para>The position of the rectangle locates the icon on the screen, and the size of the rectangle determines the scaling of the drawn icon.</para>
        <code lang="VB">Public Sub DrawIconRectangle(e As PaintEventArgs)
&apos; Create icon.
Dim newIcon As New Icon(&quot;SampIcon.ico&quot;)
&apos; Create rectangle for icon.
Dim rect As New Rectangle(100, 100, 200, 200)
&apos; Draw icon to screen.
e.Graphics.DrawIcon(newIcon, rect)
End Sub
        </code>
        <code lang="C#">public void DrawIconRectangle(PaintEventArgs e)
{
// Create icon.
Icon newIcon = new Icon(&quot;SampIcon.ico&quot;);
// Create rectangle for icon.
Rectangle rect = new Rectangle( 100, 100, 200, 200);
// Draw icon to screen.
e.Graphics.DrawIcon(newIcon, rect);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)">
      <summary>
        <para>Draws the image represented by the specified <see cref="T:System.Drawing.Icon"/> object without scaling the image.</para>
      </summary>
      <param name="icon">
        <see cref="T:System.Drawing.Icon"/> object to draw.
      </param>
      <param name="targetRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the resulting image. The image is not scaled to fit this rectangle, but retains its original size. If the image is larger than the rectangle, it is clipped to fit inside it.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an icon from a standard Windows icon file SampIcon.ico in the example folder.</term>
          </item>
          <item>
            <term>Creates a rectangle in which to draw the icon.</term>
          </item>
          <item>
            <term>Draws the icon to the screen.</term>
          </item>
        </list>
        <para>The position of the rectangle locates the icon on the screen, and the drawn icon is unscaled and unclipped.</para>
        <code lang="VB">Public Sub DrawIconUnstretchedRectangle(e As PaintEventArgs)
&apos; Create icon.
Dim newIcon As New Icon(&quot;SampIcon.ico&quot;)
&apos; Create rectangle for icon.
Dim rect As New Rectangle(100, 100, 200, 200)
&apos; Draw icon to screen.
e.Graphics.DrawIconUnstretched(newIcon, rect)
End Sub
        </code>
        <code lang="C#">public void DrawIconUnstretchedRectangle(PaintEventArgs e)
{
// Create icon.
Icon newIcon = new Icon(&quot;SampIcon.ico&quot;);
// Create rectangle for icon.
Rectangle rect = new Rectangle( 100, 100, 200, 200);
// Draw icon to screen.
e.Graphics.DrawIconUnstretched(newIcon, rect);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)">
      <overload>
        Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the original size.
      </overload>
      <summary>
        <para> Draws the specified image, using its original physical size, at the location specified by a coordinate pair.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates the coordinates of a point at which to draw the upper-left corner of the image.</term>
          </item>
          <item>
            <term>Draws the unscaled image.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawImage2Int(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create coordinates for upper-left corner of image.
Dim x As Integer = 100
Dim y As Integer = 100
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, x, y)
End Sub
        </code>
        <code lang="C#">
public void DrawImage2Int(PaintEventArgs e)
{
   // Create image.
   Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
   
   // Create coordinates for upper-left corner of image.
   int x = 100;
   int y = 100;
   
   // Draw image to screen.
   e.Graphics.DrawImage(newImage, x, y);
}
        </code>
      </example>
      <remarks>
        <para>An <see cref="T:System.Drawing.Image"/> object stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
        
        <para>The <see langword="DrawImage "/> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <see langword="DrawImage "/> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="width">
        Width of the drawn image.
      </param>
      <param name="height">
        Height of the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates the position and size of a rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The position of the rectangle locates the image on the screen, and the size of the original image and the size of the rectangle determines the scaling of the drawn image.</para>
        <code lang="VB">Public Sub DrawImage4Int(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create coordinates for upper-left corner
&apos; of image and for size of image.
Dim x As Integer = 100
Dim y As Integer = 100
Dim width As Integer = 450
Dim height As Integer = 150
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, x, y, width, height)
End Sub
        </code>
        <code lang="C#">public void DrawImage4Int(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create coordinates for upper-left corner.
// of image and for size of image.
int x = 100;
int y = 100;
int width = 450;
int height = 150;
// Draw image to screen.
e.Graphics.DrawImage(newImage, x, y, width, height);
}
        </code>
      </example>
      <remarks>
        <para>The rectangle defined by the <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> parameters determines the position and size of the drawn image.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Draws a portion of an image at a specified location.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the <paramref name="image"/> object to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used by the <paramref name="srcRect"/> parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <para>creates an image from a JPEG file SampImag.jpg in the folder of the example.</para>
        <list type="bullet">
          <item>
            <term>Creates the coordinates at which to draw the upper-left corner of the image.</term>
          </item>
          <item>
            <term>Creates a source rectangle from which to extract a portion of the image.</term>
          </item>
          <item>
            <term>Sets the unit of measure of the source rectangle to pixels.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The size of the source rectangle determines what portion of the unscaled original image is drawn to the screen.</para>
        <code lang="VB">Public Sub DrawImage2IntRect(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create coordinates for upper-left corner of image.
Dim x As Integer = 100
Dim y As Integer = 100
&apos; Create rectangle for source image.
Dim srcRect As New Rectangle(50, 50, 150, 150)
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, x, y, srcRect, units)
End Sub
        </code>
        <code lang="C#">public void DrawImage2IntRect(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create coordinates for upper-left corner of image.
int x = 100;
int y = 100;
// Create rectangle for source image.
Rectangle srcRect = new Rectangle( 50, 50, 150, 150);
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw image to screen.
e.Graphics.DrawImage(newImage, x, y, srcRect, units);
}
        </code>
      </example>
      <remarks>
        <para>An <see cref="T:System.Drawing.Image"/> object stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.</para>
        
        <para>This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.</para> 
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">
      <summary>
        <para>Draws the specified <see cref="T:System.Drawing.Image"/> object, using its original physical size, at the specified location.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="point">
        <see cref="T:System.Drawing.Point"/> structure that represents the location of the upper-left corner of the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates a point at which to draw the upper-left corner of the image.</term>
          </item>
          <item>
            <term>Draws the unscaled image to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawImagePoint(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create Point for upper-left corner of image.
Dim ulCorner As New Point(100, 100)
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, ulCorner)
End Sub
        </code>
        <code lang="C#">public void DrawImagePoint(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create Point for upper-left corner of image.
Point ulCorner = new Point( 100, 100);
// Draw image to screen.
e.Graphics.DrawImage(newImage, ulCorner);
}
        </code>
      </example>
	  <remarks>
        <para>An <see cref="T:System.Drawing.Image"/> object stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
        
        <para>This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
      </remarks>  
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])">
      <summary>
        <para>Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified shape and size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a parallelogram in which to draw the image.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The position of the parallelogram locates the image on the screen, and the size of the original image and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.</para>
        <code lang="VB">Public Sub DrawImagePara(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create parallelogram for drawing image.
Dim ulCorner As New Point(100, 100)
Dim urCorner As New Point(550, 100)
Dim llCorner As New Point(150, 250)
Dim destPara As Point() =  {ulCorner, urCorner, llCorner}
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, destPara)
End Sub
        </code>
        <code lang="C#">public void DrawImagePara(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create parallelogram for drawing image.
Point ulCorner = new Point(100, 100);
Point urCorner = new Point(550, 100);
Point llCorner = new Point(150, 250);
Point[] destPara = {ulCorner, urCorner, llCorner};
// Draw image to screen.
e.Graphics.DrawImage(newImage, destPara);
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
        <para>The image represented by the <paramref name="image"/> parameter is scaled and sheared to fit the shape of the parallelogram specified by the <paramref name="destPoints"/> parameters.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the <paramref name="image"/> object to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used by the <paramref name="srcRect"/> parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a parallelogram in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a rectangle to select the portion of the image to draw.</term>
          </item>
          <item>
            <term>Sets the graphics drawing unit to pixel.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The position of the parallelogram locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.</para>
        <code lang="VB">Public Sub DrawImageParaRect(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create parallelogram for drawing image.
Dim ulCorner As New Point(100, 100)
Dim urCorner As New Point(325, 100)
Dim llCorner As New Point(150, 250)
Dim destPara As Point() =  {ulCorner, urCorner, llCorner}
&apos; Create rectangle for source image.
Dim srcRect As New Rectangle(50, 50, 150, 150)
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, destPara, srcRect, units)
End Sub
        </code>
        <code lang="C#">public void DrawImageParaRect(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create parallelogram for drawing image.
Point ulCorner = new Point(100, 100);
Point urCorner = new Point(325, 100);
Point llCorner = new Point(150, 250);
Point[] destPara = {ulCorner, urCorner, llCorner};
// Create rectangle for source image.
Rectangle srcRect = new Rectangle( 50, 50, 150, 150);
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw image to screen.
e.Graphics.DrawImage(newImage, destPara, srcRect, units);
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
        <para>The <paramref name="srcRect"/> parameter specifies a rectangular portion of the <paramref name="image"/> object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the <paramref name="destPoints"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the <paramref name="image"/> object to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used by the <paramref name="srcRect "/>parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies recoloring and gamma information for the <paramref name="image"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a parallelogram in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a rectangle to select the portion of the image to draw.</term>
          </item>
          <item>
            <term>Sets the graphics drawing unit to pixel.</term>
          </item>
          <item>
            <term>Draws the original image to the screen.</term>
          </item>
          <item>
            <term>Creates an additional parallelogram in which to draw an adjusted image.</term>
          </item>
          <item>
            <term>Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.</term>
          </item>
          <item>
            <term>Draws the adjusted image to the screen.</term>
          </item>
        </list>
        <para>For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.</para>
        <code lang="VB">Public Sub DrawImageParaRectAttrib(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create parallelogram for drawing image.
Dim ulCorner1 As New Point(100, 100)
Dim urCorner1 As New Point(325, 100)
Dim llCorner1 As New Point(150, 250)
Dim destPara1 As Point() =  {ulCorner1, urCorner1, llCorner1}
&apos; Create rectangle for source image.
Dim srcRect As New Rectangle(50, 50, 150, 150)
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw original image to screen.
e.Graphics.DrawImage(newImage, destPara1, srcRect, units)
&apos; Create parallelogram for drawing adjusted image.
Dim ulCorner2 As New Point(325, 100)
Dim urCorner2 As New Point(550, 100)
Dim llCorner2 As New Point(375, 250)
Dim destPara2 As Point() =  {ulCorner2, urCorner2, llCorner2}
&apos; Create image attributes and set large gamma.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(4F)
&apos; Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destPara2, srcRect, units, _
imageAttr)
End Sub
        </code>
        <code lang="C#">public void DrawImageParaRectAttrib(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create parallelogram for drawing image.
Point ulCorner1 = new Point(100, 100);
Point urCorner1 = new Point(325, 100);
Point llCorner1 = new Point(150, 250);
Point[] destPara1 = {ulCorner1, urCorner1, llCorner1};
// Create rectangle for source image.
Rectangle srcRect = new Rectangle( 50, 50, 150, 150);
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw original image to screen.
e.Graphics.DrawImage(newImage, destPara1, srcRect, units);
// Create parallelogram for drawing adjusted image.
Point ulCorner2 = new Point(325, 100);
Point urCorner2 = new Point(550, 100);
Point llCorner2 = new Point(375, 250);
Point[] destPara2 = {ulCorner2, urCorner2, llCorner2};
// Create image attributes and set large gamma.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(4.0F);
// Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destPara2, srcRect, units, imageAttr);
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
        <para>The <paramref name="srcRect"/> parameter specifies a rectangular portion of the <paramref name="image"/> object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the <paramref name="destPoints"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the <paramref name="image"/> object to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used by the <paramref name="srcRect"/> parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies recoloring and gamma information for the <paramref name="image"/> object.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.DrawImageAbort"/> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see langword="DrawImage"/> method according to application-determined criteria.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code first defines a callback method for the <see langword="DrawImageAbort"/> delegate; the definition is simplistic and merely tests to see whether the <see langword="DrawImage"/> method calls it with a null <paramref name="callBackData"/> parameter. The main body of the example performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an instance of the <see langword="DrawImageAbort"/> callback method:</term>
          </item>
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a parallelogram in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a rectangle to select the portion of the image to draw.</term>
          </item>
          <item>
            <term>Sets the graphics drawing unit to pixel.</term>
          </item>
          <item>
            <term>Draws the original image to the screen.</term>
          </item>
          <item>
            <term>Creates an additional parallelogram in which to draw an adjusted image.</term>
          </item>
          <item>
            <term>Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.</term>
          </item>
          <item>
            <term>Draws the adjusted image to the screen.</term>
          </item>
        </list>
        <para>For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.</para>
        <para>Because this example uses an overload that does not pass a <paramref name="callBackData"/> parameter, the <see langword="DrawImageAbort"/> callback returns <see langword="true"/>, which causes the <see langword="DrawImage"/> method to abort, and the exception-handling code included in the example prints out the exception text rather than drawing the image.</para>
        <code lang="VB">Private Function DrawImageCallback(callBackData As IntPtr) As Boolean
&apos; Test for call that passes callBackData parameter.
If callBackData.Equals(IntPtr.Zero) Then
&apos; If no callBackData passed, abort DrawImage method.
Return True
Else
&apos; If callBackData passed, continue DrawImage method.
Return False
End If
End Function
Public Sub DrawImageParaRectAttribAbort(e As PaintEventArgs)
&apos; Create callback method.
Dim imageCallback As New _
Graphics.DrawImageAbort(AddressOf DrawImageCallback)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create parallelogram for drawing original image.
Dim ulCorner As New Point(100, 100)
Dim urCorner As New Point(550, 100)
Dim llCorner As New Point(150, 250)
Dim destPara1 As Point() =  {ulCorner, urCorner, llCorner}
&apos; Create rectangle for source image.
Dim srcRect As New Rectangle(50, 50, 150, 150)
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw original image to screen.
e.Graphics.DrawImage(newImage, destPara1, srcRect, units)
&apos; Create parallelogram for drawing adjusted image.
Dim ulCorner2 As New Point(325, 100)
Dim urCorner2 As New Point(550, 100)
Dim llCorner2 As New Point(375, 250)
Dim destPara2 As Point() =  {ulCorner2, urCorner2, llCorner2}
&apos; Create image attributes and set large gamma.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(4F)
Try
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, destPara2, srcRect, units, _
imageAttr, imageCallback)
Catch ex As Exception
e.Graphics.DrawString(ex.ToString(), New Font(&quot;Arial&quot;, 8), _
Brushes.Black, New PointF(0, 0))
End Try
End Sub
        </code>
        <code lang="C#">// Define DrawImageAbort callback method.
private bool DrawImageCallback(IntPtr callBackData)
{
// Test for call that passes callBackData parameter.
if(callBackData==IntPtr.Zero)
{
// If no callBackData passed, abort DrawImage method.
return true;
}
else
{
// If callBackData passed, continue DrawImage method.
return false;
}
}
public void DrawImageParaRectAttribAbort(PaintEventArgs e)
{
// Create callback method.
Graphics.DrawImageAbort imageCallback
= new Graphics.DrawImageAbort(DrawImageCallback);
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create parallelogram for drawing original image.
Point ulCorner = new Point(100, 100);
Point urCorner = new Point(550, 100);
Point llCorner = new Point(150, 250);
Point[] destPara1 = {ulCorner, urCorner, llCorner};
// Create rectangle for source image.
Rectangle srcRect = new Rectangle( 50, 50, 150, 150);
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw original image to screen.
e.Graphics.DrawImage(newImage, destPara1, srcRect, units);
// Create parallelogram for drawing adjusted image.
Point ulCorner2 = new Point(325, 100);
Point urCorner2 = new Point(550, 100);
Point llCorner2 = new Point(375, 250);
Point[] destPara2 = {ulCorner2, urCorner2, llCorner2};
// Create image attributes and set large gamma.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(4.0F);
try
{
checked
{
// Draw image to screen.
e.Graphics.DrawImage(
newImage,
destPara2,
srcRect,
units,
imageAttr,
imageCallback);
}
}
catch (Exception ex)
{
e.Graphics.DrawString(
ex.ToString(),
new Font(&quot;Arial&quot;, 8),
Brushes.Black,
new PointF(0, 0));
}
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
        <para>The <paramref name="srcRect"/> parameter specifies a rectangular portion of the <paramref name="image"/> object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the <paramref name="destPoints"/> parameter.</para>
        <para>This overload with the <paramref name="callback"/> parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the <paramref name="image"/> object to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used by the <paramref name="srcRect"/> parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies recoloring and gamma information for the <paramref name="image"/> object.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.DrawImageAbort"/> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see langword="DrawImage"/> method according to application-determined criteria.
      </param>
      <param name="callbackData">
        Value specifying additional data for the <see langword="DrawImageAbort"/> delegate to use when checking whether to stop execution of the <see langword="DrawImage"/> method.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code first defines a callback method for the <see langword="DrawImageAbort"/> delegate; the definition is simplistic and merely tests to see whether the <see langword="DrawImage"/> method calls it with a null <paramref name="callBackData"/> parameter. The main body of the example performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an instance of the <see langword="DrawImageAbort"/> callback method.</term>
          </item>
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a parallelogram in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a rectangle to select the portion of the image to draw.</term>
          </item>
          <item>
            <term>Sets the graphics drawing unit to pixel.</term>
          </item>
          <item>
            <term>Draws the original image to the screen.</term>
          </item>
          <item>
            <term>Creates an additional parallelogram in which to draw an adjusted image.</term>
          </item>
          <item>
            <term>Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.</term>
          </item>
          <item>
            <term>Draws the adjusted image to the screen.</term>
          </item>
        </list>
        <para>For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.</para>
        <para>Because this example uses an overload that passes a <paramref name="callBackData"/> parameter, the <see langword="DrawImageAbort"/> callback returns <see langword="false"/>, which causes the <see langword="DrawImage"/> method to continue, and the example draws the adjusted image to the screen.</para>
        <code lang="VB">Private Function DrawImageCallback(callBackData As IntPtr) As Boolean
&apos; Test for call that passes callBackData parameter.
If callBackData.Equals(IntPtr.Zero) Then
&apos; If no callBackData passed, abort DrawImage method.
Return True
Else
&apos; If callBackData passed, continue DrawImage method.
Return False
End If
End Function
Public Sub DrawImageParaRectAttribAbortData(e As PaintEventArgs)
&apos; Create callback method.
Dim imageCallback As New _
Graphics.DrawImageAbort(AddressOf DrawImageCallback)
Dim imageCallbackData As Integer = 1
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create parallelogram for drawing original image.
Dim ulCorner As New Point(100, 100)
Dim urCorner As New Point(550, 100)
Dim llCorner As New Point(150, 250)
Dim destPara1 As Point() =  {ulCorner, urCorner, llCorner}
&apos; Create rectangle for source image.
Dim srcRect As New Rectangle(50, 50, 150, 150)
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw original image to screen.
e.Graphics.DrawImage(newImage, destPara1, srcRect, units)
&apos; Create parallelogram for drawing adjusted image.
Dim ulCorner2 As New Point(325, 100)
Dim urCorner2 As New Point(550, 100)
Dim llCorner2 As New Point(375, 250)
Dim destPara2 As Point() =  {ulCorner2, urCorner2, llCorner2}
&apos; Create image attributes and set large gamma.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(4F)
Try
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, destPara2, srcRect, units, _
imageAttr, imageCallback, imageCallbackData)
Catch ex As Exception
e.Graphics.DrawString(ex.ToString(), New Font(&quot;Arial&quot;, 8), _
Brushes.Black, New PointF(0, 0))
End Try
End Sub
        </code>
        <code lang="C#">// Define DrawImageAbort callback method.
private bool DrawImageCallback(IntPtr callBackData)
{
// Test for call that passes callBackData parameter.
if(callBackData==IntPtr.Zero)
{
// If no callBackData passed, abort DrawImage method.
return true;
}
else
{
// If callBackData passed, continue DrawImage method.
return false;
}
}
public void DrawImageParaRectAttribAbortData(PaintEventArgs e)
{
// Create callback method.
Graphics.DrawImageAbort imageCallback
= new Graphics.DrawImageAbort(DrawImageCallback);
int imageCallbackData = 1;
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create parallelogram for drawing original image.
Point ulCorner = new Point(100, 100);
Point urCorner = new Point(550, 100);
Point llCorner = new Point(150, 250);
Point[] destPara1 = {ulCorner, urCorner, llCorner};
// Create rectangle for source image.
Rectangle srcRect = new Rectangle( 50, 50, 150, 150);
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw original image to screen.
e.Graphics.DrawImage(newImage, destPara1, srcRect, units);
// Create parallelogram for drawing adjusted image.
Point ulCorner2 = new Point(325, 100);
Point urCorner2 = new Point(550, 100);
Point llCorner2 = new Point(375, 250);
Point[] destPara2 = {ulCorner2, urCorner2, llCorner2};
// Create image attributes and set large gamma.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(4.0F);
try
{
checked
{
// Draw image to screen.
e.Graphics.DrawImage(
newImage,
destPara2,
srcRect,
units,
imageAttr,
imageCallback,
imageCallbackData);
}
}
catch (Exception ex)
{
e.Graphics.DrawString(
ex.ToString(),
new Font(&quot;Arial&quot;, 8),
Brushes.Black,
new PointF(0, 0));
}
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
        <para>The <paramref name="srcRect"/> parameter specifies a rectangular portion of the <paramref name="image"/> object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the <paramref name="destPoints"/> parameter.</para>
        <para>This overload with the <paramref name="callback"/> and <paramref name="callbackData"/> parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)">
      <summary>
        <para>Draws the specified <see cref="T:System.Drawing.Image"/> object, using its original physical size, at the specified location.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="point">
        <see cref="T:System.Drawing.PointF"/> structure that represents the upper-left corner of the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates a point at which to draw the upper-left corner of the image.</term>
          </item>
          <item>
            <term>Draws the unscaled image to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawImagePointF(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create point for upper-left corner of image.
Dim ulCorner As New PointF(100F, 100F)
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, ulCorner)
End Sub
        </code>
        <code lang="C#">public void DrawImagePointF(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create point for upper-left corner of image.
PointF ulCorner = new PointF( 100.0F, 100.0F);
// Draw image to screen.
e.Graphics.DrawImage(newImage, ulCorner);
}
        </code>
      </example>
	  <remarks>
        <para>An <see cref="T:System.Drawing.Image"/> object stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
        
        <para>This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])">
      <summary>
        <para>Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified shape and size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.PointF"/> structures that define a parallelogram.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a parallelogram in which to draw the image.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The position of the parallelogram locates the image on the screen, and the size of the original image and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.</para>
        <code lang="VB">Public Sub DrawImageParaF(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create parallelogram for drawing image.
Dim ulCorner As New PointF(100F, 100F)
Dim urCorner As New PointF(550F, 100F)
Dim llCorner As New PointF(150F, 250F)
Dim destPara As PointF() =  {ulCorner, urCorner, llCorner}
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, destPara)
End Sub
        </code>
        <code lang="C#">public void DrawImageParaF(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create parallelogram for drawing image.
PointF ulCorner = new PointF(100.0F, 100.0F);
PointF urCorner = new PointF(550.0F, 100.0F);
PointF llCorner = new PointF(150.0F, 250.0F);
PointF[] destPara = {ulCorner, urCorner, llCorner};
// Draw image to screen.
e.Graphics.DrawImage(newImage, destPara);
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.PointF"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
        <para>The image represented by the <paramref name="image"/> object is scaled and sheared to fit the shape of the parallelogram specified by the <paramref name="destPoints"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.PointF"/> structures that define a parallelogram.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the <paramref name="image"/> object to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used by the <paramref name="srcRect"/> parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a destination parallelogram in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a source rectangle from which to extract a portion of the image.</term>
          </item>
          <item>
            <term>Sets the unit of measure of the source rectangle to pixels.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The position of the destination parallelogram locates the image on the screen, the size of the source rectangle and the size and shape of the destination parallelogram determines the scaling and shearing of the drawn image, and the size of the rectangle determines what portion of the original image is drawn to the screen.</para>
        <code lang="VB">Public Sub DrawImageParaFRectF(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create parallelogram for drawing image.
Dim ulCorner As New PointF(100F, 100F)
Dim urCorner As New PointF(550F, 100F)
Dim llCorner As New PointF(150F, 250F)
Dim destPara As PointF() =  {ulCorner, urCorner, llCorner}
&apos; Create rectangle for source image.
Dim srcRect As New RectangleF(50F, 50F, 150F, 150F)
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, destPara, srcRect, units)
End Sub
        </code>
        <code lang="C#">public void DrawImageParaFRectF(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create parallelogram for drawing image.
PointF ulCorner = new PointF(100.0F, 100.0F);
PointF urCorner = new PointF(550.0F, 100.0F);
PointF llCorner = new PointF(150.0F, 250.0F);
PointF[] destPara = {ulCorner, urCorner, llCorner};
// Create rectangle for source image.
RectangleF srcRect = new RectangleF( 50.0F, 50.0F, 150.0F, 150.0F);
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw image to screen.
e.Graphics.DrawImage(newImage, destPara, srcRect, units);
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.PointF"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
        <para>The <paramref name="srcRect"/> parameter specifies a rectangular portion of the <paramref name="image"/> object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the <paramref name="destPoints"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the portion of the <paramref name="image"/> object to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used by the <paramref name="srcRect"/> parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies recoloring and gamma information for the <paramref name="image"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a destination parallelogram in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a source rectangle from which to extract a portion of the image.</term>
          </item>
          <item>
            <term>Sets the unit of measure of the source rectangle to pixels.</term>
          </item>
          <item>
            <term>Draws the original image to the screen.</term>
          </item>
          <item>
            <term>Creates an additional parallelogram in which to draw an adjusted image.</term>
          </item>
          <item>
            <term>Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.</term>
          </item>
          <item>
            <term>Draws the adjusted image to the screen.</term>
          </item>
        </list>
        <para>For the original, unadjusted destination parallelogram, the position locates the image on the screen, the size of the source rectangle and the size and shape of the destination parallelogram determines the scaling and shearing of the drawn image, and the size of the rectangle determines what portion of the original image is drawn to the screen.</para>
        <code lang="VB">Public Sub DrawImageParaFRectFAttrib(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create parallelogram for drawing original image.
Dim ulCorner1 As New PointF(100F, 100F)
Dim urCorner1 As New PointF(325F, 100F)
Dim llCorner1 As New PointF(150F, 250F)
Dim destPara1 As PointF() =  {ulCorner1, urCorner1, llCorner1}
&apos; Create rectangle for source image.
Dim srcRect As New RectangleF(50F, 50F, 150F, 150F)
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Create parallelogram for drawing adjusted image.
Dim ulCorner2 As New PointF(325F, 100F)
Dim urCorner2 As New PointF(550F, 100F)
Dim llCorner2 As New PointF(375F, 250F)
Dim destPara2 As PointF() =  {ulCorner2, urCorner2, llCorner2}
&apos; Draw original image to screen.
e.Graphics.DrawImage(newImage, destPara1, srcRect, units)
&apos; Create image attributes and set large gamma.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(4F)
&apos; Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destPara2, srcRect, units, _
imageAttr)
End Sub
        </code>
        <code lang="C#">public void DrawImageParaFRectFAttrib(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create parallelogram for drawing original image.
PointF ulCorner1 = new PointF(100.0F, 100.0F);
PointF urCorner1 = new PointF(325.0F, 100.0F);
PointF llCorner1 = new PointF(150.0F, 250.0F);
PointF[] destPara1 = {ulCorner1, urCorner1, llCorner1};
// Create rectangle for source image.
RectangleF srcRect = new RectangleF( 50.0F, 50.0F, 150.0F, 150.0F);
GraphicsUnit units = GraphicsUnit.Pixel;
// Create parallelogram for drawing adjusted image.
PointF ulCorner2 = new PointF(325.0F, 100.0F);
PointF urCorner2 = new PointF(550.0F, 100.0F);
PointF llCorner2 = new PointF(375.0F, 250.0F);
PointF[] destPara2 = {ulCorner2, urCorner2, llCorner2};
// Draw original image to screen.
e.Graphics.DrawImage(newImage, destPara1, srcRect, units);
// Create image attributes and set large gamma.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(4.0F);
// Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destPara2, srcRect, units, imageAttr);
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
        <para>The <paramref name="srcRect"/> parameter specifies a rectangular portion of the <paramref name="image"/> object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the <paramref name="destPoints"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the <paramref name="image"/> object to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used by the <paramref name="srcRect"/> parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies recoloring and gamma information for the <paramref name="image"/> object.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.DrawImageAbort"/> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see langword="DrawImage"/> method according to application-determined criteria.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code first defines a callback method for the <see langword="DrawImageAbort"/> delegate; the definition is simplistic and merely tests to see whether the <see langword="DrawImage"/> method calls it with a null <paramref name="callBackData"/> parameter. The main body of the example performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an instance of the <see langword="DrawImageAbort"/> callback method.</term>
          </item>
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a parallelogram in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a rectangle to select the portion of the image to draw.</term>
          </item>
          <item>
            <term>Sets the graphics drawing unit to pixel.</term>
          </item>
          <item>
            <term>Draws the original image to the screen.</term>
          </item>
          <item>
            <term>Creates an additional parallelogram in which to draw an adjusted image.</term>
          </item>
          <item>
            <term>Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.</term>
          </item>
          <item>
            <term>Draws the adjusted image to the screen.</term>
          </item>
        </list>
        <para>For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.</para>
        <para>Because this example uses an overload that does not pass a <paramref name="callBackData"/> parameter, the <see langword="DrawImageAbort"/> callback returns <see langword="true"/>, which causes the <see langword="DrawImage"/> method to abort, and the exception-handling code included in the example prints out the exception text rather than drawing the image.</para>
        <code lang="VB">Private Function DrawImageCallback(callBackData As IntPtr) As Boolean
&apos; Test for call that passes callBackData parameter.
If callBackData.Equals(IntPtr.Zero) Then
&apos; If no callBackData passed, abort DrawImage method.
Return True
Else
&apos; If callBackData passed, continue DrawImage method.
Return False
End If
End Function
Public Sub DrawImageParaFRectAttribAbort(e As PaintEventArgs)
&apos; Create callback method.
Dim imageCallback As New _
Graphics.DrawImageAbort(AddressOf DrawImageCallback)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create parallelogram for drawing original image.
Dim ulCorner1 As New PointF(100F, 100F)
Dim urCorner1 As New PointF(325F, 100F)
Dim llCorner1 As New PointF(150F, 250F)
Dim destPara1 As PointF() =  {ulCorner1, urCorner1, llCorner1}
&apos; Create rectangle for source image.
Dim srcRect As New RectangleF(50F, 50F, 150F, 150F)
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Create parallelogram for drawing adjusted image.
Dim ulCorner2 As New PointF(325F, 100F)
Dim urCorner2 As New PointF(550F, 100F)
Dim llCorner2 As New PointF(375F, 250F)
Dim destPara2 As PointF() =  {ulCorner2, urCorner2, llCorner2}
&apos; Draw original image to screen.
e.Graphics.DrawImage(newImage, destPara1, srcRect, units)
&apos; Create image attributes and set large gamma.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(4F)
Try
&apos; Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destPara2, srcRect, units, _
imageAttr, imageCallback)
Catch ex As Exception
e.Graphics.DrawString(ex.ToString(), New Font(&quot;Arial&quot;, 8), _
Brushes.Black, New PointF(0, 0))
End Try
End Sub
        </code>
        <code lang="C#">// Define DrawImageAbort callback method.
private bool DrawImageCallback(IntPtr callBackData)
{
// Test for call that passes callBackData parameter.
if(callBackData==IntPtr.Zero)
{
// If no callBackData passed, abort DrawImage method.
return true;
}
else
{
// If callBackData passed, continue DrawImage method.
return false;
}
}
public void DrawImageParaFRectAttribAbort(PaintEventArgs e)
{
// Create callback method.
Graphics.DrawImageAbort imageCallback
= new Graphics.DrawImageAbort(DrawImageCallback);
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create parallelogram for drawing original image.
PointF ulCorner1 = new PointF(100.0F, 100.0F);
PointF urCorner1 = new PointF(325.0F, 100.0F);
PointF llCorner1 = new PointF(150.0F, 250.0F);
PointF[] destPara1 = {ulCorner1, urCorner1, llCorner1};
// Create rectangle for source image.
RectangleF srcRect = new RectangleF( 50.0F, 50.0F, 150.0F, 150.0F);
GraphicsUnit units = GraphicsUnit.Pixel;
// Create parallelogram for drawing adjusted image.
PointF ulCorner2 = new PointF(325.0F, 100.0F);
PointF urCorner2 = new PointF(550.0F, 100.0F);
PointF llCorner2 = new PointF(375.0F, 250.0F);
PointF[] destPara2 = {ulCorner2, urCorner2, llCorner2};
// Draw original image to screen.
e.Graphics.DrawImage(newImage, destPara1, srcRect, units);
// Create image attributes and set large gamma.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(4.0F);
try
{
checked
{
// Draw adjusted image to screen.
e.Graphics.DrawImage(
newImage,
destPara2,
srcRect,
units,
imageAttr,
imageCallback);
}
}
catch (Exception ex)
{
e.Graphics.DrawString(
ex.ToString(),
new Font(&quot;Arial&quot;, 8),
Brushes.Black,
new PointF(0, 0));
}
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
        <para>The <paramref name="srcRect"/> parameter specifies a rectangular portion of the <paramref name="image"/> object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the <paramref name="destPoints"/> parameter.</para>
        <para>This overload with the <paramref name="callback"/> parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the portion of the <paramref name="image"/> object to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used by the <paramref name="srcRect"/> parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies recoloring and gamma information for the <paramref name="image"/> object.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.DrawImageAbort"/> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see langword="DrawImage"/> method according to application-determined criteria.
      </param>
      <param name="callbackData">
        Value specifying additional data for the <see langword="DrawImageAbort"/> delegate to use when checking whether to stop execution of the <see langword="DrawImage"/> method.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code first defines a callback method for the <see langword="DrawImageAbort"/> delegate; the definition is simplistic and merely tests to see whether the <see langword="DrawImage"/> method calls it with a null <paramref name="callBackData"/> parameter. The main body of the example performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an instance of the <see langword="DrawImageAbort"/> callback method.</term>
          </item>
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a parallelogram in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a rectangle to select the portion of the image to draw.</term>
          </item>
          <item>
            <term>Sets the graphics drawing unit to pixel.</term>
          </item>
          <item>
            <term>Draws the original image to the screen.</term>
          </item>
          <item>
            <term>Creates an additional parallelogram in which to draw an adjusted image.</term>
          </item>
          <item>
            <term>Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.</term>
          </item>
          <item>
            <term>Draws the adjusted image to the screen.</term>
          </item>
        </list>
        <para>For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.</para>
        <para>Because this example uses an overload that passes a <paramref name="callBackData"/> parameter, the <see langword="DrawImageAbort"/> callback returns <see langword="false"/>, which causes the <see langword="DrawImage"/> method to continue, and the example draws the adjusted image to the screen.</para>
        <code lang="VB">Private Function DrawImageCallback(callBackData As IntPtr) As Boolean
&apos; Test for call that passes callBackData parameter.
If callBackData.Equals(IntPtr.Zero) Then
&apos; If no callBackData passed, abort DrawImage method.
Return True
Else
&apos; If callBackData passed, continue DrawImage method.
Return False
End If
End Function
Public Sub DrawImageParaFRectAttribAbortData(e As PaintEventArgs)
&apos; Create callback method.
Dim imageCallback As New _
Graphics.DrawImageAbort(AddressOf DrawImageCallback)
Dim imageCallbackData As Integer = 1
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create parallelogram for drawing original image.
Dim ulCorner1 As New PointF(100F, 100F)
Dim urCorner1 As New PointF(325F, 100F)
Dim llCorner1 As New PointF(150F, 250F)
Dim destPara1 As PointF() =  {ulCorner1, urCorner1, llCorner1}
&apos; Create rectangle for source image.
Dim srcRect As New RectangleF(50F, 50F, 150F, 150F)
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Create parallelogram for drawing adjusted image.
Dim ulCorner2 As New PointF(325F, 100F)
Dim urCorner2 As New PointF(550F, 100F)
Dim llCorner2 As New PointF(375F, 250F)
Dim destPara2 As PointF() =  {ulCorner2, urCorner2, llCorner2}
&apos; Draw original image to screen.
e.Graphics.DrawImage(newImage, destPara1, srcRect, units)
&apos; Create image attributes and set large gamma.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(4F)
Try
&apos; Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destPara2, srcRect, units, _
imageAttr, imageCallback, imageCallbackData)
Catch ex As Exception
e.Graphics.DrawString(ex.ToString(), New Font(&quot;Arial&quot;, 8), _
Brushes.Black, New PointF(0, 0))
End Try
End Sub
        </code>
        <code lang="C#">// Define DrawImageAbort callback method.
private bool DrawImageCallback(IntPtr callBackData)
{
// Test for call that passes callBackData parameter.
if(callBackData==IntPtr.Zero)
{
// If no callBackData passed, abort DrawImage method.
return true;
}
else
{
// If callBackData passed, continue DrawImage method.
return false;
}
}
public void DrawImageParaFRectAttribAbortData(PaintEventArgs e)
{
// Create callback method.
Graphics.DrawImageAbort imageCallback
= new Graphics.DrawImageAbort(DrawImageCallback);
int imageCallbackData = 1;
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create parallelogram for drawing original image.
PointF ulCorner1 = new PointF(100.0F, 100.0F);
PointF urCorner1 = new PointF(325.0F, 100.0F);
PointF llCorner1 = new PointF(150.0F, 250.0F);
PointF[] destPara1 = {ulCorner1, urCorner1, llCorner1};
// Create rectangle for source image.
RectangleF srcRect = new RectangleF( 50.0F, 50.0F, 150.0F, 150.0F);
GraphicsUnit units = GraphicsUnit.Pixel;
// Create parallelogram for drawing adjusted image.
PointF ulCorner2 = new PointF(325.0F, 100.0F);
PointF urCorner2 = new PointF(550.0F, 100.0F);
PointF llCorner2 = new PointF(375.0F, 250.0F);
PointF[] destPara2 = {ulCorner2, urCorner2, llCorner2};
// Draw original image to screen.
e.Graphics.DrawImage(newImage, destPara1, srcRect, units);
// Create image attributes and set large gamma.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(4.0F);
try
{
checked
{
// Draw adjusted image to screen.
e.Graphics.DrawImage(
newImage,
destPara2,
srcRect,
units,
imageAttr,
imageCallback,
imageCallbackData);
}
}
catch (Exception ex)
{
e.Graphics.DrawString(
ex.ToString(),
new Font(&quot;Arial&quot;, 8),
Brushes.Black,
new PointF(0, 0));
}
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
        <para>The <paramref name="srcRect"/> parameter specifies a rectangular portion of the <paramref name="image"/> object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the <paramref name="destPoints"/> parameter.</para>
        <para>This overload with the <paramref name="callback"/> and <paramref name="callbackData"/> parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)">
      <summary>
        <para>Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates a rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The position of the rectangle locates the image on the screen, and the size of the original image and the size of the rectangle determines the scaling of the drawn image.</para>
        <code lang="VB">Public Sub DrawImageRect(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create rectangle for displaying image.
Dim destRect As New Rectangle(100, 100, 450, 150)
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, destRect)
End Sub
        </code>
        <code lang="C#">public void DrawImageRect(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create rectangle for displaying image.
Rectangle destRect = new Rectangle( 100, 100, 450, 150);
// Draw image to screen.
e.Graphics.DrawImage(newImage, destRect);
}
        </code>
      </example>
      <remarks>
        <para>The image represented by the <paramref name="image"/> object is scaled to the dimensions of the <paramref name="rect"/> rectangle.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
      </param>
      <param name="srcX">
        x-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcY">
        y-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcWidth">
        Width of the portion of the source image to draw.
      </param>
      <param name="srcHeight">
        Height of the portion of the source image to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used to determine the source rectangle.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates a destination rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Creates the coordinates of a source rectangle from which to extract a portion of the image.</term>
          </item>
          <item>
            <term>Sets the unit of measure of the source rectangle to pixels.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The position of the destination rectangle locates the image on the screen, and the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.</para>
        <code lang="VB">Public Sub DrawImageRect4Int(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create rectangle for displaying image.
Dim destRect As New Rectangle(100, 100, 450, 150)
&apos; Create coordinates of rectangle for source image.
Dim x As Integer = 50
Dim y As Integer = 50
Dim width As Integer = 150
Dim height As Integer = 150
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, destRect, x, y, width, height, _
units)
End Sub
        </code>
        <code lang="C#">public void DrawImageRect4Int(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create rectangle for displaying image.
Rectangle destRect = new Rectangle( 100, 100, 450, 150);
// Create coordinates of rectangle for source image.
int x = 50;
int y = 50;
int width = 150;
int height = 150;
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw image to screen.
e.Graphics.DrawImage(newImage, destRect, x, y, width, height, units);
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="srcX"/>, <paramref name="srcY"/>, <paramref name="srcWidth"/>, and <paramref name="srcHeight"/> parameters specify a rectangular portion, of the <paramref name="image"/> object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
      </param>
      <param name="srcX">
        x-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcY">
        y-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcWidth">
        Width of the portion of the source image to draw.
      </param>
      <param name="srcHeight">
        Height of the portion of the source image to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used to determine the source rectangle.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies recoloring and gamma information for the <paramref name="image"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates a destination rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Creates the coordinates of a source rectangle from which to extract a portion of the image.</term>
          </item>
          <item>
            <term>Sets the unit of measure of the source rectangle to pixels.</term>
          </item>
          <item>
            <term>Draws the original image to the screen.</term>
          </item>
          <item>
            <term>Creates an additional rectangle in which to draw an adjusted image.</term>
          </item>
          <item>
            <term>Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.</term>
          </item>
          <item>
            <term>Draws the adjusted image to the screen.</term>
          </item>
        </list>
        <para>For the original, unadjusted destination rectangle, the position locates the image on the screen, and the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.</para>
        <code lang="VB">Public Sub DrawImageRect4IntAtrrib(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create rectangle for displaying original image.
Dim destRect1 As New Rectangle(100, 25, 450, 150)
&apos; Create coordinates of rectangle for source image.
Dim x As Integer = 50
Dim y As Integer = 50
Dim width As Integer = 150
Dim height As Integer = 150
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw original image to screen.
e.Graphics.DrawImage(newImage, destRect1, x, y, width, height, _
units)
&apos; Create rectangle for adjusted image.
Dim destRect2 As New Rectangle(100, 175, 450, 150)
&apos; Create image attributes and set large gamma.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(4F)
&apos; Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destRect2, x, y, width, height, _
units, imageAttr)
End Sub
        </code>
        <code lang="C#">public void DrawImageRect4IntAtrrib(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create rectangle for displaying original image.
Rectangle destRect1 = new Rectangle(100, 25, 450, 150);
// Create coordinates of rectangle for source image.
int x = 50;
int y = 50;
int width = 150;
int height = 150;
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw original image to screen.
e.Graphics.DrawImage(newImage, destRect1, x, y, width, height, units);
// Create rectangle for adjusted image.
Rectangle destRect2 = new Rectangle(100, 175, 450, 150);
// Create image attributes and set large gamma.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(4.0F);
// Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destRect2, x, y, width, height, units, imageAttr);
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="srcX"/>, <paramref name="srcY"/>, <paramref name="srcWidth"/>, and <paramref name="srcHeight"/> parameters specify a rectangular portion, of the <paramref name="image"/> object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
      </param>
      <param name="srcX">
        x-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcY">
        y-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcWidth">
        Width of the portion of the source image to draw.
      </param>
      <param name="srcHeight">
        Height of the portion of the source image to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used to determine the source rectangle.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies recoloring and gamma information for <paramref name="image"/>.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.DrawImageAbort"/> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see langword="DrawImage"/> method according to application-determined criteria.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code first defines a callback method for the <see langword="DrawImageAbort"/> delegate; the definition is simplistic and merely tests to see whether the <see langword="DrawImage"/> method calls it with a null <paramref name="callBackData"/> parameter. The main body of the example performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an instance of the <see langword="DrawImageAbort"/> callback method.</term>
          </item>
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a destination rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a source rectangle to select the portion of the image to draw.</term>
          </item>
          <item>
            <term>Sets the graphics drawing unit to pixel.</term>
          </item>
          <item>
            <term>Draws the original image to the screen.</term>
          </item>
          <item>
            <term>Creates an additional destination rectangle in which to draw an adjusted image.</term>
          </item>
          <item>
            <term>Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.</term>
          </item>
          <item>
            <term>Draws the adjusted image to the screen.</term>
          </item>
        </list>
        <para>For the original, unadjusted destination rectangle, the position locates the image on the screen, and the size of the source rectangle and the size and shape of the destination rectangle determines the scaling of the drawn image.</para>
        <para>Because this example uses an overload that does not pass a <paramref name="callBackData"/> parameter, the <see langword="DrawImageAbort"/> callback returns <see langword="true"/>, which causes the <see langword="DrawImage"/> method to abort, and the exception-handling code included in the example prints out the exception text rather than drawing the image.</para>
        <code lang="VB">Private Function DrawImageCallback(callBackData As IntPtr) As Boolean
&apos; Test for call that passes callBackData parameter.
If callBackData.Equals(IntPtr.Zero) Then
&apos; If no callBackData passed, abort DrawImage method.
Return True
Else
&apos; If callBackData passed, continue DrawImage method.
Return False
End If
End Function
Public Sub DrawImageRect4IntAtrribAbort(e As PaintEventArgs)
&apos; Create callback method.
Dim imageCallback As New _
Graphics.DrawImageAbort(AddressOf DrawImageCallback)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create rectangle for displaying original image.
Dim destRect1 As New Rectangle(100, 25, 450, 150)
&apos; Create coordinates of rectangle for source image.
Dim x As Integer = 50
Dim y As Integer = 50
Dim width As Integer = 150
Dim height As Integer = 150
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw original image to screen.
e.Graphics.DrawImage(newImage, destRect1, x, y, width, height, _
units)
&apos; Create rectangle for adjusted image.
Dim destRect2 As New Rectangle(100, 175, 450, 150)
&apos; Create image attributes and set large gamma.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(4F)
Try
&apos; Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destRect2, x, y, width, _
height, units, imageAttr, imageCallback)
Catch ex As Exception
e.Graphics.DrawString(ex.ToString(), New Font(&quot;Arial&quot;, 8), _
Brushes.Black, New PointF(0, 0))
End Try
End Sub
        </code>
        <code lang="C#">// Define DrawImageAbort callback method.
private bool DrawImageCallback(IntPtr callBackData)
{
// Test for call that passes callBackData parameter.
if(callBackData==IntPtr.Zero)
{
// If no callBackData passed, abort DrawImage method.
return true;
}
else
{
// If callBackData passed, continue DrawImage method.
return false;
}
}
public void DrawImageRect4IntAtrribAbort(PaintEventArgs e)
{
// Create callback method.
Graphics.DrawImageAbort imageCallback
= new Graphics.DrawImageAbort(DrawImageCallback);
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create rectangle for displaying original image.
Rectangle destRect1 = new Rectangle(100, 25, 450, 150);
// Create coordinates of rectangle for source image.
int x = 50;
int y = 50;
int width = 150;
int height = 150;
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw original image to screen.
e.Graphics.DrawImage(newImage, destRect1, x, y, width, height, units);
// Create rectangle for adjusted image.
Rectangle destRect2 = new Rectangle(100, 175, 450, 150);
// Create image attributes and set large gamma.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(4.0F);
try
{
checked
{
// Draw adjusted image to screen.
e.Graphics.DrawImage(
newImage,
destRect2,
x, y,
width, height,
units,
imageAttr,
imageCallback);
}
}
catch (Exception ex)
{
e.Graphics.DrawString(
ex.ToString(),
new Font(&quot;Arial&quot;, 8),
Brushes.Black,
new PointF(0, 0));
}
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="srcX"/>, <paramref name="srcY"/>, <paramref name="srcWidth"/>, and <paramref name="srcHeight"/> parameters specify a rectangular portion, of the <paramref name="image"/> object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect"/> object.</para>
        <para>This overload with the <paramref name="callback"/> parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
      </param>
      <param name="srcX">
        x-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcY">
        y-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcWidth">
        Width of the portion of the source image to draw.
      </param>
      <param name="srcHeight">
        Height of the portion of the source image to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used to determine the source rectangle.
      </param>
      <param name="imageAttrs">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies recoloring and gamma information for the <paramref name="image"/> object.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.DrawImageAbort"/> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see langword="DrawImage"/> method according to application-determined criteria.
      </param>
      <param name="callbackData">
        Value specifying additional data for the <see langword="DrawImageAbort"/> delegate to use when checking whether to stop execution of the <see langword="DrawImage"/> method.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code first defines a callback method for the <see langword="DrawImageAbort"/> delegate; the definition is simplistic and merely tests to see whether the <see langword="DrawImage"/> method calls it with a null <paramref name="callBackData"/> parameter. The main body of the example performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an instance of the <see langword="DrawImageAbort"/> callback method.</term>
          </item>
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a destination rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a source rectangle to select the portion of the image to draw.</term>
          </item>
          <item>
            <term>Sets the graphics drawing unit to pixel.</term>
          </item>
          <item>
            <term>Draws the original image to the screen.</term>
          </item>
          <item>
            <term>Creates an additional destination rectangle in which to draw an adjusted image.</term>
          </item>
          <item>
            <term>Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.</term>
          </item>
          <item>
            <term>Draws the adjusted image to the screen.</term>
          </item>
        </list>
        <para>For the original, unadjusted destination rectangle, the position locates the image on the screen, and the size of the source rectangle and the size and shape of the destination rectangle determines the scaling of the drawn image.</para>
        <para>Because this example uses an overload that passes a <paramref name="callBackData"/> parameter, the <see langword="DrawImageAbort"/> callback returns <see langword="false"/>, which causes the <see langword="DrawImage"/> method to continue, and the example draws the adjusted image to the screen.</para>
        <code lang="VB">Private Function DrawImageCallback(callBackData As IntPtr) As Boolean
&apos; Test for call that passes callBackData parameter.
If callBackData.Equals(IntPtr.Zero) Then
&apos; If no callBackData passed, abort DrawImage method.
Return True
Else
&apos; If callBackData passed, continue DrawImage method.
Return False
End If
End Function
Public Sub DrawImageRect4IntAtrribAbortData(e As PaintEventArgs)
&apos; Create callback method.
Dim imageCallback As New _
Graphics.DrawImageAbort(AddressOf DrawImageCallback)
Dim imageCallbackData As New IntPtr(1)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create rectangle for displaying original image.
Dim destRect1 As New Rectangle(100, 25, 450, 150)
&apos; Create coordinates of rectangle for source image.
Dim x As Integer = 50
Dim y As Integer = 50
Dim width As Integer = 150
Dim height As Integer = 150
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw original image to screen.
e.Graphics.DrawImage(newImage, destRect1, x, y, width, height, _
units)
&apos; Create rectangle for adjusted image.
Dim destRect2 As New Rectangle(100, 175, 450, 150)
&apos; Create image attributes and set large gamma.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(4F)
Try
&apos; Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destRect2, x, y, width, _
height, units, imageAttr, imageCallback, imageCallbackData)
Catch ex As Exception
e.Graphics.DrawString(ex.ToString(), New Font(&quot;Arial&quot;, 8), _
Brushes.Black, New PointF(0, 0))
End Try
End Sub
        </code>
        <code lang="C#">// Define DrawImageAbort callback method.
private bool DrawImageCallback(IntPtr callBackData)
{
// Test for call that passes callBackData parameter.
if(callBackData==IntPtr.Zero)
{
// If no callBackData passed, abort DrawImage method.
return true;
}
else
{
// If callBackData passed, continue DrawImage method.
return false;
}
}
public void DrawImageRect4IntAtrribAbortData(PaintEventArgs e)
{
// Create callback method.
Graphics.DrawImageAbort imageCallback
= new Graphics.DrawImageAbort(DrawImageCallback);
IntPtr imageCallbackData = new IntPtr(1);
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create rectangle for displaying original image.
Rectangle destRect1 = new Rectangle(100, 25, 450, 150);
// Create coordinates of rectangle for source image.
int x = 50;
int y = 50;
int width = 150;
int height = 150;
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw original image to screen.
e.Graphics.DrawImage(newImage, destRect1, x, y, width, height, units);
// Create rectangle for adjusted image.
Rectangle destRect2 = new Rectangle(100, 175, 450, 150);
// Create image attributes and set large gamma.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(4.0F);
try
{
checked
{
// Draw adjusted image to screen.
e.Graphics.DrawImage(
newImage,
destRect2,
x, y,
width, height,
units,
imageAttr,
imageCallback,
imageCallbackData);
}
}
catch (Exception ex)
{
e.Graphics.DrawString(
ex.ToString(),
new Font(&quot;Arial&quot;, 8),
Brushes.Black,
new PointF(0, 0));
}
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="srcX"/>, <paramref name="srcY"/>, <paramref name="srcWidth"/>, and <paramref name="srcHeight"/> parameters specify a rectangular portion, of the <paramref name="image"/> object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect"/> parameter.</para>
        <para>This overload with the <paramref name="callback"/> and <paramref name="callbackData"/> parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the <paramref name="image"/> object to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used by the <paramref name="srcRect"/> parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates a destination rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a source rectangle from which to extract a portion of the image.</term>
          </item>
          <item>
            <term>Sets the unit of measure of the source rectangle to pixels.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The position of the destination rectangle locates the image on the screen, the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.</para>
        <code lang="VB">Public Sub DrawImageRectRect(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create rectangle for displaying image.
Dim destRect As New Rectangle(100, 100, 450, 150)
&apos; Create rectangle for source image.
Dim srcRect As New Rectangle(50, 50, 150, 150)
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, destRect, srcRect, units)
End Sub
        </code>
        <code lang="C#">public void DrawImageRectRect(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create rectangle for displaying image.
Rectangle destRect = new Rectangle( 100, 100, 450, 150);
// Create rectangle for source image.
Rectangle srcRect = new Rectangle( 50, 50, 150, 150);
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw image to screen.
e.Graphics.DrawImage(newImage, destRect, srcRect, units);
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="srcRect"/> parameter specifies a rectangular portion of the <paramref name="image"/> object to draw. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
      </param>
      <param name="srcX">
        x-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcY">
        y-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcWidth">
        Width of the portion of the source image to draw.
      </param>
      <param name="srcHeight">
        Height of the portion of the source image to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used to determine the source rectangle.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates the coordinates of a destination rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a source rectangle from which to extract a portion of the image.</term>
          </item>
          <item>
            <term>Sets the unit of measure of the source rectangle to pixels.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The position of the destination rectangle locates the image on the screen, the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.</para>
        <code lang="VB">Public Sub DrawImageRect4Float(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create rectangle for displaying image.
Dim destRect As New Rectangle(100, 100, 450, 150)
&apos; Create coordinates of rectangle for source image.
Dim x As Single = 50F
Dim y As Single = 50F
Dim width As Single = 150F
Dim height As Single = 150F
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, destRect, x, y, width, height, _
units)
End Sub
        </code>
        <code lang="C#">public void DrawImageRect4Float(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create rectangle for displaying image.
Rectangle destRect = new Rectangle( 100, 100, 450, 150);
// Create coordinates of rectangle for source image.
float x = 50.0F;
float y = 50.0F;
float width = 150.0F;
float height = 150.0F;
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw image to screen.
e.Graphics.DrawImage(newImage, destRect, x, y, width, height, units);
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="srcX"/>, <paramref name="srcY"/>, <paramref name="srcWidth"/>, and <paramref name="srcHeight"/> parameters specify a rectangular portion, of the <paramref name="image"/> object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
      </param>
      <param name="srcX">
        x-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcY">
        y-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcWidth">
        Width of the portion of the source image to draw.
      </param>
      <param name="srcHeight">
        Height of the portion of the source image to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used to determine the source rectangle.
      </param>
      <param name="imageAttrs">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies recoloring and gamma information for the <paramref name="image"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates a destination rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Creates the coordinates of a source rectangle from which to extract a portion of the image.</term>
          </item>
          <item>
            <term>Sets the unit of measure of the source rectangle to pixels.</term>
          </item>
          <item>
            <term>Draws the original image to the screen.</term>
          </item>
          <item>
            <term>Creates an additional rectangle in which to draw an adjusted image.</term>
          </item>
          <item>
            <term>Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.</term>
          </item>
          <item>
            <term>Draws the adjusted image to the screen.</term>
          </item>
        </list>
        <para>For the original, unadjusted destination rectangle, the position locates the image on the screen, and the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.</para>
        <code lang="VB">Public Sub DrawImageRect4FloatAttrib(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create rectangle for displaying original image.
Dim destRect1 As New Rectangle(100, 25, 450, 150)
&apos; Create coordinates of rectangle for source image.
Dim x As Single = 50F
Dim y As Single = 50F
Dim width As Single = 150F
Dim height As Single = 150F
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw original image to screen.
e.Graphics.DrawImage(newImage, destRect1, x, y, width, _
height, units)
&apos; Create rectangle for adjusted image.
Dim destRect2 As New Rectangle(100, 175, 450, 150)
&apos; Create image attributes and set large gamma.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(4F)
&apos; Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destRect2, x, y, width, height, _
units, imageAttr)
End Sub
        </code>
        <code lang="C#">public void DrawImageRect4FloatAttrib(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create rectangle for displaying original image.
Rectangle destRect1 = new Rectangle( 100, 25, 450, 150);
// Create coordinates of rectangle for source image.
float x = 50.0F;
float y = 50.0F;
float width = 150.0F;
float height = 150.0F;
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw original image to screen.
e.Graphics.DrawImage(newImage, destRect1, x, y, width, height, units);
// Create rectangle for adjusted image.
Rectangle destRect2 = new Rectangle(100, 175, 450, 150);
// Create image attributes and set large gamma.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(4.0F);
// Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destRect2, x, y, width, height, units, imageAttr);
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="srcX"/>, <paramref name="srcY"/>, <paramref name="srcWidth"/>, and <paramref name="srcHeight"/> parameters specify a rectangular portion, of the <paramref name="image"/> object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
      </param>
      <param name="srcX">
        x-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcY">
        y-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcWidth">
        Width of the portion of the source image to draw.
      </param>
      <param name="srcHeight">
        Height of the portion of the source image to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used to determine the source rectangle.
      </param>
      <param name="imageAttrs">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies recoloring and gamma information for the <paramref name="image"/> object.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.DrawImageAbort"/> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see langword="DrawImage"/> method according to application-determined criteria.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code first defines a callback method for the <see langword="DrawImageAbort"/> delegate; the definition is simplistic and merely tests to see whether the <see langword="DrawImage"/> method calls it with a null <paramref name="callBackData"/> parameter. The main body of the example performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an instance of the <see langword="DrawImageAbort"/> callback method.</term>
          </item>
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a destination rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a source rectangle to select the portion of the image to draw.</term>
          </item>
          <item>
            <term>Sets the graphics drawing unit to pixel.</term>
          </item>
          <item>
            <term>Draws the original image to the screen.</term>
          </item>
          <item>
            <term>Creates an additional destination rectangle in which to draw an adjusted image.</term>
          </item>
          <item>
            <term>Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.</term>
          </item>
          <item>
            <term>Draws the adjusted image to the screen.</term>
          </item>
        </list>
        <para>For the original, unadjusted destination rectangle, the position locates the image on the screen, and the size of the source rectangle and the size and shape of the destination rectangle determines the scaling of the drawn image.</para>
        <para>Because this example uses an overload that does not pass a <paramref name="callBackData"/> parameter, the <see langword="DrawImageAbort"/> callback returns <see langword="true"/>, which causes the <see langword="DrawImage"/> method to abort, and the exception-handling code included in the example prints out the exception text rather than drawing the image.</para>
        <code lang="VB">Private Function DrawImageCallback(callBackData As IntPtr) As Boolean
&apos; Test for call that passes callBackData parameter.
If callBackData.Equals(IntPtr.Zero) Then
&apos; If no callBackData passed, abort DrawImage method.
Return True
Else
&apos; If callBackData passed, continue DrawImage method.
Return False
End If
End Function
Public Sub DrawImageRect4FloatAttribAbort(e As PaintEventArgs)
&apos; Create callback method.
Dim imageCallback As New _
Graphics.DrawImageAbort(AddressOf DrawImageCallback)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create rectangle for displaying original image.
Dim destRect1 As New Rectangle(100, 25, 450, 150)
&apos; Create coordinates of rectangle for source image.
Dim x As Single = 50F
Dim y As Single = 50F
Dim width As Single = 150F
Dim height As Single = 150F
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw original image to screen.
e.Graphics.DrawImage(newImage, destRect1, x, y, width, _
height, units)
&apos; Create rectangle for adjusted image.
Dim destRect2 As New Rectangle(100, 175, 450, 150)
&apos; Create image attributes and set large gamma.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(4F)
Try
&apos; Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destRect2, x, y, width, _
height, units, imageAttr, imageCallback)
Catch ex As Exception
e.Graphics.DrawString(ex.ToString(), New Font(&quot;Arial&quot;, 8), _
Brushes.Black, New PointF(0, 0))
End Try
End Sub
        </code>
        <code lang="C#">// Define DrawImageAbort callback method.
private bool DrawImageCallback(IntPtr callBackData)
{
// Test for call that passes callBackData parameter.
if(callBackData==IntPtr.Zero)
{
// If no callBackData passed, abort DrawImage method.
return true;
}
else
{
// If callBackData passed, continue DrawImage method.
return false;
}
}
public void DrawImageRect4FloatAttribAbort(PaintEventArgs e)
{
// Create callback method.
Graphics.DrawImageAbort imageCallback
= new Graphics.DrawImageAbort(DrawImageCallback);
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create rectangle for displaying original image.
Rectangle destRect1 = new Rectangle( 100, 25, 450, 150);
// Create coordinates of rectangle for source image.
float x = 50.0F;
float y = 50.0F;
float width = 150.0F;
float height = 150.0F;
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw original image to screen.
e.Graphics.DrawImage(newImage, destRect1, x, y, width, height, units);
// Create rectangle for adjusted image.
Rectangle destRect2 = new Rectangle(100, 175, 450, 150);
// Create image attributes and set large gamma.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(4.0F);
try
{
checked
{
// Draw adjusted image to screen.
e.Graphics.DrawImage(
newImage,
destRect2,
x, y,
width, height,
units,
imageAttr,
imageCallback);
}
}
catch (Exception ex)
{
e.Graphics.DrawString(
ex.ToString(),
new Font(&quot;Arial&quot;, 8),
Brushes.Black,
new PointF(0, 0));
}
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="srcX"/>, <paramref name="srcY"/>, <paramref name="srcWidth"/>, and <paramref name="srcHeight"/> parameters specify a rectangular portion, of the <paramref name="image"/> object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect"/> parameter.</para>
        <para>This overload with the <paramref name="callback"/> parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
      </param>
      <param name="srcX">
        x-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcY">
        y-coordinate of the upper-left corner of the portion of the source image to draw.
      </param>
      <param name="srcWidth">
        Width of the portion of the source image to draw.
      </param>
      <param name="srcHeight">
        Height of the portion of the source image to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used to determine the source rectangle.
      </param>
      <param name="imageAttrs">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies recoloring and gamma information for the <paramref name="image"/> object.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.DrawImageAbort"/> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see langword="DrawImage"/> method according to application-determined criteria.
      </param>
      <param name="callbackData">
        Value specifying additional data for the <see langword="DrawImageAbort"/> delegate to use when checking whether to stop execution of the <see langword="DrawImage"/> method.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code first defines a callback method for the <see langword="DrawImageAbort"/> delegate; the definition is simplistic and merely tests to see whether the <see langword="DrawImage"/> method calls it with a null <paramref name="callBackData"/> parameter. The main body of the example performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an instance of the <see langword="DrawImageAbort"/> callback method.</term>
          </item>
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates points that define a destination rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a source rectangle to select the portion of the image to draw.</term>
          </item>
          <item>
            <term>Sets the graphics drawing unit to pixel.</term>
          </item>
          <item>
            <term>Draws the original image to the screen.</term>
          </item>
          <item>
            <term>Creates an additional destination rectangle in which to draw an adjusted image.</term>
          </item>
          <item>
            <term>Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.</term>
          </item>
          <item>
            <term>Draws the adjusted image to the screen.</term>
          </item>
        </list>
        <para>For the original, unadjusted destination rectangle, the position locates the image on the screen, and the size of the source rectangle and the size and shape of the destination rectangle determines the scaling of the drawn image.</para>
        <para>Because this example uses an overload that passes a <paramref name="callBackData"/> parameter, the <see langword="DrawImageAbort"/> callback returns <see langword="false"/>, which causes the <see langword="DrawImage"/> method to continue, and the example draws the adjusted image to the screen.</para>
        <code lang="VB">Private Function DrawImageCallback(callBackData As IntPtr) As Boolean
&apos; Test for call that passes callBackData parameter.
If callBackData.Equals(IntPtr.Zero) Then
&apos; If no callBackData passed, abort DrawImage method.
Return True
Else
&apos; If callBackData passed, continue DrawImage method.
Return False
End If
End Function
Public Sub DrawImageRect4FloatAttribAbortData(e As PaintEventArgs)
&apos; Create callback method.
Dim imageCallback As New _
Graphics.DrawImageAbort(AddressOf DrawImageCallback)
Dim imageCallbackData As New IntPtr(1)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create rectangle for displaying original image.
Dim destRect1 As New Rectangle(100, 25, 450, 150)
&apos; Create coordinates of rectangle for source image.
Dim x As Single = 50F
Dim y As Single = 50F
Dim width As Single = 150F
Dim height As Single = 150F
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw original image to screen.
e.Graphics.DrawImage(newImage, destRect1, x, y, width, _
height, units)
&apos; Create rectangle for adjusted image.
Dim destRect2 As New Rectangle(100, 175, 450, 150)
&apos; Create image attributes and set large gamma.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(4F)
&apos; Draw adjusted image to screen.
Try
&apos; Draw adjusted image to screen.
e.Graphics.DrawImage(newImage, destRect2, x, y, width, _
height, units, imageAttr, imageCallback, imageCallbackData)
Catch ex As Exception
e.Graphics.DrawString(ex.ToString(), New Font(&quot;Arial&quot;, 8), _
Brushes.Black, New PointF(0, 0))
End Try
End Sub
        </code>
        <code lang="C#">// Define DrawImageAbort callback method.
private bool DrawImageCallback(IntPtr callBackData)
{
// Test for call that passes callBackData parameter.
if(callBackData==IntPtr.Zero)
{
// If no callBackData passed, abort DrawImage method.
return true;
}
else
{
// If callBackData passed, continue DrawImage method.
return false;
}
}
public void DrawImageRect4FloatAttribAbortData(PaintEventArgs e)
{
// Create callback method.
Graphics.DrawImageAbort imageCallback
= new Graphics.DrawImageAbort(DrawImageCallback);
IntPtr imageCallbackData = new IntPtr(1);
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create rectangle for displaying original image.
Rectangle destRect1 = new Rectangle( 100, 25, 450, 150);
// Create coordinates of rectangle for source image.
float x = 50.0F;
float y = 50.0F;
float width = 150.0F;
float height = 150.0F;
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw original image to screen.
e.Graphics.DrawImage(newImage, destRect1, x, y, width, height, units);
// Create rectangle for adjusted image.
Rectangle destRect2 = new Rectangle(100, 175, 450, 150);
// Create image attributes and set large gamma.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(4.0F);
// Draw adjusted image to screen.
try
{
checked
{
// Draw adjusted image to screen.
e.Graphics.DrawImage(
newImage,
destRect2,
x, y,
width, height,
units,
imageAttr,
imageCallback,
imageCallbackData);
}
}
catch (Exception ex)
{
e.Graphics.DrawString(
ex.ToString(),
new Font(&quot;Arial&quot;, 8),
Brushes.Black,
new PointF(0, 0));
}
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="srcX"/>, <paramref name="srcY"/>, <paramref name="srcWidth"/>, and <paramref name="srcHeight"/> parameters specify a rectangular portion, of the <paramref name="image"/> object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect"/> parameter.</para>
        <para>This overload with the <paramref name="callback"/> and <paramref name="callbackData"/> parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)">
      <summary>
        <para>Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the location and size of the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates a rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The position of the rectangle locates the image on the screen, and the original size of the image and the size of the rectangle determines the scaling of the drawn image.</para>
        <code lang="VB">Public Sub DrawImageRectF(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create rectangle for displaying image.
Dim rect As New RectangleF(100F, 100F, 450F, 150F)
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, rect)
End Sub
        </code>
        <code lang="C#">public void DrawImageRectF(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create rectangle for displaying image.
RectangleF rect = new RectangleF( 100.0F, 100.0F, 450.0F, 150.0F);
// Draw image to screen.
e.Graphics.DrawImage(newImage, rect);
}
        </code>
      </example>
      <remarks>
        <para>The image represented by the <paramref name="image"/> object is scaled to the dimensions of the <paramref name="rect"/> rectangle.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the <paramref name="image"/> object to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used by the <paramref name="srcRect"/> parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates a destination rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Creates a source rectangle from which to extract a portion of the image.</term>
          </item>
          <item>
            <term>Sets the unit of measure of the source rectangle to pixels.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The position of the destination rectangle locates the image on the screen, the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.</para>
        <code lang="VB">Public Sub DrawImageRectFRectF(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create rectangle for displaying image.
Dim destRect As New RectangleF(100F, 100F, 450F, 150F)
&apos; Create rectangle for source image.
Dim srcRect As New RectangleF(50F, 50F, 150F, 150F)
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, destRect, srcRect, units)
End Sub
        </code>
        <code lang="C#">public void DrawImageRectFRectF(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create rectangle for displaying image.
RectangleF destRect = new RectangleF( 100.0F, 100.0F, 450.0F, 150.0F);
// Create rectangle for source image.
RectangleF srcRect = new RectangleF( 50.0F, 50.0F, 150.0F, 150.0F);
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw image to screen.
e.Graphics.DrawImage(newImage, destRect, srcRect, units);
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="srcRect"/> parameter specifies a rectangular portion of the <paramref name="image"/> object to draw. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)">
      <summary>
        <para>Draws the specified <see cref="T:System.Drawing.Image"/> object, using its original physical size, at the specified location.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates the coordinates of a point at which to draw the upper-left corner of the image.</term>
          </item>
          <item>
            <term>Draws the unscaled image to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawImage2Float(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create coordinates for upper-left corner of image.
Dim x As Single = 100F
Dim y As Single = 100F
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, x, y)
End Sub
        </code>
        <code lang="C#">public void DrawImage2Float(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create coordinates for upper-left corner of image.
float x = 100.0F;
float y = 100.0F;
// Draw image to screen.
e.Graphics.DrawImage(newImage, x, y);
}
        </code>
      </example>
      <remarks>
         <para>An <see cref="T:System.Drawing.Image"/> object stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
        
        <para>This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
      <summary>
        <para>Draws a portion of an image at a specified location.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the portion of the <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units of measure used by the <paramref name="srcRect"/> parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates the coordinates at which to draw the upper-left corner of the image.</term>
          </item>
          <item>
            <term>Creates a source rectangle from which to extract a portion of the image.</term>
          </item>
          <item>
            <term>Sets the unit of measure of the source rectangle to pixels.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The size of the source rectangle determines what portion of the unscaled original image is drawn to the screen.</para>
        <code lang="VB">Public Sub DrawImage2FloatRectF(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create coordinates for upper-left corner of image.
Dim x As Single = 100F
Dim y As Single = 100F
&apos; Create rectangle for source image.
Dim srcRect As New RectangleF(50F, 50F, 150F, 150F)
Dim units As GraphicsUnit = GraphicsUnit.Pixel
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, x, y, srcRect, units)
End Sub
        </code>
        <code lang="C#">public void DrawImage2FloatRectF(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create coordinates for upper-left corner of image.
float x = 100.0F;
float y = 100.0F;
// Create rectangle for source image.
RectangleF srcRect = new RectangleF( 50.0F, 50.0F, 150.0F, 150.0F);
GraphicsUnit units = GraphicsUnit.Pixel;
// Draw image to screen.
e.Graphics.DrawImage(newImage, x, y, srcRect, units);
}
        </code>
      </example>
      <remarks>
         <para>An <see cref="T:System.Drawing.Image"/> object stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.</para>
        
        <para>This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location and with the specified size.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="width">
        Width of the drawn image.
      </param>
      <param name="height">
        Height of the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates the position and size of a rectangle in which to draw the image.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
        </list>
        <para>The position of the rectangle locates the image on the screen, and the size of the original image and the size of the rectangle determines the scaling of the drawn image.</para>
        <code lang="VB">Public Sub DrawImage4Float(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create coordinates for upper-left corner
&apos; of image and for size of image.
Dim x As Single = 100F
Dim y As Single = 100F
Dim width As Single = 450F
Dim height As Single = 150F
&apos; Draw image to screen.
e.Graphics.DrawImage(newImage, x, y, width, height)
End Sub
        </code>
        <code lang="C#">public void DrawImage4Float(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create coordinates for upper-left corner.
// of image and for size of image.
float x = 100.0F;
float y = 100.0F;
float width = 450.0F;
float height = 150.0F;
// Draw image to screen.
e.Graphics.DrawImage(newImage, x, y, width, height);
}
        </code>
      </example>
      <remarks>
        <para>The rectangle defined by the <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> parameters determines the position and size of the drawn image.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)">
      <overload>
        Draws the specified image using its original physical size at the location specified by a coordinate pair.
      </overload>
      <summary>
        <para>Draws the specified image using its original physical size at the location specified by a coordinate pair.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file, SampImag.jpg, in the folder of the example.</term>
          </item>
          <item>
            <term>Creates a point at which to draw the upper-left corner of the image.</term>
          </item>
          <item>
            <term>Draws the entire image using its physical size.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawImageUnscaledInt(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create coordinates for upper-left corner of image.
Dim x As Integer = 100
Dim y As Integer = 100
&apos; Draw image to screen.
e.Graphics.DrawImageUnscaled(newImage, x, y)
End Sub
        </code>
        <code lang="C#">public void DrawImageUnscaledInt(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create coordinates for upper-left corner of image.
int x = 100;
int y = 100;
// Draw image to screen.
e.Graphics.DrawImageUnscaled(newImage, x, y);
}
        </code>
      </example>
      <remarks>
        <para>An <see cref="T:System.Drawing.Image"/> object stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
        
        <para>The <see langword="DrawImageUnscaled "/>method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <see langword="DrawImageUnscaled "/>to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
        
        <para>The call DrawImageUnscaled(image, x, y) has exactly the same effect as the call DrawImage(image, x, y).</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Draws a specified image using its original physical size at a specified location.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="y">
        x-coordinate of the upper-left corner of the drawn image.
      </param>
      <param name="width">
        Not used.
      </param>
      <param name="height">
        Not used.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>An <see cref="T:System.Drawing.Image"/> object stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
        
        <para>The <see langword="DrawImageUnscaled "/>method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <see langword="DrawImageUnscaled "/>to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
        
        <para>The call DrawImageUnscaled(image, x, y, width, height) has exactly the same effect as the call DrawImage(image, x, y).</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)">
      <summary>
        <para>Draws a specified image using its original physical size at a specified location.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="point">
        <see cref="T:System.Drawing.Point"/> structure that specifies the upper-left corner of the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image from a JPEG file SampImag.jpg in the folder of the example.</term>
          </item>
          <item>
            <term>Creates a point at which to draw the upper-left corner of the image.</term>
          </item>
          <item>
            <term>Draws the entire image using its physical size.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawImageUnscaledPoint(e As PaintEventArgs)
&apos; Create image.
Dim newImage As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create point for upper-left corner of image.
Dim ulCorner As New Point(100, 100)
&apos; Draw image to screen.
e.Graphics.DrawImageUnscaled(newImage, ulCorner)
End Sub
        </code>
        <code lang="C#">public void DrawImageUnscaledPoint(PaintEventArgs e)
{
// Create image.
Image newImage = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create point for upper-left corner of image.
Point ulCorner = new Point(100, 100);
// Draw image to screen.
e.Graphics.DrawImageUnscaled(newImage, ulCorner);
}
        </code>
      </example>    
      <remarks>
        <para>An <see cref="T:System.Drawing.Image"/> object stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
        
        <para>The <see langword="DrawImageUnscaled "/> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <see langword="DrawImageUnscaled "/> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
        
        <para>The call DrawImageUnscaled(image, point) has exactly the same effect as the call DrawImage(image, point.X, Point.Y).</para>
      </remarks>     
    </member>

    <member name="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)">
      <summary>
        <para>Draws a specified image using its original physical size at a specified location.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object to draw.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle"/> that specifies the upper-left corner of the drawn image. The X and Y properties of the rectangle specify the upper-left corner. The Width and Height properties are ignored.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      
      <remarks>
        <para>An <see cref="T:System.Drawing.Image"/> object stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
        
        <para>The <see langword="DrawImageUnscaled "/> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <see langword="DrawImageUnscaled "/> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
        
        <para>The call DrawImageUnscaled(image, rect) has exactly the same effect as the call DrawImage(image, rect.X, rect.Y).</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
      <overload>
        Draws a line connecting the two points specified by coordinate pairs.
      </overload>
      <summary>
        <para>Draws a line connecting the two points specified by coordinate pairs.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line.
      </param>
      <param name="x1">
        x-coordinate of the first point.
      </param>
      <param name="y1">
        y-coordinate of the first point.
      </param>
      <param name="x2">
        x-coordinate of the second point.
      </param>
      <param name="y2">
        y-coordinate of the second point.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the coordinates of the endpoints of the line.</term>
          </item>
          <item>
            <term>Draws the line to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawLineInt(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create coordinates of points that define line.
Dim x1 As Integer = 100
Dim y1 As Integer = 100
Dim x2 As Integer = 500
Dim y2 As Integer = 100
&apos; Draw line to screen.
e.Graphics.DrawLine(blackPen, x1, y1, x2, y2)
End Sub
        </code>
        <code lang="C#">public void DrawLineInt(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create coordinates of points that define line.
int x1 = 100;
int y1 = 100;
int x2 = 500;
int y2 = 100;
// Draw line to screen.
e.Graphics.DrawLine(blackPen, x1, y1, x2, y2);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a line connecting the two points specified by the <paramref name="x1"/>, <paramref name="y1"/>, <paramref name="x2"/>, and <paramref name="y2"/> parameters.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)">
      <summary>
        <para>Draws a line connecting two <see cref="T:System.Drawing.Point"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line.
      </param>
      <param name="pt1">
        <see cref="T:System.Drawing.Point"/> structure that represents the first point to connect.
      </param>
      <param name="pt2">
        <see cref="T:System.Drawing.Point"/> structure that represents the second point to connect.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates points for the endpoints of the line.</term>
          </item>
          <item>
            <term>Draws the line to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawLinePoint(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create points that define line.
Dim point1 As New Point(100, 100)
Dim point2 As New Point(500, 100)
&apos; Draw line to screen.
e.Graphics.DrawLine(blackPen, point1, point2)
End Sub
        </code>
        <code lang="C#">public void DrawLinePoint(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create points that define line.
Point point1 = new Point(100, 100);
Point point2 = new Point(500, 100);
// Draw line to screen.
e.Graphics.DrawLine(blackPen, point1, point2);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
        <para>Draws a line connecting two <see cref="T:System.Drawing.PointF"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line.
      </param>
      <param name="pt1">
        <see cref="T:System.Drawing.PointF"/> structure that represents the first point to connect.
      </param>
      <param name="pt2">
        <see cref="T:System.Drawing.PointF"/> structure that represents the second point to connect.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates points for the endpoints of the line.</term>
          </item>
          <item>
            <term>Draws the line to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawLinePointF(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create points that define line.
Dim point1 As New PointF(100F, 100F)
Dim point2 As New PointF(500F, 100F)
&apos; Draw line to screen.
e.Graphics.DrawLine(blackPen, point1, point2)
End Sub
        </code>
        <code lang="C#">public void DrawLinePointF(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create points that define line.
PointF point1 = new PointF(100.0F, 100.0F);
PointF point2 = new PointF(500.0F, 100.0F);
// Draw line to screen.
e.Graphics.DrawLine(blackPen, point1, point2);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Draws a line connecting the two points specified by coordinate pairs.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line.
      </param>
      <param name="x1">
        x-coordinate of the first point.
      </param>
      <param name="y1">
        y-coordinate of the first point.
      </param>
      <param name="x2">
        x-coordinate of the second point.
      </param>
      <param name="y2">
        y-coordinate of the second point.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the coordinates of the endpoints of the line.</term>
          </item>
          <item>
            <term>Draws the line to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawLineFloat(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create coordinates of points that define line.
Dim x1 As Single = 100F
Dim y1 As Single = 100F
Dim x2 As Single = 500F
Dim y2 As Single = 100F
&apos; Draw line to screen.
e.Graphics.DrawLine(blackPen, x1, y1, x2, y2)
End Sub
        </code>
        <code lang="C#">public void DrawLineFloat(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create coordinates of points that define line.
float x1 = 100.0F;
float y1 = 100.0F;
float x2 = 500.0F;
float y2 = 100.0F;
// Draw line to screen.
e.Graphics.DrawLine(blackPen, x1, y1, x2, y2);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a line connecting the two points specified by the <paramref name="x1"/>, <paramref name="y1"/>, <paramref name="x2"/>, and <paramref name="y2"/> parameters.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])">
      <overload>
        Draws a series of line segments that connect an array of <see cref="T:System.Drawing.Point"/> structures.
      </overload>
      <summary>
        <para>Draws a series of line segments that connect an array of <see cref="T:System.Drawing.Point"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line segments.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.Point"/> structures that represent the points to connect.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates an array of points of segments of the line.</term>
          </item>
          <item>
            <term>Draws the connected line segments to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawLinesPoint(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create array of points that define lines to draw.
Dim points As Point() =  {New Point(10, 10), New Point(10, 100), _
New Point(200, 50), New Point(250, 300)}
&apos;Draw lines to screen.
e.Graphics.DrawLines(blackPen, points)
End Sub
        </code>
        <code lang="C#">public void DrawLinesPoint(PaintEventArgs e)
{
// Create pen.
Pen pen = new Pen(Color.Black, 3);
// Create array of points that define lines to draw.
Point[] points =
{
new Point( 10,  10),
new Point( 10, 100),
new Point(200,  50),
new Point(250, 300)
};
//Draw lines to screen.
e.Graphics.DrawLines(pen, points);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])">
      <summary>
        <para>Draws a series of line segments that connect an array of <see cref="T:System.Drawing.PointF"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line segments.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that represent the points to connect.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Code creates a black pen.</term>
          </item>
          <item>
            <term>Creates an array of points of segments of the line.</term>
          </item>
          <item>
            <term>Draws the connected line segments to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawLinesPointF(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create array of points that define lines to draw.
Dim points As PointF() =  {New PointF(10F, 10F), _
New PointF(10F, 100F), New PointF(200F, 50F), _
New PointF(250F, 300F)}
&apos;Draw lines to screen.
e.Graphics.DrawLines(blackPen, points)
End Sub
        </code>
        <code lang="C#">public void DrawLinesPointF(PaintEventArgs e)
{
// Create pen.
Pen pen = new Pen(Color.Black, 3);
// Create array of points that define lines to draw.
PointF[] points =
{
new PointF( 10.0F,  10.0F),
new PointF( 10.0F, 100.0F),
new PointF(200.0F,  50.0F),
new PointF(250.0F, 300.0F)
};
//Draw lines to screen.
e.Graphics.DrawLines(pen, points);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
        <para>Draws a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the path.
      </param>
      <param name="path">
        <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object to draw.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a graphics path object and adds an ellipse to it.</term>
          </item>
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Draws the graphics path to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawPathEllipse(e As PaintEventArgs)
&apos; Create graphics path object and add ellipse.
Dim graphPath As New GraphicsPath()
graphPath.AddEllipse(0, 0, 200, 100)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Draw graphics path to screen.
e.Graphics.DrawPath(blackPen, graphPath)
End Sub
        </code>
        <code lang="C#">public void DrawPathEllipse(PaintEventArgs e)
{
// Create graphics path object and add ellipse.
GraphicsPath graphPath = new GraphicsPath();
graphPath.AddEllipse(0, 0, 200, 100);
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Draw graphics path to screen.
e.Graphics.DrawPath(blackPen, graphPath);
}
        </code>
      </example>
      <remarks>
        <para>The current transformation in the graphic context is applied to the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object before it is drawn.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <overload>
        Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, and a height and two radial lines.
      </overload>
      <summary>
        <para>Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, and a height and two radial lines.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the pie shape.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.
      </param>
      <param name="width">
        Width of the bounding rectangle that defines the ellipse from which the pie shape comes.
      </param>
      <param name="height">
        Height of the bounding rectangle that defines the ellipse from which the pie shape comes.
      </param>
      <param name="startAngle">
        Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.
      </param>
      <param name="sweepAngle">
        Angle measured in degrees clockwise from the <paramref name="startAngle"/> parameter to the second side of the pie shape.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the position and size of a rectangle that bounds a complete ellipse.</term>
          </item>
          <item>
            <term>Defines the angles at which to start drawing (relative to the x axis) and through which to draw (both in a clockwise direction).</term>
          </item>
          <item>
            <term>Draws the pie shape to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawPieInt(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create location and size of ellipse.
Dim x As Integer = 0
Dim y As Integer = 0
Dim width As Integer = 200
Dim height As Integer = 100
&apos; Create start and sweep angles.
Dim startAngle As Integer = 0
Dim sweepAngle As Integer = 45
&apos; Draw pie to screen.
e.Graphics.DrawPie(blackPen, x, y, width, height, _
startAngle, sweepAngle)
End Sub
        </code>
        <code lang="C#">public void DrawPieInt(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create location and size of ellipse.
int x = 0;
int y = 0;
int width = 200;
int height = 100;
// Create start and sweep angles.
int startAngle =  0;
int sweepAngle = 45;
// Draw pie to screen.
e.Graphics.DrawPie(blackPen, x, y, width, height, startAngle, sweepAngle);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle described by the <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> parameters. The pie shape consists of the two radial lines defined by the <paramref name="startAngle"/> and <paramref name="sweepAngle"/> parameters, and the arc between the intersections of those radial lines with the ellipse.</para>
        <para>If the <paramref name="sweepAngle"/> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)">
      <summary>
        <para>Draws a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.Rectangle"/> structure and two radial lines.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the pie shape.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle"/> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.
      </param>
      <param name="startAngle">
        Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.
      </param>
      <param name="sweepAngle">
        Angle measured in degrees clockwise from the <paramref name="startAngle"/> parameter to the second side of the pie shape.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates a rectangle that bounds a complete ellipse.</term>
          </item>
          <item>
            <term>Defines the angles at which to start drawing (relative to the x axis) and through which to draw (both in a clockwise direction).</term>
          </item>
          <item>
            <term>Draws the pie segment to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawPieRectangle(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create rectangle for ellipse.
Dim rect As New Rectangle(0, 0, 200, 100)
&apos; Create start and sweep angles.
Dim startAngle As Single = 0F
Dim sweepAngle As Single = 45F
&apos; Draw pie to screen.
e.Graphics.DrawPie(blackPen, rect, startAngle, sweepAngle)
End Sub
        </code>
        <code lang="C#">public void DrawPieRectangle(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create rectangle for ellipse.
Rectangle rect = new Rectangle( 0, 0, 200, 100);
// Create start and sweep angles.
float startAngle =  0.0F;
float sweepAngle = 45.0F;
// Draw pie to screen.
e.Graphics.DrawPie(blackPen, rect, startAngle, sweepAngle);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie shape consists of the two radial lines defined by the <paramref name="startAngle"/> and <paramref name="sweepAngle"/> parameters, and the arc between the intersections of those radial lines with the ellipse.</para>
        <para>If the <paramref name="sweepAngle"/> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
      <summary>
        <para>Draws a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the pie shape.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.
      </param>
      <param name="startAngle">
        Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.
      </param>
      <param name="sweepAngle">
        Angle measured in degrees clockwise from the <paramref name="startAngle"/> parameter to the second side of the pie shape.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates a rectangle that bounds a complete ellipse.</term>
          </item>
          <item>
            <term>Defines the angles at which to start drawing (relative to the x axis) and through which to draw (both in a clockwise direction).</term>
          </item>
          <item>
            <term>Draws the pie segment to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawPieRectangleF(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create rectangle for ellipse.
Dim rect As New RectangleF(0F, 0F, 200F, 100F)
&apos; Create start and sweep angles.
Dim startAngle As Single = 0F
Dim sweepAngle As Single = 45F
&apos; Draw pie to screen.
e.Graphics.DrawPie(blackPen, rect, startAngle, sweepAngle)
End Sub
        </code>
        <code lang="C#">public void DrawPieRectangleF(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create rectangle for ellipse.
RectangleF rect = new RectangleF( 0.0F, 0.0F, 200.0F, 100.0F);
// Create start and sweep angles.
float startAngle =  0.0F;
float sweepAngle = 45.0F;
// Draw pie to screen.
e.Graphics.DrawPie(blackPen, rect, startAngle, sweepAngle);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie shape consists of the two radial lines defined by the <paramref name="startAngle"/> and <paramref name="sweepAngle"/> parameters, and the arc between the intersections of those radial lines with the ellipse.</para>
        <para>If the <paramref name="sweepAngle"/> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, and a height and two radial lines.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the pie shape.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.
      </param>
      <param name="width">
        Width of the bounding rectangle that defines the ellipse from which the pie shape comes.
      </param>
      <param name="height">
        Height of the bounding rectangle that defines the ellipse from which the pie shape comes.
      </param>
      <param name="startAngle">
        Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.
      </param>
      <param name="sweepAngle">
        Angle measured in degrees clockwise from the <paramref name="startAngle"/> parameter to the second side of the pie shape.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the position and size of a rectangle that bounds a complete ellipse.</term>
          </item>
          <item>
            <term>Defines the angles at which to start drawing (relative to the x axis) and through which to draw (both in a clockwise direction).</term>
          </item>
          <item>
            <term>Draws the pie segment to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawPieFloat(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create location and size of ellipse.
Dim x As Single = 0F
Dim y As Single = 0F
Dim width As Single = 200F
Dim height As Single = 100F
&apos; Create start and sweep angles.
Dim startAngle As Single = 0F
Dim sweepAngle As Single = 45F
&apos; Draw pie to screen.
e.Graphics.DrawPie(blackPen, x, y, width, height, _
startAngle, sweepAngle)
End Sub
        </code>
        <code lang="C#">public void DrawPieFloat(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create location and size of ellipse.
float x = 0.0F;
float y = 0.0F;
float width = 200.0F;
float height = 100.0F;
// Create start and sweep angles.
float startAngle =  0.0F;
float sweepAngle = 45.0F;
// Draw pie to screen.
e.Graphics.DrawPie(blackPen, x, y, width, height, startAngle, sweepAngle);
}
        </code>
      </example>
      <remarks>
        <para>This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle described by the <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> parameters. The pie shape consists of the two radial lines defined by the <paramref name="startAngle"/> and <paramref name="sweepAngle"/> parameters, and the arc between the intersections of those radial lines with the ellipse.</para>
        <para>If the <paramref name="sweepAngle"/> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])">
      <overload>
        Draws a polygon defined by an array of <see cref="T:System.Drawing.Point"/> structures.
      </overload>
      <summary>
        <para>Draws a polygon defined by an array of <see cref="T:System.Drawing.Point"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the polygon.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.Point"/> structures that represent the vertices of the polygon.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates an array of seven points for the vertices of the polygon.</term>
          </item>
          <item>
            <term>Draws the polygon to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawPolygonPointF(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create points that define polygon.
Dim point1 As New PointF(50F, 50F)
Dim point2 As New PointF(100F, 25F)
Dim point3 As New PointF(200F, 5F)
Dim point4 As New PointF(250F, 50F)
Dim point5 As New PointF(300F, 100F)
Dim point6 As New PointF(350F, 200F)
Dim point7 As New PointF(250F, 250F)
Dim curvePoints As PointF() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw polygon curve to screen.
e.Graphics.DrawPolygon(blackPen, curvePoints)
End Sub
        </code>
        <code lang="C#">public void DrawPolygonPointF(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create points that define polygon.
PointF point1 = new PointF( 50.0F,  50.0F);
PointF point2 = new PointF(100.0F,  25.0F);
PointF point3 = new PointF(200.0F,   5.0F);
PointF point4 = new PointF(250.0F,  50.0F);
PointF point5 = new PointF(300.0F, 100.0F);
PointF point6 = new PointF(350.0F, 200.0F);
PointF point7 = new PointF(250.0F, 250.0F);
PointF[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw polygon curve to screen.
e.Graphics.DrawPolygon(blackPen, curvePoints);
}
        </code>
      </example>
      <remarks>
        <para>Every pair of two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point of the array do not coincide, they specify the last side of the polygon.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
      <summary>
        <para>Draws a polygon defined by an array of <see cref="T:System.Drawing.PointF"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the polygon.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that represent the vertices of the polygon.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates an array of seven points for the vertices of the polygon.</term>
          </item>
          <item>
            <term>Draws the polygon to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawPolygonPoint(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create points that define polygon.
Dim point1 As New Point(50, 50)
Dim point2 As New Point(100, 25)
Dim point3 As New Point(200, 5)
Dim point4 As New Point(250, 50)
Dim point5 As New Point(300, 100)
Dim point6 As New Point(350, 200)
Dim point7 As New Point(250, 250)
Dim curvePoints As Point() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw polygon to screen.
e.Graphics.DrawPolygon(blackPen, curvePoints)
End Sub
        </code>
        <code lang="C#">public void DrawPolygonPoint(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create points that define polygon.
Point point1 = new Point( 50,  50);
Point point2 = new Point(100,  25);
Point point3 = new Point(200,   5);
Point point4 = new Point(250,  50);
Point point5 = new Point(300, 100);
Point point6 = new Point(350, 200);
Point point7 = new Point(250, 250);
Point[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw polygon to screen.
e.Graphics.DrawPolygon(blackPen, curvePoints);
}
        </code>
      </example>
      <remarks>
        <para>Every pair of two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first of the array point do not coincide, they specify the last side of the polygon.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
      <overload>
        Draws a rectangle specified by a coordinate pair, a width, and a height.
      </overload>
      <summary>
        <para>Draws a rectangle specified by a coordinate pair, a width, and a height.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the rectangle to draw.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the rectangle to draw.
      </param>
      <param name="width">
        Width of the rectangle to draw.
      </param>
      <param name="height">
        Height of the rectangle to draw.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the position and size of a rectangle.</term>
          </item>
          <item>
            <term>Draws the rectangle to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawRectangleInt(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create location and size of rectangle.
Dim x As Integer = 0
Dim y As Integer = 0
Dim width As Integer = 200
Dim height As Integer = 200
&apos; Draw rectangle to screen.
e.Graphics.DrawRectangle(blackPen, x, y, width, height)
End Sub
        </code>
        <code lang="C#">public void DrawRectangleInt(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create location and size of rectangle.
int x = 0;
int y = 0;
int width = 200;
int height = 200;
// Draw rectangle to screen.
e.Graphics.DrawRectangle(blackPen, x, y, width, height);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)">
      <summary>
        <para>Draws a rectangle specified by a <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="pen">
        A <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.
      </param>
      <param name="rect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle to draw.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates a rectangle.</term>
          </item>
          <item>
            <term>Draws the rectangle to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawRectangleRectangle(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create rectangle.
Dim rect As New Rectangle(0, 0, 200, 200)
&apos; Draw rectangle to screen.
e.Graphics.DrawRectangle(blackPen, rect)
End Sub
        </code>
        <code lang="C#">public void DrawRectangleRectangle(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create rectangle.
Rectangle rect = new Rectangle( 0, 0, 200, 200);
// Draw rectangle to screen.
e.Graphics.DrawRectangle(blackPen, rect);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Draws a rectangle specified by a coordinate pair, a width, and a height.</para>
      </summary>
      <param name="pen">
        A <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.
      </param>
      <param name="x">
        The x-coordinate of the upper-left corner of the rectangle to draw.
      </param>
      <param name="y">
        The y-coordinate of the upper-left corner of the rectangle to draw.
      </param>
      <param name="width">
        The width of the rectangle to draw.
      </param>
      <param name="height">
        The height of the rectangle to draw.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates the position and size of a rectangle.</term>
          </item>
          <item>
            <term>Draws the rectangle to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawRectangleFloat(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create location and size of rectangle.
Dim x As Single = 0F
Dim y As Single = 0F
Dim width As Single = 200F
Dim height As Single = 200F
&apos; Draw rectangle to screen.
e.Graphics.DrawRectangle(blackPen, x, y, width, height)
End Sub
        </code>
        <code lang="C#">public void DrawRectangleFloat(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create location and size of rectangle.
float x = 0.0F;
float y = 0.0F;
float width = 200.0F;
float height = 200.0F;
// Draw rectangle to screen.
e.Graphics.DrawRectangle(blackPen, x, y, width, height);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])">
      <overload>
        Draws a series of rectangles specified by <see cref="T:System.Drawing.Rectangle"/> structures.
      </overload>
      <summary>
        <para>Draws a series of rectangles specified by <see cref="T:System.Drawing.Rectangle"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the outlines of the rectangles.
      </param>
      <param name="rects">
        Array of <see cref="T:System.Drawing.Rectangle"/> structures that represent the rectangles to draw.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates an array of three rectangles.</term>
          </item>
          <item>
            <term>Draws the rectangles to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawRectanglesRectangle(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create array of rectangles.
Dim rects As Rectangle() =  {New Rectangle(0, 0, 100, 200), _
New Rectangle(100, 200, 250, 50), _
New Rectangle(300, 0, 50, 100)}
&apos; Draw rectangles to screen.
e.Graphics.DrawRectangles(blackPen, rects)
End Sub
        </code>
        <code lang="C#">public void DrawRectanglesRectangle(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create array of rectangles.
Rectangle[] rects =
{
new Rectangle(  0,   0, 100, 200),
new Rectangle(100, 200, 250,  50),
new Rectangle(300,   0,  50, 100)
};
// Draw rectangles to screen.
e.Graphics.DrawRectangles(blackPen, rects);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])">
      <summary>
        <para>Draws a series of rectangles specified by <see cref="T:System.Drawing.RectangleF"/> structures.</para>
      </summary>
      <param name="pen">
        <see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the outlines of the rectangles.
      </param>
      <param name="rects">
        Array of <see cref="T:System.Drawing.RectangleF"/> structures that represent the rectangles to draw.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a black pen.</term>
          </item>
          <item>
            <term>Creates an array of three rectangles.</term>
          </item>
          <item>
            <term>Draws the rectangles to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawRectanglesRectangleF(e As PaintEventArgs)
&apos; Create pen.
Dim blackPen As New Pen(Color.Black, 3)
&apos; Create array of rectangles.
Dim rects As RectangleF() =  {New RectangleF(0F, 0F, 100F, 200F), _
New RectangleF(100F, 200F, 250F, 50F), _
New RectangleF(300F, 0F, 50F, 100F)}
&apos; Draw rectangles to screen.
e.Graphics.DrawRectangles(blackPen, rects)
End Sub
        </code>
        <code lang="C#">public void DrawRectanglesRectangleF(PaintEventArgs e)
{
// Create pen.
Pen blackPen = new Pen(Color.Black, 3);
// Create array of rectangles.
RectangleF[] rects =
{
new RectangleF(  0.0F,   0.0F, 100.0F, 200.0F),
new RectangleF(100.0F, 200.0F, 250.0F,  50.0F),
new RectangleF(300.0F,   0.0F,  50.0F, 100.0F)
};
// Draw rectangles to screen.
e.Graphics.DrawRectangles(blackPen, rects);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)">
      <overload>
        Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects.
      </overload>
      <summary>
        <para>Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects.</para>
      </summary>
      <param name="s">
        String to draw.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object that defines the text format of the string.
      </param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the color and texture of the drawn text.
      </param>
      <param name="point">
        <see cref="T:System.Drawing.PointF"/> structure that specifies the upper-left corner of the drawn text.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a text string to draw.</term>
          </item>
          <item>
            <term>Defines the font as Arial (16pt).</term>
          </item>
          <item>
            <term>Creates a solid, black brush to draw with.</term>
          </item>
          <item>
            <term>Creates a point for the upper-left corner at which to draw the text.</term>
          </item>
          <item>
            <term>Draws the string to the screen using the font, brush, and destination point.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawStringPointF(e As PaintEventArgs)
&apos; Create string to draw.
Dim drawString As [String] = &quot;Sample Text&quot;
&apos; Create font and brush.
Dim drawFont As New Font(&quot;Arial&quot;, 16)
Dim drawBrush As New SolidBrush(Color.Black)
&apos; Create point for upper-left corner of drawing.
Dim drawPoint As New PointF(150F, 150F)
&apos; Draw string to screen.
e.Graphics.DrawString(drawString, drawFont, drawBrush, drawPoint)
End Sub
        </code>
        <code lang="C#">public void DrawStringPointF(PaintEventArgs e)
{
// Create string to draw.
String drawString = &quot;Sample Text&quot;;
// Create font and brush.
Font drawFont = new Font(&quot;Arial&quot;, 16);
SolidBrush drawBrush = new SolidBrush(Color.Black);
// Create point for upper-left corner of drawing.
PointF drawPoint = new PointF(150.0F, 150.0F);
// Draw string to screen.
e.Graphics.DrawString(drawString, drawFont, drawBrush, drawPoint);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)">
      <summary>
        <para>Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects using the formatting attributes of the specified <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <param name="s">
        String to draw.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object that defines the text format of the string.
      </param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the color and texture of the drawn text.
      </param>
      <param name="point">
        <see cref="T:System.Drawing.PointF"/> structure that specifies the upper-left corner of the drawn text.
      </param>
      <param name="format">
        <see cref="T:System.Drawing.StringFormat"/> object that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a text string to draw.</term>
          </item>
          <item>
            <term>Defines the font as Arial (16pt).</term>
          </item>
          <item>
            <term>Creates a solid, black brush to draw with.</term>
          </item>
          <item>
            <term>Creates a point for the upper-left corner at which to draw the text.</term>
          </item>
          <item>
            <term>Sets the format of the string to draw vertically.</term>
          </item>
          <item>
            <term>Draws the string to the screen using the font, brush, destination point and format.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawStringPointFFormat(e As PaintEventArgs)
&apos; Create string to draw.
Dim drawString As [String] = &quot;Sample Text&quot;
&apos; Create font and brush.
Dim drawFont As New Font(&quot;Arial&quot;, 16)
Dim drawBrush As New SolidBrush(Color.Black)
&apos; Create point for upper-left corner of drawing.
Dim drawPoint As New PointF(150F, 50F)
&apos; Set format of string.
Dim drawFormat As New StringFormat()
drawFormat.FormatFlags = StringFormatFlags.DirectionVertical
&apos; Draw string to screen.
e.Graphics.DrawString(drawString, drawFont, drawBrush, _
drawPoint, drawFormat)
End Sub
        </code>
        <code lang="C#">public void DrawStringPointFFormat(PaintEventArgs e)
{
// Create string to draw.
String drawString = &quot;Sample Text&quot;;
// Create font and brush.
Font drawFont = new Font(&quot;Arial&quot;, 16);
SolidBrush drawBrush = new SolidBrush(Color.Black);
// Create point for upper-left corner of drawing.
PointF drawPoint = new PointF(150.0F, 50.0F);
// Set format of string.
StringFormat drawFormat = new StringFormat();
drawFormat.FormatFlags = StringFormatFlags.DirectionVertical;
// Draw string to screen.
e.Graphics.DrawString(drawString, drawFont, drawBrush, drawPoint, drawFormat);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
      <summary>
        <para>Draws the specified text string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects.</para>
      </summary>
      <param name="s">
        String to draw.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object that defines the text format of the string.
      </param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the color and texture of the drawn text.
      </param>
      <param name="layoutRectangle">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a text string to draw.</term>
          </item>
          <item>
            <term>Defines the font as Arial (16pt).</term>
          </item>
          <item>
            <term>Creates a solid, black brush to draw with.</term>
          </item>
          <item>
            <term>Creates a rectangle in which to draw the text.</term>
          </item>
          <item>
            <term>Draws the rectangle to the screen.</term>
          </item>
          <item>
            <term>Draws the string to the screen using the font, brush, and destination rectangle.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawStringRectangleF(e As PaintEventArgs)
&apos; Create string to draw.
Dim drawString As [String] = &quot;Sample Text&quot;
&apos; Create font and brush.
Dim drawFont As New Font(&quot;Arial&quot;, 16)
Dim drawBrush As New SolidBrush(Color.Black)
&apos; Create rectangle for drawing.
Dim x As Single = 150F
Dim y As Single = 150F
Dim width As Single = 200F
Dim height As Single = 50F
Dim drawRect As New RectangleF(x, y, width, height)
&apos; Draw rectangle to screen.
Dim blackPen As New Pen(Color.Black)
e.Graphics.DrawRectangle(blackPen, x, y, width, height)
&apos; Draw string to screen.
e.Graphics.DrawString(drawString, drawFont, drawBrush, drawRect)
End Sub
        </code>
        <code lang="C#">public void DrawStringRectangleF(PaintEventArgs e)
{
// Create string to draw.
String drawString = &quot;Sample Text&quot;;
// Create font and brush.
Font drawFont = new Font(&quot;Arial&quot;, 16);
SolidBrush drawBrush = new SolidBrush(Color.Black);
// Create rectangle for drawing.
float x = 150.0F;
float y = 150.0F;
float width = 200.0F;
float height = 50.0F;
RectangleF drawRect = new RectangleF( x, y, width, height);
// Draw rectangle to screen.
Pen blackPen = new Pen(Color.Black);
e.Graphics.DrawRectangle(blackPen, x, y, width, height);
// Draw string to screen.
e.Graphics.DrawString(drawString, drawFont, drawBrush, drawRect);
}
        </code>
      </example>
      <remarks>
        <para>The text represented by the <paramref name="s"/> parameter is drawn inside the rectangle represented by the <paramref name="layoutRectangle"/> parameter. If the text does not fit inside the rectangle, it is truncated.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
      <summary>
        <para>Draws the specified text string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects using the formatting attributes of the specified <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <param name="s">
        String to draw.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object that defines the text format of the string.
      </param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the color and texture of the drawn text.
      </param>
      <param name="layoutRectangle">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text.
      </param>
      <param name="format">
        <see cref="T:System.Drawing.StringFormat"/> object that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a text string to draw.</term>
          </item>
          <item>
            <term>Defines the font as Arial (16pt).</term>
          </item>
          <item>
            <term>Creates a solid, black brush to draw with.</term>
          </item>
          <item>
            <term>Creates a rectangle in which to draw the text.</term>
          </item>
          <item>
            <term>Draws the rectangle to the screen.</term>
          </item>
          <item>
            <term>Sets the format of the string to center it within the rectangle.</term>
          </item>
          <item>
            <term>Draws the string to the screen using the font, brush, and destination rectangle.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawStringRectangleFFormat(e As PaintEventArgs)
&apos; Create string to draw.
Dim drawString As [String] = &quot;Sample Text&quot;
&apos; Create font and brush.
Dim drawFont As New Font(&quot;Arial&quot;, 16)
Dim drawBrush As New SolidBrush(Color.Black)
&apos; Create rectangle for drawing.
Dim x As Single = 150F
Dim y As Single = 150F
Dim width As Single = 200F
Dim height As Single = 50F
Dim drawRect As New RectangleF(x, y, width, height)
&apos; Draw rectangle to screen.
Dim blackPen As New Pen(Color.Black)
e.Graphics.DrawRectangle(blackPen, x, y, width, height)
&apos; Set format of string.
Dim drawFormat As New StringFormat()
drawFormat.Alignment = StringAlignment.Center
&apos; Draw string to screen.
e.Graphics.DrawString(drawString, drawFont, drawBrush, _
drawRect, drawFormat)
End Sub
        </code>
        <code lang="C#">public void DrawStringRectangleFFormat(PaintEventArgs e)
{
// Create string to draw.
String drawString = &quot;Sample Text&quot;;
// Create font and brush.
Font drawFont = new Font(&quot;Arial&quot;, 16);
SolidBrush drawBrush = new SolidBrush(Color.Black);
// Create rectangle for drawing.
float x = 150.0F;
float y = 150.0F;
float width = 200.0F;
float height = 50.0F;
RectangleF drawRect = new RectangleF( x, y, width, height);
// Draw rectangle to screen.
Pen blackPen = new Pen(Color.Black);
e.Graphics.DrawRectangle(blackPen, x, y, width, height);
// Set format of string.
StringFormat drawFormat = new StringFormat();
drawFormat.Alignment = StringAlignment.Center;
// Draw string to screen.
e.Graphics.DrawString(drawString, drawFont, drawBrush, drawRect, drawFormat);
}
        </code>
      </example>
      <remarks>
        <para>The text represented by the <paramref name="s"/> parameter is drawn inside the rectangle represented by the <paramref name="layoutRectangle"/> parameter. If the text does not fit inside the rectangle, it is truncated.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)">
      <summary>
        <para>Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects.</para>
      </summary>
      <param name="s">
        String to draw.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object that defines the text format of the string.
      </param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the color and texture of the drawn text.
      </param>
      <param name="x">
        x coordinate of the upper-left corner of the drawn text.
      </param>
      <param name="y">
        y coordinate of the upper-left corner of the drawn text.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a text string to draw.</term>
          </item>
          <item>
            <term>Defines the font as Arial (16pt).</term>
          </item>
          <item>
            <term>Creates a solid black brush to draw with.</term>
          </item>
          <item>
            <term>Creates a point for the upper-left corner at which to draw the text.</term>
          </item>
          <item>
            <term>Draws the string to the screen using the font, brush, and destination point.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawStringFloat(e As PaintEventArgs)
&apos; Create string to draw.
Dim drawString As [String] = &quot;Sample Text&quot;
&apos; Create font and brush.
Dim drawFont As New Font(&quot;Arial&quot;, 16)
Dim drawBrush As New SolidBrush(Color.Black)
&apos; Create point for upper-left corner of drawing.
Dim x As Single = 150F
Dim y As Single = 150F
&apos; Draw string to screen.
e.Graphics.DrawString(drawString, drawFont, drawBrush, x, y)
End Sub
        </code>
        <code lang="C#">public void DrawStringFloat(PaintEventArgs e)
{
// Create string to draw.
String drawString = &quot;Sample Text&quot;;
// Create font and brush.
Font drawFont = new Font(&quot;Arial&quot;, 16);
SolidBrush drawBrush = new SolidBrush(Color.Black);
// Create point for upper-left corner of drawing.
float x = 150.0F;
float y = 150.0F;
// Draw string to screen.
e.Graphics.DrawString(drawString, drawFont, drawBrush, x, y);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)">
      <summary>
        <para>Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects using the formatting attributes of the specified <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <param name="s">
        String to draw.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object that defines the text format of the string.
      </param>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the color and texture of the drawn text.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the drawn text.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the drawn text.
      </param>
      <param name="format">
        <see cref="T:System.Drawing.StringFormat"/> object that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a text string to draw.</term>
          </item>
          <item>
            <term>Defines the font as Arial (16pt).</term>
          </item>
          <item>
            <term>Creates a solid, black brush to draw with.</term>
          </item>
          <item>
            <term>Creates the coordinates of a point for the upper-left corner at which to draw the text.</term>
          </item>
          <item>
            <term>Sets the format of the string to draw vertically</term>
          </item>
          <item>
            <term>Draws the string to the screen using the font, brush, destination point, and format.</term>
          </item>
        </list>
        <code lang="VB">Public Sub DrawStringFloatFormat(e As PaintEventArgs)
&apos; Create string to draw.
Dim drawString As [String] = &quot;Sample Text&quot;
&apos; Create font and brush.
Dim drawFont As New Font(&quot;Arial&quot;, 16)
Dim drawBrush As New SolidBrush(Color.Black)
&apos; Create point for upper-left corner of drawing.
Dim x As Single = 150F
Dim y As Single = 50F
&apos; Set format of string.
Dim drawFormat As New StringFormat()
drawFormat.FormatFlags = StringFormatFlags.DirectionVertical
&apos; Draw string to screen.
e.Graphics.DrawString(drawString, drawFont, drawBrush, _
x, y, drawFormat)
End Sub
        </code>
        <code lang="C#">public void DrawStringFloatFormat(PaintEventArgs e)
{
// Create string to draw.
String drawString = &quot;Sample Text&quot;;
// Create font and brush.
Font drawFont = new Font(&quot;Arial&quot;, 16);
SolidBrush drawBrush = new SolidBrush(Color.Black);
// Create point for upper-left corner of drawing.
float x = 150.0F;
float y =  50.0F;
// Set format of string.
StringFormat drawFormat = new StringFormat();
drawFormat.FormatFlags = StringFormatFlags.DirectionVertical;
// Draw string to screen.
e.Graphics.DrawString(drawString, drawFont, drawBrush, x, y, drawFormat);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)">
      <summary>
        <para>Closes the current graphics container and restores the state of this <see cref="T:System.Drawing.Graphics"/> object to the state saved by a call to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method.</para>
      </summary>
      <param name="container">
        <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object that represents the container this method restores.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Opens a new graphics container and saves the old container.</term>
          </item>
          <item>
            <term>Translates the world coordinates in the container.</term>
          </item>
          <item>
            <term>Fills a red rectangle in the (translated coordinates of the) new container.</term>
          </item>
          <item>
            <term>Closes the new container and restores the saved container.</term>
          </item>
          <item>
            <term>Fills a green rectangle (to the untranslated coordinates) of the saved container.</term>
          </item>
        </list>
        <para>The result is a green rectangle that overlies a red rectangle of the same size.</para>
        <code lang="VB">Public Sub EndContainerState(e As PaintEventArgs)
&apos; Begin graphics container.
Dim containerState As GraphicsContainer = _
e.Graphics.BeginContainer()
&apos; Translate world transformation.
e.Graphics.TranslateTransform(100F, 100F)
&apos; Fill translated rectangle in container with red.
e.Graphics.FillRectangle(New SolidBrush(Color.Red), 0, 0, _
200, 200)
&apos; End graphics container.
e.Graphics.EndContainer(containerState)
&apos; Fill untransformed rectangle with green.
e.Graphics.FillRectangle(New SolidBrush(Color.Green), 0, 0, _
200, 200)
End Sub
        </code>
        <code lang="C#">public void EndContainerState(PaintEventArgs e)
{
// Begin graphics container.
GraphicsContainer containerState = e.Graphics.BeginContainer();
// Translate world transformation.
e.Graphics.TranslateTransform(100.0F, 100.0F);
// Fill translated rectangle in container with red.
e.Graphics.FillRectangle(new SolidBrush(Color.Red), 0, 0, 200, 200);
// End graphics container.
e.Graphics.EndContainer(containerState);
// Fill untransformed rectangle with green.
e.Graphics.FillRectangle(new SolidBrush(Color.Green), 0, 0, 200, 200);
}
        </code>
      </example>
      <remarks>
        <para>Use this method with the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.</para>
        <para>When you call the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method of a <see cref="T:System.Drawing.Graphics"/> object, an information block that holds the state of the <see cref="T:System.Drawing.Graphics"/> object is put on a stack. The <see cref="M:System.Drawing.Graphics.BeginContainer"/> method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object that identifies that information block. When you pass the identifying object to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, the information block is removed from the stack and is used to restore the <see cref="T:System.Drawing.Graphics"/> object to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call.</para>
        <para>Containers can be nested; that is, you can call the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method several times before you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method. Each time you call the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method, an information block is put on the stack, and you receive a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object for the information block. When you pass one of those objects to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, the <see cref="T:System.Drawing.Graphics"/> object is returned to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call that returned that particular <see cref="T:System.Drawing.Drawing2D.GraphicsContainer"/> object. The information block placed on the stack by that <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call is removed from the stack, and all information blocks placed on that stack after that <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call are also removed.</para>
        <para>Calls to the <see langword="Graphics.Save"/> method place information blocks on the same stack as calls to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method. Just as an <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method call is paired with a <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call, a <see langword="Graphics.Restore"/> method call is paired with a <see langword="Save"/> method call.</para>
        <para>When you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, all information blocks placed on the stack (by the <see langword="Save"/> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method are removed from the stack. Likewise, when you call the <see langword="Restore"/> method, all information blocks placed on the stack (by the <see langword="Save"/> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method) after the corresponding call to the <see langword="Save"/> method are removed from the stack.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)">
      <overload>
        Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display at a specified point.
      </overload>
      <summary>
        <para>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display at a specified point.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoint">
        <see cref="T:System.Drawing.Point"/> structure that specifies the location of the upper-left corner of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>
        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
	  <example>
        <para>The following example creates a form that has a <see langword="Metafile"/> object as one of its private members. The OnPaint method calls <see langword="EnumerateMetafile"/>, which calls the form's MetafileCallback method for each record in the metafile. The MetafileCallback method calls the <see langword="PlayRecord"/> method. Notice that the MetafileCallback method receives the record data as an IntPtr, but the <see langword="PlayRecord"/> method expects the record data to be a byte array. The call to Marshal.Copy copys the record data to a byte array so that it can be passed to <see langword="PlayRecord"/>.</para>        
        <code lang="C#">
using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Windows.Forms;
using System.Runtime.InteropServices; // for Marshal.Copy

public class Form1 : Form
{
   private Metafile m_metafile;
   private Graphics.EnumerateMetafileProc m_delegate;
   private Point m_destPoint;  

   public Form1()
   {
      m_metafile = new Metafile("MyMetafile.emf");
      m_delegate = new Graphics.EnumerateMetafileProc(MetafileCallback);
      m_destPoint = new Point(20, 10);
   }

   protected override void OnPaint(PaintEventArgs e)
   {
      e.Graphics.EnumerateMetafile(m_metafile, m_destPoint, m_delegate);
   }		

   private bool MetafileCallback(
      EmfPlusRecordType recordType,
      int flags,
      int dataSize,
      IntPtr data,
      PlayRecordCallback callbackData)
   {  
      byte[] dataArray = null;

      if (data != IntPtr.Zero)
      {
         // Copy the unmanaged record to a managed byte buffer 
         // that can be used by PlayRecord.
         dataArray = new byte[dataSize];
         Marshal.Copy(data, dataArray, 0, dataSize);
      }
	  
      m_metafile.PlayRecord(recordType, flags, dataSize, dataArray);
			
      return true;
   }

   static void Main() 
   {
      Application.Run(new Form1());
   }
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)">
      <summary>
        <para>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display at a specified point.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoint">
        <see cref="T:System.Drawing.Point"/> structure that specifies the location of the upper-left corner of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
	  <example>
	    <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
	  </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display at a specified point using specified image attributes.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoint">
        <see cref="T:System.Drawing.Point"/> structure that specifies the location of the upper-left corner of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies image attribute information for the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)">
      <summary>
        <para>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display at a specified point.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoint">
        <see cref="T:System.Drawing.Point"/> structure that specifies the location of the upper-left corner of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
      <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)">
      <summary>
        <para>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display at a specified point.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoint">
        <see cref="T:System.Drawing.Point"/> structure that specifies the location of the upper-left corner of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
      <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display at a specified point using specified image attributes.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoint">
        <see cref="T:System.Drawing.Point"/> structure that specifies the location of the upper-left corner of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="unit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies image attribute information for the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
      <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)">
      <summary>
        <para>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified parallelogram.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram that determines the size and location of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
      <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)">
      <summary>
        <para>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified parallelogram.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram that determines the size and location of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
      <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified parallelogram using specified image attributes.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram that determines the size and location of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies image attribute information for the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>
        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.</para>
        <para>The image attributes specified by the <paramref name="imageAttr"/> parameter replace those specified when the metafile was written.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)">
      <summary>
        <para>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified parallelogram.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram that determines the size and location of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)">
      <summary>
        <para>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified parallelogram.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram that determines the size and location of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified parallelogram using specified image attributes.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.Point"/> structures that define a parallelogram that determines the size and location of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="unit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies image attribute information for the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.</para>
        <para>The image attributes specified by the <paramref name="imageAttr"/> parameter replace those specified when the metafile was written.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)">
      <summary>
        <para>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display at a specified point.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoint">
        <see cref="T:System.Drawing.PointF"/> structure that specifies the location of the upper-left corner of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
      <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)">
      <summary>
        <para>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display at a specified point.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoint">
        <see cref="T:System.Drawing.PointF"/> structure that specifies the location of the upper-left corner of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
      <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display at a specified point using specified image attributes.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoint">
        <see cref="T:System.Drawing.PointF"/> structure that specifies the location of the upper-left corner of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies image attribute information for the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>The image attributes specified by the <paramref name="imageAttr"/> parameter replace those specified when the metafile was written.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)">
      <summary>
        <para>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display at a specified point.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoint">
        <see cref="T:System.Drawing.PointF"/> structure that specifies the location of the upper-left corner of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)">
      <summary>
        <para>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display at a specified point.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoint">
        <see cref="T:System.Drawing.PointF"/> structure that specifies the location of the upper-left corner of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.  </para>
      </remarks>
	   <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display at a specified point using specified image attributes.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoint">
        <see cref="T:System.Drawing.PointF"/> structure that specifies the location of the upper-left corner of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="unit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies image attribute information for the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.</para>
        <para>The image attributes specified by the <paramref name="imageAttr"/> parameter replace those specified when the metafile was written.  </para>
      </remarks>
	   <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)">
      <summary>
        <para>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified parallelogram.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.PointF"/> structures that define a parallelogram that determines the size and location of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.PointF"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)">
      <summary>
        <para>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified parallelogram.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.PointF"/> structures that define a parallelogram that determines the size and location of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>

        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.PointF"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified parallelogram using specified image attributes.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.PointF"/> structures that define a parallelogram that determines the size and location of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies image attribute information for the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.PointF"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.</para>
        <para>The image attributes specified by the <paramref name="imageAttr"/> parameter replace those specified when the metafile was written.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)">
      <summary>
        <para>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified parallelogram.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.PointF"/> structures that define a parallelogram that determines the size and location of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.RectangleF"/> structures that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)">
      <summary>
        <para>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified parallelogram.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.PointF"/> structures that define a parallelogram that determines the size and location of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.PointF"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified parallelogram using specified image attributes.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destPoints">
        Array of three <see cref="T:System.Drawing.PointF"/> structures that define a parallelogram that determines the size and location of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="unit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies image attribute information for the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>The <paramref name="destPoints"/> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.PointF"/> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.</para>
        <para>The image attributes specified by the <paramref name="imageAttr"/> parameter replace those specified when the metafile was written.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)">
      <summary>
        <para>Sends the records of the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified rectangle.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
      <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)">
      <summary>
        <para>Sends the records of the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified rectangle.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
      <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Sends the records of the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified rectangle using specified image attributes.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies image attribute information for the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>The image attributes specified by the <paramref name="imageAttr"/> parameter replace those specified when the metafile was written.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)">
      <summary>
        <para>Sends the records of a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified rectangle.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)">
      <summary>
        <para>Sends the records of a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified rectangle.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Sends the records of a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified rectangle using specified image attributes.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="unit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies image attribute information for the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.</para>
        <para>The image attributes specified by the <paramref name="imageAttr"/> parameter replace those specified when the metafile was written.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)">
      <summary>
        <para>Sends the records of the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified rectangle.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the location and size of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
      <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)">
      <summary>
        <para>Sends the records of the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified rectangle.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the location and size of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
      </remarks>
      <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Sends the records of the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified rectangle using specified image attributes.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the location and size of the drawn metafile.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies image attribute information for the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>The image attributes specified by the <paramref name="imageAttr"/> parameter replace those specified when the metafile was written.  </para>
      </remarks>
	   <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)">
      <summary>
        <para>Sends the records of a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified rectangle.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the location and size of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.  </para>
      </remarks>
	   <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)">
      <summary>
        <para>Sends the records of a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified rectangle.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the location and size of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="srcUnit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Sends the records of a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile"/> object, one at a time, to a callback method for display in a specified rectangle using specified image attributes.</para>
      </summary>
      <param name="metafile">
        <see cref="T:System.Drawing.Imaging.Metafile"/> object to enumerate.
      </param>
      <param name="destRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the location and size of the drawn metafile.
      </param>
      <param name="srcRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
      </param>
      <param name="unit">
        Member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect"/> parameter contains.
      </param>
      <param name="callback">
        <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate that specifies the method to which the metafile records are sent.
      </param>
      <param name="callbackData">
        Internal pointer that is required, but ignored. You can pass <see langword="IntPtr.Zero"/> for this parameter.
      </param>
      <param name="imageAttr">
        <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that specifies image attribute information for the drawn image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the <paramref name="callback"/> parameter. Typically, the callback method calls the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method to &quot;play back&quot;, or draw, the record.</para>

        <para>If the callback method calls <see langword="Metafile.PlayRecord"/>, it must do so by calling the <see langword="PlayRecord"/> method of the specific <see cref="T:System.Drawing.Imaging.Metafile"/> object that is being enumerated.</para>
        <para>Any drawing that takes place outside of the rectangle specified by the <paramref name="srcRect"/> parameter is ignored.</para>
        <para>The image attributes specified by the <paramref name="imageAttr"/> parameter replace those specified when the metafile was written.  </para>
      </remarks>
	  <example>
        <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)">
      <overload>
        Updates the clip region of this <see cref="T:System.Drawing.Graphics"/> object to exclude the area specified by a <see cref="T:System.Drawing.Rectangle"/> structure.
      </overload>
      <summary>
        <para>Updates the clip region of this <see cref="T:System.Drawing.Graphics"/> object to exclude the area specified by a <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle"/> structure that specifies the rectangle to exclude from the clip region.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a 100 pixel by 100 pixel rectangle whose upper-left corner is at the coordinate (100, 100).</term>
          </item>
          <item>
            <term>Creates a region defined by the rectangle.</term>
          </item>
          <item>
            <term>Sets the clipping region to exclude the rectangular region.</term>
          </item>
          <item>
            <term>Fills a 300 pixel by 300 pixel rectangle whose upper-left corner is at the coordinate (0, 0) with a solid blue brush.</term>
          </item>
        </list>
        <para>The result is a blue rectangle with a square region toward its lower-right corner missing.</para>
        <code lang="VB">Public Sub ExcludeClipRectangle(e As PaintEventArgs)
&apos; Create rectangle for region.
Dim excludeRect As New Rectangle(100, 100, 200, 200)
&apos; Create region for exclusion.
Dim excludeRegion As New [Region](excludeRect)
&apos; Set clipping region to exclude region.
e.Graphics.ExcludeClip(excludeRegion)
&apos; Fill large rectangle to show clipping region.
e.Graphics.FillRectangle(New SolidBrush(Color.Blue), 0, 0, _
300, 300)
End Sub
        </code>
        <code lang="C#">public void ExcludeClipRectangle(PaintEventArgs e)
{
// Create rectangle for region.
Rectangle excludeRect = new Rectangle(100, 100, 200, 200);
// Create region for exclusion.
Region excludeRegion = new Region(excludeRect);
// Set clipping region to exclude region.
e.Graphics.ExcludeClip(excludeRegion);
// Fill large rectangle to show clipping region.
e.Graphics.FillRectangle(new SolidBrush(Color.Blue), 0, 0, 300, 300);
}
        </code>
      </example>
      <remarks>
        <para>This method excludes the area specified by the <paramref name="rect"/> parameter from the current clip region and assigns the resulting area to the <see langword="Clip"/> property of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)">
      <summary>
        <para>Updates the clip region of this <see cref="T:System.Drawing.Graphics"/> object to exclude the area specified by a <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="region">
        <see cref="T:System.Drawing.Region"/> object that specifies the region to exclude from the clip region.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a 100 pixel by 100 pixel rectangle whose upper-left corner is at the coordinate (100, 100).</term>
          </item>
          <item>
            <term>Sets the clipping region to exclude the rectangle.</term>
          </item>
          <item>
            <term>Fills a 300 pixel by 300 pixel rectangle whose upper-left corner is at the coordinate (0, 0) with a solid blue brush.</term>
          </item>
        </list>
        <para>The result is a blue rectangle with a square area toward its lower-right corner missing.</para>
        <code lang="VB">Public Sub ExcludeClipRegion(e As PaintEventArgs)
&apos; Create rectangle for exclusion.
Dim excludeRect As New Rectangle(100, 100, 200, 200)
&apos; Set clipping region to exclude rectangle.
e.Graphics.ExcludeClip(excludeRect)
&apos; Fill large rectangle to show clipping region.
e.Graphics.FillRectangle(New SolidBrush(Color.Blue), 0, 0, _
300, 300)
End Sub
        </code>
        <code lang="C#">public void ExcludeClipRegion(PaintEventArgs e)
{
// Create rectangle for exclusion.
Rectangle excludeRect = new Rectangle(100, 100, 200, 200);
// Set clipping region to exclude rectangle.
e.Graphics.ExcludeClip(excludeRect);
// Fill large rectangle to show clipping region.
e.Graphics.FillRectangle(new SolidBrush(Color.Blue), 0, 0, 300, 300);
}
        </code>
      </example>
      <remarks>
        <para>This method excludes the area specified by the <paramref name="region"/> parameter from the current clip region and assigns the resulting area to the <see langword="Clip"/> property of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])">
      <overload>
        Fills the interior a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.Point"/> structures.
      </overload>
      <summary>
        <para>Fills the interior a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.Point"/> structures.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.Point"/> structures that define the spline.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates an array of four points to define a spline.</term>
          </item>
          <item>
            <term>Fills the curve on the screen.</term>
          </item>
        </list>
        <para>The curve has a default tension of 0.5.</para>
        <code lang="VB">Public Sub FillClosedCurvePoint(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos;Create array of points for curve.
Dim point1 As New Point(100, 100)
Dim point2 As New Point(200, 50)
Dim point3 As New Point(250, 200)
Dim point4 As New Point(50, 150)
Dim points As Point() =  {point1, point2, point3, point4}
&apos; Fill curve on screen.
e.Graphics.FillClosedCurve(redBrush, points)
End Sub
        </code>
        <code lang="C#">public void FillClosedCurvePoint(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
//Create array of points for curve.
Point point1 = new Point(100, 100);
Point point2 = new Point(200,  50);
Point point3 = new Point(250, 200);
Point point4 = new Point( 50, 150);
Point[] points = {point1, point2, point3, point4};
// Fill curve on screen.
e.Graphics.FillClosedCurve(redBrush, points);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.Point"/> structures.</para>
        <para>This method uses a default tension of 0.5.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)">
      <summary>
        <para>Fills the interior a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.Point"/> structures using the specified fill mode.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.Point"/> structures that define the spline.
      </param>
      <param name="fillmode">
        Member of the <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration that determines how the curve is filled.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates an array of four points to define a spline.</term>
          </item>
          <item>
            <term>Sets the fill mode to <see langword="FillMode.Winding"/>.</term>
          </item>
          <item>
            <term>Fills the curve on the screen.</term>
          </item>
        </list>
        <para>The curve has a default tension of 0.5.</para>
        <code lang="VB">Public Sub FillClosedCurvePointFillMode(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos;Create array of points for curve.
Dim point1 As New Point(100, 100)
Dim point2 As New Point(200, 50)
Dim point3 As New Point(250, 200)
Dim point4 As New Point(50, 150)
Dim points As Point() =  {point1, point2, point3, point4}
&apos; Set fill mode.
Dim newFillMode As FillMode = FillMode.Winding
&apos; Fill curve on screen.
e.Graphics.FillClosedCurve(redBrush, points, newFillMode)
End Sub
        </code>
        <code lang="C#">public void FillClosedCurvePointFillMode(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
//Create array of points for curve.
Point point1 = new Point(100, 100);
Point point2 = new Point(200,  50);
Point point3 = new Point(250, 200);
Point point4 = new Point( 50, 150);
Point[] points = {point1, point2, point3, point4};
// Set fill mode.
FillMode newFillMode = FillMode.Winding;
// Fill curve on screen.
e.Graphics.FillClosedCurve(redBrush, points, newFillMode);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.Point"/> structures.</para>
        <para>This method uses a default tension of 0.5.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)">
      <summary>
        <para>Fills the interior a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.Point"/> structures using the specified fill mode and tension.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.Point"/> structures that define the spline.
      </param>
      <param name="fillmode">
        Member of the <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration that determines how the curve is filled.
      </param>
      <param name="tension">
        Value greater than or equal to 0.0F that specifies the tension of the curve.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates an array of four points to define a spline.</term>
          </item>
          <item>
            <term>Sets the fill mode to <see langword="FillMode.Winding"/>.</term>
          </item>
          <item>
            <term>Sets the tension to 1.0.</term>
          </item>
          <item>
            <term>Fills the curve on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillClosedCurvePointFillModeTension(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos; Create array of points for curve.
Dim point1 As New Point(100, 100)
Dim point2 As New Point(200, 50)
Dim point3 As New Point(250, 200)
Dim point4 As New Point(50, 150)
Dim points As Point() =  {point1, point2, point3, point4}
&apos; Set fill mode.
Dim newFillMode As FillMode = FillMode.Winding
&apos; Set tension.
Dim tension As Single = 1F
&apos; Fill curve on screen.
e.Graphics.FillClosedCurve(redBrush, points, newFillMode, tension)
End Sub
        </code>
        <code lang="C#">public void FillClosedCurvePointFillModeTension(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
// Create array of points for curve.
Point point1 = new Point(100, 100);
Point point2 = new Point(200,  50);
Point point3 = new Point(250, 200);
Point point4 = new Point( 50, 150);
Point[] points = {point1, point2, point3, point4};
// Set fill mode.
FillMode newFillMode = FillMode.Winding;
// Set tension.
float tension = 1.0F;
// Fill curve on screen.
e.Graphics.FillClosedCurve(redBrush, points, newFillMode, tension);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.Point"/> structures.</para>
        <para>The <paramref name="tension"/> parameter determines the shape of the spline. If the value of the <paramref name="tension"/> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension"/> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])">
      <summary>
        <para>Fills the interior a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.PointF"/> structures.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that define the spline.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates an array of four points to define a spline.</term>
          </item>
          <item>
            <term>Fills the curve on the screen.</term>
          </item>
        </list>
        <para>The curve has a default tension of 0.5.</para>
        <code lang="VB">Public Sub FillClosedCurvePointF(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos;Create array of points for curve.
Dim point1 As New PointF(100F, 100F)
Dim point2 As New PointF(200F, 50F)
Dim point3 As New PointF(250F, 200F)
Dim point4 As New PointF(50F, 150F)
Dim points As PointF() =  {point1, point2, point3, point4}
&apos; Fill curve on screen.
e.Graphics.FillClosedCurve(redBrush, points)
End Sub
        </code>
        <code lang="C#">public void FillClosedCurvePointF(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
//Create array of points for curve.
PointF point1 = new PointF(100.0F, 100.0F);
PointF point2 = new PointF(200.0F,  50.0F);
PointF point3 = new PointF(250.0F, 200.0F);
PointF point4 = new PointF( 50.0F, 150.0F);
PointF[] points = {point1, point2, point3, point4};
// Fill curve on screen.
e.Graphics.FillClosedCurve(redBrush, points);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.PointF"/> structures.</para>
        <para>This method uses a default tension of 0.5.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)">
      <summary>
        <para>Fills the interior a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.PointF"/> structures using the specified fill mode.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that define the spline.
      </param>
      <param name="fillmode">
        Member of the <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration that determines how the curve is filled.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates an array of four points to define a spline.</term>
          </item>
          <item>
            <term>Sets the fill mode to <see langword="FillMode.Winding"/>.</term>
          </item>
          <item>
            <term>Fills the curve on the screen.</term>
          </item>
        </list>
        <para>The curve has a default tension of 0.5.</para>
        <code lang="VB">Public Sub FillClosedCurvePointFFillMode(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos; Create array of points for curve.
Dim point1 As New PointF(100F, 100F)
Dim point2 As New PointF(200F, 50F)
Dim point3 As New PointF(250F, 200F)
Dim point4 As New PointF(50F, 150F)
Dim points As PointF() =  {point1, point2, point3, point4}
&apos; Set fill mode.
Dim newFillMode As FillMode = FillMode.Winding
&apos; Fill curve on screen.
e.Graphics.FillClosedCurve(redBrush, points, newFillMode)
End Sub
        </code>
        <code lang="C#">public void FillClosedCurvePointFFillMode(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
// Create array of points for curve.
PointF point1 = new PointF(100.0F, 100.0F);
PointF point2 = new PointF(200.0F,  50.0F);
PointF point3 = new PointF(250.0F, 200.0F);
PointF point4 = new PointF( 50.0F, 150.0F);
PointF[] points = {point1, point2, point3, point4};
// Set fill mode.
FillMode newFillMode = FillMode.Winding;
// Fill curve on screen.
e.Graphics.FillClosedCurve(redBrush, points, newFillMode);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.Point"/> structures.</para>
        <para>This method uses a default tension of 0.5.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)">
      <summary>
        <para>Fills the interior a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.PointF"/> structures using the specified fill mode and tension.</para>
      </summary>
      <param name="brush">
        A <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that define the spline.
      </param>
      <param name="fillmode">
        Member of the <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration that determines how the curve is filled.
      </param>
      <param name="tension">
        Value greater than or equal to 0.0F that specifies the tension of the curve.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates an array of four points to define a spline.</term>
          </item>
          <item>
            <term>Sets the fill mode to <see langword="FillMode.Winding"/>.</term>
          </item>
          <item>
            <term>Sets the tension to 1.0.</term>
          </item>
          <item>
            <term>Fills the curve on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillClosedCurvePointFFillModeTension(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos; Create array of points for curve.
Dim point1 As New PointF(100F, 100F)
Dim point2 As New PointF(200F, 50F)
Dim point3 As New PointF(250F, 200F)
Dim point4 As New PointF(50F, 150F)
Dim points As PointF() =  {point1, point2, point3, point4}
&apos; Set fill mode.
Dim newFillMode As FillMode = FillMode.Winding
&apos; Set tension.
Dim tension As Single = 1F
&apos; Fill curve on screen.
e.Graphics.FillClosedCurve(redBrush, points, newFillMode, tension)
End Sub
        </code>
        <code lang="C#">public void FillClosedCurvePointFFillModeTension(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
// Create array of points for curve.
PointF point1 = new PointF(100.0F, 100.0F);
PointF point2 = new PointF(200.0F,  50.0F);
PointF point3 = new PointF(250.0F, 200.0F);
PointF point4 = new PointF( 50.0F, 150.0F);
PointF[] points = {point1, point2, point3, point4};
// Set fill mode.
FillMode newFillMode = FillMode.Winding;
// Set tension.
float tension = 1.0F;
// Fill curve on screen.
e.Graphics.FillClosedCurve(redBrush, points, newFillMode, tension);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
        <para>The array of points must contain at least four <see cref="T:System.Drawing.Point"/> structures.</para>
        <para>The <paramref name="tension"/> parameter determines the shape of the spline. If the value of the <paramref name="tension"/> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension"/> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)">
      <overload>
        Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.
      </overload>
      <summary>
        <para>Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
      </param>
      <param name="width">
        Width of the bounding rectangle that defines the ellipse.
      </param>
      <param name="height">
        Height of the bounding rectangle that defines the ellipse.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates the location and size of a rectangle that bounds an ellipse.</term>
          </item>
          <item>
            <term>Fills the ellipse on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillEllipseInt(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos; Create location and size of ellipse.
Dim x As Integer = 0
Dim y As Integer = 0
Dim width As Integer = 200
Dim height As Integer = 100
&apos; Fill ellipse on screen.
e.Graphics.FillEllipse(redBrush, x, y, width, height)
End Sub
        </code>
        <code lang="C#">public void FillEllipseInt(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
// Create location and size of ellipse.
int x = 0;
int y = 0;
int width = 200;
int height = 100;
// Fill ellipse on screen.
e.Graphics.FillEllipse(redBrush, x, y, width, height);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of an ellipse with a <see cref="T:System.Drawing.Brush"/> object. The ellipse is defined by the bounding rectangle represented by the <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> parameters.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)">
      <summary>
        <para>Fills the interior of an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle"/> structure that represents the bounding rectangle that defines the ellipse.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates a rectangle that bounds an ellipse.</term>
          </item>
          <item>
            <term>Fills the ellipse on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillEllipseRectangle(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos; Create rectangle for ellipse.
Dim x As Integer = 0
Dim y As Integer = 0
Dim width As Integer = 200
Dim height As Integer = 100
Dim rect As New Rectangle(x, y, width, height)
&apos; Fill ellipse on screen.
e.Graphics.FillEllipse(redBrush, rect)
End Sub
        </code>
        <code lang="C#">public void FillEllipseRectangle(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
// Create rectangle for ellipse.
int x = 0;
int y = 0;
int width = 200;
int height = 100;
Rectangle rect = new Rectangle( x, y, width, height);
// Fill ellipse on screen.
e.Graphics.FillEllipse(redBrush, rect);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of an ellipse with a <see cref="T:System.Drawing.Brush"/> object. The ellipse is defined by the bounding rectangle represented by the <paramref name="rect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)">
      <summary>
        <para>Fills the interior of an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle that defines the ellipse.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates a rectangle that bounds an ellipse.</term>
          </item>
          <item>
            <term>Fills the ellipse on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillEllipseRectangleF(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos; Create rectangle for ellipse.
Dim x As Single = 0F
Dim y As Single = 0F
Dim width As Single = 200F
Dim height As Single = 100F
Dim rect As New RectangleF(x, y, width, height)
&apos; Fill ellipse on screen.
e.Graphics.FillEllipse(redBrush, rect)
End Sub
        </code>
        <code lang="C#">public void FillEllipseRectangleF(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
// Create rectangle for ellipse.
float x = 0.0F;
float y = 0.0F;
float width = 200.0F;
float height = 100.0F;
RectangleF rect = new RectangleF( x, y, width, height);
// Fill ellipse on screen.
e.Graphics.FillEllipse(redBrush, rect);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of an ellipse with a <see cref="T:System.Drawing.Brush"/> object. The ellipse is defined by the bounding rectangle represented by the <paramref name="rect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
      </param>
      <param name="width">
        Width of the bounding rectangle that defines the ellipse.
      </param>
      <param name="height">
        Height of the bounding rectangle that defines the ellipse.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates the location and size of a rectangle that bounds an ellipse.</term>
          </item>
          <item>
            <term>Fills the ellipse on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillEllipseFloat(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos; Create location and size of ellipse.
Dim x As Single = 0F
Dim y As Single = 0F
Dim width As Single = 200F
Dim height As Single = 100F
&apos; Fill ellipse on screen.
e.Graphics.FillEllipse(redBrush, x, y, width, height)
End Sub
        </code>
        <code lang="C#">public void FillEllipseFloat(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
// Create location and size of ellipse.
float x = 0.0F;
float y = 0.0F;
float width = 200.0F;
float height = 100.0F;
// Fill ellipse on screen.
e.Graphics.FillEllipse(redBrush, x, y, width, height);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of an ellipse with a <see cref="T:System.Drawing.Brush"/> object. The ellipse is defined by the bounding rectangle represented by the <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> parameters.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
        <para>Fills the interior of a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="path">
        <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object that represents the path to fill.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates a graphics path object.</term>
          </item>
          <item>
            <term>Adds an ellipse to the graphics path.</term>
          </item>
          <item>
            <term>Fills the path on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillPathEllipse(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos; Create graphics path object and add ellipse.
Dim graphPath As New GraphicsPath()
graphPath.AddEllipse(0, 0, 200, 100)
&apos; Fill graphics path to screen.
e.Graphics.FillPath(redBrush, graphPath)
End Sub
        </code>
        <code lang="C#">public void FillPathEllipse(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
// Create graphics path object and add ellipse.
GraphicsPath graphPath = new GraphicsPath();
graphPath.AddEllipse(0, 0, 200, 100);
// Fill graphics path to screen.
e.Graphics.FillPath(redBrush, graphPath);
}
        </code>
      </example>
      <remarks>
        <para>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object consists of a series of line and curve segments. If the path represented by the <paramref name="path"/> parameter is not closed, an additional segment is added from the last point to the first point to close the path.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <overload>
        Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, and a height and two radial lines.
      </overload>
      <summary>
        <para>Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, and a height and two radial lines.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
      </param>
      <param name="width">
        Width of the bounding rectangle that defines the ellipse from which the pie section comes.
      </param>
      <param name="height">
        Height of the bounding rectangle that defines the ellipse from which the pie section comes.
      </param>
      <param name="startAngle">
        Angle in degrees measured clockwise from the x-axis to the first side of the pie section.
      </param>
      <param name="sweepAngle">
        Angle in degrees measured clockwise from the <paramref name="startAngle"/> parameter to the second side of the pie section.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates the location and size of a rectangle that bounds an ellipse.</term>
          </item>
          <item>
            <term>Defines the start angle (relative to the x axis) and the sweep angle (both in a clockwise direction).</term>
          </item>
          <item>
            <term>Fills the pie-shaped area of the ellipse on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillPieInt(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos; Create location and size of ellipse.
Dim x As Integer = 0
Dim y As Integer = 0
Dim width As Integer = 200
Dim height As Integer = 100
&apos; Create start and sweep angles.
Dim startAngle As Integer = 0
Dim sweepAngle As Integer = 45
&apos; Fill pie to screen.
e.Graphics.FillPie(redBrush, x, y, width, height, startAngle, _
sweepAngle)
End Sub
        </code>
        <code lang="C#">public void FillPieInt(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
// Create location and size of ellipse.
int x = 0;
int y = 0;
int width = 200;
int height = 100;
// Create start and sweep angles.
int startAngle =  0;
int sweepAngle = 45;
// Fill pie to screen.
e.Graphics.FillPie(redBrush, x, y, width, height, startAngle, sweepAngle);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the <paramref name="startAngle"/> and <paramref name="sweepAngle "/>parameters and the arc between the intersections of those radial lines with the ellipse.</para>
        <para>If the <paramref name="sweepAngle"/> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)">
      <summary>
        <para>Fills the interior of a pie section defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle"/> structure that represents the bounding rectangle that defines the ellipse from which the pie section comes.
      </param>
      <param name="startAngle">
        Angle in degrees measured clockwise from the x-axis to the first side of the pie section.
      </param>
      <param name="sweepAngle">
        Angle in degrees measured clockwise from the <paramref name="startAngle"/> parameter to the second side of the pie section.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates a rectangle that bounds an ellipse.</term>
          </item>
          <item>
            <term>Defines the start angle (relative to the x axis) and the sweep angle (both in a clockwise direction).</term>
          </item>
          <item>
            <term>Fills the pie-shaped area of the ellipse on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillPieRectangle(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos; Create rectangle for ellipse.
Dim rect As New Rectangle(0, 0, 200, 100)
&apos; Create start and sweep angles.
Dim startAngle As Single = 0F
Dim sweepAngle As Single = 45F
&apos; Fill pie to screen.
e.Graphics.FillPie(redBrush, rect, startAngle, sweepAngle)
End Sub
        </code>
        <code lang="C#">public void FillPieRectangle(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
// Create rectangle for ellipse.
Rectangle rect = new Rectangle( 0, 0, 200, 100);
// Create start and sweep angles.
float startAngle =  0.0F;
float sweepAngle = 45.0F;
// Fill pie to screen.
e.Graphics.FillPie(redBrush, rect, startAngle, sweepAngle);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the <paramref name="startAngle"/> and <paramref name="sweepAngle"/> parameters and the arc between the intersections of those radial lines with the ellipse.</para>
        <para>If the <paramref name="sweepAngle"/> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, and a height and two radial lines.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
      </param>
      <param name="width">
        Width of the bounding rectangle that defines the ellipse from which the pie section comes.
      </param>
      <param name="height">
        Height of the bounding rectangle that defines the ellipse from which the pie section comes.
      </param>
      <param name="startAngle">
        Angle in degrees measured clockwise from the x-axis to the first side of the pie section.
      </param>
      <param name="sweepAngle">
        Angle in degrees measured clockwise from the <paramref name="startAngle"/> parameter to the second side of the pie section.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid red brush.</term>
          </item>
          <item>
            <term>Creates the location and size of a rectangle that bounds an ellipse.</term>
          </item>
          <item>
            <term>Defines the start angle (relative to the x axis) and the sweep angle (both in a clockwise direction).</term>
          </item>
          <item>
            <term>Fills the pie-shaped area of the ellipse on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillPieFloat(e As PaintEventArgs)
&apos; Create solid brush.
Dim redBrush As New SolidBrush(Color.Red)
&apos; Create location and size of ellipse.
Dim x As Single = 0F
Dim y As Single = 0F
Dim width As Single = 200F
Dim height As Single = 100F
&apos; Create start and sweep angles.
Dim startAngle As Single = 0F
Dim sweepAngle As Single = 45F
&apos; Fill pie to screen.
e.Graphics.FillPie(redBrush, x, y, width, height, startAngle, _
sweepAngle)
End Sub
        </code>
        <code lang="C#">public void FillPieFloat(PaintEventArgs e)
{
// Create solid brush.
SolidBrush redBrush = new SolidBrush(Color.Red);
// Create location and size of ellipse.
float x = 0.0F;
float y = 0.0F;
float width = 200.0F;
float height = 100.0F;
// Create start and sweep angles.
float startAngle =  0.0F;
float sweepAngle = 45.0F;
// Fill pie to screen.
e.Graphics.FillPie(redBrush, x, y, width, height, startAngle, sweepAngle);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the <paramref name="startAngle"/> and <paramref name="sweepAngle"/> parameters, and the arc between the intersections of those radial lines with the ellipse.</para>
        <para>If the <paramref name="sweepAngle"/> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])">
      <overload>
        Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.Point"/> structures.
      </overload>
      <summary>
        <para>Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.Point"/> structures.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.Point"/> structures that represent the vertices of the polygon to fill.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid blue brush.</term>
          </item>
          <item>
            <term>Creates an array of seven points to define a polygon.</term>
          </item>
          <item>
            <term>Fills the polygonal area on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillPolygonPoint(e As PaintEventArgs)
&apos; Create solid brush.
Dim blueBrush As New SolidBrush(Color.Blue)
&apos; Create points that define polygon.
Dim point1 As New Point(50, 50)
Dim point2 As New Point(100, 25)
Dim point3 As New Point(200, 5)
Dim point4 As New Point(250, 50)
Dim point5 As New Point(300, 100)
Dim point6 As New Point(350, 200)
Dim point7 As New Point(250, 250)
Dim curvePoints As Point() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Draw polygon to screen.
e.Graphics.FillPolygon(blueBrush, curvePoints)
End Sub
        </code>
        <code lang="C#">public void FillPolygonPoint(PaintEventArgs e)
{
// Create solid brush.
SolidBrush blueBrush = new SolidBrush(Color.Blue);
// Create points that define polygon.
Point point1 = new Point( 50,  50);
Point point2 = new Point(100,  25);
Point point3 = new Point(200,   5);
Point point4 = new Point(250,  50);
Point point5 = new Point(300, 100);
Point point6 = new Point(350, 200);
Point point7 = new Point(250, 250);
Point[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Draw polygon to screen.
e.Graphics.FillPolygon(blueBrush, curvePoints);
}
        </code>
      </example>
      <remarks>
        <para>Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)">
      <summary>
        <para>Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.Point"/> structures using the specified fill mode.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.Point"/> structures that represent the vertices of the polygon to fill.
      </param>
      <param name="fillMode">
        Member of the <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration that determines the style of the fill.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid blue brush.</term>
          </item>
          <item>
            <term>Creates an array of seven points to define a polygon.</term>
          </item>
          <item>
            <term>Sets the fill mode to <see langword="FillMode.Winding"/>.</term>
          </item>
          <item>
            <term>Fills the polygonal area on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillPolygonPointFillMode(e As PaintEventArgs)
&apos; Create solid brush.
Dim blueBrush As New SolidBrush(Color.Blue)
&apos; Create points that define polygon.
Dim point1 As New Point(50, 50)
Dim point2 As New Point(100, 25)
Dim point3 As New Point(200, 5)
Dim point4 As New Point(250, 50)
Dim point5 As New Point(300, 100)
Dim point6 As New Point(350, 200)
Dim point7 As New Point(250, 250)
Dim curvePoints As Point() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Define fill mode.
Dim newFillMode As FillMode = FillMode.Winding
&apos; Draw polygon to screen.
e.Graphics.FillPolygon(blueBrush, curvePoints, newFillMode)
End Sub
        </code>
        <code lang="C#">public void FillPolygonPointFillMode(PaintEventArgs e)
{
// Create solid brush.
SolidBrush blueBrush = new SolidBrush(Color.Blue);
// Create points that define polygon.
Point point1 = new Point( 50,  50);
Point point2 = new Point(100,  25);
Point point3 = new Point(200,   5);
Point point4 = new Point(250,  50);
Point point5 = new Point(300, 100);
Point point6 = new Point(350, 200);
Point point7 = new Point(250, 250);
Point[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Define fill mode.
FillMode newFillMode = FillMode.Winding;
// Draw polygon to screen.
e.Graphics.FillPolygon(blueBrush, curvePoints, newFillMode);
}
        </code>
      </example>
      <remarks>
        <para>Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
      <summary>
        <para>Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.PointF"/> structures .</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that represent the vertices of the polygon to fill.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid blue brush.</term>
          </item>
          <item>
            <term>Creates an array of seven points to define a polygon.</term>
          </item>
          <item>
            <term>Fills the polygonal area on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillPolygonPointF(e As PaintEventArgs)
&apos; Create solid brush.
Dim blueBrush As New SolidBrush(Color.Blue)
&apos; Create points that define polygon.
Dim point1 As New PointF(50F, 50F)
Dim point2 As New PointF(100F, 25F)
Dim point3 As New PointF(200F, 5F)
Dim point4 As New PointF(250F, 50F)
Dim point5 As New PointF(300F, 100F)
Dim point6 As New PointF(350F, 200F)
Dim point7 As New PointF(250F, 250F)
Dim curvePoints As PointF() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Fill polygon to screen.
e.Graphics.FillPolygon(blueBrush, curvePoints)
End Sub
        </code>
        <code lang="C#">public void FillPolygonPointF(PaintEventArgs e)
{
// Create solid brush.
SolidBrush blueBrush = new SolidBrush(Color.Blue);
// Create points that define polygon.
PointF point1 = new PointF( 50.0F,  50.0F);
PointF point2 = new PointF(100.0F,  25.0F);
PointF point3 = new PointF(200.0F,   5.0F);
PointF point4 = new PointF(250.0F,  50.0F);
PointF point5 = new PointF(300.0F, 100.0F);
PointF point6 = new PointF(350.0F, 200.0F);
PointF point7 = new PointF(250.0F, 250.0F);
PointF[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Fill polygon to screen.
e.Graphics.FillPolygon(blueBrush, curvePoints);
}
        </code>
      </example>
      <remarks>
        <para>Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)">
      <summary>
        <para>Fills the interior of a polygon defined by an array of points  specified by <see cref="T:System.Drawing.PointF"/> structures using the specified fill mode.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="points">
        Array of <see cref="T:System.Drawing.PointF"/> structures that represent the vertices of the polygon to fill.
      </param>
      <param name="fillMode">
        Member of the <see cref="T:System.Drawing.Drawing2D.FillMode"/> enumeration that determines the style of the fill.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following action:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid blue brush.</term>
          </item>
          <item>
            <term>Creates an array of seven points to define a polygon.</term>
          </item>
          <item>
            <term>Sets the fill mode to <see langword="FillMode.Winding"/>.</term>
          </item>
          <item>
            <term>Fills the polygonal area on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillPolygonPointFFillMode(e As PaintEventArgs)
&apos; Create solid brush.
Dim blueBrush As New SolidBrush(Color.Blue)
&apos; Create points that define polygon.
Dim point1 As New PointF(50F, 50F)
Dim point2 As New PointF(100F, 25F)
Dim point3 As New PointF(200F, 5F)
Dim point4 As New PointF(250F, 50F)
Dim point5 As New PointF(300F, 100F)
Dim point6 As New PointF(350F, 200F)
Dim point7 As New PointF(250F, 250F)
Dim curvePoints As PointF() =  {point1, point2, point3, point4, _
point5, point6, point7}
&apos; Define fill mode.
Dim newFillMode As FillMode = FillMode.Winding
&apos; Fill polygon to screen.
e.Graphics.FillPolygon(blueBrush, curvePoints, newFillMode)
End Sub
        </code>
        <code lang="C#">public void FillPolygonPointFFillMode(PaintEventArgs e)
{
// Create solid brush.
SolidBrush blueBrush = new SolidBrush(Color.Blue);
// Create points that define polygon.
PointF point1 = new PointF( 50.0F,  50.0F);
PointF point2 = new PointF(100.0F,  25.0F);
PointF point3 = new PointF(200.0F,   5.0F);
PointF point4 = new PointF(250.0F,  50.0F);
PointF point5 = new PointF(300.0F, 100.0F);
PointF point6 = new PointF(350.0F, 200.0F);
PointF point7 = new PointF(250.0F, 250.0F);
PointF[] curvePoints =
{
point1,
point2,
point3,
point4,
point5,
point6,
point7
};
// Define fill mode.
FillMode newFillMode = FillMode.Winding;
// Fill polygon to screen.
e.Graphics.FillPolygon(blueBrush, curvePoints, newFillModex3);
}
        </code>
      </example>
      <remarks>
        <para>Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)">
      <overload>
        Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.
      </overload>
      <summary>
        <para>Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the rectangle to fill.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the rectangle to fill.
      </param>
      <param name="width">
        Width of the rectangle to fill.
      </param>
      <param name="height">
        Height of the rectangle to fill.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following action:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid blue brush.</term>
          </item>
          <item>
            <term>Creates the location and size of a rectangle.</term>
          </item>
          <item>
            <term>Fills the rectangular area on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillRectangleInt(e As PaintEventArgs)
&apos; Create solid brush.
Dim blueBrush As New SolidBrush(Color.Blue)
&apos; Create location and size of rectangle.
Dim x As Integer = 0
Dim y As Integer = 0
Dim width As Integer = 200
Dim height As Integer = 200
&apos; Fill rectangle to screen.
e.Graphics.FillRectangle(blueBrush, x, y, width, height)
End Sub
        </code>
        <code lang="C#">public void FillRectangleInt(PaintEventArgs e)
{
// Create solid brush.
SolidBrush blueBrush = new SolidBrush(Color.Blue);
// Create location and size of rectangle.
int x = 0;
int y = 0;
int width = 200;
int height = 200;
// Fill rectangle to screen.
e.Graphics.FillRectangle(blueBrush, x, y, width, height);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of the rectangle defined by the <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> parameters.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)">
      <summary>
        <para>Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle to fill.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following action:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid blue brush.</term>
          </item>
          <item>
            <term>Creates a rectangle.</term>
          </item>
          <item>
            <term>Fills the rectangular area on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillRectangleRectangle(e As PaintEventArgs)
&apos; Create solid brush.
Dim blueBrush As New SolidBrush(Color.Blue)
&apos; Create rectangle.
Dim rect As New Rectangle(0, 0, 200, 200)
&apos; Fill rectangle to screen.
e.Graphics.FillRectangle(blueBrush, rect)
End Sub
        </code>
        <code lang="C#">public void FillRectangleRectangle(PaintEventArgs e)
{
// Create solid brush.
SolidBrush blueBrush = new SolidBrush(Color.Blue);
// Create rectangle.
Rectangle rect = new Rectangle( 0, 0, 200, 200);
// Fill rectangle to screen.
e.Graphics.FillRectangle(blueBrush, rect);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)">
      <summary>
        <para>Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to fill.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following action:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid blue brush.</term>
          </item>
          <item>
            <term>Creates a rectangle.</term>
          </item>
          <item>
            <term>Fills the rectangular area on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillRectangleRectangleF(e As PaintEventArgs)
&apos; Create solid brush.
Dim blueBrush As New SolidBrush(Color.Blue)
&apos; Create rectangle.
Dim rect As New RectangleF(0F, 0F, 200F, 200F)
&apos; Fill rectangle to screen.
e.Graphics.FillRectangle(blueBrush, rect)
End Sub
        </code>
        <code lang="C#">public void FillRectangleRectangleF(PaintEventArgs e)
{
// Create solid brush.
SolidBrush blueBrush = new SolidBrush(Color.Blue);
// Create rectangle.
RectangleF rect = new RectangleF( 0.0F, 0.0F, 200.0F, 200.0F);
// Fill rectangle to screen.
e.Graphics.FillRectangle(blueBrush, rect);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="x">
        x-coordinate of the upper-left corner of the rectangle to fill.
      </param>
      <param name="y">
        y-coordinate of the upper-left corner of the rectangle to fill.
      </param>
      <param name="width">
        Width of the rectangle to fill.
      </param>
      <param name="height">
        Height of the rectangle to fill.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following action:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid blue brush.</term>
          </item>
          <item>
            <term>Creates the location and size of a rectangle.</term>
          </item>
          <item>
            <term>Fills the rectangular area on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillRectangleFloat(e As PaintEventArgs)
&apos; Create solid brush.
Dim blueBrush As New SolidBrush(Color.Blue)
&apos; Create location and size of rectangle.
Dim x As Single = 0F
Dim y As Single = 0F
Dim width As Single = 200F
Dim height As Single = 200F
&apos; Fill rectangle to screen.
e.Graphics.FillRectangle(blueBrush, x, y, width, height)
End Sub
        </code>
        <code lang="C#">public void FillRectangleFloat(PaintEventArgs e)
{
// Create solid brush.
SolidBrush blueBrush = new SolidBrush(Color.Blue);
// Create location and size of rectangle.
float x = 0.0F;
float y = 0.0F;
float width = 200.0F;
float height = 200.0F;
// Fill rectangle to screen.
e.Graphics.FillRectangle(blueBrush, x, y, width, height);
}
        </code>
      </example>
      <remarks>
        <para>This method fills the interior of the rectangle defined by the <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> parameters.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])">
      <overload>
        Fills the interiors of a series of rectangles specified by <see cref="T:System.Drawing.Rectangle"/> structures.
      </overload>
      <summary>
        <para>Fills the interiors of a series of rectangles specified by <see cref="T:System.Drawing.Rectangle"/> structures.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="rects">
        Array of <see cref="T:System.Drawing.Rectangle"/> structures that represent the rectangles to fill.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following action:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid blue brush.</term>
          </item>
          <item>
            <term>Creates an array of three rectangles.</term>
          </item>
          <item>
            <term>Fills the three rectangular areas on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillRectanglesRectangle(e As PaintEventArgs)
&apos; Create solid brush.
Dim blueBrush As New SolidBrush(Color.Blue)
&apos; Create array of rectangles.
Dim rects As Rectangle() =  {New Rectangle(0, 0, 100, 200), _
New Rectangle(100, 200, 250, 50), _
New Rectangle(300, 0, 50, 100)}
&apos; Fill rectangles to screen.
e.Graphics.FillRectangles(blueBrush, rects)
End Sub
        </code>
        <code lang="C#">public void FillRectanglesRectangle(PaintEventArgs e)
{
// Create solid brush.
SolidBrush blueBrush = new SolidBrush(Color.Blue);
// Create array of rectangles.
Rectangle[] rects =
{
new Rectangle(  0,   0, 100, 200),
new Rectangle(100, 200, 250,  50),
new Rectangle(300,   0,  50, 100)
};
// Fill rectangles to screen.
e.Graphics.FillRectangles(blueBrush, rects);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])">
      <summary>
        <para>Fills the interiors of a series of rectangles specified by <see cref="T:System.Drawing.RectangleF"/> structures.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="rects">
        Array of <see cref="T:System.Drawing.RectangleF"/> structures that represent the rectangles to fill.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following action:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid blue brush.</term>
          </item>
          <item>
            <term>Creates an array of three rectangles.</term>
          </item>
          <item>
            <term>Fills the three rectangular areas on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillRectanglesRectangleF(e As PaintEventArgs)
&apos; Create solid brush.
Dim blueBrush As New SolidBrush(Color.Blue)
&apos; Create array of rectangles.
Dim rects As RectangleF() =  {New RectangleF(0F, 0F, 100F, 200F), _
New RectangleF(100F, 200F, 250F, 50F), _
New RectangleF(300F, 0F, 50F, 100F)}
&apos; Fill rectangles to screen.
e.Graphics.FillRectangles(blueBrush, rects)
End Sub
        </code>
        <code lang="C#">public void FillRectanglesRectangleF(PaintEventArgs e)
{
// Create solid brush.
SolidBrush blueBrush = new SolidBrush(Color.Blue);
// Create array of rectangles.
RectangleF[] rects =
{
new RectangleF(  0.0F,   0.0F, 100.0F, 200.0F),
new RectangleF(100.0F, 200.0F, 250.0F,  50.0F),
new RectangleF(300.0F,   0.0F,  50.0F, 100.0F)
};
// Fill rectangles to screen.
e.Graphics.FillRectangles(blueBrush, rects);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)">
      <summary>
        <para>Fills the interior of a <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="brush">
        <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of the fill.
      </param>
      <param name="region">
        <see cref="T:System.Drawing.Region"/> object that represents the area to fill.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following action:</para>
        <list type="bullet">
          <item>
            <term>Creates a solid blue brush.</term>
          </item>
          <item>
            <term>Creates a rectangle.</term>
          </item>
          <item>
            <term>Creates a rectangular region.</term>
          </item>
          <item>
            <term>Fills the rectangular region on the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FillRegionRectangle(e As PaintEventArgs)
&apos; Create solid brush.
Dim blueBrush As New SolidBrush(Color.Blue)
&apos; Create rectangle for region.
Dim fillRect As New Rectangle(100, 100, 200, 200)
&apos; Create region for fill.
Dim fillRegion As New [Region](fillRect)
&apos; Fill region to screen.
e.Graphics.FillRegion(blueBrush, fillRegion)
End Sub
        </code>
        <code lang="C#">public void FillRegionRectangle(PaintEventArgs e)
{
// Create solid brush.
SolidBrush blueBrush = new SolidBrush(Color.Blue);
// Create rectangle for region.
Rectangle fillRect = new Rectangle(100, 100, 200, 200);
// Create region for fill.
Region fillRegion = new Region(fillRect);
// Fill region to screen.
e.Graphics.FillRegion(blueBrush, fillRegion);
}
        </code>
      </example>
      <remarks>
        <para>A <see cref="T:System.Drawing.Region"/> object is composed of rectangles and paths. If the region is not closed, an additional segment is added from the last point to the first point to close it.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.Flush">
      <overload>
        Forces execution of all pending graphics operations and returns immediately without waiting for the operations to finish.
      </overload>
      <summary>
        <para>Forces execution of all pending graphics operations and returns immediately without waiting for the operations to finish.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method starts a flush and returns immediately without waiting for any currently executing graphics operation to finish.</para>
        <para>In version 1.0 of GDI+, this method flushes only GDI operations.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)">
      <summary>
        <para>Forces execution of all pending graphics operations with the method waiting or not waiting, as specified, to return before the operations finish.</para>
      </summary>
      <param name="intention">
        Member of the <see cref="T:System.Drawing.Drawing2D.FlushIntention"/> enumeration that specifies whether the method returns immediately or waits for any existing operations to finish.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>A value of <see langword="FlushIntention.Flush"/> for the <paramref name="intention"/> parameter specifies that the method return immediately after beginning the flush, while a value of <see langword="FlushIntention.Sync"/> specifies that the method wait before returning until any existing operations finish.</para>
        <para>In version 1.0 of GDI+, this method flushes only GDI operations.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FromHdc(System.IntPtr)">
      <overload>
        Creates a new <see cref="T:System.Drawing.Graphics"/> object from the specified handle to a device context.
      </overload>
      <summary>
        <para>Creates a new <see cref="T:System.Drawing.Graphics"/> object from the specified handle to a device context.</para>
      </summary>
      <param name="hdc">
        Handle to a device context.
      </param>
      <returns>
        <para>This method returns a new <see cref="T:System.Drawing.Graphics"/> object for the specified device context.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following action:</para>
        <list type="bullet">
          <item>
            <term>Creates an internal pointer type variable <paramref name="hdc"/> and sets it to the handle to the device context of the graphics object of the form.</term>
          </item>
          <item>
            <term>Creates a new graphics object using <paramref name="hdc"/>.</term>
          </item>
          <item>
            <term>Draws a rectangle with the new graphics object (on the screen).</term>
          </item>
          <item>
            <term>Releases the new graphics object using <paramref name="hdc"/>.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FromHdcHdc(e As PaintEventArgs)
&apos; Get handle to device context.
Dim hdc As IntPtr = e.Graphics.GetHdc()
&apos; Create new graphics object using handle to device context.
Dim newGraphics As Graphics = Graphics.FromHdc(hdc)
&apos; Draw rectangle to screen.
newGraphics.DrawRectangle(New Pen(Color.Red, 3), 0, 0, 200, 100)
&apos; Release handle to device context.
e.Graphics.ReleaseHdc(hdc)
End Sub
        </code>
        <code lang="C#">public void FromHdcHdc(PaintEventArgs e)
{
// Get handle to device context.
IntPtr hdc = e.Graphics.GetHdc();
// Create new graphics object using handle to device context.
Graphics newGraphics = Graphics.FromHdc(hdc);
// Draw rectangle to screen.
newGraphics.DrawRectangle(new Pen(Color.Red, 3), 0, 0, 200, 100);
// Release handle to device context.
e.Graphics.ReleaseHdc(hdc);
}
        </code>
      </example>
      <remarks>
        <para>Even if the display device has an associated ICM color profile, GDI+ will not use that profile by default. To enable ICM for a <see cref="T:System.Drawing.Graphics"/> object, construct the <see langword="Graphics"/> object from an HDC after you pass the HDC (and ICM_ON) to the SetICMMode function. Then any drawing done by the <see langword="Graphics"/> object will be adjusted according to the ICM profile associated with the display device. Enabling ICM will result in slower performance.</para>
        <para>The state of the device context (mapping mode, logical unit, and the like) at the time you call <see langword="Graphics.FromHdc"/> can affect rendering done by the <see langword="Graphics"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)">
      <summary>
        <para>Creates a new <see cref="T:System.Drawing.Graphics"/> object from the specified handle to a device context and handle to a device.</para>
      </summary>
      <param name="hdc">
        Handle to a device context.
      </param>
      <param name="hdevice">
        Handle to a device.
      </param>
      <returns>
        <para>This method returns a new <see cref="T:System.Drawing.Graphics"/> object for the specified device context and device.</para>
      </returns>
      <remarks>
        <para>Even if the display device has an associated ICM color profile, GDI+ will not use that profile by default. To enable ICM for a <see cref="T:System.Drawing.Graphics"/> object, construct the <see langword="Graphics"/> object from an HDC after you pass the HDC (and ICM_ON) to the SetICMMode function. Then any drawing done by the <see langword="Graphics"/> object will be adjusted according to the ICM profile associated with the display device. Enabling ICM will result in slower performance.</para>
        <para>The state of the device context (mapping mode, logical unit, and the like) at the time you call <see langword="Graphics.FromHdc"/> can affect rendering done by the <see langword="Graphics"/> object.</para>
         <para>The device handle is typically used to query specific printer capabilities.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FromHdcInternal(System.IntPtr)">
      <summary>
        <para>Internal method. Do not use.</para>
      </summary>
      <param name="hdc">
        Handle to a device context.
      </param>
      <returns>
        <para>This method returns a new <see cref="T:System.Drawing.Graphics"/> object for the specified device context.</para>
      </returns>
      <remarks>
        <para>This method is an internal method and should not be used. </para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FromHwnd(System.IntPtr)">
      <summary>
        <para>Creates a new <see cref="T:System.Drawing.Graphics"/> object from the specified handle to a window.</para>
      </summary>
      <param name="hwnd">
        Handle to a window.
      </param>
      <returns>
        <para>This method returns a new <see cref="T:System.Drawing.Graphics"/> object for the specified window handle.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler, as well as <paramref name="thisForm"/>, the <see cref="T:System.Windows.Forms.Form"/> object for the example. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a new internal pointer variable <paramref name="hwnd"/> and sets it to the handle of the example&apos;s form.</term>
          </item>
          <item>
            <term>Creates a new <see cref="T:System.Drawing.Graphics"/> object from the handle.</term>
          </item>
          <item>
            <term>Draws a rectangle to the new <see cref="T:System.Drawing.Graphics"/> object using a red pen.</term>
          </item>
          <item>
            <term>Disposes the new <see cref="T:System.Drawing.Graphics"/> object.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FromHwndHwnd(e As PaintEventArgs)
&apos; Get handle to form.
Dim hwnd As New IntPtr()
hwnd = thisForm.Handle
&apos; Create new graphics object using handle to window.
Dim newGraphics As Graphics = Graphics.FromHwnd(hwnd)
&apos; Draw rectangle to screen.
newGraphics.DrawRectangle(New Pen(Color.Red, 3), 0, 0, 200, 100)
&apos; Dispose of new graphics.
newGraphics.Dispose()
End Sub
        </code>
        <code lang="C#">public void FromHwndHwnd(PaintEventArgs e)
{
// Get handle to form.
IntPtr hwnd = new IntPtr();
hwnd = thisForm.Handle;
// Create new graphics object using handle to window.
Graphics newGraphics = Graphics.FromHwnd(hwnd);
// Draw rectangle to screen.
newGraphics.DrawRectangle(new Pen(Color.Red, 3), 0, 0, 200, 100);
// Dispose of new graphics.
newGraphics.Dispose();
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.FromHwndInternal(System.IntPtr)">
      <summary>
        <para>Internal method. Do not use.</para>
      </summary>
      <param name="hwnd">
        Handle to a window.
      </param>
      <returns>
        <para>This method returns a new <see cref="T:System.Drawing.Graphics"/> object for the specified window handle.</para>
      </returns>
      <remarks>
        <para>This method is an internal method and should not be used. </para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)">
      <summary>
        <para>Creates a new <see cref="T:System.Drawing.Graphics"/> object from the specified <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <param name="image">
        <see cref="T:System.Drawing.Image"/> object from which to create the new <see cref="T:System.Drawing.Graphics"/> object.
      </param>
      <returns>
        <para>This method returns a new <see cref="T:System.Drawing.Graphics"/> for the specified <see cref="T:System.Drawing.Image"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following action:</para>
        <list type="bullet">
          <item>
            <term>Creates an <see cref="T:System.Drawing.Image"/> object from a graphics file SampImag.jpg in the example folder.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Graphics"/> object from the <see cref="T:System.Drawing.Image"/> object.</term>
          </item>
          <item>
            <term>Alters the image by filling a rectangle within it.</term>
          </item>
          <item>
            <term>Draws the <see cref="T:System.Drawing.Image"/> object to the screen.</term>
          </item>
          <item>
            <term>Releases the created <see cref="T:System.Drawing.Graphics"/> object.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FromImageImage(e As PaintEventArgs)
&apos; Create image.
Dim imageFile As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
&apos; Create graphics object for alteration.
Dim newGraphics As Graphics = Graphics.FromImage(imageFile)
&apos; Alter image.
newGraphics.FillRectangle(New SolidBrush(Color.Black), _
100, 50, 100, 100)
&apos; Draw image to screen.
e.Graphics.DrawImage(imageFile, New PointF(0F, 0F))
&apos; Dispose of graphics object.
newGraphics.Dispose()
End Sub
        </code>
        <code lang="C#">public void FromImageImage(PaintEventArgs e)
{
// Create image.
Image imageFile = Image.FromFile(&quot;SampImag.jpg&quot;);
// Create graphics object for alteration.
Graphics newGraphics = Graphics.FromImage(imageFile);
// Alter image.
newGraphics.FillRectangle(new SolidBrush(Color.Black), 100, 50, 100, 100);
// Draw image to screen.
e.Graphics.DrawImage(imageFile, new PointF(0.0F, 0.0F));
// Release graphics object.
newGraphics.Dispose();
}
        </code>
      </example>
      
      <remarks>
        <para>If the image has an indexed pixel format, this method throws an exception with the message, "A Graphics object cannot be created from an image that has an indexed pixel format." The indexed pixel formats are shown in the following list.</para>
        
        <list type="bullet">
          <item>
             <term>PixelFormat.Format1bppIndexed</term>
          </item>
          <item>
            <term>PixelFormat.Format4bppIndexed</term>
          </item>
          <item>
            <term>PixelFormat.Format8bppIndexed</term>
          </item>
        </list>
        
        <para>This method also throws an exception if the image has any of the following pixel formats.</para>
        
        <list type="bullet">
          <item>
             <term>PixelFormat.Undefined</term>
          </item>
          <item>
            <term>PixelFormat.DontCare</term>
          </item>
          <item>
            <term>PixelFormat.Format16bppArgb1555</term>
          </item>
          <item>
            <term>PixelFormat.Format16bppGrayScale</term>
          </item>
        </list>
        
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.GetHalftonePalette">
      <summary>
        <para>Gets a handle to the current Windows halftone palette.</para>
      </summary>
      <returns>
        <para>Internal pointer that specifies the handle to the palette.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Defines interoperability <see langword="DllImportAttribute"/> attributes for the Windows DLL file gdi32.dll, which contains the necessary GDI functions.</term>
          </item>
          <item>
            <term>Defines the <see langword="SelectPalette"/> and <see langword="RealizePalette"/> functions in that DLL as external.</term>
          </item>
          <item>
            <term>Creates an image from an existing image file SampImag.jpg (which must be in the same folder as the example code file) and draws the image to the screen.</term>
          </item>
          <item>
            <term>Creates internal pointer type variables and sets their values to the handle to the <paramref name="e"/><see langword="."/><paramref name="Graphics"/> object and to the current Windows halftone palette, respectively.</term>
          </item>
          <item>
            <term>Selects and realizes the halftone palette.</term>
          </item>
          <item>
            <term>Creates a new graphics object using the <paramref name="hdc"/> parameter.</term>
          </item>
          <item>
            <term>Draws the image again.</term>
          </item>
          <item>
            <term>Releases the handle to the device context.</term>
          </item>
        </list>
        <para>The result is two renderings of the sample image: one with the 16-bit palette and one with the 8-bit palette.</para>
        <code lang="VB">&lt;System.Runtime.InteropServices.DllImportAttribute(&quot;gdi32.dll&quot;)&gt;  _
Private Shared Function SelectPalette(hdc As IntPtr, _
htPalette As IntPtr, bForceBackground As Boolean) As IntPtr
End Function
&lt;System.Runtime.InteropServices.DllImportAttribute(&quot;gdi32.dll&quot;)&gt;  _
Private Shared Function RealizePalette(hdc As IntPtr) As Integer
End Function
Public Sub GetHalftonePaletteVoid(e As PaintEventArgs)
&apos; Create and draw image.
Dim imageFile As Image = Image.FromFile(&quot;SampImag.jpg&quot;)
e.Graphics.DrawImage(imageFile, New Point(0, 0))
&apos; Get handle to device context.
Dim hdc As IntPtr = e.Graphics.GetHdc()
&apos; Get handle to halftone palette.
Dim htPalette As IntPtr = Graphics.GetHalftonePalette()
&apos; Select and realize new palette.
SelectPalette(hdc, htPalette, True)
RealizePalette(hdc)
&apos; Create new graphics object.
Dim newGraphics As Graphics = Graphics.FromHdc(hdc)
&apos; Draw image with new palette.
newGraphics.DrawImage(imageFile, 300, 0)
&apos; Release handle to device context.
e.Graphics.ReleaseHdc(hdc)
End Sub
        </code>
        <code lang="C#">[System.Runtime.InteropServices.DllImportAttribute(&quot;gdi32.dll&quot;)]
private static extern IntPtr SelectPalette(
IntPtr hdc,
IntPtr htPalette,
bool bForceBackground);
[System.Runtime.InteropServices.DllImportAttribute(&quot;gdi32.dll&quot;)]
private static extern int RealizePalette(IntPtr hdc);
public void GetHalftonePaletteVoid(PaintEventArgs e)
{
// Create and draw image.
Image imageFile = Image.FromFile(&quot;SampImag.jpg&quot;);
e.Graphics.DrawImage(imageFile, new Point(0, 0));
// Get handle to device context.
IntPtr hdc = e.Graphics.GetHdc();
// Get handle to halftone palette.
IntPtr htPalette = Graphics.GetHalftonePalette();
// Select and realize new palette.
SelectPalette(hdc, htPalette, true);
RealizePalette(hdc);
// Create new graphics object.
Graphics newGraphics = Graphics.FromHdc(hdc);
// Draw image with new palette.
newGraphics.DrawImage(imageFile, 300, 0);
// Release handle to device context.
e.Graphics.ReleaseHdc(hdc);
}
        </code>
      </example>
      <remarks>
        <para>The purpose of the <see langword="GetHalftonePalette"/> method is to enable GDI+ to produce a better quality halftone when the display uses 8 bits per pixel. To display an image using the halftone palette, use the following procedure. </para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.GetHdc">
      <summary>
        <para>Gets the handle to the device context associated with this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <returns>
        <para>Handle to the device context associated with this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The example illustrates calling a Windows GDI function to perform the same task as a GDI+ <see cref="T:System.Drawing.Graphics"/> object method. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Defines the interoperability <see langword="DllImportAttribute"/> attribute for the Windows DLL file gdi32.dll. This DLL contains the desired GDI function.</term>
          </item>
          <item>
            <term>Defines the <see cref="T:System.Drawing.Rectangle"/> function in that DLL as external.</term>
          </item>
          <item>
            <term>Creates a red pen.</term>
          </item>
          <item>
            <term>With the pen, draws a rectangle to the screen using the GDI+ <see cref="M:System.Drawing.Graphics.DrawRectangle"/> method.</term>
          </item>
          <item>
            <term>Defines an internal pointer type variable <paramref name="hdc"/> and sets its value to the handle to the device context of the form.</term>
          </item>
          <item>
            <term>Draws a rectangle to the screen using the GDI <see cref="T:System.Drawing.Rectangle"/> function.</term>
          </item>
          <item>
            <term>Releases the device context represented by the <paramref name="hdc"/> parameter.</term>
          </item>
        </list>
        <code lang="VB">&lt;System.Runtime.InteropServices.DllImportAttribute(&quot;gdi32.dll&quot;)&gt;  _
Private Shared Function Rectangle(hdc As IntPtr, _
ulCornerX As Integer, ulCornerY As Integer, lrCornerX As Integer, _
lrCornerY As Integer) As Boolean
End Function
Public Sub GetHdcForGDI(e As PaintEventArgs)
&apos; Create pen.
Dim redPen As New Pen(Color.Red, 1)
&apos; Draw rectangle with GDI+.
e.Graphics.DrawRectangle(redPen, 10, 10, 100, 50)
&apos; Get handle to device context.
Dim hdc As IntPtr = e.Graphics.GetHdc()
&apos; Draw rectangle with GDI using default pen.
Rectangle(hdc, 10, 70, 110, 120)
&apos; Release handle to device context.
e.Graphics.ReleaseHdc(hdc)
End Sub
        </code>
        <code lang="C#">[System.Runtime.InteropServices.DllImportAttribute(&quot;gdi32.dll&quot;)]
private static extern bool Rectangle(
IntPtr hdc,
int ulCornerX, int ulCornerY,
int lrCornerX, int lrCornerY);
public void GetHdcForGDI(PaintEventArgs e)
{
// Create pen.
Pen redPen = new Pen(Color.Red, 1);
// Draw rectangle with GDI+.
e.Graphics.DrawRectangle(redPen, 10, 10, 100, 50);
// Get handle to device context.
IntPtr hdc = new IntPtr();
hdc = e.Graphics.GetHdc();
// Draw rectangle with GDI using default pen.
Rectangle(hdc, 10, 70, 110, 120);
// Release handle to device context.
e.Graphics.ReleaseHdc(hdc);
}
        </code>
      </example>
      <remarks>
        <para>The device context is a Windows GDI-based structure that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output. This method returns that device context with the exception of a font. Because a font is not selected, calls to the <see langword="Font.FromHdc"/> method using a handle returned from the <see langword="GetHdc"/> method will fail.</para>
        <para>Calls to the <see langword="GetHdc"/> and <see langword="ReleaseHdc"/> methods must appear in pairs. During the scope of a <see langword="GetHdc"/>-<see langword="ReleaseHdc"/> method pair, you usually make only calls to GDI functions. Calls in that scope made to GDI+ methods of the <see cref="T:System.Drawing.Graphics"/> object that produced the <paramref name="hdc"/> parameter fail with an ObjectBusy error. Also, GDI+ ignores any state changes made to the <see cref="T:System.Drawing.Graphics"/> object of the <paramref name="hdc"/> parameter in subsequent operations.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)">
      <summary>
        <para>Gets the nearest color to the specified <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <param name="color">
        <see cref="T:System.Drawing.Color"/> structure for which to find a match.
      </param>
      <returns>
        <para>The method returns a <see cref="T:System.Drawing.Color"/> structure that represents the nearest color to the one specified with the <paramref name="color"/> parameter.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an arbitrary color with ARGB coordinates (255, 165, 63, 136).</term>
          </item>
          <item>
            <term>Creates a solid brush and sets its color to the specified color.</term>
          </item>
          <item>
            <term>Fills an ellipse using the arbitrary color.</term>
          </item>
          <item>
            <term>Creates a second color and sets its value to the nearest system ARGB color.</term>
          </item>
          <item>
            <term>Fills a second ellipse with this color.</term>
          </item>
        </list>
        <para>The result is two ellipses: the first drawn with the arbitrary, specified color and the second drawn with the system color nearest the specified color.</para>
        <code lang="VB">Public Sub GetNearestColorColor(e As PaintEventArgs)
&apos; Create solid brush with arbitrary color.
Dim arbColor As Color = Color.FromArgb(255, 165, 63, 136)
Dim arbBrush As New SolidBrush(arbColor)
&apos; Fill ellipse on screen.
e.Graphics.FillEllipse(arbBrush, 0, 0, 200, 100)
&apos; Get nearest color.
Dim realColor As Color = e.Graphics.GetNearestColor(arbColor)
Dim realBrush As New SolidBrush(realColor)
&apos; Fill ellipse on screen.
e.Graphics.FillEllipse(realBrush, 0, 100, 200, 100)
End Sub
        </code>
        <code lang="C#">public void GetNearestColorColor(PaintEventArgs e)
{
// Create solid brush with arbitrary color.
Color arbColor = Color.FromArgb(255, 165, 63 , 136);
SolidBrush arbBrush = new SolidBrush(arbColor);
// Fill ellipse on screen.
e.Graphics.FillEllipse(arbBrush, 0, 0, 200, 100);
// Get nearest color.
Color realColor = e.Graphics.GetNearestColor(arbColor);
SolidBrush realBrush = new SolidBrush(realColor);
// Fill ellipse on screen.
e.Graphics.FillEllipse(realBrush, 0, 100, 200, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)">
      <overload>
        Updates the clip region of this <see cref="T:System.Drawing.Graphics"/> object to the intersection of the current clip region and the specified <see cref="T:System.Drawing.Rectangle"/> structure.
      </overload>
      <summary>
        <para>Updates the clip region of this <see cref="T:System.Drawing.Graphics"/> object to the intersection of the current clip region and the specified <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle"/> structure to intersect with the current clip region.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle with upper-left corner at (0, 0) and sets the clipping region to this rectangle.</term>
          </item>
          <item>
            <term>Creates a second rectangle with upper-left corner at (100, 100) and sets the clipping region to the intersection of this rectangle and the current clipping region (the first rectangle).</term>
          </item>
          <item>
            <term>Fills a large rectangle that includes both previous rectangles with a solid blue brush.</term>
          </item>
          <item>
            <term>Resets the clipping region to infinite.</term>
          </item>
          <item>
            <term>Draws rectangles around the two clipping regions. It uses a black pen for the first clipping rectangle and a red pen for the second clipping region.</term>
          </item>
        </list>
        <para>The result is that only the intersection of the two rectangles is filled with blue.</para>
        <code lang="VB">Public Sub IntersectClipRectangle(e As PaintEventArgs)
&apos; Set clipping region.
Dim clipRect As New Rectangle(0, 0, 200, 200)
e.Graphics.SetClip(clipRect)
&apos; Update clipping region to intersection of
&apos; existing region with specified rectangle.
Dim intersectRect As New Rectangle(100, 100, 200, 200)
e.Graphics.IntersectClip(intersectRect)
&apos; Fill rectangle to demonstrate effective clipping region.
e.Graphics.FillRectangle(New SolidBrush(Color.Blue), 0, 0, _
500, 500)
&apos; Reset clipping region to infinite.
e.Graphics.ResetClip()
&apos; Draw clipRect and intersectRect to screen.
e.Graphics.DrawRectangle(New Pen(Color.Black), clipRect)
e.Graphics.DrawRectangle(New Pen(Color.Red), intersectRect)
End Sub
        </code>
        <code lang="C#">public void IntersectClipRectangle(PaintEventArgs e)
{
// Set clipping region.
Rectangle clipRect = new Rectangle(0, 0, 200, 200);
e.Graphics.SetClip(clipRect);
// Update clipping region to intersection of
// existing region with specified rectangle.
Rectangle intersectRect = new Rectangle(100, 100, 200, 200);
e.Graphics.IntersectClip(intersectRect);
// Fill rectangle to demonstrate effective clipping region.
e.Graphics.FillRectangle(new SolidBrush(Color.Blue), 0, 0, 500, 500);
// Reset clipping region to infinite.
e.Graphics.ResetClip();
// Draw clipRect and intersectRect to screen.
e.Graphics.DrawRectangle(new Pen(Color.Black), clipRect);
e.Graphics.DrawRectangle(new Pen(Color.Red), intersectRect);
}
        </code>
      </example>
      <remarks>
        <para>This method assigns to the <see langword="Clip"/> property of this <see cref="T:System.Drawing.Graphics"/> object the area represented by the intersection of the current clip region and the rectangle specified by the <paramref name="rect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)">
      <summary>
        <para>Updates the clip region of this <see cref="T:System.Drawing.Graphics"/> object to the intersection of the current clip region and the specified <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF"/> structure to intersect with the current clip region.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle with upper-left corner at (0, 0) and sets the clipping region to this rectangle.</term>
          </item>
          <item>
            <term>Creates a second rectangle with upper-left corner at (100, 100) and sets the clipping region to the intersection of this rectangle and the current clipping region (the first rectangle).</term>
          </item>
          <item>
            <term>Fills a large rectangle that includes both previous rectangles with a solid blue brush.</term>
          </item>
          <item>
            <term>Resets the clipping region to infinite.</term>
          </item>
          <item>
            <term>Draws rectangles around the two clipping regions. It uses a black pen for the first clipping rectangle and a red pen for the second clipping region.</term>
          </item>
        </list>
        <para>The result is that only the intersection of the two rectangles is filled with blue.</para>
        <code lang="VB">Public Sub IntersectClipRectangleF(e As PaintEventArgs)
&apos; Set clipping region.
Dim clipRect As New Rectangle(0, 0, 200, 200)
e.Graphics.SetClip(clipRect)
&apos; Update clipping region to intersection of
&apos; existing region with specified rectangle.
Dim intersectRectF As New RectangleF(100F, 100F, 200F, 200F)
e.Graphics.IntersectClip(intersectRectF)
&apos; Fill rectangle to demonstrate effective clipping region.
e.Graphics.FillRectangle(New SolidBrush(Color.Blue), 0, 0, _
500, 500)
&apos; Reset clipping region to infinite.
e.Graphics.ResetClip()
&apos; Draw clipRect and intersectRect to screen.
e.Graphics.DrawRectangle(New Pen(Color.Black), clipRect)
e.Graphics.DrawRectangle(New Pen(Color.Red), _
Rectangle.Round(intersectRectF))
End Sub
        </code>
        <code lang="C#">public void IntersectClipRectangleF(PaintEventArgs e)
{
// Set clipping region.
Rectangle clipRect = new Rectangle(0, 0, 200, 200);
e.Graphics.SetClip(clipRect);
// Update clipping region to intersection of
// existing region with specified rectangle.
RectangleF intersectRect = new RectangleF(100.0F, 100.0F, 200.0F, 200.0F);
e.Graphics.IntersectClip(intersectRect);
// Fill rectangle to demonstrate effective clipping region.
e.Graphics.FillRectangle(new SolidBrush(Color.Blue), 0, 0, 500, 500);
// Reset clipping region to infinite.
e.Graphics.ResetClip();
// Draw clipRect and intersectRect to screen.
e.Graphics.DrawRectangle(new Pen(Color.Black), clipRect);
e.Graphics.DrawRectangle(new Pen(Color.Red), (Rectangle)intersectRect);
}
        </code>
      </example>
      <remarks>
        <para>This method assigns to the <see langword="Clip"/> property of this <see cref="T:System.Drawing.Graphics"/> object the area represented by the intersection of the current clip region and the rectangle specified by the <paramref name="rect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Region)">
      <summary>
        <para>Updates the clip region of this <see cref="T:System.Drawing.Graphics"/> object to the intersection of the current clip region and the specified <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="region">
        <see cref="T:System.Drawing.Region"/> object to intersect with the current region.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle with upper-left corner at (0, 0).</term>
          </item>
          <item>
            <term>Creates a region and sets it to the rectangle, and sets the clipping region to this region.</term>
          </item>
          <item>
            <term>Creates a second rectangle with upper-left corner at (100, 100).</term>
          </item>
          <item>
            <term>Creates a region and sets it to the second rectangle, and sets the clipping region to the intersection of this region and the current clipping region (the first rectangle) using a combine mode of <see langword="CombineMode.Replace"/>.</term>
          </item>
          <item>
            <term>Fills a large rectangle that includes both previous regions with a solid blue brush.</term>
          </item>
          <item>
            <term>Resets the clipping region to infinite.</term>
          </item>
          <item>
            <term>Draws rectangles around the two clipping regions. It uses a black pen for the first clipping region and a red pen for the second clipping region.</term>
          </item>
        </list>
        <para>The result is that only the intersection of the two regions is filled with blue.</para>
        <code lang="VB">Public Sub IntersectClipRegion(e As PaintEventArgs)
&apos; Set clipping region.
Dim clipRect As New Rectangle(0, 0, 200, 200)
Dim clipRegion As New [Region](clipRect)
e.Graphics.SetClip(clipRegion, CombineMode.Replace)
&apos; Update clipping region to intersection of
&apos; existing region with specified rectangle.
Dim intersectRect As New Rectangle(100, 100, 200, 200)
Dim intersectRegion As New [Region](intersectRect)
e.Graphics.IntersectClip(intersectRegion)
&apos; Fill rectangle to demonstrate effective clipping region.
e.Graphics.FillRectangle(New SolidBrush(Color.Blue), 0, 0, _
500, 500)
&apos; Reset clipping region to infinite.
e.Graphics.ResetClip()
&apos; Draw clipRect and intersectRect to screen.
e.Graphics.DrawRectangle(New Pen(Color.Black), clipRect)
e.Graphics.DrawRectangle(New Pen(Color.Red), intersectRect)
End Sub
        </code>
        <code lang="C#">public void IntersectClipRegion(PaintEventArgs e)
{
// Set clipping region.
Rectangle clipRect = new Rectangle(0, 0, 200, 200);
Region clipRegion = new Region(clipRect);
e.Graphics.SetClip(clipRegion, CombineMode.Replace);
// Update clipping region to intersection of
//  existing region with specified rectangle.
Rectangle intersectRect = new Rectangle(100, 100, 200, 200);
Region intersectRegion = new Region(intersectRect);
e.Graphics.IntersectClip(intersectRegion);
// Fill rectangle to demonstrate effective clipping region.
e.Graphics.FillRectangle(new SolidBrush(Color.Blue), 0, 0, 500, 500);
// Reset clipping region to infinite.
e.Graphics.ResetClip();
// Draw clipRect and intersectRect to screen.
e.Graphics.DrawRectangle(new Pen(Color.Black), clipRect);
e.Graphics.DrawRectangle(new Pen(Color.Red), intersectRect);
}
        </code>
      </example>
      <remarks>
        <para>This method assigns to the <see langword="Clip"/> property of this <see cref="T:System.Drawing.Graphics"/> object the area represented by the intersection of the current clip region and the region specified by the <paramref name="region"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)">
      <overload>
        Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object.
      </overload>
      <summary>
        <para>Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="x">
        x coordinate of the point to test for visibility.
      </param>
      <param name="y">
        y coordinate of the point to test for visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the point defined by the <paramref name="x"/> and <paramref name="y"/> parameters is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <see langword="CombineMode.Replace"/>.</term>
          </item>
          <item>
            <term>Creates two points, one inside the clipping region and one outside.</term>
          </item>
          <item>
            <term>Tests each of the points for visibility and draws only the visible one.</term>
          </item>
        </list>
        <para>The result is one small red circle, which is within the clip region.</para>
        <code lang="VB">Public Sub IsVisibleInt(e As PaintEventArgs)
&apos; Set clip region.
Dim clipRegion As New [Region](New Rectangle(50, 50, 100, 100))
e.Graphics.SetClip(clipRegion, CombineMode.Replace)
&apos; Set up coordinates of points.
Dim x1 As Integer = 100
Dim y1 As Integer = 100
Dim x2 As Integer = 200
Dim y2 As Integer = 200
&apos; If point is visible, fill ellipse that represents it.
If e.Graphics.IsVisible(x1, y1) Then
e.Graphics.FillEllipse(New SolidBrush(Color.Red), x1, y1, _
10, 10)
End If
If e.Graphics.IsVisible(x2, y2) Then
e.Graphics.FillEllipse(New SolidBrush(Color.Blue), x2, y2, _
10, 10)
End If
End Sub
        </code>
        <code lang="C#">public void IsVisibleInt(PaintEventArgs e)
{
// Set clip region.
Region clipRegion = new Region(new Rectangle(50, 50, 100, 100));
e.Graphics.SetClip(clipRegion, CombineMode.Replace);
// Set up coordinates of points.
int x1 = 100;
int y1 = 100;
int x2 = 200;
int y2 = 200;
// If point is visible, fill ellipse that represents it.
if (e.Graphics.IsVisible(x1, y1))
e.Graphics.FillEllipse(new SolidBrush(Color.Red), x1, y1, 10, 10);
if (e.Graphics.IsVisible(x2, y2))
e.Graphics.FillEllipse(new SolidBrush(Color.Blue), x2, y2, 10, 10);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="x">
        x coordinate of the upper-left corner of the rectangle to test for visibility.
      </param>
      <param name="y">
        y coordinate of the upper-left corner of the rectangle to test for visibility.
      </param>
      <param name="width">
        Width of the rectangle to test for visibility.
      </param>
      <param name="height">
        Height of the rectangle to test for visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the rectangle defined by the <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> parameters is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <see langword="CombineMode.Replace"/>.</term>
          </item>
          <item>
            <term>Creates the location and size of two rectangles, one inside the clipping region and one outside.</term>
          </item>
          <item>
            <term>Tests each of the rectangles for visibility and draws only the visible one.</term>
          </item>
        </list>
        <para>The result is one small red rectangle, which is within the clip region.</para>
        <code lang="VB">Public Sub IsVisible4Int(e As PaintEventArgs)
&apos; Set clip region.
Dim clipRegion As New [Region](New Rectangle(50, 50, 100, 100))
e.Graphics.SetClip(clipRegion, CombineMode.Replace)
&apos; Set up coordinates of rectangles.
Dim x1 As Integer = 100
Dim y1 As Integer = 100
Dim width1 As Integer = 20
Dim height1 As Integer = 20
Dim x2 As Integer = 200
Dim y2 As Integer = 200
Dim width2 As Integer = 20
Dim height2 As Integer = 20
&apos; If rectangle is visible, fill it.
If e.Graphics.IsVisible(x1, y1, width1, height1) Then
e.Graphics.FillRectangle(New SolidBrush(Color.Red), x1, y1, _
width1, height1)
End If
If e.Graphics.IsVisible(x2, y2, width2, height2) Then
e.Graphics.FillRectangle(New SolidBrush(Color.Blue), x2, y2, _
width2, height2)
End If
End Sub
        </code>
        <code lang="C#">public void IsVisible4Int(PaintEventArgs e)
{
// Set clip region.
Region clipRegion = new Region(new Rectangle(50, 50, 100, 100));
e.Graphics.SetClip(clipRegion, CombineMode.Replace);
// Set up coordinates of rectangles.
int x1 =  100;
int y1 =  100;
int width1 = 20;
int height1 = 20;
int x2 = 200;
int y2 = 200;
int width2 = 20;
int height2 = 20;
// If rectangle is visible, fill it.
if (e.Graphics.IsVisible(x1, y1, width1, height1))
e.Graphics.FillRectangle(new SolidBrush(Color.Red), x1, y1, width1, height1);
if (e.Graphics.IsVisible(x2, y2, width2, height2))
e.Graphics.FillRectangle(new SolidBrush(Color.Blue), x2, y2, width2, height2);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.IsVisible(System.Drawing.Point)">
      <summary>
        <para>Indicates whether the specified <see cref="T:System.Drawing.Point"/> structure is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="point">
        <see cref="T:System.Drawing.Point"/> structure to test for visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the point specified by the <paramref name="point"/> parameter is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <see langword="CombineMode.Replace"/>.</term>
          </item>
          <item>
            <term>Creates two points, one inside the clipping region and one outside.</term>
          </item>
          <item>
            <term>Tests each of the points for visibility and draws only the visible one.</term>
          </item>
        </list>
        <para>The result is one small red circle, which is within the clip region.</para>
        <code lang="VB">Public Sub IsVisiblePoint(e As PaintEventArgs)
&apos; Set clip region.
Dim clipRegion As New [Region](New Rectangle(50, 50, 100, 100))
e.Graphics.SetClip(clipRegion, CombineMode.Replace)
&apos; Set up coordinates of points.
Dim x1 As Integer = 100
Dim y1 As Integer = 100
Dim x2 As Integer = 200
Dim y2 As Integer = 200
Dim point1 As New Point(x1, y1)
Dim point2 As New Point(x2, y2)
&apos; If point is visible, fill ellipse that represents it.
If e.Graphics.IsVisible(point1) Then
e.Graphics.FillEllipse(New SolidBrush(Color.Red), x1, y1, _
10, 10)
End If
If e.Graphics.IsVisible(point2) Then
e.Graphics.FillEllipse(New SolidBrush(Color.Blue), x2, y2, _
10, 10)
End If
End Sub
        </code>
        <code lang="C#">public void IsVisiblePoint(PaintEventArgs e)
{
// Set clip region.
Region clipRegion = new Region(new Rectangle(50, 50, 100, 100));
e.Graphics.SetClip(clipRegion, CombineMode.Replace);
// Set up coordinates of points.
int x1 = 100;
int y1 = 100;
int x2 = 200;
int y2 = 200;
Point point1 = new Point(x1, y1);
Point point2 = new Point(x2, y2);
// If point is visible, fill ellipse that represents it.
if (e.Graphics.IsVisible(point1))
e.Graphics.FillEllipse(new SolidBrush(Color.Red), x1, y1, 10, 10);
if (e.Graphics.IsVisible(point2))
e.Graphics.FillEllipse(new SolidBrush(Color.Blue), x2, y2, 10, 10);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.IsVisible(System.Drawing.PointF)">
      <summary>
        <para>Indicates whether the specified <see cref="T:System.Drawing.PointF"/> structure is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="point">
        <see cref="T:System.Drawing.PointF"/> structure to test for visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the point specified by the <paramref name="point"/> parameter is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <see langword="CombineMode.Replace"/>.</term>
          </item>
          <item>
            <term>Creates two points, one inside the clipping region and one outside.</term>
          </item>
          <item>
            <term>Tests each of the points for visibility and draws only the visible one.</term>
          </item>
        </list>
        <para>The result is one small red circle, which is within the clip region.</para>
        <code lang="VB">Public Sub IsVisiblePointF(e As PaintEventArgs)
&apos; Set clip region.
Dim clipRegion As New [Region](New Rectangle(50, 50, 100, 100))
e.Graphics.SetClip(clipRegion, CombineMode.Replace)
&apos; Set up coordinates of points.
Dim x1 As Single = 100F
Dim y1 As Single = 100F
Dim x2 As Single = 200F
Dim y2 As Single = 200F
Dim point1 As New PointF(x1, y1)
Dim point2 As New PointF(x2, y2)
&apos; If point is visible, fill ellipse that represents it.
If e.Graphics.IsVisible(point1) Then
e.Graphics.FillEllipse(New SolidBrush(Color.Red), x1, y1, _
10F, 10F)
End If
If e.Graphics.IsVisible(point2) Then
e.Graphics.FillEllipse(New SolidBrush(Color.Blue), x2, y2, _
10F, 10F)
End If
End Sub
        </code>
        <code lang="C#">public void IsVisiblePointF(PaintEventArgs e)
{
// Set clip region.
Region clipRegion = new Region(new Rectangle(50, 50, 100, 100));
e.Graphics.SetClip(clipRegion, CombineMode.Replace);
// Set up coordinates of points.
float x1 = 100.0F;
float y1 = 100.0F;
float x2 = 200.0F;
float y2 = 200.0F;
PointF point1 = new PointF(x1, y1);
PointF point2 = new PointF(x2, y2);
// If point is visible, fill ellipse that represents it.
if (e.Graphics.IsVisible(point1))
e.Graphics.FillEllipse(new SolidBrush(Color.Red), x1, y1, 10.0F, 10.0F);
if (e.Graphics.IsVisible(point2))
e.Graphics.FillEllipse(new SolidBrush(Color.Blue), x2, y2, 10.0F, 10.0F);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)">
      <summary>
        <para>Indicates whether the rectangle specified by a <see cref="T:System.Drawing.Rectangle"/> structure is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle"/> structure to test for visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the rectangle specified by the <paramref name="rect"/> parameter is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <see langword="CombineMode.Replace"/>.</term>
          </item>
          <item>
            <term>Creates the location and size of two rectangles, one inside the clipping region and one outside.</term>
          </item>
          <item>
            <term>Tests each of the rectangles for visibility and draws only the visible one.</term>
          </item>
        </list>
        <para>The result is one small red rectangle, which is within the clip region.</para>
        <code lang="VB">Public Sub IsVisibleRectangle(e As PaintEventArgs)
&apos; Set clip region.
Dim clipRegion As New [Region](New Rectangle(50, 50, 100, 100))
e.Graphics.SetClip(clipRegion, CombineMode.Replace)
&apos; Set up coordinates of rectangles.
Dim rect1 As New Rectangle(100, 100, 20, 20)
Dim rect2 As New Rectangle(200, 200, 20, 20)
&apos; If rectangle is visible, fill it.
If e.Graphics.IsVisible(rect1) Then
e.Graphics.FillRectangle(New SolidBrush(Color.Red), rect1)
End If
If e.Graphics.IsVisible(rect2) Then
e.Graphics.FillRectangle(New SolidBrush(Color.Blue), rect2)
End If
End Sub
        </code>
        <code lang="C#">public void IsVisibleRectangle(PaintEventArgs e)
{
// Set clip region.
Region clipRegion = new Region(new Rectangle(50, 50, 100, 100));
e.Graphics.SetClip(clipRegion, CombineMode.Replace);
// Set up coordinates of rectangles.
Rectangle rect1 = new Rectangle(100, 100, 20, 20);
Rectangle rect2 = new Rectangle(200, 200, 20, 20);
// If rectangle is visible, fill it.
if (e.Graphics.IsVisible(rect1))
e.Graphics.FillRectangle(new SolidBrush(Color.Red), rect1);
if (e.Graphics.IsVisible(rect2))
e.Graphics.FillRectangle(new SolidBrush(Color.Blue), rect2);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)">
      <summary>
        <para>Indicates whether the rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF"/> structure to test for visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the rectangle specified by the <paramref name="rect"/> parameter is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <see langword="CombineMode.Replace"/>.</term>
          </item>
          <item>
            <term>Creates two rectangles, one inside the clipping region and one outside.</term>
          </item>
          <item>
            <term>Tests each of the rectangles for visibility and draws only the visible one.</term>
          </item>
        </list>
        <para>The result is one small red rectangle, which is within the clip region.</para>
        <code lang="VB">Public Sub IsVisibleRectangleF(e As PaintEventArgs)
&apos; Set clip region.
Dim clipRegion As New [Region](New Rectangle(50, 50, 100, 100))
e.Graphics.SetClip(clipRegion, CombineMode.Replace)
&apos; Set up coordinates of rectangles.
Dim rect1 As New RectangleF(100F, 100F, 20F, 20F)
Dim rect2 As New RectangleF(200F, 200F, 20F, 20F)
&apos; If rectangle is visible, fill it.
If e.Graphics.IsVisible(rect1) Then
e.Graphics.FillRectangle(New SolidBrush(Color.Red), rect1)
End If
If e.Graphics.IsVisible(rect2) Then
e.Graphics.FillRectangle(New SolidBrush(Color.Blue), rect2)
End If
End Sub
        </code>
        <code lang="C#">public void IsVisibleRectangleF(PaintEventArgs e)
{
// Set clip region.
Region clipRegion = new Region(new Rectangle(50, 50, 100, 100));
e.Graphics.SetClip(clipRegion, CombineMode.Replace);
// Set up coordinates of rectangles.
RectangleF rect1 = new RectangleF(100.0F, 100.0F, 20.0F, 20.0F);
RectangleF rect2 = new RectangleF(200.0F, 200.0F, 20.0F, 20.0F);
// If rectangle is visible, fill it.
if (e.Graphics.IsVisible(rect1))
e.Graphics.FillRectangle(new SolidBrush(Color.Red), rect1);
if (e.Graphics.IsVisible(rect2))
e.Graphics.FillRectangle(new SolidBrush(Color.Blue), rect2);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single)">
      <summary>
        <para>Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="x">
        x coordinate of the point to test for visibility.
      </param>
      <param name="y">
        y coordinate of the point to test for visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the point defined by the <paramref name="x"/> and <paramref name="y"/> parameters is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <see langword="CombineMode.Replace"/>.</term>
          </item>
          <item>
            <term>Creates two points, one inside the clipping region and one outside.</term>
          </item>
          <item>
            <term>Tests each of the points for visibility and draws only the visible one.</term>
          </item>
        </list>
        <para>The result is one small red circle, which is within the clip region.</para>
        <code lang="VB">Public Sub IsVisibleFloat(e As PaintEventArgs)
&apos; Set clip region.
Dim clipRegion As New [Region](New Rectangle(50, 50, 100, 100))
e.Graphics.SetClip(clipRegion, CombineMode.Replace)
&apos; Set up coordinates of points.
Dim x1 As Single = 100F
Dim y1 As Single = 100F
Dim x2 As Single = 200F
Dim y2 As Single = 200F
&apos; If point is visible, fill ellipse that represents it.
If e.Graphics.IsVisible(x1, y1) Then
e.Graphics.FillEllipse(New SolidBrush(Color.Red), x1, y1, _
10F, 10F)
End If
If e.Graphics.IsVisible(x2, y2) Then
e.Graphics.FillEllipse(New SolidBrush(Color.Blue), x2, y2, _
10F, 10F)
End If
End Sub
        </code>
        <code lang="C#">public void IsVisibleFloat(PaintEventArgs e)
{
// Set clip region.
Region clipRegion = new Region(new Rectangle(50, 50, 100, 100));
e.Graphics.SetClip(clipRegion, CombineMode.Replace);
// Set up coordinates of points.
float x1 = 100.0F;
float y1 = 100.0F;
float x2 = 200.0F;
float y2 = 200.0F;
// If point is visible, fill ellipse that represents it.
if (e.Graphics.IsVisible(x1, y1))
e.Graphics.FillEllipse(new SolidBrush(Color.Red), x1, y1, 10.0F, 10.0F);
if (e.Graphics.IsVisible(x2, y2))
e.Graphics.FillEllipse(new SolidBrush(Color.Blue), x2, y2, 10.0F, 10.0F);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="x">
        x coordinate of the upper-left corner of the rectangle to test for visibility.
      </param>
      <param name="y">
        y coordinate of the upper-left corner of the rectangle to test for visibility.
      </param>
      <param name="width">
        Width of the rectangle to test for visibility.
      </param>
      <param name="height">
        Height of the rectangle to test for visibility.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the rectangle defined by the <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> parameters is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <see langword="CombineMode.Replace"/>.</term>
          </item>
          <item>
            <term>Creates the location and size of two rectangles, one inside the clipping region and one outside.</term>
          </item>
          <item>
            <term>Tests each of the rectangles for visibility and draws only the visible one.</term>
          </item>
        </list>
        <para>The result is one small red rectangle, which is within the clip region.</para>
        <code lang="VB">Public Sub IsVisible4Float(e As PaintEventArgs)
&apos; Set clip region.
Dim clipRegion As New [Region](New Rectangle(50, 50, 100, 100))
e.Graphics.SetClip(clipRegion, CombineMode.Replace)
&apos; Set up coordinates of rectangles.
Dim x1 As Single = 100F
Dim y1 As Single = 100F
Dim width1 As Single = 20F
Dim height1 As Single = 20F
Dim x2 As Single = 200F
Dim y2 As Single = 200F
Dim width2 As Single = 20F
Dim height2 As Single = 20F
&apos; If rectangle is visible, fill it.
If e.Graphics.IsVisible(x1, y1, width1, height1) Then
e.Graphics.FillRectangle(New SolidBrush(Color.Red), x1, y1, _
width1, height1)
End If
If e.Graphics.IsVisible(x2, y2, width2, height2) Then
e.Graphics.FillRectangle(New SolidBrush(Color.Blue), x2, y2, _
width2, height2)
End If
End Sub
        </code>
        <code lang="C#">public void IsVisible4Float(PaintEventArgs e)
{
// Set clip region.
Region clipRegion = new Region(new Rectangle(50, 50, 100, 100));
e.Graphics.SetClip(clipRegion, CombineMode.Replace);
// Set up coordinates of rectangles.
float x1 =  100.0F;
float y1 =  100.0F;
float width1 = 20.0F;
float height1 = 20.0F;
float x2 = 200.0F;
float y2 = 200.0F;
float width2 = 20.0F;
float height2 = 20.0F;
// If rectangle is visible, fill it.
if (e.Graphics.IsVisible(x1, y1, width1, height1))
e.Graphics.FillRectangle(new SolidBrush(Color.Red), x1, y1, width1, height1);
if (e.Graphics.IsVisible(x2, y2, width2, height2))
e.Graphics.FillRectangle(new SolidBrush(Color.Blue), x2, y2, width2, height2);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)">
      <summary>
        <para>Gets an array of <see cref="T:System.Drawing.Region"/> objects, each of which bounds a range of character positions within the specified string.</para>
      </summary>
      <param name="text">
        String to measure.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object that defines the text format of the string.
      </param>
      <param name="layoutRect">
        <see cref="T:System.Drawing.RectangleF"/> structure that specifies the layout rectangle for the string.
      </param>
      <param name="stringFormat">
        <see cref="T:System.Drawing.StringFormat"/> object that represents formatting information, such as line spacing, for the string.
      </param>
      <returns>
        <para>This method returns an array of <see cref="T:System.Drawing.Region"/> objects, each of which bounds a range of character positions within the specified string.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Sets a string &quot;First and Second ranges&quot; and a font for display of the string (&quot;Times New Roman&quot;, 16pt.).</term>
          </item>
          <item>
            <term>Sets two character ranges within the string (which correspond to the words &quot;First&quot; and &quot;Second&quot;).</term>
          </item>
          <item>
            <term>Creates a rectangle in which to display the string.</term>
          </item>
          <item>
            <term>Sets the formatting of the string &#190; including the two character ranges.</term>
          </item>
          <item>
            <term>Draws the string to the screen.</term>
          </item>
          <item>
            <term>Measures the character ranges, determines rectangles that bound the two specified ranges.</term>
          </item>
          <item>
            <term>Draws the two rectangles to the screen.</term>
          </item>
        </list>
        <para>The result is the displayed string with the first range (&quot;First&quot;) bounded by a red rectangle and the second range (&quot;Second&quot;) bounded by a blue rectangle.</para>
        <code lang="VB">Public Sub MeasureCharacterRangesRegions(e As PaintEventArgs)
&apos; Set up string.
Dim measureString As String = &quot;First and Second ranges&quot;
Dim stringFont As New Font(&quot;Times New Roman&quot;, 16F)
&apos; Set character ranges to &quot;First&quot; and &quot;Second&quot;.
Dim characterRanges As CharacterRange() =  _
{New CharacterRange(0, 5), New CharacterRange(10, 6)}
&apos; Create rectangle for layout.
Dim x As Single = 50F
Dim y As Single = 50F
Dim width As Single = 35F
Dim height As Single = 200F
Dim layoutRect As New RectangleF(x, y, width, height)
&apos; Set string format.
Dim stringFormat As New StringFormat()
stringFormat.FormatFlags = StringFormatFlags.DirectionVertical
stringFormat.SetMeasurableCharacterRanges(characterRanges)
&apos; Draw string to screen.
e.Graphics.DrawString(measureString, stringFont, Brushes.Black, _
x, y, stringFormat)
&apos; Measure two ranges in string.
Dim stringRegions(2) As [Region]
stringRegions = e.Graphics.MeasureCharacterRanges(measureString, _
stringFont, layoutRect, stringFormat)
&apos; Draw rectangle for first measured range.
Dim measureRect1 As RectangleF = _
stringRegions(0).GetBounds(e.Graphics)
e.Graphics.DrawRectangle(New Pen(Color.Red, 1), _
Rectangle.Round(measureRect1))
&apos; Draw rectangle for second measured range.
Dim measureRect2 As RectangleF = _
stringRegions(1).GetBounds(e.Graphics)
e.Graphics.DrawRectangle(New Pen(Color.Blue, 1), _
Rectangle.Round(measureRect2))
End Sub
        </code>
        <code lang="C#">public void MeasureCharacterRangesRegions(PaintEventArgs e)
{
// Set up string.
string measureString = &quot;First and Second ranges&quot;;
Font stringFont = new Font(&quot;Times New Roman&quot;, 16.0F);
// Set character ranges to &quot;First&quot; and &quot;Second&quot;.
CharacterRange[] characterRanges =
{
new CharacterRange(0, 5),
new CharacterRange(10, 6)
};
// Create rectangle for layout.
float x = 50.0F;
float y = 50.0F;
float width = 35.0F;
float height = 200.0F;
RectangleF layoutRect = new RectangleF(x, y, width, height);
// Set string format.
StringFormat stringFormat = new StringFormat();
stringFormat.FormatFlags = StringFormatFlags.DirectionVertical;
stringFormat.SetMeasurableCharacterRanges(characterRanges);
// Draw string to screen.
e.Graphics.DrawString(
measureString,
stringFont,
Brushes.Black,
x, y,
stringFormat);
// Measure two ranges in string.
Region[] stringRegions = new Region[2];
stringRegions = e.Graphics.MeasureCharacterRanges(
measureString,
stringFont,
layoutRect,
stringFormat);
// Draw rectangle for first measured range.
RectangleF measureRect1 = stringRegions[0].GetBounds(e.Graphics);
e.Graphics.DrawRectangle(
new Pen(Color.Red, 1),
Rectangle.Round(measureRect1));
// Draw rectangle for second measured range.
RectangleF measureRect2 = stringRegions[1].GetBounds(e.Graphics);
e.Graphics.DrawRectangle(
new Pen(Color.Blue, 1),
Rectangle.Round(measureRect2));
}
        </code>
      </example>
	  <remarks>
	    <para>The regions returned by this method are resolution-dependent, so there might be a slight loss of accuracy if strings are recorded in a metafile at one resolution and later played back at a different resolution.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)">
      <overload>
        Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/> object.
      </overload>
      <summary>
        <para>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <param name="text">
        String to measure.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object that defines the text format of the string.
      </param>
      <returns>
        <para>This method returns a <see cref="T:System.Drawing.SizeF"/> structure that represents the size, in pixels, of the string  specified by the <paramref name="text"/> parameter as drawn with the <paramref name="font"/> parameter.</para>
      </returns>
	  <remarks>
	    <para>The <see langword="MeasureString"/> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="M:System.Drawing.Graphics.DrawString"/> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see langword="MeasureString"/>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)"/> method.</para>
	  </remarks>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a string to measure.</term>
          </item>
          <item>
            <term>Creates a font object and sets it to Arial (16pt.).</term>
          </item>
          <item>
            <term>Creates a size object and uses it and the font object to measure the size of the string.</term>
          </item>
          <item>
            <term>Draws a red rectangle using the measured size of the string.</term>
          </item>
          <item>
            <term>Draws the string within the drawn rectangle.</term>
          </item>
        </list>
        <code lang="VB">Public Sub MeasureStringMin(e As PaintEventArgs)
&apos; Set up string.
Dim measureString As String = &quot;Measure String&quot;
Dim stringFont As New Font(&quot;Arial&quot;, 16)
&apos; Measure string.
Dim stringSize As New SizeF()
stringSize = e.Graphics.MeasureString(measureString, stringFont)
&apos; Draw rectangle representing size of string.
e.Graphics.DrawRectangle(New Pen(Color.Red, 1), 0F, 0F, _
stringSize.Width, stringSize.Height)
&apos; Draw string to screen.
e.Graphics.DrawString(measureString, stringFont, Brushes.Black, _
New PointF(0, 0))
End Sub
        </code>
        <code lang="C#">public void MeasureStringMin(PaintEventArgs e)
{
// Set up string.
string measureString = &quot;Measure String&quot;;
Font stringFont = new Font(&quot;Arial&quot;, 16);
// Measure string.
SizeF stringSize = new SizeF();
stringSize = e.Graphics.MeasureString(measureString, stringFont);
// Draw rectangle representing size of string.
e.Graphics.DrawRectangle(
new Pen(Color.Red, 1),
0.0F, 0.0F, stringSize.Width, stringSize.Height);
// Draw string to screen.
e.Graphics.DrawString(
measureString,
stringFont,
Brushes.Black,
new PointF(0, 0));
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)">
      <summary>
        <para>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/> object.</para>
      </summary>
      <param name="text">
        String to measure.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object that defines the format of the string.
      </param>
      <param name="width">
        Maximum width of the string in pixels.
      </param>
      <returns>
        <para>This method returns a <see cref="T:System.Drawing.SizeF"/> structure that represents the size, in pixels, of the string specified in the <paramref name="text"/> parameter as drawn with the <paramref name="font"/> parameter.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a string to measure and a font object set to Arial (16pt.).</term>
          </item>
          <item>
            <term>Sets the maximum width of the string.</term>
          </item>
          <item>
            <term>Creates a size object and uses it, the font object, and the maximum string width to measure the size of the string.</term>
          </item>
          <item>
            <term>Draws a red rectangle using the measured size of the string.</term>
          </item>
          <item>
            <term>Draws the string within the drawn rectangle.</term>
          </item>
        </list>
        <code lang="VB">Public Sub MeasureStringWidth(e As PaintEventArgs)
&apos; Set up string.
Dim measureString As String = &quot;Measure String&quot;
Dim stringFont As New Font(&quot;Arial&quot;, 16)
&apos; Set maximum width of string.
Dim stringWidth As Integer = 200
&apos; Measure string.
Dim stringSize As New SizeF()
stringSize = e.Graphics.MeasureString(measureString, _
stringFont, stringWidth)
&apos; Draw rectangle representing size of string.
e.Graphics.DrawRectangle(New Pen(Color.Red, 1), 0F, 0F, _
stringSize.Width, stringSize.Height)
&apos; Draw string to screen.
e.Graphics.DrawString(measureString, stringFont, Brushes.Black, _
New PointF(0, 0))
End Sub
        </code>
        <code lang="C#">public void MeasureStringWidth(PaintEventArgs e)
{
// Set up string.
string measureString = &quot;Measure String&quot;;
Font stringFont = new Font(&quot;Arial&quot;, 16);
// Set maximum width of string.
int stringWidth = 200;
// Measure string.
SizeF stringSize = new SizeF();
stringSize = e.Graphics.MeasureString(measureString, stringFont, stringWidth);
// Draw rectangle representing size of string.
e.Graphics.DrawRectangle(
new Pen(Color.Red, 1),
0.0F, 0.0F, stringSize.Width, stringSize.Height);
// Draw string to screen.
e.Graphics.DrawString(
measureString,
stringFont,
Brushes.Black,
new PointF(0, 0));
}
        </code>
      </example>
      <remarks>
        <para>The <paramref name="width"/> parameter specifies the maximum value of the width component of the returned <see cref="T:System.Drawing.SizeF"/> structure (<see langword="SizeF.Width"/>). If the <paramref name="width"/> parameter is less than the actual width of the string, the returned <see langword="SizeF.Width"/> component is truncated to a value representing the maximum number of characters that will fit within the specified width. To accommodate the entire string, the returned <see langword="SizeF.Height"/> component is adjusted to a value that allows displaying the string with character wrap.</para>

	    <para>The <see langword="MeasureString"/> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="M:System.Drawing.Graphics.DrawString"/> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see langword="MeasureString"/>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)"/> method.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)">
      <summary>
        <para>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/> object and formatted with the specified <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <param name="text">
        String to measure.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object that defines the text format of the string.
      </param>
      <param name="width">
        Maximum width of the string.
      </param>
      <param name="format">
        <see cref="T:System.Drawing.StringFormat"/> object that represents formatting information, such as line spacing, for the string.
      </param>
      <returns>
        <para>This method returns a <see cref="T:System.Drawing.SizeF"/> structure that represents the size, in pixels, of the string specified in the <paramref name="text"/> parameter as drawn with the <paramref name="font"/> parameter and the <paramref name="stringFormat"/> parameter.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a string to measure and a font object set it to Arial (16pt.).</term>
          </item>
          <item>
            <term>Sets the maximum width of the string.</term>
          </item>
          <item>
            <term>Creates a string format object and sets its format flags to <see langword="StringFormatFlags.DirectionVertical"/>.</term>
          </item>
          <item>
            <term>Creates a size object to measure the string.</term>
          </item>
          <item>
            <term>Measures the size of the string, using the string, the font object, the maximum width, and the string format.</term>
          </item>
          <item>
            <term>Draws a red rectangle using the measured size of the string.</term>
          </item>
          <item>
            <term>Draws the string within the drawn rectangle.</term>
          </item>
        </list>
        <para>The result is a vertical rectangle enclosing a vertical string.</para>
        <code lang="VB">Public Sub MeasureStringWidthFormat(e As PaintEventArgs)
&apos; Set up string.
Dim measureString As String = &quot;Measure String&quot;
Dim stringFont As New Font(&quot;Arial&quot;, 16)
&apos; Set maximum width of string.
Dim stringWidth As Integer = 100
&apos; Set string format.
Dim newStringFormat As New StringFormat()
newStringFormat.FormatFlags = StringFormatFlags.DirectionVertical
&apos; Measure string.
Dim stringSize As New SizeF()
stringSize = e.Graphics.MeasureString(measureString, stringFont, _
stringWidth, newStringFormat)
&apos; Draw rectangle representing size of string.
e.Graphics.DrawRectangle(New Pen(Color.Red, 1), 0F, 0F, _
stringSize.Width, stringSize.Height)
&apos; Draw string to screen.
e.Graphics.DrawString(measureString, stringFont, Brushes.Black, _
New PointF(0, 0), newStringFormat)
End Sub
        </code>
        <code lang="C#">public void MeasureStringWidthFormat(PaintEventArgs e)
{
// Set up string.
string measureString = &quot;Measure String&quot;;
Font stringFont = new Font(&quot;Arial&quot;, 16);
// Set maximum width of string.
int stringWidth = 100;
// Set string format.
StringFormat newStringFormat = new StringFormat();
newStringFormat.FormatFlags = StringFormatFlags.DirectionVertical;
// Measure string.
SizeF stringSize = new SizeF();
stringSize = e.Graphics.MeasureString(
measureString,
stringFont,
stringWidth,
newStringFormat);
// Draw rectangle representing size of string.
e.Graphics.DrawRectangle(
new Pen(Color.Red, 1),
0.0F, 0.0F, stringSize.Width, stringSize.Height);
// Draw string to screen.
e.Graphics.DrawString(
measureString,
stringFont,
Brushes.Black,
new PointF(0, 0),
newStringFormat);
}
        </code>
      </example>
	  <remarks>
	    <para>The <see langword="MeasureString"/> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="M:System.Drawing.Graphics.DrawString"/> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see langword="MeasureString"/>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)"/> method.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)">
      <summary>
        <para>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/> object and formatted with the specified <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <param name="text">
        String to measure.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object defines the text format of the string.
      </param>
      <param name="origin">
        <see cref="T:System.Drawing.PointF"/> structure that represents the upper-left corner of the string.
      </param>
      <param name="stringFormat">
        <see cref="T:System.Drawing.StringFormat"/> object that represents formatting information, such as line spacing, for the string.
      </param>
      <returns>
        <para>This method returns a <see cref="T:System.Drawing.SizeF"/> structure that represents the size of the string, in pixels, of the <paramref name="text"/> parameter as drawn with the <paramref name="font"/> parameter and the <paramref name="stringFormat"/> parameter.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a string to measure and a font object set to Arial (16pt.)</term>
          </item>
          <item>
            <term>Creates a point to locate the upper-left corner of the string.</term>
          </item>
          <item>
            <term>Creates a string format object and sets its format flags to <see langword="StringFormatFlags.DirectionVertical"/>.</term>
          </item>
          <item>
            <term>Creates a size object to measure the string.</term>
          </item>
          <item>
            <term>Measures the size of the string, using the string, the font object, the locating point, and the string format.</term>
          </item>
          <item>
            <term>Draws a red rectangle using the locating point and the measured size of the string.</term>
          </item>
          <item>
            <term>Draws the string within the drawn rectangle.</term>
          </item>
        </list>
        <para>The result is a vertical rectangle enclosing a vertical string.</para>
        <code lang="VB">Public Sub MeasureStringPointFFormat(e As PaintEventArgs)
&apos; Set up string.
Dim measureString As String = &quot;Measure String&quot;
Dim stringFont As New Font(&quot;Arial&quot;, 16)
&apos; Set point for upper-left corner of string.
Dim x As Single = 50F
Dim y As Single = 50F
Dim ulCorner As New PointF(x, y)
&apos; Set string format.
Dim newStringFormat As New StringFormat()
newStringFormat.FormatFlags = StringFormatFlags.DirectionVertical
&apos; Measure string.
Dim stringSize As New SizeF()
stringSize = e.Graphics.MeasureString(measureString, stringFont, _
ulCorner, newStringFormat)
&apos; Draw rectangle representing size of string.
e.Graphics.DrawRectangle(New Pen(Color.Red, 1), x, y, _
stringSize.Width, stringSize.Height)
&apos; Draw string to screen.
e.Graphics.DrawString(measureString, stringFont, Brushes.Black, _
ulCorner, newStringFormat)
End Sub
        </code>
        <code lang="C#">public void MeasureStringPointFFormat(PaintEventArgs e)
{
// Set up string.
string measureString = &quot;Measure String&quot;;
Font stringFont = new Font(&quot;Arial&quot;, 16);
// Set point for upper-left corner of string.
float x = 50.0F;
float y = 50.0F;
PointF ulCorner = new PointF(x, y);
// Set string format.
StringFormat newStringFormat = new StringFormat();
newStringFormat.FormatFlags = StringFormatFlags.DirectionVertical;
// Measure string.
SizeF stringSize = new SizeF();
stringSize = e.Graphics.MeasureString(
measureString,
stringFont,
ulCorner,
newStringFormat);
// Draw rectangle representing size of string.
e.Graphics.DrawRectangle(
new Pen(Color.Red, 1),
x, y, stringSize.Width, stringSize.Height);
// Draw string to screen.
e.Graphics.DrawString(
measureString,
stringFont,
Brushes.Black,
ulCorner,
newStringFormat);
}
        </code>
      </example>
	  <remarks>
	    <para>The <see langword="MeasureString"/> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="M:System.Drawing.Graphics.DrawString"/> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see langword="MeasureString"/>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)"/> method.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)">
      <summary>
        <para>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/> object within the specified layout area.</para>
      </summary>
      <param name="text">
        String to measure.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object defines the text format of the string.
      </param>
      <param name="layoutArea">
        <see cref="T:System.Drawing.SizeF"/> structure that specifies the maximum layout area for the text.
      </param>
      <returns>
        <para>This method returns a <see cref="T:System.Drawing.SizeF"/> structure that represents the size, in pixels, of the string specified in the <paramref name="text"/> parameter as drawn with the <paramref name="font"/> parameter.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a string to measure and a font object set to Arial (16pt.).</term>
          </item>
          <item>
            <term>Sets the maximum layout size of the string.</term>
          </item>
          <item>
            <term>Creates a size object and uses it, the font object, and the maximum layout size to measure the size of the string.</term>
          </item>
          <item>
            <term>Draws a red rectangle using the measured size of the string.</term>
          </item>
          <item>
            <term>Draws the string within the drawn rectangle.</term>
          </item>
        </list>
        <code lang="VB">Public Sub MeasureStringSizeF(e As PaintEventArgs)
&apos; Set up string.
Dim measureString As String = &quot;Measure String&quot;
Dim stringFont As New Font(&quot;Arial&quot;, 16)
&apos; Set maximum layout size.
Dim layoutSize As New SizeF(200F, 50F)
&apos; Measure string.
Dim stringSize As New SizeF()
stringSize = e.Graphics.MeasureString(measureString, stringFont, _
layoutSize)
&apos; Draw rectangle representing size of string.
e.Graphics.DrawRectangle(New Pen(Color.Red, 1), 0F, 0F, _
stringSize.Width, stringSize.Height)
&apos; Draw string to screen.
e.Graphics.DrawString(measureString, stringFont, Brushes.Black, _
New PointF(0, 0))
End Sub
        </code>
        <code lang="C#">public void MeasureStringSizeF(PaintEventArgs e)
{
// Set up string.
string measureString = &quot;Measure String&quot;;
Font stringFont = new Font(&quot;Arial&quot;, 16);
// Set maximum layout size.
SizeF layoutSize = new SizeF(200.0F, 50.0F);
// Measure string.
SizeF stringSize = new SizeF();
stringSize = e.Graphics.MeasureString(measureString, stringFont, layoutSize);
// Draw rectangle representing size of string.
e.Graphics.DrawRectangle(
new Pen(Color.Red, 1),
0.0F, 0.0F, stringSize.Width, stringSize.Height);
// Draw string to screen.
e.Graphics.DrawString(
measureString,
stringFont,
Brushes.Black,
new PointF(0, 0));
}
        </code>
      </example>
	  <remarks>
	    <para>The <see langword="MeasureString"/> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="M:System.Drawing.Graphics.DrawString"/> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see langword="MeasureString"/>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)"/> method.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)">
      <summary>
        <para>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/> object and formatted with the specified <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <param name="text">
        String to measure.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object defines the text format of the string.
      </param>
      <param name="layoutArea">
        <see cref="T:System.Drawing.SizeF"/> structure that specifies the maximum layout area for the text.
      </param>
      <param name="stringFormat">
        <see cref="T:System.Drawing.StringFormat"/> object that represents formatting information, such as line spacing, for the string.
      </param>
      <returns>
        <para>This method returns a <see cref="T:System.Drawing.SizeF"/> structure that represents the size, in pixels, of the string specified in the <paramref name="text"/> parameter as drawn with the <paramref name="font"/> parameter and the <paramref name="stringFormat"/> parameter.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a string to measure and a font object set to Arial (16pt.).</term>
          </item>
          <item>
            <term>Sets the maximum layout size of the string, creating a size object to measure the string.</term>
          </item>
          <item>
            <term>Creates a string format object and sets its format flags to <see langword="StringFormatFlags.DirectionVertical"/>.</term>
          </item>
          <item>
            <term>Measures the size of the string, using the string, the font object, the maximum layout size, and the string format.</term>
          </item>
          <item>
            <term>Draws a red rectangle using the measured size of the string.</term>
          </item>
          <item>
            <term>Draws the string within the drawn rectangle.</term>
          </item>
        </list>
        <para>The result is a vertical rectangle enclosing a vertical string.</para>
        <code lang="VB">Public Sub MeasureStringSizeFFormat(e As PaintEventArgs)
&apos; Set up string.
Dim measureString As String = &quot;Measure String&quot;
Dim stringFont As New Font(&quot;Arial&quot;, 16)
&apos; Set maximum layout size.
Dim layoutSize As New SizeF(100F, 200F)
&apos; Set string format.
Dim newStringFormat As New StringFormat()
newStringFormat.FormatFlags = StringFormatFlags.DirectionVertical
&apos; Measure string.
Dim stringSize As New SizeF()
stringSize = e.Graphics.MeasureString(measureString, stringFont, _
layoutSize, newStringFormat)
&apos; Draw rectangle representing size of string.
e.Graphics.DrawRectangle(New Pen(Color.Red, 1), 0F, 0F, _
stringSize.Width, stringSize.Height)
&apos; Draw string to screen.
e.Graphics.DrawString(measureString, stringFont, Brushes.Black, _
New PointF(0, 0), newStringFormat)
End Sub
        </code>
        <code lang="C#">public void MeasureStringSizeFFormat(PaintEventArgs e)
{
// Set up string.
string measureString = &quot;Measure String&quot;;
Font stringFont = new Font(&quot;Arial&quot;, 16);
// Set maximum layout size.
SizeF layoutSize = new SizeF(100.0F, 200.0F);
// Set string format.
StringFormat newStringFormat = new StringFormat();
newStringFormat.FormatFlags = StringFormatFlags.DirectionVertical;
// Measure string.
SizeF stringSize = new SizeF();
stringSize = e.Graphics.MeasureString(
measureString,
stringFont,
layoutSize,
newStringFormat);
// Draw rectangle representing size of string.
e.Graphics.DrawRectangle(
new Pen(Color.Red, 1),
0.0F, 0.0F, stringSize.Width, stringSize.Height);
// Draw string to screen.
e.Graphics.DrawString(
measureString,
stringFont,
Brushes.Black,
new PointF(0, 0),
newStringFormat);
}
        </code>
      </example>
	  <remarks>
	    <para>The <see langword="MeasureString"/> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="M:System.Drawing.Graphics.DrawString"/> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see langword="MeasureString"/>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)"/> method.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)">
      <summary>
        <para>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/> object and formatted with the specified <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <param name="text">
        String to measure.
      </param>
      <param name="font">
        <see cref="T:System.Drawing.Font"/> object that defines the text format of the string.
      </param>
      <param name="layoutArea">
        <see cref="T:System.Drawing.SizeF"/> structure that specifies the maximum layout area for the text.
      </param>
      <param name="stringFormat">
        <see cref="T:System.Drawing.StringFormat"/> object that represents formatting information, such as line spacing, for the string.
      </param>
      <param name="charactersFitted">
        Number of characters in the string.
      </param>
      <param name="linesFilled">
        Number of text lines in the string.
      </param>
      <returns>
        <para>This method returns a <see cref="T:System.Drawing.SizeF"/> structure that represents the size of the string, in pixels, of the <paramref name="text"/> parameter as drawn with the <paramref name="font"/> parameter and the <paramref name="stringFormat"/> parameter.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a string to measure and a font object set to Arial (16pt.)</term>
          </item>
          <item>
            <term>Sets the maximum layout size of the string.</term>
          </item>
          <item>
            <term>Creates a string format object and sets its format flags to <see langword="StringFormatFlags.DirectionVertical"/>.</term>
          </item>
          <item>
            <term>Creates the integer variables <paramref name="charactersFitted"/> and <paramref name="linesFilled"/> and a size object to measure the string.</term>
          </item>
          <item>
            <term>Measures the size of the string and determines the number of characters fitted and lines filled, using the string, the font object, the maximum layout size, and the string format.</term>
          </item>
          <item>
            <term>Draws a red rectangle using the measured size of the string.</term>
          </item>
          <item>
            <term>Draws the string within the drawn rectangle.</term>
          </item>
          <item>
            <term>Draws the values of the number of characters fitted and lines filled.</term>
          </item>
        </list>
        <para>The result is a vertical rectangle enclosing a vertical string.</para>
        <code lang="VB">Public Sub MeasureStringSizeFFormatInts(e As PaintEventArgs)
&apos; Set up string.
Dim measureString As String = &quot;Measure String&quot;
Dim stringFont As New Font(&quot;Arial&quot;, 16)
&apos; Set maximum layout size.
Dim layoutSize As New SizeF(100F, 200F)
&apos; Set string format.
Dim newStringFormat As New StringFormat()
newStringFormat.FormatFlags = StringFormatFlags.DirectionVertical
&apos; Measure string.
Dim charactersFitted As Integer
Dim linesFilled As Integer
Dim stringSize As New SizeF()
stringSize = e.Graphics.MeasureString(measureString, stringFont, _
layoutSize, newStringFormat, charactersFitted, linesFilled)
&apos; Draw rectangle representing size of string.
e.Graphics.DrawRectangle(New Pen(Color.Red, 1), 0F, 0F, _
stringSize.Width, stringSize.Height)
&apos; Draw string to screen.
e.Graphics.DrawString(measureString, stringFont, Brushes.Black, _
New PointF(0, 0), newStringFormat)
&apos; Draw output parameters to screen.
Dim outString As String = &quot;chars &quot; &amp; charactersFitted &amp; _
&quot;, lines &quot; &amp; linesFilled
e.Graphics.DrawString(outString, stringFont, Brushes.Black, _
New PointF(100, 0))
End Sub
        </code>
        <code lang="C#">public void MeasureStringSizeFFormatInts(PaintEventArgs e)
{
// Set up string.
string measureString = &quot;Measure String&quot;;
Font stringFont = new Font(&quot;Arial&quot;, 16);
// Set maximum layout size.
SizeF layoutSize = new SizeF(100.0F, 200.0F);
// Set string format.
StringFormat newStringFormat = new StringFormat();
newStringFormat.FormatFlags = StringFormatFlags.DirectionVertical;
// Measure string.
int charactersFitted;
int linesFilled;
SizeF stringSize = new SizeF();
stringSize = e.Graphics.MeasureString(
measureString,
stringFont,
layoutSize,
newStringFormat,
out charactersFitted,
out linesFilled);
// Draw rectangle representing size of string.
e.Graphics.DrawRectangle(
new Pen(Color.Red, 1),
0.0F, 0.0F, stringSize.Width, stringSize.Height);
// Draw string to screen.
e.Graphics.DrawString(
measureString,
stringFont,
Brushes.Black,
new PointF(0, 0),
newStringFormat);
// Draw output parameters to screen.
string outString = &quot;chars &quot; + charactersFitted + &quot;, lines &quot; + linesFilled;
e.Graphics.DrawString(
outString,
stringFont,
Brushes.Black,
new PointF(100, 0));
}
        </code>
      </example>
	  <remarks>
	    <para>The <see langword="MeasureString"/> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="M:System.Drawing.Graphics.DrawString"/> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see langword="MeasureString"/>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)"/> method.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)">
      <overload>
        Multiplies the world transformation of this <see cref="T:System.Drawing.Graphics"/> object and specified the <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.
      </overload>
      <summary>
        <para>Multiplies the world transformation of this <see cref="T:System.Drawing.Graphics"/> object and specified the <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </summary>
      <param name="matrix">
        4x4 <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that multiplies the world transformation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <paramref name="transformMatrix"/> matrix (a two by two identity matrix plus a zero-translation vector).</term>
          </item>
          <item>
            <term>Translates the transform matrix by a vector (200, 100).</term>
          </item>
          <item>
            <term>Rotates the world transformation matrix of the Windows form by 30 degrees, prepending the rotation matrix for 30 degrees to the form&apos;s transformation matrix.</term>
          </item>
          <item>
            <term>Multiplies the rotated world transformation matrix by the translated <paramref name="transformMatrix"/>, prepending the <paramref name="transformMatrix"/> to the world transformation matrix.</term>
          </item>
          <item>
            <term>Draws a rotated, translated ellipse.</term>
          </item>
        </list>
        <code lang="VB">Public Sub MultiplyTransformMatrix(e As PaintEventArgs)
&apos; Create transform matrix.
Dim transformMatrix As New Matrix()
&apos; Translate matrix, prepending translation vector.
transformMatrix.Translate(200F, 100F)
&apos; Rotate transformation matrix of graphics object,
&apos; prepending rotation matrix.
e.Graphics.RotateTransform(30F)
&apos; Multiply (prepend to) transformation matrix of
&apos; graphics object to translate graphics transformation.
e.Graphics.MultiplyTransform(transformMatrix)
&apos; Draw rotated, translated ellipse.
e.Graphics.DrawEllipse(New Pen(Color.Blue, 3), - 80, - 40, 160, 80)
End Sub
        </code>
        <code lang="C#">public void MultiplyTransformMatrix(PaintEventArgs e)
{
// Create transform matrix.
Matrix transformMatrix = new Matrix();
// Translate matrix, prepending translation vector.
transformMatrix.Translate(200.0F, 100.0F);
// Rotate transformation matrix of graphics object,
//  prepending rotation matrix.
e.Graphics.RotateTransform(30.0F);
// Multiply (prepend to) transformation matrix of
//  graphics object to translate graphics transformation.
e.Graphics.MultiplyTransform(transformMatrix);
// Draw rotated, translated ellipse.
e.Graphics.DrawEllipse(new Pen(Color.Blue, 3), -80, -40, 160, 80);
}
        </code>
      </example>
      <remarks>
        <para>This method prepends the matrix specified by the <paramref name="matrix"/> parameter, so that the result is <paramref name="matrix"/> x world transformation.</para>
        <para>The <see langword="MeasureString"/> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="M:System.Drawing.Graphics.DrawString"/> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see langword="MeasureString"/>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)"/> method.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Multiplies the world transformation of this <see cref="T:System.Drawing.Graphics"/> object and specified the <see cref="T:System.Drawing.Drawing2D.Matrix"/> object in the specified order.</para>
      </summary>
      <param name="matrix">
        4x4 <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that multiplies the world transformation.
      </param>
      <param name="order">
        Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that determines the order of the multiplication.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <paramref name="transformMatrix"/> matrix (a two by two identity matrix plus a zero-translation vector).</term>
          </item>
          <item>
            <term>Translates the transform matrix by a vector (200, 100).</term>
          </item>
          <item>
            <term>Rotates the world transformation matrix of the Windows form by 30 degrees, prepending the rotation matrix for 30 degrees to the form&apos;s transformation matrix.</term>
          </item>
          <item>
            <term>Multiplies the rotated world transformation matrix by the translated <paramref name="transformMatrix"/>, appending the <paramref name="transformMatrix"/> to the world transformation matrix.</term>
          </item>
          <item>
            <term>Draws a rotated, translated ellipse.</term>
          </item>
        </list>
        <code lang="VB">Public Sub MultiplyTransformMatrixOrder(e As PaintEventArgs)
&apos; Create transform matrix.
Dim transformMatrix As New Matrix()
&apos; Translate matrix, prepending translation vector.
transformMatrix.Translate(200F, 100F)
&apos; Rotate transformation matrix of graphics object,
&apos; prepending rotation matrix.
e.Graphics.RotateTransform(30F)
&apos; Multiply (append to) transformation matrix of
&apos; graphics object to translate graphics transformation.
e.Graphics.MultiplyTransform(transformMatrix, MatrixOrder.Append)
&apos; Draw rotated, translated ellipse.
e.Graphics.DrawEllipse(New Pen(Color.Blue, 3), - 80, - 40, 160, 80)
End Sub
        </code>
        <code lang="C#">public void MultiplyTransformMatrixOrder(PaintEventArgs e)
{
// Create transform matrix.
Matrix transformMatrix = new Matrix();
// Translate matrix, prepending translation vector.
transformMatrix.Translate(200.0F, 100.0F);
// Rotate transformation matrix of graphics object,
//  prepending rotation matrix.
e.Graphics.RotateTransform(30.0F);
// Multiply (append to) transformation matrix of
//  graphics object to translate graphics transformation.
e.Graphics.MultiplyTransform(transformMatrix, MatrixOrder.Append);
// Draw rotated, translated ellipse.
e.Graphics.DrawEllipse(new Pen(Color.Blue, 3), -80, -40, 160, 80);
}
        </code>
      </example>
      <remarks>
        <para>A value of <see langword="MatrixOrder.Prepend"/> for the <paramref name="order"/> parameter specifies that the order of the multiplication is <paramref name="matrix"/> x world transformation. A value of <see langword="MatrixOrder.Append"/> for <paramref name="order"/> specifies that the order of the multiplication is world transformation x <paramref name="matrix"/>.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)">
      <summary>
        <para>Releases a device context handle obtained by a previous call to the <see langword="GetHdc"/> method of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="hdc">
        Handle to a device context obtained by a previous call to the <see langword="GetHdc"/> method of this <see cref="T:System.Drawing.Graphics"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The example illustrates calling a Windows GDI function to perform the same task as a GDI+ <see cref="T:System.Drawing.Graphics"/> object method. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Defines the interoperability <see langword="DllImportAttribute"/> attribute for the Windows DLL file gdi32.dll. This DLL contains the desired GDI function, and it defines the <see cref="T:System.Drawing.Rectangle"/> function in that DLL as external.</term>
          </item>
          <item>
            <term>Creates a red pen.</term>
          </item>
          <item>
            <term>With the pen, draws a rectangle to the screen using the GDI+ <see cref="M:System.Drawing.Graphics.DrawRectangle"/> method.</term>
          </item>
          <item>
            <term>Defines an internal pointer type variable <paramref name="hdc"/> and sets its value to the handle to the device context of the form.</term>
          </item>
          <item>
            <term>Draws a rectangle to the screen using the GDI <see cref="T:System.Drawing.Rectangle"/> function.</term>
          </item>
          <item>
            <term>Releases the device context represented by the <paramref name="hdc"/> parameter.</term>
          </item>
        </list>
        <code lang="VB">&lt;System.Runtime.InteropServices.DllImportAttribute(&quot;gdi32.dll&quot;)&gt;  _
Private Shared Function Rectangle(hdc As IntPtr, _
ulCornerX As Integer, ulCornerY As Integer, lrCornerX As Integer, _
lrCornerY As Integer) As Boolean
End Function
Public Sub GetHdcForGDI(e As PaintEventArgs)
&apos; Create pen.
Dim redPen As New Pen(Color.Red, 1)
&apos; Draw rectangle with GDI+.
e.Graphics.DrawRectangle(redPen, 10, 10, 100, 50)
&apos; Get handle to device context.
Dim hdc As IntPtr = e.Graphics.GetHdc()
&apos; Draw rectangle with GDI using default pen.
Rectangle(hdc, 10, 70, 110, 120)
&apos; Release handle to device context.
e.Graphics.ReleaseHdc(hdc)
End Sub
        </code>
        <code lang="C#">[System.Runtime.InteropServices.DllImportAttribute(&quot;gdi32.dll&quot;)]
private static extern bool Rectangle(
IntPtr hdc,
int ulCornerX, int ulCornerY,
int lrCornerX, int lrCornerY);
public void GetHdcForGDI(PaintEventArgs e)
{
// Create pen.
Pen redPen = new Pen(Color.Red, 1);
// Draw rectangle with GDI+.
e.Graphics.DrawRectangle(redPen, 10, 10, 100, 50);
// Get handle to device context.
IntPtr hdc = new IntPtr();
hdc = e.Graphics.GetHdc();
// Draw rectangle with GDI using default pen.
Rectangle(hdc, 10, 70, 110, 120);
// Release handle to device context.
e.Graphics.ReleaseHdc(hdc);
}
        </code>
      </example>
      <remarks>
        <para>The device context is a Windows GDI-based structure that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output.</para>
        <para>Calls to the <see langword="GetHdc"/> and <see langword="ReleaseHdc"/> methods must appear in pairs. During the scope of a <see langword="GetHdc"/>-<see langword="ReleaseHdc"/> method pair, you usually make only calls to GDI functions. Calls in that scope made to GDI+ methods of the <see cref="T:System.Drawing.Graphics"/> object that produced the <paramref name="hdc"/> parameter fail with an ObjectBusy error. Also, GDI+ ignores any state changes made to the <see cref="T:System.Drawing.Graphics"/> object of the <paramref name="hdc"/> parameter in subsequent operations.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)">
      <summary>
        <para>Internal method. Do not use.</para>
      </summary>
      <param name="hdc">
        Handle to a device context.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Graphics.ResetClip">
      <summary>
        <para>Resets the clip region of this <see cref="T:System.Drawing.Graphics"/> object to an infinite region.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle with upper-left corner at (0, 0) and sets the clipping region to this rectangle.</term>
          </item>
          <item>
            <term>Creates a second rectangle with upper-left corner at (100, 100) and sets the clipping region to the intersection of this rectangle and the current clipping region (the first rectangle).</term>
          </item>
          <item>
            <term>Fills a large rectangle that includes both previous rectangles with a solid blue brush.</term>
          </item>
          <item>
            <term>Resets the clipping region to infinite.</term>
          </item>
          <item>
            <term>Draws rectangles around the two clipping regions; it uses a black pen for the first clipping rectangle and a red pen for the second clipping region.</term>
          </item>
        </list>
        <para>The result is that only the intersection of the two rectangles is filled with blue.</para>
        <code lang="VB">Public Sub IntersectClipRectangleF(e As PaintEventArgs)
&apos; Set clipping region.
Dim clipRect As New Rectangle(0, 0, 200, 200)
e.Graphics.SetClip(clipRect)
&apos; Update clipping region to intersection of
&apos; existing region with specified rectangle.
Dim intersectRectF As New RectangleF(100F, 100F, 200F, 200F)
e.Graphics.IntersectClip(intersectRectF)
&apos; Fill rectangle to demonstrate effective clipping region.
e.Graphics.FillRectangle(New SolidBrush(Color.Blue), 0, 0, _
500, 500)
&apos; Reset clipping region to infinite.
e.Graphics.ResetClip()
&apos; Draw clipRect and intersectRect to screen.
e.Graphics.DrawRectangle(New Pen(Color.Black), clipRect)
e.Graphics.DrawRectangle(New Pen(Color.Red), _
Rectangle.Round(intersectRectF))
End Sub
        </code>
        <code lang="C#">public void IntersectClipRectangleF(PaintEventArgs e)
{
// Set clipping region.
Rectangle clipRect = new Rectangle(0, 0, 200, 200);
e.Graphics.SetClip(clipRect);
// Update clipping region to intersection of existing region with new rectangle.
RectangleF intersectRectF = new RectangleF(100.0F, 100.0F, 200.0F, 200.0F);
e.Graphics.IntersectClip(intersectRectF);
// Fill rectangle to demonstrate effective clipping region.
e.Graphics.FillRectangle(new SolidBrush(Color.Blue), 0, 0, 500, 500);
// Reset clipping region to infinite.
e.Graphics.ResetClip();
// Draw clipRect and intersectRect to screen.
e.Graphics.DrawRectangle(new Pen(Color.Black), clipRect);
e.Graphics.DrawRectangle(new Pen(Color.Red), Rectangle.Round(intersectRectF));
}
        </code>
      </example>
      <remarks>
        <para>When the clipping region of a <see cref="T:System.Drawing.Graphics"/> object is infinite, items that this <see cref="T:System.Drawing.Graphics"/> object draws are not clipped.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.ResetTransform">
      <summary>
        <para>Resets the world transformation matrix of this <see cref="T:System.Drawing.Graphics"/> object to the identity matrix.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actionts:</para>
        <list type="bullet">
          <item>
            <term>Translates the world transform of the Windows form by a vector (100, 0).</term>
          </item>
          <item>
            <term>Saves the graphics state of the form.</term>
          </item>
          <item>
            <term>Resets the world transform of the form to an identity and fills a rectangle with a solid red brush.</term>
          </item>
          <item>
            <term>Restores the translated graphics state and fills a rectangle with a solid blue brush.</term>
          </item>
        </list>
        <para>The result is an untranslated red-filled rectangle and a translated blue-filled rectangle.</para>
        <code lang="VB">Public Sub SaveRestore(e As PaintEventArgs)
&apos; Translate transformation matrix.
e.Graphics.TranslateTransform(100, 0)
&apos; Save translated graphics state.
Dim transState As GraphicsState = e.Graphics.Save()
&apos; Reset transformation matrix to identity and fill rectangle.
e.Graphics.ResetTransform()
e.Graphics.FillRectangle(New SolidBrush(Color.Red), 0, 0, 100, 100)
&apos; Restore graphics state to translated state and fill second
&apos; rectangle.
e.Graphics.Restore(transState)
e.Graphics.FillRectangle(New SolidBrush(Color.Blue), 0, 0, _
100, 100)
End Sub
        </code>
        <code lang="C#">public void SaveRestore(PaintEventArgs e)
{
// Translate transformation matrix.
e.Graphics.TranslateTransform(100, 0);
// Save translated graphics state.
GraphicsState transState = e.Graphics.Save();
// Reset transformation matrix to identity and fill rectangle.
e.Graphics.ResetTransform();
e.Graphics.FillRectangle(new SolidBrush(Color.Red), 0, 0, 100, 100);
// Restore graphics state to translated state and fill second rectangle.
e.Graphics.Restore(transState);
e.Graphics.FillRectangle(new SolidBrush(Color.Blue), 0, 0, 100, 100);
}
        </code>
      </example>
      <remarks>
        <para>The identity matrix represents a transformation with no scaling, rotation, or translation. Resetting the world transformation of this <see cref="T:System.Drawing.Graphics"/> object to the identity matrix means that its world transformation doesn&apos;t change the geometry of transformed items.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)">
      <summary>
        <para>Restores the state of this <see cref="T:System.Drawing.Graphics"/> object to the state represented by a <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object.</para>
      </summary>
      <param name="gstate">
        <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object that represents the state to which to restore this <see cref="T:System.Drawing.Graphics"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Translates the world transform of the Windows form by a vector (100, 0).</term>
          </item>
          <item>
            <term>Saves the graphics state of the form.</term>
          </item>
          <item>
            <term>Resets the world transform of the form to an identity and fills a rectangle with a solid red brush.</term>
          </item>
          <item>
            <term>Restores the translated graphics state and fills a second rectangle with a solid blue brush.</term>
          </item>
        </list>
        <para>The result is an untranslated red-filled rectangle and a translated blue-filled rectangle.</para>
        <code lang="VB">Public Sub SaveRestore(e As PaintEventArgs)
&apos; Translate transformation matrix.
e.Graphics.TranslateTransform(100, 0)
&apos; Save translated graphics state.
Dim transState As GraphicsState = e.Graphics.Save()
&apos; Reset transformation matrix to identity and fill rectangle.
e.Graphics.ResetTransform()
e.Graphics.FillRectangle(New SolidBrush(Color.Red), 0, 0, 100, 100)
&apos; Restore graphics state to translated state and fill second
&apos; rectangle.
e.Graphics.Restore(transState)
e.Graphics.FillRectangle(New SolidBrush(Color.Blue), 0, 0, _
100, 100)
End Sub
        </code>
        <code lang="C#">public void SaveRestore(PaintEventArgs e)
{
// Translate transformation matrix.
e.Graphics.TranslateTransform(100, 0);
// Save translated graphics state.
GraphicsState transState = e.Graphics.Save();
// Reset transformation matrix to identity and fill rectangle.
e.Graphics.ResetTransform();
e.Graphics.FillRectangle(new SolidBrush(Color.Red), 0, 0, 100, 100);
// Restore graphics state to translated state and fill second rectangle.
e.Graphics.Restore(transState);
e.Graphics.FillRectangle(new SolidBrush(Color.Blue), 0, 0, 100, 100);
}
        </code>
      </example>
      <remarks>
        <para>When you call the <see langword="Save"/> method of a <see cref="T:System.Drawing.Graphics"/> object, an information block that holds the state of the <see cref="T:System.Drawing.Graphics"/> object is put on a stack. The <see langword="Save"/> method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object that identifies that information block. When you pass the identifying <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object to the <see langword="Graphics.Restore"/> method, the information block is removed from the stack and is used to restore the <see cref="T:System.Drawing.Graphics"/> object to the state it was in at the time of the <see langword="Save"/> method call. Note that the <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object returned by a given call to the <see langword="Save"/> method can be passed only once to the <see langword="Restore"/> method.</para>
        <para>Calls to the <see langword="Save"/> method can be nested; that is, you can call the <see langword="Save"/> method several times before you call the <see langword="Restore"/> method. Each time you call the <see langword="Save"/> method, an information block is put on the stack, and you receive a <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object for the information block. When you pass one of those objects to the <see langword="Restore"/> method, the <see cref="T:System.Drawing.Graphics"/> object is returned to the state it was in at the time of the <see langword="Save"/> method call that returned that particular <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object. The information block placed on the stack by that <see langword="Save"/> method call is removed from the stack, and all information blocks placed on that stack after that <see langword="Save"/> method call are also removed.</para>
        <para>Calls to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method place information blocks on the same stack as calls to the <see langword="Save"/> method. Just as a <see langword="Restore"/> call is paired with a <see langword="Save"/> call, a <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method call is paired with a <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call.</para>
        <para>When you call the <see langword="Restore"/> method, all information blocks placed on the stack (by the <see langword="Save"/> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method) after the corresponding call to the <see langword="Save"/> method are removed from the stack. Likewise, When you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, all information blocks placed on the stack (by the <see langword="Save"/> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method are removed from the stack.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.RotateTransform(System.Single)">
      <overload>
        Applies the specified rotation to the transformation matrix of this <see cref="T:System.Drawing.Graphics"/> object.
      </overload>
      <summary>
        <para>Applies the specified rotation to the transformation matrix of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="angle">
        Angle of rotation in degrees.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Translates the world transformation matrix of the Windows form by the vector (100, 0).</term>
          </item>
          <item>
            <term>Rotates the world transformation by an angle of 30 degrees, prepending the rotation matrix to the world transformation matrix.</term>
          </item>
          <item>
            <term>Draws a rotated, translated ellipse with a blue pen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub RotateTransformAngle(e As PaintEventArgs)
&apos; Set world transform of graphics object to translate.
e.Graphics.TranslateTransform(100F, 0F)
&apos; Then to rotate, prepending rotation matrix.
e.Graphics.RotateTransform(30F)
&apos; Draw rotated, translated ellipse to screen.
e.Graphics.DrawEllipse(New Pen(Color.Blue, 3), 0, 0, 200, 80)
End Sub
        </code>
        <code lang="C#">public void RotateTransformAngle(PaintEventArgs e)
{
// Set world transform of graphics object to translate.
e.Graphics.TranslateTransform(100.0F, 0.0F);
// Then to rotate, prepending rotation matrix.
e.Graphics.RotateTransform(30.0F);
// Draw rotated, translated ellipse to screen.
e.Graphics.DrawEllipse(new Pen(Color.Blue, 3), 0, 0, 200, 80);
}
        </code>
      </example>
      <remarks>
        <para>The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the <paramref name="angle"/> parameter. This method applies the rotation by prepending it to the transformation matrix.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Applies the specified rotation to the transformation matrix of this <see cref="T:System.Drawing.Graphics"/> object in the specified order.</para>
      </summary>
      <param name="angle">
        Angle of rotation in degrees.
      </param>
      <param name="order">
        Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies whether the rotation is appended or prepended to the matrix transformation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Translates the world transformation matrix of the Windows form by the vector (100, 0).</term>
          </item>
          <item>
            <term>Rotates the world transform by an angle of 30 degrees, appending the rotation matrix to the world transformation matrix with <see langword="MatrixOrder.Append"/>.</term>
          </item>
          <item>
            <term>Draws a translated, rotated ellipse with a blue pen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub RotateTransformAngleMatrixOrder(e As PaintEventArgs)
&apos; Set world transform of graphics object to translate.
e.Graphics.TranslateTransform(100F, 0F)
&apos; Then to rotate, appending rotation matrix.
e.Graphics.RotateTransform(30F, MatrixOrder.Append)
&apos; Draw translated, rotated ellipse to screen.
e.Graphics.DrawEllipse(New Pen(Color.Blue, 3), 0, 0, 200, 80)
End Sub
        </code>
        <code lang="C#">public void RotateTransformAngleMatrixOrder(PaintEventArgs e)
{
// Set world transform of graphics object to translate.
e.Graphics.TranslateTransform(100.0F, 0.0F);
// Then to rotate, appending rotation matrix.
e.Graphics.RotateTransform(30.0F, MatrixOrder.Append);
// Draw translated, rotated ellipse to screen.
e.Graphics.DrawEllipse(new Pen(Color.Blue, 3), 0, 0, 200, 80);
}
        </code>
      </example>
      <remarks>
        <para>The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the <paramref name="angle"/> parameter. This method premultiplies (prepends) or postmultiplies (appends) the transformation matrix of the <see cref="T:System.Drawing.Graphics"/> object by the rotation matrix according to the <paramref name="order"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.Save">
      <summary>
        <para>Saves the current state of this <see cref="T:System.Drawing.Graphics"/> object and identifies the saved state with a <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object.</para>
      </summary>
      <returns>
        <para>This method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object that represents the saved state of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Translates the world transform of the Windows form by a vector (100, 0).</term>
          </item>
          <item>
            <term>Saves the graphics state of the form.</term>
          </item>
          <item>
            <term>Resets the world transform of the form to an identity (two by two identity matrix plus a zero-vector translation) and fills a rectangle with a solid red brush.</term>
          </item>
          <item>
            <term>Restores the translated graphics state and fills a rectangle with a solid blue brush.</term>
          </item>
        </list>
        <para>The result is an untranslated red-filled rectangle on the left and a translated blue-filled rectangle on the right of the form.</para>
        <code lang="VB">Public Sub SaveRestore(e As PaintEventArgs)
&apos; Translate transformation matrix.
e.Graphics.TranslateTransform(100, 0)
&apos; Save translated graphics state.
Dim transState As GraphicsState = e.Graphics.Save()
&apos; Reset transformation matrix to identity and fill rectangle.
e.Graphics.ResetTransform()
e.Graphics.FillRectangle(New SolidBrush(Color.Red), 0, 0, 100, 100)
&apos; Restore graphics state to translated state and fill second
&apos; rectangle.
e.Graphics.Restore(transState)
e.Graphics.FillRectangle(New SolidBrush(Color.Blue), 0, 0, _
100, 100)
End Sub
        </code>
        <code lang="C#">public void SaveRestore(PaintEventArgs e)
{
// Translate transformation matrix.
e.Graphics.TranslateTransform(100, 0);
// Save translated graphics state.
GraphicsState transState = e.Graphics.Save();
// Reset transformation matrix to identity and fill rectangle.
e.Graphics.ResetTransform();
e.Graphics.FillRectangle(new SolidBrush(Color.Red), 0, 0, 100, 100);
// Restore graphics state to translated state and fill second rectangle.
e.Graphics.Restore(transState);
e.Graphics.FillRectangle(new SolidBrush(Color.Blue), 0, 0, 100, 100);
}
        </code>
      </example>
      <remarks>
        <para>When you call the <see langword="Save"/> method of a <see cref="T:System.Drawing.Graphics"/> object, an information block that holds the state of the <see cref="T:System.Drawing.Graphics"/> object is put on a stack. The <see langword="Save"/> method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object that identifies that information block. When you pass the identifying <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object to the <see langword="Graphics.Restore"/> method, the information block is removed from the stack and is used to restore the <see cref="T:System.Drawing.Graphics"/> object to the state it was in at the time of the <see langword="Save"/> method call. Note that the <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object returned by a given call to the <see langword="Save"/> method can be passed only once to the <see langword="Restore"/> method.</para>
        <para>Calls to the <see langword="Save"/> method can be nested; that is, you can call the <see langword="Save"/> method several times before you call the <see langword="Restore"/> method. Each time you call the <see langword="Save"/> method, an information block is put on the stack, and you receive a <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object for the information block. When you pass one of those objects to the <see langword="Restore"/> method, the <see cref="T:System.Drawing.Graphics"/> object is returned to the state it was in at the time of the <see langword="Save"/> method call that returned that particular <see cref="T:System.Drawing.Drawing2D.GraphicsState"/> object. The information block placed on the stack by that <see langword="Save"/> method call is removed from the stack, and all information blocks placed on that stack after that <see langword="Save"/> method call are also removed.</para>
        <para>Calls to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method place information blocks on the same stack as calls to the <see langword="Save"/> method. Just as a <see langword="Restore"/> call is paired with a <see langword="Save"/> call, a <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method call is paired with a <see cref="M:System.Drawing.Graphics.BeginContainer"/> method call.</para>
        <para>When you call the <see langword="Restore"/> method, all information blocks placed on the stack (by the <see langword="Save"/> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method) after the corresponding call to the <see langword="Save"/> method are removed from the stack. Likewise, When you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/> method, all information blocks placed on the stack (by the <see langword="Save"/> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.BeginContainer"/> method are removed from the stack.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)">
      <overload>
        Applies the specified scaling operation to the transformation matrix of this <see cref="T:System.Drawing.Graphics"/> object by prepending it to the object&apos;s transformation matrix.
      </overload>
      <summary>
        <para>Applies the specified scaling operation to the transformation matrix of this <see cref="T:System.Drawing.Graphics"/> object by prepending it to the object&apos;s transformation matrix.</para>
      </summary>
      <param name="sx">
        Scale factor in the x direction.
      </param>
      <param name="sy">
        Scale factor in the y direction.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Rotates the world transformation matrix of the Windows form by 30 degrees.</term>
          </item>
          <item>
            <term>Scales that matrix by a factor of 3 in the x direction and a factor of 1 in the y direction by prepending the scaling transformation.</term>
          </item>
          <item>
            <term>Draws a scaled, rotated rectangle with a blue pen.</term>
          </item>
        </list>
        <para>The result is still a rectangle.</para>
        <code lang="VB">Public Sub ScaleTransformFloat(e As PaintEventArgs)
&apos; Set world transform of graphics object to rotate.
e.Graphics.RotateTransform(30F)
&apos; Then to scale, prepending to world transform.
e.Graphics.ScaleTransform(3F, 1F)
&apos; Draw scaled, rotated rectangle to screen.
e.Graphics.DrawRectangle(New Pen(Color.Blue, 3), 50, 0, 100, 40)
End Sub
        </code>
        <code lang="C#">public void ScaleTransformFloat(PaintEventArgs e)
{
// Set world transform of graphics object to rotate.
e.Graphics.RotateTransform(30.0F);
// Then to scale, prepending to world transform.
e.Graphics.ScaleTransform(3.0F, 1.0F);
// Draw scaled, rotated rectangle to screen.
e.Graphics.DrawRectangle(new Pen(Color.Blue, 3), 50, 0, 100, 40);
}
        </code>
      </example>
      <remarks>
        <para>The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (<paramref name="sx"/>, <paramref name="sy"/>, 1). This method premultiplies (prepends) the transformation matrix of the <see cref="T:System.Drawing.Graphics"/> object by the scaling matrix.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Applies the specified scaling operation to the transformation matrix of this <see cref="T:System.Drawing.Graphics"/> object in the specified order.</para>
      </summary>
      <param name="sx">
        Scale factor in the x direction.
      </param>
      <param name="sy">
        Scale factor in the y direction.
      </param>
      <param name="order">
        Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies whether the scaling operation is prepended or appended to the transformation matrix.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Rotates the world transformation matrix of the Windows form by 30 degrees.</term>
          </item>
          <item>
            <term>Scales that matrix by a factor of 3 in the x direction and a factor of 1 in the y direction by appending the scaling transformation with the <see langword="MatrixOrder.Append"/> member.</term>
          </item>
          <item>
            <term>Draws a rotated, scaled rectangle with a blue pen.</term>
          </item>
        </list>
        <para>The result is a parallelogram.</para>
        <code lang="VB">Public Sub ScaleTransformFloatMatrixOrder(e As PaintEventArgs)
&apos; Set world transform of graphics object to rotate.
e.Graphics.RotateTransform(30F)
&apos; Then to scale, appending to world transform.
e.Graphics.ScaleTransform(3F, 1F, MatrixOrder.Append)
&apos; Draw rotated, scaled rectangle to screen.
e.Graphics.DrawRectangle(New Pen(Color.Blue, 3), 50, 0, 100, 40)
End Sub
        </code>
        <code lang="C#">public void ScaleTransformFloatMatrixOrder(PaintEventArgs e)
{
// Set world transform of graphics object to rotate.
e.Graphics.RotateTransform(30.0F);
// Then to scale, appending to world transform.
e.Graphics.ScaleTransform(3.0F, 1.0F, MatrixOrder.Append);
// Draw rotated, scaled rectangle to screen.
e.Graphics.DrawRectangle(new Pen(Color.Blue, 3), 50, 0, 100, 40);
}
        </code>
      </example>
      <remarks>
        <para>The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (<paramref name="sx"/>, <paramref name="sy"/>, 1). This method premultiplies (prepends) or postmultiplies (appends) the transformation matrix of the <see cref="T:System.Drawing.Graphics"/> object by the scaling matrix according to the <paramref name="order"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics)">
      <overload>
        Sets the clipping region of this <see cref="T:System.Drawing.Graphics"/> object to the <see langword="Clip"/> property of the specified <see cref="T:System.Drawing.Graphics"/> object.
      </overload>
      <summary>
        <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics"/> object to the <see langword="Clip"/> property of the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="g">
        <see cref="T:System.Drawing.Graphics"/> object from which to take the new clip region.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler, as well as <paramref name="thisForm"/>, the <see cref="T:System.Windows.Forms.Form"/> object for the example. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a temporary <see cref="T:System.Drawing.Graphics"/> object from the <paramref name="thisForm"/> <see cref="T:System.Windows.Forms.Form"/> object of the example.</term>
          </item>
          <item>
            <term>Sets the clipping region of the temporary <see cref="T:System.Drawing.Graphics"/> object to a small square.</term>
          </item>
          <item>
            <term>Updates the clipping region of the form&apos;s graphic object to that of the temporary <see cref="T:System.Drawing.Graphics"/> object.</term>
          </item>
          <item>
            <term>Fills a large rectangle with a solid black brush.</term>
          </item>
        </list>
        <para>The result is a small, filled, black square.</para>
        <code lang="VB">Public Sub SetClipGraphics(e As PaintEventArgs)
&apos; Create temporary graphics object and set its clipping region.
Dim newGraphics As Graphics = thisForm.CreateGraphics()
newGraphics.SetClip(New Rectangle(0, 0, 100, 100))
&apos; Update clipping region of graphics to clipping region of new
&apos; graphics.
e.Graphics.SetClip(newGraphics)
&apos; Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(New SolidBrush(Color.Black), 0, 0, _
500, 300)
&apos; Release new graphics.
newGraphics.Dispose()
End Sub
        </code>
        <code lang="C#">public void SetClipGraphics(PaintEventArgs e)
{
// Create temporary Graphics object and set its clipping region.
Graphics newGraphics = thisForm.CreateGraphics();
newGraphics.SetClip(new Rectangle(0, 0, 100, 100));
// Update clipping region of graphics to clipping region of new graphics.
e.Graphics.SetClip(newGraphics);
// Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(new SolidBrush(Color.Black), 0, 0, 500, 300);
// Release new graphics.
newGraphics.Dispose();
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)">
      <summary>
        <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics"/> object to the result of the specified combining operation of the current clip region and the <see langword="Clip"/> property of the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="g">
        <see cref="T:System.Drawing.Graphics"/> object that specifies the clip region to combine.
      </param>
      <param name="combineMode">
        Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode"/> enumeration that specifies the combining operation to use.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler, as well as <paramref name="thisForm"/>, the <see cref="T:System.Windows.Forms.Form"/> object for the example. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a temporary <see cref="T:System.Drawing.Graphics"/> object from the <paramref name="thisForm"/> <see cref="T:System.Windows.Forms.Form"/> object of the example.</term>
          </item>
          <item>
            <term>Sets the clipping region of the temporary <see cref="T:System.Drawing.Graphics"/> object to a small square.</term>
          </item>
          <item>
            <term>Updates the clipping region of the form&apos;s graphic object to that of the new <see cref="T:System.Drawing.Graphics"/> object with the <see langword="CombineMode.Replace"/> member.</term>
          </item>
          <item>
            <term>Fills a large rectangle with a solid black brush.</term>
          </item>
        </list>
        <para>The result is a small, filled, black square.</para>
        <code lang="VB">Public Sub SetClipGraphicsCombine(e As PaintEventArgs)
&apos; Create temporary graphics object and set its clipping region.
Dim newGraphics As Graphics = thisForm.CreateGraphics()
newGraphics.SetClip(New Rectangle(0, 0, 100, 100))
&apos; Update clipping region of graphics to clipping region of new
&apos; graphics.
e.Graphics.SetClip(newGraphics, CombineMode.Replace)
&apos; Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(New SolidBrush(Color.Black), 0, 0, _
500, 300)
&apos; Release new graphics.
newGraphics.Dispose()
End Sub
        </code>
        <code lang="C#">public void SetClipGraphicsCombine(PaintEventArgs e)
{
// Create temporary Graphics object and set its clipping region.
Graphics newGraphics = thisForm.CreateGraphics();
newGraphics.SetClip(new Rectangle(0, 0, 100, 100));
// Update clipping region of graphics to clipping region of new graphics.
e.Graphics.SetClip(newGraphics, CombineMode.Replace);
// Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(new SolidBrush(Color.Black), 0, 0, 500, 300);
// Release new graphics.
newGraphics.Dispose();
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
        <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics"/> object to the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="path">
        <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object that represents the new clip region.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a graphics path and adds an ellipse to the path.</term>
          </item>
          <item>
            <term>Sets the clipping region to the elliptical path.</term>
          </item>
          <item>
            <term>Fills a large rectangle with a solid black brush.</term>
          </item>
        </list>
        <para>The result is a filled, black ellipse.</para>
        <code lang="VB">Public Sub SetClipPath(e As PaintEventArgs)
&apos; Create graphics path.
Dim clipPath As New GraphicsPath()
clipPath.AddEllipse(0, 0, 200, 100)
&apos; Set clipping region to path.
e.Graphics.SetClip(clipPath)
&apos; Fill rectangle to demonstrate clipping region.
e.Graphics.FillRectangle(New SolidBrush(Color.Black), 0, 0, _
500, 300)
End Sub
        </code>
        <code lang="C#">public void SetClipPath(PaintEventArgs e)
{
// Create graphics path.
GraphicsPath clipPath = new GraphicsPath();
clipPath.AddEllipse(0, 0, 200, 100);
// Set clipping region to path.
e.Graphics.SetClip(clipPath);
// Fill rectangle to demonstrate clipping region.
e.Graphics.FillRectangle(new SolidBrush(Color.Black), 0, 0, 500, 300);
}
        </code>
      </example>
      <remarks>
        <para>If the graphics path represented by the <paramref name="path"/> parameter is not closed, an additional segment is added from the last point to the first point to close the path.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)">
      <summary>
        <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics"/> object to the result of the specified operation combining the current clip region and the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="path">
        <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object to combine.
      </param>
      <param name="combineMode">
        Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode"/> enumeration that specifies the combining operation to use.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a graphics path and adds an ellipse to the path.</term>
          </item>
          <item>
            <term>Sets the clipping region to the elliptical path with the <see langword="CombineMode.Replace"/> member.</term>
          </item>
          <item>
            <term>Fills a large rectangle with a solid black brush.</term>
          </item>
        </list>
        <para>The result is a filled, black ellipse.</para>
        <code lang="VB">Public Sub SetClipPathCombine(e As PaintEventArgs)
&apos; Create graphics path.
Dim clipPath As New GraphicsPath()
clipPath.AddEllipse(0, 0, 200, 100)
&apos; Set clipping region to path.
e.Graphics.SetClip(clipPath, CombineMode.Replace)
&apos; Fill rectangle to demonstrate clipping region.
e.Graphics.FillRectangle(New SolidBrush(Color.Black), 0, 0, _
500, 300)
End Sub
        </code>
        <code lang="C#">public void SetClipPathCombine(PaintEventArgs e)
{
// Create graphics path.
GraphicsPath clipPath = new GraphicsPath();
clipPath.AddEllipse(0, 0, 200, 100);
// Set clipping region to path.
e.Graphics.SetClip(clipPath, CombineMode.Replace);
// Fill rectangle to demonstrate clipping region.
e.Graphics.FillRectangle(new SolidBrush(Color.Black), 0, 0, 500, 300);
}
        </code>
      </example>
      <remarks>
        <para>If the graphics path represented by the <paramref name="path"/> parameter is not closed, an additional segment is added from the last point to the first point to close the path.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)">
      <summary>
        <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics"/> object to the rectangle specified by a <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle"/> structure that represents the new clip region.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a small rectangle for the clipping region.</term>
          </item>
          <item>
            <term>Sets the clipping region to the rectangle.</term>
          </item>
          <item>
            <term>Fills a large rectangle with a solid black brush.</term>
          </item>
        </list>
        <para>The result is a small, filled, black rectangle.</para>
        <code lang="VB">Public Sub SetClipRectangle(e As PaintEventArgs)
&apos; Create rectangle for clipping region.
Dim clipRect As New Rectangle(0, 0, 100, 100)
&apos; Set clipping region of graphics to rectangle.
e.Graphics.SetClip(clipRect)
&apos; Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(New SolidBrush(Color.Black), 0, 0, _
500, 300)
End Sub
        </code>
        <code lang="C#">public void SetClipRectangle(PaintEventArgs e)
{
// Create rectangle for clipping region.
Rectangle clipRect = new Rectangle(0, 0, 100, 100);
// Set clipping region of graphics to rectangle.
e.Graphics.SetClip(clipRect);
// Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(new SolidBrush(Color.Black), 0, 0, 500, 300);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)">
      <summary>
        <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics"/> object to the result of the specified operation combining the current clip region and the rectangle specified by a <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="rect">
        <see cref="T:System.Drawing.Rectangle"/> structure to combine.
      </param>
      <param name="combineMode">
        Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode"/> enumeration that specifies the combining operation to use.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a small rectangle for the clipping region.</term>
          </item>
          <item>
            <term>Sets the clipping region to the rectangle with the <see langword="CombineMode.Replace"/> member.</term>
          </item>
          <item>
            <term>Fills a large rectangle with a solid black brush.</term>
          </item>
        </list>
        <para>The result is a small, filled, black rectangle.</para>
        <code lang="VB">Public Sub SetClipRectangleCombine(e As PaintEventArgs)
&apos; Create rectangle for clipping region.
Dim clipRect As New Rectangle(0, 0, 100, 100)
&apos; Set clipping region of graphics to rectangle.
e.Graphics.SetClip(clipRect, CombineMode.Replace)
&apos; Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(New SolidBrush(Color.Black), 0, 0, _
500, 300)
End Sub
        </code>
        <code lang="C#">public void SetClipRectangleCombine(PaintEventArgs e)
{
// Create rectangle for clipping region.
Rectangle clipRect = new Rectangle(0, 0, 100, 100);
// Set clipping region of graphics to rectangle.
e.Graphics.SetClip(clipRect, CombineMode.Replace);
// Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(new SolidBrush(Color.Black), 0, 0, 500, 300);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)">
      <summary>
        <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics"/> object to the rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF"/> structure that represents the new clip region.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a small rectangle for the clipping region.</term>
          </item>
          <item>
            <term>Sets the clipping region to the rectangle.</term>
          </item>
          <item>
            <term>Fills a large rectangle with a solid black brush.</term>
          </item>
        </list>
        <para>The result is a small, filled, black rectangle.</para>
        <code lang="VB">Public Sub SetClipRectangleF(e As PaintEventArgs)
&apos; Create rectangle for clipping region.
Dim clipRect As New RectangleF(0F, 0F, 100F, 100F)
&apos; Set clipping region of graphics to rectangle.
e.Graphics.SetClip(clipRect)
&apos; Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(New SolidBrush(Color.Black), 0, 0, _
500, 300)
End Sub
        </code>
        <code lang="C#">public void SetClipRectangleF(PaintEventArgs e)
{
// Create rectangle for clipping region.
RectangleF clipRect = new RectangleF(0.0F, 0.0F, 100.0F, 100.0F);
// Set clipping region of graphics to rectangle.
e.Graphics.SetClip(clipRect);
// Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(new SolidBrush(Color.Black), 0, 0, 500, 300);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)">
      <summary>
        <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics"/> object to the result of the specified operation combining the current clip region and the rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="rect">
        <see cref="T:System.Drawing.RectangleF"/> structure to combine.
      </param>
      <param name="combineMode">
        Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode"/> enumeration that specifies the combining operation to use.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a small rectangle for the clipping region.</term>
          </item>
          <item>
            <term>Sets the clipping region to the rectangle with the <see langword="CombineMode.Replace"/> member.</term>
          </item>
          <item>
            <term>Fills a large rectangle with a solid black brush.</term>
          </item>
        </list>
        <para>The result is a small, filled, black rectangle.</para>
        <code lang="VB">Public Sub SetClipRectangleFCombine(e As PaintEventArgs)
&apos; Create rectangle for clipping region.
Dim clipRect As New RectangleF(0F, 0F, 100F, 100F)
&apos; Set clipping region of graphics to rectangle.
e.Graphics.SetClip(clipRect, CombineMode.Replace)
&apos; Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(New SolidBrush(Color.Black), 0, 0, _
500, 300)
End Sub
        </code>
        <code lang="C#">public void SetClipRectangleFCombine(PaintEventArgs e)
{
// Create rectangle for clipping region.
RectangleF clipRect = new RectangleF(0.0F, 0.0F, 100.0F, 100.0F);
// Set clipping region of graphics to rectangle.
e.Graphics.SetClip(clipRect, CombineMode.Replace);
// Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(new SolidBrush(Color.Black), 0, 0, 500, 300);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)">
      <summary>
        <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics"/> object to the result of the specified operation combining the current clip region and the specified <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="region">
        <see cref="T:System.Drawing.Region"/> object to combine.
      </param>
      <param name="combineMode">
        Member from the <see cref="T:System.Drawing.Drawing2D.CombineMode"/> enumeration that specifies the combining operation to use.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a small rectangle for the clipping region.</term>
          </item>
          <item>
            <term>Sets the clipping region to the rectangle with the <see langword="CombineMode.Replace"/> member.</term>
          </item>
          <item>
            <term>Fills a large rectangle with a solid black brush.</term>
          </item>
        </list>
        <para>The result is a small, filled, black rectangle.</para>
        <code lang="VB">Public Sub SetClipRegionCombine(e As PaintEventArgs)
&apos; Create region for clipping.
Dim clipRegion As New [Region](New Rectangle(0, 0, 100, 100))
&apos; Set clipping region of graphics to region.
e.Graphics.SetClip(clipRegion, CombineMode.Replace)
&apos; Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(New SolidBrush(Color.Black), 0, 0, _
500, 300)
End Sub
        </code>
        <code lang="C#">public void SetClipRegionCombine(PaintEventArgs e)
{
// Create region for clipping.
Region clipRegion = new Region(new Rectangle(0, 0, 100, 100));
// Set clipping region of graphics to region.
e.Graphics.SetClip(clipRegion, CombineMode.Replace);
// Fill rectangle to demonstrate clip region.
e.Graphics.FillRectangle(new SolidBrush(Color.Black), 0, 0, 500, 300);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])">
      <overload>
        Transforms an array of points from one coordinate space to another using the current world and page transformations of this <see cref="T:System.Drawing.Graphics"/> object.
      </overload>
      <summary>
        <para>Transforms an array of points from one coordinate space to another using the current world and page transformations of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="destSpace">
        Member of the <see cref="T:System.Drawing.Drawing2D.CoordinateSpace"/> enumeration that specifies the destination coordinate space.
      </param>
      <param name="srcSpace">
        Member of the <see cref="T:System.Drawing.Drawing2D.CoordinateSpace"/> enumeration that specifies the source coordinate space.
      </param>
      <param name="pts">
        Array of <see cref="T:System.Drawing.Point"/> structures that represents the points to transformation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates two points and draws a blue line between them.</term>
          </item>
          <item>
            <term>Sets the world transform to translate by amounts 40 in the x direction and 30 in the y direction.</term>
          </item>
          <item>
            <term>Transforms the points from world coordinates (<see langword="CoordinateSpace.World"/>) to page coordinates (<see langword="CoordinateSpace.Page"/>).</term>
          </item>
          <item>
            <term>Resets the world transformation to the identity.</term>
          </item>
          <item>
            <term>Draws a red line between the transformed points.</term>
          </item>
        </list>
        <para>The result is a blue line and a translated red line below it.</para>
        <code lang="VB">Public Sub TransformPointsPoint(e As PaintEventArgs)
&apos; Create array of two points.
Dim points As Point() =  {New Point(0, 0), New Point(100, 50)}
&apos; Draw line connecting two untransformed points.
e.Graphics.DrawLine(New Pen(Color.Blue, 3), points(0), points(1))
&apos; Set world transformation of Graphics object to translate.
e.Graphics.TranslateTransform(40, 30)
&apos; Transform points in array from world to page coordinates.
e.Graphics.TransformPoints(CoordinateSpace.Page, _
CoordinateSpace.World, points)
&apos; Reset world transformation.
e.Graphics.ResetTransform()
&apos; Draw line that connects transformed points.
e.Graphics.DrawLine(New Pen(Color.Red, 3), points(0), points(1))
End Sub
        </code>
        <code lang="C#">public void TransformPointsPoint(PaintEventArgs e)
{
// Create array of two points.
Point[] points = {new Point(0, 0),
new Point(100, 50)};
// Draw line connecting two untransformed points.
e.Graphics.DrawLine(new Pen(Color.Blue, 3),
points[0],
points[1]);
// Set world transformation of Graphics object to translate.
e.Graphics.TranslateTransform(40, 30);
// Transform points in array from world to page coordinates.
e.Graphics.TransformPoints(CoordinateSpace.Page,
CoordinateSpace.World,
points);
// Reset world transformation.
e.Graphics.ResetTransform();
// Draw line that connects transformed points.
e.Graphics.DrawLine(new Pen(Color.Red, 3),
points[0],
points[1]);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])">
      <summary>
        <para>Transforms an array of points from one coordinate space to another using the current world and page transformations of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="destSpace">
        Member of the <see cref="T:System.Drawing.Drawing2D.CoordinateSpace"/> enumeration that specifies the destination coordinate space.
      </param>
      <param name="srcSpace">
        Member of the <see cref="T:System.Drawing.Drawing2D.CoordinateSpace"/> enumeration that specifies the source coordinate space.
      </param>
      <param name="pts">
        Array of <see cref="T:System.Drawing.PointF"/> structures that represent the points to transform.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates two points and draws a blue line between them.</term>
          </item>
          <item>
            <term>Sets the world transform to translate by amounts 40 in the x direction and 30 in the y direction.</term>
          </item>
          <item>
            <term>Transforms the points from world coordinates (<see langword="CoordinateSpace.World"/>) to page coordinates (<see langword="CoordinateSpace.Page"/>).</term>
          </item>
          <item>
            <term>Resets the world transformation to the identity and draws a red line between the transformed points.</term>
          </item>
        </list>
        <para>The result is a blue line and a translated red line below it.</para>
        <code lang="VB">Public Sub TransformPointsPointF(e As PaintEventArgs)
&apos; Create array of two points.
Dim points As PointF() =  {New PointF(0F, 0F), New PointF(100F, _
50F)}
&apos; Draw line connecting two untransformed points.
e.Graphics.DrawLine(New Pen(Color.Blue, 3), points(0), points(1))
&apos; Set world transformation of Graphics object to translate.
e.Graphics.TranslateTransform(40F, 30F)
&apos; Transform points in array from world to page coordinates.
e.Graphics.TransformPoints(CoordinateSpace.Page, _
CoordinateSpace.World, points)
&apos; Reset world transformation.
e.Graphics.ResetTransform()
&apos; Draw line that connects transformed points.
e.Graphics.DrawLine(New Pen(Color.Red, 3), points(0), points(1))
End Sub
        </code>
        <code lang="C#">public void TransformPointsPointF(PaintEventArgs e)
{
// Create array of two points.
PointF[] points = {new PointF(0.0F, 0.0F),
new PointF(100.0F, 50.0F)};
// Draw line connecting two untransformed points.
e.Graphics.DrawLine(new Pen(Color.Blue, 3),
points[0],
points[1]);
// Set world transformation of Graphics object to translate.
e.Graphics.TranslateTransform(40.0F, 30.0F);
// Transform points in array from world to page coordinates.
e.Graphics.TransformPoints(CoordinateSpace.Page,
CoordinateSpace.World,
points);
// Reset world transformation.
e.Graphics.ResetTransform();
// Draw line that connects transformed points.
e.Graphics.DrawLine(new Pen(Color.Red, 3),
points[0],
points[1]);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)">
      <overload>
        Translates the clipping region of this <see cref="T:System.Drawing.Graphics"/> object by specified amounts in the horizontal and vertical directions.
      </overload>
      <summary>
        <para>Translates the clipping region of this <see cref="T:System.Drawing.Graphics"/> object by specified amounts in the horizontal and vertical directions.</para>
      </summary>
      <param name="dx">
        x component of the translation.
      </param>
      <param name="dy">
        y component of the translation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle for the clipping region.</term>
          </item>
          <item>
            <term>Sets the clipping region to the rectangle.</term>
          </item>
          <item>
            <term>Translates the clipping region by a vector (50, 50).</term>
          </item>
          <item>
            <term>Fills a large rectangle with a solid black brush.</term>
          </item>
        </list>
        <para>The result is a translated, small, black rectangle.</para>
        <code lang="VB">Public Sub TranslateClipInt(e As PaintEventArgs)
&apos; Create rectangle for clipping region.
Dim clipRect As New Rectangle(0, 0, 100, 100)
&apos; Set clipping region of graphics to rectangle.
e.Graphics.SetClip(clipRect)
&apos; Translate clipping region.
Dim dx As Integer = 50
Dim dy As Integer = 50
e.Graphics.TranslateClip(dx, dy)
&apos; Fill rectangle to demonstrate translated clip region.
e.Graphics.FillRectangle(New SolidBrush(Color.Black), 0, 0, _
500, 300)
End Sub
        </code>
        <code lang="C#">public void TranslateClipInt(PaintEventArgs e)
{
// Create rectangle for clipping region.
Rectangle clipRect = new Rectangle(0, 0, 100, 100);
// Set clipping region of graphics to rectangle.
e.Graphics.SetClip(clipRect);
// Translate clipping region.
int dx = 50;
int dy = 50;
e.Graphics.TranslateClip(dx, dy);
// Fill rectangle to demonstrate translated clip region.
e.Graphics.FillRectangle(new SolidBrush(Color.Black), 0, 0, 500, 300);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.TranslateClip(System.Single,System.Single)">
      <summary>
        <para>Translates the clipping region of this <see cref="T:System.Drawing.Graphics"/> object by specified amounts in the horizontal and vertical directions.</para>
      </summary>
      <param name="dx">
        x component of the translation.
      </param>
      <param name="dy">
        y component of the translation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle for the clipping region.</term>
          </item>
          <item>
            <term>Sets the clipping region to the rectangle.</term>
          </item>
          <item>
            <term>Translates the clipping region by a vector (50.0F, 50.0F).</term>
          </item>
          <item>
            <term>Fills a large rectangle with a solid black brush.</term>
          </item>
        </list>
        <para>The result is a translated, small, black rectangle.</para>
        <code lang="VB">Public Sub TranslateClipFloat(e As PaintEventArgs)
&apos; Create rectangle for clipping region.
Dim clipRect As New RectangleF(0F, 0F, 100F, 100F)
&apos; Set clipping region of graphics to rectangle.
e.Graphics.SetClip(clipRect)
&apos; Translate clipping region.
Dim dx As Single = 50F
Dim dy As Single = 50F
e.Graphics.TranslateClip(dx, dy)
&apos; Fill rectangle to demonstrate translated clip region.
e.Graphics.FillRectangle(New SolidBrush(Color.Black), 0, 0, _
500, 300)
End Sub
        </code>
        <code lang="C#">public void TranslateClipFloat(PaintEventArgs e)
{
// Create rectangle for clipping region.
RectangleF clipRect = new RectangleF(0.0F, 0.0F, 100.0F, 100.0F);
// Set clipping region of graphics to rectangle.
e.Graphics.SetClip(clipRect);
// Translate clipping region.
float dx = 50.0F;
float dy = 50.0F;
e.Graphics.TranslateClip(dx, dy);
// Fill rectangle to demonstrate translated clip region.
e.Graphics.FillRectangle(new SolidBrush(Color.Black), 0, 0, 500, 300);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)">
      <overload>
        Prepends the specified translation to the transformation matrix of this <see cref="T:System.Drawing.Graphics"/> object.
      </overload>
      <summary>
        <para>Prepends the specified translation to the transformation matrix of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="dx">
        x component of the translation.
      </param>
      <param name="dy">
        y component of the translation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Rotates the world transformation matrix of the Windows form by 30.0F degrees.</term>
          </item>
          <item>
            <term>Translates the world transformation by a vector (100.0F, 0.0F), prepending the translation.</term>
          </item>
          <item>
            <term>Draws a translated, rotated ellipse with a blue pen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub TranslateTransformAngle(e As PaintEventArgs)
&apos; Set world transform of graphics object to rotate.
e.Graphics.RotateTransform(30F)
&apos; Then to translate, prepending to world transform.
e.Graphics.TranslateTransform(100F, 0F)
&apos; Draw translated, rotated ellipse to screen.
e.Graphics.DrawEllipse(New Pen(Color.Blue, 3), 0, 0, 200, 80)
End Sub
        </code>
        <code lang="C#">public void TranslateTransformAngle(PaintEventArgs e)
{
// Set world transform of graphics object to rotate.
e.Graphics.RotateTransform(30.0F);
// Then to translate, prepending to world transform.
e.Graphics.TranslateTransform(100.0F, 0.0F);
// Draw translated, rotated ellipse to screen.
e.Graphics.DrawEllipse(new Pen(Color.Blue, 3), 0, 0, 200, 80);
}
        </code>
      </example>
      <remarks>
        <para>The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the <paramref name="dx "/>and<paramref name=" dy"/> parameters. This method applies the translation by prepending the translation matrix to the transformation matrix.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Applies the specified translation to the transformation matrix of this <see cref="T:System.Drawing.Graphics"/> object in the specified order.</para>
      </summary>
      <param name="dx">
        x component of the translation.
      </param>
      <param name="dy">
        y component of the translation.
      </param>
      <param name="order">
        Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies whether the translation is prepended or appended to the transformation matrix.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Rotates the world transformation matrix of the Windows form by 30.0F degrees.</term>
          </item>
          <item>
            <term>Translates the world transformation by a vector (100.0F, 0.0F), appending the translation with <see langword="MatrixOrder.Append"/>.</term>
          </item>
          <item>
            <term>Draws a rotated, translated ellipse with a blue pen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub TranslateTransformAngleMatrixOrder(e As PaintEventArgs)
&apos; Set world transform of graphics object to rotate.
e.Graphics.RotateTransform(30F)
&apos; Then to translate, appending to world transform.
e.Graphics.TranslateTransform(100F, 0F, MatrixOrder.Append)
&apos; Draw rotated, translated ellipse to screen.
e.Graphics.DrawEllipse(New Pen(Color.Blue, 3), 0, 0, 200, 80)
End Sub
        </code>
        <code lang="C#">public void TranslateTransformAngleMatrixOrder(PaintEventArgs e)
{
// Set world transform of graphics object to rotate.
e.Graphics.RotateTransform(30.0F);
// Then to translate, appending to world transform.
e.Graphics.TranslateTransform(100.0F, 0.0F, MatrixOrder.Append);
// Draw rotated, translated ellipse to screen.
e.Graphics.DrawEllipse(new Pen(Color.Blue, 3), 0, 0, 200, 80);
}
        </code>
      </example>
      <remarks>
        <para>The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the <paramref name="dx "/>and<paramref name=" dy"/> parameters. This method premultiplies (prepends) or postmultiplies (appends) the transformation matrix of the <see cref="T:System.Drawing.Graphics"/> object by the translation matrix according to the <paramref name="order"/> parameter.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Graphics.Clip">
      <summary>
        <para>Gets or sets a <see cref="T:System.Drawing.Region"/> object that limits the drawing region of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>This property specifies a <see cref="T:System.Drawing.Region"/> object that limits the portion of this <see cref="T:System.Drawing.Graphics"/> object that is currently available for drawing.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Graphics.ClipBounds">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.RectangleF"/> structure that bounds the clipping region of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>This property indicates a <see cref="T:System.Drawing.RectangleF"/> structure that represents a bounding rectangle for the clipping region of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </value>
	  <remarks>
	    <para>If the clipping region is infinite, the <see langword="ClipBounds"/> property returns a meaningless large rectangle. To determine whether the clipping region is infinite, retrieve the <see cref="P:System.Drawing.Graphics.Clip"/> property and call its <see cref="M:System.Drawing.Region.IsInfinite(System.Drawing.Graphics)"/> method.</para>
	  </remarks>
    </member>

    <member name="P:System.Drawing.Graphics.CompositingMode">
      <summary>
        <para>Gets a value that specifies how composited images are drawn to this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>This property specifies a member of the <see cref="T:System.Drawing.Drawing2D.CompositingMode"/> enumeration.</para>
      </value>
      <remarks>
        <para>The compositing mode determines whether pixels from a source image overwrite or are combined with background pixels.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Graphics.CompositingQuality">
      <summary>
        <para>Gets or sets the rendering quality of composited images drawn to this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>This property specifies a member of the <see cref="T:System.Drawing.Drawing2D.CompositingQuality"/> enumeration.</para>
      </value>
      <remarks>
        <para>The compositing quality determines the rendering quality level of composited images.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Graphics.DpiX">
      <summary>
        <para>Gets the horizontal resolution of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>This property indicates a value, in dots per inch, for the horizontal resolution supported by this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Graphics.DpiY">
      <summary>
        <para>Gets the vertical resolution of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>This property indicates a value, in dots per inch, for the vertical resolution supported by this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Graphics.InterpolationMode">
      <summary>
        <para>Gets or sets the interpolation mode associated with this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>This property specifies a member of the <see cref="T:System.Drawing.Drawing2D.InterpolationMode"/> enumeration associated with this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </value>
      <remarks>
        <para>The interpolation mode determines how intermediate values between two endpoints are calculated.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Graphics.IsClipEmpty">
      <summary>
        <para>Gets a value indicating whether the clipping region of this <see cref="T:System.Drawing.Graphics"/> object is empty.</para>
      </summary>
      <value>
        <para>This property is <see langword="true"/> if the clipping region of this <see cref="T:System.Drawing.Graphics"/> object is empty; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Graphics.IsVisibleClipEmpty">
      <summary>
        <para>Gets a value indicating whether the visible clipping region of this <see cref="T:System.Drawing.Graphics"/> object is empty.</para>
      </summary>
      <value>
        <para>This property is <see langword="true"/> if the visible portion of the clipping region of this <see cref="T:System.Drawing.Graphics"/> object is empty; otherwise, <see langword="false"/>.</para>
      </value>
      <remarks>
        <para>The visible clipping region is the intersection of the clipping region of this Graphics object and the clipping region of the window.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Graphics.PageScale">
      <summary>
        <para>Gets or sets the scaling between world units and page units for this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>This property specifies a value for the scaling between world units and page units for this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Graphics.PageUnit">
      <summary>
        <para>Gets or sets the unit of measure used for page coordinates in this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>This property specifies a member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration.</para>
      </value>
      <remarks>
        <para>The graphics unit is the unit of measure used for page coordinates in this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Graphics.PixelOffsetMode">
      <summary>
        <para>Gets or set a value specifying how pixels are offset during rendering of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>This property specifies a member of the <see cref="T:System.Drawing.Drawing2D.PixelOffsetMode"/> enumeration</para>
      </value>
      <remarks>
        <para>The pixel offset mode determines how pixels are offset during rendering.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Graphics.RenderingOrigin">
      <summary>
        <para>Gets or sets the rendering origin of this <see cref="T:System.Drawing.Graphics"/> object for dithering and for hatch brushes.</para>
      </summary>
      <value>
        <para>This property specifies a <see cref="T:System.Drawing.Point"/> structure that represents the dither origin for 8-bits-per-pixel and 16-bits-per-pixel dithering and is also used to set the origin for hatch brushes.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Graphics.SmoothingMode">
      <summary>
        <para>Gets or sets the rendering quality for this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>This property specifies a member of the <see cref="T:System.Drawing.Drawing2D.SmoothingMode"/> enumeration.</para>
      </value>
      <remarks>
        <para>The smoothing mode specifies whether lines, curves, and the edges of filled areas use smoothing (also called antialiasing). One exception is that path gradient brushes do not obey the smoothing mode. Areas filled using a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object are rendered the same way (aliased) regardless of the <see langword="SmoothingMode"/> property.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Graphics.TextContrast">
      <summary>
        <para>Gets or sets the gamma correction value for rendering text.</para>
      </summary>
      <value>
        <para>This property specifies a value of the gamma correction used for rendering antialiased and ClearType text.</para>
      </value>
      <remarks>
        <para>The gamma correction value must be between 0 and 12. The default value is 4.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Graphics.TextRenderingHint">
      <summary>
        <para>Gets or sets the rendering mode for text associated with this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>This property specifies a member of the <see cref="T:System.Drawing.Text.TextRenderingHint"/> enumeration.</para>
      </value>
      <remarks>
        <para>The text rendering hint specifies whether text renders with antialiasing.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Graphics.Transform">
      <summary>
        <para>Gets or sets the world transformation for this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>This property specifies a <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that represents the world transformation for this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Graphics.VisibleClipBounds">
      <summary>
        <para>Gets or sets the bounding rectangle of the visible clipping region of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.RectangleF"/> structure that represents a bounding rectangle for the visible clipping region of this <see cref="T:System.Drawing.Graphics"/> object.</para>
      </value>
      <remarks>
        <para>The visible clipping region is the intersection of the clipping region of this Graphics object and the clipping region of the window.</para>
      </remarks>
    </member>

    <member name="T:System.Drawing.Icon">
      <summary>
        <para>Represents a Windows icon, which is a small bitmap image used to represent an object. Icons can be thought of as transparent bitmaps, although their size is determined by the system.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Icon.#ctor(System.String)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Icon"/> class from the specified file name.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Icon"/> class from the specified file name.</para>
      </summary>
      <param name="fileName">
        The file to load the <see cref="T:System.Drawing.Icon"/> object from.
      </param>
    </member>

    <member name="M:System.Drawing.Icon.#ctor(System.Drawing.Icon,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Icon"/> class and attempts to find a version of the icon that matches the requested size.</para>
      </summary>
      <param name="original">
        The icon to load the different size from.
      </param>
      <param name="width">
        The width of the new icon.
      </param>
      <param name="height">
        The height of the new icon.
      </param>
      <remarks>
        <para>If a version cannot be found that exactly matches the size, the closest match is used. Note that if the <paramref name="original"/> parameter is an <see cref="T:System.Drawing.Icon"/> object with a single size, this method only creates a duplicate icon. Use the stretching capabilities of the <see cref="M:System.Drawing.Graphics.DrawImage"/> method to resize the icon.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Icon.#ctor(System.Drawing.Icon,System.Drawing.Size)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Icon"/> class and attempts to find a version of the icon that matches the requested size.</para>
      </summary>
      <param name="original">
        The <see cref="T:System.Drawing.Icon"/> object from which to load the newly sized icon.
      </param>
      <param name="size">
        A <see cref="T:System.Drawing.Size"/> structure that specifies the height and width of the new <see cref="T:System.Drawing.Icon"/> object.
      </param>
      <remarks>
        <para>If a version cannot be found that exactly matches the size, the closest match is used. Note that if the <paramref name="original"/> parameter is an <see cref="T:System.Drawing.Icon"/> object with a single size, this method only creates a duplicate icon. Use the stretching capabilities of the <see cref="M:System.Drawing.Graphics.DrawImage"/> method to resize the icon.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Icon.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Icon"/> class from a resource in the specified assembly.</para>
      </summary>
      <param name="type">
        A <see cref="T:System.Type"/> object that specifies the assembly in which to look for the resource.
      </param>
      <param name="resource">
        The resource name to load.
      </param>
      <remarks>
        <para>This constructor creates an <see cref="T:System.Drawing.Icon"/> object from a resource with the name specified by the <paramref name="resource"/> parameter in the assembly that contains the type specified by the <paramref name="type"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Icon.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Icon"/> class from the specified data stream.</para>
      </summary>
      <param name="stream">
        The data stream from which to load the <see cref="T:System.Drawing.Icon"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Icon.#ctor(System.IO.Stream,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Icon"/> class from the specified data stream and with the specified width and height.</para>
      </summary>
      <param name="stream">
        The data stream from which to load the icon.
      </param>
      <param name="width">
        The width of the icon.
      </param>
      <param name="height">
        The height of the icon.
      </param>
    </member>

    <member name="M:System.Drawing.Icon.Clone">
      <summary>
        <para>Clones the <see cref="T:System.Drawing.Icon"/> object, creating a duplicate image.</para>
      </summary>
      <returns>
        <para>An object that can be cast to an <see cref="T:System.Drawing.Icon"/> object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Icon.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Icon"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Icon"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Icon.FromHandle(System.IntPtr)">
      <summary>
        <para>Creates a GDI+ <see cref="T:System.Drawing.Icon"/> object from the specified Windows handle to an icon (HICON).</para>
      </summary>
      <param name="handle">
        A Windows handle to an icon.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Icon"/> object this method creates.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Icon.Save(System.IO.Stream)">
      <summary>
        <para>Saves this <see cref="T:System.Drawing.Icon"/> object to the specified output <see cref="T:System.IO.Stream"/> object.</para>
      </summary>
      <param name="outputStream">
        The <see cref="T:System.IO.Stream"/> object to save to.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Icon.ToBitmap">
      <summary>
        <para>Converts this <see cref="T:System.Drawing.Icon"/> object to a GDI+ <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Drawing.Bitmap"/> object representing the converted <see cref="T:System.Drawing.Icon"/> object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Icon.ToString">
      <summary>
        <para>Gets a human-readable string that describes the <see cref="T:System.Drawing.Icon"/> object.</para>
      </summary>
      <returns>
        <para>A string that describes the <see cref="T:System.Drawing.Icon"/> object.</para>
      </returns>
    </member>

    <member name="P:System.Drawing.Icon.Handle">
      <summary>
        <para>Gets the Windows handle for this <see cref="T:System.Drawing.Icon"/> object. This is not a copy of the handle; do not free it.</para>
      </summary>
      <value>
        <para>The Windows handle for the icon.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Icon.Height">
      <summary>
        <para>Gets the height of this <see cref="T:System.Drawing.Icon"/> object.</para>
      </summary>
      <value>
        <para>The height of this <see cref="T:System.Drawing.Icon"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Icon.Size">
      <summary>
        <para>Gets the size of this <see cref="T:System.Drawing.Icon"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Size"/> structure that specifies the width and height of this <see cref="T:System.Drawing.Icon"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Icon.Width">
      <summary>
        <para>Gets the width of this <see cref="T:System.Drawing.Icon"/> object.</para>
      </summary>
      <value>
        <para>The width of this <see cref="T:System.Drawing.Icon"/> object.</para>
      </value>
    </member>

    <member name="T:System.Drawing.IconConverter">
      <summary>
        <para>Converts an <see cref="T:System.Drawing.Icon"/> object from one data type to another. Access this class through the <see langword="TypeDescriptor"/> object.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.IconConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.IconConverter"/> class.</para>
      </summary>
    </member>
	
	<member name="M:System.Drawing.IconConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Determines whether this <see cref="T:System.Drawing.IconConverter"/> can convert an instance of a specified type to an <see cref="T:System.Drawing.Icon"/>, using the specified context.</para>
      </summary>
      <param name="context">
        An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
      </param>
      <param name="sourceType">
        A <see cref="T:System.Type"/> that specifies the type you want to convert from.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this <see cref="T:System.Drawing.IconConverter"/> can perform the conversion; otherwise, <see langword="false"/>.</para>
      </returns>
	  <remarks>
	    <para>This method returns <see langword="true"/> only if <paramref name="sourceType"/> is equal to typeof(System.Byte[]).</para>
	  </remarks>
    </member>
	
	<member name="M:System.Drawing.IconConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Determines whether this <see cref="T:System.Drawing.IconConverter"/> can convert an <see cref="T:System.Drawing.Icon"/> to an instance of a specified type, using the specified context.</para>
      </summary>
      <param name="context">
        An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
      </param>
      <param name="destinationType">
        A <see cref="T:System.Type"/> that specifies the type you want to convert to.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this <see cref="T:System.Drawing.IconConverter"/> can perform the conversion; otherwise, <see langword="false"/>.</para>
      </returns>
	  <remarks>
	    <para>This method returns <see langword="true"/> only if <paramref name="destinationType"/> is equal to typeof(System.Byte[]) or typeof(System.String).</para>
	  </remarks>
    </member>

	<member name="M:System.Drawing.IconConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para>Converts a specified object to an <see cref="T:System.Drawing.Icon"/>.</para>
      </summary>
      <param name="context">
        An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
      </param>
      <param name="culture">
        A <see cref="T:System.Globalization.CultureInfo"/> that holds information about a specific culture. 
      </param>
	  <param name="value">
        The <see cref="T:System.Object"/> to be converted.
      </param>
      <returns>
        <para>If this method succeeds, it returns the <see cref="T:System.Drawing.Icon"/> that it created by converting the specified object. Otherwise, it throws an exception.</para>
      </returns>
    </member>
	
    <member name="M:System.Drawing.IconConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts an <see cref="T:System.Drawing.Icon"/> (or an object that can be cast to an Icon) to a specified type.</para>
      </summary>
      <param name="context">
        An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
      </param>
      <param name="culture">
        A <see langword="CultureInfo"/> object that specifies formatting conventions used by a particular culture.
      </param>
      <param name="value">
        The object to convert. This object should be of type Icon or some type that can be cast Icon.
      </param>
      <param name="destinationType">
        The type to convert the Icon to.
      </param>
      <returns>
        <para>This method returns the converted object.</para>
      </returns>
      <remarks>
        <para>The default implementation calls the <see langword="ToString"/> method on the object if the object is valid and if the destination type is <see langword="string"/>. If this method cannot convert to the destination type, it throws a <see cref="T:System.NotSupportedException"/> exception.</para>
      </remarks>
    </member>

    <member name="T:System.Drawing.Image">
      <summary>
        <para>An abstract base class that provides functionality for the <see cref="T:System.Drawing.Bitmap"/> and <see cref="T:System.Drawing.Imaging.Metafile"/> descended classes.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Image.Clone">
      <summary>
        <para>Creates an exact copy of this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.Image"/> this method creates, cast as an object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Image"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Image.FromFile(System.String)">
      <overload>
        Creates an <see cref="T:System.Drawing.Image"/> object from the specified file.
      </overload>
      <summary>
        <para>Creates an <see cref="T:System.Drawing.Image"/> object from the specified file.</para>
      </summary>
      <param name="filename">
        A string that contains the name of the file from which to create the <see cref="T:System.Drawing.Image"/> object.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Image"/> object this method creates.</para>
      </returns>
      <remarks>
	     <para>The file remains locked until the <see cref="T:System.Drawing.Image"/> object is disposed.</para>
        <para>If the file does not have a valid image format or if GDI+ does not support the pixel format of the file, this method throws an <see langword="OutOfMemoryException"/> exception.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Image.FromFile(System.String,System.Boolean)">
      <summary>
        <para>Creates an <see cref="T:System.Drawing.Image"/> object from the specified file using embedded color management information in that file.</para>
      </summary>
      <param name="filename">
        A string that contains the name of the file from which to create the <see cref="T:System.Drawing.Image"/> object.
      </param>
      <param name="useEmbeddedColorManagement">
        Set to <see langword="true"/> to use color management information embedded in the image file; otherwise, <see langword="false"/>.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Image"/> object this method creates.</para>
      </returns>
      <remarks>
	    <para>The file remains locked until the <see cref="T:System.Drawing.Image"/> object is disposed.</para>
        <para>If the file does not have a valid image format or if GDI+ does not support the pixel format of the file, this method throws an <see langword="OutOfMemoryException"/> exception.</para>
        <para>The <paramref name="useEmbeddedColorManagement"/> parameter specifies whether the new <see cref="T:System.Drawing.Image"/> object applies color correction according to color management information that is embedded in the image file. Embedded information can include International Color Consortium (ICC) profiles, gamma values, and chromaticity information.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Image.FromHbitmap(System.IntPtr)">
      <overload>
        Creates a <see cref="T:System.Drawing.Bitmap"/> object from a Windows handle.
      </overload>
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Bitmap"/> object from a handle to a GDI bitmap.</para>
      </summary>
      <param name="hbitmap">
        The GDI bitmap handle from which to create the <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Bitmap"/> object this method creates.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.FromHbitmap(System.IntPtr,System.IntPtr)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Bitmap"/> object from a handle to a GDI bitmap and a handle to a GDI palette.</para>
      </summary>
      <param name="hbitmap">
        The GDI bitmap handle from which to create the <see cref="T:System.Drawing.Bitmap"/> object.
      </param>
      <param name="hpalette">
        A handle to a GDI palette used to define the bitmap colors if the bitmap specified in the <paramref name="hBitmap"/> parameter is not a device-independent bitmap (DIB).
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Bitmap"/> object this method creates.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.FromStream(System.IO.Stream)">
      <overload>
        Creates an <see cref="T:System.Drawing.Image"/> object from the specified data stream.
      </overload>
      <summary>
        <para>Creates an <see cref="T:System.Drawing.Image"/> object from the specified data stream.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object that contains the data for this <see cref="T:System.Drawing.Image"/> object.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Image"/> object this method creates.</para>
      </returns>
	  <remarks>
	    <para>You must keep the stream open for the lifetime of the <see cref="T:System.Drawing.Image"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Image.FromStream(System.IO.Stream,System.Boolean)">
      <summary>
        <para>Creates an <see cref="T:System.Drawing.Image"/> object from the specified data stream, using embedded color management information in that stream.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object that contains the data for this <see cref="T:System.Drawing.Image"/> object.
      </param>
      <param name="useEmbeddedColorManagement">
        Set to <see langword="true"/> to use color management information embedded in the data stream; otherwise, <see langword="false"/>.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Image"/> object this method creates.</para>
      </returns>
      <remarks>
	    <para>You must keep the stream open for the lifetime of the <see cref="T:System.Drawing.Image"/> object.</para>
        <para>The <paramref name="useEmbeddedColorManagement"/> parameter specifies whether the new <see cref="T:System.Drawing.Image"/> object applies color correction according to color management information that is embedded in the data stream. Embedded information can include International Color Consortium (ICC) profiles, gamma values, and chromaticity information.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Image.GetBounds(System.Drawing.GraphicsUnit@)">
      <summary>
        <para>Gets a bounding rectangle in the specified units for this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <param name="pageUnit">
        A member of the <see cref="T:System.Drawing.GraphicsUnit"/> enumeration that specifies the units for the rectangle.
      </param>
      <returns>
        <para>A <see cref="T:System.Drawing.RectangleF"/> structure that represents a bounding rectangle for this <see cref="T:System.Drawing.Image"/> object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.GetEncoderParameterList(System.Guid)">
      <summary>
        <para>Returns information about the parameters supported by the specified image encoder.</para>
      </summary>
      <param name="encoder">
        A GUID that specifies the image encoder.
      </param>
      <returns>
        <para>An <see cref="T:System.Drawing.Imaging.EncoderParameters"/> object that contains an array of <see cref="T:System.Drawing.Imaging.EncoderParameter"/> objects. Each <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object contains information about one of he parameters supported by the specified image encoder.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.GetFrameCount(System.Drawing.Imaging.FrameDimension)">
      <summary>
        <para>Returns the number of frames of the specified dimension.</para>
      </summary>
      <param name="dimension">
        A <see cref="T:System.Drawing.Imaging.FrameDimension"/> that specifies the identity of the dimension type.
      </param>
      <returns>
        <para>The number of frames in the specified dimension.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.GetPixelFormatSize(System.Drawing.Imaging.PixelFormat)">
      <summary>
        <para>Returns the color depth (number of bits per pixel) of the specified pixel format.</para>
      </summary>
      <param name="pixfmt">
        The <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration member specifying the format for which to find the size.
      </param>
      <returns>
        <para>The color depth of the specified pixel format.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.GetPropertyItem(System.Int32)">
      <summary>
        <para>Gets the specified property item from this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <param name="propid">
        The ID of the property item to get.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Imaging.PropertyItem"/> object this method gets.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)">
      <summary>
        <para>Returns a thumbnail for this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <param name="thumbWidth">
        The width, in pixels, of the requested thumbnail image.
      </param>
      <param name="thumbHeight">
        The height, in pixels, of the requested thumbnail image.
      </param>
      <param name="callback">
        A <see cref="T:System.Drawing.Image.GetThumbnailImageAbort"/> delegate. In GDI+ version 1.0, the delegate is not used. Even so, you must create a delegate and pass a reference to that delegate in this parameter.
      </param>
      <param name="callbackData">
        Must be IntPtr.Zero.
      </param>
      <returns>
        <para>An <see cref="T:System.Drawing.Image"/> object that represents the thumbnail.</para>
      </returns>
      <example>
        <para>The following example creates and displays a thumbnail image. This delegate is never called.</para>
        <code lang="C#">public bool ThumbnailCallback()
{
return false;
}
public void Example_GetThumb(PaintEventArgs e)
{
Image.GetThumbnailImageAbort myCallback =
new Image.GetThumbnailImageAbort(ThumbnailCallback);
Bitmap myBitmap = new Bitmap(&quot;Climber.jpg&quot;);
Image myThumbnail = myBitmap.GetThumbnailImage(
40, 40, myCallback, IntPtr.Zero);
e.Graphics.DrawImage(myThumbnail, 150, 75);
}
        </code>
      </example>
      <remarks>
        <para>If the <see cref="T:System.Drawing.Image"/> object contains an embedded thumbnail image, then this method retrieves the embedded thumbnail and scales it to the requested size. If the <see cref="T:System.Drawing.Image"/> object does not contain an embedded thumbnail image, this method creates a thumbnail image by scaling the main image.</para>
        <para>GetThumbnailImage works well when the requested thumbnail image has a size of about 120 x 120. If you request a large thumbnail image (say 300 x 300) from an <see cref="T:System.Drawing.Image"/> object that has an embedded thumbnail, there could be a noticeable loss of quality in the thumbnail image. It might be better to scale the main image (instead of scaling the embedded thumbnail) by calling <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)"/>.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Image.IsAlphaPixelFormat(System.Drawing.Imaging.PixelFormat)">
      <summary>
        <para>Returns a value that indicates whether the pixel format for this <see cref="T:System.Drawing.Image"/> object contains alpha information.</para>
      </summary>
      <param name="pixfmt">
        The <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the <paramref name="pixfmt"/> parameter contains alpha information; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.IsCanonicalPixelFormat(System.Drawing.Imaging.PixelFormat)">
      <summary>
        <para>Returns a value that indicates whether the pixel format is canonical.</para>
      </summary>
      <param name="pixfmt">
        The <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the <paramref name="pixfmt"/> parameter is canonical; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.IsExtendedPixelFormat(System.Drawing.Imaging.PixelFormat)">
      <summary>
        <para>Returns a value that indicates whether the pixel format is extended.</para>
      </summary>
      <param name="pixfmt">
        The <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the <paramref name="pixfmt"/> parameter is extended; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.RemovePropertyItem(System.Int32)">
      <summary>
        <para>Removes the specified property item from this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <param name="propid">
        The ID of the property item to remove.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>If the image does not contain the requested property item or if the image format does not support property items, <see langword="RemovePropertyItem"/> throws System.ArgumentException with the message, "Property not found."</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Image.RotateFlip(System.Drawing.RotateFlipType)">
      <summary>
        <para>This method either rotates, flips, or rotates and flips the <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <param name="rotateFlipType">
        A <see langword="RotateFlipType"/> enumeration member that specifies the type of rotation and flip to apply to the image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <overload>
        Saves this image to the specified stream in the specified format.
      </overload>
      <summary>
        <para>Saves this image to the specified stream in the specified format.</para>
      </summary>
      <param name="stream">
        The <see cref="T:System.IO.Stream"/> where the image will be saved.
      </param>
      <param name="format">
        An <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that specifies the format of the saved image.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>	  
	  <remarks>
	    <para>Do not save an image to the same stream that was used to construct the image. Doing so might damage the stream.</para>
        <code lang="C#">Image myImage = Image.FromStream(myStream);
...
myImage.Save(myStream, ...); // Do not do this.
        </code>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageCodecInfo,System.Drawing.Imaging.EncoderParameters)">
      <summary>
        <para>Saves this image to the specified stream in the specified format.</para>
      </summary>
      <param name="stream">
        The <see cref="T:System.IO.Stream"/> where the image will be saved.
      </param>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that specifies the format of the saved image.
      </param>
      <param name="encoderParams">
        An <see cref="T:System.Drawing.Imaging.EncoderParameters"/> that specifies parameters used by the image encoder.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>  
	  <remarks>
	    <para>Do not save an image to the same stream that was used to construct the image. Doing so might damage the stream.</para>
        <code lang="C#">Image myImage = Image.FromStream(myStream);
...
myImage.Save(myStream, ...); // Do not do this.
        </code>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Image.Save(System.String)">
      <summary>
        <para>Saves this <see cref="T:System.Drawing.Image"/> object to the specified file.</para>
      </summary>
      <param name="filename">
        A string that contains the name of the file to which to save this <see cref="T:System.Drawing.Image"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.Save(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
        <para>Saves this <see cref="T:System.Drawing.Image"/> object to the specified file in the specified format.</para>
      </summary>
      <param name="filename">
        A string that contains the name of the file to which to save this <see cref="T:System.Drawing.Image"/> object.
      </param>
      <param name="format">
        The <see cref="T:System.Drawing.Imaging.ImageFormat"/> object for this <see cref="T:System.Drawing.Image"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.Save(System.String,System.Drawing.Imaging.ImageCodecInfo,System.Drawing.Imaging.EncoderParameters)">
      <summary>
        <para>Saves this <see cref="T:System.Drawing.Image"/> object to the specified file, in the specified format, and with the specified codec parameters.</para>
      </summary>
      <param name="filename">
        A string that contains the name of the file to which to save this <see cref="T:System.Drawing.Image"/> object.
      </param>
      <param name="encoder">
        The <see cref="T:System.Drawing.Imaging.ImageFormat"/>  object for this <see cref="T:System.Drawing.Image"/> object.
      </param>
      <param name="encoderParams">
        An <see cref="T:System.Drawing.Imaging.EncoderParameters"/>  object to use for this <see cref="T:System.Drawing.Image"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.SaveAdd(System.Drawing.Image,System.Drawing.Imaging.EncoderParameters)">
      <overload>
        Adds the information in the specified <see cref="T:System.Drawing.Image"/> object to this <see cref="T:System.Drawing.Image"/> object. The specified <see cref="T:System.Drawing.Imaging.EncoderParameters"/> object determines how the new information is incorporated into the existing image.
      </overload>
      <summary>
        <para>Adds a frame to the file or stream specified in a previous call to the <see langword="Save"/> method. </para>
      </summary>
      <param name="image">
        An <see cref="T:System.Drawing.Image"/> object that contains the frame to add.
      </param>
      <param name="encoderParams">
        An <see cref="T:System.Drawing.Imaging.EncoderParameters"/> object that holds parameters required by the image encoder that is used by the save-add operation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.SaveAdd(System.Drawing.Imaging.EncoderParameters)">
      <summary>
        <para>Adds a frame to the file or stream specified in a previous call to the <see langword="Save"/> method. Use this method to save selected frames from a multiple-frame image to another multiple-frame image.</para>
      </summary>
      <param name="encoderParams">
        An <see cref="T:System.Drawing.Imaging.EncoderParameters"/> object that holds parameters required by the image encoder that is used by the save-add operation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Image.SelectActiveFrame(System.Drawing.Imaging.FrameDimension,System.Int32)">
      <summary>
        <para>Selects the frame specified by the dimension and index.</para>
      </summary>
      <param name="dimension">
        A <see cref="T:System.Drawing.Imaging.FrameDimension"/> object that specifies the identity of the dimension type.
      </param>
      <param name="frameIndex">
        The index of the active frame.
      </param>
      <returns>
        <para>The index of the active frame.</para>
      </returns>
      <remarks>
        <para>The possible values of the <paramref name="dimensionID"/> parameter are properties of the <see cref="T:System.Drawing.Imaging.FrameDimension"/>  object. Thesecan be used to identify an image by its time, resolution, or page number.</para>
        <para>Calling this method causes all changes made to the previous frame to be discarded. Before selecting another frame, save all changes made to the current frame, including changes to pixel values and properties.</para>
      </remarks>
    </member>
	
    <member name="M:System.Drawing.Image.SetPropertyItem(System.Drawing.Imaging.PropertyItem)">
      <summary>
        <para>Stores a property item (piece of metadata) in this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <param name="propitem">
        The <see cref="T:System.Drawing.Imaging.PropertyItem"/> to be stored.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>If the image format does not support property items, this method throws System.ArgumentException with the message "Property not supported." If the image format supports property items but does not support the particular property you are attempting to set, this method ignores the attempt but does not throw an exception.</para>
        <para>It is difficult to set property items because the <see cref="T:System.Drawing.Imaging.PropertyItem"/> class has no public constructors. One way to work around this restriction is to obtain a <see cref="T:System.Drawing.Imaging.PropertyItem"/> object by retrieving the <see cref="P:System.Drawing.Image.PropertyItems"/> property or calling the <see cref="M:System.Drawing.Image.GetPropertyItem(System.Int32)"/> method of an <see cref="T:System.Drawing.Image"/> object that already has property items. Then you can set the fields of the <see cref="T:System.Drawing.Imaging.PropertyItem"/> object and pass it to <see langword="SetPropertyItem"/>.</para>
	  </remarks>
    </member>

    <member name="P:System.Drawing.Image.Flags">
      <summary>
        <para>Gets attribute flags for this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <value>
        <para>The attribute flags for this <see cref="T:System.Drawing.Image"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Image.FrameDimensionsList">
      <summary>
        <para>Gets an array of GUIDs that represent the dimensions of frames within this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <value>
        <para>An array of GUIDs that specify the dimensions of frames within this <see cref="T:System.Drawing.Image"/> object from most significant to least significant.</para>
      </value>
      <remarks>
        <para>This method returns information about multiple-frame images, which come in two styles: multiple page and multiple resolution. </para>
        <para>A multiple-page image is an image that contains more than one image. Each page contains a single image(or frame). These pages (or images, or frames) are typically displayed in succession to produce an animated sequence, such as an animated .gif file. </para>
        <para>A multiple-resolution image is an image that contains more than one copy of an image at different resolutions. This is commonly used by mip-mapping where the displayed image size determines the resolution of the image used for drawing. GDI+ can support an arbitrary number of pages (or images, or frames), as well as an arbitrary number of resolutions. The defined dimensions are properties of the <see cref="T:System.Drawing.Imaging.FrameDimension"/> object.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Image.Height">
      <summary>
        <para>Gets the height of this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <value>
        <para>The height of this <see cref="T:System.Drawing.Image"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Image.HorizontalResolution">
      <summary>
        <para>Gets the horizontal resolution, in pixels-per-inch, of this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <value>
        <para>The horizontal resolution, in pixels-per-inch, of this <see cref="T:System.Drawing.Image"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Image.Palette">
      <summary>
        <para>Gets or sets the color palette used for this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Imaging.ColorPalette"/> object that represents the color palette used for this <see cref="T:System.Drawing.Image"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Image.PhysicalDimension">
      <summary>
        <para>Gets the width and height of this image.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SizeF"/> structure that represents the width and height of this <see cref="T:System.Drawing.Image"/> object.</para>
      </value>
	  <remarks>
	    <para>If the image is a bitmap, the width and height are returned in pixels. If the image is a metafile, the width and height are returned in 0.01 millimeter units.</para>
	  </remarks>
    </member>

    <member name="P:System.Drawing.Image.PixelFormat">
      <summary>
        <para>Gets the pixel format for this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration that represents the pixel format for this <see cref="T:System.Drawing.Image"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Image.PropertyIdList">
      <summary>
        <para>Gets IDs of the property items stored in this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <value>
        <para>An array of the property IDs, one for each property item stored in this image.</para>
      </value>
	  <remarks>
	    <para>If the image has no property items or if the image format does not support property items, <see langword="PropertyIdList"/> returns an empty array; that is, an array of length zero.</para>
	  </remarks>
    </member>

    <member name="P:System.Drawing.Image.PropertyItems">
      <summary>
        <para>Gets all the property items (pieces of metadata) stored in this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <value>
        <para>An array of <see cref="T:System.Drawing.Imaging.PropertyItem"/> objects, one for each property item stored in the image.</para>
      </value>
	  <remarks>
	    <para>If the image has no property items or if the image format does not support property items, <see langword="PropertyItems"/> returns an empty array; that is, an array of length zero.</para>
	  </remarks>
    </member>

    <member name="P:System.Drawing.Image.RawFormat">
      <summary>
        <para>Gets the format of this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <value>
        <para>The <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that represents the format of this <see cref="T:System.Drawing.Image"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Image.Size">
      <summary>
        <para>Gets the width and height, in pixels, of this image.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Size"/> structure that represents the width and height of this image.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Image.VerticalResolution">
      <summary>
        <para>Gets the vertical resolution, in pixels-per-inch, of this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <value>
        <para>The vertical resolution, in pixels-per-inch, of this <see cref="T:System.Drawing.Image"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Image.Width">
      <summary>
        <para>Gets the width of this <see cref="T:System.Drawing.Image"/> object.</para>
      </summary>
      <value>
        <para>The width of this <see cref="T:System.Drawing.Image"/> object.</para>
      </value>
    </member>

    <member name="T:System.Drawing.ImageAnimator">
      <summary>
        <para>Animates an image that has time-based frames.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.ImageAnimator.Animate(System.Drawing.Image,System.EventHandler)">
      <summary>
        <para>Displays a multiple-frame image as an animation.</para>
      </summary>
      <param name="image">
        The <see cref="T:System.Drawing.Image"/> object to animate.
      </param>
      <param name="onFrameChangedHandler">
        An <see langword="EventHandler"/> object that specifies the method that is called when the animation frame changes.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>This Windows Forms application demonstrates how to draw an animated image to the screen. The image is created from the animated GIF file SampleAnimation.gif located in the same folder as the application.</para>
        <code lang="VB">Imports System
Imports System.Drawing
Imports System.Windows.Forms
Public Class animateImage
Inherits Form
&apos;Create a Bitmpap Object.
Private animatedImage As New Bitmap(&quot;SampleAnimation.gif&quot;)
Private currentlyAnimating As Boolean = False
&apos;This method begins the animation.
Public Sub AnimateImage()
If Not currentlyAnimating Then
&apos;Begin the animation only once.
ImageAnimator.Animate(animatedImage, _
New EventHandler(AddressOf Me.OnFrameChanged))
currentlyAnimating = True
End If
End Sub
Private Sub OnFrameChanged(o As Object, e As EventArgs)
&apos;Force a call to the Paint event handler.
Me.Invalidate()
End Sub
Protected Overrides Sub OnPaint(e As PaintEventArgs)
&apos;Begin the animation.
AnimateImage()
&apos;Get the next frame ready for rendering.
ImageAnimator.UpdateFrames()
&apos;Draw the next frame in the animation.
e.Graphics.DrawImage(Me.animatedImage, New Point(0, 0))
End Sub
Public Shared Sub Main()
Application.Run(New animateImage())
End Sub
End Class
        </code>
        <code lang="C#">using System;
using System.Drawing;
using System.Windows.Forms;
public class animateImage : Form {
//Create a Bitmpap Object.
Bitmap animatedImage = new Bitmap(&quot;SampleAnimation.gif&quot;);
bool currentlyAnimating = false;
//This method begins the animation.
public void AnimateImage() {
if (!currentlyAnimating) {
//Begin the animation only once.
ImageAnimator.Animate(animatedImage, new EventHandler(this.OnFrameChanged));
currentlyAnimating = true;
}
}
private void OnFrameChanged(object o, EventArgs e) {
//Force a call to the Paint event handler.
this.Invalidate();
}
protected override void OnPaint(PaintEventArgs e) {
//Begin the animation.
AnimateImage();
//Get the next frame ready for rendering.
ImageAnimator.UpdateFrames();
//Draw the next frame in the animation.
e.Graphics.DrawImage(this.animatedImage, new Point(0, 0));
}
public static void Main() {
Application.Run(new animateImage());
}
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.ImageAnimator.CanAnimate(System.Drawing.Image)">
      <summary>
        <para>Returns a Boolean value indicating whether the specified image contains time-based frames.</para>
      </summary>
      <param name="image">
        The <see cref="T:System.Drawing.Image"/> object to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the specified image contains time-based frames; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ImageAnimator.StopAnimate(System.Drawing.Image,System.EventHandler)">
      <summary>
        <para>Terminates a running animation.</para>
      </summary>
      <param name="image">
        The <see cref="T:System.Drawing.Image"/> object to stop animating.
      </param>
      <param name="onFrameChangedHandler">
        An <see langword="EventHandler"/> object that specifies the method that is called when the animation frame changes.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ImageAnimator.UpdateFrames">
      <summary>
        <para>Advances the frame in all images currently being animated. The new frame is drawn the next time the image is rendered.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ImageAnimator.UpdateFrames(System.Drawing.Image)">
      <summary>
        <para>Advances the frame in the specified image. The new frame is drawn the next time the image is rendered. This method applies only to images with time-based frames.</para>
      </summary>
      <param name="image">
        The <see cref="T:System.Drawing.Image"/> object for which to update frames.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="T:System.Drawing.ImageConverter">
      <summary>
        <para>ImageConverter is a class that can be used to convert <see cref="T:System.Drawing.Image"/> objects from one data type to another. Access this class through the <see langword="TypeDescriptor"/> object.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.ImageConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.ImageConverter"/> class.</para>
      </summary>
    </member>
	
	<member name="M:System.Drawing.ImageConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Determines whether this <see cref="T:System.Drawing.ImageConverter"/> can convert an instance of a specified type to an <see cref="T:System.Drawing.Image"/>, using the specified context.</para>
      </summary>
      <param name="context">
        An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
      </param>
      <param name="sourceType">
        A <see cref="T:System.Type"/> that specifies the type you want to convert from.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this <see cref="T:System.Drawing.ImageConverter"/> can perform the conversion; otherwise, <see langword="false"/>.</para>
      </returns>
	  <remarks>
	    <para>This method returns <see langword="true"/> only if <paramref name="sourceType"/> is equal to typeof(System.Byte[]).</para>
	  </remarks>
    </member>
	
	<member name="M:System.Drawing.ImageConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Determines whether this <see cref="T:System.Drawing.ImageConverter"/> can convert an <see cref="T:System.Drawing.Image"/> to an instance of a specified type, using the specified context.</para>
      </summary>
      <param name="context">
        An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
      </param>
      <param name="destinationType">
        A <see cref="T:System.Type"/> that specifies the type you want to convert to.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this <see cref="T:System.Drawing.ImageConverter"/> can perform the conversion; otherwise, <see langword="false"/>.</para>
      </returns>
	  <remarks>
	    <para>This method returns <see langword="true"/> only if <paramref name="sourceType"/> is equal to typeof(System.Byte[]) or typeof(System.String).</para>
	  </remarks>
    </member>
	
	<member name="M:System.Drawing.ImageConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para>Converts a specified object to an <see cref="T:System.Drawing.Image"/>.</para>
      </summary>
      <param name="context">
        An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
      </param>
      <param name="culture">
        A <see cref="T:System.Globalization.CultureInfo"/> that holds information about a specific culture. 
      </param>
	  <param name="value">
        The <see cref="T:System.Object"/> to be converted.
      </param>
      <returns>
        <para>If this method succeeds, it returns the <see cref="T:System.Drawing.Image"/> that it created by converting the specified object. Otherwise, it throws an exception.</para>
      </returns>
    </member>
	
    <member name="M:System.Drawing.ImageConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts an Image (or an object that can be cast to an Image) to the specified type.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get more information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="culture">
        A <see langword="CultureInfo"/> object that specifies formatting conventions used by a particular culture.
      </param>
      <param name="value">
        The <see cref="T:System.Drawing.Image"/> to convert.
      </param>
      <param name="destinationType">
        The <see cref="T:System.Type"/> to convert the <see cref="T:System.Drawing.Image"/> to.
      </param>
      <returns>
        <para>This method returns the converted object.</para>
      </returns>
      <remarks>
        <para>The most common type conversion is to and from a string type. The default implementation calls the <see langword="ToString"/> method of the object if the object is valid and if the destination type is string. If this method cannot convert the specified object to the destination type, it throws a <see cref="T:System.NotSupportedException"/> exception.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.ImageConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
        <para>Gets the set of properties for this type.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <param name="value">
        The value of the object to get the properties for.
      </param>
      <param name="attributes">
        The value of the object to get the properties for.
      </param>
      <returns>
        <para>The set of properties that should be exposed for this data type. If no properties should be exposed, this can return <see langword="null"/>. The default implementation always returns <see langword="null"/>.</para>
      </returns>
      <remarks>
        <para>By default, a type does not return any properties. An easy implementation of this method calls the <see langword="TypeDescriptor.GetProperties"/> method for the correct data type.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.ImageConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Indicates whether this object supports properties. By default, this is <see langword="False"/>.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the <see langword="GetProperties"/> method should be called to find the properties of this object.</para>
      </returns>
    </member>

    <member name="T:System.Drawing.ImageFormatConverter">
      <summary>
        <para><see cref="T:System.Drawing.ImageFormatConverter"/> is a class that can be used to convert colors from one data type to another. Access this class through the <see langword="TypeDescriptor"/> object.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.ImageFormatConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.ImageFormatConverter"/> class.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.ImageFormatConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Indicates whether this converter can convert an object in the specified source type to the native type of the converter.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get more information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="sourceType">
        The type you want to convert from.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this object can perform the conversion.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ImageFormatConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Gets a value indicating whether this converter can convert an object to the specified destination type using the context.</para>
      </summary>
      <param name="context">
        An <see langword="ITypeDescriptorContext"/> that specifies the context for this type conversion.
      </param>
      <param name="destinationType">
        The <see cref="T:System.Type"/> that represents the type to which you want to convert this <see cref="T:System.Drawing.Imaging.ImageFormat"/> object.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this object can perform the conversion.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ImageFormatConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para>Converts the specified object to an <see cref="T:System.Drawing.Imaging.ImageFormat"/> object.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get more information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="culture">
        A <see langword="CultureInfo"/> object that specifies formatting conventions for a particular culture.
      </param>
      <param name="value">
        The object to convert.
      </param>
      <returns>
        <para>The converted object. This will pass an exception if the conversion could not be performed.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ImageFormatConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the specified object to the specified type.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get more information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="culture">
        A <see langword="CultureInfo"/> object that specifies formatting conventions for a particular culture.
      </param>
      <param name="value">
        The object to convert.
      </param>
      <param name="destinationType">
        The type to convert the object to.
      </param>
      <returns>
        <para>The converted object.</para>
      </returns>
      <remarks>
        <para>The most common type conversion is to and from a string type. The default implementation calls the <see langword="ToString"/> method of the object if the object is valid and if the destination type is <see langword="string"/>. If this method cannot convert the specified object to the specified destination type, it throws a <see cref="T:System.NotSupportedException"/> exception.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.ImageFormatConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Gets a collection that contains a set of standard values for the data type this validator is designed for. Returns <see langword="null"/> if the data type does not support a standard set of values.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get more information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <returns>
        <para>A collection that contains a standard set of valid values, or <see langword="null"/>. The default implementation always returns <see langword="null"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ImageFormatConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Indicates whether this object supports a standard set of values that can be picked from a list.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the <see langword="GetStandardValues"/> method should be called to find a common set of values the object supports.</para>
      </returns>
    </member>

    <member name="T:System.Drawing.Pen">
      <summary>
        <para>Defines an object used to draw lines and curves. This class cannot be inherited.</para>
      </summary>
      <remarks>
        <para>A <see cref="T:System.Drawing.Pen"/> object draws a line of specified width and style. Use the <see cref="T:System.Drawing.Drawing2D.DashStyle"/> property to draw several varieties of dashed lines. The line drawn by a <see cref="T:System.Drawing.Pen"/> object can be filled in a variety of fill styles, including solid colors and textures. The fill style depends on brush or texture that is used as the fill object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Pen.#ctor(System.Drawing.Color)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Pen"/> class with the specified color.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Pen"/> class with the specified color.</para>
      </summary>
      <param name="color">
        A <see cref="T:System.Drawing.Color"/> structure that indicates the color of this <see cref="T:System.Drawing.Pen"/> object.
      </param>
      <remarks>
        <para>The <see cref="T:System.Drawing.Color"/> property is set to the color specified by the <paramref name="color"/> parameter. The <see langword="Width"/> property is set to 1 (the default).</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Pen.#ctor(System.Drawing.Color,System.Single)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Pen"/> class with the specified <see cref="T:System.Drawing.Color"/> and <see langword="Width"/> properties.</para>
      </summary>
      <param name="color">
        A <see cref="T:System.Drawing.Color"/> structure that indicates the color of this <see cref="T:System.Drawing.Pen"/> object.
      </param>
      <param name="width">
        A value indicating the width of this <see cref="T:System.Drawing.Pen"/> object.
      </param>
      <remarks>
        <para>The <see cref="T:System.Drawing.Color"/> property is set to the color specified by the <paramref name="color"/> parameter. The <see langword="Width"/> property is set to the value specified in the <paramref name="width"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Pen.#ctor(System.Drawing.Brush)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Pen"/> class with the specified <see cref="T:System.Drawing.Brush"/> object.</para>
      </summary>
      <param name="brush">
        A <see cref="T:System.Drawing.Brush"/> object that determines the fill properties of this <see cref="T:System.Drawing.Pen"/> object.
      </param>
      <remarks>
        <para>The <see cref="P:System.Drawing.Pen.Brush"/> property determines how the <see cref="T:System.Drawing.Pen"/> object draws lines. Lines are drawn as if they are filled rectangles, with the characteristics of the specified <see cref="T:System.Drawing.Brush"/> object.</para>
        <para>The <see langword="Width"/> property of the new <see cref="T:System.Drawing.Pen"/> object is set to 1 (the default).</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Pen.#ctor(System.Drawing.Brush,System.Single)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Pen"/> class with the specified <see cref="T:System.Drawing.Brush"/> object and <see langword="Width"/>.</para>
      </summary>
      <param name="brush">
        A <see cref="T:System.Drawing.Brush"/> object that determines the characteristics of this <see cref="T:System.Drawing.Pen"/> object.
      </param>
      <param name="width">
        The width of the new <see cref="T:System.Drawing.Pen"/> object.
      </param>
      <remarks>
        <para>The <see cref="T:System.Drawing.Brush"/> object is set to the color specified in the <paramref name="brush "/>parameter, the <see langword="Width"/> property is set to the value specified in the <paramref name="width "/>parameter, and the units are set to <see langword="World"/>.</para>
        <para>Note that the <paramref name="brush"/> parameter also specifies the <see cref="T:System.Drawing.Color"/> property of this <see cref="T:System.Drawing.Pen"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Pen.Clone">
      <summary>
        <para>Creates an exact copy of this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Object"/> object that can be cast to a <see cref="T:System.Drawing.Pen"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Pen"/> object.</term>
          </item>
          <item>
            <term>Creates a copy of that pen.</term>
          </item>
          <item>
            <term>Draws a line to the screen, using the copy of the pen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub Clone_Example(e As PaintEventArgs)
&apos; Create a Pen object.
Dim myPen As New Pen(Color.Black, 5)
&apos; Clone myPen.
Dim clonePen As Pen = CType(myPen.Clone(), Pen)
&apos; Draw a line with clonePen.
e.Graphics.DrawLine(clonePen, 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void Clone_Example(PaintEventArgs e)
{
// Create a Pen object.
Pen myPen = new Pen(Color.Black, 5);
// Clone myPen.
Pen clonePen = (Pen)myPen.Clone();
// Draw a line with clonePen.
e.Graphics.DrawLine(clonePen, 0, 0, 100, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Pen.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Brush"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix)">
      <overload>
        Multiplies the transformation matrix for this <see cref="T:System.Drawing.Pen"/> object by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
      </overload>
      <summary>
        <para>Multiplies the transformation matrix for this <see cref="T:System.Drawing.Pen"/> object by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </summary>
      <param name="matrix">
        The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by which to multiply the transformation matrix.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Pen"/> object.</term>
          </item>
          <item>
            <term>Draws a line to the screen.</term>
          </item>
          <item>
            <term>Multiplies the transformation matrix of the pen by the specified matrix.</term>
          </item>
          <item>
            <term>Draws a line with the transformed pen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub MultiplyTransform_Example(e As PaintEventArgs)
&apos; Create a Pen object.
Dim myPen As New Pen(Color.Black, 5)
&apos; Create a translation matrix.
Dim penMatrix As New Matrix()
penMatrix.Scale(3, 1)
&apos; Multiply the transformation matrix of myPen by transMatrix.
myPen.MultiplyTransform(penMatrix)
&apos; Draw a line to the screen.
e.Graphics.DrawLine(myPen, 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void MultiplyTransform_Example(PaintEventArgs e)
{
// Create a Pen object.
Pen myPen = new Pen(Color.Black, 5);
// Create a translation matrix.
Matrix penMatrix = new Matrix();
penMatrix.Scale(3, 1);
// Multiply the transformation matrix of myPen by transMatrix.
myPen.MultiplyTransform(penMatrix);
// Draw a line to the screen.
e.Graphics.DrawLine(myPen, 0, 0, 100, 100);
}
        </code>
      </example>
      <remarks>
        <para>This method prepends multiplication matrix specified in the <paramref name="matrix "/>parameter to the transformation matrix for the multiplication operation.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Multiplies the transformation matrix for this <see cref="T:System.Drawing.Pen"/> object by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> object in the specified order.</para>
      </summary>
      <param name="matrix">
        The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by which to multiply the transformation matrix.
      </param>
      <param name="order">
        The order in which to perform the multiplication operation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Pen"/> object.</term>
          </item>
          <item>
            <term>Draws a line to the screen.</term>
          </item>
          <item>
            <term>Multiplies the transformation matrix of the pen by the specified matrix.</term>
          </item>
          <item>
            <term>Draws a line with the transformed pen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub MultiplyTransform_Example(e As PaintEventArgs)
&apos; Create a Pen object.
Dim myPen As New Pen(Color.Black, 5)
&apos; Create a translation matrix.
Dim penMatrix As New Matrix()
penMatrix.Scale(3, 1)
&apos; Multiply the transformation matrix of myPen by transMatrix.
myPen.MultiplyTransform(penMatrix, MatrixOrder.Prepend)
&apos; Draw a line to the screen.
e.Graphics.DrawLine(myPen, 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void MultiplyTransform_Example(PaintEventArgs e)
{
// Create a Pen object.
Pen myPen = new Pen(Color.Black, 5);
// Create a translation matrix.
Matrix penMatrix = new Matrix();
penMatrix.Scale(3, 1);
// Multiply the transformation matrix of myPen by transMatrix.
myPen.MultiplyTransform(penMatrix, MatrixOrder.Prepend);
// Draw a line to the screen.
e.Graphics.DrawLine(myPen, 0, 0, 100, 100);
};
        </code>
      </example>
      <remarks>
        <para>This method uses the <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration element (either prepend or append) specified by the <paramref name="order "/>parameter to carry out the multiplication operation.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Pen.ResetTransform">
      <summary>
        <para>Resets the geometric transformation matrix for this <see cref="T:System.Drawing.Pen"/> object to identity.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Pen"/> object.</term>
          </item>
          <item>
            <term>Sets the transformation matrix of the pen to scale 2 times in the x-direction.</term>
          </item>
          <item>
            <term>Draws a line to the screen.</term>
          </item>
          <item>
            <term>Resets the transformation matrix to identity.</term>
          </item>
          <item>
            <term>Draws a second line to the screen.</term>
          </item>
        </list>
        <code lang="VB">Public Sub ResetTransform_Example(e As PaintEventArgs)
&apos; Create a Pen object.
Dim myPen As New Pen(Color.Black, 3)
&apos; Scale the transformation matrix of myPen.
myPen.ScaleTransform(2, 1)
&apos; Draw a line with myPen.
e.Graphics.DrawLine(myPen, 10, 0, 10, 200)
&apos; Reset the transformation matrix of myPen to identity.
myPen.ResetTransform()
&apos; Draw a second line with myPen.
e.Graphics.DrawLine(myPen, 100, 0, 100, 200)
End Sub
        </code>
        <code lang="C#">public void ResetTransform_Example(PaintEventArgs e)
{
// Create a Pen object.
Pen myPen = new Pen(Color.Black, 3);
// Scale the transformation matrix of myPen.
myPen.ScaleTransform(2, 1);
// Draw a line with myPen.
e.Graphics.DrawLine(myPen, 10, 0, 10, 200);
// Reset the transformation matrix of myPen to identity.
myPen.ResetTransform();
// Draw a second line with myPen.
e.Graphics.DrawLine(myPen, 100, 0, 100, 200);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Pen.RotateTransform(System.Single)">
      <overload>
        Rotates the local geometric transformation by the specified angle. This method prepends the rotation to the transformation.
      </overload>
      <summary>
        <para>Rotates the local geometric transformation by the specified angle. This method prepends the rotation to the transformation.</para>
      </summary>
      <param name="angle">
        The angle of rotation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Pen"/> object.</term>
          </item>
          <item>
            <term>Draws a rectangle using the pen.</term>
          </item>
          <item>
            <term>Scales the pen by 2 times in the x-direction.</term>
          </item>
          <item>
            <term>Rotates the pen 90 degrees clockwise.</term>
          </item>
          <item>
            <term>Draws a second rectangle to demonstrate the difference.</term>
          </item>
        </list>
        <code lang="VB">Public Sub RotateTransform_Example(e As PaintEventArgs)
&apos; Create a Pen object.
Dim rotatePen As New Pen(Color.Black, 5)
&apos; Draw a rectangle with rotatePen.
e.Graphics.DrawRectangle(rotatePen, 10, 10, 100, 100)
&apos; Scale rotatePen by 2X in the x-direction.
rotatePen.ScaleTransform(2, 1)
&apos; Rotate rotatePen 90 degrees clockwise.
rotatePen.RotateTransform(90)
&apos; Draw a second rectangle with rotatePen.
e.Graphics.DrawRectangle(rotatePen, 140, 10, 100, 100)
End Sub
        </code>
        <code lang="C#">public void RotateTransform_Example(PaintEventArgs e)
{
// Create a Pen object.
Pen rotatePen = new Pen(Color.Black, 5);
// Draw a rectangle with rotatePen.
e.Graphics.DrawRectangle(rotatePen, 10, 10, 100, 100);
// Scale rotatePen by 2X in the x-direction.
rotatePen.ScaleTransform(2, 1);
// Rotate rotatePen 90 degrees clockwise.
rotatePen.RotateTransform(90);
// Draw a second rectangle with rotatePen.
e.Graphics.DrawRectangle(rotatePen, 140, 10, 100, 100);
}
        </code>
      </example>
      <remarks>
        <para>Because the shape of a pen is circular, a rotation does not have any visible effect unless the pen is scaled in the x- or y-direction.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Pen.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Rotates the local geometric transformation by the specified angle in the specified order.</para>
      </summary>
      <param name="angle">
        The angle of rotation.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> that specifies whether to append or prepend the rotation matrix.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>creates a <see cref="T:System.Drawing.Pen"/> object.</term>
          </item>
          <item>
            <term>Scales the pen by 2 times in the x-direction.</term>
          </item>
          <item>
            <term>Draws a rectangle using the pen.</term>
          </item>
          <item>
            <term>Rotates the pen 90 degrees clockwise.</term>
          </item>
          <item>
            <term>Draws a second rectangle to demonstrate the difference.</term>
          </item>
        </list>
        <code lang="VB">Public Sub RotateTransform_Example(e As PaintEventArgs)
&apos; Create a Pen object.
Dim rotatePen As New Pen(Color.Black, 5)
&apos; Scale rotatePen by 2X in the x-direction.
rotatePen.ScaleTransform(2, 1)
&apos; Draw a rectangle with rotatePen.
e.Graphics.DrawRectangle(rotatePen, 10, 10, 100, 100)
&apos; Rotate rotatePen 90 degrees clockwise.
rotatePen.RotateTransform(90, MatrixOrder.Append)
&apos; Draw a second rectangle with rotatePen.
e.Graphics.DrawRectangle(rotatePen, 120, 10, 100, 100)
End Sub
        </code>
        <code lang="C#">public void RotateTransform_Example(PaintEventArgs e)
{
// Create a Pen object.
Pen rotatePen = new Pen(Color.Black, 5);
// Scale rotatePen by 2X in the x-direction.
rotatePen.ScaleTransform(2, 1);
// Draw a rectangle with rotatePen.
e.Graphics.DrawRectangle(rotatePen, 10, 10, 100, 100);
// Rotate rotatePen 90 degrees clockwise.
rotatePen.RotateTransform(90, MatrixOrder.Append);
// Draw a second rectangle with rotatePen.
e.Graphics.DrawRectangle(rotatePen, 120, 10, 100, 100);
}
        </code>
      </example>
      <remarks>
        <para>Because the shape of a pen is circular, a rotation does not have any visible effect unless the pen is scaled in the x- or y-direction.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Pen.ScaleTransform(System.Single,System.Single)">
      <overload>
        Scales the local geometric transformation by the specified factors. This method prepends the scaling matrix to the transformation.
      </overload>
      <summary>
        <para>Scales the local geometric transformation by the specified factors. This method prepends the scaling matrix to the transformation.</para>
      </summary>
      <param name="sx">
        The factor by which to scale the transformation in the x-axis direction.
      </param>
      <param name="sy">
        The factor by which to scale the transformation in the y-axis direction.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <para>Creates a <see cref="T:System.Drawing.Pen"/> object.</para>
        <para>Draws a rectangle using the pen.</para>
        <para>Scales the pen by 2 times in the x-direction.</para>
        <para>Draws a second rectangle to demonstrate the difference.</para>
        <code lang="VB">Public Sub ScaleTransform_Example(e As PaintEventArgs)
&apos; Create a Pen object.
Dim scalePen As New Pen(Color.Black, 5)
&apos; Draw a rectangle with scalePen.
e.Graphics.DrawRectangle(scalePen, 10, 10, 100, 100)
&apos; Scale scalePen by 2X in the x-direction.
scalePen.ScaleTransform(2, 1)
&apos; Draw a second rectangle with rotatePen.
e.Graphics.DrawRectangle(scalePen, 120, 10, 100, 100)
End Sub
        </code>
        <code lang="C#">public void ScaleTransform_Example(PaintEventArgs e)
{
// Create a Pen object.
Pen scalePen = new Pen(Color.Black, 5);
// Draw a rectangle with scalePen.
e.Graphics.DrawRectangle(scalePen, 10, 10, 100, 100);
// Scale scalePen by 2X in the x-direction.
scalePen.ScaleTransform(2, 1);
// Draw a second rectangle with rotatePen.
e.Graphics.DrawRectangle(scalePen, 120, 10, 100, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Pen.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Scales the local geometric transformation by the specified factors in the specified order.</para>
      </summary>
      <param name="sx">
        The factor by which to scale the transformation in the x-axis direction.
      </param>
      <param name="sy">
        The factor by which to scale the transformation in the y-axis direction.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies whether to append or prepend the scaling matrix.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.Pen"/> object.</term>
          </item>
          <item>
            <term>Draws a rectangle using the pen.</term>
          </item>
          <item>
            <term>Scales the pen by 2 times in the x-direction.</term>
          </item>
          <item>
            <term>Draws a second rectangle to demonstrate the difference.</term>
          </item>
        </list>
        <code lang="VB">Public Sub ScaleTransform_Example(e As PaintEventArgs)
&apos; Create a Pen object.
Dim scalePen As New Pen(Color.Black, 5)
&apos; Draw a rectangle with scalePen.
e.Graphics.DrawRectangle(scalePen, 10, 10, 100, 100)
&apos; Scale scalePen by 2X in the x-direction.
scalePen.ScaleTransform(2, 1, MatrixOrder.Prepend)
&apos; Draw a second rectangle with rotatePen.
e.Graphics.DrawRectangle(scalePen, 120, 10, 100, 100)
End Sub
        </code>
        <code lang="C#">public void ScaleTransform_Example(PaintEventArgs e)
{
// Create a Pen object.
Pen scalePen = new Pen(Color.Black, 5);
// Draw a rectangle with scalePen.
e.Graphics.DrawRectangle(scalePen, 10, 10, 100, 100);
// Scale scalePen by 2X in the x-direction.
scalePen.ScaleTransform(2, 1, MatrixOrder.Prepend);
// Draw a second rectangle with rotatePen.
e.Graphics.DrawRectangle(scalePen, 120, 10, 100, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Pen.SetLineCap(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.DashCap)">
      <summary>
        <para>Sets the values that determine the style of cap used to end lines drawn by this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <param name="startCap">
        A <see cref="T:System.Drawing.Drawing2D.LineCap"/> enumeration that represents the cap style to use at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen"/> object.
      </param>
      <param name="endCap">
        A <see cref="T:System.Drawing.Drawing2D.LineCap"/> enumeration that represents the cap style to use at the end of lines drawn with this <see cref="T:System.Drawing.Pen"/> object.
      </param>
      <param name="dashCap">
        A <see cref="T:System.Drawing.Drawing2D.LineCap"/> enumeration that represents the cap style to use at the beginning or end of dashed lines drawn with this <see cref="T:System.Drawing.Pen"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code creates a <see cref="T:System.Drawing.Pen"/> and sets it to draw arrow anchor caps at the beginning of lines:</para>
        <code lang="VB">Public Sub SetLineCap_Example(e As PaintEventArgs)
&apos; Create a Pen object with a dash pattern.
Dim capPen As New Pen(Color.Black, 5)
capPen.DashStyle = DashStyle.Dash
&apos; Set the start and end caps for capPen.
capPen.SetLineCap(LineCap.ArrowAnchor, LineCap.Flat, DashCap.Flat)
&apos; Draw a line with capPen.
e.Graphics.DrawLine(capPen, 10, 10, 200, 10)
End Sub
        </code>
        <code lang="C#">public void SetLineCap_Example(PaintEventArgs e)
{
// Create a Pen object with a dash pattern.
Pen capPen = new Pen(Color.Black, 5);
capPen.DashStyle = DashStyle.Dash;
// Set the start and end caps for capPen.
capPen.SetLineCap(LineCap.Flat, LineCap.Flat, DashCap.Flat);
// Draw a line with capPen.
e.Graphics.DrawLine(capPen, 10, 10, 200, 10);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Pen.TranslateTransform(System.Single,System.Single)">
      <overload>
        Translates the local geometric transformation by the specified dimensions. This method prepends the translation to the transformation.
      </overload>
      <summary>
        <para>Translates the local geometric transformation by the specified dimensions. This method prepends the translation to the transformation.</para>
      </summary>
      <param name="dx">
        The value of the translation in x.
      </param>
      <param name="dy">
        The value of the translation in y.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Pen.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Translates the local geometric transformation by the specified dimensions in the specified order.</para>
      </summary>
      <param name="dx">
        The value of the translation in x.
      </param>
      <param name="dy">
        The value of the translation in y.
      </param>
      <param name="order">
        The order (prepend or append) in which to apply the translation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="P:System.Drawing.Pen.Alignment">
      <summary>
        <para>Gets or sets the alignment for this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.PenAlignment"/> enumeration that represents the alignment for this <see cref="T:System.Drawing.Pen"/> object.</para>
      </value>
      <remarks>
        <para>This property determines how the <see cref="T:System.Drawing.Pen"/> object draws closed curves and polygons. The <see cref="T:System.Drawing.Drawing2D.PenAlignment"/> enumeration specifies two values, <see langword="Center"/> and <see langword="Inset"/>. <see langword="Center"/> is the default value for this property and specifies that the width of the pen is centered on the outline of the curve or polygon. A value of <see langword="Inset"/> for this property specifies that the width of the pen is inside the outline of the curve or polygon.</para>
        <para>A <see cref="T:System.Drawing.Pen"/> object with its alignment set to <see langword="PenAlignment.Inset"/> cannot be used to draw compound lines and cannot draw dashed lines with <see langword="DashCap.Triangle"/> dash caps.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Pen.Brush">
      <summary>
        <para>Gets or sets the <see cref="T:System.Drawing.Brush"/> object that determines attributes of this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Brush"/> object that determines attributes of this <see cref="T:System.Drawing.Pen"/>.</para>
      </value>
      <remarks>
        <para>Assigning this property causes the pen to draw filled lines and curves. It overrides the <see cref="T:System.Drawing.Color"/> property of the <see cref="T:System.Drawing.Pen"/> object<see langword="."/></para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Pen.Color">
      <summary>
        <para>Gets or sets the color of this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that represents the color of this <see cref="T:System.Drawing.Pen"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pen.CompoundArray">
      <summary>
        <para>Gets or sets an array values that specify a compound pen. A compound pen draws a compound line made up of parallel lines and spaces.</para>
      </summary>
      <value>
        <para>An array of real numbers that specifies the compound array. The elements in the array must be in increasing order, not less than 0, and not greater than 1.</para>
      </value>
      <remarks>
        <para>A compound line is made up of alternating parallel lines and spaces of varying widths. The values in the array specify the starting points of each component of the compound line relative to the pen&apos;s width. The first value in the array specifies where the first component (a line) begins as a fraction of the distance across the width of the pen. The second value in the array specifies the beginning of the next component (a space) as a fraction of the distance across the width of the pen. The final value in the array specifies where the last component ends.</para>
        <para>Suppose you want a pen to draw two parallel lines where the width of the first line is 20 percent of the pen&apos;s width, the width of the space that separates the two lines is 50 percent of the pen&apos; s width, and the width of the second line is 30 percent of the pen&apos;s width. Start by creating a <see cref="T:System.Drawing.Pen"/> object and an array of real numbers. Set the compound array by passing the array with the values 0.0, 0.2, 0.7, and 1.0 to this property.</para>
        <para>Do not set this property if the <see cref="T:System.Drawing.Pen"/> object has its <see langword="Pen.Alignment"/> property set to <see langword="PenAlignment.Inset"/>.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Pen.CustomEndCap">
      <summary>
        <para>Gets or sets a custom cap to use at the end of lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> object that represents the cap used at the end of lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pen.CustomStartCap">
      <summary>
        <para>Gets or sets a custom cap to use at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> object that represents the cap used at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pen.DashCap">
      <summary>
        <para>Gets or sets the cap style used at the end of the dashes that make up dashed lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>A <see langword="DashCap"/> enumeration that represents the cap style used at the beginning and end of the dashes that make up dashed lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
        <list type="termdef">
          <item>
            <term>Do not set this property to DashCap.Triangle if the Pen object has its Pen.Alignment property set to PenAlignment.Inset.</term>
          </item>
        </list>
      </value>
    </member>

    <member name="P:System.Drawing.Pen.DashOffset">
      <summary>
        <para>Gets or sets the distance from the start of a line to the beginning of a dash pattern.</para>
      </summary>
      <value>
        <para>The distance from the start of a line to the beginning of a dash pattern.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pen.DashPattern">
      <summary>
        <para>Gets or sets an array of custom dashes and spaces.</para>
      </summary>
      <value>
        <para>An array of real numbers that specify the lengths of alternating dashes and spaces in dashed lines.</para>
      </value>
      <remarks>
        <para>Assigning a value other than <see langword="null"/> to this property will set the <see cref="T:System.Drawing.Drawing2D.DashStyle"/> property for this <see cref="T:System.Drawing.Pen"/> object to <see langword="DashStyle.Custom"/>. </para>
        <para>The elements in the <paramref name="dashArray"/> array set the length of each dash and space in the dash pattern. The first element sets the length of a dash, the second element sets the length of a space, the third element sets the length of a dash, and so on.</para>
        <para>The length of each dash and space in the dash pattern is the product of the element value in the array and the width of the <see cref="T:System.Drawing.Pen"/> object.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Pen.DashStyle">
      <summary>
        <para>Gets or sets the style used for dashed lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.DashStyle"/> enumeration that represents the style used for dashed lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </value>
      <remarks>
        <para>A value of <see langword="DashStyle.Custom"/> for this property specifies that a custom pattern of dashes and spaces, defined by the <see langword="DashPattern"/> property, make up lines drawn with this <see cref="T:System.Drawing.Pen"/> object. If the value of this property is <see langword="DashStyle.Custom"/> and the value of the <see langword="DashPattern"/> property is <see langword="null"/>, the pen draws solid lines.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Pen.EndCap">
      <summary>
        <para>Gets or sets the cap style used at the end of lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.LineCap"/> enumeration that represents the cap style used at the end of lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pen.LineJoin">
      <summary>
        <para>Gets or sets the join style for the ends of two consecutive lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.LineJoin"/> enumeration that represents the join style for the ends of two consecutive lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pen.MiterLimit">
      <summary>
        <para>Gets or sets the limit of the thickness of the join on a mitered corner.</para>
      </summary>
      <value>
        <para>The limit of the thickness of the join on a mitered corner.</para>
      </value>
      <remarks>
        <para>The miter length is the distance from the intersection of the line walls on the inside of the join to the intersection of the line walls outside of the join. The miter length can be large when the angle between two lines is small. The miter limit is the maximum allowed ratio of miter length to stroke width. The default value is 10.0f.</para>
        <para>If the miter length of the join of the intersection exceeds the limit of the join, then the join will be beveled to keep it within the limit of the join of the intersection.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Pen.PenType">
      <summary>
        <para>Gets the style of lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.PenType"/> enumeration that specifies the style of lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </value>
      <remarks>
        <para>A <see cref="T:System.Drawing.Pen"/> object can draw solid lines, filled lines, or textured lines, depending on the style specified by a member of the <see cref="T:System.Drawing.Drawing2D.PenType"/> enumeration.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Pen.StartCap">
      <summary>
        <para>Gets or sets the cap style used at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.LineCap"/> enumeration that represents the cap style used at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pen.Transform">
      <summary>
        <para>Gets or sets the geometric transformation for this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that represents the geometric transformation for this <see cref="T:System.Drawing.Pen"/> object.</para>
      </value>
      <remarks>
        <para>This property defines an elliptical shape for the pen tip. This ellipse is obtained from the default circular shape by applying the transformation matrix. Note that the translation portion of the matrix is ignored. </para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Pen.Width">
      <summary>
        <para>Gets or sets the width of this <see cref="T:System.Drawing.Pen"/> object.</para>
      </summary>
      <value>
        <para>The width of this <see cref="T:System.Drawing.Pen"/> object.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Pens">
      <summary>
        <para>Pens for all the standard colors. This class cannot be inherited.</para>
      </summary>
    </member>

    <member name="P:System.Drawing.Pens.AliceBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.AntiqueWhite">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Aqua">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Aquamarine">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Azure">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Beige">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Bisque">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Black">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.BlanchedAlmond">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Blue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.BlueViolet">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Brown">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.BurlyWood">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.CadetBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Chartreuse">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Chocolate">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Coral">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.CornflowerBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Cornsilk">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Crimson">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Cyan">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkCyan">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkGoldenrod">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkGray">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkKhaki">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkMagenta">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkOliveGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkOrange">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkOrchid">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkRed">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkSalmon">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkSeaGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkSlateBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkSlateGray">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkTurquoise">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DarkViolet">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DeepPink">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DeepSkyBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DimGray">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.DodgerBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Firebrick">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.FloralWhite">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.ForestGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Fuchsia">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Gainsboro">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.GhostWhite">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Gold">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Goldenrod">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Gray">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Green">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.GreenYellow">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Honeydew">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.HotPink">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.IndianRed">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Indigo">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Ivory">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Khaki">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Lavender">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LavenderBlush">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LawnGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LemonChiffon">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LightBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LightCoral">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LightCyan">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LightGoldenrodYellow">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LightGray">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LightGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LightPink">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LightSalmon">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LightSeaGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LightSkyBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LightSlateGray">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LightSteelBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LightYellow">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Lime">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.LimeGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Linen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Magenta">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Maroon">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.MediumAquamarine">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.MediumBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.MediumOrchid">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.MediumPurple">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.MediumSeaGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.MediumSlateBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.MediumSpringGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.MediumTurquoise">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.MediumVioletRed">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.MidnightBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.MintCream">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.MistyRose">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Moccasin">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.NavajoWhite">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Navy">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.OldLace">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Olive">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.OliveDrab">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Orange">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.OrangeRed">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Orchid">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.PaleGoldenrod">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.PaleGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.PaleTurquoise">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.PaleVioletRed">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.PapayaWhip">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.PeachPuff">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Peru">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Pink">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Plum">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.PowderBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Purple">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Red">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.RosyBrown">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.RoyalBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.SaddleBrown">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Salmon">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.SandyBrown">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.SeaGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.SeaShell">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Sienna">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Silver">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.SkyBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.SlateBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.SlateGray">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Snow">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.SpringGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.SteelBlue">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Tan">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Teal">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Thistle">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Tomato">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Transparent">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Turquoise">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Violet">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Wheat">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.White">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.WhiteSmoke">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.Yellow">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Pens.YellowGreen">
      <summary>
        <para>A system-defined <see cref="T:System.Drawing.Pen"/> object with a width of 1.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object set to a system-defined color.</para>
      </value>
    </member>

    <member name="T:System.Drawing.PointConverter">
      <summary>
        <para>Converts a <see cref="T:System.Drawing.Point"/> object from one data type to another. Access this class through the <see langword="TypeDescriptor"/> object.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.PointConverter"/> class.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Determines if this converter can convert an object in the given source type to the native type of the converter.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="sourceType">
        The type you want to convert from.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this object can perform the conversion; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</para>
      </summary>
      <param name="context">
        An <see langword="ITypeDescriptorContext"/> object that provides a format context.
      </param>
      <param name="destinationType">
        A <see cref="T:System.Type"/> object that represents the type you want to convert to.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.</para>
      </returns>
      <remarks>
        <para>The <paramref name="context"/> parameter can be used to get additional information about the environment this converter is being called from. This can be a null reference (<see langword="Nothing"/> in Visual Basic), so you should always check. Also, properties on the context object can also return a null reference (<see langword="Nothing"/>).</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para>Converts the specified object to a <see cref="T:System.Drawing.Point"/> object.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="culture">
        An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.
      </param>
      <param name="value">
        The object to convert.
      </param>
      <returns>
        <para>The converted object. This will throw an exception if the conversion could not be performed.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the specified object to the specified type. </para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="culture">
        An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.
      </param>
      <param name="value">
        The object to convert.
      </param>
      <param name="destinationType">
        The type to convert the object to.
      </param>
      <returns>
        <para>The converted object.</para>
      </returns>
      <remarks>
        <para>The most common types to convert are to and from a string object. The default implementation calls the object&apos;s <see langword="ToString"/> method if the object is valid and if the destination type is string. If this method cannot convert to the destination type, this will throw a <see cref="T:System.NotSupportedException"/> exception.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>
        <para>Creates an instance of this type given a set of property values for the object. This is useful for objects that are immutable but still want to provide changeable properties.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <param name="propertyValues">
        A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from GetProperties.
      </param>
      <returns>
        <para>The newly created object, or <see langword="null"/> if the object could not be created. The default implementation returns <see langword="null"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Determines if changing a value on this object should require a call to <see langword="CreateInstance"/> to create a new value.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the <see langword="CreateInstance"/> method should be called when a change is made to one or more properties of this object; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
        <para>Retrieves the set of properties for this type. By default, a type does not return any properties. A simple implementation of this method can just call <see langword="TypeDescriptor.GetProperties"/> for the correct data type.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <param name="value">
        The value of the object to get the properties for.
      </param>
      <param name="attributes">
        An array of <see langword="MemberAttribute"/> objects that describe the properties.
      </param>
      <returns>
        <para>The set of properties that are exposed for this data type. If no properties are exposed, this method might return <see langword="null"/>. The default implementation always returns <see langword="null"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Determines if this object supports properties. By default, this is <see langword="false"/>.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <see langword="GetProperties"/> should be called to find the properties of this object; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="T:System.Drawing.RectangleConverter">
      <summary>
        <para>Converts rectangles from one data type to another. Access this class through the TypeDescriptor.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.RectangleConverter"/> class.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Determines if this converter can convert an object in the given source type to the native type of the converter.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="sourceType">
        The type you want to convert from.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this object can perform the conversion; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</para>
      </summary>
      <param name="context">
        An <see langword="ITypeDescriptorContext"/> object that provides a format context.
      </param>
      <param name="destinationType">
        A <see cref="T:System.Type"/> object that represents the type you want to convert to.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.</para>
      </returns>
      <remarks>
        <para>The <paramref name="context"/> parameter can be used to get additional information about the environment this converter is being called from. This can be a null reference (<see langword="Nothing"/> in Visual Basic), so you should always check. Also, properties on the context object can also return a null reference (<see langword="Nothing"/>).</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para>Converts the given object to a <see cref="T:System.Drawing.Rectangle"/> object.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="culture">
        An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.
      </param>
      <param name="value">
        The object to convert.
      </param>
      <returns>
        <para>The converted object. This will throw an exception if the conversion could not be performed.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the specified object to the specified type.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="culture">
        An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.
      </param>
      <param name="value">
        The object to convert.
      </param>
      <param name="destinationType">
        The type to convert the object to.
      </param>
      <returns>
        <para>The converted object.</para>
      </returns>
      <remarks>
        <para>The most common types to convert are to and from a string object. The default implementation calls the object&apos;s <see langword="ToString"/> method if the object is valid and if the destination type is string. If this method cannot convert to the destination type, it throws a <see cref="T:System.NotSupportedException"/> exception.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>
        <para>Creates an instance of this type given a set of property values for the object. This is useful for objects that are immutable but still want to provide changeable properties.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <param name="propertyValues">
        A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from a call to the <see langword="GetProperties"/> method.
      </param>
      <returns>
        <para>The newly created object, or <see langword="null"/> if the object could not be created. The default implementation returns <see langword="null"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Determines if changing a value on this object should require a call to <see langword="CreateInstance"/> to create a new value.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <see langword="CreateInstance"/> should be called when a change is made to one or more properties of this object; otherwise, false.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
        <para>Retrieves the set of properties for this type. By default, a type does not return any properties. A simple implementation of this method can just call the <see langword="TypeDescriptor.GetProperties"/> method for the correct data type.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <param name="value">
        The value of the object to get the properties for.
      </param>
      <param name="attributes">
        An array of <see langword="MemberAttribute"/> objects that describe the properties.
      </param>
      <returns>
        <para>The set of properties that should be exposed for this data type. If no properties should be exposed, this may return <see langword="null"/>. The default implementation always returns <see langword="null"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Determines if this object supports properties. By default, this is <see langword="false"/>.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <see langword="GetProperties"/> should be called to find the properties of this object; otherwise, false.</para>
      </returns>
    </member>

    <member name="T:System.Drawing.Region">
      <summary>
        <para>Describes the interior of a graphics shape composed of rectangles and paths. This class cannot be inherited.</para>
      </summary>
      <remarks>
        <para>A region is scalable because its coordinates are specified in world coordinates. On a drawing surface, however, its interior is dependent on the size and shape of the pixels representing it. An application can use regions to clamp the output of drawing operations. The window manager uses regions to define the drawing area of windows. These regions are called clipping regions. An application can also use regions in hit-testing operations, such as checking whether a point or a rectangle intersects a region. An application can fill a region by using a <see cref="T:System.Drawing.Brush"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.#ctor">
      <overload>
        Initializes a new <see cref="T:System.Drawing.Region"/> object.
      </overload>
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <remarks>
        <para>This constructor initializes a new <see cref="T:System.Drawing.Region"/> object with infinite interior.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.#ctor(System.Drawing.RectangleF)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Region"/> object from the specified <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that defines the interior of the new <see cref="T:System.Drawing.Region"/> object.
      </param>
      <remarks>
        <para>This method creates a new <see cref="T:System.Drawing.Region"/> object with a rectangular interior. The interior is defined by the <paramref name="rect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.#ctor(System.Drawing.Rectangle)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Region"/> object from the specified <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="rect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that defines the interior of the new <see cref="T:System.Drawing.Region"/> object.
      </param>
      <remarks>
        <para>This method creates a new <see cref="T:System.Drawing.Region"/> object with a rectangular interior. The interior is defined by the <paramref name="rect"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Region"/> object with the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="path">
        A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object that defines the new <see cref="T:System.Drawing.Region"/> object.
      </param>
      <remarks>
        <para>This method creates a new <see cref="T:System.Drawing.Region"/> object with a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object. The new region is defined as the interior of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object specified by the <paramref name="path "/>parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.#ctor(System.Drawing.Drawing2D.RegionData)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Region"/> object from the specified data.</para>
      </summary>
      <param name="rgnData">
        A <see cref="T:System.Drawing.Drawing2D.RegionData"/> object that defines the interior of the new <see cref="T:System.Drawing.Region"/> object.
      </param>
      <remarks>
        <para>This method creates a new <see cref="T:System.Drawing.Region"/> object with an interior defined by an existing <see cref="T:System.Drawing.Region"/> object. The <paramref name="rgnData"/> parameter is an array that contains the definition of an existing <see cref="T:System.Drawing.Region"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.Clone">
      <summary>
        <para>Creates an exact copy if this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.Region"/> object that this method creates.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Region.Complement(System.Drawing.RectangleF)">
      <overload>
        Updates this <see cref="T:System.Drawing.Region"/> object to the portion of the specified <see cref="T:System.Drawing.RectangleF"/> structure that does not intersect with this <see cref="T:System.Drawing.Region"/> object.
      </overload>
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to contain the portion of the specified <see cref="T:System.Drawing.RectangleF"/> structure that does not intersect with this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.RectangleF"/> structure to complement this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle and draws it o the screen in black</term>
          </item>
          <item>
            <term>Creates a second rectangle that intersects with the first and draws it to the screen in red.</term>
          </item>
          <item>
            <term>Creates a region using the first rectangle.</term>
          </item>
          <item>
            <term>Gets the complement of that region combined with the second rectangle.</term>
          </item>
          <item>
            <term>Fills the complement area with blue and draws it to the screen.</term>
          </item>
        </list>
        <para>Notice that the area of the second rectangle that does not intersect with the region is colored blue.</para>
        <code lang="VB">Public Sub Complement_RectF_Example(e As PaintEventArgs)
&apos; Create the first rectangle and draw it to the screen in black.
Dim regionRect As New Rectangle(20, 20, 100, 100)
e.Graphics.DrawRectangle(Pens.Black, regionRect)
&apos; Create the second rectangle and draw it to the screen in red.
Dim complementRect As New RectangleF(90, 30, 100, 100)
e.Graphics.DrawRectangle(Pens.Red, _
Rectangle.Round(complementRect))
&apos; Create a region using the first rectangle.
Dim myRegion As New [Region](regionRect)
&apos; Get the complement of the region combined with the second
&apos; rectangle.
myRegion.Complement(complementRect)
&apos; Fill the complement area with blue.
Dim myBrush As New SolidBrush(Color.Blue)
e.Graphics.FillRegion(myBrush, myRegion)
End Sub
        </code>
        <code lang="C#">public void Complement_RectF_Example(PaintEventArgs e)
{
// Create the first rectangle and draw it to the screen in black.
Rectangle regionRect = new Rectangle(20, 20, 100, 100);
e.Graphics.DrawRectangle(Pens.Black, regionRect);
// Create the second rectangle and draw it to the screen in red.
RectangleF complementRect = new RectangleF(90, 30, 100, 100);
e.Graphics.DrawRectangle(Pens.Red,
Rectangle.Round(complementRect));
// Create a region using the first rectangle.
Region myRegion = new Region(regionRect);
// Get the complement of the region combined with the second
// rectangle.
myRegion.Complement(complementRect);
// Fill the complement area with blue.
SolidBrush myBrush = new SolidBrush(Color.Blue);
e.Graphics.FillRegion(myBrush, myRegion);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Complement(System.Drawing.Rectangle)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to contain the portion of the specified <see cref="T:System.Drawing.Rectangle"/> structure that does not intersect with this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.Rectangle"/> structure to complement this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Complement Method (RectangleF)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Complement(System.Drawing.Region)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to contain the portion of the specified <see cref="T:System.Drawing.Region"/> object that does not intersect with this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="region">
        The <see cref="T:System.Drawing.Region"/> object to complement this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle and draws it o the screen in black</term>
          </item>
          <item>
            <term>Creates a second rectangle that intersects with the first and draws it to the screen in red.</term>
          </item>
          <item>
            <term>Creates one region using the first rectangle and creates a second region using the second rectangle.</term>
          </item>
          <item>
            <term>Gets the complement of that first region when combined with the second region.</term>
          </item>
          <item>
            <term>Fills the complement area with blue and draws it to the screen.</term>
          </item>
        </list>
        <para>Notice that the area of the second region that does not intersect with the first region is colored blue.</para>
        <code lang="VB">Public Sub Complement_Region_Example(e As PaintEventArgs)
&apos; Create the first rectangle and draw it to the screen in black.
Dim regionRect As New Rectangle(20, 20, 100, 100)
e.Graphics.DrawRectangle(Pens.Black, regionRect)
&apos; Create the second rectangle and draw it to the screen in red.
Dim complementRect As New Rectangle(90, 30, 100, 100)
e.Graphics.DrawRectangle(Pens.Red, complementRect)
&apos; create a region from the first rectangle.
Dim myRegion As New [Region](regionRect)
&apos; Create a complement region.
Dim complementRegion As New [Region](complementRect)
&apos; Get the complement of myRegion when combined with
&apos; complementRegion.
myRegion.Complement(complementRegion)
&apos; Fill the complement area with blue.
Dim myBrush As New SolidBrush(Color.Blue)
e.Graphics.FillRegion(myBrush, myRegion)
End Sub
        </code>
        <code lang="C#">public void Complement_Region_Example(PaintEventArgs e)
{
// Create the first rectangle and draw it to the screen in black.
Rectangle regionRect = new Rectangle(20, 20, 100, 100);
e.Graphics.DrawRectangle(Pens.Black, regionRect);
// Create the second rectangle and draw it to the screen in red.
Rectangle complementRect = new Rectangle(90, 30, 100, 100);
e.Graphics.DrawRectangle(Pens.Red, complementRect);
// Create a region from the first rectangle.
Region myRegion = new Region(regionRect);
// Create a complement region.
Region complementRegion = new Region(complementRect);
// Get the complement of myRegion when combined with
// complementRegion.
myRegion.Complement(complementRegion);
// Fill the complement area with blue.
SolidBrush myBrush = new SolidBrush(Color.Blue);
e.Graphics.FillRegion(myBrush, myRegion);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Complement(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to contain the portion of the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object that does not intersect with this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="path">
        The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object to complement this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle and draws it o the screen in black</term>
          </item>
          <item>
            <term>Creates a second rectangle that intersects with the first and draws it to the screen in red.</term>
          </item>
          <item>
            <term>Creates a region using the first rectangle.</term>
          </item>
          <item>
            <term>Creates a GraphicsPath, and adds the second rectangle to it.</term>
          </item>
          <item>
            <term>Gets the complement of the region when combined with the GraphicsPath.</term>
          </item>
          <item>
            <term>Fills the complement area with blue and draws it to the screen.</term>
          </item>
        </list>
        <para>Notice that the area of the GraphicsPath that does not intersect with the region is colored blue.</para>
        <code lang="VB">Public Sub Complement_Path_Example(e As PaintEventArgs)
&apos; Create the first rectangle and draw it to the screen in black.
Dim regionRect As New Rectangle(20, 20, 100, 100)
e.Graphics.DrawRectangle(Pens.Black, regionRect)
&apos; Create the second rectangle and draw it to the screen in red.
Dim complementRect As New Rectangle(90, 30, 100, 100)
e.Graphics.DrawRectangle(Pens.Red, complementRect)
&apos; Create a graphics path and add the second rectangle to it.
Dim complementPath As New GraphicsPath()
complementPath.AddRectangle(complementRect)
&apos; Create a region using the first rectangle.
Dim myRegion As New [Region](regionRect)
&apos; Get the complement of myRegion when combined with
&apos; complementPath.
myRegion.Complement(complementPath)
&apos; Fill the complement area with blue.
Dim myBrush As New SolidBrush(Color.Blue)
e.Graphics.FillRegion(myBrush, myRegion)
End Sub
        </code>
        <code lang="C#">public void Complement_Path_Example(PaintEventArgs e)
{
// Create the first rectangle and draw it to the screen in black.
Rectangle regionRect = new Rectangle(20, 20, 100, 100);
e.Graphics.DrawRectangle(Pens.Black, regionRect);
// Create the second rectangle and draw it to the screen in red.
Rectangle complementRect = new Rectangle(90, 30, 100, 100);
e.Graphics.DrawRectangle(Pens.Red, complementRect);
// Create a graphics path and add the second rectangle to it.
GraphicsPath complementPath = new GraphicsPath();
complementPath.AddRectangle(complementRect);
// Create a region using the first rectangle.
Region myRegion = new Region(regionRect);
// Get the complement of myRegion when combined with
// complementPath.
myRegion.Complement(complementPath);
// Fill the complement area with blue.
SolidBrush myBrush = new SolidBrush(Color.Blue);
e.Graphics.FillRegion(myBrush, myRegion);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Region"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.Equals(System.Drawing.Region,System.Drawing.Graphics)">
      <summary>
        <para>Tests whether the specified <see cref="T:System.Drawing.Region"/> object is identical to this <see cref="T:System.Drawing.Region"/> object on the specified drawing surface.</para>
      </summary>
      <param name="region">
        The <see cref="T:System.Drawing.Region"/> object to test.
      </param>
      <param name="g">
        A <see cref="T:System.Drawing.Graphics"/> object that represents a drawing surface.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the interior of region is identical to the interior of this region when the transformation associated with the <paramref name="g"/> parameter is applied; otherwise, <see langword="false"/>.</para>
      </returns>
      <remarks>
        <para>The current transformation of the graphics context <paramref name="g"/> is used to compute the region interiors on the drawing surface.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.Exclude(System.Drawing.Rectangle)">
      <overload>
        Updates this <see cref="T:System.Drawing.Region"/> object to the portion of its interior that does not intersect with the specified <see cref="T:System.Drawing.Rectangle"/> structure.
      </overload>
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to contain only the portion of its interior that does not intersect with the specified <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.Rectangle"/> structure to exclude from this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Exclude Method (RectangleF)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Exclude(System.Drawing.RectangleF)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to contain only the portion of its interior that does not intersect with the specified <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.RectangleF"/> structure to exclude from this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle and draws it o the screen in black</term>
          </item>
          <item>
            <term>Creates a second rectangle that intersects with the first and draws it to the screen in red.</term>
          </item>
          <item>
            <term>Creates a region using the first rectangle.</term>
          </item>
          <item>
            <term>Gets the nonexcluded area of the region when combined with the second rectangle.</term>
          </item>
          <item>
            <term>Fills the nonexcluded area with blue and draws it to the screen.</term>
          </item>
        </list>
        <para>Notice that the area of the area of the region that does not intersect with the rectangle is colored blue.</para>
        <code lang="VB">Public Sub Exclude_RectF_Example(e As PaintEventArgs)
&apos; Create the first rectangle and draw it to the screen in black.
Dim regionRect As New Rectangle(20, 20, 100, 100)
e.Graphics.DrawRectangle(Pens.Black, regionRect)
&apos; create the second rectangle and draw it to the screen in red.
Dim complementRect As New RectangleF(90, 30, 100, 100)
e.Graphics.DrawRectangle(Pens.Red, _
Rectangle.Round(complementRect))
&apos; Create a region using the first rectangle.
Dim myRegion As New [Region](regionRect)
&apos; Get the nonexcluded area of myRegion when combined with
&apos; complementRect.
myRegion.Exclude(complementRect)
&apos; Fill the nonexcluded area of myRegion with blue.
Dim myBrush As New SolidBrush(Color.Blue)
e.Graphics.FillRegion(myBrush, myRegion)
End Sub
        </code>
        <code lang="C#">public void Exclude_RectF_Example(PaintEventArgs e)
{
// Create the first rectangle and draw it to the screen in black.
Rectangle regionRect = new Rectangle(20, 20, 100, 100);
e.Graphics.DrawRectangle(Pens.Black, regionRect);
// Create the second rectangle and draw it to the screen in red.
RectangleF complementRect = new RectangleF(90, 30, 100, 100);
e.Graphics.DrawRectangle(Pens.Red,
Rectangle.Round(complementRect));
// Create a region using the first rectangle.
Region myRegion = new Region(regionRect);
// Get the nonexcluded area of myRegion when combined with
// complementRect.
myRegion.Exclude(complementRect);
// Fill the nonexcluded area of myRegion with blue.
SolidBrush myBrush = new SolidBrush(Color.Blue);
e.Graphics.FillRegion(myBrush, myRegion);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Exclude(System.Drawing.Region)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to contain only the portion of its interior that does not intersect with the specified <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="region">
        The <see cref="T:System.Drawing.Region"/> object to exclude from this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Exclude Method (RectangleF)"/> and <see langword="Region.Complement Method (Region)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Exclude(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to contain only the portion of its interior that does not intersect with the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="path">
        The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object to exclude from this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Exclude Method (RectangleF)"/> and <see langword="Region.Complement Method (GraphicsPath)"/></para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.FromHrgn(System.IntPtr)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.Region"/> object from a handle to the specified existing GDI region.</para>
      </summary>
      <param name="hrgn">
        A handle to an existing <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>The new <see cref="T:System.Drawing.Region"/> object.</para>
      </returns>
      <remarks>
        <para>This method creates a new <see cref="T:System.Drawing.Region"/> object with an interior defined by the existing <see cref="T:System.Drawing.Region"/> object referred to by the handle in the <paramref name="hrgn"/> parameter.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.GetBounds(System.Drawing.Graphics)">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.RectangleF"/> structure that represents a rectangle that bounds this <see cref="T:System.Drawing.Region"/> object on the drawing surface of a <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="g">
        The <see cref="T:System.Drawing.Graphics"/> object on which this <see cref="T:System.Drawing.Region"/> object is drawn.
      </param>
      <returns>
        <para>A <see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle for this <see cref="T:System.Drawing.Region"/> object on the specified drawing surface.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a GraphicsPath and adds an ellipse to it.</term>
          </item>
          <item>
            <term>Fills the path with blue and draws it to the screen.</term>
          </item>
          <item>
            <term>Creates a region that uses the GraphicsPath.</term>
          </item>
          <item>
            <term>Gets the nonexcluded area of the region when combined with the second rectangle.</term>
          </item>
          <item>
            <term>Gets the bounding rectangle for the region and draws it to the screen in red.</term>
          </item>
        </list>
        <code lang="VB">Public Sub GetBoundsExample(e As PaintEventArgs)
&apos; Create a GraphicsPath and add an ellipse to it.
Dim myPath As New GraphicsPath()
Dim ellipseRect As New Rectangle(20, 20, 100, 100)
myPath.AddEllipse(ellipseRect)
&apos; Fill the path with blue and draw it to the screen.
Dim myBrush As New SolidBrush(Color.Blue)
e.Graphics.FillPath(myBrush, myPath)
&apos; Create a region using the GraphicsPath.
Dim myRegion As New [Region](myPath)
&apos; Get the bounding rectangle for myRegion and draw it to the
&apos; screen in Red.
Dim boundsRect As RectangleF = myRegion.GetBounds(e.Graphics)
e.Graphics.DrawRectangle(Pens.Red, Rectangle.Round(boundsRect))
End Sub
        </code>
        <code lang="C#">public void GetBoundsExample(PaintEventArgs e)
{
// Create a GraphicsPath and add an ellipse to it.
GraphicsPath myPath = new GraphicsPath();
Rectangle ellipseRect = new Rectangle(20, 20, 100, 100);
myPath.AddEllipse(ellipseRect);
// Fill the path with blue and draw it to the screen.
SolidBrush myBrush = new SolidBrush(Color.Blue);
e.Graphics.FillPath(myBrush, myPath);
// Create a region using the GraphicsPath.
Region myRegion = new Region(myPath);
// Get the bounding rectangle for myRegion and draw it to the
// screen in Red.
RectangleF boundsRect = myRegion.GetBounds(e.Graphics);
e.Graphics.DrawRectangle(Pens.Red, Rectangle.Round(boundsRect));
}
        </code>
      </example>
      <remarks>
        <para>The current transformation of the graphics context is used to compute the region interior on the drawing surface. The bounding rectangle is not always the smallest possible bounding rectangle depending on the current transformation.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.GetHrgn(System.Drawing.Graphics)">
      <summary>
        <para>Returns a Windows handle to this <see cref="T:System.Drawing.Region"/> object in the specified graphics context.</para>
      </summary>
      <param name="g">
        The <see cref="T:System.Drawing.Graphics"/> object on which this <see cref="T:System.Drawing.Region"/> object is drawn.
      </param>
      <returns>
        <para>A Windows handle to this <see cref="T:System.Drawing.Region"/> object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Region.GetRegionData">
      <summary>
        <para>Returns a <see cref="T:System.Drawing.Drawing2D.RegionData"/> object that represents the information that describes this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Drawing.Drawing2D.RegionData"/> object that represents the information that describes this <see cref="T:System.Drawing.Region"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle and draw its to the screen in black.</term>
          </item>
          <item>
            <term>Creates a region using the rectangle.</term>
          </item>
          <item>
            <term>Gets the RegionData.</term>
          </item>
          <item>
            <term>Draws the region data (an array of bytes) to the screen, by using the DisplayRegionData helper function.</term>
          </item>
        </list>
        <code lang="VB">Public Sub GetRegionDataExample(e As PaintEventArgs)
&apos; Create the first rectangle and draw it to the screen in black.
Dim regionRect As New Rectangle(20, 20, 100, 100)
e.Graphics.DrawRectangle(Pens.Black, regionRect)
&apos; Create a region using the first rectangle.
Dim myRegion As New [Region](regionRect)
&apos; Get the RegionData for this region.
Dim myRegionData As RegionData = myRegion.GetRegionData()
Dim myRegionDataLength As Integer = myRegionData.Data.Length
DisplayRegionData(e, myRegionDataLength, myRegionData)
End Sub
&apos; Helper Function for GetRegionData.
Public Sub DisplayRegionData(e As PaintEventArgs, len As Integer, _
dat As RegionData)
&apos; Display the result.
Dim i As Integer
Dim x As Single = 20
Dim y As Single = 140
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim myBrush As New SolidBrush(Color.Black)
e.Graphics.DrawString(&quot;myRegionData = &quot;, myFont, myBrush, _
New PointF(x, y))
y = 160
For i = 0 To len - 1
If x &gt; 300 Then
y += 20
x = 20
End If
e.Graphics.DrawString(dat.Data(i).ToString(), myFont, _
myBrush, New PointF(x, y))
x += 30
Next i
End Sub
        </code>
        <code lang="C#">public void GetRegionDataExample(PaintEventArgs e)
{
// Create a rectangle and draw it to the screen in black.
Rectangle regionRect = new Rectangle(20, 20, 100, 100);
e.Graphics.DrawRectangle(Pens.Black, regionRect);
// Create a region using the first rectangle.
Region myRegion = new Region(regionRect);
// Get the RegionData for this region.
RegionData myRegionData = myRegion.GetRegionData();
int myRegionDataLength = myRegionData.Data.Length;
DisplayRegionData(e, myRegionDataLength, myRegionData);
}
// THIS IS A HELPER FUNCTION FOR GetRegionData.
public void DisplayRegionData(PaintEventArgs e,
int len,
RegionData dat)
{
// Display the result.
int i;
float x = 20, y = 140;
Font myFont = new Font(&quot;Arial&quot;, 8);
SolidBrush myBrush = new SolidBrush(Color.Black);
e.Graphics.DrawString(&quot;myRegionData = &quot;,
myFont,
myBrush,
new PointF(x, y));
y = 160;
for(i = 0; i &lt; len; i++)
{
if(x &gt; 300)
{
y += 20;
x = 20;
}
e.Graphics.DrawString(dat.Data[i].ToString(),
myFont,
myBrush,
new PointF(x, y));
x += 30;
}
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Region.GetRegionScans(System.Drawing.Drawing2D.Matrix)">
      <summary>
        <para>Returns an array of <see cref="T:System.Drawing.RectangleF"/> structures that approximate this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="matrix">
        A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that represents a geometric transformation to apply to the region.
      </param>
      <returns>
        <para>An array of <see cref="T:System.Drawing.RectangleF"/> structures that approximate this <see cref="T:System.Drawing.Region"/> object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Region.Intersect(System.Drawing.Region)">
      <overload>
        Updates this <see cref="T:System.Drawing.Region"/> object to the intersection of itself with the specified <see cref="T:System.Drawing.Region"/> object.
      </overload>
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to the intersection of itself with the specified <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="region">
        The <see cref="T:System.Drawing.Region"/> object to intersect with this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Intersect Method (RectangleF)"/> and <see langword="Region.Complement Method (GraphicsPath)"/></para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Intersect(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to the intersection of itself with the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="path">
        The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object to intersect with this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Intersect Method (RectangleF)"/> and <see langword="Region.Complement Method (GraphicsPath)"/></para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Intersect(System.Drawing.Rectangle)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to the intersection of itself with the specified <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.Rectangle"/> structure to intersect with this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Intersect Method (RectangleF)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Intersect(System.Drawing.RectangleF)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to the intersection of itself with the specified <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.RectangleF"/> structure to intersect with this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates the first rectangle and draws it to the screen in black.</term>
          </item>
          <item>
            <term>Creates the second rectangle and draws it to the screen in red.</term>
          </item>
          <item>
            <term>Creates a region that from the first rectangle.</term>
          </item>
          <item>
            <term>Gets the area of intersection for the region when combined with the second rectangle.</term>
          </item>
          <item>
            <term>Fills the area of intersection with blue and draws it to the screen.</term>
          </item>
        </list>
        <para>Notice that only the overlapped area for the region and rectangle is blue.</para>
        <code lang="VB">Public Sub Intersect_RectF_Example(e As PaintEventArgs)
&apos; Create the first rectangle and draw it to the screen in black.
Dim regionRect As New Rectangle(20, 20, 100, 100)
e.Graphics.DrawRectangle(Pens.Black, regionRect)
&apos; create the second rectangle and draw it to the screen in red.
Dim complementRect As New RectangleF(90, 30, 100, 100)
e.Graphics.DrawRectangle(Pens.Red, _
Rectangle.Round(complementRect))
&apos; Create a region using the first rectangle.
Dim myRegion As New [Region](regionRect)
&apos; Get the area of intersection for myRegion when combined with
&apos; complementRect.
myRegion.Intersect(complementRect)
&apos; Fill the intersection area of myRegion with blue.
Dim myBrush As New SolidBrush(Color.Blue)
e.Graphics.FillRegion(myBrush, myRegion)
End Sub
        </code>
        <code lang="C#">public void Intersect_RectF_Example(PaintEventArgs e)
{
// Create the first rectangle and draw it to the screen in black.
Rectangle regionRect = new Rectangle(20, 20, 100, 100);
e.Graphics.DrawRectangle(Pens.Black, regionRect);
// create the second rectangle and draw it to the screen in red.
RectangleF complementRect = new RectangleF(90, 30, 100, 100);
e.Graphics.DrawRectangle(Pens.Red,
Rectangle.Round(complementRect));
// Create a region using the first rectangle.
Region myRegion = new Region(regionRect);
// Get the area of intersection for myRegion when combined with
// complementRect.
myRegion.Intersect(complementRect);
// Fill the intersection area of myRegion with blue.
SolidBrush myBrush = new SolidBrush(Color.Blue);
e.Graphics.FillRegion(myBrush, myRegion);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Region.IsEmpty(System.Drawing.Graphics)">
      <summary>
        <para>Tests whether this <see cref="T:System.Drawing.Region"/> object has an empty interior on the specified drawing surface.</para>
      </summary>
      <param name="g">
        A <see cref="T:System.Drawing.Graphics"/> object that represents a drawing surface.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the interior of this <see cref="T:System.Drawing.Region"/> object is empty when the transformation associated with <paramref name="g"/> is applied; otherwise, <see langword="false"/>.</para>
      </returns>
      <remarks>
        <para>The current transformation of the graphics context <paramref name="g "/>is used to compute the region interior on the drawing surface.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.IsInfinite(System.Drawing.Graphics)">
      <summary>
        <para>Tests whether this <see cref="T:System.Drawing.Region"/> object has an infinite interior on the specified drawing surface.</para>
      </summary>
      <param name="g">
        A <see cref="T:System.Drawing.Graphics"/> object that represents a drawing surface.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the interior of this <see cref="T:System.Drawing.Region"/> object is infinite when the transformation associated with <paramref name="g"/> is applied; otherwise, <see langword="false"/>.</para>
      </returns>
      <remarks>
        <para>The current transformation of the graphics context <paramref name="g"/> is used to compute the region interior on the drawing surface.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Single,System.Single,System.Single,System.Single)">
      <overload>
        Tests whether the specified rectangle is contained within this <see cref="T:System.Drawing.Region"/> object.
      </overload>
      <summary>
        <para>Tests whether any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the upper-left corner of the rectangle to test.
      </param>
      <param name="y">
        The y-coordinate of the upper-left corner of the rectangle to test.
      </param>
      <param name="width">
        The width of the rectangle to test.
      </param>
      <param name="height">
        The height of the rectangle to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Drawing.RectangleF)">
      <summary>
        <para>Tests whether any portion of the specified <see cref="T:System.Drawing.RectangleF"/> structure is contained within this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.RectangleF"/> structure to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when any portion of <paramref name="rect"/> is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates the first rectangle and draws it to the screen in blue.</term>
          </item>
          <item>
            <term>Creates the second rectangle and draws it to the screen in red.</term>
          </item>
          <item>
            <term>Creates a region that from the first rectangle.</term>
          </item>
          <item>
            <term>Determines if any portion of the rectangle intersects with the region.</term>
          </item>
          <item>
            <term>Displays the <see langword="true"/> or <see langword="false"/> result on the screen.</term>
          </item>
        </list>
        <para>Notice that there one intersect the other so the result is <see langword="true"/>.</para>
        <code lang="VB">Public Sub IsVisible_RectF_Example(e As PaintEventArgs)
&apos; Create the first rectangle and draw it to the screen in blue.
Dim regionRect As New Rectangle(20, 20, 100, 100)
e.Graphics.DrawRectangle(Pens.Blue, regionRect)
&apos; create the second rectangle and draw it to the screen in red.
Dim myRect As New RectangleF(90, 30, 100, 100)
e.Graphics.DrawRectangle(Pens.Red, Rectangle.Round(myRect))
&apos; Create a region using the first rectangle.
Dim myRegion As New [Region](regionRect)
&apos; Determine if myRect is contained in the region.
Dim contained As Boolean = myRegion.IsVisible(myRect)
&apos; Display the result.
Dim myFont As New Font(&quot;Arial&quot;, 8)
Dim myBrush As New SolidBrush(Color.Black)
e.Graphics.DrawString(&quot;contained = &quot; &amp; contained.ToString(), _
myFont, myBrush, New PointF(20, 140))
End Sub
        </code>
        <code lang="C#">public void IsVisible_RectF_Example(PaintEventArgs e)
{
// Create the first rectangle and draw it to the screen in blue.
Rectangle regionRect = new Rectangle(20, 20, 100, 100);
e.Graphics.DrawRectangle(Pens.Blue, regionRect);
// Create the second rectangle and draw it to the screen in red.
RectangleF myRect = new RectangleF(90, 30, 100, 100);
e.Graphics.DrawRectangle(Pens.Red, Rectangle.Round(myRect));
// Create a region using the first rectangle.
Region myRegion = new Region(regionRect);
// Determine if myRect is contained in the region.
bool contained = myRegion.IsVisible(myRect);
// Display the result.
Font myFont = new Font(&quot;Arial&quot;, 8);
SolidBrush myBrush = new SolidBrush(Color.Black);
e.Graphics.DrawString(&quot;contained = &quot; + contained.ToString(),
myFont,
myBrush,
new PointF(20, 140));
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Single,System.Single,System.Single,System.Single,System.Drawing.Graphics)">
      <summary>
        <para>Tests whether any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region"/> object when drawn using the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the upper-left corner of the rectangle to test.
      </param>
      <param name="y">
        The y-coordinate of the upper-left corner of the rectangle to test.
      </param>
      <param name="width">
        The width of the rectangle to test.
      </param>
      <param name="height">
        The height of the rectangle to test.
      </param>
      <param name="g">
        A <see cref="T:System.Drawing.Graphics"/> object that represents a graphics context.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
      <remarks>
        <para>The current transformation of the graphics context is used to compute the region interior and the rectangle coordinates on the drawing surface.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Tests whether any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the upper-left corner of the rectangle to test.
      </param>
      <param name="y">
        The y-coordinate of the upper-left corner of the rectangle to test.
      </param>
      <param name="width">
        The width of the rectangle to test.
      </param>
      <param name="height">
        The height of the rectangle to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Single,System.Single,System.Drawing.Graphics)">
      <summary>
        <para>Tests whether the specified point is contained within this <see cref="T:System.Drawing.Region"/> object when drawn using the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the point to test.
      </param>
      <param name="y">
        The y-coordinate of the point to test.
      </param>
      <param name="g">
        A <see cref="T:System.Drawing.Graphics"/> object that represents a graphics context.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when the specified point is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
      <remarks>
        <para>The current transformation of the graphics context is used to compute the region interior and the point coordinates on the drawing surface.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Drawing.PointF)">
      <summary>
        <para>Tests whether the specified <see cref="T:System.Drawing.PointF"/> structure is contained within this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="point">
        The <see cref="T:System.Drawing.PointF"/> structure to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when <paramref name="point"/> is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Single,System.Single)">
      <summary>
        <para>Tests whether the specified point is contained within this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the point to test.
      </param>
      <param name="y">
        The y-coordinate of the point to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when the specified point is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Drawing.PointF,System.Drawing.Graphics)">
      <summary>
        <para>Tests whether the specified <see cref="T:System.Drawing.PointF"/> structure is contained within this <see cref="T:System.Drawing.Region"/> object when drawn using the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="point">
        The <see cref="T:System.Drawing.PointF"/> structure to test.
      </param>
      <param name="g">
        A <see cref="T:System.Drawing.Graphics"/> object that represents a graphics context.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when <paramref name="point"/> is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
      <remarks>
        <para>The current transformation of the graphics context is used to compute the region interior and the point coordinates on the drawing surface.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Drawing.Rectangle,System.Drawing.Graphics)">
      <summary>
        <para>Tests whether any portion of the specified <see cref="T:System.Drawing.Rectangle"/> structure is contained within this <see cref="T:System.Drawing.Region"/> object when drawn using the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.Rectangle"/> structure to test.
      </param>
      <param name="g">
        A <see cref="T:System.Drawing.Graphics"/> object that represents a graphics context.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when any portion of the <paramref name="rect"/> is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
      <remarks>
        <para>The current transformation of the graphics context is used to compute the region interior and the rectangle coordinates on the drawing surface.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Graphics)">
      <summary>
        <para>Tests whether any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region"/> object when drawn using the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the upper-left corner of the rectangle to test.
      </param>
      <param name="y">
        The y-coordinate of the upper-left corner of the rectangle to test.
      </param>
      <param name="width">
        The width of the rectangle to test.
      </param>
      <param name="height">
        The height of the rectangle to test.
      </param>
      <param name="g">
        A <see cref="T:System.Drawing.Graphics"/> object that represents a graphics context.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
      <remarks>
        <para>The current transformation of the graphics context is used to compute the region interior and the rectangle coordinates on the drawing surface.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Drawing.Rectangle)">
      <summary>
        <para>Tests whether any portion of the specified <see cref="T:System.Drawing.Rectangle"/> structure is contained within this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.Rectangle"/> structure to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when any portion of <paramref name="rect"/> is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Drawing.Point,System.Drawing.Graphics)">
      <summary>
        <para>Tests whether the specified <see cref="T:System.Drawing.Point"/> structure is contained within this <see cref="T:System.Drawing.Region"/> object when drawn using the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="point">
        The <see cref="T:System.Drawing.Point"/> structure to test.
      </param>
      <param name="g">
        A <see cref="T:System.Drawing.Graphics"/> object that represents a graphics context.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when <paramref name="point"/> is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
      <remarks>
        <para>The current transformation of the graphics context is used to compute the region interior and the point coordinates on the drawing surface.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Drawing.RectangleF,System.Drawing.Graphics)">
      <summary>
        <para>Tests whether any portion of the specified <see cref="T:System.Drawing.RectangleF"/> structure is contained within this <see cref="T:System.Drawing.Region"/> when drawn using the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.RectangleF"/> structure to test.
      </param>
      <param name="g">
        A <see cref="T:System.Drawing.Graphics"/> object that represents a graphics context.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when <paramref name="rect"/> is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
      <remarks>
        <para>The current transformation of the graphics context is used to compute the region interior and the rectangle coordinates on the drawing surface.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)">
      <summary>
        <para>Tests whether the specified point is contained within this <see cref="T:System.Drawing.Region"/> object when drawn using the specified <see cref="T:System.Drawing.Graphics"/> object.</para>
      </summary>
      <param name="x">
        The x-coordinate of the point to test.
      </param>
      <param name="y">
        The y-coordinate of the point to test.
      </param>
      <param name="g">
        A <see cref="T:System.Drawing.Graphics"/> object that represents a graphics context.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when the specified point is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
      <remarks>
        <para>The current transformation of the graphics context is used to compute the region interior and the point coordinates on the drawing surface.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Region.IsVisible(System.Drawing.Point)">
      <summary>
        <para>Tests whether the specified <see cref="T:System.Drawing.Point"/> structure is contained within this <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="point">
        The <see cref="T:System.Drawing.Point"/> structure to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> when <paramref name="point"/> is contained within this <see cref="T:System.Drawing.Region"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.IsVisible Method (RectangleF)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.MakeEmpty">
      <summary>
        <para>Initializes this <see cref="T:System.Drawing.Region"/> object to an empty interior.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Region.MakeInfinite">
      <summary>
        <para>Initializes this <see cref="T:System.Drawing.Region"/> object to an infinite interior.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Region.Transform(System.Drawing.Drawing2D.Matrix)">
      <summary>
        <para>Transforms this <see cref="T:System.Drawing.Region"/> object by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </summary>
      <param name="matrix">
        The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by which to transform this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle and draws it to the screen in blue.</term>
          </item>
          <item>
            <term>Creates a region from the rectangle.</term>
          </item>
          <item>
            <term>Creates a transform matrix and sets it to 45 degrees.</term>
          </item>
          <item>
            <term>Apply the transform to the region.</term>
          </item>
          <item>
            <term>Fill the transformed region with red and draw the transformed region to the screen in red.</term>
          </item>
        </list>
        <para>Notice that the red rectangle is rotated 45 degrees from the original rectangle, shown in blue.</para>
        <code lang="VB">Public Sub TransformExample(e As PaintEventArgs)
&apos; Create the first rectangle and draw it to the screen in blue.
Dim regionRect As New Rectangle(100, 50, 100, 100)
e.Graphics.DrawRectangle(Pens.Blue, regionRect)
&apos; Create a region using the first rectangle.
Dim myRegion As New [Region](regionRect)
&apos; Create a transform matrix and set it to have a 45 degree
&apos; rotation.
Dim transformMatrix As New Matrix()
transformMatrix.RotateAt(45, New PointF(100, 50))
&apos; Apply the transform to the region.
myRegion.Transform(transformMatrix)
&apos; Fill the transformed region with red and draw it to the
&apos; screen in red.
Dim myBrush As New SolidBrush(Color.Red)
e.Graphics.FillRegion(myBrush, myRegion)
End Sub
        </code>
        <code lang="C#">public void TransformExample(PaintEventArgs e)
{
// Create the first rectangle and draw it to the screen in blue.
Rectangle regionRect = new Rectangle(100, 50, 100, 100);
e.Graphics.DrawRectangle(Pens.Blue, regionRect);
// Create a region using the first rectangle.
Region myRegion = new Region(regionRect);
// Create a transform matrix and set it to have a 45 degree
// rotation.
Matrix transformMatrix = new Matrix();
transformMatrix.RotateAt(45, new Point(100, 50));
// Apply the transform to the region.
myRegion.Transform(transformMatrix);
// Fill the transformed region with red and draw it to the screen
// in red.
SolidBrush myBrush = new SolidBrush(Color.Red);
e.Graphics.FillRegion(myBrush, myRegion);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Translate(System.Single,System.Single)">
      <overload>
        Offsets the coordinates of this <see cref="T:System.Drawing.Region"/> object by the specified amount.
      </overload>
      <summary>
        <para>Offsets the coordinates of this <see cref="T:System.Drawing.Region"/> object by the specified amount.</para>
      </summary>
      <param name="dx">
        The amount to offset this <see cref="T:System.Drawing.Region"/> object horizontally.
      </param>
      <param name="dy">
        The amount to offset this <see cref="T:System.Drawing.Region"/> object vertically.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Translate Method (Int32, Int32)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Translate(System.Int32,System.Int32)">
      <summary>
        <para>Offsets the coordinates of this <see cref="T:System.Drawing.Region"/> object by the specified amount.</para>
      </summary>
      <param name="dx">
        The amount to offset this <see cref="T:System.Drawing.Region"/> object horizontally.
      </param>
      <param name="dy">
        The amount to offset this <see cref="T:System.Drawing.Region"/> object vertically.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle and draws it to the screen in blue.</term>
          </item>
          <item>
            <term>Creates a region from the rectangle.</term>
          </item>
          <item>
            <term>Applies the translation to the region.</term>
          </item>
          <item>
            <term>Fills the translated region with red and draws the translated region to the screen in red.</term>
          </item>
        </list>
        <para>Notice that the red rectangle is shifted down and to the right from the original rectangle, shown in blue.</para>
        <code lang="VB">Public Sub TranslateExample(e As PaintEventArgs)
&apos; Create the first rectangle and draw it to the screen in blue.
Dim regionRect As New Rectangle(100, 50, 100, 100)
e.Graphics.DrawRectangle(Pens.Blue, regionRect)
&apos; Create a region using the first rectangle.
Dim myRegion As New [Region](regionRect)
&apos; Apply the translation to the region.
myRegion.Translate(150, 100)
&apos; Fill the transformed region with red and draw it to the
&apos; screen in red.
Dim myBrush As New SolidBrush(Color.Red)
e.Graphics.FillRegion(myBrush, myRegion)
End Sub
        </code>
        <code lang="C#">public void TranslateExample(PaintEventArgs e)
{
// Create the first rectangle and draw it to the screen in blue.
Rectangle regionRect = new Rectangle(100, 50, 100, 100);
e.Graphics.DrawRectangle(Pens.Blue, regionRect);
// Create a region using the first rectangle.
Region myRegion = new Region(regionRect);
// Apply the translation to the region.
myRegion.Translate(150, 100);
// Fill the transformed region with red and draw it to the screen in red.
SolidBrush myBrush = new SolidBrush(Color.Red);
e.Graphics.FillRegion(myBrush, myRegion);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Union(System.Drawing.Drawing2D.GraphicsPath)">
      <overload>
        Updates this <see cref="T:System.Drawing.Region"/> object to the union of itself and the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.
      </overload>
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to the union of itself and the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="path">
        The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object to unite with this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Union Method (RectangleF)"/> and <see langword="Region.Complement Method (GraphicsPath)"/></para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Union(System.Drawing.Region)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to the union of itself and the specified <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="region">
        The <see cref="T:System.Drawing.Region"/> object to unite with this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Union Method (RectangleF)"/> and <see langword="Region.Complement Method (Region)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Union(System.Drawing.RectangleF)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to the union of itself and the specified <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.RectangleF"/> structure to unite with this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates the first rectangle and draws it to the screen in black.</term>
          </item>
          <item>
            <term>Creates a second rectangle and draws it to the screen in red.</term>
          </item>
          <item>
            <term>Creates a region using the first rectangle.</term>
          </item>
          <item>
            <term>Gets the area of union for myRegion when combined with complementRect.</term>
          </item>
          <item>
            <term>Fills the fills the area of union with blue and draws it to the screen.</term>
          </item>
        </list>
        <para>Notice that both rectangles are filled with blue, including the area of overlap.</para>
        <code lang="VB">Public Sub Union_RectF_Example(e As PaintEventArgs)
&apos; Create the first rectangle and draw it to the screen in black.
Dim regionRect As New Rectangle(20, 20, 100, 100)
e.Graphics.DrawRectangle(Pens.Black, regionRect)
&apos; create the second rectangle and draw it to the screen in red.
Dim unionRect As New RectangleF(90, 30, 100, 100)
e.Graphics.DrawRectangle(Pens.Red, Rectangle.Round(unionRect))
&apos; Create a region using the first rectangle.
Dim myRegion As New [Region](regionRect)
&apos; Get the area of union for myRegion when combined with
&apos; complementRect.
myRegion.Union(unionRect)
&apos; Fill the intersection area of myRegion with blue.
Dim myBrush As New SolidBrush(Color.Blue)
e.Graphics.FillRegion(myBrush, myRegion)
End Sub
        </code>
        <code lang="C#">public void Union_RectF_Example(PaintEventArgs e)
{
// Create the first rectangle and draw it to the screen in black.
Rectangle regionRect = new Rectangle(20, 20, 100, 100);
e.Graphics.DrawRectangle(Pens.Black, regionRect);
// create the second rectangle and draw it to the screen in red.
RectangleF unionRect = new RectangleF(90, 30, 100, 100);
e.Graphics.DrawRectangle(Pens.Red,
Rectangle.Round(unionRect));
// Create a region using the first rectangle.
Region myRegion = new Region(regionRect);
// Get the area of union for myRegion when combined with
// complementRect.
myRegion.Union(unionRect);
// Fill the union area of myRegion with blue.
SolidBrush myBrush = new SolidBrush(Color.Blue);
e.Graphics.FillRegion(myBrush, myRegion);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Union(System.Drawing.Rectangle)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to the union of itself and the specified <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.Rectangle"/> structure to unite with this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Union Method (RectangleF)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Xor(System.Drawing.Drawing2D.GraphicsPath)">
      <overload>
        Updates this <see cref="T:System.Drawing.Region"/> object to the union minus the intersection of itself with the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.
      </overload>
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to the union minus the intersection of itself with the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.</para>
      </summary>
      <param name="path">
        The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object to <see langword="XOR"/> with this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Xor Method (RectangleF)"/> and <see langword="Region.Complement Method (GraphicsPath)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Xor(System.Drawing.Region)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to the union minus the intersection of itself with the specified <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <param name="region">
        The <see cref="T:System.Drawing.Region"/> object to <see langword="XOR"/> with this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Xor Method (RectangleF)"/> and <see langword="Region.Complement Method (Region)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Xor(System.Drawing.RectangleF)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to the union minus the intersection of itself with the specified <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.RectangleF"/> structure to <see langword="XOR"/> with this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates the first rectangle and draws it to the screen in black.</term>
          </item>
          <item>
            <term>Creates a second rectangle and draws it to the screen in red.</term>
          </item>
          <item>
            <term>Creates a region using the first rectangle.</term>
          </item>
          <item>
            <term>Gets the Xor area for myRegion when combined with complementRect.</term>
          </item>
          <item>
            <term>Fills the fills the Xor area with blue and draws it to the screen.</term>
          </item>
        </list>
        <para>Notice that both rectangles are filled with blue, except for the area of overlap.</para>
        <code lang="VB">Public Sub XorExample(e As PaintEventArgs)
&apos; Create the first rectangle and draw it to the screen in black.
Dim regionRect As New Rectangle(20, 20, 100, 100)
e.Graphics.DrawRectangle(Pens.Black, regionRect)
&apos; create the second rectangle and draw it to the screen in red.
Dim xorRect As New RectangleF(90, 30, 100, 100)
e.Graphics.DrawRectangle(Pens.Red, Rectangle.Round(xorRect))
&apos; Create a region using the first rectangle.
Dim myRegion As New [Region](regionRect)
&apos; Get the area of overlap for myRegion when combined with
&apos; complementRect.
myRegion.Xor(xorRect)
&apos; Fill the intersection area of myRegion with blue.
Dim myBrush As New SolidBrush(Color.Blue)
e.Graphics.FillRegion(myBrush, myRegion)
End Sub
        </code>
        <code lang="C#">public void XorExample(PaintEventArgs e)
{
// Create the first rectangle and draw it to the screen in black.
Rectangle regionRect = new Rectangle(20, 20, 100, 100);
e.Graphics.DrawRectangle(Pens.Black, regionRect);
// create the second rectangle and draw it to the screen in red.
RectangleF xorRect = new RectangleF(90, 30, 100, 100);
e.Graphics.DrawRectangle(Pens.Red,
Rectangle.Round(xorRect));
// Create a region using the first rectangle.
Region myRegion = new Region(regionRect);
// Get the area of overlap for myRegion when combined with
// complementRect.
myRegion.Xor(xorRect);
// Fill the Xor area of myRegion with blue.
SolidBrush myBrush = new SolidBrush(Color.Blue);
e.Graphics.FillRegion(myBrush, myRegion);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Region.Xor(System.Drawing.Rectangle)">
      <summary>
        <para>Updates this <see cref="T:System.Drawing.Region"/> object to the union minus the intersection of itself with the specified <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.Rectangle"/> structure to <see langword="XOR"/> with this <see cref="T:System.Drawing.Region"/> object.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="Region.Xor Method (RectangleF)"/>.</para>
      </example>
    </member>

    <member name="T:System.Drawing.SizeConverter">
      <summary>
        <para>The <see cref="T:System.Drawing.SizeConverter"/> class is used to convert from one data type to another. Access this class through the <see langword="TypeDescriptor"/> object.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.SizeConverter"/> object.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Determines whether this converter can convert an object in the specified source type to the native type of the converter.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="sourceType">
        The type you want to convert from.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this object can perform the conversion.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</para>
      </summary>
      <param name="context">
        An <see langword="ITypeDescriptorContext"/> that provides a format context.
      </param>
      <param name="destinationType">
        A <see cref="T:System.Type"/> that represents the type you want to convert to.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.</para>
      </returns>
      <remarks>
        <para>The <paramref name="context"/> parameter can be used to extract additional information about the environment this converter is being invoked from. This can be a null reference (<see langword="Nothing"/> in Visual Basic), so always check. Also, properties on the context object can return a null reference (<see langword="Nothing"/>).</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para>Converts the specified object to the converter&apos;s native type.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="culture">
        An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.
      </param>
      <param name="value">
        The object to convert.
      </param>
      <returns>
        <para>The converted object. This will pass an exception if the conversion cannot be performed.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the specified object to the specified type.</para>
      </summary>
      <param name="context">
        A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null"/>, so you should always check. Also, properties on the context object may also return <see langword="null"/>.
      </param>
      <param name="culture">
        An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.
      </param>
      <param name="value">
        The object to convert.
      </param>
      <param name="destinationType">
        The type to convert the object to.
      </param>
      <param name="arguments">
        An optional array of arguments to use when doing the conversion. The number and content of these arguments is dependent on the implementer of the value formatter.
      </param>
      <returns>
        <para>The converted object.</para>
      </returns>
      <remarks>
        <para>The most common type conversion is to and from a string type. The default implementation calls the <see langword="ToString"/> method of the object if the object is valid and if the destination type is string. If this method cannot convert the specified object to the destination type, it passes a <see cref="T:System.NotSupportedException"/> exception.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>
        <para>Creates an object of this type by using a specified set of property values for the object. This is useful for creating nonchangeable objects that have changeable properties.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <param name="propertyValues">
        A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the <see langword="GetProperties"/> object.
      </param>
      <returns>
        <para>The newly created object, or null if the object could not be created. The default implementation returns null.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Determines whether changing a value on this object should require a call to the <see langword="CreateInstance"/> method to create a new value.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the <see langword="CreateInstance"/> object should be called when a change is made to one or more properties of this object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
        <para>Retrieves the set of properties for this type. By default, a type does not have any properties to return. An easy implementation of this method can call the <see langword="TypeDescriptor.GetProperties"/> method for the correct data type.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <param name="value">
        The value of the object to get the properties for.
      </param>
      <param name="attributes">
        An array of <see langword="MemberAttribute"/> objects that describe the properties.
      </param>
      <returns>
        <para>The set of properties that should be exposed for this data type. If no properties should be exposed, this may return <see langword="null"/>. The default implementation always returns <see langword="null"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Determines whether this object supports properties. By default, this is <see langword="false"/>.</para>
      </summary>
      <param name="context">
        A type descriptor through which additional context can be provided.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the <see langword="GetProperties"/> object should be called to find the properties of this object.</para>
      </returns>
    </member>

    <member name="T:System.Drawing.SolidBrush">
      <summary>
        <para>Defines a brush of a single color. Brushes are used to fill graphics shapes, such as rectangles, ellipses, pies, polygons, and paths. This class cannot be inherited.</para>
      </summary>
      <remarks>
        <para>This class inherits from the <see cref="T:System.Drawing.Brush"/> class.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.SolidBrush.#ctor(System.Drawing.Color)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.SolidBrush"/> object of the specified color.</para>
      </summary>
      <param name="color">
        A <see cref="T:System.Drawing.Color"/> structure that represents the color of this brush.
      </param>
    </member>

    <member name="M:System.Drawing.SolidBrush.Clone">
      <summary>
        <para>Creates an exact copy of this <see cref="T:System.Drawing.SolidBrush"/> object.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.SolidBrush"/> object that this method creates.</para>
      </returns>
    </member>

    <member name="P:System.Drawing.SolidBrush.Color">
      <summary>
        <para>Gets or sets the color of this <see cref="T:System.Drawing.SolidBrush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that represents the color of this brush.</para>
      </value>
    </member>

    <member name="T:System.Drawing.StringFormat">
      <summary>
        <para>Encapsulates text layout information (such as alignment and line spacing), display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features. This class cannot be inherited.</para>
      </summary>
      <remarks>
        <para>Many common formats are provided through the <see cref="T:System.Drawing.StringFormatFlags"/> enumeration. <see cref="T:System.Drawing.StringFormat"/> objects can be changed.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.StringFormat.#ctor">
      <overload>
        Initializes a new <see cref="T:System.Drawing.StringFormat"/> object.
      </overload>
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.StringFormat.#ctor(System.Drawing.StringFormatFlags)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.StringFormat"/> object with the specified <see cref="T:System.Drawing.StringFormatFlags"/> enumeration.</para>
      </summary>
      <param name="options">
        The <see cref="T:System.Drawing.StringFormatFlags"/> enumeration for the new <see cref="T:System.Drawing.StringFormat"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.StringFormat.#ctor(System.Drawing.StringFormatFlags,System.Int32)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.StringFormat"/> object with the specified <see cref="T:System.Drawing.StringFormatFlags"/> enumeration and language.</para>
      </summary>
      <param name="options">
        The <see cref="T:System.Drawing.StringFormatFlags"/> enumeration for the new <see cref="T:System.Drawing.StringFormat"/> object.
      </param>
      <param name="language">
        A value that indicates the language of the text.
      </param>
    </member>

    <member name="M:System.Drawing.StringFormat.#ctor(System.Drawing.StringFormat)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.StringFormat"/> object from the specified existing <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <param name="format">
        The <see cref="T:System.Drawing.StringFormat"/> object from which to initialize the new <see cref="T:System.Drawing.StringFormat"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.StringFormat.Clone">
      <summary>
        <para>Creates an exact copy of this <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.StringFormat"/> object this method creates.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.StringFormat.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.StringFormat"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.StringFormat.GetTabStops(System.Single@)">
      <summary>
        <para>Gets the tab stops for this <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <param name="firstTabOffset">
        The number of spaces between the beginning of a text line and the first tab stop.
      </param>
      <returns>
        <para>An array of distances (in number of spaces) between tab stops.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Sets the tab stops of the <see cref="T:System.Drawing.StringFormat"/>.</term>
          </item>
          <item>
            <term>Draws the string and the layout rectangle. Note that the string contains tabs. The tab settings of the <see cref="T:System.Drawing.StringFormat"/> specify the offsets of the tabbed text.</term>
          </item>
          <item>
            <term>Gets the tab stops and uses or inspects the values.</term>
          </item>
        </list>
        <code lang="VB">Public Sub GetSetTabStopsExample(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
&apos; Tools used for drawing, painting.
Dim redPen As New Pen(Color.FromArgb(255, 255, 0, 0))
Dim blueBrush As New SolidBrush(Color.FromArgb(255, 0, 0, 255))
&apos; Layout and format for text.
Dim myFont As New Font(&quot;Times New Roman&quot;, 12)
Dim myStringFormat As New StringFormat()
Dim enclosingRectangle As New Rectangle(20, 20, 500, 100)
Dim tabStops As Single() =  {150F, 100F, 100F}
&apos; Text with tabbed columns.
Dim myString As String = &quot;Name&quot; &amp; ControlChars.Tab &amp; &quot;Tab 1&quot; _
&amp; ControlChars.Tab &amp; &quot;Tab 2&quot; &amp; ControlChars.Tab &amp; &quot;Tab 3&quot; _
&amp; ControlChars.Cr &amp; &quot;George Brown&quot; &amp; ControlChars.Tab &amp; &quot;One&quot; _
&amp; ControlChars.Tab &amp; &quot;Two&quot; &amp; ControlChars.Tab &amp; &quot;Three&quot;
&apos; Set the tab stops, paint the text specified by myString,the
&apos;  and draw rectangle that encloses the text.
myStringFormat.SetTabStops(0F, tabStops)
g.DrawString(myString, myFont, blueBrush, _
RectangleF.op_implicit(enclosingRectangle), myStringFormat)
g.DrawRectangle(redPen, enclosingRectangle)
&apos; Get the tab stops.
Dim firstTabOffset As Single
Dim tabStopsObtained As Single() = _
myStringFormat.GetTabStops(firstTabOffset)
Dim j As Integer
For j = 0 To tabStopsObtained.Length - 1
&apos; Inspect or use the value in tabStopsObtained[j].
Console.WriteLine(ControlChars.Cr &amp; &quot;  Tab stop {0} = {1}&quot;, _
j, tabStopsObtained(j))
Next j
End Sub
        </code>
        <code lang="C#">public void GetSetTabStopsExample(PaintEventArgs e)
{
Graphics     g = e.Graphics;
// Tools used for drawing, painting.
Pen          redPen = new Pen(Color.FromArgb(255, 255, 0, 0));
SolidBrush   blueBrush = new SolidBrush(Color.FromArgb(255, 0, 0, 255));
// Layout and format for text.
Font         myFont = new Font(&quot;Times New Roman&quot;, 12);
StringFormat myStringFormat = new StringFormat();
Rectangle    enclosingRectangle = new Rectangle(20, 20, 500, 100);
float[]      tabStops = {150.0f, 100.0f, 100.0f};
// Text with tabbed columns.
string       myString =
&quot;Name\tTab 1\tTab 2\tTab 3\nGeorge Brown\tOne\tTwo\tThree&quot;;
// Set the tab stops, paint the text specified by myString, and draw the
// rectangle that encloses the text.
myStringFormat.SetTabStops(0.0f, tabStops);
g.DrawString(myString, myFont, blueBrush,
enclosingRectangle, myStringFormat);
g.DrawRectangle(redPen, enclosingRectangle);
// Get the tab stops.
float   firstTabOffset;
float[] tabStopsObtained = myStringFormat.GetTabStops(out firstTabOffset);
for(int j = 0; j &lt; tabStopsObtained.Length; j++)
{
// Inspect or use the value in tabStopsObtained[j].
Console.WriteLine(&quot;\n  Tab stop {0} = {1}&quot;, j, tabStopsObtained[j]);
}
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.StringFormat.SetDigitSubstitution(System.Int32,System.Drawing.StringDigitSubstitute)">
      <summary>
        <para>Specifies the language and method to be used when local digits are substituted for western digits.</para>
      </summary>
      <param name="language">
        A National Language Support (NLS) language identifier that identifies the language that will be used when local digits are substituted for western digits. You can pass the <see langword="LCID"/> property of a <see langword="CultureInfo"/> object as the NLS language identifier. For example, suppose you create a <see langword="CultureInfo"/> object by passing the string "ar-EG" to a <see langword="CultureInfo"/> constructor. If you pass the LCID property of that <see langword="CultureInfo"/> object along with StringDigitSubstitue.Traditional to the <see langword="SetDigitSubstitution"/> method, then Arabic-Indic digits will be substituted for western digits at display time.
      </param>
      <param name="substitute">
        An element of the <see cref="T:System.Drawing.StringDigitSubstitute"/> enumeration that specifies how digits are displayed.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Sets, for the <see cref="T:System.Drawing.StringFormat"/>, the language to be used and the substitution method to be used.</term>
          </item>
          <item>
            <term>Draws the string.</term>
          </item>
          <item>
            <term>Repeats the above two steps for two different languages (Arabic and Thai).</term>
          </item>
        </list>
        <para>The National substitution method and Traditional substitution method are demonstrated for each of the two languages. The National method displays digits according to the official national language of the user&apos;s locale. The Traditional method displays digits according to the user&apos;s native script or language, which may be different from the official national language.</para>
        <code lang="VB">Public Sub SetDigitSubExample(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
Dim blueBrush As New SolidBrush(Color.FromArgb(255, 0, 0, 255))
Dim myFont As New Font(&quot;Courier New&quot;, 12)
Dim myStringFormat As New StringFormat()
Dim myString As String = &quot;0 1 2 3 4 5 6 7 8 9&quot;
&apos; Arabic (0x0C01) digits.
&apos; Use National substitution method.
myStringFormat.SetDigitSubstitution(&amp;HC01, _
StringDigitSubstitute.National)
g.DrawString(&quot;Arabic:&quot; &amp; ControlChars.Cr &amp; _
&quot;Method of substitution = National:     &quot; &amp; myString, _
myFont, blueBrush, New PointF(10F, 20F), myStringFormat)
&apos; Use Traditional substitution method.
myStringFormat.SetDigitSubstitution(&amp;HC01, _
StringDigitSubstitute.Traditional)
g.DrawString(&quot;Method of substitution = Traditional:  &quot; _
&amp; myString, myFont, blueBrush, New PointF(10F, 55F), _
myStringFormat)
&apos; Thai (0x041E) digits.
&apos; Use National substitution method.
myStringFormat.SetDigitSubstitution(&amp;H41E, _
StringDigitSubstitute.National)
g.DrawString(&quot;Thai:&quot; &amp; ControlChars.Cr &amp; _
&quot;Method of substitution = National:     &quot; &amp; myString, _
myFont, blueBrush, New PointF(10F, 85F), myStringFormat)
&apos; Use Traditional substitution method.
myStringFormat.SetDigitSubstitution(&amp;H41E, _
StringDigitSubstitute.Traditional)
g.DrawString(&quot;Method of substitution = Traditional:  &quot; _
&amp; myString, myFont, blueBrush, New PointF(10F, 120F), _
myStringFormat)
End Sub
        </code>
        <code lang="C#">public void SetDigitSubExample(PaintEventArgs e)
{
Graphics     g = e.Graphics;
SolidBrush   blueBrush = new SolidBrush(Color.FromArgb(255, 0, 0, 255));
Font         myFont = new Font(&quot;Courier New&quot;, 12);
StringFormat myStringFormat = new StringFormat();
string       myString = &quot;0 1 2 3 4 5 6 7 8 9&quot;;
//
// Arabic (0x0C01) digits.
//
// Use National substitution method.
myStringFormat.SetDigitSubstitution(0x0C01,
StringDigitSubstitute.National);
g.DrawString(
&quot;Arabic:\nMethod of substitution = National:     &quot; + myString,
myFont, blueBrush, new PointF(10.0f, 20.0f), myStringFormat);
// Use Traditional substitution method.
myStringFormat.SetDigitSubstitution(0x0C01,
StringDigitSubstitute.Traditional);
g.DrawString(
&quot;Method of substitution = Traditional:  &quot; + myString,
myFont, blueBrush, new PointF(10.0f, 55.0f), myStringFormat);
//
// Thai (0x041E) digits.
//
// Use National substitution method.
myStringFormat.SetDigitSubstitution(0x041E,
StringDigitSubstitute.National);
g.DrawString(
&quot;Thai:\nMethod of substitution = National:     &quot; + myString,
myFont, blueBrush, new PointF(10.0f, 85.0f), myStringFormat);
// Use Traditional substitution method.
myStringFormat.SetDigitSubstitution(0x041E,
StringDigitSubstitute.Traditional);
g.DrawString(
&quot;Method of substitution = Traditional:  &quot; + myString,
myFont, blueBrush, new PointF(10.0f, 120.0f), myStringFormat);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.StringFormat.SetMeasurableCharacterRanges(System.Drawing.CharacterRange[])">
      <summary>
        <para>Specifies an array of <see cref="T:System.Drawing.CharacterRange"/> structures that represent the ranges of characters measured by a call to the <see langword="Graphics.MeasureCharacterRanges"/> method.</para>
      </summary>
      <param name="ranges">
        An array of <see cref="T:System.Drawing.CharacterRange"/> structures that specifies the ranges of characters measured by a call to the <see langword="Graphics.MeasureCharacterRanges"/> method.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Sets the character ranges of the <see cref="T:System.Drawing.StringFormat"/>.</term>
          </item>
          <item>
            <term>Measures the character ranges for a given string and layout rectangle.</term>
          </item>
          <item>
            <term>Draws the string and layout rectangle.</term>
          </item>
          <item>
            <term>Paints the regions. Each <see cref="T:System.Drawing.Region"/> specifies an area that is occupied by a range of characters. The values in the regions are set when the character ranges are measured by the <see langword="Graphics.MeasureCharacterRanges"/> method.</term>
          </item>
          <item>
            <term>Repeats the first four steps, but includes trailing spaces in the measurement of each character range.</term>
          </item>
          <item>
            <term>Clears the format flags of the <see cref="T:System.Drawing.StringFormat"/> so that trailing spaces are not included in the measurement of each character range.</term>
          </item>
          <item>
            <term>Repeats the first four steps, but uses a different layout rectangle just to demonstrate that the layout rectangle affects the measurements of the character ranges. The size of the font will also affect the measurement.</term>
          </item>
        </list>
        <code lang="VB">Public Sub SetMeasCharRangesExample(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
Dim redBrush As New SolidBrush(Color.FromArgb(50, 255, 0, 0))
&apos; Layout rectangles, font, and string format used for
&apos; displaying string.
Dim layoutRectA As New Rectangle(20, 20, 165, 80)
Dim layoutRectB As New Rectangle(20, 110, 165, 80)
Dim layoutRectC As New Rectangle(20, 200, 240, 80)
Dim tnrFont As New Font(&quot;Times New Roman&quot;, 16)
Dim strFormat As New StringFormat()
&apos; Ranges of character positions within a string.
Dim charRanges As CharacterRange() =  {New CharacterRange(3, 5), _
New CharacterRange(15, 2), New CharacterRange(30, 15)}
&apos; Each region specifies the area occupied by the characters within
&apos; a range of positions. The values are obtained by using a method
&apos; that measures the character ranges.
Dim charRegions(charRanges.Length) As [Region]
&apos; String to be displayed.
Dim str As String = _
&quot;The quick, brown fox easily jumps over the lazy dog.&quot;
&apos; Set the char ranges for the string format.
strFormat.SetMeasurableCharacterRanges(charRanges)
Dim i As Byte &apos; loop counter (unsigned 8-bit integer)
&apos; Measure the char ranges for a given string and layout rectangle.
&apos; Each area occupied by the characters in a range is stored as a
&apos; region. then draw the string and layout rectangle and paint the
&apos; regions.
charRegions = g.MeasureCharacterRanges(str, tnrFont, _
RectangleF.op_implicit(layoutRectA), strFormat)
g.DrawString(str, tnrFont, Brushes.Blue, _
RectangleF.op_implicit(layoutRectA), strFormat)
g.DrawRectangle(Pens.Black, layoutRectA)
For i = 0 To charRegions.Length - 1
g.FillRegion(redBrush, charRegions(i)) &apos; paint the regions
Next i
&apos; Repeat the above steps, but include trailing spaces in the char
&apos; range measurement by setting the appropriate string format flag.
strFormat.FormatFlags = StringFormatFlags.MeasureTrailingSpaces
charRegions = g.MeasureCharacterRanges(str, tnrFont, _
RectangleF.op_implicit(layoutRectB), strFormat)
g.DrawString(str, tnrFont, Brushes.Blue, _
RectangleF.op_implicit(layoutRectB), strFormat)
g.DrawRectangle(Pens.Black, layoutRectB)
For i = 0 To charRegions.Length - 1
g.FillRegion(redBrush, charRegions(i)) &apos;Paint the regions
Next i
strFormat.FormatFlags = 0 &apos; clear all the format flags
&apos; Repeat the steps, but use a different layout rectangle. The
&apos; dimensions of the layout rectangle and the size of the font both
&apos; affect the character range measurement.
charRegions = g.MeasureCharacterRanges(str, tnrFont, _
RectangleF.op_implicit(layoutRectC), strFormat)
g.DrawString(str, tnrFont, Brushes.Blue, _
RectangleF.op_implicit(layoutRectC), strFormat)
g.DrawRectangle(Pens.Black, layoutRectC)
For i = 0 To charRegions.Length - 1
g.FillRegion(redBrush, charRegions(i)) &apos; Paint the regions
Next i
End Sub
        </code>
        <code lang="C#">public void SetMeasCharRangesExample(PaintEventArgs e)
{
Graphics     g = e.Graphics;
SolidBrush   redBrush = new SolidBrush(Color.FromArgb(50, 255, 0, 0));
// Layout rectangles, font, and string format used for displaying string.
Rectangle    layoutRectA = new Rectangle(20, 20, 165, 80);
Rectangle    layoutRectB = new Rectangle(20, 110, 165, 80);
Rectangle    layoutRectC = new Rectangle(20, 200, 240, 80);
Font         tnrFont = new Font(&quot;Times New Roman&quot;, 16);
StringFormat strFormat = new StringFormat();
// Ranges of character positions within a string.
CharacterRange[] charRanges = { new CharacterRange(3, 5),
new CharacterRange(15, 2),
new CharacterRange(30, 15)
};
// Each region specifies the area occupied by the characters within a
// range of positions. the values are obtained by using a method that
// measures the character ranges.
Region[]     charRegions = new Region[charRanges.Length];
// String to be displayed.
string  str =
&quot;The quick, brown fox easily jumps over the lazy dog.&quot;;
// Set the char ranges for the string format.
strFormat.SetMeasurableCharacterRanges(charRanges);
byte  i;    // loop counter (unsigned 8-bit integer)
// Measure the char ranges for a given string and layout rectangle. Each
// area occupied by the characters in a range is stored as a region. Then
// draw the string and layout rectangle, and paint the regions.
charRegions = g.MeasureCharacterRanges(str, tnrFont,
layoutRectA, strFormat);
g.DrawString(str, tnrFont, Brushes.Blue, layoutRectA, strFormat );
g.DrawRectangle(Pens.Black, layoutRectA);
for ( i = 0; i &lt; charRegions.Length; i++ )
g.FillRegion(redBrush, charRegions[i]);   // paint the regions
//
// Repeat the above steps, but include trailing spaces in the char
// range measurement by setting the appropriate string format flag.
strFormat.FormatFlags = StringFormatFlags.MeasureTrailingSpaces;
charRegions = g.MeasureCharacterRanges(str, tnrFont,
layoutRectB, strFormat);
g.DrawString(str, tnrFont, Brushes.Blue, layoutRectB, strFormat );
g.DrawRectangle(Pens.Black, layoutRectB);
for ( i = 0; i &lt; charRegions.Length; i++ )
g.FillRegion(redBrush, charRegions[i]);   // paint the regions
strFormat.FormatFlags = 0;                   // clear all the format flags
//
// Repeat the steps, but use a different layout rectangle. the dimensions
// of the layout rectangle and the size of the font both affect the
// character range measurement.
charRegions = g.MeasureCharacterRanges(str, tnrFont,
layoutRectC, strFormat);
g.DrawString(str, tnrFont, Brushes.Blue, layoutRectC, strFormat );
g.DrawRectangle(Pens.Black, layoutRectC);
for ( i = 0; i &lt; charRegions.Length; i++ )
g.FillRegion(redBrush, charRegions[i]);   // paint the regions
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.StringFormat.SetTabStops(System.Single,System.Single[])">
      <summary>
        <para>Sets tab stops for this <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <param name="firstTabOffset">
        The number of spaces between the beginning of a line of text and the first tab stop.
      </param>
      <param name="tabStops">
        An array of distances (in number of spaces) between tab stops.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Sets the tab stops of the <see cref="T:System.Drawing.StringFormat"/>.</term>
          </item>
          <item>
            <term>Draws the string and the layout rectangle. Note that the string contains tabs. The tab settings of the <see cref="T:System.Drawing.StringFormat"/> specify the offsets of the tabbed text.</term>
          </item>
          <item>
            <term>Gets the tab stops and uses or inspects the values.</term>
          </item>
        </list>
        <code lang="VB">Public Sub GetSetTabStopsExample(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
&apos; Tools used for drawing, painting.
Dim redPen As New Pen(Color.FromArgb(255, 255, 0, 0))
Dim blueBrush As New SolidBrush(Color.FromArgb(255, 0, 0, 255))
&apos; Layout and format for text.
Dim myFont As New Font(&quot;Times New Roman&quot;, 12)
Dim myStringFormat As New StringFormat()
Dim enclosingRectangle As New Rectangle(20, 20, 500, 100)
Dim tabStops As Single() =  {150F, 100F, 100F}
&apos; Text with tabbed columns.
Dim myString As String = &quot;Name&quot; &amp; ControlChars.Tab &amp; &quot;Tab 1&quot; _
&amp; ControlChars.Tab &amp; &quot;Tab 2&quot; &amp; ControlChars.Tab &amp; &quot;Tab 3&quot; _
&amp; ControlChars.Cr &amp; &quot;George Brown&quot; &amp; ControlChars.Tab &amp; &quot;One&quot; _
&amp; ControlChars.Tab &amp; &quot;Two&quot; &amp; ControlChars.Tab &amp; &quot;Three&quot;
&apos; Set the tab stops, paint the text specified by myString,
&apos;  and draw rectangle that encloses the text.
myStringFormat.SetTabStops(0F, tabStops)
g.DrawString(myString, myFont, blueBrush, _
RectangleF.op_implicit(enclosingRectangle), myStringFormat)
g.DrawRectangle(redPen, enclosingRectangle)
&apos; Get the tab stops.
Dim firstTabOffset As Single
Dim tabStopsObtained As Single() = _
myStringFormat.GetTabStops(firstTabOffset)
Dim j As Integer
For j = 0 To tabStopsObtained.Length - 1
&apos; Inspect or use the value in tabStopsObtained[j].
Console.WriteLine(ControlChars.Cr &amp; &quot;  Tab stop {0} = {1}&quot;, _
j, tabStopsObtained(j))
Next j
End Sub
        </code>
        <code lang="C#">public void GetSetTabStopsExample(PaintEventArgs e)
{
Graphics     g = e.Graphics;
// Tools used for drawing, painting.
Pen          redPen = new Pen(Color.FromArgb(255, 255, 0, 0));
SolidBrush   blueBrush = new SolidBrush(Color.FromArgb(255, 0, 0, 255));
// Layout and format for text.
Font         myFont = new Font(&quot;Times New Roman&quot;, 12);
StringFormat myStringFormat = new StringFormat();
Rectangle    enclosingRectangle = new Rectangle(20, 20, 500, 100);
float[]      tabStops = {150.0f, 100.0f, 100.0f};
// Text with tabbed columns.
string       myString =
&quot;Name\tTab 1\tTab 2\tTab 3\nGeorge Brown\tOne\tTwo\tThree&quot;;
// Set the tab stops, paint the text specified by myString, draw the
// rectangle that encloses the text.
myStringFormat.SetTabStops(0.0f, tabStops);
g.DrawString(myString, myFont, blueBrush,
enclosingRectangle, myStringFormat);
g.DrawRectangle(redPen, enclosingRectangle);
// Get the tab stops.
float   firstTabOffset;
float[] tabStopsObtained = myStringFormat.GetTabStops(out firstTabOffset);
for(int j = 0; j &lt; tabStopsObtained.Length; j++)
{
// Inspect or use the value in tabStopsObtained[j].
Console.WriteLine(&quot;\n  Tab stop {0} = {1}&quot;, j, tabStopsObtained[j]);
}
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.StringFormat.ToString">
      <summary>
        <para>Converts this <see cref="T:System.Drawing.StringFormat"/> object to a human-readable string.</para>
      </summary>
      <returns>
        <para>A string representation of this <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Converts a <see cref="T:System.Drawing.StringFormat"/> object to a string.</term>
          </item>
          <item>
            <term>Draws the string.</term>
          </item>
          <item>
            <term>Changes some properties in the <see cref="T:System.Drawing.StringFormat"/> object.</term>
          </item>
          <item>
            <term>Draws the string. The string will be different because the properties of the <see cref="T:System.Drawing.StringFormat"/> object have changed.</term>
          </item>
        </list>
        <code lang="VB">Public Sub ToStringExample(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
Dim blueBrush As New SolidBrush(Color.FromArgb(255, 0, 0, 255))
Dim myFont As New Font(&quot;Times New Roman&quot;, 14)
Dim myStringFormat As New StringFormat()
&apos; String variable to hold the values of the StringFormat object.
Dim strFmtString As String
&apos; Convert the string format object to a string (only certain
&apos; information in the object is converted) and display the string.
strFmtString = myStringFormat.ToString()
g.DrawString(&quot;Before changing properties:   &quot;, myFont, blueBrush, _
20, 40, myStringFormat)
&apos; Change some properties of the string format.
myStringFormat.Trimming = StringTrimming.None
myStringFormat.FormatFlags = StringFormatFlags.NoWrap Or _
StringFormatFlags.NoClip
&apos; Convert the string format object to a string and display the
&apos; string. The string will be different because the properties of
&apos; the string format have changed.
strFmtString = myStringFormat.ToString()
g.DrawString(&quot;After changing properties:   &quot;, myFont, blueBrush, _
20, 70, myStringFormat)
End Sub
        </code>
        <code lang="C#">public void ToStringExample(PaintEventArgs e)
{
Graphics     g = e.Graphics;
SolidBrush   blueBrush = new SolidBrush(Color.FromArgb(255, 0, 0, 255));
Font         myFont = new Font(&quot;Times New Roman&quot;, 14);
StringFormat myStringFormat = new StringFormat();
// String variable to hold the values of the StringFormat object.
string    strFmtString;
// Convert the string format object to a string (only certain information
// in the object is converted) and display the string.
strFmtString = myStringFormat.ToString();
g.DrawString(&quot;Before changing properties:   &quot; + myStringFormat,
myFont, blueBrush, 20, 40);
// Change some properties of the string format
myStringFormat.Trimming = StringTrimming.None;
myStringFormat.FormatFlags =   StringFormatFlags.NoWrap
| StringFormatFlags.NoClip;
// Convert the string format object to a string and display the string.
// The string will be different because the properties of the string
// format have changed.
strFmtString = myStringFormat.ToString();
g.DrawString(&quot;After changing properties:   &quot; + myStringFormat,
myFont, blueBrush, 20, 70);
}
        </code>
      </example>
      <remarks>
        <para>Only the value of the FormatFlags property is converted.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.StringFormat.Alignment">
      <summary>
        <para>Gets or sets text alignment information.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.StringAlignment"/> enumeration that specifies text alignment information.</para>
      </value>
    </member>

    <member name="P:System.Drawing.StringFormat.DigitSubstitutionLanguage">
      <summary>
        <para>Gets or sets the language that is used when local digits are substituted for western digits.</para>
      </summary>
      <value>
        <para>A National Language Support (NLS) language identifier that identifies the language that will be used when local digits are substituted for western digits. You can pass the <see langword="LCID"/> property of a <see langword="CultureInfo"/> object as the NLS language identifier. For example, suppose you create a <see langword="CultureInfo"/> object by passing the string "ar-EG" to a <see langword="CultureInfo"/> constructor. If you pass the LCID property of that <see langword="CultureInfo"/> object along with StringDigitSubstitue.Traditional to the <see langword="SetDigitSubstitution"/> method, then Arabic-Indic digits will be substituted for western digits at display time.</para>
      </value>
    </member>

    <member name="P:System.Drawing.StringFormat.DigitSubstitutionMethod">
      <summary>
        <para>Gets or sets the method to be used for digit substitution.</para>
      </summary>
      <value>
        <para>Holds a <see cref="T:System.Drawing.StringDigitSubstitute"/> enumeration value that specifies how to substitute characters in a string that cannot be displayed because they are not supported by the current font.</para>
      </value>
    </member>

    <member name="P:System.Drawing.StringFormat.FormatFlags">
      <summary>
        <para>Gets or sets a <see cref="T:System.Drawing.StringFormatFlags"/> enumeration that contains formatting information.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.StringFormatFlags"/> enumeration that contains formatting information.</para>
      </value>
    </member>

    <member name="P:System.Drawing.StringFormat.GenericDefault">
      <summary>
        <para>Gets a generic default <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <value>
        <para>The generic default <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.StringFormat.GenericTypographic">
      <summary>
        <para>Gets a generic typographic <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <value>
        <para>A generic typographic <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.StringFormat.HotkeyPrefix">
      <summary>
        <para>Gets or sets the <see cref="T:System.Drawing.Text.HotkeyPrefix"/> object for this <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <value>
        <para>The <see cref="T:System.Drawing.Text.HotkeyPrefix"/> object for this <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </value>
      <remarks>
        <para>In a graphical user interface, a hot key is the underlined letter in a word (usually combined with another key, such as the Alt key) that you can press on the keyboard to activate the functionality that the word represents.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.StringFormat.LineAlignment">
      <summary>
        <para>Gets or sets the line alignment.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.StringAlignment"/> enumeration that represents the line alignment.</para>
      </value>
    </member>

    <member name="P:System.Drawing.StringFormat.Trimming">
      <summary>
        <para>Gets or sets the <see cref="T:System.Drawing.StringTrimming"/> enumeration for this <see cref="T:System.Drawing.StringFormat"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.StringTrimming"/> enumeration that indicates how text drawn with this <see cref="T:System.Drawing.StringFormat"/> object is trimmed when it exceeds the edges of the layout rectangle.</para>
      </value>
    </member>

    <member name="T:System.Drawing.SystemBrushes">
      <summary>
        <para>Each property of the <see cref="T:System.Drawing.SystemBrushes"/> class is a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of a Windows display element.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.SystemBrushes.FromSystemColor(System.Drawing.Color)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Brush"/> object from the specified <see cref="T:System.Drawing.Color"/> color.</para>
      </summary>
      <param name="c">
        The <see cref="T:System.Drawing.Color"/> structure from which to create the <see cref="T:System.Drawing.Brush"/> object.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Brush"/> object this method creates.</para>
      </returns>
    </member>

    <member name="P:System.Drawing.SystemBrushes.ActiveBorder">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the active window&apos;s border.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the active window&apos;s border.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.ActiveCaption">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the background of the active window&apos;s title bar.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the background of the active window&apos;s title bar.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.ActiveCaptionText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the text in the active window&apos;s title bar.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the background of the active window&apos;s title bar.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.AppWorkspace">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the application workspace. The application workspace is the area in a multiple-document view that is not being occupied by documents.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the application workspace.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.Control">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the face color of a 3-D element.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the face color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.ControlDark">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the shadow color of a 3-D element. The shadow color is applied to parts of a 3-D element that face away from the light source.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the shadow color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.ControlDarkDark">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the dark shadow color of a 3-D element. The dark shadow color is applied to the parts of a 3-D element that are the darkest color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the dark shadow color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.ControlLight">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the light color of a 3-D element. The light color is applied to parts of a 3-D element that face the light source.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the light color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.ControlLightLight">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the highlight color of a 3-D element. The highlight color is applied to the parts of a 3-D element that are the lightest color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the highlight color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.ControlText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of text in a 3-D element.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of text in a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.Desktop">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the desktop.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the desktop.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.Highlight">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the background of selected items. This includes selected menu items as well as selected text. For example, the brush may be the color used for the background of selected items in a list box.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the background of selected items.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.HighlightText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the text of selected items. This includes selected menu items as well as selected text. For example, the brush may be the color used for the text of selected items in a list box.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the text of selected items.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.HotTrack">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color used to designate a hot-tracked item. Single-clicking a hot-tracked item executes the item.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color used to designate a hot-tracked item.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.InactiveBorder">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of an inactive window&apos;s border.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of an inactive window&apos;s border.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.InactiveCaption">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the background of an inactive window&apos;s title bar.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the background of an inactive window&apos;s title bar.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.Info">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the background of a ToolTip.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the background of a ToolTip.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.Menu">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of a menu&apos;s background.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of a menu&apos;s background.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.ScrollBar">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the background of a scroll bar.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the background of a scroll bar.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.Window">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the background in the client area of a window.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the background in the client area of a window.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemBrushes.WindowText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the text in the client area of a window.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SolidBrush"/> object that is the color of the text in the client area of a window.</para>
      </value>
    </member>

    <member name="T:System.Drawing.SystemColors">
      <summary>
        <para>Each property of the <see cref="T:System.Drawing.SystemColors"/> class is a <see cref="T:System.Drawing.Color"/> structure that is the color of a Windows display element.</para>
      </summary>
      <remarks>
        <para>Better performance is achieved through the use of the <see cref="T:System.Drawing.SystemPens"/> object or <see cref="T:System.Drawing.SystemBrushes"/> object rather than creating a new pen or brush based on a value from the <see cref="T:System.Drawing.SystemColors"/> object. For example, use SystemBrushes.Control because it is a brush that already exists, whereas new SolidBrush(SystemColors.Control) creates a new brush.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.SystemColors.ActiveBorder">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of the active window&apos;s border.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the active window&apos;s border.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.ActiveCaption">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of the background of the active window&apos;s title bar.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the active window&apos;s title bar.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.ActiveCaptionText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of the text in the active window&apos;s title bar.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the text in the active window&apos;s title bar.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.AppWorkspace">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of the application workspace. The application workspace is the area in a multiple-document view that is not being occupied by documents.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the application workspace.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.Control">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the face color of a 3-D element.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the face color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.ControlDark">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the shadow color of a 3-D element. The shadow color is applied to parts of a 3-D element that face away from the light source.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the shadow color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.ControlDarkDark">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the dark shadow color of a 3-D element. The dark shadow color is applied to the parts of a 3-D element that are the darkest color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the dark shadow color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.ControlLight">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the light color of a 3-D element. The light color is applied to parts of a 3-D element that face the light source.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the light color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.ControlLightLight">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the highlight color of a 3-D element. The highlight color is applied to the parts of a 3-D element that are the lightest color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the highlight color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.ControlText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of text in a 3-D element.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of text in a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.Desktop">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of the desktop.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the desktop.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.GrayText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of dimmed text. Items in a list that are disabled are displayed in dimmed text.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of dimmed text.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.Highlight">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of the background of selected items. This includes selected menu items as well as selected text. For example, the <see cref="T:System.Drawing.Color"/> structure may be the color used for the background of selected items in a list box.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the background of selected items.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.HighlightText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of the text of selected items. For example, the <see cref="T:System.Drawing.Color"/> structure may be the color used for the text of selected items in a list box.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the text of selected items.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.HotTrack">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color used to designate a hot-tracked item. Single-clicking a hot-tracked item executes the item.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color used to designate a hot-tracked item.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.InactiveBorder">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of an inactive window&apos;s border.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of an inactive window&apos;s border.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.InactiveCaption">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of the background of an inactive window&apos;s title bar.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the background of an inactive window&apos;s title bar.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.InactiveCaptionText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of the text in an inactive window&apos;s title bar.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the text in an inactive window&apos;s title bar.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.Info">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of the background of a ToolTip.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the background of a ToolTip.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.InfoText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of the text of a ToolTip.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the text of a ToolTip.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.Menu">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of a menu&apos;s background.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of a menu&apos;s background.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.MenuText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of a menu&apos;s text.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of a menu&apos;s text.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.ScrollBar">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of the background of a scroll bar.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the background of a scroll bar.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.Window">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of the background in the client area of a window.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of the background in the client area of a window.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.WindowFrame">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that is the color of a window frame.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that is the color of a window frame.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemColors.WindowText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Color"/> structure that  is the color of the text in the client area of a window.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure that  is the color of the text in the client area of a window.</para>
      </value>
    </member>

    <member name="T:System.Drawing.SystemIcons">
      <summary>
        <para>Each property of the <see cref="T:System.Drawing.SystemIcons"/> class is an <see cref="T:System.Drawing.Icon"/> object for Windows system-wide icons. This class cannot be inherited.</para>
      </summary>
    </member>

    <member name="P:System.Drawing.SystemIcons.Application">
      <summary>
        <para>Gets an <see cref="T:System.Drawing.Icon"/> object that contains the default application icon (WIN32: IDI_APPLICATION).</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Icon"/> object that contains the default application icon.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemIcons.Asterisk">
      <summary>
        <para>Gets an <see cref="T:System.Drawing.Icon"/> object that contains the system asterisk icon (WIN32: IDI_ASTERISK).</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Icon"/> object that contains the system asterisk icon.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemIcons.Error">
      <summary>
        <para>Gets an <see cref="T:System.Drawing.Icon"/> object that contains the system error icon (WIN32: IDI_ERROR).</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Icon"/> object that contains the system error icon.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemIcons.Exclamation">
      <summary>
        <para>Gets an <see cref="T:System.Drawing.Icon"/> object that contains the system exclamation icon (WIN32: IDI_EXCLAMATION).</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Icon"/> object that contains the system exclamation icon.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemIcons.Hand">
      <summary>
        <para>Gets an <see cref="T:System.Drawing.Icon"/> object that contains the system hand icon (WIN32: IDI_HAND).</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Icon"/> object that contains the system hand icon.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemIcons.Information">
      <summary>
        <para>Gets an <see cref="T:System.Drawing.Icon"/> object that contains the system information icon (WIN32: IDI_INFORMATION).</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Icon"/> object that contains the system information icon.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemIcons.Question">
      <summary>
        <para>Gets an <see cref="T:System.Drawing.Icon"/> object that contains the system question icon (WIN32: IDI_QUESTION).</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Icon"/> object that contains the system question icon.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemIcons.Warning">
      <summary>
        <para>Gets an <see cref="T:System.Drawing.Icon"/> object that contains the system warning icon (WIN32: IDI_WARNING).</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Icon"/> object that contains the system warning icon.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemIcons.WinLogo">
      <summary>
        <para>Gets an <see cref="T:System.Drawing.Icon"/> object that contains the Windows logo icon (WIN32: IDI_WINLOGO).</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Icon"/> object that contains the Windows logo icon.</para>
      </value>
    </member>

    <member name="T:System.Drawing.SystemPens">
      <summary>
        <para>Each property of the <see cref="T:System.Drawing.SystemPens"/> class is a <see cref="T:System.Drawing.Pen"/> object that is the color of a Windows display element  and that is a width of 1.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.SystemPens.FromSystemColor(System.Drawing.Color)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Pen"/> object from the specified <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <param name="c">
        The <see cref="T:System.Drawing.Color"/> structure for the new <see cref="T:System.Drawing.Pen"/> object.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Pen"/> object this method creates.</para>
      </returns>
    </member>

    <member name="P:System.Drawing.SystemPens.ActiveCaptionText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the color of the text in the active window&apos;s title bar.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the color of the text in the active window&apos;s title bar.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.Control">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the face color of a 3-D element.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the face color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.ControlDark">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the shadow color of a 3-D element. The shadow color is applied to parts of a 3-D element that face away from the light source.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the shadow color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.ControlDarkDark">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the dark shadow color of a 3-D element. The dark shadow color is applied to the parts of a 3-D element that are the darkest color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the dark shadow color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.ControlLight">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the light color of a 3-D element. The light color is applied to parts of a 3-D element that face the light source.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the light color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.ControlLightLight">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the highlight color of a 3-D element. The highlight color is applied to the parts of a 3-D element that are the lightest color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the highlight color of a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.ControlText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the color of text in a 3-D element.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the color of text in a 3-D element.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.GrayText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the color of dimmed text. Items in a list that are disabled are displayed in dimmed text.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the color of dimmed text.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.Highlight">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the color of the background of selected items. This includes selected menu items as well as selected text. For example, the pen may be the color used for the background of selected items in a list box.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the color of the background of selected items.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.HighlightText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the color of the text of selected items. This includes selected menu items as well as selected text. For example, the pen may be the color used for the text of selected items in a list box.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the color of the text of selected items.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.InactiveCaptionText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the color of the text in an inactive window&apos;s title bar.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the color of the text in an inactive window&apos;s title bar.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.InfoText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the color of the text of a ToolTip.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the color of the text of a ToolTip.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.MenuText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the color of a menu&apos;s text.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the color of a menu&apos;s text.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.WindowFrame">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the color of a window frame.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the color of a window frame.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SystemPens.WindowText">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Pen"/> object that is the color of the text in the client area of a window.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Pen"/> object that is the color of the text in the client area of a window.</para>
      </value>
    </member>

    <member name="T:System.Drawing.TextureBrush">
      <summary>
        <para>Each property of the <see cref="T:System.Drawing.TextureBrush"/> class is a <see cref="T:System.Drawing.Brush"/> object that uses an image to fill the interior of a shape. This class cannot be inherited.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image)">
      <overload>
        Initializes a new <see cref="T:System.Drawing.TextureBrush"/> object that uses the specified image.
      </overload>
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.TextureBrush"/> object that uses the specified image.</para>
      </summary>
      <param name="bitmap">
        The <see cref="T:System.Drawing.Image"/> object with which this <see cref="T:System.Drawing.TextureBrush"/> object fills interiors.
      </param>
    </member>

    <member name="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.Rectangle)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.TextureBrush"/> object that uses the specified image and bounding rectangle.</para>
      </summary>
      <param name="image">
        The <see cref="T:System.Drawing.Image"/> object with which this <see cref="T:System.Drawing.TextureBrush"/> object fills interiors.
      </param>
      <param name="dstRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the bounding rectangle for this <see cref="T:System.Drawing.TextureBrush"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.TextureBrush"/> object that uses the specified image, bounding rectangle, and image attributes.</para>
      </summary>
      <param name="image">
        The <see cref="T:System.Drawing.Image"/> object with which this <see cref="T:System.Drawing.TextureBrush"/> object fills interiors.
      </param>
      <param name="dstRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the bounding rectangle for this <see cref="T:System.Drawing.TextureBrush"/> object.
      </param>
      <param name="imageAttr">
        An <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that contains additional information about the image used by this <see cref="T:System.Drawing.TextureBrush"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.RectangleF)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.TextureBrush"/> object that uses the specified image and bounding rectangle.</para>
      </summary>
      <param name="image">
        The <see cref="T:System.Drawing.Image"/> object with which this <see cref="T:System.Drawing.TextureBrush"/> object fills interiors.
      </param>
      <param name="dstRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle for this <see cref="T:System.Drawing.TextureBrush"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.Imaging.ImageAttributes)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.TextureBrush"/> object that uses the specified image, bounding rectangle, and image attributes.</para>
      </summary>
      <param name="image">
        The <see cref="T:System.Drawing.Image"/> object with which this <see cref="T:System.Drawing.TextureBrush"/> object fills interiors.
      </param>
      <param name="dstRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle for this <see cref="T:System.Drawing.TextureBrush"/> object.
      </param>
      <param name="imageAttr">
        An <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object that contains additional information about the image used by this <see cref="T:System.Drawing.TextureBrush"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.Drawing2D.WrapMode)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.TextureBrush"/> object that uses the specified image and wrap mode.</para>
      </summary>
      <param name="image">
        The <see cref="T:System.Drawing.Image"/> object with which this <see cref="T:System.Drawing.TextureBrush"/> object fills interiors.
      </param>
      <param name="wrapMode">
        A <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that specifies how this <see cref="T:System.Drawing.TextureBrush"/> object is tiled.
      </param>
    </member>

    <member name="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.Drawing2D.WrapMode,System.Drawing.RectangleF)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.TextureBrush"/> object that uses the specified image, wrap mode, and bounding rectangle.</para>
      </summary>
      <param name="image">
        The <see cref="T:System.Drawing.Image"/> object with which this <see cref="T:System.Drawing.TextureBrush"/> object fills interiors.
      </param>
      <param name="wrapMode">
        A <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that specifies how this <see cref="T:System.Drawing.TextureBrush"/> object is tiled.
      </param>
      <param name="dstRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle for this <see cref="T:System.Drawing.TextureBrush"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.TextureBrush.#ctor(System.Drawing.Image,System.Drawing.Drawing2D.WrapMode,System.Drawing.Rectangle)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.TextureBrush"/> object that uses the specified image, wrap mode, and bounding rectangle.</para>
      </summary>
      <param name="image">
        The <see cref="T:System.Drawing.Image"/> object with which this <see cref="T:System.Drawing.TextureBrush"/> object fills interiors.
      </param>
      <param name="wrapMode">
        A <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that specifies how this <see cref="T:System.Drawing.TextureBrush"/> object is tiled.
      </param>
      <param name="dstRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the bounding rectangle for this <see cref="T:System.Drawing.TextureBrush"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.TextureBrush.Clone">
      <summary>
        <para>Creates an exact copy of this <see cref="T:System.Drawing.TextureBrush"/> object.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.TextureBrush"/> object this method creates, cast as an <see cref="T:System.Object"/> object.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code creates a <see cref="T:System.Drawing.TextureBrush"/> object and an exact copy of that texture brush, and then uses the copy to fill a rectangle on the screen.</para>
        <code lang="VB">Public Sub Clone_Example(e As PaintEventArgs)
&apos; Create a TextureBrush object.
Dim tBrush As New TextureBrush(New Bitmap(&quot;texture.jpg&quot;))
&apos; Create an exact copy of tBrush.
Dim cloneBrush As TextureBrush = CType(tBrush.Clone(), _
TextureBrush)
&apos; Fill a rectangle with cloneBrush.
e.Graphics.FillRectangle(cloneBrush, 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void Clone_Example(PaintEventArgs e)
{
// Create a TextureBrush object.
TextureBrush tBrush = new TextureBrush(new Bitmap(&quot;texture.jpg&quot;));
// Create an exact copy of tBrush.
TextureBrush cloneBrush = (TextureBrush)tBrush.Clone();
// Fill a rectangle with cloneBrush.
e.Graphics.FillRectangle(cloneBrush, 0, 0, 100, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.TextureBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)">
      <overload>
        Multiplies the <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that represents the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush"/> object by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> object in the specified order.
      </overload>
      <summary>
        <para>Multiplies the <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that represents the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush"/> object by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> object in the specified order.</para>
      </summary>
      <param name="matrix">
        The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by which to multiply the geometric transformation.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies the order in which to multiply the two matrices.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.TextureBrush"/> object.</term>
          </item>
          <item>
            <term>Creates a new matrix that specifies a translation of 50 units in the x-direction.</term>
          </item>
          <item>
            <term>Multiplies the matrix with the transformation matrix of the texture brush.</term>
          </item>
          <item>
            <term>Fills a rectangle, using the texture brush.</term>
          </item>
        </list>
        <code lang="VB">Public Sub MultiplyTransform_Example(e As PaintEventArgs)
&apos; Create a TextureBrush object.
Dim tBrush As New TextureBrush(New Bitmap(&quot;texture.jpg&quot;))
&apos; Create a transformation matrix.
Dim translateMatrix As New Matrix()
translateMatrix.Translate(50, 0)
&apos; Multiply the transformation matrix of tBrush by translateMatrix.
tBrush.MultiplyTransform(translateMatrix)
&apos; Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 110, 100, 100)
End Sub
        </code>
        <code lang="C#">public void MultiplyTransform_Example(PaintEventArgs e)
{
// Create a TextureBrush object.
TextureBrush tBrush = new TextureBrush(new Bitmap(&quot;texture.jpg&quot;));
// Create a transformation matrix.
Matrix translateMatrix = new Matrix();
translateMatrix.Translate(50, 0);
// Multiply the transformation matrix of tBrush by translateMatrix.
tBrush.MultiplyTransform(translateMatrix);
// Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 110, 100, 100);
}
        </code>
      </example>
      <remarks>
        <para>The transformation matrix of a <see cref="T:System.Drawing.TextureBrush"/> object specifies how the image that defines the texture is transformed. For example, if the transformation matrix specifies a rotation of 90 degrees clockwise, the texture image is rotated by 90 degrees clockwise.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.TextureBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix)">
      <summary>
        <para>Multiplies the <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that represents the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush"/> object by the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by prepending the specified <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.</para>
      </summary>
      <param name="matrix">
        The <see cref="T:System.Drawing.Drawing2D.Matrix"/> object by which to multiply the geometric transformation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.TextureBrush"/> object.</term>
          </item>
          <item>
            <term>Creates a new matrix that specifies a translation of 50 units in the x-direction.</term>
          </item>
          <item>
            <term>Multiplies the matrix with the transformation matrix of the texture brush.</term>
          </item>
          <item>
            <term>Fills a rectangle, using the texture brush.</term>
          </item>
        </list>
        <code lang="VB">Public Sub MultiplyTransform_Example(e As PaintEventArgs)
&apos; Create a TextureBrush object.
Dim tBrush As New TextureBrush(New Bitmap(&quot;texture.jpg&quot;))
&apos; Create a transformation matrix.
Dim translateMatrix As New Matrix()
translateMatrix.Translate(50, 0)
&apos; Multiply the transformation matrix of tBrush by translateMatrix.
tBrush.MultiplyTransform(translateMatrix, MatrixOrder.Prepend)
&apos; Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 110, 100, 100)
End Sub
        </code>
        <code lang="C#">public void MultiplyTransform_Example(PaintEventArgs e)
{
// Create a TextureBrush object.
TextureBrush tBrush = new TextureBrush(new Bitmap(&quot;texture.jpg&quot;));
// Create a transformation matrix.
Matrix translateMatrix = new Matrix();
translateMatrix.Translate(50, 0);
// Multiply the transformation matrix of tBrush by translateMatrix.
tBrush.MultiplyTransform(translateMatrix, MatrixOrder.Prepend);
// Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 110, 100, 100);
}
        </code>
      </example>
      <remarks>
        <para>The transformation matrix of a <see cref="T:System.Drawing.TextureBrush"/> object specifies how the image that defines the texture is transformed. For example, if the transformation matrix specifies a rotation of 90 degrees clockwise, the texture image is rotated by 90 degrees clockwise.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.TextureBrush.ResetTransform">
      <summary>
        <para>Resets the <see langword="Transform"/> property of this <see cref="T:System.Drawing.TextureBrush"/> object to identity.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.TextureBrush"/> object.</term>
          </item>
          <item>
            <term>Rotates the texture image by 90 degrees.</term>
          </item>
          <item>
            <term>Fills a rectangle.</term>
          </item>
          <item>
            <term>Resets the transformation matrix to identity.</term>
          </item>
          <item>
            <term>Fills a second rectangle.</term>
          </item>
        </list>
        <code lang="VB">Public Sub ResetTransform_Example(e As PaintEventArgs)
&apos; Create a TextureBrush object.
Dim tBrush As New TextureBrush(New Bitmap(&quot;texture.jpg&quot;))
&apos; Rotate the texture image by 90 degrees.
tBrush.RotateTransform(90)
&apos; Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100)
&apos; Reset transformation matrix to identity.
tBrush.ResetTransform()
&apos; Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 110, 100, 100)
End Sub &apos;ResetTransform_Example.
        </code>
        <code lang="C#">public void ResetTransform_Example(PaintEventArgs e)
{
// Create a TextureBrush object.
TextureBrush tBrush = new TextureBrush(new Bitmap(&quot;texture.jpg&quot;));
// Rotate the texture image by 90 degrees.
tBrush.RotateTransform(90);
// Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100);
// Reset transformation matrix to identity.
tBrush.ResetTransform();
// Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 110, 100, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.TextureBrush.RotateTransform(System.Single)">
      <overload>
        Rotates the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush"/> object by the specified amount. This method prepends the rotation to the transformation.
      </overload>
      <summary>
        <para>Rotates the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush"/> object by the specified amount. This method prepends the rotation to the transformation.</para>
      </summary>
      <param name="angle">
        The angle of rotation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.TextureBrush"/> object.</term>
          </item>
          <item>
            <term>Rotates the texture image by 90 degrees.</term>
          </item>
          <item>
            <term>Fills a rectangle.</term>
          </item>
        </list>
        <code lang="VB">Public Sub RotateTransform_Example(e As PaintEventArgs)
&apos; Create a TextureBrush object.
Dim tBrush As New TextureBrush(New Bitmap(&quot;texture.jpg&quot;))
&apos; Rotate the texture image by 90 degrees.
tBrush.RotateTransform(90)
&apos; Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void RotateTransform_Example(PaintEventArgs e)
{
// Create a TextureBrush object.
TextureBrush tBrush = new TextureBrush(new Bitmap(&quot;texture.jpg&quot;));
// Rotate the texture image by 90 degrees.
tBrush.RotateTransform(90);
// Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.TextureBrush.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Rotates the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush"/> object by the specified amount in the specified order.</para>
      </summary>
      <param name="angle">
        The angle of rotation.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies whether to append or prepend the rotation matrix.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.TextureBrush"/> object.</term>
          </item>
          <item>
            <term>Rotates the texture image by 90 degrees.</term>
          </item>
          <item>
            <term>Fills a rectangle.</term>
          </item>
        </list>
        <code lang="VB">Public Sub RotateTransform_Example2(e As PaintEventArgs)
&apos; Create a TextureBrush object.
Dim tBrush As New TextureBrush(New Bitmap(&quot;texture.jpg&quot;))
&apos; Rotate the texture image by 90 degrees.
tBrush.RotateTransform(90, MatrixOrder.Prepend)
&apos; Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void RotateTransform_Example2(PaintEventArgs e)
{
// Create a TextureBrush object.
TextureBrush tBrush = new TextureBrush(new Bitmap(&quot;texture.jpg&quot;));
// Rotate the texture image by 90 degrees.
tBrush.RotateTransform(90, MatrixOrder.Prepend);
// Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.TextureBrush.ScaleTransform(System.Single,System.Single)">
      <overload>
        Scales the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush"/> object by the specified amounts. This method prepends the scaling matrix to the transformation.
      </overload>
      <summary>
        <para>Scales the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush"/> object by the specified amounts. This method prepends the scaling matrix to the transformation.</para>
      </summary>
      <param name="sx">
        The amount by which to scale the transformation in the x direction.
      </param>
      <param name="sy">
        The amount by which to scale the transformation in the y direction.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.TextureBrush"/> object.</term>
          </item>
          <item>
            <term>Scales the texture image by two times in the x-direction.</term>
          </item>
          <item>
            <term>Fills a rectangle on the screen, using the texture brush.</term>
          </item>
        </list>
        <code lang="VB">Public Sub ScaleTransform_Example(e As PaintEventArgs)
&apos; Create a TextureBrush object.
Dim tBrush As New TextureBrush(New Bitmap(&quot;texture.jpg&quot;))
&apos; Scale the texture image 2X in the x-direction.
tBrush.ScaleTransform(2, 1)
&apos; Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void ScaleTransform_Example(PaintEventArgs e)
{
// Create a TextureBrush object.
TextureBrush tBrush = new TextureBrush(new Bitmap(&quot;texture.jpg&quot;));
// Scale the texture image 2X in the x-direction.
tBrush.ScaleTransform(2, 1);
// Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.TextureBrush.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
        <para>Scales the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush"/> object by the specified amounts in the specified order.</para>
      </summary>
      <param name="sx">
        The amount by which to scale the transformation in the x direction.
      </param>
      <param name="sy">
        The amount by which to scale the transformation in the y direction.
      </param>
      <param name="order">
        A <see cref="T:System.Drawing.Drawing2D.MatrixOrder"/> enumeration that specifies whether to append or prepend the scaling matrix.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.TextureBrush"/> object.</term>
          </item>
          <item>
            <term>Scales the texture image by two times in the x-direction.</term>
          </item>
          <item>
            <term>Fills a rectangle on the screen, using the texture brush.</term>
          </item>
        </list>
        <code lang="VB">Public Sub ScaleTransform_Example(e As PaintEventArgs)
&apos; Create a TextureBrush object.
Dim tBrush As New TextureBrush(New Bitmap(&quot;texture.jpg&quot;))
&apos; Scale the texture image 2X in the x-direction.
tBrush.ScaleTransform(2, 1, MatrixOrder.Prepend)
&apos; Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void ScaleTransform_Example(PaintEventArgs e)
{
// Create a TextureBrush object.
TextureBrush tBrush = new TextureBrush(new Bitmap(&quot;texture.jpg&quot;));
// Scale the texture image 2X in the x-direction.
tBrush.ScaleTransform(2, 1, MatrixOrder.Prepend);
// Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.TextureBrush.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <overload>
        Translates the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush"/> object by the specified dimensions in the specified order.
      </overload>
      <summary>
        <para>Translates the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush"/> object by the specified dimensions in the specified order.</para>
      </summary>
      <param name="dx">
        The dimension by which to translate the transformation in the x direction.
      </param>
      <param name="dy">
        The dimension by which to translate the transformation in the y direction.
      </param>
      <param name="order">
        The order (prepend or append) in which to apply the translation.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.TextureBrush"/> object.</term>
          </item>
          <item>
            <term>Translates the texture image 50 units in the x-direction.</term>
          </item>
          <item>
            <term>Fills a rectangle on the screen, using the texture brush.</term>
          </item>
        </list>
        <code lang="VB">Public Sub TranslateTransform_Example(e As PaintEventArgs)
&apos; Create a TextureBrush object.
Dim tBrush As New TextureBrush(New Bitmap(&quot;texture.jpg&quot;))
&apos; Scale the texture image 2X in the x-direction.
tBrush.TranslateTransform(50, 0)
&apos; Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void TranslateTransform_Example(PaintEventArgs e)
{
// Create a TextureBrush object.
TextureBrush tBrush = new TextureBrush(new Bitmap(&quot;texture.jpg&quot;));
// Scale the texture image 2X in the x-direction.
tBrush.TranslateTransform(50, 0);
// Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.TextureBrush.TranslateTransform(System.Single,System.Single)">
      <summary>
        <para>Translates the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush"/> object by the specified dimensions. This method prepends the translation to the transformation.</para>
      </summary>
      <param name="dx">
        The dimension by which to translate the transformation in the x direction.
      </param>
      <param name="dy">
        The dimension by which to translate the transformation in the y direction.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a <see cref="T:System.Drawing.TextureBrush"/> object.</term>
          </item>
          <item>
            <term>Translates the texture image 50 units in the x-direction.</term>
          </item>
          <item>
            <term>Fills a rectangle on the screen, using the texture brush.</term>
          </item>
        </list>
        <code lang="VB">Public Sub TranslateTransform_Example(e As PaintEventArgs)
&apos; Create a TextureBrush object.
Dim tBrush As New TextureBrush(New Bitmap(&quot;texture.jpg&quot;))
&apos; Scale the texture image 2X in the x-direction.
tBrush.TranslateTransform(50, 0, MatrixOrder.Prepend)
&apos; Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100)
End Sub
        </code>
        <code lang="C#">public void TranslateTransform_Example(PaintEventArgs e)
{
// Create a TextureBrush object.
TextureBrush tBrush = new TextureBrush(new Bitmap(&quot;texture.jpg&quot;));
// Scale the texture image 2X in the x-direction.
tBrush.TranslateTransform(50, 0, MatrixOrder.Prepend);
// Fill a rectangle with tBrush.
e.Graphics.FillRectangle(tBrush, 0, 0, 100, 100);
        </code>
      </example>
    </member>

    <member name="P:System.Drawing.TextureBrush.Image">
      <summary>
        <para>Gets the <see cref="T:System.Drawing.Image"/> object associated with this <see cref="T:System.Drawing.TextureBrush"/> object.</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Image"/> object that represents the image with which this <see cref="T:System.Drawing.TextureBrush"/> object fills shapes.</para>
      </value>
    </member>

    <member name="P:System.Drawing.TextureBrush.Transform">
      <summary>
        <para>Gets or sets a <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that defines a local geometric transformation for the image associated with this <see cref="T:System.Drawing.TextureBrush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that defines a geometric transformation that applies only to fills drawn by using this <see cref="T:System.Drawing.TextureBrush"/> object.</para>
      </value>
      <remarks>
        <para>A geometric transformation can be used to translate, scale, rotate, or skew the image that defines the texture of this brush.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.TextureBrush.WrapMode">
      <summary>
        <para>Gets or sets a <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that indicates the wrap mode for this <see cref="T:System.Drawing.TextureBrush"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that specifies how fills drawn by using this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object are tiled.</para>
      </value>
    </member>

    <member name="T:System.Drawing.ToolboxBitmapAttribute">
      <summary>
        <para>You can apply a <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> to a control so that containers, such as Microsoft Visual Studio Form Designer, can retrieve an icon that represents the control. The bitmap for the icon can be in a file by itself or embedded in the assembly that contains the control.
        </para>
        <para>The size of the bitmap that you embed in the control's assembly (or store in a separate file) should be 16 by 16. The <see cref="M:System.Drawing.ToolboxBitmapAttribute.GetImage(System.Type,System.Boolean)"/> method of a <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object can return the small 16 by 16 image or a large 32 by 32 image that it creates by scaling the small image.</para>
      </summary>
    </member>
	
    <member name="M:System.Drawing.ToolboxBitmapAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object with an image from a specified file.</para>
      </summary>
      <param name="imageFile">
        The name of a file that contains a 16 by 16 bitmap.
      </param>
      <example>
	    <para>The following code shows how to apply a <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> to a control. Assume that NamespaceA is in AssemblyA and that the file BitmapFile.bmp is in the same directory as AssemblyA.dll.</para>
        <code lang="C#">
namespace NamespaceA
{
   [ToolboxBitmap("BitmapFile.bmp")]
   public class ControlA : System.Windows.Forms.UserControl
   {
      ...
   }
   ...
}
        </code>  
	  </example>   
    </member>

    <member name="M:System.Drawing.ToolboxBitmapAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object based on a 16 x 16 bitmap that is embedded as a resource in a specified assembly.</para>
      </summary>
      <param name="t">
        A <see cref="T:System.Type"/> whose defining assembly is searched for the bitmap resource. 
      </param>
      <example>
        <para>The following code shows how to apply a <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> to a control. Notice that the control class, ControlA, is in the namespace NamespaceA. Assume that NamespaceA is in AssemblyA. Then, the <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> constructor shown in the code will search AssemblyA for a resource named NamespaceA.ControlA.bmp.</para>
        <code lang="C#">
namespace NamespaceA
{
   [ToolboxBitmap(typeof(ControlA))]
   public class ControlA : System.Windows.Forms.UserControl
   {
      ...
   }
   ...
}
        </code>
        <para>When Microsoft Visual Studio .NET embeds an image file (say ControlA.bmp) in an assembly, it prepends the name of the default namespace to the name of the image file. Unless you specify otherwise, the default namespace is the name of the assembly. So in the previous example, the bitmap would get embedded as a resource named AssemblyA.ControlA.bmp. To get the correct resource name (MyNamespace.ControlA.bmp), you would have to change the default namespace from MyAssembly to MyNamespace. In Solution Explorer, right-click your project, and choose Properties. In the General section of Common Properties, enter the correct default namespace.</para>
      </example>
      <remarks>
        <para>This constructor searches for an embedded resource in the assembly that defines the type specified by the <paramref name="t"/> parameter. The constructor searches for a resource named namespace.classname.bmp, where namespace is the namespace containing the definition of the class specified by the <paramref name="t"/> parameter. For example, if ControlA is in NamespaceA in AssemblyA.dll, then the constructor searches AssemblyA.dll for a resource named NamespaceA.ControlA.bmp.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.ToolboxBitmapAttribute.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object based on a 16 by 16 bitmap that is embedded as a resource in a specified assembly.</para>
      </summary>
      <param name="t">
        A <see cref="T:System.Type"/> whose defining assembly is searched for the bitmap resource.
      </param>
      <param name="name">
        The name of the embedded bitmap resource.
      </param>
      <example>
        <para>The following code shows how to apply a <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> to a control. Notice that the control class, ControlA, is in the namespace NamespaceA. Assume that NamespaceA is in AssemblyA. Then, the <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> constructor shown in the code will search AssemblyA for a resource named NamespaceA.MyBitmap.bmp.</para>
        <code lang="C#">
namespace NamespaceA
{
   [ToolboxBitmap(typeof(ControlA), "MyBitmap.bmp")]
   public class ControlA : System.Windows.Forms.UserControl
   {
      ...
   }
   ...
}
        </code>
        <para>When Microsoft Visual Studio .NET embeds an image file (say MyBitmap.bmp) in an assembly, it prepends the name of the default namespace to the name of the image file. Unless you specify otherwise, the default namespace is the name of the assembly. So in the previous example, the bitmap would get embedded as a resource named AssemblyA.MyBitmap.bmp. To get the correct resource name (MyNamespace.MyBitmap.bmp), you would have to change the default namespace from MyAssembly to MyNamespace. In Solution Explorer, right-click your project, and choose Properties. In the General section of Common Properties, enter the correct default namespace.</para>
      </example>
      <remarks>
        <para>This constructor searches for an embedded resource in the assembly that defines the type specified by the <paramref name="t"/> parameter. The constructor searches for a resource named namespace.name, where namespace is the namespace containing the definition of the class specified by the <paramref name="t"/> parameter. For example, suppose that ControlA is a class in NamespaceA in AssemblyA.dll and that you passed "MyBitmap.bmp" to the <paramref name="name"/> parameter. Then the constructor searches AssemblyA.dll for a resource named NamespaceA.MyBitmap.bmp.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.ToolboxBitmapAttribute.Equals(System.Object)">
      <summary>
        <para>Indicates whether the specified object is a <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object and is identical to this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object.</para>
      </summary>
      <param name="value">
        The <see cref="T:System.Object"/> to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <paramref name="value"/> is both a <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object and is identical to this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ToolboxBitmapAttribute.GetHashCode">
      <summary>
        <para>Gets a hash code for this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object.</para>
      </summary>
      <returns>
        <para>The hash code for this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.ToolboxBitmapAttribute.GetImage(System.Object,System.Boolean)">
      <overload>
        Gets the small or large <see cref="T:System.Drawing.Image"/> associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object.
      </overload>
      <summary>
        <para>Gets the small or large <see cref="T:System.Drawing.Image"/> associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object.</para>
      </summary>
      <param name="component">
        If this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object does not already have a small image, this method searches for a bitmap resource in the assembly that defines the type of the object specified by the component parameter. For example, if you pass an object of type ControlA to the component parameter, then this method searches the assembly that defines ControlA.
      </param>
      <param name="large">
        Specifies whether this method returns a large image (<see langword="true"/>) or a small image (<see langword="false"/>). The small image is 16 by 16, and the large image is 32 by 32.
      </param>
      <returns>
        <para>An <see cref="T:System.Drawing.Image"/> object associated with this <see langword="ToolboxBitmapAttributeb"/> object.</para>
      </returns>
      
      <remarks>
        <para>This method searches for a resource named namespace.classname.bmp, where namespace is the namespace containing the definition of the type of the object specified by the <paramref name="component"/> parameter. For example, suppose you pass an object of type ControlA to the <paramref name="component"/> parameter. If ControlA is in NamespaceA in AssemblyA.dll, then this method searches AssemblyA.dll for a resource named NamespaceA.ControlA.bmp.</para>
        <para>If this <see langword="ToolboxBitmapAttributeb"/> object does not already have a large image, this method creates a large image by scaling the small image.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.ToolboxBitmapAttribute.GetImage(System.Object)">
      <summary>
        <para>Gets the small <see cref="T:System.Drawing.Image"/> associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object.</para>
      </summary>
      <param name="component">
        If this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object does not already have a small image, this method searches for a bitmap resource in the assembly that defines the type of the object specified by the component parameter. For example, if you pass an object of type ControlA to the component parameter, then this method searches the assembly that defines ControlA.
      </param>
      <returns>
        <para>The small <see cref="T:System.Drawing.Image"/> associated with this <see langword="ToolboxBitmapAttributeb"/> object.</para>
      </returns>     
      <remarks>
        <para>This method searches for a resource named namespace.classname.bmp, where namespace is the namespace containing the definition of the type of the object specified by the <paramref name="component"/> parameter. For example, suppose you pass an object of type ControlA to the <paramref name="component"/> parameter. If ControlA is in NamespaceA in AssemblyA.dll, then this method searches AssemblyA.dll for a resource named NamespaceA.ControlA.bmp.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.ToolboxBitmapAttribute.GetImage(System.Type)">
      <summary>
        <para>Gets the small <see cref="T:System.Drawing.Image"/> associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object.</para>
      </summary>
      <param name="type">
        If this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object does not already have a small image, this method searches for a bitmap resource in the assembly that defines the type specified by the type parameter. For example, if you pass typeof(ControlA) to the type parameter, then this method searches the assembly that defines ControlA.
      </param>
      <returns>
        <para>The small <see cref="T:System.Drawing.Image"/> associated with this <see langword="ToolboxBitmapAttributeb"/> object.</para>
      </returns>
      <remarks>
        <para>This method searches for a resource named namespace.classname.bmp, where namespace is the namespace containing the definition of the type specified by the <paramref name="type"/> parameter. For example, suppose you pass typeof(ControlA) to the <paramref name="type"/> parameter. If ControlA is in NamespaceA in AssemblyA.dll, then this method searches AssemblyA.dll for a resource named NamespaceA.ControlA.bmp.</para>
      </remarks>
    </member>
	
    <member name="M:System.Drawing.ToolboxBitmapAttribute.GetImage(System.Type,System.Boolean)">
      <summary>
        <para>Gets the small or large <see cref="T:System.Drawing.Image"/> associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object.</para>
      </summary>
      <param name="type">
        If this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object does not already have a small image, this method searches for a bitmap resource in the assembly that defines the type specified by the component type. For example, if you pass typeof(ControlA) to the type parameter, then this method searches the assembly that defines ControlA.
      </param>
      <param name="large">
        Specifies whether this method returns a large image (<see langword="true"/>) or a small image (<see langword="false"/>). The small image is 16 by 16, and the large image is 32 by 32.
      </param>
      <returns>
        <para>An <see cref="T:System.Drawing.Image"/> associated with this <see langword="ToolboxBitmapAttributeb"/> object.</para>
      </returns>
      <remarks>
        <para>This method searches for a resource named namespace.classname.bmp, where namespace is the namespace containing the definition of the type specified by the <paramref name="type"/> parameter. For example, suppose you pass an typeof(ControlA) to the <paramref name="type"/> parameter. If ControlA is in NamespaceA in AssemblyA.dll, then this method searches AssemblyA.dll for a resource named NamespaceA.ControlA.bmp.</para>
        <para>If this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object does not already have a large image, this method creates a large image by scaling the small image.</para>
      </remarks>    
    </member>

    <member name="M:System.Drawing.ToolboxBitmapAttribute.GetImage(System.Type,System.String,System.Boolean)">
      <summary>
        <para>Gets the small or large <see cref="T:System.Drawing.Image"/> associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object.</para>
      </summary>
      <param name="type">
        If this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object does not already have a small image, this method searches for an embedded bitmap resource in the assembly that defines the type specified by the component type. For example, if you pass typeof(ControlA) to the type parameter, then this method searches the assembly that defines ControlA.
      </param>
      <param name="imgName">
        The name of the embedded bitmap resource.
      </param>
      <param name="large">
        Specifies whether this method returns a large image (<see langword="true"/>) or a small image (<see langword="false"/>). The small image is 16 by 16, and the large image is 32 by 32.
      </param>
      <returns>
        <para>An <see cref="T:System.Drawing.Image"/> associated with this <see langword="ToolboxBitmapAttributeb"/> object.</para>
      </returns>      
      <remarks>
        <para>This method searches for a resource named namespace.imgName, where namespace is the namespace containing the definition of the type specified by the <paramref name="type"/> parameter. For example, suppose you pass typeof(ControlA) to the <paramref name="type"/> parameter and that you passed "MyBitmap.bmp" to the imgName parameter. If ControlA is in NamespaceA in AssemblyA.dll, then this method searches AssemblyA.dll for a resource named NamespaceA.MyBitmap.bmp.</para>
        <para>If this <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object does not already have a large image, this method creates a large image by scaling the small image.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.ToolboxBitmapAttribute.GetImageFromResource(System.Type,System.String,System.Boolean)">
      <summary>
        <para>Returns an <see cref="T:System.Drawing.Image"/> object based on a bitmap resource that is embedded in an assembly.</para>
      </summary>
      <param name="t">
        This method searches for an embedded bitmap resource in the assembly that defines the type specified by the t parameter. For example, if you pass typeof(ControlA) to the t parameter, then this method searches the assembly that defines ControlA.
      </param>
      <param name="imageName">
        The name of the embedded bitmap resource.
      </param>
      <param name="large">
        Specifies whether this method returns a large image (true)or a small image (false). The small image is 16 by 16, and the large image is 32 x 32.
      </param>
      <returns>
        <para>An <see cref="T:System.Drawing.Image"/> object based on the retrieved bitmap.</para>
      </returns>
      <remarks>
        <para>This method searches for a resource named namespace.imgName, where namespace is the namespace containing the definition of the type specified by the <paramref name="t"/> parameter. For example, suppose you pass typeof(ControlA) to the <paramref name="t"/> parameter and you pass "MyBitmap.bmp" to the imgName parameter. If ControlA is in NamespaceA in AssemblyA.dll, then this method searches AssemblyA.dll for a resource named NamespaceA.MyBitmap.bmp.</para>
        <para>This method is intended to retrieve a 16 x 16 bitmap resource that is embedded in an assembly. However, there is no requirement that the embedded bitmap has a size of 16 x 16. The bitmap that is retrieved from the assembly (no matter what size) is considered the small image. The large image is created by scaling the "small" image to a size of 32 x 32. So the large image will always be 32 by 32, regardless of the size of the bitmap retrieved from the assembly.</para> 
      </remarks>
    </member>

    <member name="F:System.Drawing.ToolboxBitmapAttribute.Default">
      <summary>
        <para>A <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> object that has its small image and its large image set to <see langword="null"/>.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.ContentAlignment">
      <summary>
        <para>Specifies alignment of content on the drawing surface.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.ContentAlignment.BottomCenter">
      <summary>
        <para>Content is vertically aligned at the bottom, and horizontally aligned at the center.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.ContentAlignment.BottomLeft">
      <summary>
        <para>Content is vertically aligned at the bottom, and horizontally aligned on the left.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.ContentAlignment.BottomRight">
      <summary>
        <para>Content is vertically aligned at the bottom, and horizontally aligned on the right.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.ContentAlignment.MiddleCenter">
      <summary>
        <para>Content is vertically aligned in the middle, and horizontally aligned at the center.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.ContentAlignment.MiddleLeft">
      <summary>
        <para>Content is vertically aligned in the middle, and horizontally aligned on the left.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.ContentAlignment.MiddleRight">
      <summary>
        <para>Content is vertically aligned in the middle, and horizontally aligned on the right.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.ContentAlignment.TopCenter">
      <summary>
        <para>Content is vertically aligned at the top, and horizontally aligned at the center.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.ContentAlignment.TopLeft">
      <summary>
        <para>Content is vertically aligned at the top, and horizontally aligned on the left.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.ContentAlignment.TopRight">
      <summary>
        <para>Content is vertically aligned at the top, and horizontally aligned on the right.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.FontStyle">
      <summary>
        <para>Specifies style information applied to text.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.FontStyle.Bold">
      <summary>
        <para>Bold text.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.FontStyle.Italic">
      <summary>
        <para>Italic text.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.FontStyle.Regular">
      <summary>
        <para>Normal text.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.FontStyle.Strikeout">
      <summary>
        <para>Text with a line through the middle.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.FontStyle.Underline">
      <summary>
        <para>Underlined text.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.GraphicsUnit">
      <summary>
        <para>Specifies the unit of measure for the given data.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.GraphicsUnit.Display">
      <summary>
        <para>Specifies 1/75 inch as the unit of measure.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.GraphicsUnit.Document">
      <summary>
        <para>Specifies the document unit (1/300 inch) as the unit of measure.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.GraphicsUnit.Inch">
      <summary>
        <para>Specifies the inch as the unit of measure.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.GraphicsUnit.Millimeter">
      <summary>
        <para>Specifies the millimeter as the unit of measure.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.GraphicsUnit.Pixel">
      <summary>
        <para>Specifies a device pixel as the unit of measure.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.GraphicsUnit.Point">
      <summary>
        <para>Specifies a printer&apos;s point (1/72 inch) as the unit of measure.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.GraphicsUnit.World">
      <summary>
        <para>Specifies the world unit as the unit of measure.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.KnownColor">
      <summary>
        <para>Specifies the known system colors.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.ActiveBorder">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.ActiveCaption">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.ActiveCaptionText">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.AliceBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.AntiqueWhite">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.AppWorkspace">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Aqua">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Aquamarine">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Azure">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Beige">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Bisque">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Black">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.BlanchedAlmond">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Blue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.BlueViolet">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Brown">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.BurlyWood">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.CadetBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Chartreuse">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Chocolate">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Control">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.ControlDark">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.ControlDarkDark">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.ControlLight">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.ControlLightLight">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.ControlText">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Coral">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Cornflower">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Cornsilk">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Crimson">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Cyan">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkCyan">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkGoldenrod">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkGray">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkKhaki">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkMagenta">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkOliveGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkOrange">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkOrchid">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkRed">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkSalmon">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkSeaGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkSlateBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkSlateGray">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkTurquoise">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DarkViolet">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DeepPink">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DeepSkyBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Desktop">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DimGray">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.DodgerBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Firebrick">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.FloralWhite">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.ForestGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Fuchsia">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Gainsboro">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.GhostWhite">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Gold">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Goldenrod">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Gray">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.GrayText">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Green">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.GreenYellow">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Highlight">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.HighlightText">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Honeydew">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.HotPink">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.HotTrack">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.InactiveBorder">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.InactiveCaption">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.InactiveCaptionText">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.IndianRed">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Indigo">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Info">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.InfoText">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Ivory">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Khaki">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Lavender">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LavenderBlush">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LawnGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LemonChiffon">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LightBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LightCoral">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LightCyan">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LightGoldenrodYellow">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LightGray">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LightGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LightPink">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LightSalmon">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LightSeaGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LightSkyBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LightSlateGray">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LightSteelBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LightYellow">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Lime">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.LimeGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Linen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Magenta">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Maroon">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.MediumAquamarine">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.MediumBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.MediumOrchid">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.MediumPurple">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.MediumSeaGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.MediumSlateBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.MediumSpringGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.MediumTurquoise">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.MediumVioletRed">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Menu">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.MenuText">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.MidnightBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.MintCream">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.MistyRose">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Moccasin">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.NavajoWhite">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Navy">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.OldLace">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Olive">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.OliveDrab">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Orange">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.OrangeRed">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Orchid">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.PaleGoldenrod">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.PaleGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.PaleTurquoise">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.PaleVioletRed">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.PapayaWhip">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.PeachPuff">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Peru">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Pink">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Plum">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.PowderBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Purple">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Red">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.RosyBrown">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.RoyalBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.SaddleBrown">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Salmon">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.SandyBrown">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.ScrollBar">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.SeaGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.SeaShell">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Sienna">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Silver">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.SkyBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.SlateBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.SlateGray">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Snow">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.SpringGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.SteelBlue">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Tan">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Teal">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Thistle">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Tomato">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Transparent">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Turquoise">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Violet">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Wheat">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.White">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.WhiteSmoke">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Window">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.WindowFrame">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.WindowText">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.Yellow">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.KnownColor.YellowGreen">
      <summary>
        <para>A system-defined color.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.RotateFlipType">
      <summary>
        <para>Specifies the direction of an image&apos;s rotation and the axis used to flip the image.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.Rotate180FlipNone">
      <summary>
        <para>Specifies a 180-degree rotation without flipping.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.Rotate180FlipX">
      <summary>
        <para>Specifies a 180-degree rotation followed by a horizontal flip.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.Rotate180FlipXY">
      <summary>
        <para>Specifies a 180-degree rotation followed by a horizontal and vertical flip.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.Rotate180FlipY">
      <summary>
        <para>Specifies a 180-degree rotation followed by a vertical flip.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.Rotate270FlipNone">
      <summary>
        <para>Specifies a 270-degree rotation without flipping.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.Rotate270FlipX">
      <summary>
        <para>Specifies a 270-degree rotation followed by a horizontal flip.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.Rotate270FlipXY">
      <summary>
        <para>Specifies a 270-degree rotation followed by a horizontal and vertical flip.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.Rotate270FlipY">
      <summary>
        <para>Specifies a 270-degree rotation followed by a vertical flip.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.Rotate90FlipNone">
      <summary>
        <para>Specifies a 90-degree rotation without flipping.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.Rotate90FlipX">
      <summary>
        <para>Specifies a 90-degree rotation followed by a horizontal flip.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.Rotate90FlipXY">
      <summary>
        <para>Specifies a 90-degree rotation followed by a horizontal and vertical flip.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.Rotate90FlipY">
      <summary>
        <para>Specifies a 90-degree rotation followed by a vertical flip.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.RotateNoneFlipNone">
      <summary>
        <para>Specifies no rotation and no flipping.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.RotateNoneFlipX">
      <summary>
        <para>Specifies no rotation followed by a horizontal flip.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.RotateNoneFlipXY">
      <summary>
        <para>Specifies no rotation followed by a horizontal and vertical flip.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.RotateFlipType.RotateNoneFlipY">
      <summary>
        <para>Specifies no rotation followed by a vertical flip.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.StringAlignment">
      <summary>
        <para>Specifies the alignment of a text string relative to its layout rectangle.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringAlignment.Center">
      <summary>
        <para>Specifies that text is aligned in the center of the layout rectangle.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringAlignment.Far">
      <summary>
        <para>Specifies that text is aligned far from the origin position of the layout rectangle. In a left-to-right layout, the far position is right. In a right-to-left layout, the far position is left.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringAlignment.Near">
      <summary>
        <para>Specifies the text be aligned near the layout. In a left-to-right layout, the near position is left. In a right-to-left layout, the near position is right.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.StringDigitSubstitute">
      <summary>
        <para>The <see cref="T:System.Drawing.StringDigitSubstitute"/> enumeration specifies how to substitute digits in a string according to a user&apos;s locale or language.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringDigitSubstitute.National">
      <summary>
        <para>Specifies substitution digits that correspond with the official national language of the user&apos;s locale.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringDigitSubstitute.None">
      <summary>
        <para>Specifies to disable substitutions.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringDigitSubstitute.Traditional">
      <summary>
        <para>Specifies substitution digits that correspond with the user&apos;s native script or language, which may be different from the official national language of the user&apos;s locale.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringDigitSubstitute.User">
      <summary>
        <para>Specifies a user-defined substitution scheme.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.StringFormatFlags">
      <summary>
        <para>Specifies the display and layout information for text strings.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringFormatFlags.DirectionRightToLeft">
      <summary>
        <para>Specifies that text is right to left.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringFormatFlags.DirectionVertical">
      <summary>
        <para>Specifies that text is vertical.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringFormatFlags.DisplayFormatControl">
      <summary>
        <para>Causes control characters such as the left-to-right mark to be shown in the output with a representative glyph.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringFormatFlags.FitBlackBox">
      <summary>
        <para>Specifies that no part of any glyph overhangs the bounding rectangle. By default some glyphs overhang the rectangle slightly where necessary to appear at the edge visually. For example when an italic lowercase letter f in a font such as Garamond is aligned at the far left of a rectangle, the lower part of the f will reach slightly further left than the left edge of the rectangle. Setting this flag will ensure no painting outside the rectangle but will cause the aligned edges of adjacent lines of text to appear uneven.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringFormatFlags.LineLimit">
      <summary>
        <para>Only entire lines are laid out in the formatting rectangle. By default layout continues until the end of the text, or until no more lines are visible as a result of clipping, whichever comes first. Note that the default settings allow the last line to be partially obscured by a formatting rectangle that is not a whole multiple of the line height. To ensure that only whole lines are seen, specify this value and be careful to provide a formatting rectangle at least as tall as the height of one line.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringFormatFlags.MeasureTrailingSpaces">
      <summary>
        <para>By default the boundary rectangle returned by the <see cref="M:System.Drawing.Graphics.MeasureString"/> method excludes the space at the end of each line. Set this flag to include that space in measurement.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringFormatFlags.NoClip">
      <summary>
        <para>Overhanging parts of glyphs, and unwrapped text reaching outside the formatting rectangle are allowed to show. By default all text and glyph parts reaching outside the formatting rectangle are clipped. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringFormatFlags.NoFontFallback">
      <summary>
        <para>Disables fallback to alternate fonts for characters not supported in the requested font. Any missing characters are displayed with the fonts missing glyph, usually an open square.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringFormatFlags.NoWrap">
      <summary>
        <para>Disables wrapping of text between lines when formatting within a rectangle. This flag is implied when a point is passed instead of a rectangle, or when the specified rectangle has a zero line length. </para>
      </summary>
    </member>

    <member name="T:System.Drawing.StringTrimming">
      <summary>
        <para>Specifies how to trim characters from a string that does not completely fit into a layout shape.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringTrimming.Character">
      <summary>
        <para>Specifies that the text is trimmed to the nearest character.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringTrimming.EllipsisCharacter">
      <summary>
        <para>Specifies that the text is trimmed to the nearest character, and an ellipsis is inserted at the end of a trimmed line.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringTrimming.EllipsisPath">
      <summary>
        <para>The center is removed from trimmed lines and replaced by an ellipsis. The algorithm keeps as much of the last slash-delimited segment of the line as possible. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringTrimming.EllipsisWord">
      <summary>
        <para>Specifies that text is trimmed to the nearest word, and an ellipsis is inserted at the end of a trimmed line.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringTrimming.None">
      <summary>
        <para>Specifies no trimming.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringTrimming.Word">
      <summary>
        <para>Specifies that text is trimmed to the nearest word.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.StringUnit">
      <summary>
        <para>Specifies the units of measure for a text string.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringUnit.Display">
      <summary>
        <para>Specifies the device unit as the unit of measure.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringUnit.Document">
      <summary>
        <para>Specifies 1/300 of an inch as the unit of measure.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringUnit.Em">
      <summary>
        <para>Specifies a printer&apos;s em size of 32 as the unit of measure.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringUnit.Inch">
      <summary>
        <para>Specifies an inch as the unit of measure.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringUnit.Millimeter">
      <summary>
        <para>Specifies a millimeter as the unit of measure</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringUnit.Pixel">
      <summary>
        <para>Specifies a pixel as the unit of measure.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringUnit.Point">
      <summary>
        <para>Specifies a printer&apos;s point (1/72 inch) as the unit of measure.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.StringUnit.World">
      <summary>
        <para>Specifies world units as the unit of measure.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.CharacterRange">
      <summary>
        <para>Specifies a range of character positions within a string.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.CharacterRange.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.CharacterRange"/> structure, specifying a range of character positions within a string.</para>
      </summary>
      <param name="First">
        The position of the first character in the range. For example, if <paramref name="First"/> is set to 0, then the first position of the range is position 0 in the string.
      </param>
      <param name="Length">
        The number of positions in the range.
      </param>
    </member>

    <member name="P:System.Drawing.CharacterRange.First">
      <summary>
        <para>Gets or sets the position in the string of the first character of this <see cref="T:System.Drawing.CharacterRange"/>.</para>
      </summary>
      <value>
        <para>The first position of this <see cref="T:System.Drawing.CharacterRange"/>. For example, if <paramref name="First"/> is set to 0, then the first position of this <see cref="T:System.Drawing.CharacterRange"/> is position 0 in the string.</para>
      </value>
    </member>

    <member name="P:System.Drawing.CharacterRange.Length">
      <summary>
        <para>Gets or sets the number of positions in this <see cref="T:System.Drawing.CharacterRange"/>.</para>
      </summary>
      <value>
        <para>The number of positions in this <see cref="T:System.Drawing.CharacterRange"/>.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Color">
      <summary>
        <para>Represents an ARGB color.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Color.Equals(System.Object)">
      <summary>
        <para>Tests whether the specified object is a <see cref="T:System.Drawing.Color"/> structure and is equivalent to this <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <param name="obj">
        The object to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:System.Drawing.Color"/> structure equivalent to this <see cref="T:System.Drawing.Color"/> structure; otherwise, <see langword="false"/>.</para>
      </returns>
      <remarks>
        <para>This structure only does comparisons with other <see cref="T:System.Drawing.Color"/> structures. To compare colors based solely on their ARGB values, you should do the following:</para>
        <para>if ( color1.ToArgb() == color2.ToArgb() ) ...</para>
        <para>This is because the .Equals and == operators determine equivalency using more than just the ARGB value of the colors. For example, Color.Black and Color.FromArgb(0,0,0) are not considered equal since Color.Black is a named color and Color.FromArgb(0,0,0) is not. </para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Color.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
      <overload>
        Creates a <see cref="T:System.Drawing.Color"/> structure from the four 8-bit ARGB component (alpha, red, green, and blue) values.
      </overload>
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Color"/> structure from the four ARGB component (alpha, red, green, and blue) values. Although this method allows a 32-bit value to be passed for each component, the value of each component is limited to 8 bits.</para>
      </summary>
      <param name="alpha">
        The alpha component. Valid values are 0 through 255.
      </param>
      <param name="red">
        The red component. Valid values are 0 through 255.
      </param>
      <param name="green">
        The green component. Valid values are 0 through 255.
      </param>
      <param name="blue">
        The blue component. Valid values are 0 through 255.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Color"/> structure that this method creates.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates three brushes, each a different color. Each <see cref="T:System.Drawing.Color"/> structure that is used to create a brush is created from four component values (alpha, red, green, blue).</term>
          </item>
          <item>
            <term>Uses an imaginary triangle to position three circles.</term>
          </item>
          <item>
            <term>Paints three overlapping circles, each centered on one vertex of the triangle, using a different brush for each circle.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FromArgb_1(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
&apos; Transparent red, green, and blue brushes.
Dim trnsRedBrush As New SolidBrush(Color.FromArgb(120, 255, 0, 0))
Dim trnsGreenBrush As New SolidBrush(Color.FromArgb(120, 0, _
255, 0))
Dim trnsBlueBrush As New SolidBrush(Color.FromArgb(120, 0, 0, 255))
&apos; Base and height of the triangle that is used to position the
&apos; circles. Each vertex of the triangle is at the center of one of
&apos; the 3 circles. The base is equal to the diameter of the circle.
Dim triBase As Single = 100
Dim triHeight As Single = CSng(Math.Sqrt((3 *(triBase * _
triBase) / 4)))
&apos; Coordinates of first circle&apos;s bounding rectangle.
Dim x1 As Single = 40
Dim y1 As Single = 40
&apos; Fill 3 over-lapping circles. Each circle is a different color.
g.FillEllipse(trnsRedBrush, x1, y1, 2 * triHeight, 2 * triHeight)
g.FillEllipse(trnsGreenBrush, x1 + triBase / 2, y1 + triHeight, _
2 * triHeight, 2 * triHeight)
g.FillEllipse(trnsBlueBrush, x1 + triBase, y1, 2 * triHeight, _
2 * triHeight)
End Sub
        </code>
        <code lang="C#">public void FromArgb_1(PaintEventArgs e)
{
Graphics     g = e.Graphics;
// Transparent red, green, and blue brushes.
SolidBrush trnsRedBrush = new SolidBrush(Color.FromArgb(120, 255, 0, 0));
SolidBrush trnsGreenBrush = new SolidBrush(Color.FromArgb(120, 0, 255, 0));
SolidBrush trnsBlueBrush = new SolidBrush(Color.FromArgb(120, 0, 0, 255));
// Base and height of the triangle that is used to position the
// circles. Each vertex of the triangle is at the center of one of the
// 3 circles. The base is equal to the diameter of the circles.
float   triBase = 100;
float   triHeight = (float)Math.Sqrt(3*(triBase*triBase)/4);
// Coordinates of first circle&apos;s bounding rectangle.
float   x1 = 40;
float   y1 = 40;
// Fill 3 over-lapping circles. Each circle is a different color.
g.FillEllipse(trnsRedBrush, x1, y1, 2*triHeight, 2*triHeight);
g.FillEllipse(trnsGreenBrush, x1 + triBase/2, y1 + triHeight,
2*triHeight, 2*triHeight);
g.FillEllipse(trnsBlueBrush, x1 + triBase, y1, 2*triHeight, 2*triHeight);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Color.FromArgb(System.Int32,System.Drawing.Color)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Color"/> structure from the specified <see cref="T:System.Drawing.Color"/> structure, but with the new specified alpha value. Although this method allows a 32-bit value to be passed for the alpha value, the value is limited to 8 bits.</para>
      </summary>
      <param name="alpha">
        The alpha value for the new <see cref="T:System.Drawing.Color"/> structure. Valid values are 0 through 255.
      </param>
      <param name="baseColor">
        The <see cref="T:System.Drawing.Color"/> structure from which to create the new <see cref="T:System.Drawing.Color"/> structure.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Color"/> structure that this method creates.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates <see cref="T:System.Drawing.Color"/> structures from the three color component values (red, green, blue). Three <see cref="T:System.Drawing.Color"/> structures are created, one for each primary color.</term>
          </item>
          <item>
            <term>Iterates through a range of alpha values, changing the alpha value of a color.</term>
          </item>
          <item>
            <term>During each iteration: sets the color of a brush to the modified color and paints a rectangle to show the color.</term>
          </item>
          <item>
            <term>Repeats steps 2 and 3 for each primary color.</term>
          </item>
        </list>
        <para>The alpha value is never fully opaque and the rectangles overlap so you get color-combination effects.</para>
        <code lang="VB">Public Sub FromArgb_2_4(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
&apos; Opaque colors (alpha value defaults to 255 -- max value).
Dim red As Color = Color.FromArgb(255, 0, 0)
Dim green As Color = Color.FromArgb(0, 255, 0)
Dim blue As Color = Color.FromArgb(0, 0, 255)
&apos; Solid brush initialized to red.
Dim myBrush As New SolidBrush(red)
Dim alpha As Integer
Dim x As Integer = 50 &apos; x coordinate of first red rectangle
Dim y As Integer = 50 &apos; y coordinate of first red rectangle
&apos; Fill rectangles with red, varying the alpha value from 25 to 250.
For alpha = 25 To 250 Step 25
myBrush.Color = Color.FromArgb(alpha, red)
g.FillRectangle(myBrush, x, y, 50, 100)
g.FillRectangle(myBrush, x, y + 250, 50, 50)
x += 50
Next alpha
x = 50 &apos; x coordinate of first green rectangle
y += 50 &apos; y coordinate of first green rectangle
&apos; Fill rectangles with green, varying alpha value from 25 to 250.
For alpha = 25 To 250 Step 25
myBrush.Color = Color.FromArgb(alpha, green)
g.FillRectangle(myBrush, x, y, 50, 150)
x += 50
Next alpha
x = 50 &apos; x coordinate of first blue rectangle
y += 100 &apos; y coordinate of first blue rectangle
&apos; Fill rectangles with blue, varying alpha value from 25 to 250.
For alpha = 25 To 250 Step 25
myBrush.Color = Color.FromArgb(alpha, blue)
g.FillRectangle(myBrush, x, y, 50, 150)
x += 50
Next alpha
End Sub
        </code>
        <code lang="C#">public void FromArgb_2_4(PaintEventArgs e)
{
Graphics     g = e.Graphics;
// Opaque colors (alpha value defaults to 255 -- max value).
Color red = Color.FromArgb(255, 0, 0);
Color green = Color.FromArgb(0, 255, 0);
Color blue = Color.FromArgb(0, 0, 255);
// Solid brush initialized to red.
SolidBrush  myBrush = new SolidBrush(red);
int alpha;
int x = 50;         // x coordinate of first red rectangle
int y = 50;         // y coordinate of first red rectangle
// Fill rectangles with red, varying the alpha value from 25 to 250.
for (alpha = 25; alpha &lt;= 250; alpha += 25)
{
myBrush.Color = Color.FromArgb(alpha, red);
g.FillRectangle(myBrush, x, y, 50, 100);
g.FillRectangle(myBrush, x, y + 250, 50, 50);
x += 50;
}
x = 50;             // x coordinate of first green rectangle
y += 50;            // y coordinate of first green rectangle
// Fill rectangles with green, varying the alpha value from 25 to 250.
for (alpha = 25; alpha &lt;= 250; alpha += 25)
{
myBrush.Color = Color.FromArgb(alpha, green);
g.FillRectangle(myBrush, x, y, 50, 150);
x += 50;
}
x = 50;             // x coordinate of first blue rectangle
y += 100;           // y coordinate of first blue rectangle
// Fill rectangles with blue, varying the alpha value from 25 to 250.
for (alpha = 25; alpha &lt;= 250; alpha += 25)
{
myBrush.Color = Color.FromArgb(alpha, blue);
g.FillRectangle(myBrush, x, y, 50, 150);
x += 50;
}
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Color.FromArgb(System.Int32)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Color"/> structure from a 32-bit ARGB value.</para>
      </summary>
      <param name="argb">
        A value specifying the 32-bit ARGB value.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Color"/> structure that this method creates.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint "/>event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates three brushes, each a different color. Each <see cref="T:System.Drawing.Color"/> structure that is used to create a brush is created from a 32-bit ARGB value.</term>
          </item>
          <item>
            <term>Uses an imaginary triangle to position three circles.</term>
          </item>
          <item>
            <term>Paints three overlapping circles, each centered on one vertex of the triangle, using a different brush for each circle.</term>
          </item>
        </list>
        <code lang="VB">Public Sub FromArgb_3(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
&apos; Transparent red, green, and blue brushes.
Dim trnsRedBrush As New SolidBrush(Color.FromArgb(&amp;H78FF0000))
Dim trnsGreenBrush As New SolidBrush(Color.FromArgb(&amp;H7800FF00))
Dim trnsBlueBrush As New SolidBrush(Color.FromArgb(&amp;H780000FF))
&apos; Base and height of the triangle that is used to position the
&apos; circles. Each vertex of the triangle is at the center of one of
&apos; the 3 circles. The base is equal to the diameter of the circle.
Dim triBase As Single = 100
Dim triHeight As Single = CSng(Math.Sqrt((3 *(triBase * _
triBase) / 4)))
&apos; Coordinates of first circle&apos;s bounding rectangle.
Dim x1 As Single = 40
Dim y1 As Single = 40
&apos; Fill 3 over-lapping circles. Each circle is a different color.
g.FillEllipse(trnsRedBrush, x1, y1, 2 * triHeight, 2 * triHeight)
g.FillEllipse(trnsGreenBrush, x1 + triBase / 2, y1 + triHeight, _
2 * triHeight, 2 * triHeight)
g.FillEllipse(trnsBlueBrush, x1 + triBase, y1, 2 * triHeight, _
2 * triHeight)
End Sub
        </code>
        <code lang="C#">public void FromArgb_3(PaintEventArgs e)
{
Graphics     g = e.Graphics;
// Transparent red, green, and blue brushes.
SolidBrush trnsRedBrush = new SolidBrush(Color.FromArgb(0x78FF0000));
SolidBrush trnsGreenBrush = new SolidBrush(Color.FromArgb(0x7800FF00));
SolidBrush trnsBlueBrush = new SolidBrush(Color.FromArgb(0x780000FF));
// Base and height of the triangle that is used to position the
// circles. Each vertex of the triangle is at the center of one of the
// 3 circles. The base is equal to the diameter of the circles.
float   triBase = 100;
float   triHeight = (float)Math.Sqrt(3*(triBase*triBase)/4);
// coordinates of first circle&apos;s bounding rectangle.
float   x1 = 40;
float   y1 = 40;
// Fill 3 over-lapping circles. Each circle is a different color.
g.FillEllipse(trnsRedBrush, x1, y1, 2*triHeight, 2*triHeight);
g.FillEllipse(trnsGreenBrush, x1 + triBase/2, y1 + triHeight,
2*triHeight, 2*triHeight);
g.FillEllipse(trnsBlueBrush, x1 + triBase, y1, 2*triHeight, 2*triHeight);
}
        </code>
      </example>
      <remarks>
        <para>The byte-ordering of the 32-bit ARGB value is AARRGGBB. The most significant byte (MSB), represented by AA, is the alpha component value. The second, third, and fourth bytes, represented by RR, GG, and BB, respectively, are the color components red, green, and blue, respectively.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Color.FromArgb(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Color"/> structure from the specified 8-bit color values (red, green, and blue). The alpha value is implicitly 255 (fully opaque). Although this method allows a 32-bit value to be passed for each color component, the value of each component is limited to 8 bits.</para>
      </summary>
      <param name="red">
        The red component value for the new <see cref="T:System.Drawing.Color"/> structure. Valid values are 0 through 255.
      </param>
      <param name="green">
        The green component value for the new <see cref="T:System.Drawing.Color"/> structure. Valid values are 0 through 255.
      </param>
      <param name="blue">
        The blue component value for the new <see cref="T:System.Drawing.Color"/> structure. Valid values are 0 through 255.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Color"/> structure that this method creates.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates <see cref="T:System.Drawing.Color"/> structures from the three color component values (red, green, blue). Three <see cref="T:System.Drawing.Color"/> structures are created, one for each primary color.</term>
          </item>
          <item>
            <term>Iterates through a range of alpha values, changing the alpha value of a color.</term>
          </item>
          <item>
            <term>During each iteration: sets the color of a brush to the modified color and paints a rectangle to show the color.</term>
          </item>
          <item>
            <term>Repeats steps 2 and 3 for each primary color.</term>
          </item>
        </list>
        <para>The alpha value is never fully opaque and the rectangles overlap so you get color-combination effects.</para>
        <code lang="VB">Public Sub FromArgb_2_4(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
&apos; Opaque colors (alpha value defaults to 255 -- max value).
Dim red As Color = Color.FromArgb(255, 0, 0)
Dim green As Color = Color.FromArgb(0, 255, 0)
Dim blue As Color = Color.FromArgb(0, 0, 255)
&apos; Solid brush initialized to red.
Dim myBrush As New SolidBrush(red)
Dim alpha As Integer
Dim x As Integer = 50 &apos; x coordinate of first red rectangle
Dim y As Integer = 50 &apos; y coordinate of first red rectangle
&apos; Fill rectangles with red, varying the alpha value from 25 to 250.
For alpha = 25 To 250 Step 25
myBrush.Color = Color.FromArgb(alpha, red)
g.FillRectangle(myBrush, x, y, 50, 100)
g.FillRectangle(myBrush, x, y + 250, 50, 50)
x += 50
Next alpha
x = 50 &apos; x coordinate of first green rectangle
y += 50 &apos; y coordinate of first green rectangle
&apos; Fill rectangles with green, varying alpha value from 25 to 250.
For alpha = 25 To 250 Step 25
myBrush.Color = Color.FromArgb(alpha, green)
g.FillRectangle(myBrush, x, y, 50, 150)
x += 50
Next alpha
x = 50 &apos; x coordinate of first blue rectangle
y += 100 &apos; y coordinate of first blue rectangle
&apos; Fill rectangles with blue, varying alpha value from 25 to 250.
For alpha = 25 To 250 Step 25
myBrush.Color = Color.FromArgb(alpha, blue)
g.FillRectangle(myBrush, x, y, 50, 150)
x += 50
Next alpha
End Sub
        </code>
        <code lang="C#">public void FromArgb_2_4(PaintEventArgs e)
{
Graphics     g = e.Graphics;
// Opaque colors (alpha value defaults to 255 -- max value).
Color red = Color.FromArgb(255, 0, 0);
Color green = Color.FromArgb(0, 255, 0);
Color blue = Color.FromArgb(0, 0, 255);
// Solid brush initialized to red.
SolidBrush  myBrush = new SolidBrush(red);
int alpha;
int x = 50;         // x coordinate of first red rectangle
int y = 50;         // y coordinate of first red rectangle
// Fill rectangles with red, varying the alpha value from 25 to 250.
for (alpha = 25; alpha &lt;= 250; alpha += 25)
{
myBrush.Color = Color.FromArgb(alpha, red);
g.FillRectangle(myBrush, x, y, 50, 100);
g.FillRectangle(myBrush, x, y + 250, 50, 50);
x += 50;
}
x = 50;             // x coordinate of first green rectangle
y += 50;            // y coordinate of first green rectangle
// Fill rectangles with green, varying the alpha value from 25 to 250.
for (alpha = 25; alpha &lt;= 250; alpha += 25)
{
myBrush.Color = Color.FromArgb(alpha, green);
g.FillRectangle(myBrush, x, y, 50, 150);
x += 50;
}
x = 50;             // x coordinate of first blue rectangle
y += 100;           // y coordinate of first blue rectangle
// Fill rectangles with blue, varying the alpha value from 25 to 250.
for (alpha = 25; alpha &lt;= 250; alpha += 25)
{
myBrush.Color = Color.FromArgb(alpha, blue);
g.FillRectangle(myBrush, x, y, 50, 150);
x += 50;
}
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Color"/> structure from the specified pre-defined color.</para>
      </summary>
      <param name="color">
        An element of the <see cref="T:System.Drawing.KnownColor"/> enumeration.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Color"/> structure that this method creates.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an instance of a <see cref="T:System.Drawing.Color"/> structure, <paramref name="redShade"/>, to be used for comparisons.</term>
          </item>
          <item>
            <term>Iterates through the <see cref="T:System.Drawing.KnownColor"/> enumeration elements to find all <see langword="KnownColors"/> that have the same brightness as <paramref name="redShade"/>. The iterations are terminated when 15 matches are found or the value of the loop counter is greater than the last <see cref="T:System.Drawing.KnownColor"/> element.</term>
          </item>
          <item>
            <term>During each iteration: saves the <see cref="T:System.Drawing.KnownColor"/> element, if it matches the criteria, in an array.</term>
          </item>
          <item>
            <term>Uses a brush to paint rectangles.</term>
          </item>
        </list>
        <para>The first rectangle is painted the color represented by <paramref name="redShade"/>. Each of the other rectangles is painted a <see cref="T:System.Drawing.KnownColor"/> that matches the brightness of the <paramref name="redShade"/>.</para>
        <code lang="VB">Public Sub KnownColorBrightnessExample(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
&apos; Color structures. One is used for temporary storage. The other
&apos; is a constant used for comparisons.
Dim someColor As Color = Color.FromArgb(0)
Dim redShade As Color = Color.FromArgb(255, 200, 0, 100)
&apos; Array to store KnownColor values that match the brightness of the
&apos; redShade color.
Dim colorMatches(15) As KnownColor
Dim count As Integer = 0 &apos; number of matches found
&apos; iterate through the KnownColor enums until 15 matches are found.
Dim enumValue As KnownColor
For enumValue = 0 To KnownColor.YellowGreen
someColor = Color.FromKnownColor(enumValue)
If (someColor.GetBrightness()) = (redShade.GetBrightness()) Then
colorMatches(count) = enumValue
count += 1
If count &gt; 15 Then
Exit For
End If
End If
Next enumValue
&apos; Display the redShade color and its argb value.
Dim myBrush1 As New SolidBrush(redShade)
Dim myFont As New Font(&quot;Arial&quot;, 12)
Dim x As Integer = 20
Dim y As Integer = 20
someColor = redShade
g.FillRectangle(myBrush1, x, y, 100, 30)
g.DrawString(someColor.ToString(), myFont, Brushes.Black, _
x + 120, y)
&apos; Iterate through the matches that were found and display each
&apos; color that corresponds with the enum value in the array.
&apos; Display the name of the KnownColor.
Dim i As Integer
For i = 0 To count - 1
y += 40
someColor = Color.FromKnownColor(colorMatches(i))
myBrush1.Color = someColor
g.FillRectangle(myBrush1, x, y, 100, 30)
g.DrawString(someColor.ToString(), myFont, Brushes.Black, _
x + 120, y)
Next i
End Sub
        </code>
        <code lang="C#">public void KnownColorBrightnessExample(PaintEventArgs e)
{
Graphics     g = e.Graphics;
// Color structures. One is a variable used for temporary storage. The other
// is a constant used for comparisons.
Color   someColor = Color.FromArgb(0);
Color   redShade = Color.FromArgb(255, 200, 0, 100);
// Array to store KnownColor values that match the brightness of the
// redShade color.
KnownColor[]  colorMatches = new KnownColor[15];
int  count = 0;   // number of matches found
// Iterate through the KnownColor enums until 15 matches are found.
for (KnownColor enumValue = 0;
enumValue &lt;= KnownColor.YellowGreen &amp;&amp; count &lt; 15; enumValue++)
{
someColor = Color.FromKnownColor(enumValue);
if ( someColor.GetBrightness() == redShade.GetBrightness() )
colorMatches[count++] = enumValue;
}
// Display the redShade color and its argb value.
SolidBrush  myBrush1 = new SolidBrush(redShade);
Font        myFont = new Font(&quot;Arial&quot;, 12);
int         x = 20;
int         y = 20;
someColor = redShade;
g.FillRectangle(myBrush1, x, y, 100, 30);
g.DrawString(someColor.ToString(), myFont, Brushes.Black, x + 120, y);
// Iterate through the matches that were found and display each color that
// Corresponds with the enum value in the array. also display the name of
// The KnownColor.
for ( int i = 0; i &lt; count; i++)
{
y += 40;
someColor = Color.FromKnownColor(colorMatches[i]);
myBrush1.Color = someColor;
g.FillRectangle(myBrush1, x, y, 100, 30);
g.DrawString(someColor.ToString(), myFont, Brushes.Black, x + 120, y);
}
}
        </code>
      </example>
      <remarks>
        <para>A pre-defined color is also called a known color and is represented by an element of the <see cref="T:System.Drawing.KnownColor"/> enumeration.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Color.FromName(System.String)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Color"/> structure from the specified name of a pre-defined color.</para>
      </summary>
      <param name="name">
        A string that is the name of a pre-defined color. Valid names are the same as the names of the elements of the <see cref="T:System.Drawing.KnownColor"/> enumeration.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Color"/> structure that this method creates.</para>
      </returns>
      <remarks>
        <para>A pre-defined color is also called a known color and is represented by an element of the <see cref="T:System.Drawing.KnownColor"/> enumeration. If <paramref name="name"/> is not the valid name of a pre-defined color, the <see langword="FromName"/> method creates a <see cref="T:System.Drawing.Color"/> structure that has an ARGB value of zero (that is, all ARGB components are 0).</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Color.GetBrightness">
      <summary>
        <para>Gets the hue-saturation-brightness (HSB) brightness value for this <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <returns>
        <para>The brightness of this <see cref="T:System.Drawing.Color"/> structure. The brightness ranges from 0.0 through 1.0, where 0.0 represents black and 1.0 represents white.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint "/>event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an instance of a <see cref="T:System.Drawing.Color"/> structure, <paramref name="redShade"/>, to be used for comparisons.</term>
          </item>
          <item>
            <term>Iterates through the <see cref="T:System.Drawing.KnownColor"/> enumeration elements to find all <see langword="KnownColors"/> that have the same brightness as <paramref name="redShade"/>. The iterations are terminated when 15 matches are found or the value of the loop counter is greater than the last <see cref="T:System.Drawing.KnownColor"/> element.</term>
          </item>
          <item>
            <term>During each iteration: saves the <see cref="T:System.Drawing.KnownColor"/> element, if it matches the criteria, in an array.</term>
          </item>
          <item>
            <term>Uses a brush to paint rectangles.</term>
          </item>
        </list>
        <para>The first rectangle is painted the color represented by <paramref name="redShade"/>. Each of the other rectangles is painted a <see cref="T:System.Drawing.KnownColor"/> that matches the brightness of the <paramref name="redShade"/>.</para>
        <code lang="VB">Public Sub KnownColorBrightnessExample(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
&apos; Color structures. One is used for temporary storage. The other
&apos; is a constant used for comparisons.
Dim someColor As Color = Color.FromArgb(0)
Dim redShade As Color = Color.FromArgb(255, 200, 0, 100)
&apos; Array to store KnownColor values that match the brightness of the
&apos; redShade color.
Dim colorMatches(15) As KnownColor
Dim count As Integer = 0 &apos; number of matches found
&apos; iterate through the KnownColor enums until 15 matches are found.
Dim enumValue As KnownColor
For enumValue = 0 To KnownColor.YellowGreen
someColor = Color.FromKnownColor(enumValue)
If (someColor.GetBrightness()) = (redShade.GetBrightness()) Then
colorMatches(count) = enumValue
count += 1
If count &gt; 15 Then
Exit For
End If
End If
Next enumValue
&apos; Display the redShade color and its argb value.
Dim myBrush1 As New SolidBrush(redShade)
Dim myFont As New Font(&quot;Arial&quot;, 12)
Dim x As Integer = 20
Dim y As Integer = 20
someColor = redShade
g.FillRectangle(myBrush1, x, y, 100, 30)
g.DrawString(someColor.ToString(), myFont, Brushes.Black, _
x + 120, y)
&apos; Iterate through the matches that were found and display each
&apos; color that corresponds with the enum value in the array.
&apos; Display the name of the KnownColor.
Dim i As Integer
For i = 0 To count - 1
y += 40
someColor = Color.FromKnownColor(colorMatches(i))
myBrush1.Color = someColor
g.FillRectangle(myBrush1, x, y, 100, 30)
g.DrawString(someColor.ToString(), myFont, Brushes.Black, _
x + 120, y)
Next i
End Sub
        </code>
        <code lang="C#">public void KnownColorBrightnessExample(PaintEventArgs e)
{
Graphics     g = e.Graphics;
// Color structures. One is a variable used for temporary storage. The other
// is a constant used for comparisons.
Color   someColor = Color.FromArgb(0);
Color   redShade = Color.FromArgb(255, 200, 0, 100);
// Array to store KnownColor values that match the brightness of the
// redShade color.
KnownColor[]  colorMatches = new KnownColor[15];
int  count = 0;   // number of matches found
// Iterate through the KnownColor enums until 15 matches are found.
for (KnownColor enumValue = 0;
enumValue &lt;= KnownColor.YellowGreen &amp;&amp; count &lt; 15; enumValue++)
{
someColor = Color.FromKnownColor(enumValue);
if ( someColor.GetBrightness() == redShade.GetBrightness() )
colorMatches[count++] = enumValue;
}
// display the redShade color and its argb value.
SolidBrush  myBrush1 = new SolidBrush(redShade);
Font        myFont = new Font(&quot;Arial&quot;, 12);
int         x = 20;
int         y = 20;
someColor = redShade;
g.FillRectangle(myBrush1, x, y, 100, 30);
g.DrawString(someColor.ToString(), myFont, Brushes.Black, x + 120, y);
// Iterate through the matches that were found and display each color that
// corresponds with the enum value in the array. also display the name of
// The KnownColor.
for ( int i = 0; i &lt; count; i++)
{
y += 40;
someColor = Color.FromKnownColor(colorMatches[i]);
myBrush1.Color = someColor;
g.FillRectangle(myBrush1, x, y, 100, 30);
g.DrawString(someColor.ToString(), myFont, Brushes.Black, x + 120, y);
}
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Color.GetHashCode">
      <summary>
        <para>Returns a hash code for this <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <returns>
        <para>An integer value that specifies the hash code for this <see cref="T:System.Drawing.Color"/> structure.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Color.GetHue">
      <summary>
        <para>Gets the hue-saturation-brightness (HSB) hue value, in degrees, for this <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <returns>
        <para>The hue, in degrees, of this <see cref="T:System.Drawing.Color"/> structure. The hue is measured in degrees, ranging from 0.0 through 360.0, in HSB color space.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an instance of a <see cref="T:System.Drawing.Color"/> structure, <paramref name="redShade"/>, to be used for comparisons.</term>
          </item>
          <item>
            <term>Iterates through the <see cref="T:System.Drawing.KnownColor"/> enumeration elements to find all <see langword="KnownColors"/> that have the same hue as <paramref name="redShade"/>. The iterations are terminated when 15 matches are found or the value of the loop counter is greater than the last <see cref="T:System.Drawing.KnownColor"/> element.</term>
          </item>
          <item>
            <term>During each iteration: saves the <see cref="T:System.Drawing.KnownColor"/> element, if it matches the criteria, in an array.</term>
          </item>
          <item>
            <term>Uses a brush to paint rectangles.</term>
          </item>
        </list>
        <para>The first rectangle is painted the color represented by <paramref name="redShade"/>. Each of the other rectangles is painted a <see cref="T:System.Drawing.KnownColor"/> that matches the hue of the <paramref name="redShade"/>.</para>
        <code lang="VB">Public Sub GetHueExample(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
&apos; Color structures. One is used for temporary storage. The other
&apos; is a constant used for comparisons.
Dim someColor As Color = Color.FromArgb(0)
Dim redShade As Color = Color.FromArgb(255, 200, 0, 100)
&apos; Array for KnownColor values that match the hue of redShade
&apos; color.
Dim colorMatches(15) As KnownColor
Dim count As Integer = 0 &apos; number of matches found
&apos; Iterate through the KnownColor enums until 15 matches are found.
Dim enumValue As KnownColor
For enumValue = 0 To KnownColor.YellowGreen
someColor = Color.FromKnownColor(enumValue)
If (someColor.GetHue()) = (redShade.GetHue()) Then
colorMatches(count) = enumValue
count += 1
If count &gt; 15 Then
Exit For
End If
End If
Next enumValue
&apos; Display the redShade color and its argb value.
Dim myBrush1 As New SolidBrush(redShade)
Dim myFont As New Font(&quot;Arial&quot;, 12)
Dim x As Integer = 20
Dim y As Integer = 20
someColor = redShade
g.FillRectangle(myBrush1, x, y, 100, 30)
g.DrawString(someColor.ToString(), myFont, Brushes.Black, _
x + 120, y)
&apos; Iterate through the matches that were found and display each
&apos; color that corresponds with the enum value in the array. Also
&apos; display the name of the KnownColor.
Dim i As Integer
For i = 0 To count - 1
y += 40
someColor = Color.FromKnownColor(colorMatches(i))
myBrush1.Color = someColor
g.FillRectangle(myBrush1, x, y, 100, 30)
g.DrawString(someColor.ToString(), myFont, Brushes.Black, _
x + 120, y)
Next i
End Sub
        </code>
        <code lang="C#">public void GetHueExample(PaintEventArgs e)
{
Graphics     g = e.Graphics;
// Color structures. One is a variable used for temporary storage. The other
// is a constant used for comparisons.
Color   someColor = Color.FromArgb(0);
Color   redShade = Color.FromArgb(255, 200, 0, 100);
// Array to store KnownColor values that match the hue of the redShade
// color.
KnownColor[]  colorMatches = new KnownColor[15];
int  count = 0;   // number of matches found
// Iterate through the KnownColor enums until 15 matches are found.
for (KnownColor enumValue = 0;
enumValue &lt;= KnownColor.YellowGreen &amp;&amp; count &lt; 15; enumValue++)
{
someColor = Color.FromKnownColor(enumValue);
if ( someColor.GetHue() == redShade.GetHue() )
colorMatches[count++] = enumValue;
}
// Display the redShade color and its argb value.
SolidBrush  myBrush1 = new SolidBrush(redShade);
Font        myFont = new Font(&quot;Arial&quot;, 12);
int         x = 20;
int         y = 20;
someColor = redShade;
g.FillRectangle(myBrush1, x, y, 100, 30);
g.DrawString(someColor.ToString(), myFont, Brushes.Black, x + 120, y);
// Iterate through the matches that were found and display each color that
// corresponds with the enum value in the array. also display the name of
// the KnownColor.
for ( int i = 0; i &lt; count; i++)
{
y += 40;
someColor = Color.FromKnownColor(colorMatches[i]);
myBrush1.Color = someColor;
g.FillRectangle(myBrush1, x, y, 100, 30);
g.DrawString(someColor.ToString(), myFont, Brushes.Black, x + 120, y);
}
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Color.GetSaturation">
      <summary>
        <para>Gets the hue-saturation-brightness (HSB) saturation value for this <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <returns>
        <para>The saturation of this <see cref="T:System.Drawing.Color"/> structure. The saturation ranges from 0.0 through 1.0, where 0.0 is grayscale and 1.0 is the most saturated.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an instance of a <see cref="T:System.Drawing.Color"/> structure, <paramref name="redShade"/>, to be used for comparisons.</term>
          </item>
          <item>
            <term>Iterates through the <see cref="T:System.Drawing.KnownColor"/> enumeration elements to find all known colors that have the same saturation as <paramref name="redShade"/>. The iterations are terminated when 15 matches are found or the value of the loop counter is greater than the last <see cref="T:System.Drawing.KnownColor"/> element.</term>
          </item>
          <item>
            <term>During each iteration, saves the <see cref="T:System.Drawing.KnownColor"/> element, if it matches the criteria, in an array.</term>
          </item>
          <item>
            <term>Uses a brush to paint rectangles.</term>
          </item>
        </list>
        <para>The first rectangle is painted the color represented by <paramref name="redShade"/>. Each of the other rectangles is painted a <see cref="T:System.Drawing.KnownColor"/> that matches the saturation of the <paramref name="redShade"/>.</para>
        <code lang="VB">Public Sub GetSatExample(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
&apos; Color structures. One is used for temporary storage. The other
&apos; is a constant used for comparisons.
Dim someColor As Color = Color.FromArgb(0)
Dim redShade As Color = Color.FromArgb(255, 200, 0, 100)
&apos; Array to store KnownColor values that match the saturation of the
&apos; redShade color.
Dim colorMatches(15) As KnownColor
Dim count As Integer = 0 &apos; number of matches found
&apos; Iterate through the KnownColor enums until 15 matches are found
Dim enumValue As KnownColor
For enumValue = 0 To KnownColor.YellowGreen
someColor = Color.FromKnownColor(enumValue)
If (someColor.GetSaturation()) = (redShade.GetSaturation()) Then
colorMatches(count) = enumValue
count += 1
If count &gt; 15 Then
Exit For
End If
End If
Next enumValue
&apos; Display the redShade color and its argb value.
Dim myBrush1 As New SolidBrush(redShade)
Dim myFont As New Font(&quot;Arial&quot;, 12)
Dim x As Integer = 20
Dim y As Integer = 20
someColor = redShade
g.FillRectangle(myBrush1, x, y, 100, 30)
g.DrawString(someColor.ToString(), myFont, Brushes.Black, _
x + 120, y)
&apos; Iterate through the matches that were found and display each
&apos; color that corresponds with the enum value in the array. also
&apos; display the name of the KnownColor.
Dim i As Integer
For i = 0 To count - 1
y += 40
someColor = Color.FromKnownColor(colorMatches(i))
myBrush1.Color = someColor
g.FillRectangle(myBrush1, x, y, 100, 30)
g.DrawString(someColor.ToString(), myFont, Brushes.Black, _
x + 120, y)
Next i
End Sub
        </code>
        <code lang="C#">public void GetSatExample(PaintEventArgs e)
{
Graphics     g = e.Graphics;
// Color structures. One is a variable used for temporary storage. The other
// is a constant used for comparisons.
Color   someColor = Color.FromArgb(0);
Color   redShade = Color.FromArgb(255, 200, 0, 100);
// Array to store KnownColor values that match the saturation of the
// redShade color.
KnownColor[]  colorMatches = new KnownColor[15];
int  count = 0;   // number of matches found
// Iterate through the KnownColor enums until 15 matches are found.
for (KnownColor enumValue = 0;
enumValue &lt;= KnownColor.YellowGreen &amp;&amp; count &lt; 15; enumValue++)
{
someColor = Color.FromKnownColor(enumValue);
if ( someColor.GetSaturation() == redShade.GetSaturation() )
colorMatches[count++] = enumValue;
}
// Display the redShade color and its argb value.
SolidBrush  myBrush1 = new SolidBrush(redShade);
Font        myFont = new Font(&quot;Arial&quot;, 12);
int         x = 20;
int         y = 20;
someColor = redShade;
g.FillRectangle(myBrush1, x, y, 100, 30);
g.DrawString(someColor.ToString(), myFont, Brushes.Black, x + 120, y);
// Iterate through the matches that were found and display each color that
// corresponds with the enum value in the array. also display the name of
// the KnownColor.
for ( int i = 0; i &lt; count; i++)
{
y += 40;
someColor = Color.FromKnownColor(colorMatches[i]);
myBrush1.Color = someColor;
g.FillRectangle(myBrush1, x, y, 100, 30);
g.DrawString(someColor.ToString(), myFont, Brushes.Black, x + 120, y);
}
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Color.ToArgb">
      <summary>
        <para>Gets the 32-bit ARGB value of this <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <returns>
        <para>The 32-bit ARGB value of this <see cref="T:System.Drawing.Color"/> structure.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Iterates through the <see cref="T:System.Drawing.KnownColor"/> enumeration elements to find all known colors that have a nonzero green component and a zero-value red component, and that are not system colors.</term>
          </item>
          <item>
            <term>During each iteration: saves the <see cref="T:System.Drawing.KnownColor"/> element, if it matches the criteria, in an array.</term>
          </item>
          <item>
            <term>Uses a brush to paint rectangles.</term>
          </item>
        </list>
        <para>Each of the rectangles is painted a <see cref="T:System.Drawing.KnownColor"/> that matches the criteria stated in the first step. The name of the KnownColor and its component values are also displayed.</para>
        <para>This example displays certain known colors, the names of the colors, and their four component values. Use of the <see langword="ToArgb"/> method is a preliminary step to displaying the component values.</para>
        <code lang="VB">Public Sub ToArgbToStringExample(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
&apos; Color structure used for temporary storage.
Dim someColor As Color = Color.FromArgb(0)
&apos; Array to store KnownColor values that match the criteria.
Dim colorMatches(167) As KnownColor
Dim count As Integer = 0 &apos; number of matches found
&apos; Iterate through KnownColor enums to find all corresponding colors
&apos; that have a non-zero green component and zero-valued red
&apos; component and that are not system colors.
Dim enumValue As KnownColor
For enumValue = 0 To KnownColor.YellowGreen
someColor = Color.FromKnownColor(enumValue)
If someColor.G &lt;&gt; 0 And someColor.R = 0 And _
Not someColor.IsSystemColor Then
colorMatches(count) = enumValue
count += 1
End If
Next enumValue
Dim myBrush1 As New SolidBrush(someColor)
Dim myFont As New Font(&quot;Arial&quot;, 9)
Dim x As Integer = 40
Dim y As Integer = 40
&apos; Iterate through the matches found and display each color that
&apos; corresponds with the enum value in the array. Also display the
&apos; name of the KnownColor and the ARGB components.
Dim i As Integer
For i = 0 To count - 1
&apos; Display the color.
someColor = Color.FromKnownColor(colorMatches(i))
myBrush1.Color = someColor
g.FillRectangle(myBrush1, x, y, 50, 30)
&apos; Display KnownColor name and four component values. To display
&apos; component values:  Use the ToArgb method to get the 32-bit
&apos; ARGB value of someColor (created from a KnownColor). Create
&apos; a Color structure from the 32-bit ARGB value and set someColor
&apos; equal to this new Color structure. Then use the ToString method
&apos; to convert it to a string.
g.DrawString(someColor.ToString(), myFont, Brushes.Black, _
x + 55, y)
someColor = Color.FromArgb(someColor.ToArgb())
g.DrawString(someColor.ToString(), myFont, Brushes.Black, _
x + 55, y + 15)
y += 40
Next i
End Sub
        </code>
        <code lang="C#">public void ToArgbToStringExample(PaintEventArgs e)
{
Graphics     g = e.Graphics;
// Color structure used for temporary storage.
Color   someColor = Color.FromArgb(0);
// Array to store KnownColor values that match the criteria.
KnownColor[]  colorMatches = new KnownColor[167];
int  count = 0;   // number of matches found
// Iterate through the KnownColor enums to find all corresponding colors
// that have a nonzero green component and zero-value red component and
// that are not system colors.
for (KnownColor enumValue = 0;
enumValue &lt;= KnownColor.YellowGreen; enumValue++)
{
someColor = Color.FromKnownColor(enumValue);
if ( someColor.G != 0 &amp;&amp; someColor.R == 0 &amp;&amp; !someColor.IsSystemColor )
colorMatches[count++] = enumValue;
}
SolidBrush  myBrush1 = new SolidBrush(someColor);
Font        myFont = new Font(&quot;Arial&quot;, 9);
int         x = 40;
int         y = 40;
// Iterate through the matches that were found and display each color that
// corresponds with the enum value in the array. also display the name of
// the KnownColor and the ARGB components.
for ( int i = 0; i &lt; count; i++)
{
// Display the color.
someColor = Color.FromKnownColor(colorMatches[i]);
myBrush1.Color = someColor;
g.FillRectangle(myBrush1, x, y, 50, 30);
// Display KnownColor name and the four component values. To display the
// component values:  Use the ToArgb method to get the 32-bit ARGB value
// of someColor, which was created from a KnownColor. Then create a
// Color structure from the 32-bit ARGB value and set someColor equal to
// this new Color structure. Then use the ToString method to convert it to
// a string.
g.DrawString(someColor.ToString(), myFont, Brushes.Black, x + 55, y);
someColor = Color.FromArgb(someColor.ToArgb());
g.DrawString(someColor.ToString(), myFont, Brushes.Black, x + 55, y + 15);
y += 40;
}
}
        </code>
      </example>
      <remarks>
        <para>The byte-ordering of the 32-bit ARGB value is AARRGGBB. The most significant byte (MSB), represented by AA, is the alpha component value. The second, third, and fourth bytes, represented by RR, GG, and BB, respectively, are the color components red, green, and blue, respectively. For example, suppose that a color is created from the four component values. The <see langword="ToArgb"/> method can be used to obtain the 32-bit ARGB value as follows:</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Color.ToKnownColor">
      <summary>
        <para>Gets the <see cref="T:System.Drawing.KnownColor"/> value of this <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <returns>
        <para>An element of the <see cref="T:System.Drawing.KnownColor"/> enumeration, if the <see cref="T:System.Drawing.Color"/> structure is created from a pre-defined color by using either the <see langword="FromName"/> method or the <see langword="FromKnownColor"/> method; otherwise, zero.</para>
      </returns>
      <remarks>
        <para>A pre-defined color is also called a known color and is represented by an element of the <see cref="T:System.Drawing.KnownColor"/> enumeration. When the <see langword="ToKnownColor"/> method is applied to a <see cref="T:System.Drawing.Color"/> structure that is created by using the <see langword="FromArgb"/> method, the <see langword="ToKnownColor"/> method returns zero, even if the ARGB value matches the ARGB value of a pre-defined color. The <see langword="ToKnownColor"/> method also returns zero when it is applied to a <see cref="T:System.Drawing.Color"/> structure that is created by using the <see langword="FromName"/> method with an invalid string name.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Color.ToString">
      <summary>
        <para>Converts this <see cref="T:System.Drawing.Color"/> structure to a human-readable string.</para>
      </summary>
      <returns>
        <para>A string that is the name of the color of this <see cref="T:System.Drawing.Color"/> structure, if the <see cref="T:System.Drawing.Color"/> structure is created from a pre-defined color by using either the <see langword="FromName"/> method or the <see langword="FromKnownColor"/> method; otherwise, a string that consists of the ARGB component names and their values.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Iterates through the <see cref="T:System.Drawing.KnownColor"/> enumeration elements to find all known colors that have a nonzero green component and a zero-value red component and that are not system colors.</term>
          </item>
          <item>
            <term>During each iteration: saves the <see cref="T:System.Drawing.KnownColor"/> element, if it matches the criteria, in an array.</term>
          </item>
          <item>
            <term>Uses a brush to paint rectangles. Each of the rectangles is painted a <see cref="T:System.Drawing.KnownColor"/> that matches the criteria stated in the first step. The name of the <see cref="T:System.Drawing.KnownColor"/> and its component values are also displayed.</term>
          </item>
        </list>
        <para>This example displays certain known colors and uses the <see langword="ToString"/> method to display the names of the colors and their four component values.</para>
        <code lang="VB">Public Sub ToArgbToStringExample(e As PaintEventArgs)
Dim g As Graphics = e.Graphics
&apos; Color structure used for temporary storage.
Dim someColor As Color = Color.FromArgb(0)
&apos; Array to store KnownColor values that match the criteria.
Dim colorMatches(167) As KnownColor
Dim count As Integer = 0 &apos; number of matches found
&apos; Iterate through KnownColor enums to find all corresponding colors
&apos; that have a non-zero green component and zero-valued red
&apos; component and that are not system colors.
Dim enumValue As KnownColor
For enumValue = 0 To KnownColor.YellowGreen
someColor = Color.FromKnownColor(enumValue)
If someColor.G &lt;&gt; 0 And someColor.R = 0 And _
Not someColor.IsSystemColor Then
colorMatches(count) = enumValue
count += 1
End If
Next enumValue
Dim myBrush1 As New SolidBrush(someColor)
Dim myFont As New Font(&quot;Arial&quot;, 9)
Dim x As Integer = 40
Dim y As Integer = 40
&apos; Iterate through the matches found and display each color that
&apos; corresponds with the enum value in the array. Also display the
&apos; name of the KnownColor and the ARGB components.
Dim i As Integer
For i = 0 To count - 1
&apos; Display the color
someColor = Color.FromKnownColor(colorMatches(i))
myBrush1.Color = someColor
g.FillRectangle(myBrush1, x, y, 50, 30)
&apos; Display KnownColor name and four component values. To display
&apos; component values:  Use the ToArgb method to get the 32-bit
&apos; ARGB value of someColor (created from a KnownColor). Create
&apos; a Color structure from the 32-bit ARGB value and set someColor
&apos; equal to this new Color structure. Then use the ToString method
&apos; to convert it to a string.
g.DrawString(someColor.ToString(), myFont, Brushes.Black, _
x + 55, y)
someColor = Color.FromArgb(someColor.ToArgb())
g.DrawString(someColor.ToString(), myFont, Brushes.Black, _
x + 55, y + 15)
y += 40
Next i
End Sub
        </code>
        <code lang="C#">public void ToArgbToStringExample(PaintEventArgs e)
{
Graphics     g = e.Graphics;
// Color structure used for temporary storage.
Color   someColor = Color.FromArgb(0);
// Array to store KnownColor values that match the criteria.
KnownColor[]  colorMatches = new KnownColor[167];
int  count = 0;   // number of matches found
// Iterate through the KnownColor enums to find all corresponding colors
// that have a nonzero green component and zero-value red component and
// that are not system colors.
for (KnownColor enumValue = 0;
enumValue &lt;= KnownColor.YellowGreen; enumValue++)
{
someColor = Color.FromKnownColor(enumValue);
if ( someColor.G != 0 &amp;&amp; someColor.R == 0 &amp;&amp; !someColor.IsSystemColor )
colorMatches[count++] = enumValue;
}
SolidBrush  myBrush1 = new SolidBrush(someColor);
Font        myFont = new Font(&quot;Arial&quot;, 9);
int         x = 40;
int         y = 40;
// Iterate through the matches that were found and display each color that
// corresponds with the enum value in the array. also display the name of
// the KnownColor and the ARGB components.
for ( int i = 0; i &lt; count; i++)
{
// Display the color.
someColor = Color.FromKnownColor(colorMatches[i]);
myBrush1.Color = someColor;
g.FillRectangle(myBrush1, x, y, 50, 30);
// Display KnownColor name and the four component values. To display the
// component values:  Use the ToArgb method to get the 32-bit ARGB value
// of someColor, which was created from a KnownColor. Then create a
// Color structure from the 32-bit ARGB value and set someColor equal to
// this new Color structure . Then use the ToString method to convert it to
// a string.
g.DrawString(someColor.ToString(), myFont, Brushes.Black, x + 55, y);
someColor = Color.FromArgb(someColor.ToArgb());
g.DrawString(someColor.ToString(), myFont, Brushes.Black, x + 55, y + 15);
y += 40;
}
}
        </code>
      </example>
      <remarks>
        <para>A pre-defined color is also called a known color and is represented by an element of the <see cref="T:System.Drawing.KnownColor"/> enumeration. When the <see langword="ToString"/> method is applied to a <see cref="T:System.Drawing.Color"/> structure that is created by using the <see langword="FromArgb"/> method, the <see langword="ToString"/> method returns a string that consists of the ARGB component names and their values, even if the ARGB value matches the ARGB value of a pre-defined color.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Color.A">
      <summary>
        <para>Gets the alpha component value of this <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <value>
        <para>The alpha component value of this <see cref="T:System.Drawing.Color"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.AliceBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> object representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.AntiqueWhite">
      <summary>
        <para>Gets a system-defined color .</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> object representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Aqua">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> object representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Aquamarine">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Azure">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.B">
      <summary>
        <para>Gets the blue component value of this <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <value>
        <para>The blue component value of this <see cref="T:System.Drawing.Color"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Beige">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Bisque">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Black">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.BlanchedAlmond">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Blue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.BlueViolet">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Brown">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.BurlyWood">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.CadetBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Chartreuse">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Chocolate">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Coral">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.CornflowerBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Cornsilk">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Crimson">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Cyan">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkCyan">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkGoldenrod">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkGray">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkKhaki">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkMagenta">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkOliveGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkOrange">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkOrchid">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkRed">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkSalmon">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkSeaGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkSlateBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkSlateGray">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkTurquoise">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DarkViolet">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DeepPink">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DeepSkyBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DimGray">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.DodgerBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Firebrick">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.FloralWhite">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.ForestGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Fuchsia">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.G">
      <summary>
        <para>Gets the green component value of this <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <value>
        <para>The green component value of this <see cref="T:System.Drawing.Color"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Gainsboro">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.GhostWhite">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Gold">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Goldenrod">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Gray">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Green">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.GreenYellow">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Honeydew">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.HotPink">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.IndianRed">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Indigo">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.IsEmpty">
      <summary>
        <para>Specifies whether this <see cref="T:System.Drawing.Color"/> structure is uninitialized.</para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> if this color is uninitialized; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.IsKnownColor">
      <summary>
        <para>Specifies whether this <see cref="T:System.Drawing.Color"/> structure is a pre-defined color. Pre-defined colors are represented by the elements of the <see cref="T:System.Drawing.KnownColor"/> enumeration.</para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> if this <see cref="T:System.Drawing.Color"/> structure was created from a pre-defined color by using either the <see langword="FromName"/> method or the <see langword="FromKnownColor"/> method; otherwise, <see langword="false"/>.</para>
      </value>
      <remarks>
        <para>This method does not do a comparison of the ARGB values. Therefore, when the <see langword="IsKnownColor"/> method is applied to a <see cref="T:System.Drawing.Color"/> structure that is created by using the <see langword="FromArgb"/> method, the <see langword="IsKnownColor"/> method returns false, even if the ARGB value matches the ARGB value of a pre-defined color.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Color.IsNamedColor">
      <summary>
        <para>Specifies whether this <see cref="T:System.Drawing.Color"/> structure is a pre-defined color. Pre-defined colors are represented by the elements of the <see cref="T:System.Drawing.KnownColor"/> enumeration.</para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> if this <see cref="T:System.Drawing.Color"/> structure instance was created from a pre-defined color by using either the <see langword="FromName"/> method or the <see langword="FromKnownColor"/> method; otherwise, <see langword="false"/>.</para>
      </value>
      <remarks>
        <para>This property does not do a comparison of the ARGB values. Therefore, when the <see langword="IsNamedColor"/> property is applied to a <see cref="T:System.Drawing.Color"/> structure that is created by using the <see langword="FromArgb"/> method, the <see langword="IsNamedColor"/> property returns false, even if the ARGB value matches the ARGB value of a pre-defined color.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Color.IsSystemColor">
      <summary>
        <para>Specifies whether this <see cref="T:System.Drawing.Color"/> structure is a system color. A system color is a color that is used in a windows display element. System colors are represented by elements of the <see cref="T:System.Drawing.KnownColor"/> enumeration.</para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> if this <see cref="T:System.Drawing.Color"/> structure was created from a system color by using either the <see langword="FromName"/> method or the <see langword="FromKnownColor"/> method; otherwise, <see langword="false"/>.</para>
      </value>
      <remarks>
        <para>This method does not do a comparison of the ARGB values. Therefore, when the <see langword="IsSystemColor"/> method is applied to a <see cref="T:System.Drawing.Color"/> structure that is created by using the <see langword="FromArgb"/> method, the <see langword="IsSystemColor"/> method returns false, even if the ARGB value matches the ARGB value of a system color.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Color.Ivory">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Khaki">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Lavender">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LavenderBlush">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LawnGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LemonChiffon">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LightBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LightCoral">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LightCyan">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LightGoldenrodYellow">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LightGray">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LightGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LightPink">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LightSalmon">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LightSeaGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LightSkyBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LightSlateGray">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LightSteelBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LightYellow">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Lime">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.LimeGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Linen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Magenta">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Maroon">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.MediumAquamarine">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.MediumBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.MediumOrchid">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.MediumPurple">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.MediumSeaGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.MediumSlateBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.MediumSpringGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.MediumTurquoise">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.MediumVioletRed">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.MidnightBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.MintCream">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.MistyRose">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Moccasin">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Name">
      <summary>
        <para>Gets the name of this <see langword="Color "/>Name. This will either return the user-defined name of the color, if the color was created from a name, or the name of the known color. For custom colors, the RGB value will be returned.</para>
      </summary>
      <value>
        <para>The name of this <see cref="T:System.Drawing.Color"/>.</para>
      </value>
      <remarks>
        <para>This method returns either the user defined name of the color, if the color was created from a name, or the name of the known color. For custom colors, the RGB value is returned.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Color.NavajoWhite">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Navy">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.OldLace">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Olive">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.OliveDrab">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Orange">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.OrangeRed">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Orchid">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.PaleGoldenrod">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.PaleGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.PaleTurquoise">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.PaleVioletRed">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.PapayaWhip">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.PeachPuff">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Peru">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Pink">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Plum">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.PowderBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Purple">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.R">
      <summary>
        <para>Gets the red component value of this <see cref="T:System.Drawing.Color"/> structure.</para>
      </summary>
      <value>
        <para>The red component value of this <see cref="T:System.Drawing.Color"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Red">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.RosyBrown">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.RoyalBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.SaddleBrown">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Salmon">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.SandyBrown">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.SeaGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.SeaShell">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Sienna">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Silver">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.SkyBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.SlateBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.SlateGray">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Snow">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.SpringGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.SteelBlue">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Tan">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Teal">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Thistle">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Tomato">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Transparent">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Turquoise">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Violet">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Wheat">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.White">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.WhiteSmoke">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.Yellow">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Color.YellowGreen">
      <summary>
        <para>Gets a system-defined color.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Color"/> structure representing a system-defined color.</para>
      </value>
    </member>

    <member name="M:System.Drawing.Color.op_Equality(System.Drawing.Color,System.Drawing.Color)">
      <summary>
        <para>Tests whether two specified <see cref="T:System.Drawing.Color"/> structures are equivalent.</para>
      </summary>
      <param name="left">
        The <see cref="T:System.Drawing.Color"/> structure that is to the left of the equality operator.
      </param>
      <param name="right">
        The <see cref="T:System.Drawing.Color"/> structure that is to the right of the equality operator.
      </param>
      <returns>
        <para>This operator returns <see langword="true"/> if the two <see cref="T:System.Drawing.Color"/> structures are equal; otherwise, <see langword="false"/>.</para>
      </returns>
      <remarks>
        <para>This method compares more than the ARGB values of the <see cref="T:System.Drawing.Color"/> structures. It also does a comparison of some state flags. If you want to compare just the ARGB values of two <see cref="T:System.Drawing.Color"/> structures, use  Color1.ToArgb() == Color2.ToArgb().</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Color.op_Inequality(System.Drawing.Color,System.Drawing.Color)">
      <summary>
        <para>Tests whether two specified <see cref="T:System.Drawing.Color"/> structures are different.</para>
      </summary>
      <param name="left">
        The <see cref="T:System.Drawing.Color"/> structure that is to the left of the inequality operator.
      </param>
      <param name="right">
        The <see cref="T:System.Drawing.Color"/> structure that is to the right of the inequality operator.
      </param>
      <returns>
        <para>This operator returns <see langword="true"/> if the two <see cref="T:System.Drawing.Color"/> structures are different; otherwise, <see langword="false"/>.</para>
      </returns>
      <remarks>
        <para>This method compares more than the ARGB values of the <see cref="T:System.Drawing.Color"/> structures. It also does a comparison of some state flags. If you want to compare just the ARGB values of two <see cref="T:System.Drawing.Color"/> structures, use Color1.ToArgb() != Color2.ToArgb().</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Color.Empty">
      <summary>
        <para>Represents a null color.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Point">
      <summary>
        <para>Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Point.#ctor(System.Int32,System.Int32)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Point"/> class with the specified coordinates.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Point"/> class with the specified coordinates.</para>
      </summary>
      <param name="x">
        The horizontal position of the point.
      </param>
      <param name="y">
        The vertical position of the point.
      </param>
    </member>

    <member name="M:System.Drawing.Point.#ctor(System.Drawing.Size)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Point"/> class from a <see cref="T:System.Drawing.Size"/>.</para>
      </summary>
      <param name="sz">
        A <see cref="T:System.Drawing.Size"/> that specifies the coordinates for the new <see cref="T:System.Drawing.Point"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Point.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the Point class using coordinates specified by an integer value.</para>
      </summary>
      <param name="dw">
        A 32-bit integer that specifies the coordinates for the new <see cref="T:System.Drawing.Point"/>.
      </param>
      <remarks>
        <para>The low-order 16 bits of <paramref name="dw "/> specify the horizontal x-coordinate and the higher 16 bits specify the vertical y-coordinate for the new <see cref="T:System.Drawing.Point"/>.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Point.Ceiling(System.Drawing.PointF)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.PointF"/> object to a <see cref="T:System.Drawing.Point"/> object by rounding the values of the <see cref="T:System.Drawing.PointF"/> object to the next higher integer values.</para>
      </summary>
      <param name="value">
        The <see cref="T:System.Drawing.PointF"/> object to convert.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Point"/> object this method converts to.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Point.GetHashCode">
      <summary>
        <para>Returns a hash code for this <see cref="T:System.Drawing.Point"/> object.</para>
      </summary>
      <returns>
        <para>An integer value that specifies a hash value for this <see cref="T:System.Drawing.Point"/> object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Point.Equals(System.Object)">
      <summary>
        <para>Specifies whether this <see cref="T:System.Drawing.Point"/> contains the same coordinates as the specified <see cref="T:System.Object"/>.</para>
      </summary>
      <param name="obj">
        The <see cref="T:System.Object"/> to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:System.Drawing.Point"/> and has  the same coordinates as this <see cref="T:System.Drawing.Point"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Point.Offset(System.Int32,System.Int32)">
      <summary>
        <para>Translates this <see cref="T:System.Drawing.Point"/> by the specified amount.</para>
      </summary>
      <param name="dx">
        The amount to offset the x-coordinate.
      </param>
      <param name="dy">
        The amount to offset the y-coordinate.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Point.Round(System.Drawing.PointF)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.PointF"/> object to a <see cref="T:System.Drawing.Point"/> object by rounding the <see cref="T:System.Drawing.Point"/> object values to the nearest integer.</para>
      </summary>
      <param name="value">
        The <see cref="T:System.Drawing.PointF"/> object to convert.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Point"/> object this method converts to.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Point.ToString">
      <summary>
        <para>Converts this <see cref="T:System.Drawing.Point"/> to a human readable string.</para>
      </summary>
      <returns>
        <para>A string that represents this <see cref="T:System.Drawing.Point"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Point.Truncate(System.Drawing.PointF)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.PointF"/> object to a <see cref="T:System.Drawing.Point"/> object by truncating the values of the <see cref="T:System.Drawing.Point"/> object.</para>
      </summary>
      <param name="value">
        The <see cref="T:System.Drawing.PointF"/> object to convert.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Point"/> object this method converts to.</para>
      </returns>
    </member>

    <member name="P:System.Drawing.Point.IsEmpty">
      <summary>
        <para>Gets a value indicating whether this <see cref="T:System.Drawing.Point"/> is empty.</para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> if both <see langword="X"/> and <see langword="Y"/> are zero; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Point.X">
      <summary>
        <para>Gets or sets the x-coordinate of this <see cref="T:System.Drawing.Point"/>.</para>
      </summary>
      <value>
        <para>The x-coordinate of this <see cref="T:System.Drawing.Point"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Point.Y">
      <summary>
        <para>Gets or sets the y-coordinate of this <see cref="T:System.Drawing.Point"/>.</para>
      </summary>
      <value>
        <para>The y-coordinate of this <see cref="T:System.Drawing.Point"/>.</para>
      </value>
    </member>

    <member name="M:System.Drawing.Point.op_Addition(System.Drawing.Point,System.Drawing.Size)">
      <summary>
        <para>Translates a <see cref="T:System.Drawing.Point"/> by a given <see cref="T:System.Drawing.Size"/>.</para>
      </summary>
      <param name="pt">
        The <see cref="T:System.Drawing.Point"/> to translate.
      </param>
      <param name="sz">
        A <see cref="T:System.Drawing.Size"/> that specifies the pair of numbers to add to the coordinates of <paramref name="pt"/>.
      </param>
      <returns>
        <para>The translated <see cref="T:System.Drawing.Point"/> structure.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Point.op_Equality(System.Drawing.Point,System.Drawing.Point)">
      <summary>
        <para>Compares two <see cref="T:System.Drawing.Point"/> objects. The result specifies whether the values of the <see langword="X"/> and <see langword="Y"/> properties of the two <see cref="T:System.Drawing.Point"/> objects are equal.</para>
      </summary>
      <param name="left">
        A <see cref="T:System.Drawing.Point"/> to compare.
      </param>
      <param name="right">
        A <see cref="T:System.Drawing.Point"/> to compare.
      </param>
      <returns>
        <para>This operator returns <see langword="true"/> if the <see langword="X"/> and <see langword="Y"/> values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Point.op_Inequality(System.Drawing.Point,System.Drawing.Point)">
      <summary>
        <para>Compares two <see cref="T:System.Drawing.Point"/> objects. The result specifies whether the values of the <see langword="X"/> or <see langword="Y"/> properties of the two <see cref="T:System.Drawing.Point"/> objects are unequal.</para>
      </summary>
      <param name="left">
        A <see cref="T:System.Drawing.Point"/> to compare.
      </param>
      <param name="right">
        A <see cref="T:System.Drawing.Point"/> to compare.
      </param>
      <returns>
        <para>This operator returns <see langword="true"/> if the values of either the <see langword="X"/> properties or the <see langword="Y"/> properties of <paramref name="left"/> and <paramref name="right"/> differ; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Point.op_Subtraction(System.Drawing.Point,System.Drawing.Size)">
      <summary>
        <para>Translates a <see cref="T:System.Drawing.Point"/> by the negative of a given <see cref="T:System.Drawing.Size"/>.</para>
      </summary>
      <param name="pt">
        The <see cref="T:System.Drawing.Point"/> to translate.
      </param>
      <param name="sz">
        A <see cref="T:System.Drawing.Size"/> that specifies the pair of numbers to subtract from the coordinates of <paramref name="pt"/>.
      </param>
      <returns>
        <para>A <see cref="T:System.Drawing.Point"/> structure that is translated by the negative of a given <see cref="T:System.Drawing.Size"/> structure.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Point.op_Implicit(System.Drawing.Point)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.Point"/> structure to a <see cref="T:System.Drawing.PointF"/> structure.</para>
      </summary>
      <param name="p">
        The <see cref="T:System.Drawing.Point"/> structure to convert.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.PointF"/>structure that results from the conversion.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Point.op_Explicit(System.Drawing.Point)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.Point"/> structure to a <see cref="T:System.Drawing.Size"/> structure.</para>
      </summary>
      <param name="p">
        The <see cref="T:System.Drawing.Point"/> structure to convert.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Size"/> structure that results from the conversion.</para>
      </returns>
    </member>

    <member name="F:System.Drawing.Point.Empty">
      <summary>
        <para>Represents a null <see cref="T:System.Drawing.Point"/>.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.PointF">
      <summary>
        <para>Represents an ordered pair of floating point x- and y-coordinates that defines a point in a two-dimensional plane.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.PointF.#ctor(System.Single,System.Single)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.PointF"/> class with the specified coordinates.</para>
      </summary>
      <param name="x">
        The horizontal position of the point.
      </param>
      <param name="y">
        The vertical position of the point.
      </param>
    </member>

    <member name="M:System.Drawing.PointF.Equals(System.Object)">
      <summary>
        <para>Specifies whether this <see cref="T:System.Drawing.PointF"/> contains the same coordinates as the specified <see cref="T:System.Object"/>.</para>
      </summary>
      <param name="obj">
        The <see cref="T:System.Object"/> to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:System.Drawing.PointF"/> and has  the same coordinates as this <see cref="T:System.Drawing.Point"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.PointF.GetHashCode">
      <summary>
        <para>Returns a hash code for this <see cref="T:System.Drawing.PointF"/> object.</para>
      </summary>
      <returns>
        <para>An integer value that specifies a hash value for this <see cref="T:System.Drawing.PointF"/> object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.PointF.ToString">
      <summary>
        <para>Converts this <see cref="T:System.Drawing.PointF"/> to a human readable string.</para>
      </summary>
      <returns>
        <para>A string that represents this <see cref="T:System.Drawing.PointF"/>.</para>
      </returns>
    </member>

    <member name="P:System.Drawing.PointF.IsEmpty">
      <summary>
        <para>Gets a value indicating whether this <see cref="T:System.Drawing.PointF"/> is empty.</para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> if both <see langword="X"/> and <see langword="Y"/> are zero; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.PointF.X">
      <summary>
        <para>Gets the x-coordinate of this <see cref="T:System.Drawing.PointF"/>.</para>
      </summary>
      <value>
        <para>The x-coordinate of this <see cref="T:System.Drawing.PointF"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.PointF.Y">
      <summary>
        <para>Gets the y-coordinate of this <see cref="T:System.Drawing.PointF"/>.</para>
      </summary>
      <value>
        <para>The y-coordinate of this <see cref="T:System.Drawing.PointF"/>.</para>
      </value>
    </member>

    <member name="M:System.Drawing.PointF.op_Addition(System.Drawing.PointF,System.Drawing.Size)">
      <summary>
        <para>Translates a <see cref="T:System.Drawing.PointF"/> by a given <see cref="T:System.Drawing.Size"/>.</para>
      </summary>
      <param name="pt">
        The <see cref="T:System.Drawing.PointF"/> to translate.
      </param>
      <param name="sz">
        A <see cref="T:System.Drawing.Size"/> that specifies the pair of numbers to add to the coordinates of <paramref name="pt"/>.
      </param>
      <returns>
        <para>Returns the translated <see cref="T:System.Drawing.PointF"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.PointF.op_Equality(System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
        <para>Compares two <see cref="T:System.Drawing.PointF"/> structures. The result specifies whether the values of the <see langword="X"/> and <see langword="Y"/> properties of the two <see cref="T:System.Drawing.PointF"/> objects are equal.</para>
      </summary>
      <param name="left">
        A <see cref="T:System.Drawing.PointF"/> to compare.
      </param>
      <param name="right">
        A <see cref="T:System.Drawing.PointF"/> to compare.
      </param>
      <returns>
        <para>Returns <see langword="true"/> if the <see langword="X"/> and <see langword="Y"/> values of the left and right <see cref="T:System.Drawing.PointF"/> objects are equal; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Point.op_Inequality(System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
        <para>Compares two <see cref="T:System.Drawing.PointF"/> structures. The result specifies whether the values of the <see langword="X"/> or <see langword="Y"/> properties of the two <see cref="T:System.Drawing.PointF"/> objects are unequal.</para>
      </summary>
      <param name="pt">
        A <see cref="T:System.Drawing.PointF"/> to compare.
      </param>
      <param name="sz">
        A <see cref="T:System.Drawing.PointF"/> to compare.
      </param>
      <returns>
        <para>Returns <see langword="true"/> if the values of either the <see langword="X"/> properties or the <see langword="Y"/> properties of the left and right <see cref="T:System.Drawing.PointF"/> objects differ; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.PointF.op_Subtraction(System.Drawing.PointF,System.Drawing.Size)">
      <summary>
        <para>Translates a <see cref="T:System.Drawing.PointF"/> by the negative of a given <see cref="T:System.Drawing.Size"/>.</para>
      </summary>
      <param name="pt">
        A <see cref="T:System.Drawing.PointF"/> to compare.
      </param>
      <param name="sz">
        A <see cref="T:System.Drawing.PointF"/> to compare.
      </param>
      <returns>
        <para>Returns the translated <see cref="T:System.Drawing.PointF"/>.</para>
      </returns>
    </member>

    <member name="F:System.Drawing.PointF.Empty">
      <summary>
        <para>Represents a new instance of the <see cref="T:System.Drawing.PointF"/> class with member data left uninitialized.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Rectangle">
      <summary>
        <para>Stores a set of four integers that represent the location and size of a rectangle. For more advanced region functions, use a <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <remarks>
        <para>A rectangle is defined by its width, height, and upper-left corner.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Rectangle"/> class with the specified location and size.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Rectangle"/> class with the specified location and size.</para>
      </summary>
      <param name="x">
        The x-coordinate of the upper-left corner of the rectangle.
      </param>
      <param name="y">
        The y-coordinate of the upper-left corner of the rectangle.
      </param>
      <param name="width">
        The width of the rectangle.
      </param>
      <param name="height">
        The height of the rectangle.
      </param>
    </member>

    <member name="M:System.Drawing.Rectangle.#ctor(System.Drawing.Point,System.Drawing.Size)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Rectangle"/> class with the specified location and size.</para>
      </summary>
      <param name="location">
        A <see cref="T:System.Drawing.Point"/> that represents the upper-left corner of the rectangular region.
      </param>
      <param name="size">
        A <see cref="T:System.Drawing.Size"/> that represents the width and height of the rectangular region.
      </param>
    </member>

    <member name="M:System.Drawing.Rectangle.Ceiling(System.Drawing.RectangleF)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.RectangleF"/> structure to a <see cref="T:System.Drawing.Rectangle"/> structure by rounding the <see cref="T:System.Drawing.RectangleF"/> values to the next higher integer values.</para>
      </summary>
      <param name="value">
        The <see cref="T:System.Drawing.RectangleF"/> structure to be converted.
      </param>
      <returns>
        <para>Returns a <see cref="T:System.Drawing.Rectangle"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.Contains(System.Drawing.Point)">
      <overload>
        Determines if the specified point is contained within the rectangular region defined by this <see cref="T:System.Drawing.Rectangle"/>.
      </overload>
      <summary>
        <para>Determines if the specified point is contained within this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="pt">
        The <see cref="T:System.Drawing.Point"/> to test.
      </param>
      <returns>
        <para>This method returns<see langword=" true"/> if the point represented by <paramref name="pt"/> is contained within this <see cref="T:System.Drawing.Rectangle"/> structure; otherwise <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.Contains(System.Int32,System.Int32)">
      <summary>
        <para>Determines if the specified point is contained within this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="x">
        The x-coordinate of the point to test.
      </param>
      <param name="y">
        The y-coordinate of the point to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the point  defined by <paramref name="x"/> and <paramref name="y"/> is contained within this <see cref="T:System.Drawing.Rectangle"/> structure; otherwise <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.Contains(System.Drawing.Rectangle)">
      <summary>
        <para>Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained within this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.Rectangle"/> to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the rectangular region  represented by <paramref name="rect"/> is entirely contained within this <see cref="T:System.Drawing.Rectangle"/> structure; otherwise <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.Equals(System.Object)">
      <summary>
        <para>Tests whether <paramref name="obj"/> is a <see cref="T:System.Drawing.Rectangle"/> structure with the same location and size of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <param name="obj">
        The <see cref="T:System.Object"/> to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:System.Drawing.Rectangle"/> structure and its <see langword="X"/>, <see langword="Y"/>, <see langword="Width"/>, and <see langword="Height"/> properties are equal to the  corresponding properties of this <see cref="T:System.Drawing.Rectangle"/> structure; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.Rectangle"/> structure with the specified edge locations.</para>
      </summary>
      <param name="left">
        The x-coordinate of the upper-left corner of this <see cref="T:System.Drawing.Rectangle"/> structure.
      </param>
      <param name="top">
        The y-coordinate of the upper-left corner of this <see cref="T:System.Drawing.Rectangle"/> structure.
      </param>
      <param name="right">
        The x-coordinate of the lower-right corner of this <see cref="T:System.Drawing.Rectangle"/> structure.
      </param>
      <param name="bottom">
        The y-coordinate of the lower-right corner of this <see cref="T:System.Drawing.Rectangle"/> structure.
      </param>
      <returns>
        <para>The new <see cref="T:System.Drawing.Rectangle"/> that this method creates.</para>
      </returns>
      <remarks>
        <para>This method creates a <see cref="T:System.Drawing.Rectangle"/> with the specified upper-left and lower-right corners.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Rectangle.GetHashCode">
      <summary>
        <para>Returns the hash code for this <see cref="T:System.Drawing.Rectangle"/> structure. For information about the use of hash codes, see <see langword="Object.GetHashCode"/>.</para>
      </summary>
      <returns>
        <para>An integer that represents the hashcode for this rectangle.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.Inflate(System.Drawing.Rectangle,System.Int32,System.Int32)">
      <overload>
        Creates and returns an inflated copy of the specified <see cref="T:System.Drawing.Rectangle"/> structure. The copy is inflated by the specified amount.
      </overload>
      <summary>
        <para>Creates and returns an inflated copy of the specified <see cref="T:System.Drawing.Rectangle"/> structure. The copy is inflated by the specified amount. The original <see cref="T:System.Drawing.Rectangle"/> structure remains unmodified.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.Rectangle"/> with which to start. This rectangle is not modified.
      </param>
      <param name="x">
        The amount to inflate this <see cref="T:System.Drawing.Rectangle"/> horizontally.
      </param>
      <param name="y">
        The amount to inflate this <see cref="T:System.Drawing.Rectangle"/> vertically.
      </param>
      <returns>
        <para>The inflated <see cref="T:System.Drawing.Rectangle"/>.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code creates a <see cref="T:System.Drawing.Rectangle"/> and inflates it by 50 units in both axes. Notice that the resulting rectangle (red) is 150 units in both axes.</para>
        <code lang="VB">Public Sub RectangleInflateTest(e As PaintEventArgs)
&apos; Create a rectangle.
Dim rect As New Rectangle(100, 100, 50, 50)
&apos; Draw the uninflated rect to screen.
e.Graphics.DrawRectangle(Pens.Black, rect)
&apos; Call Inflate.
Dim rect2 As Rectangle = Rectangle.Inflate(rect, 50, 50)
&apos; Draw the inflated rect to screen.
e.Graphics.DrawRectangle(Pens.Red, rect2)
End Sub
        </code>
        <code lang="C#">public void RectangleInflateTest(PaintEventArgs e)
{
// Create a rectangle.
Rectangle rect = new Rectangle(100, 100, 50, 50);
// Draw the uninflated rect to screen.
e.Graphics.DrawRectangle(Pens.Black, rect);
// Call Inflate.
Rectangle rect2 = Rectangle.Inflate(rect, 50, 50);
// Draw the inflated rect to screen.
e.Graphics.DrawRectangle(Pens.Red, rect2);
}
        </code>
      </example>
      <remarks>
        <para>This method makes a copy of <paramref name="rect"/>, inflates the copy, and then returns the inflated copy. The inflation along an axis is in two directions (minus direction and plus direction). For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resultant rectangle will be 150 units long (the original 50, the 50 in the minus direction, and the 50 in the plus direction) maintaining the rectangle&apos;s geometric center.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Rectangle.Inflate(System.Drawing.Size)">
      <summary>
        <para>Inflates this <see cref="T:System.Drawing.Rectangle"/> by the specified amount.</para>
      </summary>
      <param name="size">
        The amount to inflate this rectangle.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code creates a <see cref="T:System.Drawing.Rectangle"/> and inflates it by 50 units in both axes. The rectangle is drawn to screen before inflation (black) and after inflation (red).</para>
        <code lang="VB">Public Sub RectangleInflateTest2(e As PaintEventArgs)
&apos; Create a rectangle.
Dim rect As New Rectangle(100, 100, 50, 50)
&apos; Draw the uninflated rect to screen.
e.Graphics.DrawRectangle(Pens.Black, rect)
&apos; Set up the inflate size.
Dim inflateSize As New Size(50, 50)
&apos; Call Inflate.
rect.Inflate(inflateSize)
&apos; Draw the inflated rect to screen.
e.Graphics.DrawRectangle(Pens.Red, rect)
End Sub
        </code>
        <code lang="C#">public void RectangleInflateTest2(PaintEventArgs e)
{
// Create a rectangle.
Rectangle rect = new Rectangle(100, 100, 50, 50);
// Draw the uninflated rect to screen.
e.Graphics.DrawRectangle(Pens.Black, rect);
// Set up the inflate size.
Size inflateSize = new Size(50, 50);
// Call Inflate.
rect.Inflate(inflateSize);
// Draw the inflated rect to screen.
e.Graphics.DrawRectangle(Pens.Red, rect);
}
        </code>
      </example>
      <remarks>
        <para>This method inflates this rectangle, not a copy of it. The inflation along an axis is in two directions (minus direction and plus direction). For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resultant rectangle will be 150 units long (the original 50, the 50 in the minus direction, and the 50 in the plus direction) maintaining the rectangle&apos;s geometric center.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Rectangle.Inflate(System.Int32,System.Int32)">
      <summary>
        <para>Inflates this <see cref="T:System.Drawing.Rectangle"/> by the specified amount.</para>
      </summary>
      <param name="width">
        The amount to inflate this <see cref="T:System.Drawing.Rectangle"/> horizontally.
      </param>
      <param name="height">
        The amount to inflate this <see cref="T:System.Drawing.Rectangle"/> vertically.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example creates a <see cref="T:System.Drawing.Rectangle"/> structure and inflates it by 100 units in the x-axis direction:</para>
        <code lang="VB">Public Sub RectangleInflateTest3(e As PaintEventArgs)
&apos; Create a rectangle.
Dim rect As New Rectangle(100, 100, 50, 50)
&apos; Draw the uninflated rect to screen.
e.Graphics.DrawRectangle(Pens.Black, rect)
&apos; Call Inflate.
rect.Inflate(50, 50)
&apos; Draw the inflated rect to screen.
e.Graphics.DrawRectangle(Pens.Red, rect)
End Sub
        </code>
        <code lang="C#">public void RectangleInflateTest3(PaintEventArgs e)
{
// Create a rectangle.
Rectangle rect = new Rectangle(100, 100, 50, 50);
// Draw the uninflated rect to screen.
e.Graphics.DrawRectangle(Pens.Black, rect);
// Call Inflate.
rect.Inflate(50, 50);
// Draw the inflated rect to screen.
e.Graphics.DrawRectangle(Pens.Red, rect);
}
        </code>
      </example>
      <remarks>
        <para>This method inflates this rectangle, not a copy of it. The inflation along an axis is in two directions (minus direction and plus direction). For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resultant rectangle will be 150 units long (the original 50, the 50 in the minus direction, and the 50 in the plus direction) maintaining the rectangle&apos;s geometric center.</para>
        <para>If either <paramref name="x"/> or <paramref name="y"/> is negative, the <see cref="T:System.Drawing.Rectangle"/> structure is deflated in the corresponding direction.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Rectangle.Intersect(System.Drawing.Rectangle)">
      <overload>
        Replaces this <see cref="T:System.Drawing.Rectangle"/> structure with the intersection of itself and the specified <see cref="T:System.Drawing.Rectangle"/> structure.
      </overload>
      <summary>
        <para>Replaces this <see cref="T:System.Drawing.Rectangle"/> with the intersection of itself and the specified <see cref="T:System.Drawing.Rectangle"/>.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.Rectangle"/> with which to intersect.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.Intersect(System.Drawing.Rectangle,System.Drawing.Rectangle)">
      <summary>
        <para>Returns a third <see cref="T:System.Drawing.Rectangle"/> structure that represents the intersection of two other <see cref="T:System.Drawing.Rectangle"/> structures. If there is no intersection, null is returned.</para>
      </summary>
      <param name="a">
        A rectangle to intersect.
      </param>
      <param name="b">
        A rectangle to intersect.
      </param>
      <returns>
        <para>A <see cref="T:System.Drawing.Rectangle"/> that represents the intersection of <paramref name="a"/> and <paramref name="b"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.IntersectsWith(System.Drawing.Rectangle)">
      <summary>
        <para>Determines if this rectangle intersects with <paramref name="rect"/>.</para>
      </summary>
      <param name="rect">
        The rectangle to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if there is any intersection.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.Offset(System.Drawing.Point)">
      <overload>
        Adjusts the location of this rectangle by the specified amount.
      </overload>
      <summary>
        <para>Adjusts the location of this rectangle by the specified amount.</para>
      </summary>
      <param name="pos">
        Amount to offset the location.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method adjusts the location of the upper-left corner horizontally by the x-coordinate of the specified point, and vertically by the y-coordinate of the specified point.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Rectangle.Offset(System.Int32,System.Int32)">
      <summary>
        <para>Adjusts the location of this rectangle by the specified amount.</para>
      </summary>
      <param name="x">
        The horizontal offset.
      </param>
      <param name="y">
        The vertical offset.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.Round(System.Drawing.RectangleF)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.RectangleF"/> to a <see cref="T:System.Drawing.Rectangle"/> by rounding the <see cref="T:System.Drawing.RectangleF"/> values to the nearest integer values.</para>
      </summary>
      <param name="value">
        The <see cref="T:System.Drawing.RectangleF"/> to be converted.
      </param>
      <returns>
        <para>Returns a <see cref="T:System.Drawing.Rectangle"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.ToString">
      <summary>
        <para>Converts the attributes of this <see cref="T:System.Drawing.Rectangle"/> to a human-readable string.</para>
      </summary>
      <returns>
        <para>A string that contains the position, width, and height of this <see cref="T:System.Drawing.Rectangle"/> structure &#190; for example, {X=20, Y=20, Width=100, Height=50}</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.Truncate(System.Drawing.RectangleF)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.RectangleF"/> to a <see cref="T:System.Drawing.Rectangle"/> by truncating the <see cref="T:System.Drawing.RectangleF"/> values.</para>
      </summary>
      <param name="value">
        The <see cref="T:System.Drawing.RectangleF"/> to be converted.
      </param>
      <returns>
        <para>Returns a <see cref="T:System.Drawing.Rectangle"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.Union(System.Drawing.Rectangle,System.Drawing.Rectangle)">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Rectangle"/> structure that contains the union of two R<see langword="ectangle"/> structures.</para>
      </summary>
      <param name="a">
        A rectangle to union.
      </param>
      <param name="b">
        A rectangle to union.
      </param>
      <returns>
        <para>A <see cref="T:System.Drawing.Rectangle"/> structure that bounds the union of the two <see cref="T:System.Drawing.Rectangle"/> structures.</para>
      </returns>
    </member>

    <member name="P:System.Drawing.Rectangle.Bottom">
      <summary>
        <para>Gets the y-coordinate of the bottom edge of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <value>
        <para>The y-coordinate of the bottom edge of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Rectangle.Height">
      <summary>
        <para>Gets or sets the height of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <value>
        <para>The height of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Rectangle.IsEmpty">
      <summary>
        <para>Tests whether all numeric properties of this <see cref="T:System.Drawing.Rectangle"/> have values of zero.</para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> if the <see langword="Width"/>, <see langword="Height"/>, <see langword="X"/>, and <see langword="Y"/> properties of this <see cref="T:System.Drawing.Rectangle"/> all have values of zero; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Rectangle.Left">
      <summary>
        <para>Gets the x-coordinate of the left edge of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <value>
        <para>The x-coordinate of the left edge of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Rectangle.Location">
      <summary>
        <para>Gets or sets the coordinates of the upper-left corner of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Point"/> that represents the upper-left corner of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Rectangle.Right">
      <summary>
        <para>Gets the x-coordinate of the right edge of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <value>
        <para>The x-coordinate of the right edge of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Rectangle.Size">
      <summary>
        <para>Gets or sets the size of this <see cref="T:System.Drawing.Rectangle"/>.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Size"/> that represents the width and height of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Rectangle.Top">
      <summary>
        <para>Gets the y-coordinate of the top edge of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <value>
        <para>The y-coordinate of the top edge of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Rectangle.Width">
      <summary>
        <para>Gets or sets the width of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <value>
        <para>The width of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Rectangle.X">
      <summary>
        <para>Gets or sets the x-coordinate of the upper-left corner of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <value>
        <para>The x-coordinate of the upper-left corner of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Rectangle.Y">
      <summary>
        <para>Gets or sets the y-coordinate of the upper-left corner of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </summary>
      <value>
        <para>The y-coordinate of the upper-left corner of this <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </value>
    </member>

    <member name="M:System.Drawing.Rectangle.op_Equality(System.Drawing.Rectangle,System.Drawing.Rectangle)">
      <summary>
        <para>Tests whether two <see cref="T:System.Drawing.Rectangle"/> structures have equal location and size.</para>
      </summary>
      <param name="left">
        The <see cref="T:System.Drawing.Rectangle"/> structure that is to the left of the equality operator.
      </param>
      <param name="right">
        The <see cref="T:System.Drawing.Rectangle"/> structure that is to the right of the equality operator.
      </param>
      <returns>
        <para>This operator returns <see langword="true"/> if the two <see cref="T:System.Drawing.Rectangle"/> structures have equal <see langword="X"/>, <see langword="Y"/>, <see langword="Width"/>, and <see langword="Height"/> properties.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Rectangle.op_Inequality(System.Drawing.Rectangle,System.Drawing.Rectangle)">
      <summary>
        <para>Tests whether two <see cref="T:System.Drawing.Rectangle"/> structures differ in location or size.</para>
      </summary>
      <param name="left">
        The <see cref="T:System.Drawing.Rectangle"/> structure that is to the left of the inequality operator.
      </param>
      <param name="right">
        The <see cref="T:System.Drawing.Rectangle"/> structure that is to the right of the inequality operator.
      </param>
      <returns>
        <para>This operator returns <see langword="true"/> if any of the <see langword="X"/>, <see langword="Y"/>, <see langword="Width"/>, or <see langword="Height"/> properties of the two <see cref="T:System.Drawing.Rectangle"/> structures are unequal; otherwise <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="F:System.Drawing.Rectangle.Empty">
      <summary>
        <para>Represents a <see cref="T:System.Drawing.Rectangle"/> structure with its properties left uninitialized.</para>
      </summary>
      <remarks>
        <para>A rectangle is defined by its width, height and upper-left corner.</para>
      </remarks>
    </member>

    <member name="T:System.Drawing.RectangleF">
      <summary>
        <para>Stores a set of four floating-point numbers that represent the location and size of a rectangle. For more advanced region functions, use a <see cref="T:System.Drawing.Region"/> object.</para>
      </summary>
      <remarks>
        <para>A rectangle is defined by its width, height, and upper-left corner.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.RectangleF"/> class with the specified location and size.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.RectangleF"/> class with the specified location and size.</para>
      </summary>
      <param name="x">
        The x-coordinate of the upper-left corner of the rectangle.
      </param>
      <param name="y">
        The y-coordinate of the upper-left corner of the rectangle.
      </param>
      <param name="width">
        The width of the rectangle.
      </param>
      <param name="height">
        The height of the rectangle.
      </param>
    </member>

    <member name="M:System.Drawing.RectangleF.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.RectangleF"/> class with the specified location and size.</para>
      </summary>
      <param name="location">
        A <see cref="T:System.Drawing.PointF"/> that represents the upper-left corner of the rectangular region.
      </param>
      <param name="size">
        A <see cref="T:System.Drawing.SizeF"/> that represents the width and height of the rectangular region.
      </param>
    </member>

    <member name="M:System.Drawing.RectangleF.Contains(System.Drawing.PointF)">
      <overload>
        Determines if the specified point is contained within this <see cref="T:System.Drawing.RectangleF"/> structure.
      </overload>
      <summary>
        <para>Determines if the specified point is contained within this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="pt">
        The <see cref="T:System.Drawing.PointF"/> to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the point represented by the <paramref name="pt"/> parameter is contained within this <see cref="T:System.Drawing.RectangleF"/> structure; otherwise <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleF.Contains(System.Single,System.Single)">
      <summary>
        <para>Determines if the specified point is contained within this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="x">
        The x-coordinate of the point to test.
      </param>
      <param name="y">
        The y-coordinate of the point to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the point  defined by <paramref name="x"/> and <paramref name="y"/> is contained within this <see cref="T:System.Drawing.RectangleF"/> structure; otherwise <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleF.Contains(System.Drawing.RectangleF)">
      <summary>
        <para>Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained within this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.RectangleF"/> to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if the rectangular region represented by <paramref name="rect"/> is entirely contained within the rectangular region represented by this <see cref="T:System.Drawing.RectangleF"/>; otherwise <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleF.Equals(System.Object)">
      <summary>
        <para>Tests whether <paramref name="obj"/> is a <see cref="T:System.Drawing.RectangleF"/> with the same location and size of this <see cref="T:System.Drawing.RectangleF"/>.</para>
      </summary>
      <param name="obj">
        The <see cref="T:System.Object"/> to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:System.Drawing.RectangleF"/> and its <see langword="X"/>, <see langword="Y"/>, <see langword="Width"/>, and <see langword="Height"/> properties are equal to the  corresponding properties of this <see cref="T:System.Drawing.RectangleF"/>; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleF.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a <see cref="T:System.Drawing.RectangleF"/> structure with upper-left corner and lower-right corner at the specified locations.</para>
      </summary>
      <param name="left">
        The x-coordinate of the upper-left corner of the rectangular region.
      </param>
      <param name="top">
        The y-coordinate of the upper-left corner of the rectangular region.
      </param>
      <param name="right">
        The x-coordinate of the lower-right corner of the rectangular region.
      </param>
      <param name="bottom">
        The y-coordinate of the lower-right corner of the rectangular region.
      </param>
      <returns>
        <para>The new <see cref="T:System.Drawing.RectangleF"/> that this method creates.</para>
      </returns>
      <remarks>
        <para>This method creates a <see cref="T:System.Drawing.RectangleF"/> with the specified upper-left and lower-right corners.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.RectangleF.GetHashCode">
      <summary>
        <para>Gets the hash code for this <see cref="T:System.Drawing.RectangleF"/> structure. For information about the use of hash codes, see <see langword="Object.GetHashCode"/>.</para>
      </summary>
      <returns>
        <para>The hash code for this <see cref="T:System.Drawing.RectangleF"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleF.Inflate(System.Drawing.SizeF)">
      <overload>
        Inflates this <see cref="T:System.Drawing.RectangleF"/> by the specified amount.
      </overload>
      <summary>
        <para>Inflates this <see cref="T:System.Drawing.RectangleF"/> by the specified amount.</para>
      </summary>
      <param name="size">
        The amount to inflate this rectangle.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>This example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> e, an OnPaint event object. The code creates a <see cref="T:System.Drawing.RectangleF"/> and draws it to the screen in black. Notice that it has to be converted to a <see cref="T:System.Drawing.Rectangle"/> for drawing purposes. Then the code inflates the <see cref="T:System.Drawing.RectangleF"/>, again converts it to a <see cref="T:System.Drawing.Rectangle"/>, and draws it to the screen in red. Notice that the original (black) rectangle is expanded in both directions along the x-axis by 100 points.</para>
        <code lang="VB">Public Sub RectangleFInflateExample(e As PaintEventArgs)
&apos; Create a RectangleF structure.
Dim myRectF As New RectangleF(100, 20, 100, 100)
&apos; Draw myRect to the screen.
Dim myRect As Rectangle = Rectangle.Truncate(myRectF)
e.Graphics.DrawRectangle(Pens.Black, myRect)
&apos; Create a Size structure.
Dim inflateSize As New SizeF(100, 0)
&apos; Inflate myRect.
myRectF.Inflate(inflateSize)
&apos; Draw the inflated rectangle to the screen.
myRect = Rectangle.Truncate(myRectF)
e.Graphics.DrawRectangle(Pens.Red, myRect)
End Sub
        </code>
        <code lang="C#">public void RectangleFInflateExample(PaintEventArgs e)
{
// Create a RectangleF structure.
RectangleF myRectF = new RectangleF(100, 20, 100, 100);
// Draw myRect to the screen.
Rectangle myRect = Rectangle.Truncate(myRectF);
e.Graphics.DrawRectangle(Pens.Black, myRect);
// Create a Size structure.
SizeF inflateSize = new SizeF(100, 0);
// Inflate myRect.
myRectF.Inflate(inflateSize);
// Draw the inflated rectangle to the screen.
myRect = Rectangle.Truncate(myRectF);
e.Graphics.DrawRectangle(Pens.Red, myRect);
}
        </code>      
        <remarks>     
          <para>This method inflates this rectangle, not a copy of it. The inflation along an axis is in two directions (minus direction and plus direction). For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resultant rectangle will be 150 units long (the original 50, the 50 in the minus direction, and the 50 in the plus direction) maintaining the rectangle&apos;s geometric center.</para>
        </remarks> 
      </example>
    </member>

    <member name="M:System.Drawing.RectangleF.Inflate(System.Single,System.Single)">
      <summary>
        <para>Inflates this <see cref="T:System.Drawing.RectangleF"/> structure by the specified amount.</para>
      </summary>
      <param name="x">
        The amount to inflate this <see cref="T:System.Drawing.RectangleF"/> structure horizontally.
      </param>
      <param name="y">
        The amount to inflate this <see cref="T:System.Drawing.RectangleF"/> structure vertically.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>This method inflates this rectangle, not a copy of it. The inflation along an axis is in two directions (minus direction and plus direction). For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resultant rectangle will be 150 units long (the original 50, the 50 in the minus direction, and the 50 in the plus direction) maintaining the rectangle&apos;s geometric center.</para>
        <para>If either <paramref name="x"/> or <paramref name="y"/> is negative, the <see cref="T:System.Drawing.RectangleF"/> is deflated in the corresponding direction.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.RectangleF.Inflate(System.Drawing.RectangleF,System.Single,System.Single)">
      <summary>
        <para>Creates and returns an inflated copy of the specified <see cref="T:System.Drawing.RectangleF"/> structure. The copy is inflated by the specified amount. The original rectangle remains unmodified.</para>
      </summary>
      <param name="rect">
        The <see cref="T:System.Drawing.RectangleF"/> to be copied. This rectangle is not modified.
      </param>
      <param name="x">
        The amount to inflate the copy of the rectangle horizontally.
      </param>
      <param name="y">
        The amount to inflate the copy of the rectangle vertically.
      </param>
      <returns>
        <para>The inflated <see cref="T:System.Drawing.RectangleF"/>.</para>
      </returns>
      <remarks>
        <para>This method makes a copy of <paramref name="rect"/>, inflates the copy, and then returns the inflated copy. The inflation along an axis is in two directions (minus direction and plus direction). For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resultant rectangle will be 150 units long (the original 50, the 50 in the minus direction, and the 50 in the plus direction) maintaining the rectangle&apos;s geometric center.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.RectangleF.Intersect(System.Drawing.RectangleF,System.Drawing.RectangleF)">
      <overload>
        Returns a <see cref="T:System.Drawing.RectangleF"/> structure that represents the intersection of two rectangles. If there is no intersection, null is returned.
      </overload>
      <summary>
        <para>Returns a <see cref="T:System.Drawing.RectangleF"/> structure that represents the intersection of two rectangles. If there is no intersection, null is returned.</para>
      </summary>
      <param name="a">
        A rectangle to intersect.
      </param>
      <param name="b">
        A rectangle to intersect.
      </param>
      <returns>
        <para>A third <see cref="T:System.Drawing.RectangleF"/> structure the size of which represents the overlapped area of the two specified rectangles.</para>
      </returns>
      <example>
        <para>This example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> e, an OnPaint event object. The code creates two <see cref="T:System.Drawing.RectangleF"/>s and draws them to the screen in black and red. Notice that they have to be converted to <see cref="T:System.Drawing.Rectangle"/>s for drawing purposes. Then the code creates a third <see cref="T:System.Drawing.RectangleF"/> using the <see langword="Intersect"/> method, converts it to a <see cref="T:System.Drawing.Rectangle"/>, and draws it to the screen in blue. Notice the third (blue) rectangle is the area of overlap of the other two rectangles:</para>
        <code lang="VB">Public Sub RectangleFIntersectExample(e As PaintEventArgs)
&apos; Create two rectangles.
Dim firstRectangleF As New RectangleF(0, 0, 75, 50)
Dim secondRectangleF As New RectangleF(50, 20, 50, 50)
&apos; Convert the RectangleF structures to Rectangle structures and
&apos; draw them to the screen.
Dim firstRect As Rectangle = Rectangle.Truncate(firstRectangleF)
Dim secondRect As Rectangle = Rectangle.Truncate(secondRectangleF)
e.Graphics.DrawRectangle(Pens.Black, firstRect)
e.Graphics.DrawRectangle(Pens.Red, secondRect)
&apos; Get the intersection.
Dim intersectRectangleF As RectangleF = _
RectangleF.Intersect(firstRectangleF, secondRectangleF)
&apos; Draw the intersectRectangleF to the screen.
Dim intersectRect As Rectangle = _
Rectangle.Truncate(intersectRectangleF)
e.Graphics.DrawRectangle(Pens.Blue, intersectRect)
End Sub
        </code>
        <code lang="C#">public void RectangleFIntersectExample(PaintEventArgs e)
{
// Create two rectangles.
RectangleF firstRectangleF = new RectangleF(0, 0, 75, 50);
RectangleF secondRectangleF = new RectangleF(50, 20, 50, 50);
// Convert the RectangleF structures to Rectangle structures and draw them to the
// screen.
Rectangle firstRect = Rectangle.Truncate(firstRectangleF);
Rectangle secondRect = Rectangle.Truncate(secondRectangleF);
e.Graphics.DrawRectangle(Pens.Black, firstRect);
e.Graphics.DrawRectangle(Pens.Red, secondRect);
// Get the intersection.
RectangleF intersectRectangleF =
RectangleF.Intersect(firstRectangleF,
secondRectangleF);
// Draw the intersectRectangleF to the screen.
Rectangle intersectRect =
Rectangle.Truncate(intersectRectangleF);
e.Graphics.DrawRectangle(Pens.Blue, intersectRect);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.RectangleF.Intersect(System.Drawing.RectangleF)">
      <summary>
        <para>Replaces this <see cref="T:System.Drawing.RectangleF"/> structure with the intersection of itself and the specified <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="rect">
        The rectangle to intersect.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleF.IntersectsWith(System.Drawing.RectangleF)">
      <summary>
        <para>Determines if this rectangle intersects with <paramref name="rect"/>.</para>
      </summary>
      <param name="rect">
        The rectangle to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if there is any intersection.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleF.Offset(System.Single,System.Single)">
      <overload>
        Adjusts the location of this rectangle by the specified amount.
      </overload>
      <summary>
        <para>Adjusts the location of this rectangle by the specified amount.</para>
      </summary>
      <param name="x">
        The amount to offset the location horizontally.
      </param>
      <param name="y">
        The amount to offset the location vertically.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleF.Offset(System.Drawing.PointF)">
      <summary>
        <para>Adjusts the location of this rectangle by the specified amount.</para>
      </summary>
      <param name="pos">
        The amount to offset the location.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleF.ToString">
      <summary>
        <para>Converts the <see langword="Location"/> and <see cref="T:System.Drawing.Size"/> of this <see cref="T:System.Drawing.RectangleF"/> to a human-readable string.</para>
      </summary>
      <returns>
        <para>A string that contains the position, width, and height of this <see cref="T:System.Drawing.RectangleF"/> structure&#190;for example, &quot;{X=20, Y=20, Width=100, Height=50}&quot;.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleF.Union(System.Drawing.RectangleF,System.Drawing.RectangleF)">
      <summary>
        <para>Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.</para>
      </summary>
      <param name="a">
        A rectangle to union.
      </param>
      <param name="b">
        A rectangle to union.
      </param>
      <returns>
        <para>A third <see cref="T:System.Drawing.RectangleF"/> structure that contains both of the two rectangles that form the union.</para>
      </returns>
      <example>
        <para>This example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> e, an OnPaint event object. The code creates two <see cref="T:System.Drawing.RectangleF"/>s and draws them to the screen in black and red. Notice that they have to be converted to <see cref="T:System.Drawing.Rectangle"/>s for drawing purposes. Then the code creates a third <see cref="T:System.Drawing.RectangleF"/> using the <see langword="Union"/> method, converts it to a <see cref="T:System.Drawing.Rectangle"/>, and draws it to the screen in blue. Notice the third (blue) rectangle is the smallest possible rectangle that can contain both of the other two rectangles:</para>
        <code lang="VB">Public Sub RectangleFUnionExample(e As PaintEventArgs)
&apos; Create two rectangles and draw them to the screen.
Dim firstRectangleF As New RectangleF(0, 0, 75, 50)
Dim secondRectangleF As New RectangleF(100, 100, 20, 20)
&apos; Convert the RectangleF structures to Rectangle structures and
&apos; draw them to the screen.
Dim firstRect As Rectangle = Rectangle.Truncate(firstRectangleF)
Dim secondRect As Rectangle = Rectangle.Truncate(secondRectangleF)
e.Graphics.DrawRectangle(Pens.Black, firstRect)
e.Graphics.DrawRectangle(Pens.Red, secondRect)
&apos; Get the union rectangle.
Dim unionRectangleF As RectangleF = _
RectangleF.Union(firstRectangleF, secondRectangleF)
&apos; Draw the unionRectangleF to the screen.
Dim unionRect As Rectangle = Rectangle.Truncate(unionRectangleF)
e.Graphics.DrawRectangle(Pens.Blue, unionRect)
End Sub
        </code>
        <code lang="C#">public void RectangleFUnionExample(PaintEventArgs e)
{
// Create two rectangles and draw them to the screen.
RectangleF firstRectangleF = new RectangleF(0, 0, 75, 50);
RectangleF secondRectangleF = new RectangleF(100, 100, 20, 20);
// Convert the RectangleF structures to Rectangle structures and draw them to the
// screen.
Rectangle firstRect = Rectangle.Truncate(firstRectangleF);
Rectangle secondRect = Rectangle.Truncate(secondRectangleF);
e.Graphics.DrawRectangle(Pens.Black, firstRect);
e.Graphics.DrawRectangle(Pens.Red, secondRect);
// Get the union rectangle.
RectangleF unionRectangleF = RectangleF.Union(firstRectangleF,
secondRectangleF);
// Draw the unionRectangleF to the screen.
Rectangle unionRect = Rectangle.Truncate(unionRectangleF);
e.Graphics.DrawRectangle(Pens.Blue, unionRect);
}
        </code>
      </example>
    </member>

    <member name="P:System.Drawing.RectangleF.Bottom">
      <summary>
        <para>Gets the y-coordinate of the bottom edge of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <value>
        <para>The y-coordinate of the bottom edge of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.RectangleF.Height">
      <summary>
        <para>Gets or sets the height of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <value>
        <para>The height of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.RectangleF.IsEmpty">
      <summary>
        <para>Tests whether all numeric properties of this <see cref="T:System.Drawing.RectangleF"/> have values of zero.</para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> if the <see langword="Width"/>, <see langword="Height"/>, <see langword="X"/>, and <see langword="Y"/> properties of this <see cref="T:System.Drawing.RectangleF"/> all have values of zero; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.RectangleF.Left">
      <summary>
        <para>Gets the x-coordinate of the left edge of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <value>
        <para>The x-coordinate of the left edge of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.RectangleF.Location">
      <summary>
        <para>Gets or sets the coordinates of the upper-left corner of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.PointF"/> that represents the upper-left corner of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.RectangleF.Right">
      <summary>
        <para>Gets the x-coordinate of the right edge of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <value>
        <para>The x-coordinate of the right edge of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.RectangleF.Size">
      <summary>
        <para>Gets or sets the size of this <see cref="T:System.Drawing.RectangleF"/>.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.SizeF"/> that represents the width and height of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.RectangleF.Top">
      <summary>
        <para>Gets the y-coordinate of the top edge of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <value>
        <para>The y-coordinate of the top edge of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.RectangleF.Width">
      <summary>
        <para>Gets or sets the width of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <value>
        <para>The width of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.RectangleF.X">
      <summary>
        <para>Gets or sets the x-coordinate of the upper-left corner of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <value>
        <para>The x-coordinate of the upper-left corner of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </value>
    </member>

    <member name="P:System.Drawing.RectangleF.Y">
      <summary>
        <para>Gets or sets the y-coordinate of the upper-left corner of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <value>
        <para>The y-coordinate of the upper-left corner of this <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </value>
    </member>

    <member name="M:System.Drawing.RectangleF.op_Equality(System.Drawing.RectangleF,System.Drawing.RectangleF)">
      <summary>
        <para>Tests whether two <see cref="T:System.Drawing.RectangleF"/> structures have equal location and size.</para>
      </summary>
      <param name="left">
        The <see cref="T:System.Drawing.RectangleF"/> structure that is to the left of the equality operator.
      </param>
      <param name="right">
        The <see cref="T:System.Drawing.RectangleF"/> structure that is to the right of the equality operator.
      </param>
      <returns>
        <para>This operator returns <see langword="true"/> if the two specified <see cref="T:System.Drawing.RectangleF"/> structures have equal <see langword="X"/>, <see langword="Y"/>, <see langword="Width"/>, and <see langword="Height"/> properties.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleF.op_Inequality(System.Drawing.RectangleF,System.Drawing.RectangleF)">
      <summary>
        <para>Tests whether two <see cref="T:System.Drawing.RectangleF"/> structures differ in location or size.</para>
      </summary>
      <param name="left">
        The <see cref="T:System.Drawing.RectangleF"/> structure that is to the left of the inequality operator.
      </param>
      <param name="right">
        The <see cref="T:System.Drawing.RectangleF"/> structure that is to the right of the inequality operator.
      </param>
      <returns>
        <para>This operator returns <see langword="true"/> if any of the <see langword="X"/>, <see langword="Y"/>, <see langword="Width"/>, or <see langword="Height"/> properties of the two <see cref="T:System.Drawing.Rectangle"/> structures are unequal; otherwise <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.RectangleF.op_Implicit(System.Drawing.Rectangle)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.Rectangle"/> structure to a <see cref="T:System.Drawing.RectangleF"/> structure.</para>
      </summary>
      <param name="r">
        The <see cref="T:System.Drawing.Rectangle"/> structure to convert.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.RectangleF"/> structure that is converted from the specified <see cref="T:System.Drawing.Rectangle"/> structure.</para>
      </returns>
    </member>

    <member name="F:System.Drawing.RectangleF.Empty">
      <summary>
        <para>Represents an instance of the <see cref="T:System.Drawing.RectangleF"/> class with its members uninitialized.</para>
      </summary>
      <remarks>
        <para>The members of the new <see cref="T:System.Drawing.RectangleF"/> are left uninitialized.</para>
      </remarks>
    </member>

    <member name="T:System.Drawing.Size">
      <summary>
        <para>Stores an ordered pair of integers, typically the width and height of a rectangle.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Size.#ctor(System.Drawing.Point)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Size"/> class from the specified <see cref="T:System.Drawing.Point"/>.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Size"/> class from the specified <see cref="T:System.Drawing.Point"/>.</para>
      </summary>
      <param name="pt">
        The <see cref="T:System.Drawing.Point"/> from which to initialize this <see cref="T:System.Drawing.Size"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Size.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Size"/> class from the specified dimensions.</para>
      </summary>
      <param name="width">
        The width component of the new <see cref="T:System.Drawing.Size"/>.
      </param>
      <param name="height">
        The height component of the new <see cref="T:System.Drawing.Size"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Size.Ceiling(System.Drawing.SizeF)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.SizeF"/> structure to a <see cref="T:System.Drawing.Size"/> structure by rounding the values of the <see cref="T:System.Drawing.Size"/> structure to the next higher integer values.</para>
      </summary>
      <param name="value">
        The <see cref="T:System.Drawing.SizeF"/> structure to convert.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Size"/> structure this method converts to.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Size.Equals(System.Object)">
      <summary>
        <para>Tests to see whether the specified object is a <see cref="T:System.Drawing.Size"/> with the same dimensions as this <see cref="T:System.Drawing.Size"/>.</para>
      </summary>
      <param name="obj">
        The <see cref="T:System.Object"/> to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:System.Drawing.Size"/> and has the same width and height as this <see cref="T:System.Drawing.Size"/>; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Size.GetHashCode">
      <summary>
        <para>Returns a hash code for this <see cref="T:System.Drawing.Size"/> structure.</para>
      </summary>
      <returns>
        <para>An integer value that specifies a hash value for this <see cref="T:System.Drawing.Size"/> structure.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Size.Round(System.Drawing.SizeF)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.SizeF"/> structure to a <see cref="T:System.Drawing.Size"/> structure by rounding the values of the <see cref="T:System.Drawing.Size"/> structure to the nearest integer values.</para>
      </summary>
      <param name="value">
        The <see cref="T:System.Drawing.SizeF"/> structure to convert.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Size"/> structure this method converts to.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Size.ToString">
      <summary>
        <para>Creates a human-readable string that represents this <see cref="T:System.Drawing.Size"/>.</para>
      </summary>
      <returns>
        <para>A string that represents this <see cref="T:System.Drawing.Size"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Size.Truncate(System.Drawing.SizeF)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.SizeF"/> structure to a <see cref="T:System.Drawing.Size"/> structure by truncating the values of the <see cref="T:System.Drawing.Size"/> structure to the next lower integer values.</para>
      </summary>
      <param name="value">
        The <see cref="T:System.Drawing.SizeF"/> structure to convert.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Size"/> structure this method converts to.</para>
      </returns>
    </member>

    <member name="P:System.Drawing.Size.Height">
      <summary>
        <para>Gets or sets the vertical component of this <see cref="T:System.Drawing.Size"/>.</para>
      </summary>
      <value>
        <para>The vertical component of this <see cref="T:System.Drawing.Size"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Size.IsEmpty">
      <summary>
        <para>Tests whether this <see cref="T:System.Drawing.Size"/> has zero width and height.</para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> when this <see cref="T:System.Drawing.Size"/> has both a width and height of zero; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Size.Width">
      <summary>
        <para>Gets or sets the horizontal component of this <see cref="T:System.Drawing.Size"/>.</para>
      </summary>
      <value>
        <para>The horizontal component of this <see cref="T:System.Drawing.Size"/>.</para>
      </value>
    </member>

    <member name="M:System.Drawing.Size.op_Addition(System.Drawing.Size,System.Drawing.Size)">
      <summary>
        <para>Adds the width and height of one <see cref="T:System.Drawing.Size"/> structure to the width and height of another <see cref="T:System.Drawing.Size"/> structure.</para>
      </summary>
      <param name="sz1">
        The first <see cref="T:System.Drawing.Size"/> to add.
      </param>
      <param name="sz2">
        The second <see cref="T:System.Drawing.Size"/> to add.
      </param>
      <returns>
        <para>A <see cref="T:System.Drawing.Size"/> structure that is the result of the addition operation.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Size.op_Equality(System.Drawing.Size,System.Drawing.Size)">
      <summary>
        <para>Tests whether two <see cref="T:System.Drawing.Size"/> structures are equal.</para>
      </summary>
      <param name="sz1">
        The <see cref="T:System.Drawing.Size"/> structure on the left side of the equality operator.
      </param>
      <param name="sz2">
        The <see cref="T:System.Drawing.Size"/> structure on the right of the equality operator.
      </param>
      <returns>
        <para>This operator returns <see langword="true"/> if <paramref name="sz1"/> and <paramref name="sz2"/> have equal width and height; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Size.op_Inequality(System.Drawing.Size,System.Drawing.Size)">
      <summary>
        <para>Tests whether two <see cref="T:System.Drawing.Size"/> structures are different.</para>
      </summary>
      <param name="sz1">
        The <see cref="T:System.Drawing.Size"/> structure on the left of the inequality operator.
      </param>
      <param name="sz2">
        The <see cref="T:System.Drawing.Size"/> structure on the right of the inequality operator.
      </param>
      <returns>
        <para>This operator returns <see langword="true"/> if <paramref name="sz1"/> and <paramref name="sz2"/> differ either in width or height; <see langword="false"/> if <paramref name="sz1"/> and <paramref name="sz2"/> are equal.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Size.op_Subtraction(System.Drawing.Size,System.Drawing.Size)">
      <summary>
        <para>Subtracts the width and height of one <see cref="T:System.Drawing.Size"/> structure from the width and height of another <see cref="T:System.Drawing.Size"/> structure.</para>
      </summary>
      <param name="sz1">
        The <see cref="T:System.Drawing.Size"/> structure on the left side of the subtraction operator.
      </param>
      <param name="sz2">
        The <see cref="T:System.Drawing.Size"/> structure on the right side of the subtraction operator.
      </param>
      <returns>
        <para>A <see cref="T:System.Drawing.Size"/> structure that is the result of the subtraction operation.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Size.op_Explicit(System.Drawing.Size)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.Size"/> to a <see cref="T:System.Drawing.Point"/>.</para>
      </summary>
      <param name="size">
        The <see cref="T:System.Drawing.Size"/> to convert.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Point"/> structure to which this operator converts.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Size.op_Implicit(System.Drawing.Size)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.Size"/> to a <see cref="T:System.Drawing.SizeF"/>.</para>
      </summary>
      <param name="p">
        The <see cref="T:System.Drawing.Size"/> to convert.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Point"/> structure to which this operator converts.</para>
      </returns>
    </member>

    <member name="F:System.Drawing.Size.Empty">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Size"/> class.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.SizeF">
      <summary>
        <para>Stores an ordered pair of floating-point numbers, typically the width and height of a rectangle.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.SizeF.#ctor(System.Drawing.SizeF)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.SizeF"/> class from the specified existing <see cref="T:System.Drawing.SizeF"/>.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.SizeF"/> class from the specified existing <see cref="T:System.Drawing.SizeF"/>.</para>
      </summary>
      <param name="size">
        The <see cref="T:System.Drawing.SizeF"/>from which to create the new <see cref="T:System.Drawing.SizeF"/>.
      </param>
    </member>

    <member name="M:System.Drawing.SizeF.#ctor(System.Drawing.PointF)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.SizeF"/> class from the specified <see cref="T:System.Drawing.PointF"/>.</para>
      </summary>
      <param name="pt">
        The <see cref="T:System.Drawing.PointF"/> from which to initialize this <see cref="T:System.Drawing.SizeF"/>.
      </param>
    </member>

    <member name="M:System.Drawing.SizeF.#ctor(System.Single,System.Single)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.SizeF"/> class from the specified dimensions.</para>
      </summary>
      <param name="width">
        The width component of the new <see cref="T:System.Drawing.SizeF"/>.
      </param>
      <param name="height">
        The height component of the new <see cref="T:System.Drawing.SizeF"/>.
      </param>
    </member>

    <member name="M:System.Drawing.SizeF.Equals(System.Object)">
      <summary>
        <para>Tests to see whether the specified object is a <see cref="T:System.Drawing.SizeF"/> with the same dimensions as this <see cref="T:System.Drawing.SizeF"/>.</para>
      </summary>
      <param name="obj">
        The <see cref="T:System.Object"/> to test.
      </param>
      <returns>
        <para>This method returns <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:System.Drawing.SizeF"/> and has the same width and height as this <see cref="T:System.Drawing.SizeF"/>; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.SizeF.GetHashCode">
      <summary>
        <para>Returns a hash code for this <see cref="T:System.Drawing.Size"/> structure.</para>
      </summary>
      <returns>
        <para>An integer value that specifies a hash value for this <see cref="T:System.Drawing.Size"/> structure.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.SizeF.ToPointF">
      <summary>
        <para>Converts a <see cref="T:System.Drawing.SizeF"/> to a <see cref="T:System.Drawing.PointF"/>.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.SizeF.ToSize">
      <summary>
        <para>Converts a <see cref="T:System.Drawing.SizeF"/> to a <see cref="T:System.Drawing.Size"/>.</para>
      </summary>
      <returns>
        <para>Returns a <see cref="T:System.Drawing.Size"/> structure.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.SizeF.ToString">
      <summary>
        <para>Creates a human-readable string that represents this <see cref="T:System.Drawing.SizeF"/>.</para>
      </summary>
      <returns>
        <para>A string that represents this <see cref="T:System.Drawing.SizeF"/>.</para>
      </returns>
    </member>

    <member name="P:System.Drawing.SizeF.Height">
      <summary>
        <para>Gets or sets the vertical component of this <see cref="T:System.Drawing.SizeF"/>.</para>
      </summary>
      <value>
        <para>The vertical component of this <see cref="T:System.Drawing.SizeF"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SizeF.IsEmpty">
      <summary>
        <para>Gets a value indicating  whether this <see cref="T:System.Drawing.SizeF"/> has zero width and height.</para>
      </summary>
      <value>
        <para>This property returns <see langword="true"/> when this <see cref="T:System.Drawing.SizeF"/> has both a width and height of zero; otherwise, <see langword="false"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.SizeF.Width">
      <summary>
        <para>Gets or sets the horizontal component of this <see cref="T:System.Drawing.SizeF"/>.</para>
      </summary>
      <value>
        <para>The horizontal component of this <see cref="T:System.Drawing.SizeF"/>.</para>
      </value>
    </member>

    <member name="M:System.Drawing.SizeF.op_Addition(System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary>
        <para>Adds the width and height of one <see cref="T:System.Drawing.SizeF"/> structure to the width and height of another <see cref="T:System.Drawing.SizeF"/> structure.</para>
      </summary>
      <param name="sz1">
        The first <see cref="T:System.Drawing.SizeF"/> to add.
      </param>
      <param name="sz2">
        The second <see cref="T:System.Drawing.SizeF"/> to add.
      </param>
      <returns>
        <para>A <see cref="T:System.Drawing.Size"/> structure that is the result of the addition operation.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.SizeF.op_Equality(System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary>
        <para>Tests whether two <see cref="T:System.Drawing.SizeF"/> structures are equal.</para>
      </summary>
      <param name="sz1">
        The <see cref="T:System.Drawing.SizeF"/> structure on the left side of the equality operator.
      </param>
      <param name="sz2">
        The <see cref="T:System.Drawing.SizeF"/> structure on the right of the equality operator.
      </param>
      <returns>
        <para>This operator returns <see langword="true"/> if <paramref name="sz1"/> and <paramref name="sz2"/> have equal width and height; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.SizeF.op_Explicit(System.Drawing.SizeF)">
      <summary>
        <para>Converts the specified <see cref="T:System.Drawing.SizeF"/> structure to a <see cref="T:System.Drawing.PointF"/> structure.</para>
      </summary>
      <param name="size">
        The <see cref="T:System.Drawing.SizeF"/> structure to be converted.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.PointF"/> structure to which this operator converts.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.SizeF.op_Inequality(System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary>
        <para>Tests whether two <see cref="T:System.Drawing.SizeF"/> structures are different.</para>
      </summary>
      <param name="sz1">
        The <see cref="T:System.Drawing.SizeF"/> structure on the left of the inequality operator.
      </param>
      <param name="sz2">
        The <see cref="T:System.Drawing.SizeF"/> structure on the right of the inequality operator.
      </param>
      <returns>
        <para>This operator returns <see langword="true"/> if <paramref name="sz1"/> and <paramref name="sz2"/> differ either in width or height; <see langword="false"/> if <paramref name="sz1"/> and <paramref name="sz2"/> are equal.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.SizeF.op_Subtraction(System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary>
        <para>Subtracts the width and height of one <see cref="T:System.Drawing.SizeF"/> structure from the width and height of another <see cref="T:System.Drawing.SizeF"/> structure.</para>
      </summary>
      <param name="sz1">
        The <see cref="T:System.Drawing.SizeF"/> on the left side of the subtraction operator.
      </param>
      <param name="sz2">
        The <see cref="T:System.Drawing.SizeF"/> on the right side of the subtraction operator.
      </param>
      <returns>
        <para>A <see cref="T:System.Drawing.SizeF"/> that is the result of the subtraction operation.</para>
      </returns>
    </member>

    <member name="F:System.Drawing.SizeF.Empty">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.SizeF"/> class.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.BitmapData">
      <summary>
        <para>Specifies the attributes of a bitmap image. The <see cref="T:System.Drawing.Imaging.BitmapData"/> class is used by the <see langword="LockBits"/> and <see langword="UnlockBits"/> methods of the <see cref="T:System.Drawing.Bitmap"/> class. Not inheritable.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Imaging.BitmapData.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.BitmapData"/> class.</para>
      </summary>
    </member>

    <member name="P:System.Drawing.Imaging.BitmapData.PixelFormat">
      <summary>
        <para>Gets or sets the format of the pixel information in the <see cref="T:System.Drawing.Bitmap"/>object that returned this <see cref="T:System.Drawing.Imaging.BitmapData"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Imaging.PixelFormat"/> that specifies the format of the pixel information in the associated <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </value>
      <remarks>
        <para>The format defines how many bits of memory are needed to store the color information for a single pixel.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.BitmapData.Height">
      <summary>
        <para>Gets or sets the pixel height of the <see cref="T:System.Drawing.Bitmap"/> object. Also sometimes referred to as the number of scan lines.</para>
      </summary>
      <value>
        <para>The pixel height of the <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.BitmapData.Reserved">
      <summary>
        <para>Reserved. Do not use.</para>
      </summary>
      <value>
        <para>Reserved. Do not use.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.BitmapData.Scan0">
      <summary>
        <para>Gets or sets the address of the first pixel data in the bitmap. This can also be thought of as the first scan line in the bitmap.</para>
      </summary>
      <value>
        <para>The address of the first pixel data in the bitmap.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.BitmapData.Stride">
      <summary>
        <para>Gets or sets the stride width (also called scan width) of the <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </summary>
      <value>
        <para>The stride width of the <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </value>
      <remarks>
        <para>The stride is the width of a single row of pixels (a scan line), rounded up to a four-byte boundary. The stride is always greater than or equal to the actual pixel width. If the stride is positive, the bitmap is top-down. If the stride is negative, the bitmap is bottom-up.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.BitmapData.Width">
      <summary>
        <para>Gets or sets the pixel width of the <see cref="T:System.Drawing.Bitmap"/> object. This can also be thought of as the number of pixels in one scan line.</para>
      </summary>
      <value>
        <para>The pixel width of the <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Imaging.ColorMap">
      <summary>
        <para>Defines a map for converting colors. Several methods of the <see cref="T:System.Drawing.Imaging.ImageAttributes"/> class adjust image colors by using a color-remap table, which is an array of <see cref="T:System.Drawing.Imaging.ColorMap"/> structures. Not inheritable.</para>
      </summary>
      <remarks>
        <para>This class defines a mapping between existing colors and the new colors to which they are to be converted. When the map is applied, any pixel of the old color is converted to the new color.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ColorMap.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.ColorMap"/> class.</para>
      </summary>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMap.NewColor">
      <summary>
        <para>Gets or sets the new <see cref="T:System.Drawing.Color"/> structure to which to convert.</para>
      </summary>
      <value>
        <para>The new <see cref="T:System.Drawing.Color"/> structure to which to convert.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMap.OldColor">
      <summary>
        <para>Gets or sets the existing <see cref="T:System.Drawing.Color"/> structure to be converted.</para>
      </summary>
      <value>
        <para>The existing <see cref="T:System.Drawing.Color"/> structure to be converted.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Imaging.ColorMatrix">
      <summary>
        <para>Defines a 5x5 matrix that contains the coordinates for the RGBA space. Several methods of the <see cref="T:System.Drawing.Imaging.ImageAttributes"/> class adjust image colors by using a color matrix. Not inheritable.</para>
      </summary>
      <remarks>
        <para>The matrix coefficients constitute a 5x5 linear transformation that is used for transforming ARGB homogeneous values. For example, an ARGB vector represented as alpha, red, green, blue, and w, where w is always 1.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ColorMatrix.#ctor">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> class.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> class.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Imaging.ColorMatrix.#ctor(System.Single[][])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> class using the elements in the specified matrix <paramref name="newColorMatrix"/>.</para>
      </summary>
      <param name="newColorMatrix">
        The values of the elements for the new <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.
      </param>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Item">
      <summary>
        <para>Gets or sets the value of the specified element of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The value of the specified element of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
      <param name="row">
        The row of the element.
      </param>
      <param name="column">
        The column of the element.
      </param>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix00">
      <summary>
        <para>Gets or sets the element at the 0th row and 0th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 0th row and 0th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix01">
      <summary>
        <para>Gets or sets the element at the 0th row and 1st column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 0th row and 1st column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix02">
      <summary>
        <para>Gets or sets the element at the 0th row and 2nd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 0th row and 2nd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix03">
      <summary>
        <para>Gets or sets the element at the 0th row and 3rd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 0th row and 3rd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix04">
      <summary>
        <para>Gets or sets the element at the 0th row and 4th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 0th row and 4th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix10">
      <summary>
        <para>Gets or sets the element at the 1st row and 0th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 1st row and 0th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix11">
      <summary>
        <para>Gets or sets the element at the 1st row and 1st column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 1st row and 1st column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix12">
      <summary>
        <para>Gets or sets the element at the 1st row and 2nd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 1st row and 2nd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix13">
      <summary>
        <para>Gets or sets the element at the 1st row and 3rd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 1st row and 3rd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix14">
      <summary>
        <para>Gets or sets the element at the 1st row and 4th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 1st row and 4th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix20">
      <summary>
        <para>Gets or sets the element at the 2nd row and 0th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 2nd row and 0th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix21">
      <summary>
        <para>Gets or sets the element at the 2nd row and 1st column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 2nd row and 1st column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix22">
      <summary>
        <para>Gets or sets the element at the 2nd row and 2nd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 2nd row and 2nd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix23">
      <summary>
        <para>Gets or sets the element at the 2nd row and 3rd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 2nd row and 3rd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix24">
      <summary>
        <para>Gets or sets the element at the 2nd row and 4th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 2nd row and 4th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix30">
      <summary>
        <para>Gets or sets the element at the 3rd row and 0th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 3rd row and 0th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix31">
      <summary>
        <para>Gets or sets the element at the 3rd row and 1st column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 3rd row and 1st column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix32">
      <summary>
        <para>Gets or sets the element at the 3rd row and 2nd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 3rd row and 2nd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix33">
      <summary>
        <para>Gets or sets the element at the 3rd row and 3rd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 3rd row and 3rd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix34">
      <summary>
        <para>Gets or sets the element at the 3rd row and 4th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 3rd row and 4th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix40">
      <summary>
        <para>Gets or sets the element at the 4th row and 0th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 4th row and 0th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix41">
      <summary>
        <para>Gets or sets the element at the 4th row and 1st column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 4th row and 1st column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix42">
      <summary>
        <para>Gets or sets the element at the 4th row and 2nd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 4th row and 2nd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix43">
      <summary>
        <para>Gets or sets the element at the 4th row and 3rd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 4th row and 3rd column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorMatrix.Matrix44">
      <summary>
        <para>Gets or sets the element at the 4th row and 4th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </summary>
      <value>
        <para>The element at the 4th row and 4th column of this <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Imaging.ColorPalette">
      <summary>
        <para>Defines an array of colors that make up a color palette. The colors are 32-bit ARGB colors. Not inheritable.</para>
      </summary>
      <remarks>
        <para>The colors in the palette are limited to 32-bit ARGB colors. A 32-bit ARGB color has 8 bits each for alpha, red, green, and blue values. The lowest 8 bits make up the blue bit, the next 8 bits are green, the next 8 bits are red, and the most significant 8 bits are alpha. This means each component can vary from 0 to 255. Fully on is 255 and fully off is 0. Alpha is used to make the color value transparent (alpha = 0) or opaque (alpha = 255). The number of intensity levels in the image can be increased without increasing the number of colors used. This process creates what is called a halftone, and it offers increased contrast at a cost of decreased resolution.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.ColorPalette.Entries">
      <summary>
        <para>Gets an array of <see cref="T:System.Drawing.Color"/> structures.</para>
      </summary>
      <value>
        <para>The array of <see cref="T:System.Drawing.Color"/> structure that make up this <see cref="T:System.Drawing.Imaging.ColorPalette"/>.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ColorPalette.Flags">
      <summary>
        <para>Gets a value that specifies how to interpret the color information in the array of colors.</para>
      </summary>
      <value>
        <para>The following flag values are valid:</para>
        <list type="termdef">
          <item>
            <term>0x00000001</term>
            <description>The color values in the array contain alpha information.</description>
          </item>
          <item>
            <term>0x00000002</term>
            <description>The colors in the array are grayscale values.</description>
          </item>
          <item>
            <term>0x00000004</term>
            <description>The colors in the array are halftone values.</description>
          </item>
        </list>
      </value>
    </member>

    <member name="T:System.Drawing.Imaging.Encoder">
      <summary>
        <para>An <see cref="T:System.Drawing.Imaging.Encoder"/> object encapsulates a globally unique identifier (GUID) that identifies the category of an image encoder parameter.</para>
      </summary>
      <remarks>
        <para>When you pass a parameter to an image encoder, the parameter is encapsulated in an <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object. One of the private fields of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object is a GUID that specifies the category of the parameter. The image encoders that are built into GDI+ receive parameters that belong to the following categories:</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.Encoder.#ctor(System.Guid)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Encoder"/> class from the specified globally unique identifier (GUID). The GUID specifies an image encoder parameter category.</para>
      </summary>
      <param name="guid">
        A globally unique identifier that identifies an image encoder parameter category.
      </param>
    </member>

    <member name="P:System.Drawing.Imaging.Encoder.Guid">
      <summary>
        <para>Gets a globally unique identifier (GUID) that identifies an image encoder parameter category.</para>
      </summary>
      <value>
        <para>The GUID that identifies an image encoder parameter category.</para>
      </value>
    </member>

    <member name="F:System.Drawing.Imaging.Encoder.ChrominanceTable">
      <summary>
        <para>An <see cref="T:System.Drawing.Imaging.Encoder"/> object that is initialized with the globally unique identifier for the chrominance table parameter category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.Encoder.ColorDepth">
      <summary>
        <para>An <see cref="T:System.Drawing.Imaging.Encoder"/> object that is initialized with the globally unique identifier for the color depth parameter category.</para>
      </summary>
      <example>
        <para>The following example creates a <see cref="T:System.Drawing.Bitmap"/> object from a BMP file. The code saves the image as a TIFF file with a color depth of 24 bits per pixel.</para>
        <code lang="C#">using System;
using System.Drawing;
using System.Drawing.Imaging;
class Example_SetColorDepth
{
public static void Main()
{
Bitmap myBitmap;
ImageCodecInfo myImageCodecInfo;
Encoder myEncoder;
EncoderParameter myEncoderParameter;
EncoderParameters myEncoderParameters;
// Create a Bitmap object based on a BMP file.
myBitmap = new Bitmap(&quot;Shapes.bmp&quot;);
// Get an ImageCodecInfo object that represents the TIFF codec.
myImageCodecInfo = GetEncoderInfo(&quot;image/tiff&quot;);
// Create an Encoder object based on the GUID
// for the ColorDepth parameter category.
myEncoder = Encoder.ColorDepth;
// Create an EncoderParameters object.
// An EncoderParameters object has an array of EncoderParameter
// objects. In this case, there is only one
// EncoderParameter object in the array.
myEncoderParameters = new EncoderParameters(1);
// Save the image with a color depth of 24 bits per pixel.
myEncoderParameter =
new EncoderParameter(myEncoder, 24L);
myEncoderParameters.Param[0] = myEncoderParameter;
myBitmap.Save(&quot;Shapes24bpp.tiff&quot;, myImageCodecInfo, myEncoderParameters);
}
private static ImageCodecInfo GetEncoderInfo(String mimeType)
{
int j;
ImageCodecInfo[] encoders;
encoders = ImageCodecInfo.GetImageEncoders();
for(j = 0; j &lt; encoders.Length; ++j)
{
if(encoders[j].MimeType == mimeType)
return encoders[j];
}
return null;
}
}
        </code>
      </example>
    </member>

    <member name="F:System.Drawing.Imaging.Encoder.Compression">
      <summary>
        <para>An <see cref="T:System.Drawing.Imaging.Encoder"/> object that is initialized with the globally unique identifier for the compression parameter category.</para>
      </summary>
      <example>
        <para>The following example creates a <see cref="T:System.Drawing.Bitmap"/> object from a BMP file. The code saves the image as a TIFF file with LZW compression.</para>
        <code lang="C#">using System;
using System.Drawing;
using System.Drawing.Imaging;
class Example_SetTIFFCompression
{
public static void Main()
{
Bitmap myBitmap;
ImageCodecInfo myImageCodecInfo;
Encoder myEncoder;
EncoderParameter myEncoderParameter;
EncoderParameters myEncoderParameters;
// Create a Bitmap object based on a BMP file.
myBitmap = new Bitmap(&quot;Shapes.bmp&quot;);
// Get an ImageCodecInfo object that represents the TIFF codec.
myImageCodecInfo = GetEncoderInfo(&quot;image/tiff&quot;);
// Create an Encoder object based on the GUID
// for the Compression parameter category.
myEncoder = Encoder.Compression;
// Create an EncoderParameters object.
// An EncoderParameters object has an array of EncoderParameter
// objects. In this case, there is only one
// EncoderParameter object in the array.
myEncoderParameters = new EncoderParameters(1);
// Save the bitmap as a TIFF file with LZW compression.
myEncoderParameter = new EncoderParameter(
myEncoder,
(long)EncoderValue.CompressionLZW);
myEncoderParameters.Param[0] = myEncoderParameter;
myBitmap.Save(&quot;ShapesLZW.tif&quot;, myImageCodecInfo, myEncoderParameters);
}
private static ImageCodecInfo GetEncoderInfo(String mimeType)
{
int j;
ImageCodecInfo[] encoders;
encoders = ImageCodecInfo.GetImageEncoders();
for(j = 0; j &lt; encoders.Length; ++j)
{
if(encoders[j].MimeType == mimeType)
return encoders[j];
}
return null;
}
}
        </code>
      </example>
    </member>

    <member name="F:System.Drawing.Imaging.Encoder.LuminanceTable">
      <summary>
        <para>An <see cref="T:System.Drawing.Imaging.Encoder"/> object that is initialized with the globally unique identifier for the luminance table parameter category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.Encoder.Quality">
      <summary>
        <para>An <see cref="T:System.Drawing.Imaging.Encoder"/> object that is initialized with the globally unique identifier for the quality parameter category.</para>
      </summary>
      <example>
        <para>The following example creates a <see cref="T:System.Drawing.Bitmap"/> object from a BMP file. The code saves the bitmap to three JPEG files, each with a different quality level.</para>
        <code lang="C#">using System;
using System.Drawing;
using System.Drawing.Imaging;
class Example_SetJPEGQuality
{
public static void Main()
{
Bitmap myBitmap;
ImageCodecInfo myImageCodecInfo;
Encoder myEncoder;
EncoderParameter myEncoderParameter;
EncoderParameters myEncoderParameters;
// Create a Bitmap object based on a BMP file.
myBitmap = new Bitmap(&quot;Shapes.bmp&quot;);
// Get an ImageCodecInfo object that represents the JPEG codec.
myImageCodecInfo = GetEncoderInfo(&quot;image/jpeg&quot;);
// Create an Encoder object based on the GUID
// for the Quality parameter category.
myEncoder = Encoder.Quality;
// Create an EncoderParameters object.
// An EncoderParameters object has an array of EncoderParameter
// objects. In this case, there is only one
// EncoderParameter object in the array.
myEncoderParameters = new EncoderParameters(1);
// Save the bitmap as a JPEG file with quality level 25.
myEncoderParameter = new EncoderParameter(myEncoder, 25L);
myEncoderParameters.Param[0] = myEncoderParameter;
myBitmap.Save(&quot;Shapes025.jpg&quot;, myImageCodecInfo, myEncoderParameters);
// Save the bitmap as a JPEG file with quality level 50.
myEncoderParameter = new EncoderParameter(myEncoder, 50L);
myEncoderParameters.Param[0] = myEncoderParameter;
myBitmap.Save(&quot;Shapes050.jpg&quot;, myImageCodecInfo, myEncoderParameters);
// Save the bitmap as a JPEG file with quality level 75.
myEncoderParameter = new EncoderParameter(myEncoder, 75L);
myEncoderParameters.Param[0] = myEncoderParameter;
myBitmap.Save(&quot;Shapes075.jpg&quot;, myImageCodecInfo, myEncoderParameters);
}
private static ImageCodecInfo GetEncoderInfo(String mimeType)
{
int j;
ImageCodecInfo[] encoders;
encoders = ImageCodecInfo.GetImageEncoders();
for(j = 0; j &lt; encoders.Length; ++j)
{
if(encoders[j].MimeType == mimeType)
return encoders[j];
}
return null;
}
}
        </code>
      </example>
    </member>

    <member name="F:System.Drawing.Imaging.Encoder.RenderMethod">
      <summary>
        <para>An <see cref="T:System.Drawing.Imaging.Encoder"/> object that is initialized with the globally unique identifier for the render method parameter category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.Encoder.SaveFlag">
      <summary>
        <para>An <see cref="T:System.Drawing.Imaging.Encoder"/> object that is initialized with the globally unique identifier for the save flag parameter category.</para>
      </summary>
      <example>
        <para>The following example creates three <see cref="T:System.Drawing.Bitmap"/> objects: one from a BMP file, one from a JPEG file, and one from a PNG file. The code saves all three images in a single, multiple-frame TIFF file.</para>
        <code lang="C#">using System;
using System.Drawing;
using System.Drawing.Imaging;
class Example_MultiFrame
{
public static void Main()
{
Bitmap multi;
Bitmap page2;
Bitmap page3;
ImageCodecInfo myImageCodecInfo;
Encoder myEncoder;
EncoderParameter myEncoderParameter;
EncoderParameters myEncoderParameters;
// Create three Bitmap objects.
multi = new Bitmap(&quot;Shapes.bmp&quot;);
page2 = new Bitmap(&quot;Iron.jpg&quot;);
page3 = new Bitmap(&quot;House.png&quot;);
// Get an ImageCodecInfo object that represents the TIFF codec.
myImageCodecInfo = GetEncoderInfo(&quot;image/tiff&quot;);
// Create an Encoder object based on the GUID
// for the SaveFlag parameter category.
myEncoder = Encoder.SaveFlag;
// Create an EncoderParameters object.
// An EncoderParameters object has an array of EncoderParameter
// objects. In this case, there is only one
// EncoderParameter object in the array.
myEncoderParameters = new EncoderParameters(1);
// Save the first page (frame).
myEncoderParameter = new EncoderParameter(
myEncoder,
(long)EncoderValue.MultiFrame);
myEncoderParameters.Param[0] = myEncoderParameter;
multi.Save(&quot;Multiframe.tiff&quot;, myImageCodecInfo, myEncoderParameters);
// Save the second page (frame).
myEncoderParameter = new EncoderParameter(
myEncoder,
(long)EncoderValue.FrameDimensionPage);
myEncoderParameters.Param[0] = myEncoderParameter;
multi.SaveAdd(page2, myEncoderParameters);
// Save the third page (frame).
myEncoderParameter = new EncoderParameter(
myEncoder,
(long)EncoderValue.FrameDimensionPage);
myEncoderParameters.Param[0] = myEncoderParameter;
multi.SaveAdd(page3, myEncoderParameters);
// Close the multiple-frame file.
myEncoderParameter = new EncoderParameter(
myEncoder,
(long)EncoderValue.Flush);
myEncoderParameters.Param[0] = myEncoderParameter;
multi.SaveAdd(myEncoderParameters);
}
private static ImageCodecInfo GetEncoderInfo(String mimeType)
{
int j;
ImageCodecInfo[] encoders;
encoders = ImageCodecInfo.GetImageEncoders();
for(j = 0; j &lt; encoders.Length; ++j)
{
if(encoders[j].MimeType == mimeType)
return encoders[j];
}
return null;
}
}
        </code>
      </example>
    </member>

    <member name="F:System.Drawing.Imaging.Encoder.ScanMethod">
      <summary>
        <para>An <see cref="T:System.Drawing.Imaging.Encoder"/> object that is initialized with the globally unique identifier for the scan method parameter category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.Encoder.Transformation">
      <summary>
        <para>An <see cref="T:System.Drawing.Imaging.Encoder"/> object that is initialized with the globally unique identifier for the transformation parameter category.</para>
      </summary>
      <example>
        <para>The following example creates a <see cref="T:System.Drawing.Bitmap"/> object from a JPEG file. The code rotates the image 90 degrees and saves it in a separate JPEG file.</para>
        <code lang="C#">using System;
using System.Drawing;
using System.Drawing.Imaging;
class Example_RotateJPEG
{
public static void Main()
{
Bitmap myBitmap;
ImageCodecInfo myImageCodecInfo;
Encoder myEncoder;
EncoderParameter myEncoderParameter;
EncoderParameters myEncoderParameters;
// Create a Bitmap object based on a JPEG file.
myBitmap = new Bitmap(&quot;Shapes.jpg&quot;);
// Get an ImageCodecInfo object that represents the JPEG codec.
myImageCodecInfo = GetEncoderInfo(&quot;image/jpeg&quot;);
// Create an Encoder object based on the GUID
// for the Transformation parameter category.
myEncoder = Encoder.Transformation;
// Create an EncoderParameters object.
// An EncoderParameters object has an array of EncoderParameter
// objects. In this case, there is only one
// EncoderParameter object in the array.
myEncoderParameters = new EncoderParameters(1);
// Rotate the image 90 degrees, and save it as a separate JPEG file.
myEncoderParameter = new EncoderParameter(
myEncoder,
(long)EncoderValue.TransformRotate90);
myEncoderParameters.Param[0] = myEncoderParameter;
myBitmap.Save(&quot;ShapesR90.jpg&quot;, myImageCodecInfo, myEncoderParameters);
}
private static ImageCodecInfo GetEncoderInfo(String mimeType)
{
int j;
ImageCodecInfo[] encoders;
encoders = ImageCodecInfo.GetImageEncoders();
for(j = 0; j &lt; encoders.Length; ++j)
{
if(encoders[j].MimeType == mimeType)
return encoders[j];
}
return null;
}
}
        </code>
      </example>
    </member>

    <member name="F:System.Drawing.Imaging.Encoder.Version">
      <summary>
        <para>An <see cref="T:System.Drawing.Imaging.Encoder"/> object that is initialized with the globally unique identifier for the version parameter category.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.EncoderParameter">
      <summary>
        <para>You can use an <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object to pass an array of values to an image encoder. You can also use an <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object to receive a list of possible values supported by a particular parameter of a particular image encoder.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Byte)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and one unsigned 8-bit integer.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and one unsigned 8-bit integer. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to ValueTypeByte, and sets the <see langword="NumberOfValues"/> property to 1.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="value">
        An 8-bit unsigned integer that specifies the value stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Byte,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and one 8-bit value. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to ValueTypeUndefined or ValueTypeByte, and sets the <see langword="NumberOfValues"/> property to 1.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="value">
        A byte that specifies the value stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.
      </param>
      <param name="undefined">
        If <see langword="true"/>, the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property is set to ValueTypeUndefined; otherwise, the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property is set to ValueTypeByte.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and an array of unsigned 8-bit integers. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to ValueTypeByte, and sets the <see langword="NumberOfValues"/> property to the number of elements in the array.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="value">
        An array of 8-bit unsigned integers that specifies the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Byte[],System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and an array of bytes. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to ValueTypeUndefined or ValueTypeByte, and sets the <see langword="NumberOfValues"/> property to the number of elements in the array.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="value">
        An array of bytes that specifies the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.
      </param>
      <param name="undefined">
        If <see langword="true"/>, the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property is set to ValueTypeUndefined; otherwise, the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property is set to ValueTypeByte.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Int16)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and one, 16-bit integer. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to ValueTypeShort, and sets the <see langword="NumberOfValues"/> property to 1.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="value">
        A 16-bit integer that specifies the value stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object. Must be nonnegative.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Int16[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and an array of 16-bit integers. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to ValueTypeShort, and sets the <see langword="NumberOfValues"/> property to the number of elements in the array.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="value">
        An array of 16-bit integers that specifies the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object. The integers in the array must be nonnegative.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and a pair of 32-bit integers. The pair of integers represents a fraction, the first integer being the numerator, and the second integer being the denominator. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to ValueTypeRational, and sets the <see langword="NumberOfValues"/> property to 1.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="numerator">
        A 32-bit integer that represents the numerator of a fraction. Must be nonnegative.
      </param>
      <param name="denominator">
        A 32-bit integer that represents the denominator of a fraction. Must be nonnegative.
      </param>
	  <param name="demoninator">
        A 32-bit integer that represents the denominator of a fraction. Must be nonnegative.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and three integers that specify the number of values, the data type of the values, and a pointer to the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="NumberOfValues">
        An integer that specifies the number of values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object. The <see langword="NumberOfValues"/> property is set to this value.
      </param>
      <param name="Type">
        A member of the <see langword="EncoderParameterValueType"/> enumeration that specifies the data type of the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object. The <see cref="T:System.Type"/> property and the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property are set to this value.
      </param>
      <param name="Value">
        A pointer to an array of values of the type specified by the <paramref name="Type"/> parameter. The <see langword="ValuePointer"/> property is set to this address.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and four, 32-bit integers. The four integers represent a range of fractions. The first two integers represent the smallest fraction in the range, and the remaining two integers represent the largest fraction in the range. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to ValueTypeRationalRange, and sets the <see langword="NumberOfValues"/> property to 1.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="numerator1">
        A 32-bit integer that represents the numerator of the smallest fraction in the range. Must be nonnegative.
      </param>
      <param name="denominator1">
        A 32-bit integer that represents the denominator of the smallest fraction in the range. Must be nonnegative.
      </param>
	  <param name="demoninator1">
        A 32-bit integer that represents the denominator of the smallest fraction in the range. Must be nonnegative.
      </param>
      <param name="numerator2">
        A 32-bit integer that represents the numerator of the largest fraction in the range. Must be nonnegative.
      </param>
      <param name="denominator2">
        A 32-bit integer that represents the denominator of the largest fraction in the range. Must be nonnegative.
      </param>
	  <param name="demoninator2">
        A 32-bit integer that represents the denominator of the largest fraction in the range. Must be nonnegative.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Int32[],System.Int32[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and two arrays of 32-bit integers. The two arrays represent an array of fractions. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to <see langword="ValueTypeRational"/>, and sets the <see langword="NumberOfValues"/> property to the number of elements in the <paramref name="numerator"/> array, which must be the same as the number of elements in the <paramref name="denominator"/> array.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="numerator">
        An array of 32-bit integers that specifies the numerators of the fractions. The integers in the array must be nonnegative.
      </param>
      <param name="denominator">
        An array of 32-bit integers that specifies the denominators of the fractions. The integers in the array must be nonnegative. A denominator of a given index is paired with the numerator of the same index.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and four arrays of 32-bit integers. The four arrays represent an array rational ranges. A rational range is the set of all fractions from a minimum fractional value through a maximum fractional value. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to ValueTypeRationalRange, and sets the <see langword="NumberOfValues"/> property to the number of elements in the <paramref name="numerator1"/> array, which must be the same as the number of elements in the other three arrays.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="numerator1">
        An array of 32-bit integers that specifies the numerators of the minimum values for the ranges. The integers in the array must be nonnegative.
      </param>
      <param name="denominator1">
        An array of 32-bit integers that specifies the denominators of the minimum values for the ranges. The integers in the array must be nonnegative.
      </param>
      <param name="numerator2">
        An array of 32-bit integers that specifies the numerators of the maximum values for the ranges. The integers in the array must be nonnegative.
      </param>
      <param name="denominator2">
        An array of 32-bit integers that specifies the denominators of the maximum values for the ranges. The integers in the array must be nonnegative.
      </param>
      <remarks>
        <para>The ith range consists of all fractional numbers from numerator1[i]/denominator1[i] through numerator2[i]/denominator2[i].</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Int64)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and one 64-bit integer. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to <see langword="ValueTypeLong"/> (32 bits), and sets the <see langword="NumberOfValues"/> property to 1.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="value">
        A 64-bit integer that specifies the value stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object. Must be nonnegative. This parameter is converted to a 32-bit integer before it is stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Int64,System.Int64)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and a pair of 64-bit integers. The pair of integers represents a range of integers, the first integer being the smallest number in the range, and the second integer being the largest number in the range. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to <see langword="ValueTypeLongRange"/>, and sets the <see langword="NumberOfValues"/> property to 1.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="rangebegin">
        A 64-bit integer that represents the smallest number in a range of integers. Must be nonnegative. This parameter is converted to a 32-bit integer before it is stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.
      </param>
      <param name="rangeend">
        A 64-bit integer that represents the largest number in a range of integers. Must be nonnegative. This parameter is converted to a 32-bit integer before it is stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Int64[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and an array of 64-bit integers. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to ValueTypeLong (32-bit), and sets the <see langword="NumberOfValues"/> property to the number of elements in the array.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="value">
        An array of 64-bit integers that specifies the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object. The integers in the array must be nonnegative. The 64-bit integers are converted to 32-bit integers before they are stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.Int64[],System.Int64[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and two arrays of 64-bit integers. The two arrays represent an array integer ranges. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to ValueTypeLongRange, and sets the <see langword="NumberOfValues"/> property to the number of elements in the <paramref name="rangebegin"/> array, which must be the same as the number of elements in the <paramref name="rangeend"/> array.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="rangebegin">
        An array of 64-bit integers that specifies the minimum values for the integer ranges. The integers in the array must be nonnegative. The 64-bit integers are converted to 32-bit integers before they are stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.
      </param>
      <param name="rangeend">
        An array of 64-bit integers that specifies the maximum values for the integer ranges. The integers in the array must be nonnegative. The 64-bit integers are converted to 32-bit integers before they are stored in the <see cref="T:System.Drawing.Imaging.EncoderParameters"/> object. A maximum value of a given index is paired with the minimum value of the same index.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.#ctor(System.Drawing.Imaging.Encoder,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> class with the specified <see cref="T:System.Drawing.Imaging.Encoder"/> object and a character string. The string is converted to a null-terminated ASCII string before it is stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType"/> property to <see langword="ValueTypeAscii"/>, and sets the <see langword="NumberOfValues"/> property to the length of the ASCII string including the NULL terminator.</para>
      </summary>
      <param name="encoder">
        An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the globally unique identifier of the parameter category.
      </param>
      <param name="value">
        A <see cref="T:System.String"/> that specifies the value stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.
      </param>
    </member>

    <member name="P:System.Drawing.Imaging.EncoderParameter.Encoder">
      <summary>
        <para>Gets or sets the <see cref="T:System.Drawing.Imaging.Encoder"/> object associated with this <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object. The <see cref="T:System.Drawing.Imaging.Encoder"/> object encapsulates the globally unique identifier (GUID) that specifies the category (for example Quality, ColorDepth, or Compression) of the parameter stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Imaging.Encoder"/> object that encapsulates the GUID that specifies the category of the parameter stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues">
      <summary>
        <para>Gets the number of elements in the array of values stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.</para>
      </summary>
      <value>
        <para>An integer that indicates the number of elements in the array of values stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.EncoderParameter.Type">
      <summary>
        <para>Gets the data type of the values stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.</para>
      </summary>
      <value>
        <para>A member of the <see langword="EncoderParameterValueType"/> enumeration that indicates the data type of the values stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.EncoderParameter.ValueType">
      <summary>
        <para>Gets the data type of the values stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.</para>
      </summary>
      <value>
        <para>A member of the <see langword="EncoderParameterValueType"/> enumeration that indicates the data type of the values stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.</para>
      </value>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameter.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="T:System.Drawing.Imaging.EncoderParameters">
      <summary>
        <para>Encapsulates an array of <see cref="T:System.Drawing.Imaging.EncoderParameter"/> objects.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameters.#ctor(System.Int32)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameters"/> class that can contain the specified number of <see cref="T:System.Drawing.Imaging.EncoderParameter"/> objects.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameters"/> class that can contain the specified number of <see cref="T:System.Drawing.Imaging.EncoderParameter"/> objects.</para>
      </summary>
      <param name="count">
        An integer that specifies the number of <see cref="T:System.Drawing.Imaging.EncoderParameter"/> objects that the <see cref="T:System.Drawing.Imaging.EncoderParameters"/> object can contain.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameters.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameters"/> class that can contain one <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object.</para>
      </summary>
      <remarks>
        <para>Some of the <see cref="M:System.Drawing.Image.Save"/> and <see cref="M:System.Drawing.Image.SaveAdd"/> methods receive an <see cref="T:System.Drawing.Imaging.EncoderParameters"/> object as an argument. The <see langword="Image.GetEncoderParameterList"/> method returns an <see cref="T:System.Drawing.Imaging.EncoderParameters"/> object.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.EncoderParameters.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Imaging.EncoderParameters"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Imaging.EncoderParameters"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.EncoderParameters.Param">
      <summary>
        <para>Gets or sets an array of <see cref="T:System.Drawing.Imaging.EncoderParameter"/> objects.</para>
      </summary>
      <value>
        <para>The array of <see cref="T:System.Drawing.Imaging.EncoderParameter"/> objects.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Imaging.FrameDimension">
      <summary>
        <para>Provides properties that get the frame dimensions of an image. Not inheritable.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Imaging.FrameDimension.#ctor(System.Guid)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.FrameDimension"/> class using the specified <see langword="Guid"/> structure.</para>
      </summary>
      <param name="guid">
        A <see langword="Guid"/> structure that contains a GUID  for this <see cref="T:System.Drawing.Imaging.FrameDimension"/> object.
      </param>
    </member>

    <member name="P:System.Drawing.Imaging.FrameDimension.Guid">
      <summary>
        <para>Gets a globally unique identifier (GUID) that represents this <see cref="T:System.Drawing.Imaging.FrameDimension"/> object.</para>
      </summary>
      <value>
        <para>A <see langword="Guid"/> structure that contains a GUID that represents this <see cref="T:System.Drawing.Imaging.FrameDimension"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.FrameDimension.Page">
      <summary>
        <para>Gets the page dimension.</para>
      </summary>
      <value>
        <para>The page dimension.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.FrameDimension.Resolution">
      <summary>
        <para>Gets the resolution dimension.</para>
      </summary>
      <value>
        <para>The resolution dimension.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.FrameDimension.Time">
      <summary>
        <para>Gets the time dimension.</para>
      </summary>
      <value>
        <para>The time dimension.</para>
      </value>
    </member>

    <member name="M:System.Drawing.Imaging.FrameDimension.Equals(System.Object)">
      <summary>
        <para>Returns a value that indicates whether the specified object is a <see cref="T:System.Drawing.Imaging.FrameDimension"/> equivalent to this <see cref="T:System.Drawing.Imaging.FrameDimension"/> object.</para>
      </summary>
      <param name="o">
        The object to test.
      </param>
      <returns>
        <para>Returns <see langword="true"/> if <paramref name="o"/> is a <see cref="T:System.Drawing.Imaging.FrameDimension"/> equivalent to this <see cref="T:System.Drawing.Imaging.FrameDimension"/> object; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.FrameDimension.GetHashCode">
      <summary>
        <para>Returns a hash code for this <see cref="T:System.Drawing.Imaging.FrameDimension"/> object.</para>
      </summary>
      <returns>
        <para>Returns an <see langword="int"/> value that is the hash code of this <see cref="T:System.Drawing.Imaging.FrameDimension"/> object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.FrameDimension.ToString">
      <summary>
        <para>Converts this <see cref="T:System.Drawing.Imaging.FrameDimension"/> object to a human-readable string.</para>
      </summary>
      <returns>
        <para>A string that represents this <see cref="T:System.Drawing.Imaging.FrameDimension"/> object.</para>
      </returns>
    </member>

    <member name="T:System.Drawing.Imaging.ImageAttributes">
      <summary>
        <para>An <see langword="ImageAttributes"/> object contains information about how bitmap and metafile colors are manipulated during rendering. An <see langword="ImageAttributes"/> object maintains several color-adjustment settings, including color-adjustment matrices, grayscale-adjustment matrices, gamma-correction values, color-map tables, and color-threshold values.</para>
        <para>During rendering colors can be corrected, darkened, lightened, removed, and so on. To apply such manipulations, initialize an <see langword="ImageAttributes"/> object and pass the address of that <see langword="ImageAttributes"/> object (along with the address of an <see cref="T:System.Drawing.Image"/> object) to the <see cref="M:System.Drawing.Graphics.DrawImage"/> method.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.ImageAttributes"/> class.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable">
      <summary>
        <para>This method clears the brush color-remap table of this <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify one color-remap table for the default category, a different color-remap table for the bitmap category, and still a different color-remap table for the brush category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the brush category, then the default settings apply to the brush category.</para>

        <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a default remap table that converts red to green and you specify a default gamma value of 1.8. If you call SetBrushRemapTable, then the default remap table (red to green) and the default gamma value (1.8) will not apply to brushes. If you later call ClearBrushRemapTable, the brush category will not revert to the default remap table; rather, the brush category will have no remap table. Similarly, the brush category will not revert to the default gamma value; rather, the brush category will have no gamma value.</para>
	  </remarks>
    </member>
	
    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearColorKey(System.Drawing.Imaging.ColorAdjustType)">
      <overload>
        Clears the color-key (transparency range).
      </overload>
      <summary>
        <para>Clears the color key (transparency range) for a specified category.</para>
      </summary>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the color key is cleared.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify one color key for the default category, a different color key for the bitmap category, and still a different color key for the pen category.</para>

<para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>

<para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a default color key that makes any color with a red component from 200 through 255 transparent and you specify a default gamma value of 1.8. If you set the color key of the pen category by calling SetColorKey, then the default color key and the default gamma value will not apply to pens. If you later clear the pen color key by calling ClearColorKey, the pen category will not revert to the default color key; rather, the pen category will have no color key. Similarly, the pen category will not revert to the default gamma value; rather, the pen category will have no gamma value.</para>
	  <remarks>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearColorKey">
      <summary>
        <para>Clears the color key (transparency range) for the default category.</para>
      </summary>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify one color key for the default category, a different color key for the bitmap category, and still a different color key for the pen category.</para>

<para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix">
      <overload>
        Clears the color-adjustment matrix.
      </overload>
      <summary>
        <para>Clears the color-adjustment matrix for the default category.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color-adjustment matrix for the default category, a different color-adjustment matrix for the bitmap category, and still a different color-adjustment matrix for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>
     </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(System.Drawing.Imaging.ColorAdjustType)">
      <summary>
        <para>Clears the color-adjustment matrix for a specified category.</para>
      </summary>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the color-adjustment matrix is cleared.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color-adjustment matrix for the default category, a different color-adjustment matrix for the bitmap category, and still a different color-adjustment matrix for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>

        <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a color-adjustment matrix and a gamma value for the default category. If you set a color-adjustment matrix for the pen category by calling SetColorMatrix, then the default color-adjustment matrix will not apply to pens. If you later clear the pen color-adjustment matrix by calling ClearColorMatrix, the pen category will not revert to the default adjustment matrix; rather, the pen category will have no adjustment matrix. Similarly, the pen category will not revert to the default gamma value; rather, the pen category will have no gamma value.</para> 
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearGamma(System.Drawing.Imaging.ColorAdjustType)">
      <overload>
        Disables gamma correction.
      </overload>
      <summary>
        <para>Disables gamma correction for a specified category.</para>
      </summary>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which gamma correction is disabled. 
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a gamma value for the default category, a different gamma value for the bitmap category, and still a different gamma value for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>

        <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a gamma value and a color-adjustment matrix for the default category. If you set the gamma value for the pen category by calling SetGamma, then the default gamma value will not apply to pens. If you later clear the pen gamma value by calling ClearGamma, the pen category will not revert to the default gamma value; rather, the pen category will have no gamma value. Similarly, the pen category will not revert to the default color-adjustment matrix; rather, the pen category will have no color-adjustment matrix.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearGamma">
      <summary>
        <para>Disables gamma correction for the default category.</para>
      </summary>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a gamma value for the default category, a different gamma value for the bitmap category, and still a different gamma value for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearNoOp">
      <overload>
        Clears the NoOp setting.
      </overload>
      <summary>
        <para>Clears the NoOp setting for the default category.</para>
      </summary>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a gamma value for the default category, a different gamma value for the bitmap category, and still a different gamma value for the pen category.</para>

	    <para>You can disable color adjustment for the default category by calling the SetNoOp() method. Later, you can reinstate color adjustment for the default category by calling the ClearNoOp() method. The color adjustment then returns to what was in place before the call to SetNoOp.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearNoOp(System.Drawing.Imaging.ColorAdjustType)">
      <summary>
        <para>Clears the NoOp setting for a specified category.</para>
      </summary>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the NoOp setting is cleared.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a gamma value for the default category, a different gamma value for the bitmap category, and still a different gamma value for the pen category.</para>

	    <para>You can disable color adjustment for a certain category by calling the SetNoOp method. Later, you can reinstate color adjustment for that category by calling the ClearNoOp method. The color adjustment then returns to what was in place before the call to SetNoOp.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(System.Drawing.Imaging.ColorAdjustType)">
      <overload>
        Clears the CMYK output channel setting.
      </overload>
      <summary>
        <para>Clears the CMYK output channel setting for a specified category.</para>
      </summary>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the output channel setting is cleared.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify an output channel for the default category and a different output channel for the bitmap category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the bitmap category, then the default settings apply to the bitmap category.</para>

        <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify an output channel and an adjustment matrix for the default category. If you set the output channel for the bitmap category by calling SetOutputChannel, then the default output channel will not apply to bitmaps. If you later clear the bitmap output channel by calling ClearOutputChannel, the bitmap category will not revert to the default output channel; rather, the bitmap category will have no output channel setting. Similarly, the bitmap category will not revert to the default color-adjustment matrix; rather, the bitmap category will have no color-adjustment matrix.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel">
      <summary>
        <para>Clears the CMYK output channel setting for the default category.</para>
      </summary>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify an output channel for the default category and a different output channel for the bitmap category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the bitmap category, then the default settings apply to the bitmap category.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(System.Drawing.Imaging.ColorAdjustType)">
      <overload>
        Clears the output channel color profile setting.
      </overload>
      <summary>
        <para>Clears the output channel color profile setting for a specified category.</para>
      </summary>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the output channel profile setting is cleared.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify an output channel profile for the default category and a different output channel profile for the bitmap category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the bitmap category, then the default settings apply to the bitmap category.</para>

        <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify an output channel profile and an adjustment matrix for the default category. If you set the output channel profile for the bitmap category by calling SetOutputChannelColorProfile, then the default output channel profile will not apply to bitmaps. If you later clear the bitmap output channel profile by calling ClearOutputChannelColorProfile, the bitmap category will not revert to the default output channel profile; rather, the bitmap category will have no output channel profile setting. Similarly, the bitmap category will not revert to the default color-adjustment matrix; rather, the bitmap category will have no color-adjustment matrix.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile">
      <summary>
        <para>Clears the output channel color profile setting for the default category.</para>
      </summary>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify an output channel profile for the default category and a different output channel profile for the bitmap category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the bitmap category, then the default settings apply to the bitmap category.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearRemapTable(System.Drawing.Imaging.ColorAdjustType)">
      <overload>
        Clears the color-remap table.
      </overload>
      <summary>
        <para>Clears the color-remap table for a specified category.</para>
      </summary>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the remap table is cleared.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a remap table for the default category, a different remap table for the bitmap category, and still a different remap table for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>

        <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a remap table and a gamma value for the default category. If you set the remap table for the pen category by calling SetRemapTable, then the default remap table will not apply to pens. If you later clear the pen remap table by calling ClearRemapTable, the pen category will not revert to the default remap table; rather, the pen category will have no remap table. Similarly, the pen category will not revert to the default gamma value; rather, the pen category will have no gamma value.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearRemapTable">
      <summary>
        <para>Clears the color-remap table for the default category.</para>
      </summary>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a remap table for the default category, a different remap table for the bitmap category, and still a different remap table for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearThreshold">
      <overload>
        Clears the threshold value.
      </overload>
      <summary>
        <para>Clears the threshold value for the default category.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>The threshold is a value from 0 through 1 that specifies a cutoff point for each color component. For example, suppose the threshold is set to 0.7, and suppose you are rendering a color whose red, green, and blue components are 230, 50, and 220. The red component, 230, is greater than 0.7x255, so the red component will be changed to 255 (full intensity). The green component, 50, is less than 0.7x255, so the green component will be changed to 0. The blue component, 220, is greater than 0.7x255, so the blue component will be changed to 255.</para>

        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a threshold for the default category, a different threshold for the bitmap category, and still a different threshold for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.ClearThreshold(System.Drawing.Imaging.ColorAdjustType)">
      <summary>
        <para>Clears the threshold value for a specified category.</para>
      </summary>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the threshold is cleared.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>The threshold is a value from 0 through 1 that specifies a cutoff point for each color component. For example, suppose the threshold is set to 0.7, and suppose you are rendering a color whose red, green, and blue components are 230, 50, and 220. The red component, 230, is greater than 0.7x55, so the red component will be changed to 255 (full intensity). The green component, 50, is less than 0.7x255, so the green component will be changed to 0. The blue component, 220, is greater than 0.7x255, so the blue component will be changed to 255.</para>

        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a threshold for the default category, a different threshold for the bitmap category, and still a different threshold for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>

        <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a threshold and a gamma value for the default category. If you set the threshold for the pen category by calling SetThreshold, then the default threshold will not apply to pens. If you later clear the pen threshold by calling ClearThreshold, the pen category will not revert to the default threshold; rather, the pen category will have no threshold. Similarly, the pen category will not revert to the default gamma value; rather, the pen category will have no gamma value.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.Clone">
      <summary>
        <para>Creates an exact copy of this <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object this class creates, cast as an object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(System.Drawing.Imaging.ColorPalette,System.Drawing.Imaging.ColorAdjustType)">
      <summary>
        <para>Adjusts the colors in a palette according to the adjustment settings of a specified category.
</para>
      </summary>
      <param name="palette">
        A <see cref="T:System.Drawing.Imaging.ColorPalette"/> object that on input, contains the palette to be adjusted, and on output, contains the adjusted palette.
      </param>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category whose adjustment settings will be applied to the palette. 
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color-remap table for the default category, a different color-remap table for the bitmap category, and still a different color-remap table for the pen category.</para>

        <para>When you call GetAdjustedPalette, you can specify the adjustment category that is used to adjust the palette colors. For example, if you pass ColorAdjustType.Bitmap to the GetAdjustedPalette method, then the adjustment settings of the bitmap category are used to adjust the palette colors.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(System.Drawing.Imaging.ColorMap[])">
      <summary>
        <para>Sets the color-remap table for the brush category.</para>
      </summary>
      <param name="map">
        An array of <see cref="T:System.Drawing.Imaging.ColorMap"/> objects.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>A color-remap table is an array of ColorMap structures. Each ColorMap structure has two Color objects: one that specifies an old color and one that specifies a corresponding new color. During rendering, any color that matches one of the old colors in the remap table is changed to the corresponding new color.</para>

        <para>Calling the SetBrushRemapTable method has the same effect as passing ColorAdjustType.Brush to the SetRemapTable method. The specified remap table applies to items in metafiles that are filled with a brush.</para>
	  </remarks>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a single-element <see cref="T:System.Drawing.Imaging.ColorMap"/> array that holds red as the old color and green as the new color.</term>
          </item>
          <item>
            <term>Passes this array to a newly created <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object.</term>
          </item>
        </list>
        <code lang="VB">Public Sub SetBrushRemapTableExample(e As PaintEventArgs)
&apos; Create a color map.
Dim myColorMap(0) As ColorMap
myColorMap(0) = New ColorMap()
myColorMap(0).OldColor = Color.Red
myColorMap(0).NewColor = Color.Green
&apos; Create an ImageAttributes object, passing it to the myColorMap
&apos; array.
Dim imageAttr As New ImageAttributes()
imageAttr.SetBrushRemapTable(myColorMap)
End Sub
        </code>
        <code lang="C#">public void SetBrushRemapTableExample(PaintEventArgs e)
{
// Create a color map.
ColorMap[] myColorMap = new ColorMap[1];
myColorMap[0] = new ColorMap();
myColorMap[0].OldColor = Color.Red;
myColorMap[0].NewColor = Color.Green;
// Create an ImageAttributes object, passing it to the myColorMap
// array.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetBrushRemapTable(myColorMap);
}
        </code>
      </example>
      <remarks>
        <para>This method is intended to be used only with metafiles.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color,System.Drawing.Imaging.ColorAdjustType)">
      <overload>
        Sets the color key (transparency range). 
      </overload>
      <summary>
        <para>Sets the color key (transparency range) for a specified category.</para>
      </summary>
      <param name="colorLow">
        The low color-key value.
      </param>
      <param name="colorHigh">
        The high color-key value.
      </param>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the color key is set.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>This method sets the high and low color-key values so that a range of colors can be made transparent. Any color that has each of its three components (red, green, blue) between the corresponding components of the high and low color keys is made transparent.</para>

        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color key for the default category, a different color key for the bitmap category, and still a different color key for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>

        <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a collection of adjustment settings for the default category. If you set the color key for the pen category by passing ColorAdjustType.Pen to the SetColorKey method, then none of the default adjustment settings will apply to pens.</para>
	  </remarks>  
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Opens an <see cref="T:System.Drawing.Image"/> object that uses the file Circle.bmp and draws it to the screen.</term>
          </item>
          <item>
            <term>Creates an <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object and sets its color key by calling the <see langword="SetColorKey"/> method.</term>
          </item>
          <item>
            <term>Draws the image to the screen using the color key of the <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object.</term>
          </item>
        </list>
        <code lang="VB">Public Sub SetColorKeyExample(e As PaintEventArgs)
&apos; Open an Image file, and draw it to the screen.
Dim myImage As Image = Image.FromFile(&quot;Circle.bmp&quot;)
e.Graphics.DrawImage(myImage, 20, 20)
&apos; Create an ImageAttributes object and set the color key.
Dim lowerColor As Color = Color.FromArgb(245, 0, 0)
Dim upperColor As Color = Color.FromArgb(255, 0, 0)
Dim imageAttr As New ImageAttributes()
imageAttr.SetColorKey(lowerColor, upperColor, _
ColorAdjustType.Default)
&apos; Draw the image with the color key set.
Dim rect As New Rectangle(150, 20, 100, 100)
e.Graphics.DrawImage(myImage, rect, 0, 0, 100, 100, _
GraphicsUnit.Pixel, imageAttr) &apos; Image
End Sub
        </code>
        <code lang="C#">private void SetColorKeyExample(PaintEventArgs e)
{
// Open an Image file and draw it to the screen.
Image myImage = Image.FromFile(&quot;Circle.bmp&quot;);
e.Graphics.DrawImage(myImage, 20, 20);
// Create an ImageAttributes object and set the color key.
Color lowerColor = Color.FromArgb(245,0,0);
Color upperColor = Color.FromArgb(255,0,0);
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetColorKey(lowerColor,
upperColor,
ColorAdjustType.Default);
// Draw the image with the color key set.
Rectangle rect = new Rectangle(150, 20, 100, 100);
e.Graphics.DrawImage(myImage,         // Image
rect,            // Dest. rect.
0,               // srcX
0,               // srcY
100,             // srcWidth
100,             // srcHeight
GraphicsUnit.Pixel, // srcUnit
imageAttr);      // ImageAttributes
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color)">
      <summary>
        <para>Sets the color key for the default category.</para>
      </summary>
      <param name="colorLow">
        The low color-key value.
      </param>
      <param name="colorHigh">
        The high color-key value.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="ImageAttributes.SetColorKey Method (Color, Color, ColorAdjustType)"/>.</para>
      </example>
      <remarks>
	    <para>This method sets the high and low color-key values so that a range of colors can be made transparent. Any color that has each of its three components (red, green, blue) between the corresponding components of the high and low color keys is made transparent.</para>

        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color key for the default category, a different color key for the bitmap category, and still a different color key for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>
	  </remarks> 
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)">
      <overload>
        Sets the color-adjustment matrix and the grayscale-adjustment matrix.
      </overload>
      <summary>
        <para>Sets the color-adjustment matrix and the grayscale-adjustment matrix for the default category.</para>
      </summary>
      <param name="newColorMatrix">	
		The color-adjustment matrix.
      </param>
      <param name="grayMatrix">
        The grayscale-adjustment matrix.
      </param>
      <param name="flags">
        Element of the <see cref="T:System.Drawing.Imaging.ColorMatrixFlag"/> enumeration that specifies the type of image and color that will be affected by the color-adjustment and grayscale-adjustment matrices. 
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify adjustment matrices for the default category, different adjustment matrices for the bitmap category, and still different adjustment matrices for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix)">
      <summary>
        <para>Sets the color-adjustment matrix and the grayscale-adjustment matrix for the default category.</para>
      </summary>
      <param name="newColorMatrix">
        The color-adjustment matrix.
      </param>
      <param name="grayMatrix">
        The grayscale-adjustment matrix.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify adjustment matrices for the default category, different adjustment matrices for the bitmap category, and still different adjustment matrices for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>

        <para>The call myImageAttributes.SetColorMatrices(cm, gsm) is equivalent to the call myImageAttributes.SetColorMatrices(cm, gsm, ColorMatrixFlag.Default). ColorMatrixFlags.Default specifies that all colors (including grays) are adjusted by the color-adjustment matrix, not the grayscale-adjustment matrix. Therefore, the grayscale-adjustment matrix passed to this method has no effect.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)">
      <summary>
        <para>Sets the color-adjustment matrix and the grayscale-adjustment matrix for a specified category.</para>
      </summary>
      <param name="newColorMatrix">
        The color-adjustment matrix.
      </param>
      <param name="grayMatrix">
        The grayscale-adjustment matrix.
      </param>
      <param name="mode">
        Element of the <see cref="T:System.Drawing.Imaging.ColorMatrixFlag"/> enumeration that specifies the type of image and color that will be affected by the color-adjustment and grayscale-adjustment matrices.
      </param>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the color-adjustment and grayscale-adjustment matrices are set.  
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify adjustment matrices for the default category, different adjustment matrices for the bitmap category, and still different adjustment matrices for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>

        <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a collection of adjustment settings for the default category. If you set the color-adjustment and grayscale-adjustment matrices for the pen category by passing ColorAdjustType.Pen to the SetColorMatrices method, then none of the default adjustment settings will apply to pens.</para>  
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)">
      <overload>
        Sets the color-adjustment matrix.  
      </overload>
      <summary>
        <para>Sets the color-adjustment matrix for the default category.</para>
      </summary>
      <param name="newColorMatrix">
        The color-adjustment matrix.  
      </param>
      <param name="flags">
        Element of the <see cref="T:System.Drawing.Imaging.ColorMatrixFlag"/> enumeration that specifies the type of image and color that will be affected by the color-adjustment matrix.  
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="ImageAttributes.SetColorMatrix Method (ColorMatrix)"/>.</para>
      </example>
      <remarks>
        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color-adjustment matrix for the default category, a different color-adjustment matrix for the bitmap category, and still a different color-adjustment matrix for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix)">
      <summary>
        <para>Sets the color-adjustment matrix for the default category.</para>
      </summary>
      <param name="newColorMatrix">
        The color-adjustment matrix.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates a rectangle image that has all the color values set to 128, producing a rectangle that is filled with a solid medium gray color. The code then draws this rectangle image to the screen.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object and sets its <see langword="Matrix00"/> location to 1.75, which emphasizes the red component of the image.</term>
          </item>
          <item>
            <term>Creates an <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object and calls the <see langword="SetColorMatrix"/> method.</term>
          </item>
          <item>
            <term>Draws the image (a second rectangle) to the screen using the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> object just set in the <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object.</term>
          </item>
        </list>
        <para>Note that the second rectangle has the color red emphasized.</para>
        <code lang="VB">Public Sub SetColorMatrixExample(e As PaintEventArgs)
&apos; Create a rectangle image with all colors set to 128 (medium
&apos; gray).
Dim myBitmap As New Bitmap(50, 50, PixelFormat.Format32bppArgb)
Dim g As Graphics = Graphics.FromImage(myBitmap)
g.FillRectangle(New SolidBrush(Color.FromArgb(255, 128, 128, _
128)), New Rectangle(0, 0, 50, 50))
myBitmap.Save(&quot;Rectangle1.jpg&quot;)
&apos; Open an Image file and draw it to the screen.
Dim myImage As Image = Image.FromFile(&quot;Rectangle1.jpg&quot;)
e.Graphics.DrawImage(myImage, 20, 20)
&apos; Initialize the color matrix.
Dim myColorMatrix As New ColorMatrix()
myColorMatrix.Matrix00 = 1.75F &apos; Red
myColorMatrix.Matrix11 = 1F &apos; Green
myColorMatrix.Matrix22 = 1F &apos; Blue
myColorMatrix.Matrix33 = 1F &apos; alpha
myColorMatrix.Matrix44 = 1F &apos; w
&apos; Create an ImageAttributes object and set the color matrix.
Dim imageAttr As New ImageAttributes()
imageAttr.SetColorMatrix(myColorMatrix)
&apos; Draw the image using the color matrix.
Dim rect As New Rectangle(100, 20, 200, 200)
e.Graphics.DrawImage(myImage, rect, 0, 0, 200, 200, _
GraphicsUnit.Pixel, imageAttr) &apos; Image
End Sub &apos;SetColorMatrixExample
        </code>
        <code lang="C#">private void SetColorMatrixExample(PaintEventArgs e)
{
// Create a rectangle image with all colors set to 128 (medium
// gray).
Bitmap myBitmap = new Bitmap(50, 50, PixelFormat.Format32bppArgb);
Graphics g = Graphics.FromImage(myBitmap);
g.FillRectangle(new SolidBrush(Color.FromArgb(255, 128, 128, 128)),
new Rectangle(0, 0, 50, 50));
myBitmap.Save(&quot;Rectangle1.jpg&quot;);
// Open an Image file and draw it to the screen.
Image myImage = Image.FromFile(&quot;Rectangle1.jpg&quot;);
e.Graphics.DrawImage(myImage, 20, 20);
// Initialize the color matrix.
ColorMatrix myColorMatrix = new ColorMatrix();
myColorMatrix.Matrix00 = 1.75f; // Red
myColorMatrix.Matrix11 = 1.00f; // Green
myColorMatrix.Matrix22 = 1.00f; // Blue
myColorMatrix.Matrix33 = 1.00f; // alpha
myColorMatrix.Matrix44 = 1.00f; // w
// Create an ImageAttributes object and set the color matrix.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetColorMatrix(myColorMatrix);
// Draw the image using the color matrix.
Rectangle rect = new Rectangle(100, 20, 200, 200);
e.Graphics.DrawImage(myImage,         // Image
rect,            // Dest. rect.
0,               // srcX
0,               // srcY
200,             // srcWidth
200,             // srcHeight
GraphicsUnit.Pixel, // srcUnit
imageAttr);      // ImageAttributes
}
        </code>
      </example>
      <remarks>
        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color-adjustment matrix for the default category, a different color-adjustment matrix for the bitmap category, and still a different color-adjustment matrix for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>

        <para>The call myImageAttributes.SetColorMatrix(cm) is equivalent to the call myImageAttributes.SetColorMatrix(cm, ColorMatrixFlag.Default). ColorMatrixFlag.Default specifies that all colors (including grays) are adjusted by the color-adjustment matrix.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)">
      <summary>
        <para>Sets the color-adjustment matrix for a specified category.</para>
      </summary>
      <param name="newColorMatrix">
        The color-adjustment matrix.
      </param>
      <param name="mode">
        Element of the <see cref="T:System.Drawing.Imaging.ColorMatrixFlag"/> enumeration that specifies the type of image and color that will be affected by the color-adjustment matrix.
      </param>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the color-adjustment matrix is set.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="ImageAttributes.SetColorMatrix Method (ColorMatrix)"/>.</para>
      </example>
      <remarks>
        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color-adjustment matrix for the default category, a different color-adjustment matrix for the bitmap category, and still a different color-adjustment matrix for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>

        <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a collection of adjustment settings for the default category. If you set the color-adjustment matrix for the pen category by passing ColorAdjustTypePen to the SetColorMatrix method, then none of the default adjustment settings will apply to pens.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single)">
      <overload>
        Sets the gamma value.  
      </overload>
      <summary>
        <para>Sets the gamma value for the default category.</para>
      </summary>
      <param name="gamma">
        Specifies the gamma correction value. Typical values for gamma run from 1.0 to 2.2; however, values from 0.1 to 5.0 could prove useful under some circumstances.  
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Opens an <see cref="T:System.Drawing.Image"/> object that uses the file Camera.jpg and draws it to the screen using the default value for gamma.</term>
          </item>
          <item>
            <term>Creates an <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object and sets its gamma to 2.2 by calling the <see langword="SetGamma"/> method.</term>
          </item>
          <item>
            <term>Draws the image (a second camera) to the screen using the gamma value just set in the <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object.</term>
          </item>
        </list>
        <code lang="VB">Public Sub SetGammaExample(e As PaintEventArgs)
&apos; Create an Image object from the file Camera.jpg, and draw
&apos; it to screen.
Dim myImage As Image = Image.FromFile(&quot;Camera.jpg&quot;)
e.Graphics.DrawImage(myImage, 20, 20)
&apos; Create an ImageAttributes object and set the gamma to 2.2.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(2.2F)
&apos; Draw the image with gamma set to 2.2.
Dim rect As New Rectangle(250, 20, 200, 200)
e.Graphics.DrawImage(myImage, rect, 0, 0, 200, 200, _
GraphicsUnit.Pixel, imageAttr) &apos; Image
End Sub
        </code>
        <code lang="C#">private void SetGammaExample(PaintEventArgs e)
{
// Create an Image object from the file Camera.jpg, and draw it to
// the screen.
Image myImage = Image.FromFile(&quot;Camera.jpg&quot;);
e.Graphics.DrawImage(myImage, 20, 20);
// Create an ImageAttributes object and set the gamma to 2.2.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(2.2f);
// Draw the image with gamma set to 2.2.
Rectangle rect = new Rectangle(250, 20, 200, 200);
e.Graphics.DrawImage(myImage,         // Image
rect,            // Dest. rect.
0,               // srcX
0,               // srcY
200,             // srcWidth
200,             // srcHeight
GraphicsUnit.Pixel, // srcUnit
imageAttr);      // ImageAttributes
}
        </code>
      </example>
      <remarks>
        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a gamma value for the default category, a different gamma value for the bitmap category, and still a different gamma value for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single,System.Drawing.Imaging.ColorAdjustType)">
      <summary>
        <para>Sets the gamma value for a specified category.</para>
      </summary>
      <param name="gamma">
        Specifies the gamma correction value. Typical values for gamma run from 1.0 to 2.2; however, values from 0.1 to 5.0 could prove useful under some circumstances.   
      </param>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the gamma value is set. 
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="ImageAttributes.SetGamma Method (Single)"/>.</para>
      </example>
      <remarks>
        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a gamma value for the default category, a different gamma value for the bitmap category, and still a different gamma value for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>

        <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a collection of adjustment settings for the default category. If you set the gamma value for the pen category by passing ColorAdjustType.Pen to the SetGamma method, then none of the default adjustment settings will apply to pens.</para> 
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetNoOp(System.Drawing.Imaging.ColorAdjustType)">
      <overload>
        Turns off color adjustment.
      </overload>
      <summary>
        <para>Turns off color adjustment for a specified category. You can call ClearNoOp to reinstate the color-adjustment settings that were in place before the call to SetNoOp.  </para>
      </summary>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which color correction is turned off.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a gamma value for the default category, a different gamma value for the bitmap category, and still a different gamma value for the pen category.</para>
	  </remarks>
      <example>
        <para>For an example, see <see langword="ImageAttributes.SetNoOp Method ()"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetNoOp">
      <summary>
        <para>Turns off color adjustment for the default category. You can call ClearNoOp to reinstate the color-adjustment settings that were in place before the call to SetNoOp. </para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a gamma value for the default category, a different gamma value for the bitmap category, and still a different gamma value for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>
	  </remarks>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Opens an <see cref="T:System.Drawing.Image"/> object that uses the file, Camera.jpg.</term>
          </item>
          <item>
            <term>Sets the gamma value of the <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object to 0.25.</term>
          </item>
          <item>
            <term>Draws the image to the screen.</term>
          </item>
          <item>
            <term>Calls the <see cref="T:System.Drawing.Imaging.ImageAttributes"/> <see cref="M:System.Drawing.Imaging.ImageAttributes.SetNoOp"/> method.</term>
          </item>
          <item>
            <term>Draws the image (a second camera) to the screen, but since the <see cref="M:System.Drawing.Imaging.ImageAttributes.SetNoOp"/> method was called, the gamma setting defaults to a value of 1.0 and the image is drawn to the screen with the default gamma setting.</term>
          </item>
        </list>
        <para>Note that the image on the left is very washed out (gamma of 0.25) and the image on the right has more contrast (gamma of 1.0).</para>
        <code lang="VB">Public Sub SetNoOpExample(e As PaintEventArgs)
&apos; Create an Image object from the file Camera.jpg.
Dim myImage As Image = Image.FromFile(&quot;Camera.jpg&quot;)
&apos; Create an ImageAttributes object, and set the gamma to 0.25.
Dim imageAttr As New ImageAttributes()
imageAttr.SetGamma(0.25F)
&apos; Draw the image with gamma set to 0.25.
Dim rect1 As New Rectangle(20, 20, 200, 200)
e.Graphics.DrawImage(myImage, rect1, 0, 0, 200, 200, _
GraphicsUnit.Pixel, imageAttr)
&apos; Call the ImageAttributes NoOp method.
imageAttr.SetNoOp()
&apos; Draw the image with gamma set to 0.25, but now NoOp is set,    &apos; so the uncorrected image will be shown.
Dim rect2 As New Rectangle(250, 20, 200, 200)
e.Graphics.DrawImage(myImage, rect2, 0, 0, 200, 200, _
GraphicsUnit.Pixel, imageAttr) &apos; Image
End Sub
        </code>
        <code lang="C#">private void SetNoOpExample(PaintEventArgs e)
{
// Create an Image object from the file Camera.jpg.
Image myImage = Image.FromFile(&quot;Camera.jpg&quot;);
// Create an ImageAttributes object, and set the gamma to 0.25.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetGamma(0.25f);
// Draw the image with gamma set to 0.25.
Rectangle rect1 = new Rectangle(20, 20, 200, 200);
e.Graphics.DrawImage(myImage,         // Image
rect1,            // Dest. rect.
0,               // srcX
0,               // srcY
200,             // srcWidth
200,             // srcHeight
GraphicsUnit.Pixel, // srcUnit
imageAttr);      // ImageAttributes
// Call the ImageAttributes NoOp method.
imageAttr.SetNoOp();
// Draw the image after NoOp is set, so the default gamma value
// of 1.0 will be used.
Rectangle rect2 = new Rectangle(250, 20, 200, 200);
e.Graphics.DrawImage(myImage,         // Image
rect2,            // Dest. rect.
0,               // srcX
0,               // srcY
200,             // srcWidth
200,             // srcHeight
GraphicsUnit.Pixel, // srcUnit
imageAttr);      // ImageAttributes
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag)">
      <overload>
        Sets the CMYK output channel.
      </overload>
      <summary>
        <para>Sets the CMYK output channel for the default category.
</para>
      </summary>
      <param name="flags">
        Element of the <see cref="T:System.Drawing.Imaging.ColorChannelFlag"/> enumeration that specifies the output channel.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
	    <para>You can use the SetOutputChannel method to convert an image to a CMYK (cyan, magenta, yellow, black) color space and examine the intensities of one of the CMYK color channels. For example, suppose you create an ImageAttributes object and set its bitmap output channel to ColorChannelFlag.ColorChannelC. If you pass the address of that ImageAttributes object to the Graphics.DrawImage method, the cyan component of each pixel is calculated, and each pixel in the rendered image is a shade of gray that indicates the intensity of its cyan channel. Similarly, you can render images that indicate the intensities of the magenta, yellow, and black channels.</para>

        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify an output channel for the default category and a different output channel for the bitmap category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the bitmap category, then the default settings apply to the bitmap category.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag,System.Drawing.Imaging.ColorAdjustType)">
      <summary>
        <para>ets the CMYK output channel for a specified category.</para>
      </summary>
      <param name="flags">
        Element of the <see cref="T:System.Drawing.Imaging.ColorChannelFlag"/> enumeration that specifies the output channel. 
      </param>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the output channel is set.  
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>You can use the SetOutputChannel method to convert an image to a CMYK (cyan, magenta, yellow, black) color space and examine the intensities of one of the CMYK color channels. For example, suppose you create an ImageAttributes object and set its bitmap output channel to ColorChannelFlag.ColorChannelC. If you pass the address of that ImageAttributes object to the Graphics.DrawImage method, the cyan component of each pixel is calculated, and each pixel in the rendered image is a shade of gray that indicates the intensity of its cyan channel. Similarly, you can render images that indicate the intensities of the magenta, yellow, and black channels.</para>

        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify an output channel for the default category and a different output channel for the bitmap category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the bitmap category, then the default settings apply to the bitmap category.</para>

	    <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a collection of adjustment settings for the default category. If you set the output channel for the bitmap category by passing ColorAdjustType.Bitmap to the SetOutputChannel method, then none of the default adjustment settings will apply to bitmaps.</para> 
	  </remarks>     
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String)">
      <overload>
        Sets the output channel color-profile file.
      </overload>
      <summary>
        <para>Sets the output channel color-profile file for the default category.</para>
      </summary>
      <param name="colorProfileFilename">
        Path name of a color-profile file. If the color-profile file is in the %SystemRoot%\System32\Spool\Drivers\Color directory, then this parameter can be the file name. Otherwise, this parameter must be the fully-qualified path name. 
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>You can use the SetOutputChannel and SetOutputChannelColorProfile methods to convert an image to a CMYK (cyan, magenta, yellow, black) color space and examine the intensities of one of the CMYK color channels. For example, suppose you write code that performs the following steps:</para>

        <li>
		  <term>Create an Image object.</term> 
          <term>Create an ImageAttributes object.</term>
          <term>Pass ColorChannelFlag.ColorChannelC to the SetOutputChannel method of the ImageAttributes object.</term> 
          <term>Pass the path name of a color profile file to the SetOutputChannelColorProfile method of the ImageAttributes object.</term> 
          <term>Pass the addresses of the Image and ImageAttributes objects to the Graphics.DrawImage method.</term> 
        </li>
		
        <para>GDI+ will use the color-profile file to calculate the cyan component of each pixel in the image, and each pixel in the rendered image will be a shade of gray that indicates the intensity of its cyan channel.</para>

        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify an output channel color-profile file for the default category and a different output channel color-profile file for the bitmap category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the bitmap category, then the default settings apply to the bitmap category.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String,System.Drawing.Imaging.ColorAdjustType)">
      <summary>
        <para>Sets the output channel color-profile file for a specified category.</para>
      </summary>
      <param name="colorProfileFilename">
        Path name of a color-profile file. If the color-profile file is in the %SystemRoot%\System32\Spool\Drivers\Color directory, then this parameter can be the file name. Otherwise, this parameter must be the fully-qualified path name.
      </param>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the output channel color-profile file is set. 
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  	  <remarks>
	    <para>You can use the SetOutputChannel and SetOutputChannelColorProfile methods to convert an image to a CMYK (cyan, magenta, yellow, black) color space and examine the intensities of one of the CMYK color channels. For example, suppose you write code that performs the following steps:</para>

        <li>
		  <term>Create an Image object.</term> 
          <term>Create an ImageAttributes object.</term>
          <term>Pass ColorChannelFlag.ColorChannelC to the SetOutputChannel method of the ImageAttributes object.</term> 
          <term>Pass the path name of a color profile file to the SetOutputChannelColorProfile method of the ImageAttributes object.</term> 
          <term>Pass the addresses of the Image and ImageAttributes objects to the Graphics.DrawImage method.</term> 
        </li>
		
        <para>GDI+ will use the color-profile file to calculate the cyan component of each pixel in the image, and each pixel in the rendered image will be a shade of gray that indicates the intensity of its cyan channel.</para>

        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify an output channel color-profile file for the default category and a different output channel color-profile file for the bitmap category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the bitmap category, then the default settings apply to the bitmap category.</para>

        <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a collection of adjustment settings for the default category. If you set the output channel color-profile file for the bitmap category by passing ColorAdjustTypeBitmap to the SetOutputChannelColorProfile method, then none of the default adjustment settings will apply to bitmaps.</para>
	  </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[],System.Drawing.Imaging.ColorAdjustType)">
      <overload>
        Sets the color-remap table.
      </overload>
      <summary>
        <para>Sets the color-remap table for a specified category.</para>
      </summary>
      <param name="map">
        An array of color pairs of type <see cref="T:System.Drawing.Imaging.ColorMap"/>. Each color pair contains an existing color (the first value) and the color that it will be mapped to (the second value).
      </param>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the color-remap table is set.
      </param>
      <returns>
	   <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>A color-remap table is an array of ColorMap structures. Each ColorMap structure has two Color objects: one that specifies an old color and one that specifies a corresponding new color. During rendering, any color that matches one of the old colors in the remap table is changed to the corresponding new color.</para>

        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color remap for the default category, a color-remap table for the bitmap category, and still a different color-remap table for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>

        <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a collection of adjustment settings for the default category. If you set the color-remap table for the pen category by passing ColorAdjustType.Pen to the SetRemapTable method, then none of the default adjustment settings will apply to pens.</para>
	  </remarks>
      <example>
        <para>For an example, see <see langword="ImageAttributes.SetRemapTable Method (ColorMap[])"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[])">
      <summary>
        <para>Sets the color-remap table for the default category.</para>
      </summary>
      <param name="map">
        An array of color pairs of type <see cref="T:System.Drawing.Imaging.ColorMap"/>. Each color pair contains an existing color (the first value) and the color that it will be mapped to (the second value).
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>A color-remap table is an array of ColorMap structures. Each ColorMap structure has two Color objects: one that specifies an old color and one that specifies a corresponding new color. During rendering, any color that matches one of the old colors in the remap table is changed to the corresponding new color.</para>

        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color remap for the default category, a color-remap table for the bitmap category, and still a different color-remap table for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>
	  </remarks>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Creates an image (a red circle), saves it to Circle2.jpg, opens that image, and draws it to the screen.</term>
          </item>
          <item>
            <term>Creates a color map that maps the color red to the color green.</term>
          </item>
          <item>
            <term>Draws the image created earlier to the screen again, but this time using the color map.</term>
          </item>
        </list>
        <code lang="VB">Public Sub SetRemapTableExample(e As PaintEventArgs)
&apos; Create a filled, red image and save it to Circle2.jpg.
Dim myBitmap As New Bitmap(50, 50)
Dim g As Graphics = Graphics.FromImage(myBitmap)
g.Clear(Color.White)
g.FillEllipse(New SolidBrush(Color.Red), New Rectangle(0, 0, _
50, 50))
myBitmap.Save(&quot;Circle2.jpg&quot;)
&apos; Create an Image object from the Circle2.jpg file, and draw
&apos; it to the screen.
Dim myImage As Image = Image.FromFile(&quot;Circle2.jpg&quot;)
e.Graphics.DrawImage(myImage, 20, 20)
&apos; Create a color map.
Dim myColorMap(0) As ColorMap
myColorMap(0) = New ColorMap()
myColorMap(0).OldColor = Color.Red
myColorMap(0).NewColor = Color.Green
&apos; Create an ImageAttributes object, and then pass the
&apos; myColorMap object to the SetRemapTable method.
Dim imageAttr As New ImageAttributes()
imageAttr.SetRemapTable(myColorMap)
&apos; Draw the image with the remap table set.
Dim rect As New Rectangle(150, 20, 50, 50)
e.Graphics.DrawImage(myImage, rect, 0, 0, 50, 50, _
GraphicsUnit.Pixel, imageAttr) &apos; Image
End Sub
        </code>
        <code lang="C#">private void SetRemapTableExample(PaintEventArgs e)
{
// Create a filled, red image, and save it to Circle2.jpg.
Bitmap myBitmap = new Bitmap(50, 50);
Graphics g = Graphics.FromImage(myBitmap);
g.Clear(Color.White);
g.FillEllipse(new SolidBrush(Color.Red),
new Rectangle(0, 0, 50, 50));
myBitmap.Save(&quot;Circle2.jpg&quot;);
// Create an Image object from the Circle2.jpg file, and draw it to
// the screen.
Image myImage = Image.FromFile(&quot;Circle2.jpg&quot;);
e.Graphics.DrawImage(myImage, 20, 20);
// Create a color map.
ColorMap[] myColorMap = new ColorMap[1];
myColorMap[0] = new ColorMap();
myColorMap[0].OldColor = Color.Red;
myColorMap[0].NewColor = Color.Green;
// Create an ImageAttributes object, and then pass the
// myColorMap object to the SetRemapTable method.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetRemapTable(myColorMap);
// Draw the image with the remap table set.
Rectangle rect = new Rectangle(150, 20, 50, 50);
e.Graphics.DrawImage(myImage,         // Image
rect,            // Dest. rect.
0,               // srcX
0,               // srcY
50,              // srcWidth
50,              // srcHeight
GraphicsUnit.Pixel, // srcUnit
imageAttr);      // ImageAttributes
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single)">
      <overload>
        Sets the threshold (transparency range). 
      </overload>
      <summary>
        <para>Sets the threshold (transparency range) for the default category.
</para>
      </summary>
      <param name="threshold">
        Real number that specifies the threshold value.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>  
	  <remarks>
	    <para>The threshold is a value from 0 through 1 that specifies a cutoff point for each color component. For example, suppose the threshold is set to 0.7, and suppose you are rendering a color whose red, green, and blue components are 230, 50, and 220. The red component, 230, is greater than 0.7x255, so the red component will be changed to 255 (full intensity). The green component, 50, is less than 0.7x255, so the green component will be changed to 0. The blue component, 220, is greater than 0.7x255, so the blue component will be changed to 255.</para>

        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a threshold for the default category, a threshold for the bitmap category, and still a different threshold for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>
	  </remarks>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Opens an <see cref="T:System.Drawing.Image"/> object and draws it to the screen.</term>
          </item>
          <item>
            <term>Creates an <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object and sets its threshold by using the <see cref="M:System.Drawing.Imaging.ImageAttributes.SetThreshold"/> method.</term>
          </item>
          <item>
            <term>Draws the image to the screen by using the threshold of the <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object.</term>
          </item>
        </list>
        <code lang="VB">Public Sub SetThresholdExample(e As PaintEventArgs)
&apos; Open an Image file, and draw it to the screen.
Dim myImage As Image = Image.FromFile(&quot;Camera.jpg&quot;)
e.Graphics.DrawImage(myImage, 20, 20)
&apos; Create an ImageAttributes object, and set its color threshold.
Dim imageAttr As New ImageAttributes()
imageAttr.SetThreshold(0.7F)
&apos; Draw the image with the colors bifurcated.
Dim rect As New Rectangle(300, 20, 200, 200)
e.Graphics.DrawImage(myImage, rect, 0, 0, 200, 200, _
GraphicsUnit.Pixel, imageAttr)
End Sub
        </code>
        <code lang="C#">private void SetThresholdExample(PaintEventArgs e)
{
// Open an Image file, and draw it to the screen.
Image myImage = Image.FromFile(&quot;Camera.jpg&quot;);
e.Graphics.DrawImage(myImage, 20, 20);
// Create an ImageAttributes object, and set its color threshold.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetThreshold(0.7f);
// Draw the image with the colors bifurcated.
Rectangle rect = new Rectangle(300, 20, 200, 200);
e.Graphics.DrawImage(myImage,
rect,
0,
0,
200,
200,
GraphicsUnit.Pixel,
imageAttr);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single,System.Drawing.Imaging.ColorAdjustType)">
      <summary>
        <para>Sets the threshold (transparency range) for a specified category.</para>
      </summary>
      <param name="threshold">
        A threshold value between 0.0 and 1.0 that is used as a breakpoint to sort colors that will be mapped to either a maximum or a minimum value.
      </param>
      <param name="type">
        Element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType"/> enumeration that specifies the category for which the color threshold is set.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>The threshold is a value from 0 through 1 that specifies a cutoff point for each color component. For example, suppose the threshold is set to 0.7, and suppose you are rendering a color whose red, green, and blue components are 230, 50, and 220. The red component, 230, is greater than 0.7x255, so the red component will be changed to 255 (full intensity). The green component, 50, is less than 0.7x255, so the green component will be changed to 0. The blue component, 220, is greater than 0.7x255, so the blue component will be changed to 255.</para>

        <para>An ImageAttributes object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a threshold for the default category, a threshold for the bitmap category, and still a different threshold for the pen category.</para>

        <para>The default color- and grayscale-adjustment settings apply to all categories that don't have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.</para>

	    <para>As soon as you specify a color- or grayscale-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a collection of adjustment settings for the default category. If you set the threshold for the pen category by passing ColorAdjustType.Pen to the SetThreshold method, then none of the default adjustment settings will apply to pens.</para>
	  </remarks>
      <example>
        <para>For an example, see <see langword="ImageAttributes.SetThreshold Method (Single)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode)">
      <overload>
        Sets the wrap mode.
      </overload>
      <summary>
        <para>Sets the wrap mode that is used to decide how to tile a texture across a shape, or at shape boundaries. A texture is tiled across a shape to fill it in when the texture is smaller than the shape it is filling.</para>
      </summary>
      <param name="mode">
        Element of the <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that specifies how repeated copies of an image are used to tile an area. 
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
	  <remarks>
	    <para>The call myImageAttributes.SetWrapMode(wm) is equivalent to the call myImageAttributes.SetWrapMode(wm, Color.Black). Color.Black specifies the color of pixels outside of a rendered image. This color is visible if the mode parameter is set to WrapMode.Clamp and the source rectangle passed to Graphics.DrawImage is larger than the image itself.</para>
	  </remarks>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code performs the following actions:</para>
        <list type="bullet">
          <item>
            <term>Opens an <see cref="T:System.Drawing.Image"/> object from the Circle3.jpg file (a small, red-filled circle) and draws it to the screen.</term>
          </item>
          <item>
            <term>Creates an <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object and sets the <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration to <see langword="Tile"/>.</term>
          </item>
          <item>
            <term>Creates a <see cref="T:System.Drawing.TextureBrush"/> object using the image from the Circle3.jpg file.</term>
          </item>
          <item>
            <term>Draws a rectangle to the screen that is filled with the small, red-filled circles.</term>
          </item>
        </list>
        <code lang="VB">Public Sub SetWrapModeExample(e As PaintEventArgs)
&apos; Create a filled, red circle, and save it to Circle3.jpg.
Dim myBitmap As New Bitmap(50, 50)
Dim g As Graphics = Graphics.FromImage(myBitmap)
g.Clear(Color.White)
g.FillEllipse(New SolidBrush(Color.Red), New Rectangle(0, 0, _
25, 25))
myBitmap.Save(&quot;Circle3.jpg&quot;)
&apos; Create an Image object from the Circle3.jpg file, and draw
&apos; it to the screen.
Dim myImage As Image = Image.FromFile(&quot;Circle3.jpg&quot;)
e.Graphics.DrawImage(myImage, 20, 20)
&apos; Set the wrap mode.
Dim imageAttr As New ImageAttributes()
imageAttr.SetWrapMode(WrapMode.Tile)
&apos; Create a TextureBrush.
Dim brushRect As New Rectangle(0, 0, 25, 25)
Dim myTBrush As New TextureBrush(myImage, brushRect, imageAttr)
&apos; Draw to the screen a rectangle filled with red circles.
e.Graphics.FillRectangle(myTBrush, 100, 20, 200, 200)
End Sub
        </code>
        <code lang="C#">private void SetWrapModeExample(PaintEventArgs e)
{
// Create a filled, red circle, and save it to Circle3.jpg.
Bitmap myBitmap = new Bitmap(50, 50);
Graphics g = Graphics.FromImage(myBitmap);
g.Clear(Color.White);
g.FillEllipse(new SolidBrush(Color.Red),
new Rectangle(0, 0, 25, 25));
myBitmap.Save(&quot;Circle3.jpg&quot;);
// Create an Image object from the Circle3.jpg file, and draw it
// to the screen.
Image myImage = Image.FromFile(&quot;Circle3.jpg&quot;);
e.Graphics.DrawImage(myImage, 20, 20);
// Set the wrap mode.
ImageAttributes imageAttr = new ImageAttributes();
imageAttr.SetWrapMode(WrapMode.Tile);
// Create a TextureBrush.
Rectangle brushRect = new Rectangle(0,0,25,25);
TextureBrush myTBrush = new TextureBrush(myImage, brushRect, imageAttr);
// Draw to the screen a rectangle filled with red circles.
e.Graphics.FillRectangle(myTBrush, 100, 20, 200, 200);
}
        </code>
      </example>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color)">
      <summary>
        <para>Sets the wrap mode and color used to decide how to tile a texture across a shape, or at shape boundaries. A texture is tiled across a shape to fill it in when the texture is smaller than the shape it is filling.</para>
      </summary>
      <param name="mode">
        Element of the <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that specifies how repeated copies of an image are used to tile an area.
      </param>
      <param name="color">
        A Color object that specifies the color of pixels outside of a rendered image. This color is visible if the mode parameter is set to WrapMode.Clamp and the source rectangle passed to Graphics.DrawImage is larger than the image itself. 
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="ImageAttributes.SetWrapMode Method (WrapMode)"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color,System.Boolean)">
      <summary>
        <para>Sets the wrap mode and color used to decide how to tile a texture across a shape, or at shape boundaries. A texture is tiled across a shape to fill it in when the texture is smaller than the shape it is filling..</para>
      </summary>
      <param name="mode">
        Element of the <see cref="T:System.Drawing.Drawing2D.WrapMode"/> enumeration that specifies how repeated copies of an image are used to tile an area.
      </param>
      <param name="color">
        A Color object that specifies the color of pixels outside of a rendered image. This color is visible if the mode parameter is set to WrapMode.Clamp and the source rectangle passed to Graphics.DrawImage is larger than the image itself.
      </param>
      <param name="clamp">
        This parameter has no effect. Set it to false.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <example>
        <para>For an example, see <see langword="ImageAttributes.SetWrapMode Method (WrapMode)"/>.</para>
      </example>
    </member>

    <member name="T:System.Drawing.Imaging.WmfPlaceableFileHeader">
      <summary>
        <para>Defines a placeable metafile. Not inheritable. </para>
      </summary>
      <remarks>
        <para>Placeable metafiles provide a nonstandard way to specify how a metafile is mapped and scaled on an output device.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Imaging.WmfPlaceableFileHeader.#ctor">
      <summary>
        <para>Initializes a new instance of the <see langword="WmfPlaceableFileHeader"/> class.</para>
      </summary>
    </member>

    <member name="P:System.Drawing.Imaging.WmfPlaceableFileHeader.BboxBottom">
      <summary>
        <para>Gets or sets the y-coordinate of the lower-right corner of the bounding rectangle of the metafile image on the output device.</para>
      </summary>
      <value>
        <para>The y-coordinate of the lower-right corner of the bounding rectangle of the metafile image on the output device.</para>
      </value>
      <remarks>
        <para>The coordinates of the bounding rectangle are measured in twips.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.WmfPlaceableFileHeader.BboxLeft">
      <summary>
        <para>Gets or sets the x-coordinate of the upper-left corner of the bounding rectangle of the metafile image on the output device.</para>
      </summary>
      <value>
        <para>The x-coordinate of the upper-left corner of the bounding rectangle of the metafile image on the output device.</para>
      </value>
      <remarks>
        <para>The coordinates of the bounding rectangle are measured in twips.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.WmfPlaceableFileHeader.BboxRight">
      <summary>
        <para>Gets or sets the x-coordinate of the lower-right corner of the bounding rectangle of the metafile image on the output device.</para>
      </summary>
      <value>
        <para>The x-coordinate of the lower-right corner of the bounding rectangle of the metafile image on the output device.</para>
      </value>
      <remarks>
        <para>The coordinates of the bounding rectangle are measured in twips.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.WmfPlaceableFileHeader.BboxTop">
      <summary>
        <para>Gets or sets the y-coordinate of the upper-left corner of the bounding rectangle of the metafile image on the output device.</para>
      </summary>
      <value>
        <para>The y-coordinate of the upper-left corner of the bounding rectangle of the metafile image on the output device.</para>
      </value>
      <remarks>
        <para>The coordinates of the bounding rectangle are measured in twips.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.WmfPlaceableFileHeader.Checksum">
      <summary>
        <para>Gets or sets the checksum value for the previous ten <see langword="WORD"/>s in the header.</para>
      </summary>
      <value>
        <para>The checksum value for the previous ten <see langword="WORD"/>s in the header.</para>
      </value>
      <remarks>
        <para>This value can be used in an attempt to detect whether the metafile has become corrupted. The checksum is calculated by joining each <see langword="WORD"/> value to an initial value of 0 by using the <see langword="XOR"/> operator.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.WmfPlaceableFileHeader.Hmf">
      <summary>
        <para>Gets or sets the handle of the metafile in memory.</para>
      </summary>
      <value>
        <para>The handle of the metafile in memory.</para>
      </value>
      <remarks>
        <para>When written to disk, this property is not used and always contains the value 0.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.WmfPlaceableFileHeader.Inch">
      <summary>
        <para>Gets or sets the number of twips per inch.</para>
      </summary>
      <value>
        <para>The number of twips per inch.</para>
      </value>
      <remarks>
        <para>Normally, there are 1440 twips per inch; however, this number can be changed to scale the image. A value of 720 indicates that the image is double its normal size, or scaled to a factor of 2:1. A value of 360 indicates a scale of 4:1. Conversely, a value of 2880 indicates that the image is scaled down in size by a factor of two. A value of 1440 indicates a 1:1 scale ratio.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.WmfPlaceableFileHeader.Key">
      <summary>
        <para>Gets or sets a value indicating the presence of a placeable metafile header.</para>
      </summary>
      <value>
        <para>A value indicating presence of a placeable metafile header.</para>
      </value>
      <remarks>
        <para>This field always has a value of 0x9AC6CDD7.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.WmfPlaceableFileHeader.Reserved">
      <summary>
        <para>Reserved. Do not use.</para>
      </summary>
      <value>
        <para>Reserved. Do not use.</para>
      </value>
      <remarks>
        <para>Always set this field to zero.</para>
      </remarks>
    </member>

    <member name="T:System.Drawing.Imaging.ImageCodecInfo">
      <summary>
        <para>The <see cref="T:System.Drawing.Imaging.ImageCodecInfo"/> class provides the necessary storage members and methods to retrieve all pertinent information about the installed image codecs. Not inheritable. </para>
      </summary>
    </member>

    <member name="M:System.Drawing.Imaging.ImageCodecInfo.GetImageDecoders">
      <summary>
        <para>Returns an array of <see cref="T:System.Drawing.Imaging.ImageCodecInfo"/> objects that contain information about the image decoders built into GDI+.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Drawing.Imaging.ImageCodecInfo"/> objects. Each <see cref="T:System.Drawing.Imaging.ImageCodecInfo"/> object in the array contains information about one of the built-in image decoders.</para>
      </returns>
      <example>
        <para>For an example, see <see cref="M:System.Drawing.Imaging.ImageCodecInfo.GetImageEncoders"/>.</para>
      </example>
    </member>

    <member name="M:System.Drawing.Imaging.ImageCodecInfo.GetImageEncoders">
      <summary>
        <para>Returns an array of <see cref="T:System.Drawing.Imaging.ImageCodecInfo"/> objects that contain information about the image encoders built into GDI+.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Drawing.Imaging.ImageCodecInfo"/> objects. Each <see cref="T:System.Drawing.Imaging.ImageCodecInfo"/> object in the array contains information about one of the built-in image encoders.</para>
      </returns>
      <example>
        <para>The following example is designed for use with Windows Forms, and it requires <see cref="T:System.Windows.Forms.PaintEventArgs"/> <paramref name="e"/>, which is a parameter of the <see langword="Paint"/> event handler. The code uses the <see cref="M:System.Drawing.Imaging.ImageCodecInfo.GetImageEncoders"/> method to retrieve all the codec information for all installed image encoders and codecs, and then draws all the information about each codec to the screen.</para>
        <code lang="VB">Public Sub GetImageEncodersExample(e As PaintEventArgs)
&apos; Get an array of available codecs.
Dim myEncoders() As ImageCodecInfo
myEncoders = ImageCodecInfo.GetImageEncoders()
Dim numEncoders As Integer = myEncoders.GetLength(0)
Dim strNumEncoders As String = numEncoders.ToString()
Dim foreColor As Color = Color.Black
Dim font As New Font(&quot;Arial&quot;, 8)
Dim i As Integer = 0
&apos; Get the info. for all encoders in the array.
If numEncoders &gt; 0 Then
Dim myEncoderInfo(numEncoders * 10) As String
For i = 0 To numEncoders - 1
myEncoderInfo((i * 10)) = &quot;Codec Name = &quot; _
+ myEncoders(i).CodecName
myEncoderInfo((i * 10 + 1)) = &quot;Class ID = &quot; _
+ myEncoders(i).Clsid.ToString()
myEncoderInfo((i * 10 + 2)) = &quot;DLL Name = &quot; _
+ myEncoders(i).DllName
myEncoderInfo((i * 10 + 3)) = &quot;Filename Ext. = &quot; _
+ myEncoders(i).FilenameExtension
myEncoderInfo((i * 10 + 4)) = &quot;Flags = &quot; _
+ myEncoders(i).Flags.ToString()
myEncoderInfo((i * 10 + 5)) = &quot;Format Descrip. = &quot; _
+ myEncoders(i).FormatDescription
myEncoderInfo((i * 10 + 6)) = &quot;Format ID = &quot; _
+ myEncoders(i).FormatID.ToString()
myEncoderInfo((i * 10 + 7)) = &quot;MimeType = &quot; _
+ myEncoders(i).MimeType
myEncoderInfo((i * 10 + 8)) = &quot;Version = &quot; _
+ myEncoders(i).Version.ToString()
myEncoderInfo((i * 10 + 9)) = &quot; &quot;
Next i
Dim numMyEncoderInfo As Integer = myEncoderInfo.GetLength(0)
&apos; Render to the screen all the information.
Dim j As Integer = 20
For i = 0 To numMyEncoderInfo - 1
e.Graphics.DrawString(myEncoderInfo(i), font, _
New SolidBrush(foreColor), 20, j)
j += 12
Next i
Else
e.Graphics.DrawString(&quot;No Encoders Found&quot;, font, _
New SolidBrush(foreColor), 20, 20)
End If
End Sub
        </code>
        <code lang="C#">private void GetImageEncodersExample(PaintEventArgs e)
{
// Get an array of available codecs.
ImageCodecInfo[] myCodecs;
myCodecs = ImageCodecInfo.GetImageEncoders();
int numCodecs = myCodecs.GetLength(0);
//numCodecs = 1;
// Set up display variables.
Color foreColor = Color.Black;
Font font = new Font(&quot;Arial&quot;, 8);
int i = 0;
// Check to determine whether any codecs were found.
if(numCodecs &gt; 0)
{
// Set up an array to hold codec information. There are 9
// information elements plus 1 space for each codec, so 10 times
// the number of codecs found is allocated.
string[] myCodecInfo = new string[numCodecs*10];
// Write all the codec information to the array.
for(i=0;i&lt;numCodecs;i++)
{
myCodecInfo[i*10] = &quot;Codec Name = &quot; + myCodecs[i].CodecName;
myCodecInfo[(i*10)+1] = &quot;Class ID = &quot; +
myCodecs[i].Clsid.ToString();
myCodecInfo[(i*10)+2] = &quot;DLL Name = &quot; + myCodecs[i].DllName;
myCodecInfo[(i*10)+3] = &quot;Filename Ext. = &quot; +
myCodecs[i].FilenameExtension;
myCodecInfo[(i*10)+4] = &quot;Flags = &quot; +
myCodecs[i].Flags.ToString();
myCodecInfo[(i*10)+5] = &quot;Format Descrip. = &quot; +
myCodecs[i].FormatDescription;
myCodecInfo[(i*10)+6] = &quot;Format ID = &quot; +
myCodecs[i].FormatID.ToString();
myCodecInfo[(i*10)+7] = &quot;MimeType = &quot; + myCodecs[i].MimeType;
myCodecInfo[(i*10)+8] = &quot;Version = &quot; +
myCodecs[i].Version.ToString();
myCodecInfo[(i*10)+9] = &quot; &quot;;
}
int numMyCodecInfo = myCodecInfo.GetLength(0);
// Render all of the information to the screen.
int j=20;
for(i=0;i&lt;numMyCodecInfo;i++)
{
e.Graphics.DrawString(myCodecInfo[i],
font,
new SolidBrush(foreColor),
20,
j);
j+=12;
}
}else
e.Graphics.DrawString(&quot;No Codecs Found&quot;,
font,
new SolidBrush(foreColor),
20,
20);
}
        </code>
      </example>
    </member>

    <member name="P:System.Drawing.Imaging.ImageCodecInfo.Clsid">
      <summary>
        <para>Gets or sets a <see langword="Guid"/> structure that contains a GUID that identifies a specific codec.</para>
      </summary>
      <value>
        <para>A <see langword="Guid"/> structure that contains a GUID that identifies a specific codec.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageCodecInfo.CodecName">
      <summary>
        <para>Gets or sets a string that contains the name of the codec.</para>
      </summary>
      <value>
        <para>A string that contains the name of the codec.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageCodecInfo.DllName">
      <summary>
        <para>Gets or sets string that contains the path name of the DLL that holds the codec. If the codec is not in a DLL, this pointer is <see langword="null"/>.</para>
      </summary>
      <value>
        <para>A string that contains the path name of the DLL that holds the codec.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageCodecInfo.FilenameExtension">
      <summary>
        <para>Gets or sets string that contains the file name extension(s) used in the codec. The extensions are separated by semicolons.</para>
      </summary>
      <value>
        <para>A string that contains the file name extension(s) used in the codec.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageCodecInfo.Flags">
      <summary>
        <para>Gets or sets 32-bit value used to store additional information about the codec. This property returns a combination of flags from the <see langword="ImageCodecFlags"/> enumeration.</para>
      </summary>
      <value>
        <para>A 32-bit value used to store additional information about the codec.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageCodecInfo.FormatDescription">
      <summary>
        <para>Gets or sets a string that describes the codec&apos;s file format.</para>
      </summary>
      <value>
        <para>A string that describes the codec&apos;s file format.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageCodecInfo.FormatID">
      <summary>
        <para>Gets or sets a <see langword="Guid"/> structure that contains a GUID that identifies the codec&apos;s format.</para>
      </summary>
      <value>
        <para>A <see langword="Guid"/> structure that contains a GUID that identifies the codec&apos;s format.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageCodecInfo.MimeType">
      <summary>
        <para>Gets or sets a string that contains the codec&apos;s Multipurpose Internet Mail Extensions (MIME) type.</para>
      </summary>
      <value>
        <para>A string that contains the codec&apos;s Multipurpose Internet Mail Extensions (MIME) type.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageCodecInfo.SignatureMasks">
      <summary>
        <para>Gets or sets a two dimensional array of bytes that can be used as a filter.</para>
      </summary>
      <value>
        <para>A two dimensional array of bytes that can be used as a filter.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageCodecInfo.SignaturePatterns">
      <summary>
        <para>Gets or sets a two dimensional array of bytes that represents the signature of the codec.</para>
      </summary>
      <value>
        <para>A two dimensional array of bytes that represents the signature of the codec.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageCodecInfo.Version">
      <summary>
        <para>Gets or sets the version number of the codec.</para>
      </summary>
      <value>
        <para>A or sets the version number of the codec.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Imaging.ImageFormat">
      <summary>
        <para>Specifies the format of the image. Not inheritable.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Imaging.ImageFormat.#ctor(System.Guid)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.ImageFormat"/> class using the specified <see langword="Guid"/> structure.</para>
      </summary>
      <param name="guid">
        The <see langword="Guid"/> structure that specifies a particular image format.
      </param>
    </member>

    <member name="P:System.Drawing.Imaging.ImageFormat.Bmp">
      <summary>
        <para>Gets the bitmap image format (BMP).</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that indicates the bitmap image format.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageFormat.Emf">
      <summary>
        <para>Gets the enhanced Windows metafile image format (EMF).</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that indicates the enhanced Windows metafile image format.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageFormat.Exif">
      <summary>
        <para>Gets the Exchangeable Image File (Exif) format.</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that indicates the Exif format.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageFormat.Gif">
      <summary>
        <para>Gets the Graphics Interchange Format (GIF) image format.</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that indicates the GIF image format.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageFormat.Guid">
      <summary>
        <para>Gets a <see langword="Guid"/> structure that represents this <see cref="T:System.Drawing.Imaging.ImageFormat"/> object.</para>
      </summary>
      <value>
        <para>A <see langword="Guid"/> structure that represents this <see cref="T:System.Drawing.Imaging.ImageFormat"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageFormat.Icon">
      <summary>
        <para>Gets the Windows icon image format.</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that indicates the Windows icon image format.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageFormat.Jpeg">
      <summary>
        <para>Gets the Joint Photographic Experts Group (JPEG) image format.</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that indicates the JPEG image format.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageFormat.MemoryBmp">
      <summary>
        <para>Gets a memory bitmap image format.</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that indicates the memory bitmap image format.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageFormat.Png">
      <summary>
        <para>Gets the W3C Portable Network Graphics (PNG) image format.</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that indicates the PNG image format.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageFormat.Tiff">
      <summary>
        <para>Gets the Tag Image File Format (TIFF) image format.</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that indicates the TIFF image format.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.ImageFormat.Wmf">
      <summary>
        <para>Gets the Windows metafile (WMF) image format.</para>
      </summary>
      <value>
        <para>An <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that indicates the Windows metafile image format.</para>
      </value>
    </member>

    <member name="M:System.Drawing.Imaging.ImageFormat.Equals(System.Object)">
      <summary>
        <para>Returns a value that indicates whether the specified object is an <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that is equivalent to this <see cref="T:System.Drawing.Imaging.ImageFormat"/> object.</para>
      </summary>
      <param name="o">
        The object to test.
      </param>
      <returns>
        <para>Returns <see langword="true"/> if <paramref name="o"/> is an <see cref="T:System.Drawing.Imaging.ImageFormat"/> object that is equivalent to this <see cref="T:System.Drawing.Imaging.ImageFormat"/> object; otherwise, returns <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.ImageFormat.GetHashCode">
      <summary>
        <para>Returns a hash code value that represents this object.</para>
      </summary>
      <returns>
        <para>Returns a hash code that represents this object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.ImageFormat.ToString">
      <summary>
        <para>Converts this <see cref="T:System.Drawing.Imaging.ImageFormat"/> object to a human-readable string.</para>
      </summary>
      <returns>
        <para>A string representing this <see cref="T:System.Drawing.Imaging.ImageFormat"/> object.</para>
      </returns>
    </member>

    <member name="T:System.Drawing.Imaging.Metafile">
      <summary>
        <para>Defines a graphic metafile. A metafile contains records that describe a sequence of graphics operations that can be recorded (constructed) and played back (displayed). Not inheritable.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IntPtr,System.Boolean)">
      <overload>
        Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class.
      </overload>
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified handle.</para>
      </summary>
      <param name="henhmetafile">
        A handle to an enhanced metafile .
      </param>
      <param name="deleteEmf">
        Set to <see langword="true"/> to delete the enhanced metafile handle when the <see cref="T:System.Drawing.Imaging.Metafile"/> object is deleted; otherwise, <see langword="false"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IntPtr,System.Drawing.Imaging.EmfType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified handle to a device context and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/>.</para>
      </summary>
      <param name="referenceHdc">
        The handle to a device context.
      </param>
      <param name="emfType">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IntPtr,System.Drawing.Imaging.EmfType,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified handle to a device context and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object. A string can be supplied to name the file.</para>
      </summary>
      <param name="referenceHdc">
        The handle to a device context.
      </param>
      <param name="emfType">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="description">
        A descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IntPtr,System.Drawing.Rectangle)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified device context, bounded by the specified rectangle.</para>
      </summary>
      <param name="referenceHdc">
        The handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IntPtr,System.Drawing.Rectangle,System.Drawing.Imaging.MetafileFrameUnit)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified device context, bounded by the specified rectangle that uses the supplied units of measure.</para>
      </summary>
      <param name="referenceHdc">
        The handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IntPtr,System.Drawing.Rectangle,System.Drawing.Imaging.MetafileFrameUnit,System.Drawing.Imaging.EmfType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified device context, bounded by the specified rectangle that uses the supplied units of measure, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="referenceHdc">
        The handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IntPtr,System.Drawing.Rectangle,System.Drawing.Imaging.MetafileFrameUnit,System.Drawing.Imaging.EmfType,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified device context, bounded by the specified rectangle that uses the supplied units of measure, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object. A string can be provided to name the file.</para>
      </summary>
      <param name="referenceHdc">
        The handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="desc">
        A <see cref="T:System.String"/> object that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IntPtr,System.Drawing.RectangleF)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified device context, bounded by the specified rectangle.</para>
      </summary>
      <param name="referenceHdc">
        The handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IntPtr,System.Drawing.RectangleF,System.Drawing.Imaging.MetafileFrameUnit)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified device context, bounded by the specified rectangle that uses the supplied units of measure.</para>
      </summary>
      <param name="referenceHdc">
        The handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IntPtr,System.Drawing.RectangleF,System.Drawing.Imaging.MetafileFrameUnit,System.Drawing.Imaging.EmfType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified device context, bounded by the specified rectangle that uses the supplied units of measure, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="referenceHdc">
        The handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IntPtr,System.Drawing.RectangleF,System.Drawing.Imaging.MetafileFrameUnit,System.Drawing.Imaging.EmfType,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified device context, bounded by the specified rectangle that uses the supplied units of measure, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object. A string can be provided to name the file.</para>
      </summary>
      <param name="referenceHdc">
        The handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="description">
        A <see cref="T:System.String"/> object that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IntPtr,System.Drawing.Imaging.WmfPlaceableFileHeader)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified handle and a <see langword="WmfPlaceableFileHeader"/> object.</para>
      </summary>
      <param name="hmetafile">
        A windows handle to a <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="wmfHeader">
        A <see langword="WmfPlaceableFileHeader"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IntPtr,System.Drawing.Imaging.WmfPlaceableFileHeader,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified handle and a <see langword="WmfPlaceableFileHeader"/> object. Also, <paramref name="deleteWmf"/> can be used to delete the handle when the metafile is deleted.</para>
      </summary>
      <param name="hmetafile">
        A windows handle to a <see cref="T:System.Drawing.Imaging.Metafile"/>.
      </param>
      <param name="wmfHeader">
        A <see langword="WmfPlaceableFileHeader"/> object.
      </param>
      <param name="deleteWmf">
        Set to <see langword="true"/> to delete the handle to the new <see cref="T:System.Drawing.Imaging.Metafile"/> object when the <see cref="T:System.Drawing.Imaging.Metafile"/> object is deleted; otherwise, <see langword="false"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified data stream.</para>
      </summary>
      <param name="stream">
        The <see cref="T:System.IO.Stream"/> object from which to create the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IO.Stream,System.IntPtr)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified data stream.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IO.Stream,System.IntPtr,System.Drawing.Imaging.EmfType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified data stream, a Windows handle to a device context, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IO.Stream,System.IntPtr,System.Drawing.Imaging.EmfType,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified data stream, a Windows handle to a device context, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object. Also, a string<see langword=" "/>that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object can be added.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="description">
        A <see cref="T:System.String"/> object that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IO.Stream,System.IntPtr,System.Drawing.Rectangle)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified data stream, a Windows handle to a device context, and a <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IO.Stream,System.IntPtr,System.Drawing.Rectangle,System.Drawing.Imaging.MetafileFrameUnit)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified data stream, a Windows handle to a device context, and a <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, and the supplied units of measure.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IO.Stream,System.IntPtr,System.Drawing.Rectangle,System.Drawing.Imaging.MetafileFrameUnit,System.Drawing.Imaging.EmfType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified data stream, a Windows handle to a device context, a <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, the supplied units of measure, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IO.Stream,System.IntPtr,System.Drawing.Rectangle,System.Drawing.Imaging.MetafileFrameUnit,System.Drawing.Imaging.EmfType,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified data stream, a Windows handle to a device context, a <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, the supplied units of measure, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object. A string that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object can be added.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="description">
        A <see cref="T:System.String"/> object that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IO.Stream,System.IntPtr,System.Drawing.RectangleF)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified data stream, a Windows handle to a device context, and a <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IO.Stream,System.IntPtr,System.Drawing.RectangleF,System.Drawing.Imaging.MetafileFrameUnit)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified data stream, a Windows handle to a device context, and a <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, and the supplied units of measure.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IO.Stream,System.IntPtr,System.Drawing.RectangleF,System.Drawing.Imaging.MetafileFrameUnit,System.Drawing.Imaging.EmfType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified data stream, a Windows handle to a device context, a <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, the supplied units of measure, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.IO.Stream,System.IntPtr,System.Drawing.RectangleF,System.Drawing.Imaging.MetafileFrameUnit,System.Drawing.Imaging.EmfType,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified data stream, a Windows handle to a device context, a <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, the supplied units of measure, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object. A string that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object can be added.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="description">
        A <see cref="T:System.String"/> object that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class from the specified file name.</para>
      </summary>
      <param name="filename">
        A <see cref="T:System.String"/> object that represents the file name from which to create the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String,System.IntPtr)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class with the specified file name.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> object that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String,System.IntPtr,System.Drawing.Imaging.EmfType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class with the specified file name, from a Windows handle to a device context, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> object that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String,System.IntPtr,System.Drawing.Imaging.EmfType,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class with the specified file name, from a Windows handle to a device context, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object. A descriptive string can be added as well.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> object that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="description">
        A <see cref="T:System.String"/> object that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String,System.IntPtr,System.Drawing.Rectangle)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class with the specified file name, using a Windows handle to a device context, and a <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> object that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String,System.IntPtr,System.Drawing.Rectangle,System.Drawing.Imaging.MetafileFrameUnit)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class with the specified file name, using a Windows handle to a device context, a <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, and the supplied units of measure.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> object that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String,System.IntPtr,System.Drawing.Rectangle,System.Drawing.Imaging.MetafileFrameUnit,System.Drawing.Imaging.EmfType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class with the specified file name, using a Windows handle to a device context, a <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, the supplied units of measure, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> object that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String,System.IntPtr,System.Drawing.Rectangle,System.Drawing.Imaging.MetafileFrameUnit,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class with the specified file name, using a Windows handle to a device context, a <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, and the supplied units of measure. A descriptive string can also be added.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> object that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="description">
        A <see cref="T:System.String"/> object that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String,System.IntPtr,System.Drawing.Rectangle,System.Drawing.Imaging.MetafileFrameUnit,System.Drawing.Imaging.EmfType,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class with the specified file name, using a Windows handle to a device context, a <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, the supplied units of measure, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object. A descriptive string can also be added.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> object that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="description">
        A <see cref="T:System.String"/> object that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String,System.IntPtr,System.Drawing.RectangleF)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class with the specified file name, using a Windows handle to a device context, and A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> object that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String,System.IntPtr,System.Drawing.RectangleF,System.Drawing.Imaging.MetafileFrameUnit)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class with the specified file name, using a Windows handle to a device context, a <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, and the supplied units of measure.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> object that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String,System.IntPtr,System.Drawing.RectangleF,System.Drawing.Imaging.MetafileFrameUnit,System.Drawing.Imaging.EmfType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class with the specified file name, using a Windows handle to a device context, a <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, the supplied units of measure, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> object that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String,System.IntPtr,System.Drawing.RectangleF,System.Drawing.Imaging.MetafileFrameUnit,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class with the specified file name, using a Windows handle to a device context, a <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, and the supplied units of measure. A descriptive string can also be added.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> object that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="desc">
        A <see cref="T:System.String"/> object that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.#ctor(System.String,System.IntPtr,System.Drawing.RectangleF,System.Drawing.Imaging.MetafileFrameUnit,System.Drawing.Imaging.EmfType,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile"/> class with the specified file name, using a Windows handle to a device context, a <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object, the supplied units of measure, and an <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object. A descriptive string can also be added.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="referenceHdc">
        A Windows handle to a device context.
      </param>
      <param name="frameRect">
        A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="frameUnit">
        A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit"/> enumeration that specifies the units of measure for <paramref name="frameRect"/>.
      </param>
      <param name="type">
        An <see cref="T:System.Drawing.Imaging.EmfType"/> enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
      <param name="description">
        A <see cref="T:System.String"/> object that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </param>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.GetHenhmetafile">
      <summary>
        <para>Returns a Windows handle to an enhanced <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <returns>
        <para>A Windows handle to this enhanced <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.GetMetafileHeader">
      <overload>
        Returns the <see cref="T:System.Drawing.Imaging.MetafileHeader"/> object associated with this <see cref="T:System.Drawing.Imaging.Metafile"/> object.
      </overload>
      <summary>
        <para>Returns the <see cref="T:System.Drawing.Imaging.MetafileHeader"/> object associated with this <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Drawing.Imaging.MetafileHeader"/> object this method retrieves.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.GetMetafileHeader(System.IntPtr)">
      <summary>
        <para>Returns the <see cref="T:System.Drawing.Imaging.MetafileHeader"/> object associated with the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="henhmetafile">
        The handle to the enhanced <see cref="T:System.Drawing.Imaging.Metafile"/> object for which a header is returned.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Imaging.MetafileHeader"/> object this method retrieves.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.GetMetafileHeader(System.IO.Stream)">
      <summary>
        <para>Returns the <see cref="T:System.Drawing.Imaging.MetafileHeader"/> object associated with the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="stream">
        A <see cref="T:System.IO.Stream"/> object containing the <see cref="T:System.Drawing.Imaging.Metafile"/> object for which a header is retrieved.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Imaging.MetafileHeader"/> object this method retrieves.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.GetMetafileHeader(System.String)">
      <summary>
        <para>Returns the <see cref="T:System.Drawing.Imaging.MetafileHeader"/> object associated with the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="fileName">
        A <see cref="T:System.String"/> object containing the name of the <see cref="T:System.Drawing.Imaging.Metafile"/> object for which a header is retrieved.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Imaging.MetafileHeader"/> object this method retrieves.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.GetMetafileHeader(System.IntPtr,System.Drawing.Imaging.WmfPlaceableFileHeader)">
      <summary>
        <para>Returns the <see cref="T:System.Drawing.Imaging.MetafileHeader"/> object associated with the specified <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <param name="hmetafile">
        The handle to the <see cref="T:System.Drawing.Imaging.Metafile"/> object for which to return a header.
      </param>
      <param name="wmfHeader">
        A <see langword="WmfPlaceableFileHeader"/> object.
      </param>
      <returns>
        <para>The <see cref="T:System.Drawing.Imaging.MetafileHeader"/> object this method retrieves.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])">
      <summary>
        <para>Plays an individual metafile record.</para>
      </summary>
      <param name="recordType">
        Element of the <see cref="T:System.Drawing.Imaging.EmfPlusRecordType"/> enumeration that specifies the type of metafile record being played.
      </param>
      <param name="flags">
        A set of flags that specify attributes of the record.
      </param>
      <param name="dataSize">
        The number of bytes in the record data.
      </param>
      <param name="data">
        An array of bytes that contains the record data.
      </param>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
    </member>

    <member name="T:System.Drawing.Imaging.MetafileHeader">
      <summary>
        <para>Contains attributes of an associated <see cref="T:System.Drawing.Imaging.Metafile"/> object. Not inheritable.</para>
      </summary>
    </member>

    <member name="P:System.Drawing.Imaging.MetafileHeader.Bounds">
      <summary>
        <para>Gets a <see cref="T:System.Drawing.Rectangle"/> structure that bounds the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Rectangle"/> structure that bounds the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetafileHeader.DpiX">
      <summary>
        <para>Gets the horizontal resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <value>
        <para>The horizontal resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetafileHeader.DpiY">
      <summary>
        <para>Gets the vertical resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <value>
        <para>The vertical resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetafileHeader.EmfPlusHeaderSize">
      <summary>
        <para>Gets the size, in bytes, of the enhanced metafile plus header file.</para>
      </summary>
      <value>
        <para>The size, in bytes, of the enhanced metafile plus header file.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetafileHeader.LogicalDpiX">
      <summary>
        <para>Gets the logical horizontal resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <value>
        <para>The logical horizontal resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetafileHeader.LogicalDpiY">
      <summary>
        <para>Gets the logical vertical resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <value>
        <para>The logical vertical resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetafileHeader.MetafileSize">
      <summary>
        <para>Gets the size, in bytes, of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <value>
        <para>The size, in bytes, of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetafileHeader.Type">
      <summary>
        <para>Gets the type of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <value>
        <para>A <see cref="T:System.Drawing.Imaging.MetafileType"/> enumeration that represents the type of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetafileHeader.Version">
      <summary>
        <para>Gets the version number of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <value>
        <para>The version number of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetafileHeader.WmfHeader">
      <summary>
        <para>Gets the WMF header file for the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <value>
        <para>A <see langword="MetaHeader"/> object that contains the WMF header file for the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </value>
    </member>

    <member name="M:System.Drawing.Imaging.MetafileHeader.IsDisplay">
      <summary>
        <para>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is device dependent.</para>
      </summary>
      <returns>
        <para>Returns <see langword="true"/> if the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is device dependent; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.MetafileHeader.IsEmf">
      <summary>
        <para>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is in the Windows enhanced metafile format.</para>
      </summary>
      <returns>
        <para>Returns <see langword="true"/> if the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is in the Windows enhanced metafile format; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.MetafileHeader.IsEmfOrEmfPlus">
      <summary>
        <para>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is in the Windows enhanced metafile format or the Windows enhanced metafile plus format.</para>
      </summary>
      <returns>
        <para>Returns <see langword="true"/> if the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is in the Windows enhanced metafile format or the Windows enhanced metafile plus format; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.MetafileHeader.IsEmfPlus">
      <summary>
        <para>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is in the Windows enhanced metafile plus format.</para>
      </summary>
      <returns>
        <para>Returns <see langword="true"/> if the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is in the Windows enhanced metafile plus format; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.MetafileHeader.IsEmfPlusDual">
      <summary>
        <para>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is in the Dual enhanced metafile format. This format supports both the enhanced and the enhanced plus format.</para>
      </summary>
      <returns>
        <para>Returns <see langword="true"/> if the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is in the Dual enhanced metafile format; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.MetafileHeader.IsEmfPlusOnly">
      <summary>
        <para>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object supports only the Windows enhanced metafile plus format.</para>
      </summary>
      <returns>
        <para>Returns <see langword="true"/> if the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object supports only the Windows enhanced metafile plus format; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.MetafileHeader.IsWmf">
      <summary>
        <para>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is in the Windows metafile format.</para>
      </summary>
      <returns>
        <para>Returns <see langword="true"/> if the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is in the Windows metafile format; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="M:System.Drawing.Imaging.MetafileHeader.IsWmfPlaceable">
      <summary>
        <para>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is in the Windows placeable metafile format.</para>
      </summary>
      <returns>
        <para>Returns <see langword="true"/> if the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object is in the Windows placeable metafile format; otherwise, <see langword="false"/>.</para>
      </returns>
    </member>

    <member name="T:System.Drawing.Imaging.MetaHeader">
      <summary>
        <para>Contains information about a windows-format (WMF) metafile.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Imaging.MetaHeader.#ctor">
      <summary>
        <para>Initializes a new instance of the <see langword="MetaHeader"/> class.</para>
      </summary>
      <remarks>
        <para>The default constructor initializes all properties to their default values.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.MetaHeader.HeaderSize">
      <summary>
        <para>Gets or sets the size, in bytes, of the header file.</para>
      </summary>
      <value>
        <para>The size, in bytes, of the header file.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetaHeader.MaxRecord">
      <summary>
        <para>Gets or sets the size, in bytes, of the largest record in the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <value>
        <para>The size, in bytes, of the largest record in the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetaHeader.NoObjects">
      <summary>
        <para>Gets or sets the maximum number of objects that exist in the <see cref="T:System.Drawing.Imaging.Metafile"/> object at the same time.</para>
      </summary>
      <value>
        <para>The maximum number of objects that exist in the <see cref="T:System.Drawing.Imaging.Metafile"/> object at the same time.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetaHeader.NoParameters">
      <summary>
        <para>Reserved.</para>
      </summary>
      <value>
        <para>Reserved.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetaHeader.Size">
      <summary>
        <para>Gets or sets the size, in bytes, of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <value>
        <para>The size, in bytes, of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.MetaHeader.Type">
      <summary>
        <para>Gets or sets the type of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
      <value>
        <para>The type of the associated <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </value>
      <remarks>
        <para>Specifies whether the metafile is in memory or recorded in a disk file. This property can be one of the following values.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.MetaHeader.Version">
      <summary>
        <para>Gets or sets the version number of the header format.</para>
      </summary>
      <value>
        <para>The version number of the header format.</para>
      </value>
      <remarks>
        <para>Specifies the system version number. The version number for metafiles that support device-independent bitmaps (DIBS) is 0x0300. Otherwise, the version number is 0x0100.</para>
      </remarks>
    </member>

    <member name="T:System.Drawing.Imaging.PropertyItem">
      <summary>
        <para>Encapsulates a metadata property to be included in an image file. Not inheritable.</para>
      </summary>
      <remarks>
        <para>The data consists of: an identifier, the length (in bytes) of the property, the property type, and a pointer to the property value.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Imaging.PropertyItem.Id">
      <summary>
        <para>Gets or sets the ID of the property.</para>
      </summary>
      <value>
        <para>The ID of the property.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.PropertyItem.Len">
      <summary>
        <para>Gets or sets the length of the property.</para>
      </summary>
      <value>
        <para>The length of the property.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.PropertyItem.Type">
      <summary>
        <para>Gets or sets the type of the property.</para>
      </summary>
      <value>
        <para>The type of the property.</para>
      </value>
    </member>

    <member name="P:System.Drawing.Imaging.PropertyItem.Value">
      <summary>
        <para>Gets or sets the property value.</para>
      </summary>
      <value>
        <para>The property value.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Imaging.ColorAdjustType">
      <summary>
        <para>Specifies which GDI+ objects use color adjustment information.</para>
      </summary>
      <remarks>
        <para><see cref="T:System.Drawing.Bitmap"/>, <see cref="T:System.Drawing.Brush"/>, and <see cref="T:System.Drawing.Pen"/> objects use any color adjustments that have been set in the default <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object until their own color adjustments have been set.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Imaging.ColorAdjustType.Any">
      <summary>
        <para>The number of types specified.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorAdjustType.Bitmap">
      <summary>
        <para>Color adjustment information for <see cref="T:System.Drawing.Bitmap"/> objects.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorAdjustType.Brush">
      <summary>
        <para>Color adjustment information for <see cref="T:System.Drawing.Brush"/> objects.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorAdjustType.Count">
      <summary>
        <para>The number of types specified.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorAdjustType.Default">
      <summary>
        <para>Color adjustment information that is used by all GDI+ objects that do not have their own color adjustment information.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorAdjustType.Pen">
      <summary>
        <para>Color adjustment information for <see cref="T:System.Drawing.Pen"/> objects.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorAdjustType.Text">
      <summary>
        <para>Color adjustment information for text.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.ColorChannelFlag">
      <summary>
        <para>Specifies individual channels in the CMYK (cyan, magenta, yellow, black) color space. This enumeration is used by the <see cref="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannel"/><see langword=" Methods"/>.</para>
      </summary>
      <remarks>
        <para>The values are flags, which can be combined by using the <see langword="OR"/> operator.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Imaging.ColorChannelFlag.ColorChannelC">
      <summary>
        <para>The cyan color channel.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorChannelFlag.ColorChannelK">
      <summary>
        <para>The black color channel.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorChannelFlag.ColorChannelM">
      <summary>
        <para>The magenta color channel.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorChannelFlag.ColorChannelY">
      <summary>
        <para>The yellow color channel.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.ColorMapType">
      <summary>
        <para>Specifies the types of color maps.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorMapType.Brush">
      <summary>
        <para>Specifies a color map for a <see cref="T:System.Drawing.Brush"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorMapType.Default">
      <summary>
        <para>A default color map.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.ColorMatrixFlag">
      <summary>
        <para>Specifies the types of images and colors that will be affected by the color and grayscale adjustment settings of an <see cref="T:System.Drawing.Imaging.ImageAttributes"/> object.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorMatrixFlag.Default">
      <summary>
        <para>Specifies that all color values (including gray shades) are adjusted by the same color-adjustment matrix.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorMatrixFlag.SkipGrays">
      <summary>
        <para>Specifies that colors are adjusted but gray shades are not adjusted. A gray shade is any color that has the same value for its red, green, and blue components.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.ColorMode">
      <summary>
        <para>Specifies two modes for color component values.</para>
      </summary>
      <remarks>
        <para>For computers with 32-bit integers, use ARGB32Mode. For computers with 64-bit integers, use ARGB64Mode.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Imaging.ColorMode.Argb32Mode">
      <summary>
        <para>The integer values supplied are 32-bit values.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ColorMode.Argb64Mode">
      <summary>
        <para>The integer values supplied are 64-bit values.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.EmfPlusRecordType">
      <summary>
        <para>Specifies the methods available for use with a metafile to read and write graphic commands. The members of this enumeration come in three groups: </para>
      </summary>
      <remarks>
        <para>GDI+ uses the enhanced Windows metafile image format (EMF). The EMF format contains a comment mechanism for embedding data within the metafile. This comment mechanism is used to embed GDI+ records within an EMF file. EMF files that contain GDI+ data are called EMF+ files. Applications that do not recognize the comment data skip the comment records and render the records they do understand. If the EMF+ file is played back by GDI+, then the GDI+ records are used to render the metafile; otherwise, the GDI records (if present) are used.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.BeginContainer">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.BeginContainer"/><see langword="_Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.BeginContainerNoParams">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.BeginContainer"/><see langword="_Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Brush">
      <summary>
        <para>See <see cref="T:System.Drawing.Brush"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Clear">
      <summary>
        <para>See <see langword="Graphics.Clear"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Comment">
      <summary>
        <para>See <see langword="Graphics.AddMetafileComment"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.DrawArc">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.DrawArc"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.DrawBeziers">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.DrawBeziers"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.DrawClosedCurve">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.DrawClosedCurve"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.DrawCurve">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.DrawCurve"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.DrawDriverString">
      <summary>
        <para>Specifies a character string, a location, and formatting information.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.DrawEllipse">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.DrawEllipse"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.DrawImage">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.DrawImage"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.DrawImagePoints">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.DrawImage"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.DrawLines">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.DrawLines"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.DrawPath">
      <summary>
        <para>See <see langword="Graphics.DrawPath"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.DrawPie">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.DrawPie"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.DrawRects">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.DrawRectangles"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.DrawString">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.DrawString"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EndContainer">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EndOfFile">
      <summary>
        <para>Identifies a record that marks the last EMF+ record of a metafile.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.FillClosedCurve">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.FillClosedCurve"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.FillEllipse">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.FillEllipse"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.FillPath">
      <summary>
        <para>See <see langword="Graphics.FillPath"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.FillPie">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.FillPie"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.FillPolygon">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.FillPolygon"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.FillRects">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.FillRectangles"/><see langword=" Methods"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.FillRegion">
      <summary>
        <para>See <see langword="Graphics.FillRegion"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.FirstObject">
      <summary>
        <para>The first object contained in the metafile.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Font">
      <summary>
        <para>See <see cref="T:System.Drawing.Font"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.GetDC">
      <summary>
        <para>See <see langword="Graphics.GetHdc"/>. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Header">
      <summary>
        <para>Identifies a record that is the EMF+ header.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Image">
      <summary>
        <para>See <see cref="T:System.Drawing.Image"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.ImageAttributes">
      <summary>
        <para>See <see cref="T:System.Drawing.Imaging.ImageAttributes"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Invalid">
      <summary>
        <para>Indicates invalid data.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.LastObject">
      <summary>
        <para>The last object in the metafile.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Max">
      <summary>
        <para>The maximum value for this enumeration.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Min">
      <summary>
        <para>The minimum value for this enumeration.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.MultiFormatEnd">
      <summary>
        <para>Marks the end of a multiple-format section.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.MultiFormatSection">
      <summary>
        <para>Marks a multiple-format section.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.MultiFormatStart">
      <summary>
        <para>Marks the start of a multiple-format section.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.MultiplyWorldTransform">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.MultiplyTransform"/><see langword=" Methods"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Object">
      <summary>
        <para>Marks an object.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.OffsetClip">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.TranslateClip"/><see langword=" Methods"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Path">
      <summary>
        <para>See <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Pen">
      <summary>
        <para>See <see cref="T:System.Drawing.Pen"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.PenSetBrush">
      <summary>
        <para>See <see cref="P:System.Drawing.Pen.Brush"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Region">
      <summary>
        <para>See <see cref="T:System.Drawing.Region"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.ResetClip">
      <summary>
        <para>See <see langword="Graphics.ResetClip"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.ResetWorldTransform">
      <summary>
        <para>See <see langword="Graphics.ResetTransform"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Restore">
      <summary>
        <para>See <see langword="Graphics.Restore"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.RotateWorldTransform">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.RotateTransform"/><see langword=" Methods"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Save">
      <summary>
        <para>See <see langword="Graphics.Save"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.ScaleWorldTransform">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.ScaleTransform"/><see langword=" Methods"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.SetAntiAliasMode">
      <summary>
        <para>See <see langword="Graphics.SmoothingMode"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.SetClipPath">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.SetClip"/><see langword=" Methods"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.SetClipRect">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.SetClip"/><see langword=" Methods"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.SetClipRegion">
      <summary>
        <para>See <see cref="M:System.Drawing.Graphics.SetClip"/><see langword=" Methods"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.SetCompositingMode">
      <summary>
        <para>See <see langword="Graphics.CompositingMode"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.SetCompositingQuality">
      <summary>
        <para>See <see langword="Graphics.CompositingQuality"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.SetInterpolationMode">
      <summary>
        <para>See <see langword="Graphics.InterpolationMode"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.SetPageTransform">
      <summary>
        <para>See Graphics.<see langword="TransformPoints"/><see langword=" Methods"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.SetPixelOffsetMode">
      <summary>
        <para>See <see langword="Graphics.PixelOffsetMode"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.SetRenderingOrigin">
      <summary>
        <para>See <see langword="Graphics.RenderingOrigin"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.SetTextContrast">
      <summary>
        <para>See <see langword="Graphics.TextContrast"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.SetTextRenderingHint">
      <summary>
        <para>See <see langword="Graphics.TextRenderingHint"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.SetWorldTransform">
      <summary>
        <para>See Graphics.<see langword="TransformPoints"/><see langword=" Methods"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.StringFormat">
      <summary>
        <para>See <see cref="T:System.Drawing.StringFormat"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.Total">
      <summary>
        <para>Used internally.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.TranslateWorldTransform">
      <summary>
        <para>See Graphics.<see langword="TransformPoints"/><see langword=" Methods"/>.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfAbortPath">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfAlphaBlend">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfAngleArc">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfArcTo">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfBeginPath">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfBitBlt">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfChord">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfCloseFigure">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfColorCorrectPalette">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfColorMatchToTargetW">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfCreateBrushIndirect">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfCreateColorSpace">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfCreateColorSpaceW">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfCreateDibPatternBrushPt">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfCreateMonoBrush">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfCreatePalette">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfCreatePen">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfDeleteColorSpace">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfDeleteObject">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfDrawEscape">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfEllipse">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfEndPath">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfEof">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfExcludeClipRect">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfExtCreateFontIndirect">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfExtCreatePen">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfExtEscape">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfExtFloodFill">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfExtSelectClipRgn">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfExtTextOutA">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfExtTextOutW">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfFillPath">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfFillRgn">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfFlattenPath">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfForceUfiMapping">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfFrameRgn">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfGdiComment">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfGlsBoundedRecord">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfGlsRecord">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfGradientFill">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfHeader">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfIntersectClipRect">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfInvertRgn">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfLineTo">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfMaskBlt">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfMax">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfMin">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfModifyWorldTransform">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfMoveToEx">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfNamedEscpae">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfOffsetClipRgn">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPaintRgn">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPie">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPixelFormat">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPlgBlt">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPlusRecordBase">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyBezier">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyBezier16">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyBezierTo">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyBezierTo16">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyDraw">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyDraw16">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolygon">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolygon16">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyline">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyline16">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyLineTo">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolylineTo16">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyPolygon">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyPolygon16">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyPolyline">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyPolyline16">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyTextOutA">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfPolyTextOutW">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfRealizePalette">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfRectangle">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfReserved069">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfReserved117">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfResizePalette">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfRestoreDC">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfRoundArc">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfRoundRect">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSaveDC">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfScaleViewportExtEx">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfScaleWindowExtEx">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSelectClipPath">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSelectObject">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSelectPalette">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetArcDirection">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetBkColor">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetBkMode">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetBrushOrgEx">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetColorAdjustment">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetColorSpace">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetDIBitsToDevice">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetIcmMode">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetIcmProfileA">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetIcmProfileW">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetLayout">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetLinkedUfis">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetMapMode">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetMapperFlags">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetMetaRgn">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetMiterLimit">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetPaletteEntries">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetPixelV">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetPolyFillMode">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetROP2">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetStretchBltMode">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetTextAlign">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetTextColor">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetTextJustification">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetViewportExtEx">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetViewportOrgEx">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetWindowExtEx">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetWindowOrgEx">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSetWorldTransform">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfSmallTextOut">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfStartDoc">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfStretchBlt">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfStretchDIBits">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfStrokeAndFillPath">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfStrokePath">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfTransparentBlt">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.EmfWidenPath">
      <summary>
        <para>See &quot;Enhanced-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfAnimatePalette">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfArc">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfBitBlt">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfChord">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfCreateBrushIndirect">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfCreateFontIndirect">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfCreatePalette">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfCreatePatternBrush">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfCreatePenIndirect">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfCreateRegion">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfDeleteObject">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfDibBitBlt">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfDibCreatePatternBrush">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfDibStretchBlt">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfEllipse">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfEscape">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfExcludeClipRect">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfExtFloodFill">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfExtTextOut">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfFillRegion">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfFloodFill">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfFrameRegion">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfIntersectClipRect">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfInvertRegion">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfLineTo">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfMoveTo">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfOffsetCilpRgn">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfOffsetViewportOrg">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfOffsetWindowOrg">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfPaintRegion">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfPatBlt">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfPie">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfPolygon">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfPolyline">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfPolyPolygon">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfRealizePalette">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfRecordBase">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfRectangle">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfResizePalette">
      <summary>
        <para>Increases or decreases the size of a logical palette based on the specified value.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfRestoreDC">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfRoundRect">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSaveDC">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfScaleViewportExt">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfScaleWindowExt">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSelectClipRegion">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSelectObject">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSelectPalette">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetBkColor">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetBkMode">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetDibToDev">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetLayout">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetMapMode">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetMapperFlags">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetPalEntries">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetPixel">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetPolyFillMode">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetRelAbs">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetROP2">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetStretchBltMode">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetTextAlign">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetTextCharExtra">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetTextColor">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetTextJustification">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetViewportExt">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetViewportOrg">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetWindowExt">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfSetWindowOrg">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfStretchBlt">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfStretchDib">
      <summary>
        <para>Copies the color data for a rectangle of pixels in a DIB to the specified destination rectangle.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfPlusRecordType.WmfTextOut">
      <summary>
        <para>See &quot;Windows-Format Metafiles&quot; in the GDI section of the Platform SDK documentation.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.EmfType">
      <summary>
        <para>Specifies the nature of the records that are placed in an Enhanced Metafile (EMF) file. This enumeration is used by several constructors in the <see cref="T:System.Drawing.Imaging.Metafile"/> class.</para>
      </summary>
      <remarks>
        <para>GDI+ uses the enhanced Windows metafile image format (EMF). The EMF format contains a comment mechanism for embedding data within the metafile. This comment mechanism is used to embed GDI+ records within an EMF file. EMF files that contain GDI+ data are called EMF+ files. Applications that do not recognize the comment data skip the comment records and render the records they do understand. If the EMF+ file is played back by GDI+, then the GDI+ records are used to render the metafile; otherwise, the GDI records (if present) are used.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Imaging.EmfType.EmfOnly">
      <summary>
        <para>Specifies that all the records in the metafile are EMF records, which can be displayed by GDI or GDI+.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfType.EmfPlusDual">
      <summary>
        <para>Specifies that all EMF+ records in the metafile are associated with an alternate EMF record. Metafiles of type <see langword="EmfTypeEmfPlusDual"/> can be displayed by GDI or by GDI+.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EmfType.EmfPlusOnly">
      <summary>
        <para>Specifies that all the records in the metafile are EMF+ records, which can be displayed by GDI+ but not by GDI.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.EncoderParameterValueType">
      <summary>
        <para>GDI+ uses image encoders to convert the images stored in <see cref="T:System.Drawing.Bitmap"/> objects to various file formats. Image encoders are built into GDI+ for the BMP, JPEG, GIF, TIFF, and PNG formats. And encoder is invoked when you call the <see langword="Save"/> or <see langword="SaveAdd"/> method of a <see cref="T:System.Drawing.Bitmap"/> object.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeAscii">
      <summary>
        <para>Specifies that the array of values is a null-terminated ASCII character string. Note that the <see langword="NumberOfValues"/> data member of the <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object indicates the length of the character string including the NULL terminator.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte">
      <summary>
        <para>Specifies that each value in the array is an 8-bit unsigned integer.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLong">
      <summary>
        <para>Specifies that each value in the array is a 32-bit unsigned integer.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLongRange">
      <summary>
        <para>Specifies that each value in the array is a pair of 32-bit unsigned integers. Each pair represents a range of numbers.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRational">
      <summary>
        <para>Specifies that each value in the array is a pair of 32-bit unsigned integers. Each pair represents a fraction, the first integer being the numerator and the second integer being the denominator.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRationalRange">
      <summary>
        <para>Specifies that each value in the array is a set of four, 32-bit unsigned integers. The first two integers represent one fraction, and the second two integers represent a second fraction. The two fractions represent a range of rational numbers. The first fraction is the smallest rational number in the range, and the second fraction is the largest rational number in the range. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeShort">
      <summary>
        <para>Specifies that each value in the array is a 16-bit, unsigned integer.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeUndefined">
      <summary>
        <para>Specifies that the array of values is an array of bytes that has no data type defined.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.EncoderValue">
      <summary>
        <para>When you call the <see langword="Save"/> or <see langword="SaveAdd"/> method of an <see cref="T:System.Drawing.Image"/> object, you can pass parameters to the image encoder by passing an <see cref="T:System.Drawing.Imaging.EncoderParameters"/> object to the <see langword="Save"/> or <see langword="SaveAdd"/> method. An <see cref="T:System.Drawing.Imaging.EncoderParameters"/> object contains an array of <see cref="T:System.Drawing.Imaging.EncoderParameter"/> objects. Each <see cref="T:System.Drawing.Imaging.EncoderParameter"/> object has an array of values and an <see cref="T:System.Drawing.Imaging.Encoder"/> property that specifies the parameter category. The <see langword="EncoderValue"/> enumeration provides names for some of the values that can be passed to the JPEG and TIFF image encoders.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.ColorTypeCMYK">
      <summary>
        <para>Not used in GDI+ version 1.0.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.ColorTypeYCCK">
      <summary>
        <para>Not used in GDI+ version 1.0.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.CompressionCCITT3">
      <summary>
        <para>Specifies the CCITT3 compression scheme. Can be passed to the TIFF encoder as a parameter that belongs to the compression category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.CompressionCCITT4">
      <summary>
        <para>Specifies the CCITT4 compression scheme. Can be passed to the TIFF encoder as a parameter that belongs to the compression category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.CompressionLZW">
      <summary>
        <para>Specifies the LZW compression scheme. Can be passed to the TIFF encoder as a parameter that belongs to the Compression category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.CompressionNone">
      <summary>
        <para>Specifies no compression. Can be passed to the TIFF encoder as a parameter that belongs to the compression category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.CompressionRle">
      <summary>
        <para>Specifies the RLE compression scheme. Can be passed to the TIFF encoder as a parameter that belongs to the compression category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.Flush">
      <summary>
        <para>Specifies that a multiple-frame file or stream should be closed. Can be passed to the TIFF encoder as a parameter that belongs to the save flag category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.FrameDimensionPage">
      <summary>
        <para>Specifies that a frame is to be added to the page dimension of an image. Can be passed to the TIFF encoder as a parameter that belongs to the save flag category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.FrameDimensionResolution">
      <summary>
        <para>Not used in GDI+ version 1.0.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.FrameDimensionTime">
      <summary>
        <para>Not used in GDI+ version 1.0.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.LastFrame">
      <summary>
        <para>Specifies the last frame in a multiple-frame image. Can be passed to the TIFF encoder as a parameter that belongs to the save flag category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.MultiFrame">
      <summary>
        <para>Specifies that the image has more than one frame (page). Can be passed to the TIFF encoder as a parameter that belongs to the save flag category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.RenderNonProgressive">
      <summary>
        <para>Not used in GDI+ version 1.0.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.RenderProgressive">
      <summary>
        <para>Not used in GDI+ version 1.0.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.ScanMethodInterlaced">
      <summary>
        <para>Not used in GDI+ version 1.0.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.ScanMethodNonInterlaced">
      <summary>
        <para>Not used in GDI+ version 1.0.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.TransformFlipHorizontal">
      <summary>
        <para>Specifies that the image is to be flipped horizontally (about the vertical axis). Can be passed to the JPEG encoder as a parameter that belongs to the transformation category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.TransformFlipVertical">
      <summary>
        <para>Specifies that the image is to be flipped vertically (about the horizontal axis). Can be passed to the JPEG encoder as a parameter that belongs to the transformation category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.TransformRotate180">
      <summary>
        <para>Specifies that the image is to be rotated 180 degrees about its center. Can be passed to the JPEG encoder as a parameter that belongs to the transformation category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.TransformRotate270">
      <summary>
        <para>Specifies that the image is to be rotated clockwise 270 degrees about its center. Can be passed to the JPEG encoder as a parameter that belongs to the transformation category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.TransformRotate90">
      <summary>
        <para>Specifies that the image is to be rotated clockwise 90 degrees about its center. Can be passed to the JPEG encoder as a parameter that belongs to the transformation category.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.VersionGif87">
      <summary>
        <para>Not used in GDI+ version 1.0.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.EncoderValue.VersionGif89">
      <summary>
        <para>Not used in GDI+ version 1.0.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.ImageCodecFlags">
      <summary>
        <para>Provides flags for use with codecs.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageCodecFlags.BlockingDecode">
      <summary>
        <para>Indicates that a decoder has blocking behavior during the decoding process. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageCodecFlags.Builtin">
      <summary>
        <para>Indicates that the codec is built into GDI+. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageCodecFlags.Decoder">
      <summary>
        <para>Indicates that the codec supports decoding (reading). </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageCodecFlags.Encoder">
      <summary>
        <para>Indicates that the codec supports encoding (saving). </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageCodecFlags.SeekableEncode">
      <summary>
        <para>Indicates that an encoder requires a seekable output stream. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageCodecFlags.SupportBitmap">
      <summary>
        <para>Indicates that the codec supports raster images (bitmaps). </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageCodecFlags.SupportVector">
      <summary>
        <para>Indicates that the codec supports vector images (metafiles). </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageCodecFlags.System">
      <summary>
        <para>Not used in GDI+ version 1.0. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageCodecFlags.User">
      <summary>
        <para>Not used in GDI+ version 1.0. </para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.ImageFlags">
      <summary>
        <para>Specifies the attributes of the pixel data contained in an <see cref="T:System.Drawing.Image"/> object. The <see langword="Image.Flags"/> property returns a member of this enumeration.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.Caching">
      <summary>
        <para>The pixel data can be cached for faster access.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.ColorSpaceCmyk">
      <summary>
        <para>The pixel data uses a CMYK color space.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.ColorSpaceGray">
      <summary>
        <para>The pixel data is grayscale.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.ColorSpaceRgb">
      <summary>
        <para>The pixel data uses an RGB color space.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.ColorSpaceYcbcr">
      <summary>
        <para>Specifies that the image is stored using a YCBCR color space. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.ColorSpaceYcck">
      <summary>
        <para>Specifies that the image is stored using a YCCK color space.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.HasAlpha">
      <summary>
        <para>The pixel data contains alpha information.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.HasRealDpi">
      <summary>
        <para>Specifies that dots per inch information is stored in the image. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.HasRealPixelSize">
      <summary>
        <para>Specifies that the pixel size is stored in the image. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.HasTranslucent">
      <summary>
        <para>Specifies that the pixel data has alpha values other than 0 (transparent) and 255 (opaque). </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.None">
      <summary>
        <para>There is no format information.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.PartiallyScalable">
      <summary>
        <para>The pixel data is partially scalable, but there are some limitations.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.ReadOnly">
      <summary>
        <para>The pixel data is read-only.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageFlags.Scalable">
      <summary>
        <para>The pixel data is scalable.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.ImageLockMode">
      <summary>
        <para>Specifies flags that are passed to the flags parameter of the <see langword="Bitmap.LockBits"/> method. The <see langword="LockBits"/> method locks a portion of an image so that you can read or write the pixel data.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageLockMode.ReadOnly">
      <summary>
        <para>Specifies that a portion of the image is locked for reading.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageLockMode.ReadWrite">
      <summary>
        <para>Specifies that a portion of the image is locked for reading or writing.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageLockMode.UserInputBuffer">
      <summary>
        <para>Specifies that the buffer used for reading or writing pixel data is allocated by the user. If this flag is set, the <paramref name="flags"/> parameter of the <see langword="Bitmap.LockBits"/> method serves as an input parameter (and possibly as an output parameter). If this flag is cleared, then the <paramref name="flags"/> parameter serves only as an output parameter.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.ImageLockMode.WriteOnly">
      <summary>
        <para>Specifies that a portion of the image is locked for writing.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.MetafileFrameUnit">
      <summary>
        <para>Specifies the unit of measurement for the rectangle used to size and position a metafile. This is specified during the creation of the <see cref="T:System.Drawing.Imaging.Metafile"/> object.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.MetafileFrameUnit.Document">
      <summary>
        <para>The unit of measurement is 1/300 of an inch.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.MetafileFrameUnit.GdiCompatible">
      <summary>
        <para>The unit of measurement is 0.01 millimeter. Provided for compatibility with GDI.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.MetafileFrameUnit.Inch">
      <summary>
        <para>The unit of measurement is 1 inch.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.MetafileFrameUnit.Millimeter">
      <summary>
        <para>The unit of measurement is 1 millimeter.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.MetafileFrameUnit.Pixel">
      <summary>
        <para>The unit of measurement is 1 pixel.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.MetafileFrameUnit.Point">
      <summary>
        <para>The unit of measurement is 1 printer&apos;s point.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.MetafileType">
      <summary>
        <para>Specifies types of metafiles. The <see langword="MetafileHeader.Type"/> property returns a member of this enumeration.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.MetafileType.Emf">
      <summary>
        <para>Specifies an Enhanced Metafile (EMF) file. Such a file contains only GDI records.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.MetafileType.EmfPlusDual">
      <summary>
        <para>Specifies an EMF+ Dual file. Such a file contains GDI+ records along with alternative GDI records and can be displayed by using either GDI or GDI+. Displaying the records using GDI may cause some quality degradation.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.MetafileType.EmfPlusOnly">
      <summary>
        <para>Specifies an EMF+ file. Such a file contains only GDI+ records and must be displayed by using GDI+. Displaying the records using GDI may cause unpredictable results.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.MetafileType.Invalid">
      <summary>
        <para>Specifies a metafile format that is not recognized in GDI+.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.MetafileType.Wmf">
      <summary>
        <para>Specifies a WMF (Windows Metafile) file. Such a file contains only GDI records.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.MetafileType.WmfPlaceable">
      <summary>
        <para>Specifies a WMF (Windows Metafile) file that has a placeable metafile header in front of it.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.PaletteFlags">
      <summary>
        <para>Specifies the type of color data in the system palette. The data can be color data with alpha, grayscale data only, or halftone data.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PaletteFlags.GrayScale">
      <summary>
        <para>Grayscale data.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PaletteFlags.Halftone">
      <summary>
        <para>Halftone data.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PaletteFlags.HasAlpha">
      <summary>
        <para>Alpha data.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Imaging.PixelFormat">
      <summary>
        <para>Specifies the format of the color data for each pixel in the image.</para>
      </summary>
      <remarks>
        <para>The pixel format defines the number of bits of memory associated with one pixel of data. The format also defines the order of the color components within a single pixel of data.</para>
        <para>PixelFormat48bppRGB, PixelFormat64bppARGB, and PixelFormat64bppPARGB use 16 bits per color component (channel). GDI+ version 1.0 and 1.1 can read 16-bits-per-channel images, but such images are converted to an 8-bits-per-channel format for processing, displaying, and saving. Each 16-bit color channel can hold a value in the range 0 through 2^13.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Alpha">
      <summary>
        <para>The pixel data contains alpha values that are not premultiplied.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Canonical">
      <summary>
        <para>Reserved.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.DontCare">
      <summary>
        <para>No pixel format is specified.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Extended">
      <summary>
        <para>Reserved.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555">
      <summary>
        <para>The pixel format is 16 bits per pixel. The color information specifies 32,768 shades of color, of which 5 bits are red, 5 bits are green, 5 bits are blue, and 1 bit is alpha.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale">
      <summary>
        <para>The pixel format is 16 bits per pixel. The color information specifies 65536 shades of gray. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb555">
      <summary>
        <para>Specifies that the format is 16 bits per pixel; 5 bits each are used for the red, green, and blue components. The remaining bit is not used. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb565">
      <summary>
        <para>Specifies that the format is 16 bits per pixel; 5 bits are used for the red component, 6 bits are used for the green component, and 5 bits are used for the blue component. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed">
      <summary>
        <para>Specifies that the pixel format is 1 bit per pixel and that it uses indexed color. The color table therefore has two colors in it.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb">
      <summary>
        <para>Specifies that the format is 24 bits per pixel; 8 bits each are used for the red, green, and blue components. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb">
      <summary>
        <para>Specifies that the format is 32 bits per pixel; 8 bits each are used for the alpha, red, green, and blue components.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb">
      <summary>
        <para>Specifies that the format is 32 bits per pixel; 8 bits each are used for the alpha, red, green, and blue components. The red, green, and blue components are premultiplied according to the alpha component. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format32bppRgb">
      <summary>
        <para>Specifies that the format is 32 bits per pixel; 8 bits each are used for the red, green, and blue components. The remaining 8 bits are not used. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb">
      <summary>
        <para>Specifies that the format is 48 bits per pixel; 16 bits each are used for the red, green, and blue components. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed">
      <summary>
        <para>Specifies that the format is 4 bits per pixel, indexed. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb">
      <summary>
        <para>Specifies that the format is 64 bits per pixel; 16 bits each are used for the alpha, red, green, and blue components. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb">
      <summary>
        <para>Specifies that the format is 64 bits per pixel; 16 bits each are used for the alpha, red, green, and blue components. The red, green, and blue components are premultiplied according to the alpha component. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed">
      <summary>
        <para>Specifies that the format is 8 bits per pixel, indexed. The color table therefore has 256 colors in it.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Gdi">
      <summary>
        <para>The pixel data contains GDI colors.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Indexed">
      <summary>
        <para>The pixel data contains color-indexed values, which means the values are an index to colors in the system color table, as opposed to individual color values.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Max">
      <summary>
        <para>The maximum value for this enumeration.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.PAlpha">
      <summary>
        <para>The pixel format contains premultiplied alpha values.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Imaging.PixelFormat.Undefined">
      <summary>
        <para>The pixel format is undefined.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Text.FontCollection">
      <summary>
        <para>Base class for installed and private font collections. Provides a method to get a list of the font families contained in the collection. For additional information on fonts and text, including example code, see <see langword="Fonts and Text"/> in the Using GDI+ Managed Classes section of these documents.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Text.FontCollection.Dispose">
      <summary>
        <para>Releases all resources used by this <see cref="T:System.Drawing.Text.FontCollection"/> object.</para>
      </summary>
      <returns>
        <para>This method does not return a value.</para>
      </returns>
      <remarks>
        <para>Calling <see langword="Dispose"/> allows the resources used by this <see cref="T:System.Drawing.Text.FontCollection"/> object to be reallocated for other purposes.</para>
      </remarks>
    </member>

    <member name="P:System.Drawing.Text.FontCollection.Families">
      <summary>
        <para>Gets the array of <see cref="T:System.Drawing.FontFamily"/> objects associated with this <see cref="T:System.Drawing.Text.FontCollection"/> object. For additional information on fonts and text, including example code, see <see langword="Fonts and Text"/> in the Using GDI+ Managed Classes section of these documents.</para>
      </summary>
      <value>
        <para>An array of <see cref="T:System.Drawing.FontFamily"/> objects.</para>
      </value>
    </member>

    <member name="T:System.Drawing.Text.InstalledFontCollection">
      <summary>
        <para>Represents the fonts installed on the system. This class cannot be inherited. For additional information on fonts and text, including example code, see <see langword="Fonts and Text"/> in the Using GDI+ Managed Classes section of these documents.</para>
      </summary>
      <remarks>
        <para>GDI+ applications should not use the <see cref="T:System.Drawing.Text.InstalledFontCollection"/> class to install a font to Windows. Instead use the GDI <see langword="AddFontResource"/> function. An <see cref="T:System.Drawing.Text.InstalledFontCollection"/> object sees only fonts that are installed in Windows before the object is created.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Text.InstalledFontCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Text.InstalledFontCollection"/> class. For additional information on fonts and text, including example code, see <see langword="Fonts and Text"/> in the Using GDI+ Managed Classes section of these documents.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Text.PrivateFontCollection">
      <summary>
        <para>A collection of font families built from font files that are provided by the client application. For additional information on fonts and text, including example code, see <see langword="Fonts and Text"/> in the Using GDI+ Managed Classes section of these documents.</para>
      </summary>
      <remarks>
        <para>The <see cref="T:System.Drawing.Text.PrivateFontCollection"/> class allows applications to install a private version of an existing font without the need to replace the system version of the font. For example, GDI+ can create a private version of the Arial font in addition to the Arial font that the system uses. <see cref="T:System.Drawing.Text.PrivateFontCollection"/> can also be used to install fonts that do not exist in the operating system. This is a temporary font install that does not affect the system-installed collection. To see the installed collection, use the <see cref="T:System.Drawing.Text.InstalledFontCollection"/> class.</para>
      </remarks>
    </member>

    <member name="M:System.Drawing.Text.PrivateFontCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Drawing.Text.PrivateFontCollection"/> class. For additional information on fonts and text, including example code, see <see langword="Fonts and Text"/> in the Using GDI+ Managed Classes section of these documents.</para>
      </summary>
    </member>

    <member name="M:System.Drawing.Text.PrivateFontCollection.AddFontFile(System.String)">
      <summary>
        <para>Adds a font from the specified file to this <see cref="T:System.Drawing.Text.PrivateFontCollection"/> object. For additional information on fonts and text, including example code, see <see langword="Fonts and Text"/> in the Using GDI+ Managed Classes section of these documents.</para>
      </summary>
      <param name="filename">
        A <see cref="T:System.String"/> containing the file name of the font to add.
      </param>
    </member>

    <member name="M:System.Drawing.Text.PrivateFontCollection.AddMemoryFont(System.IntPtr,System.Int32)">
      <summary>
        <para>Adds a font contained in system memory to this <see cref="T:System.Drawing.Text.PrivateFontCollection"/> object.</para>
      </summary>
      <param name="memory">
        The memory address of the font to add.
      </param>
      <param name="length">
        The memory length of the font to add.
      </param>
    </member>

    <member name="T:System.Drawing.Text.GenericFontFamilies">
      <summary>
        <para>Specifies a generic <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Text.GenericFontFamilies.Monospace">
      <summary>
        <para>A generic Monospace <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Text.GenericFontFamilies.SansSerif">
      <summary>
        <para>A generic Sans Serif <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Text.GenericFontFamilies.Serif">
      <summary>
        <para>A generic Serif <see cref="T:System.Drawing.FontFamily"/> object.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Text.HotkeyPrefix">
      <summary>
        <para>Specifies the type of display for hot-key prefixes that relate to text.</para>
      </summary>
      <remarks>
        <para>A hot-key prefix allows you to use a keyboard combination (usually CTRL+&lt;<paramref name="HotKey&gt;"/> or ALT+&lt;<paramref name="HotKey&gt;"/>) to access functionality represented by text displayed on the screen.</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Text.HotkeyPrefix.Hide">
      <summary>
        <para>Do not display the hot-key prefix.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Text.HotkeyPrefix.None">
      <summary>
        <para>No hot-key prefix.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Text.HotkeyPrefix.Show">
      <summary>
        <para>Display the hot-key prefix.</para>
      </summary>
    </member>

    <member name="T:System.Drawing.Text.TextRenderingHint">
      <summary>
        <para>Specifies the quality of text rendering.</para>
      </summary>
      <remarks>
        <para>The quality ranges from text (fastest performance and lowest quality) to antialiased text (better quality but slower performance) to ClearType text (best quality on an LCD display).</para>
      </remarks>
    </member>

    <member name="F:System.Drawing.Text.TextRenderingHint.AntiAlias">
      <summary>
        <para>Specifies that each character is drawn using its antialiased glyph bitmap without hinting. Better quality due to antialiasing. Stem width differences may be noticeable because hinting is turned off.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Text.TextRenderingHint.AntiAliasGridFit">
      <summary>
        <para>Specifies that each character is drawn using its antialiased glyph bitmap with hinting. Much better quality due to antialiasing, but at a higher performance cost.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit">
      <summary>
        <para>Specifies that each character is drawn using its glyph CT bitmap with hinting. The highest quality setting. Used to take advantage of ClearType font features.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Text.TextRenderingHint.SingleBitPerPixel">
      <summary>
        <para>Specifies that each character is drawn using its glyph bitmap. Hinting is not used.</para>
      </summary>
    </member>

    <member name="F:System.Drawing.Text.TextRenderingHint.SingleBitPerPixelGridFit">
      <summary>
        <para>Specifies that each character is drawn using its glyph bitmap. Hinting is used to improve character appearance on stems and curvature. </para>
      </summary>
    </member>

    <member name="F:System.Drawing.Text.TextRenderingHint.SystemDefault">
      <summary>
        <para>Specifies that each character is drawn using its glyph bitmap, with the system default rendering hint. The text will be drawn using whatever font smoothing settings the user has selected for the system.</para>
      </summary>
    </member>

<member name="F:System.Drawing.Imaging.ColorMatrixFlag.AltGrays">
<nodoc/>
    </member>

<member name="M:System.Drawing.Drawing2D.Matrix.VectorTransformPoints(System.Drawing.Point[])">
<nodoc/>
    </member>

<member name="M:System.Drawing.Brush.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Brush.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.Font.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Font.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.FontFamily.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.FontFamily.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.FontNameConverter.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.Graphics.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Graphics.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.Icon.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Icon.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.Image.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Image.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.Pen.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Pen.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.Region.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Region.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.SolidBrush.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.StringFormat.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.StringFormat">
<nodoc/>
    </member>

<member name="M:System.Drawing.Drawing2D.CustomLineCap.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Drawing2D.CustomLineCap.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.Drawing2D.GraphicsPath.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Drawing2D.GraphicsPath.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.Drawing2D.GraphicsPathIterator.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Drawing2D.GraphicsPathIterator.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.Drawing2D.Matrix.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Drawing2D.Matrix.Fianlize">
<nodoc/>
    </member>

<member name="M:System.Drawing.Imaging.EncoderParameter.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Imaging.EncoderParameter.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.Imaging.ImageAttributes.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Imaging.ImageAttributes.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.Text.FontCollection.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="M:System.Drawing.Text.FontCollection.Finalize">
<nodoc/>
    </member>

<member name="M:System.Drawing.Text.PrivateFontCollection.Dispose(System.Boolean)">
<nodoc/>
    </member>

<member name="T:System.Drawing.Graphics.EnumerateMetafileProc">
   <summary>
      <para>Provides a callback method for the <see cref="M:System.Drawing.Graphics.EnumerateMetafile"/> method.</para>
   </summary>
   <param name="recordType">
      Member of the <see cref="T:System.Drawing.Imaging.EmfPlusRecordType"/> enumeration that specifies the type of metafile record.
   </param>
   <param name="flags">
      Set of flags that specify attributes of the record.
   </param>
   <param name="dataSize">
      Number of bytes in the record data.
   </param>
   <param name="data">
      Pointer to a buffer that contains the record data.
   </param>
   <param name="callbackData">
      Not used.
   </param>
   <returns>
      <para>Return <see langword="true"/> if you want to continue enumerating records; otherwise, <see langword="false"/>.</para>
   </returns>
   <remarks>
      <para>This method is used in conjunction with the <see cref="M:System.Drawing.Graphics.EnumerateMetafile"/> method of the <see cref="T:System.Drawing.Graphics"/> class. Certain overloads of the <see cref="M:System.Drawing.Graphics.EnumerateMetafile"/> method call an application-defined callback method of this type for each record in a specified metafile. The callback function can display each record (or selected records) by calling the <see cref="M:System.Drawing.Imaging.Metafile.PlayRecord(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.Byte[])"/> method of the <see cref="T:System.Drawing.Imaging.Metafile"/> that is being enumerated.</para>
      <para>A user declaration of this callback method must have the same parameters as the <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc"/> delegate declaration.</para>
   </remarks>
   <example>
      <para>For an example see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
   </example>
 </member>

<member name="T:System.Drawing.Graphics.DrawImageAbort">
   <summary>
      <para>Provides a callback method for deciding when the <see cref="M:System.Drawing.Graphics.DrawImage"/> method should prematurely cancel execution and stop drawing an image.</para>
   </summary>
   <param name="callbackdata">
      Internal pointer that specifies data for the callback method. This parameter is not passed by all <see cref="M:System.Drawing.Graphics.DrawImage"/> overloads. You can test for its absence by checking for the value <see langword="IntPtr.Zero"/>.
   </param>
   <returns>
      <para>This method returns <see langword="true"/> if it decides that the <see cref="M:System.Drawing.Graphics.DrawImage"/> method should prematurely stop execution. Otherwise it returns <see langword="false"/> to indicate that the <see cref="M:System.Drawing.Graphics.DrawImage"/> method should continue execution.</para>
   </returns>
   <remarks>
      <para>This method is used in conjunction with the <see cref="M:System.Drawing.Graphics.DrawImage"/> method of the <see cref="T:System.Drawing.Graphics"/> class. Certain overloads of the <see cref="M:System.Drawing.Graphics.DrawImage"/> method call an application-defined callback method of this type to find out if the overloads should stop or continue execution.</para>
      <para>During execution, the relevant <see cref="M:System.Drawing.Graphics.DrawImage"/> overloads frequently call this callback method to find out if they should stop drawing the specified image or if they should continue drawing the image. The <see cref="T:System.Drawing.Graphics.DrawImageAbort"/> callback method can determine whether to continue or not based on a chosen algorithm included in it, optionally using the data passed to it by the callbackdata parameter. For example, an algorithm might determine if the image has scrolled off the screen and signal a cancellation to the <see cref="M:System.Drawing.Graphics.DrawImage"/> method to stop drawing.</para>
      <para>A user declaration of this event-handling method must have the same parameters as the <see cref="T:System.Drawing.Graphics.DrawImageAbort"/> delegate declaration.</para>
   </remarks>
   <example>
      <para>This example is a simplistic implementation of the <see cref="T:System.Drawing.Graphics.DrawImageAbort"/> delegate. It merely checks to see if the <see cref="M:System.Drawing.Graphics.DrawImage"/> method has passed it data using the callbackdata parameter. (Some <see cref="M:System.Drawing.Graphics.DrawImage"/> overloads have only a <paramref name="DrawImageAbort"/> parameter and pass no data; some overloads have both <paramref name="DrawImageAbort"/> and <paramref name="callbackdata"/> parameters and can pass data.) If no data was passed, it returns <see langword="true"/> to signal to the calling <see cref="M:System.Drawing.Graphics.DrawImage"/> method that it should cancel the drawing. If data was passed, it returns <see langword="false"/> to signal that drawing should continue.</para>
      <para>A realistic implementation of this callback would involve the actual scrutiny of some criteria to cancel or continue the execution.</para>
      <code lang="VB">Private Function DrawImageCallback(callBackData As IntPtr) As Boolean
    ' Test for call that passes callBackData parameter.
    If callBackData.Equals(IntPtr.Zero) Then
        ' If no callBackData passed, abort DrawImage method.
        Return True
    Else
        ' If callBackData passed, continue DrawImage method.
        Return False
    End If
End Function 'DrawImageCallback
      </code>
      <code lang="C#">// Define DrawImageAbort callback method.
private bool DrawImageCallback(IntPtr callbackdata)
{
   // Test for call that passes callBackData parameter.
   if(callbackdata==IntPtr.Zero)
   {
      // If no callbackdata passed, cancel DrawImage method.
      return true;
   }
   else
   {
      // If callbackdata passed, continue DrawImage method.
      return false;
   }
}
      </code>
   </example>
    </member>

<member name="T:System.Drawing.Imaging.PlayRecordCallback">
   <summary>
      <para>This delegate is not used. For an example of enumerating the records of a metafile, see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)"/>.</para>
   </summary>
   <param name="recordType">
      Not used.
   </param>
   <param name="flags">
      Not used.
   </param>
   <param name="dataSize">
      Not used.
   </param>
   <param name="recordData">
      Not used.
   </param>
    </member>

<member name="T:System.Drawing.Image.GetThumbnailImageAbort">
   <summary>
      <para>Provides a callback method for determining when the <see cref="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.Int32)"/> method should prematurely cancel execution.</para>
   </summary>
   <returns>
      This method returns <see langword="true"/> if it decides that the <see cref="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.Int32)"/> method should prematurely stop execution; otherwise, it returns <see langword="false"/>.
   </returns>
    </member>

  </members>
</doc>

