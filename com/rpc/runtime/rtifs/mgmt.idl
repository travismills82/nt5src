/*++

Copyright (C) Microsoft Corporation, 1991 - 1999

Module Name:

    mgmt.idl 

Abstract:

    This file specifies the remote mgmt api interface as specified
    in the AES Appendix Q. with some modifications.

Author:

    AES ??

Revision History:

--*/

midl_pragma warning (disable: 2466 2467 )
[uuid(afa8bd80-7d8a-11c9-bef4-08002b102989), version(1)]

interface mgmt
{
import "nbase.idl";

typedef unsigned long error_status_t;
typedef [range(0,50)] unsigned32 StatisticsCount;
typedef struct
{
    unsigned long Count;
    [size_is(Count)] RPC_IF_ID * IfId[];
} * rpc_if_id_vector_p_t;

cpp_quote("//")
cpp_quote("// The maximum size, in bytes, of incoming data for methods in the interface.")
cpp_quote("//")
cpp_quote("// We keep this large to have space for a token in case we use authentication")
cpp_quote("// with this interface in the future.")
cpp_quote("//")
cpp_quote("#define mgmt_MaxRpcSize (4*1024)")

/*
 * R P C _ _ M G M T _ I N Q _ I F _ I D S
 */

void rpc_mgmt_inq_if_ids
(
    [in]        handle_t                binding_handle,
    [out]       rpc_if_id_vector_p_t    *if_id_vector,
    [out]       error_status_t          *status
);


/*
 * R P C _ _ M G M T _ I N Q _ S T A T S
 */

void rpc_mgmt_inq_stats
(
    [in]        handle_t                binding_handle,
    [in, out]   StatisticsCount         *count,
    [out, size_is (*count)] unsigned32  statistics[*],
    [out]       error_status_t          *status
);


/*
 * R P C _ _ M G M T _ I S _ S E R V E R _ L I S T E N I N G
 */

boolean32 rpc_mgmt_is_server_listening
(
    [in]        handle_t                binding_handle,
    [out]       error_status_t          *status
);


/*
 * R P C _ _ M G M T _ S T O P _ S E R V E R _ L I S T E N I N G
 */

void rpc_mgmt_stop_server_listening
(
    [in]        handle_t                binding_handle,
    [out]       error_status_t          *status
);


/*
 * R P C _ _ M G M T _ I N Q _ P R I N C _ N A M E
 */

void rpc_mgmt_inq_princ_name
(
    [in]        handle_t                binding_handle,
    [in]        unsigned32              authn_proto,
    [in, range(0, 4096)] unsigned32     princ_name_size,
    [out, string, size_is(princ_name_size)]
                char                    princ_name[],
    [out]       error_status_t          *status
);

}


