
// Wizard-generated connection point proxy class
// WARNING: This file may be regenerated by the wizard


#pragma once

template<class T>
class CProxy_IExportEvents :
	public IConnectionPointImpl<T, &__uuidof(_IExportEvents)>
{
public:
	HRESULT Fire_OnStateChange( enExportState  State,  VARIANT  vntArg1,  VARIANT  vntArg2,  VARIANT  vntArg3,  VARIANT_BOOL *  pbContinue)
	{
		HRESULT hr = S_OK;
		T * pThis = static_cast<T *>(this);
		int cConnections = m_vec.GetSize();

		for (int iConnection = 0; iConnection < cConnections; iConnection++)
		{
			pThis->Lock();
			CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
			pThis->Unlock();

			IDispatch * pConnection = static_cast<IDispatch *>(punkConnection.p);

			if (pConnection)
			{
				CComVariant avarParams[4];
				avarParams[3] = State;
				avarParams[2] = vntArg1;
				avarParams[1] = vntArg2;
				avarParams[0] = vntArg3;
				CComVariant varResult;

				DISPPARAMS params = { avarParams, NULL, 4, 0 };
				hr = pConnection->Invoke(1, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &params, &varResult, NULL, NULL);

				if ( SUCCEEDED( hr ) )
				{
					*pbContinue = V_BOOL( &varResult );
				}
			}
		}
		return hr;
	}
};

