Qualifier Description : ToSubClass Amended;
Qualifier Values : ToSubClass Amended;
Qualifier DisplayName : ToSubClass Amended;
Qualifier BitValues:ToSubClass Amended ;

Qualifier Aggregate : ToSubClass ;
Qualifier ValueMap : ToSubClass ;
Qualifier Aggregation : ToSubClass ;
Qualifier ArrayType : ToSubClass ;
Qualifier Association : ToInstance ToSubClass DisableOverride ;
Qualifier BitMap : ToSubClass ;
Qualifier CIM_Key : ToSubClass ;
Qualifier CIMTYPE : ToSubClass ;
Qualifier Deprecated : ToSubClass ;
Qualifier Enumeration : ToSubClass ;
Qualifier EnumPrivileges : ToSubClass ;
Qualifier ImplementationSource : ToSubClass ;
Qualifier Key : ToInstance ToSubClass DisableOverride ;
Qualifier Locale : ToInstance ;
Qualifier MappingStrings : ToSubClass ;
Qualifier Max : ToSubClass ;
Qualifier MaxLen : ToSubClass ;
Qualifier MethodSource : ToSubClass ;
Qualifier Min : ToSubClass ;
Qualifier ModelCorrespondence : ToSubClass ;
Qualifier Not_Null : ToSubClass ;
Qualifier Optional : ToSubClass ;
Qualifier Override : Restricted ;
Qualifier Privileges : ToSubClass ;
Qualifier Propagated : ToSubClass ;
Qualifier PropertySources : ToSubClass ;
Qualifier Provider : ToInstance ;
Qualifier Range : ToSubClass ;
Qualifier Read : ToSubClass ;
Qualifier Schema : ToInstance ;
Qualifier Singleton : ToSubClass ToInstance ;
Qualifier SUBTYPE : ToSubClass ;
Qualifier Units : ToSubClass ;
Qualifier UUID : ToInstance ;
Qualifier Volatile : ToSubClass ;
Qualifier Weak : ToSubClass ;
Qualifier Write : ToSubClass ;
Qualifier WritePrivileges : ToSubClass ;

#pragma autorecover
#pragma classflags(64)
#pragma namespace("\\\\.\\root")

Instance of __Namespace
{
  Name = "MicrosoftIISv2";
};
#pragma namespace("\\\\.\\ROOT\\MicrosoftIISv2")

/* View provider setup */
instance of __Win32Provider as $DataProv
{
    Name = "MS_VIEW_INSTANCE_PROVIDER";
    ClsId = "{AA70DDF4-E11C-11D1-ABB0-00C04FD9159E}";
    ImpersonationLevel = 1;
    PerUserInitialization = "True";
    HostingModel = "NetworkServiceHost";
};
instance of __InstanceProviderRegistration
{
    Provider = $DataProv;
    SupportsPut = True;
    SupportsGet = True;
    SupportsDelete = True;
    SupportsEnumeration = True;
    QuerySupportLevels = {"WQL:UnarySelect"};
};
instance of __MethodProviderRegistration
{
    Provider = $DataProv;
};
/**/

/* IIS provider setup */
Instance of __Win32Provider as $IISProv
{
  Name = "IIS__PROVIDER";
  ClsId = "{D78F1796-E03B-4a81-AFE0-B3B6B0EEE091}";
  Pure = "TRUE";
  ImpersonationLevel = 1;
  PerUserInitialization = "TRUE";
  HostingModel = "NetworkServiceHost";
};
Instance of __InstanceProviderRegistration
{
  Provider = $IISProv;
  SupportsPut = "TRUE";
  SupportsGet = "TRUE";
  SupportsDelete = "TRUE";
  SupportsEnumeration = "TRUE";
  QuerySupportLevels = {"WQL:UnarySelect"};
};
Instance of __MethodProviderRegistration
{
  Provider = $IISProv;
};
/**/

        [Abstract,
        Description("The CIM_ManagedSystemElement class is the base class for the system element "
        "hierarchy. Membership criteria: Any distinguishable component of a system is a candidate "
        "for inclusion in this class.\nExamples: software components, such as files; and devices, "
        "such as disk drives and controllers, and physical components such as chips and cards."),
        Locale(1033),
        UUID("{8502C517-5FBB-11D2-AAC1-006008C78BC7}")]
class CIM_ManagedSystemElement
{
        [PropertySources("Caption"),
        MaxLen(64),
        Description("The Caption property is a short textual description (one-line string) of the "
        "object."),
        read]
    string Caption;

        [PropertySources("Description"),
        Description("The Description property provides a textual description of the object."),
        read]
    string Description;

        [PropertySources("InstallDate"),
        Description("The InstallDate property is datetime value indicating when the object was "
        "installed. A lack of a value does not indicate that the object is not installed."),
        MappingStrings{"MIF.DMTF|ComponentID|001.5"},
        read]
    datetime InstallDate;

        [PropertySources("Name"),
        Description("The Name property defines the label by which the object is known. When "
        "subclassed, the Name property can be overridden to be a Key property."),
        read]
    string Name;

        [PropertySources("Status"),
        read,
        MaxLen(10),
        Description("The Status property is a string indicating the current status of the object. "
        "Various operational and non-operational statuses can be defined. Operational statuses are "
        "\"OK\", \"Degraded\" and \"Pred Fail\". \"Pred Fail\" indicates that an element may be "
        "functioning properly but predicting a failure in the near future. An example is a "
        "SMART-enabled hard drive. Non-operational statuses can also be specified. These are "
        "\"Error\", \"Starting\", \"Stopping\" and \"Service\". The latter, \"Service\", could "
        "apply during mirror-resilvering of a disk, reload of a user permissions list, or other "
        "administrative work. Not all such work is on-line, yet the managed element is neither "
        "\"OK\" nor in one of the other states."),
        ValueMap{"OK", "Error", "Degraded", "Unknown", "Pred Fail", "Starting", "Stopping",
        "Service"},
        Values{"OK", "Error", "Degraded", "Unknown", "Pred Fail", "Starting", "Stopping",
        "Service"}]
    string Status;

};

        [Description("The CIM_LogicalElement class is the base class for all the components of "
        "the system that represent abstract system components.\nExample: profiles, processes, or "
        "system capabilities in the form of logical devices."),
        Abstract,
        Locale(1033),
        UUID("{8502C518-5FBB-11D2-AAC1-006008C78BC7}")]
class CIM_LogicalElement : CIM_ManagedSystemElement
{
};

        [Abstract, Description (
        "A logical element that aggregates an enumerable set of managed system "
        "elements. The aggregation operates as an functional whole. Within any "
        "particular subclass of CIM_System, there is a well-defined list of "
        "CIM_ManagedSystemElement classes whose instances must be aggregated."),
        Locale (0x409), UUID ("{8502C524-5FBB-11D2-AAC1-006008C78BC7}") ]
class CIM_System: CIM_LogicalElement
{
        [CIM_Key, Read,
        Description ("The CreationClassName property indicates the name "
        "of the class or the subclass used in the creation of an instance. "
        "When used with the other key properties of this class, this "
        "property allows all instances of this class and its subclasses to "
        "be uniquely identified.")]
    string CreationClassName ;
        [Override ("Name") , Description (
        "The inherited Name property serves as key of a CIM_System instance in an enterprise "
        "environment.") , CIM_Key, Read ]
    string Name ;
        [Description (
        "The CIM_System object and its derivatives are top level objects of CIM. "
        "They provide the scope for numerous components. Having unique system "
        "keys is required. A heuristic can be defined in individual system "
        "subclasses to attempt to always generate the same system name key. The "
        "NameFormat property identifies how the system name was generated, using "
        "the subclass' heuristic.") , Read ]
    string NameFormat ;
        [Description (
        "A string that provides information on how the primary system owner can "
        "be reached (e.g. phone number, email address, ...).") , Read ]
    string PrimaryOwnerContact ;
        [Description ("The name of the primary system owner.") , Read ]
    string PrimaryOwnerName ;
        [Description (
        "A collection of strings that specify the roles this system plays in "
        "the IT-environment.") , Read, Write ]
    string Roles[] ;
};

        [Description (
         "The Setting class represents configuration-related and "
         "operational parameters for one or more ManagedSystem"
         "Element(s). A ManagedSystemElement may have multiple Setting "
         "objects associated with it. The current operational values "
         "for an Element's parameters are reflected by properties in "
         "the Element itself or by properties in its associations. "
         "These properties do not have to be the same values present "
         "in the Setting object. For example, a modem may have a "
         "Setting baud rate of 56Kb/sec but be operating "
         "at 19.2Kb/sec."),
        Abstract,
        Locale(1033),
        UUID("{8502C572-5FBB-11D2-AAC1-006008C78BC7}")]
class CIM_Setting
{
        [read,
        MaxLen(256),
        Description("The identifier by which the CIM_Setting object is known.")]
    string SettingID;

        [read,
        MaxLen(64),
        Description("A short textual description (one-line string) of the CIM_Setting object.")]
    string Caption;

        [read,
        Description("A textual description of the CIM_Setting object.")]
    string Description;

};

        [Association,
        Abstract,
        Aggregation,
        Description("A generic association to establish 'part of' relationships between managed "
        "system elements."),
        Locale(1033),
        UUID("{8502C573-5FBB-11D2-AAC1-006008C78BC7}")]
class CIM_Component
{
        [read,
        Aggregate,
        Description("The parent element in the association"),
        Min(1),
        Max(1)]
    CIM_ManagedSystemElement ref GroupComponent;

        [Description("The child element in the association"),
        read]
    CIM_ManagedSystemElement ref PartComponent;

};

        [Description("A logical element that contains the information necessary to represent and "
        "manage the functionality provided by a device and/or software feature. A service is a "
        "general-purpose object to configure and manage the implementation of functionality. It is "
        "not the functionality itself."),
        union,
        ViewSources{"Select * from CIM_Service"},
        ViewSpaces{"\\\\.\\root\\cimv2"},
        provider("MS_VIEW_INSTANCE_PROVIDER"),
        Abstract,
        Locale(1033),
        UUID("{8502C527-5FBB-11D2-AAC1-006008C78BC7}")]
class CIM_Service : CIM_LogicalElement
{
        [PropertySources("Name"),
        Description("The Name property uniquely identifies the service and provides an indication "
        "of the functionality that is managed. This functionality is described in more detail in "
        "the object's Description property."),
        read,
        Override("Name"),
        cim_key]
    string Name;

        [PropertySources("CreationClassName"),
        CIM_Key,
        read,
        Description("CreationClassName indicates the name of the class or the subclass used in "
        "the creation of an instance. When used with the other key properties of this class, this "
        "property allows all instances of this class and its subclasses to be uniquely "
        "identified.")]
    string CreationClassName;

        [PropertySources("StartMode"),
        Description("StartMode is a string value indicating whether the service is automatically "
        "started by a operating system, or only started upon request."),
        ValueMap{"Automatic", "Manual"},
        Values{"Automatic", "Manual"},
        read]
    string StartMode;

        [PropertySources("Started"),
        Description("Started is a boolean indicating whether the service has been started (TRUE), "
        "or stopped (FALSE)."),
        read]
    boolean Started;

        [PropertySources("SystemCreationClassName"),
        Propagated("CIM_System.CreationClassName"),
        CIM_Key,
        Description("The type name of the system that hosts this service"),
        read]
    string SystemCreationClassName;

        [PropertySources("SystemName"),
        Propagated("CIM_System.Name"),
        CIM_Key,
        Description("The name of the system that hosts this service"),
        read]
    string SystemName;

        [Description("The StartService method places the service in the started state. It returns "
        "an integer value of 0 if the service was successfully started, 1 if the request is not "
        "supported and any other number to indicate an error.")]
    uint32 StartService();

        [Description("The StopService method places the service in the stopped state. It returns "
        "an integer value of 0 if the service was successfully stopped, 1 if the request is not "
        "supported and any other number to indicate an error.")]
    uint32 StopService();

};

        [Description("The Win32_BaseService class represents executable objects that are "
        "installed in a registry database maintained by the Service Control Manager. The "
        "executable file associated with a service can be started at boot time by a boot program "
        "or by the system. It can also be started on-demand by the Service Control Manager. Any "
        "service or process that is not owned by a specific user, and that provides an interface "
        "to some functionality supported by the computer system, is a descendent (or member) of "
        "this class.\nExample: The dynamic host configuration protocol (DHCP) client service on a "
        "Windows NT/Windows 2000 computer system."),
        provider("MS_VIEW_INSTANCE_PROVIDER"),
        Union,
        ViewSources{"Select * from Win32_BaseService"},
        ViewSpaces{"\\\\.\\root\\cimv2"},
        Abstract,
        Locale(1033),
        UUID("{8502C4C4-5FBB-11D2-AAC1-006008C78BC7}")]
class Win32_BaseService : CIM_Service
{

        [PropertySources("Name"),
        Description("The Name property uniquely identifies the service and provides an indication "
        "of the functionality that is managed. This functionality is described in more detail in "
        "the object's Description property."),
        read,
        Override("Name"),
        key]
    string Name;

        [PropertySources("StartMode"),
        Description("The StartMode property indicates the start mode of the Win32 base service. "
        "\"Boot\" specifies a device driver started by the operating system loader. This value is "
        "valid only for driver services. \"System\" specifies a device driver started by the "
        "IoInitSystem function. This value is valid only for driver services. \"Automatic\" "
        "specifies a service to be started automatically by the service control manager during "
        "system startup. \"Manual\" specifies a service to be started by the service control "
        "manager when a process calls the StartService function. \"Disabled\" specifies a service "
        "that can no longer be started."),
        ValueMap{"Boot", "System", "Auto", "Manual", "Disabled"},
        Values{"Boot", "System", "Auto", "Manual", "Disabled"},
        read,
        Override("StartMode")]
    string StartMode;

        [read,
        PropertySources("AcceptPause"),
        Description("The AcceptPause property indicates whether the service can be "
        "paused.\nValues: TRUE or FALSE. A value of TRUE indicates the service can be paused."),
        MappingStrings{"Win32API|Service "
        "Structures|SERVICE_STATUS|dwControlsAccepted|SERVICE_ACCEPT_PAUSE_CONTINUE"}]
    boolean AcceptPause;

        [read,
        PropertySources("AcceptStop"),
        Description("The AcceptStop property indicates whether the service can be "
        "stopped.\nValues: TRUE or FALSE. A value of TRUE indicates the service can be stopped."),
        MappingStrings{"Win32API|Service "
        "Structures|SERVICE_STATUS|dwControlsAccepted|SERVICE_ACCEPT_STOP"}]
    boolean AcceptStop;

        [read,
        PropertySources("DesktopInteract"),
        Description("The DesktopInteract property indicates whether the service can create or "
        "communicate with windows on the desktop.\nValues: TRUE or FALSE. A value of TRUE "
        "indicates the service can create or communicate with windows on the desktop."),
        MappingStrings{"Win32API|Service "
        "Structures|QUERY_SERVICE_CONFIG|dwServiceType|SERVICE_INTERACTIVE_PROCESS"}]
    boolean DesktopInteract;

        [read,
        PropertySources("DisplayName"),
        Description("The DisplayName property indicates the display name of the service. This "
        "string has a maximum length of 256 characters. The name is case-preserved in the Service "
        "Control Manager. DisplayName comparisons are always case-insensitive. \nConstraints: "
        "Accepts the same value as the Name property.\nExample: Atdisk."),
        MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpDisplayName"}]
    string DisplayName;

        [read,
        PropertySources("ErrorControl"),
        Description("If this service fails to start during startup, the ErrorControl property "
        "specifies the severity of the error. The value indicates the action taken by the startup "
        "program if failure occurs. All errors are logged by the computer system. The computer "
        "system does not notify the user of \"Ignore\" errors. With \"Normal\" errorsthe user is "
        "notified. With \"Severe\" errors, the system is restarted with the last-known-good "
        "configuration. Finally, on\"Critical\" errors the system attempts to restart with a good "
        "configuration."),
        MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwErrorControl"},
        Values{"Ignore", "Normal", "Severe", "Critical", "Unknown"},
        ValueMap{"Ignore", "Normal", "Severe", "Critical", "Unknown"}]
    string ErrorControl;

        [read,
        PropertySources("PathName"),
        Description("The PathName property contains the fully qualified path to the service "
        "binary file that implements the service.\nExample: "
        "\\SystemRoot\\System32\\drivers\\afd.sys"),
        MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpBinaryPathName"}]
    string PathName;

        [read,
        PropertySources("ServiceType"),
        Description("The ServiceType property supplies the type of service provided to calling "
        "processes."),
        MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwServiceType"},
        Values{"Kernel Driver", "File System Driver", "Adapter", "Recognizer Driver", "Own "
        "Process", "Share Process", "Interactive Process"},
        ValueMap{"Kernel Driver", "File System Driver", "Adapter", "Recognizer Driver", "Own "
        "Process", "Share Process", "Interactive Process"}]
    string ServiceType;

        [read,
        PropertySources("StartName"),
        Description("The StartName property indicates the account name under which the service "
        "runs. Depending on the service type, the account name may be in the form of "
        "\"DomainName\\Username\".The service process will be logged using one of these two forms "
        "when it runs. If the account belongs to the built-in domain, \".\\Username\" can be "
        "specified. If NULL is specified, the service will be logged on as the LocalSystem "
        "account. For kernel or system level drivers, StartName contains the driver object name "
        "(that is, \\FileSystem\\Rdr or \\Driver\\Xns) which the input and output (I/O) system "
        "uses to load the device driver. Additionally, if NULL is specified, the driver runs with "
        "a default object name created by the I/O system based on the service name.\nExample: "
        "DWDOM\\Admin."),
        MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpServiceStartName"}]
    string StartName;

        [read,
        PropertySources("State"),
        Description("The State property indicates the current state of the base service."),
        MappingStrings{"Win32API|Service Structures|SERVICE_STATUS|dwCurrentState "},
        Values{"Stopped", "Start Pending", "Stop Pending", "Running", "Continue Pending", "Pause "
        "Pending", "Paused", "Unknown"},
        ValueMap{"Stopped", "Start Pending", "Stop Pending", "Running", "Continue Pending",
        "Pause Pending", "Paused", "Unknown"}]
    string State;

        [read,
        PropertySources("TagId"),
        Description("The TagId property specifies a unique tag value for this service in the "
        "group. A value of 0 indicates that the service has not been assigned a tag. A tag can be "
        "used for ordering service startup within a load order group by specifying a tag order "
        "vector in the registry located at: "
        "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\GroupOrderList. Tags are only "
        "evaluated for Kernel Driver and File System Driver start type services that have \"Boot\" "
        "or \"System\" start modes."),
        MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwTagId"}]
    uint32 TagId;

        [read,
        PropertySources("ExitCode"),
        Description("The ExitCode property specifies a Win32 error code defining any problems "
        "encountered in starting or stopping the service. This property is set to "
        "ERROR_SERVICE_SPECIFIC_ERROR (1066) when the error is unique to the service represented "
        "by this class, and information about the error is available in the "
        "ServiceSpecificExitCode member. The service sets this value to NO_ERROR when running, and "
        "again upon normal termination."),
        MappingStrings{"Win32API|Service Structures|SERVICE_STATUS|dwWin32ExitCode"}]
    uint32 ExitCode;

        [read,
        PropertySources("ServiceSpecificExitCode"),
        Description("The ServiceSpecificExitCode property specifies a service-specific error code "
        "for errors that occur while the service is either starting or stopping. The exit codes "
        "are defined by the service represented by this class. This value is only set when the "
        "ExitCodeproperty value is ERROR_SERVICE_SPECIFIC_ERROR, 1066."),
        MappingStrings{"Win32API|Service Structures|SERVICE_STATUS|dwServiceSpecificExitCode"}]
    uint32 ServiceSpecificExitCode;

        [Description("The StartService method attempts to place the service into its startup "
        "state. It returns one of the following integer values:\n0 - The request was accepted.\n1 "
        "- The request is not supported.\n2 - The user did not have the necessary access.\n3 - The "
        "service cannot be stopped because other services that are running are dependent on it.\n4 "
        "- The requested control code is not valid, or it is unacceptable to the service.\n5 - The "
        "requested control code cannot be sent to the service because the state of the service "
        "(Win32_BaseService:State) is equal to 0, 1, or 2.\n6 - The service has not been "
        "started.\n7 - The service did not respond to the start request in a timely fashion.\n8 - "
        "Unknown failure when starting the service.\n9 - The directory path to the service "
        "executable was not found.\n10 - The service is already running.\n11 - The database to add "
        "a new service is locked.\n12 - A dependency for which this service relies on has been "
        "removed from the system.\n13 - The service failed to find the service needed from a "
        "dependent service.\n14 - The service has been disabled from the system.\n15 - The service "
        "does not have the correct authentication to run on the system.\n16 - This service is "
        "being removed from the system.\n17 - There is no execution thread for the service.\n18 - "
        "There are circular dependencies when starting the service.\n19 - There is a service "
        "running under the same name.\n20 - There are invalid characters in the name of the "
        "service.\n21 - Invalid parameters have been passed to the service.\n22 - The account "
        "which this service is to run under is either invalid or lacks the permissions to run the "
        "service.\n23 - The service exists in the database of services available from the "
        "system.\n24 - The service is currently paused in the system.\n"),
        MethodSource("StartService"),
        Override("StartService"),
        Implemented,
        Values{"Success", "Not Supported", "Access Denied", "Dependent Services Running",
        "Invalid Service Control", "Service Cannot Accept Control", "Service Not Active",
        "Service Request Timeout", "Unknown Failure", "Path Not Found", "Service Already "
        "Running", "Service Database Locked", "Service Dependency Deleted", "Service Dependency "
        "Failure", "Service Disabled", "Service Logon Failed", "Service Marked For Deletion",
        "Service No Thread", "Status Circular Dependency", "Status Duplicate Name", "Status "
        "Invalid Name", "Status Invalid Parameter", "Status Invalid Service Account", "Status "
        "Service Exists", "Service Already Paused"},
        MappingStrings{"Win32API|Service Functions|StartService"}]
    uint32 StartService();

        [Description("The StopService method places the service in the stopped state. It returns "
        "an integer value of 0 if the service was successfully stopped, 1 if the request is not "
        "supported, and any other number to indicate an error."),
        MethodSource("StopService"),
        Override("StopService"),
        Implemented,
        MappingStrings{"Win32API|Service "
        "Functions|ControlService|dwControl|SERVICE_CONTROL_STOP"}]
    uint32 StopService();

        [MethodSource("PauseService"),
        Implemented,
        Description("The PauseService method attempts to place the service in the paused state. "
        "It returns an integer value of 0 if the PauseService request was accepted, 1 if the "
        "request is not supported, and any other number to indicate an error."),
        MappingStrings{"Win32API|Service "
        "Functions|ControlService|dwControl|SERVICE_CONTROL_PAUSE"}]
    uint32 PauseService();

        [MethodSource("ResumeService"),
        Implemented,
        Description("The ResumeService method attempts to place the service in the resumed state. "
        "It returns an integer value of 0 if the ResumeService request was accepted, 1 if the "
        "request is not supported, and any other number to indicate an error."),
        MappingStrings{"Win32API|Service "
        "Functions|ControlService|dwControl|SERVICE_CONTROL_CONTINUE"}]
    uint32 ResumeService();

        [MethodSource("InterrogateService"),
        Implemented,
        Description("The InterrogateService method requests that the service update its state to "
        "the service manager. It returns an integer value of 0 if the InterrogateService request "
        "was accepted, 1 if the request is not supported, and any other number to indicate an "
        "error."),
        MappingStrings{"Win32API|Service "
        "Functions|ControlService|dwControl|SERVICE_CONTROL_INTERROGATE"}]
    uint32 InterrogateService();

        [MethodSource("UserControlService"),
        Implemented,
        Description("The UserControlService method attempts to send a user-defined control code "
        "to a service. It returns an integer value of 0 if the UserControlService request was "
        "accepted, 1 if the request is not supported, and any other number to indicate an "
        "error."),
        MappingStrings{"Win32API|Service "
        "Functions|CreateService|dwDesiredAccess|SERVICE_USER_DEFINED_CONTROL"}]
    uint32 UserControlService(

            [In,
            Description("The ControlCode parameter specifies defined values(from 128 to 255) that "
            "provide control commands specific to a user."),
            MappingStrings{"Win32API|Service Functions|ControlService|dwControl"}]
        uint8 ControlCode

    );

        [MethodSource("Create"),
        Constructor,
        Implemented,
        Static,
        Description("The Create method creates a new service. It returns an integer value of 0 if "
        "the service was successfully created, 1 if the request is not supported, and any other "
        "number to indicate an error. The Win32_LoadOrderGroup parameter represents a grouping of "
        "system services defining execution dependencies. The services must be initiated in the "
        "order specified by the Load Order Group, as the services are dependent on each other. "
        "These dependent services require the presence of the antecedent services in order to "
        "function correctly."),
        MappingStrings{"Win32API|Service Functions|CreateService"}]
    uint32 Create(

            [In,
            Description("The Name parameter passes the name of the service to install to the Create "
            "method. The maximum string length is 256 characters. The service control manager database "
            "preserves the case of the characters, but service name comparisons are always case "
            "insensitive. Forward-slashes (/) and double back-slashes (\\) are invalid service name "
            "characters."),
            MappingStrings{"Win32API|Service Functions|CreateServicelpServiceName"}]
        string Name,

            [In,
            Description("The DisplayName parameter passes the display name of the service. This "
            "string has a maximum length of 256 characters. The name is case-preserved in the service "
            "control manager. DisplayName comparisons are always case-insensitive. \nConstraints: "
            "Accepts the same value as the Name parameter.\nExample: Atdisk."),
            MappingStrings{"Win32API|Service Functions|CreateServicelpDisplayName"}]
        string DisplayName,

            [In,
            Description("The PathName parameter passes the fully qualified path to the executable "
            "file that implements the service.\nExample: \\SystemRoot\\System32\\drivers\\afd.sys"),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpBinaryPathName "}]
        string PathName,

            [In,
            Description("The ServiceType parameter passes the type of services provided to processes "
            "that call them."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwServiceType"},
            BitValues{"Kernel Driver", "File System Driver", "Adapter", "Recognizer Driver", "Own "
            "Process", "Share Process"},
            BitMap{"0", "1", "2", "3", "4", "5", "8"}]
        uint8 ServiceType,

            [In,
            Description("If the Create method fails to start, the ErrorControl parameter passes the "
            "severity of the error. The value indicates the action taken by the startup program if "
            "failure occurs. All errors are logged by the system. The system does not notify the user "
            "of \"Ignore\" errors. With \"Normal\" errors the user is notified. With \"Severe\" "
            "errors, the system is restarted with the last-known-good configuration. Finally, on "
            "\"Critical\" errors, the system attempts to restart with a good configuration."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwErrorControl"},
            Values{"Ignore", "Normal", "Severe", "Critical"}]
        uint8 ErrorControl,

            [In,
            Description("The StartMode parameter passes the start mode of the Win32 base service. "
            "\"Boot\" specifies a device driver started by the operating system loader. This value is "
            "valid only for driver services. \"System\" specifies a device driver started by the "
            "IoInitSystem function. This value is valid only for driver services. \"Automatic\" "
            "specifies a service to be started automatically by the service control manager during "
            "system startup. \"Manual\" specifies a service to be started by the service control "
            "manager when a process calls the StartService function. \"Disabled\" specifies a service "
            "that can no longer be started."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwStartType"},
            Values{"Boot Start", "System Start", "Auto Start", "Demand Start", "Disabled"},
            ValueMap{"Boot", "System", "Automatic", "Manual", "Disabled"}]
        string StartMode,

            [In,
            Description("The DesktopInteract parameter passes the value that indicates whether the "
            "service can create or communicate with windows on the desktop.\nValues: TRUE or FALSE. A "
            "value of TRUE indicates the service can create or communicate with windows on the "
            "desktop."),
            MappingStrings{"Win32API|Service "
            "Structures|QUERY_SERVICE_CONFIG|dwServiceType|SERVICE_INTERACTIVE_PROCESS"}]
        boolean DesktopInteract,

            [In,
            Description("The StartName parameter passes the account name the service runs under. "
            "Depending on the service type, the account name may be in the form of "
            "\"DomainName\\Username\".The service process will be logged using one of these two forms "
            "when it runs.  If the account belongs to the built-in domain, \".\\Username\" can be "
            "specified. If NULL is specified, the service will be logged on as the LocalSystem "
            "account. For a kernel or system-level drivers, StartName contains the driver object name "
            "(that is, \\FileSystem\\Rdr or \\Driver\\Xns) which the input and output (I/O) system "
            "uses to load the device driver. If NULL is specified, the driver runs with a default "
            "object name created by the I/O system based on the service name.\nExample: "
            "DWDOM\\Admin."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpServiceStartName"}]
        string StartName,

            [In,
            Description("The StartPassword parameter passes the password to the account name "
            "specified by the StartName parameter. Specify NULL if you are not changing the password. "
            "Specify an empty string if the service has no password."),
            MappingStrings{"Win32API|Service Functions|CreateService|lpPassword"}]
        string StartPassword,

            [In,
            Description("The LoadOrderGroup parameter passes the group name associated with the new "
            "service. Load order groups are contained in the registry, and determine the sequence in "
            "which services are loaded into the operating system. If the pointer is NULL or if it "
            "points to an empty string, the service does not belong to a group. Dependencies between "
            "groups should be listed in the LoadOrderGroupDependencies parameter. Services in the "
            "load-ordering group list are started first, followed by services in groups not in the "
            "load-ordering group list, followed by services that do not belong to a group. The "
            "registry has a list of load ordering groups located "
            "at:\nHKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\ServiceGroupOrder."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpLoadOrderGroup"}]
        string LoadOrderGroup,

            [In,
            Description("The LoadOrderGroupDependencies parameter passes a list of load ordering "
            "groups that must start before this service. The array is doubly null-terminated. If the "
            "pointer is NULL or if it points to an empty string, the service has no dependencies.  "
            "Group names must be prefixed by the SC_GROUP_IDENTIFIER (defined in the WINSVC.H file) "
            "character to differentiate it from a service name, because services and service groups "
            "share the same name space.  Dependency on a group means that this service can run if at "
            "least one member of the group is running after an attempt to start all members of the "
            "group."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpDependencies"}]
        string LoadOrderGroupDependencies[],

            [In,
            Description("The ServiceDependencies parameter passes a list containing names of services "
            "that must start before this service starts. The array is doubly null-terminated. If the "
            "pointer is NULL, or if it points to an empty string, the service has no dependencies. "
            "Dependency on a service means that this service can only run if the service it depends on "
            "is running."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpDependencies"}]
        string ServiceDependencies[]

    );

        [MethodSource("Change"),
        Implemented,
        Description("The Change method modifies a service. It returns an integer value of 0 if "
        "the service was successfully modified, 1 if the request is not supported and any other "
        "number to indicate an error.  The Win32_LoadOrderGroup parameter represents a grouping of "
        "system services defining execution dependencies. The services must be initiated in the "
        "order specified by the Load Order Group as the services are dependent on each other. "
        "These dependent services require the presence of the antecedent services in order to "
        "function correctly."),
        MappingStrings{"Win32API|Service Functions|ChangeServiceConfig"}]
    uint32 Change(

            [In,
            Description("The DisplayName parameter passes the display name of the service.  This "
            "string has a maximum length of 256 characters. The name is case-preserved in the service "
            "control manager. DisplayName comparisons are always case-insensitive. \nConstraints: "
            "Accepts the same value as the Name parameter.\nExample: Atdisk"),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpDisplayName"}]
        string DisplayName,

            [In,
            Description("The PathName parameter passes the fully qualified path of the service binary "
            "file that implements the service.\nExample: \\SystemRoot\\System32\\drivers\\afd.sys"),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpBinaryPathName"}]
        string PathName,

            [In,
            Description("The ServiceType parameter passes the type of service provided to processes "
            "calling the service."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwServiceType"},
            BitValues{"Kernel Driver", "File System Driver", "Adapter", "Recognizer Driver", "Own "
            "Process", "Share Process"},
            BitMap{"0", "1", "2", "3", "4", "5", "8"}]
        uint8 ServiceType,

            [In,
            Description("If this service fails to start during startup, the ErrorControl parameter "
            "passes the severity of the error. The value indicates the action taken by the startup "
            "program if failure occurs. All errors are logged by the system. The system does not "
            "notify the user of \"Ignore\" errors. With \"Normal\" errors the user is notified. With "
            "\"Severe\" errors, the system is restarted with the last-known-good configuration. "
            "Finally, on \"Critical\" errors, the system attempts to restart with a good "
            "configuration."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwErrorControl"},
            Values{"Ignore", "Normal", "Severe", "Critical"}]
        uint8 ErrorControl,

            [In,
            Description("The StartMode property indicates the start mode of the Win32 base service. "
            "\"Boot\" specifies a device driver started by the operating system loader. This value is "
            "valid only for driver services. \"System\" specifies a device driver started by the "
            "IoInitSystem function. This value is valid only for driver services. \"Automatic\" "
            "specifies a service to be started automatically by the service control manager during "
            "system startup. \"Manual\" specifies a service to be started by the service control "
            "manager when a process calls the StartService function. \"Disabled\" specifies a service "
            "that can no longer be started."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwStartType"},
            Values{"Boot Start", "System Start", "Auto Start", "Demand Start", "Disabled"},
            ValueMap{"Boot", "System", "Automatic", "Manual", "Disabled"}]
        string StartMode,

            [In,
            Description("The DesktopInteract parameter passes the value that indicates whether the "
            "service can create or communicate with windows on the desktop.\nValues: TRUE or FALSE. A "
            "value of TRUE indicates the service can create or communicate with windows on the "
            "desktop."),
            MappingStrings{"Win32API|Service "
            "Structures|QUERY_SERVICE_CONFIG|dwServiceType|SERVICE_INTERACTIVE_PROCESS"}]
        boolean DesktopInteract,

            [In,
            Description("The StartName property indicates the account name the service runs under. "
            "Depending on the service type, the account name may be in the form of "
            "\"DomainName\\Username\", The service process will be logged using one of these two forms "
            "when it runs. If the account belongs to the built-in domain, \".\\Username\" can be "
            "specified. If NULL is specified, the service will be logged on as the LocalSystem "
            "account. For kernel or system-level drivers, StartName contains the driver object name "
            "(that is, \\FileSystem\\Rdr or \\Driver\\Xns) that the input and output (I/O) system uses "
            "to load the device driver. If NULL is specified, the driver runs with a default object "
            "name created by the I/O system based on the service name.\nExample: DWDOM\\Admin."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpServiceStartName"}]
        string StartName,

            [In,
            Description("The StartPassword parameter passes the password to the account name "
            "specified by the StartName parameter. Specify NULL if you are not changing the password. "
            "Specify an empty string if the service has no password."),
            MappingStrings{"Win32API|Service Functions|CreateService|lpPassword"}]
        string StartPassword,

            [In,
            Description("The LoadOrderGroup parameter passes the group name that it is associated "
            "with. Load order groups are contained in the system registry, and determine the sequence "
            "in which services are loaded into the operating system. If the pointer is NULL, or if it "
            "points to an empty string, the service does not belong to a group. Dependencies between "
            "groups should be listed in the LoadOrderGroupDependencies parameter. Services in the "
            "load-ordering group list are started first, followed by services in groups not in the "
            "load-ordering group list, followed by services that do not belong to a group. The system "
            "registry has a list of load ordering groups located "
            "at:\nHKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\ServiceGroupOrder."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpLoadOrderGroup"}]
        string LoadOrderGroup,

            [In,
            Description("The LoadOrderGroupDependencies parameter passes a list of load ordering "
            "groups that must start before this service starts. The array is doubly null-terminated. "
            "If the pointer is NULL, or if it points to an empty string, the service has no "
            "dependencies. Group names must be prefixed by the SC_GROUP_IDENTIFIER (defined in the "
            "WINSVC.H file) character to differentiate them from service names because services and "
            "service groups share the same name space. Dependency on a group means that this service "
            "can run if at least one member of the group is running after an attempt to start all "
            "members of the group."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpDependencies"}]
        string LoadOrderGroupDependencies[],

            [In,
            Description("The ServiceDependencies parameter passes a list containing names of services "
            "that must start before this service starts. The array is doubly null-terminated. If the "
            "pointer is NULL, or if it points to an empty string, the service has no dependencies. "
            "Dependency on a service means that this service can run only if the service it depends on "
            "is running."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpDependencies"}]
        string ServiceDependencies[]

    );

        [MethodSource("ChangeStartMode"),
        Implemented,
        Description("The ChangeStartMode method modifies the StartMode of a service. It returns "
        "an integer value of 0 if the service was successfully modified, 1 if the request is not "
        "supported, and any other number to indicate an error."),
        MappingStrings{"Service Functions|ChangeServiceConfig|dwStartType"}]
    uint32 ChangeStartMode(

            [In,
            Description("The StartMode parameter passes the start mode of the Win32 base service. "
            "\"Boot\" specifies a device driver started by the operating system loader. This value is "
            "valid only for driver services. \"System\" specifies a device driver started by the "
            "IoInitSystem function. This value is valid only for driver services. \"Automatic\" "
            "specifies a service to be started automatically by the service control manager during "
            "system startup. \"Manual\" specifies a service to be started by the service control "
            "manager when a process calls the StartService function. \"Disabled\" specifies a service "
            "that can no longer be started."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwStartType"},
            Values{"Boot Start", "System Start", "Auto Start", "Demand Start", "Disabled"},
            ValueMap{"Boot", "System", "Automatic", "Manual", "Disabled"}]
        string StartMode = "Automatic"

    );

        [MethodSource("Delete"),
        Destructor,
        Implemented,
        Description("The Delete method deletes an existing service. It returns an integer value "
        "of 0 if the service was successfully deleted, 1 if the request is not supported, and any "
        "other number to indicate an error."),
        MappingStrings{"Win32API|Service Functions|ChangeServiceConfig|DeleteService"}]
    uint32 Delete();

};

        [Description("The Win32_Service class represents a service on a Win32 computer system. A "
        "service application conforms to the interface rules of the Service Control Manager (SCM) "
        "and can be started by a user automatically at system boot through the Services control "
        "panel utility, or by an application that uses the service functions included in the Win32 "
        "API. Services can execute even when no user is logged on to the system."),
        union,
        ViewSources{"Select * from Win32_Service"},
        ViewSpaces{"\\\\.\\root\\cimv2"},
        provider("MS_VIEW_INSTANCE_PROVIDER"),
        dynamic,
        Locale(1033),
        UUID("{8502C4D9-5FBB-11D2-AAC1-006008C78BC7}")]
class Win32_Service : Win32_BaseService
{
        [read,
        PropertySources("CheckPoint"),
        Description("The CheckPoint property specifies a value that the service increments "
        "periodically to report its progress during a lengthy start, stop, pause, or continue "
        "operation. For example, the service should increment this value as it completes each step "
        "of its initialization when it is starting up. The user interface program that invoked the "
        "operation on the service uses this value to track the progress of the service during a "
        "lengthy operation. This value is not valid and should be zero when the service does not "
        "have a start, stop, pause, or continue operation pending."),
        MappingStrings{"Win32API|Service Structures|SERVICE_STATUS|dwCheckPoint"}]
    uint32 CheckPoint;

        [read,
        PropertySources("WaitHint"),
        Description("The WaitHint property specifies the estimated time required (in "
        "milliseconds) for a pending start, stop, pause, or continue operation. After the "
        "specified amount of time has elapsed, the service makes its next call to the "
        "SetServiceStatus function with either an incremented CheckPoint value or a change in "
        "CurrentState. If the amount of time specified by WaitHint passes, and CheckPoint has not "
        "been incremented, or the CurrentState has not changed, the service control manager or "
        "service control program assumes that an error has occurred."),
        MappingStrings{"Win32API|Service Structures|SERVICE_STATUS|dwWaitHint"}]
    uint32 WaitHint;

        [read,
        PropertySources("ProcessId"),
        Description("The ProcessId property specifies the process identifier of the "
        "service.\nExample: 324"),
        MappingStrings{"Win32API|Service Structures|SERVICE_STATUS_PROCESS|dwProcessId"}]
    uint32 ProcessId;

};

    [Abstract, Locale ( 0x409 ) , UUID ( "{120BB700-DB2B-11d2-85FC-0000F8102E5F}" ),
    Description(" The CIM_ApplicationSystem class is used to represent an  application "
        "or a software system that supports a particular  business function "
        "and that can be managed as an independent  units. Such a system "
        "can be decomposed into its functional  components using the CIM_SoftwareFeature "
        "class. The software  features for a particular application or "
        "software system are  located using the CIM_ApplicationSystemSoftwareFeature "
        " association.  ")]
class CIM_ApplicationSystem: CIM_System
{
};

        [Abstract,
        Association,
        Locale(1033),
        UUID("{8502C577-5FBB-11D2-AAC1-006008C78BC7}"),
        Description (
        "ElementSetting represents the association between Managed"
        "SystemElements and the Setting class(es) defined for them.") ]
class CIM_ElementSetting
{
        [read,
        Description("The Element reference represents the role of the CIM_ManagedSystemElement "
        "object of the CIM_ElementSetting association. Role: The associated managed system element "
        "provides the element that implements the element setting.")]
    CIM_ManagedSystemElement ref Element;

        [read,
        Description("The CIM_Setting reference represents the role of the CIM_Setting object of "
        "the CIM_ElementSetting association. Role: The associated setting provides the setting "
        "that implements the element setting.")]
    CIM_Setting ref Setting;

};

[Abstract,Locale(1033)]
class IIsStructuredDataClass
{
};

[Abstract,Locale(1033)]
class IIsSetting : CIM_Setting
{
  string Name;
};

[Abstract,Locale(1033)] 
class IIsDirectory : CIM_LogicalElement
{
  [key] string Name;
};

[Abstract, Locale(1033)]
class IIsUserDefinedLogicalElement : CIM_LogicalElement
{
};

[Abstract, Locale(1033)]
class IIsUserDefinedSetting : IIsSetting
{
};

[Abstract, Locale(1033)]
class IIsUserDefinedElementSetting : CIM_ElementSetting
{
};

[Abstract, Locale(1033)]
class IIsUserDefinedComponent : CIM_Component
{
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIsIPSecuritySetting : IIsSetting
{
  [key] string Name;
  string IPDeny[];
  string IPGrant[];
  string DomainDeny[];
  string DomainGrant[];
  boolean GrantByDefault;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIsAdminACL : CIM_LogicalElement
{
  [key] string Name;
  string Owner;
  string Group;
  sint32 ControlFlags;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIsACE : CIM_LogicalElement
{
  [key] string Name;
  [key] string Trustee;
  sint32 AccessMask;
  sint32 AceType;
  sint32 AceFlags;
  sint32 Flags;
  string ObjectType;
  string InheritedObjectType;
};

[provider("IIS__PROVIDER"),Locale(1033)]
class CustomErrorDescription : IIsStructuredDataClass
{
	[key, read, write] string ErrorCode;
	[key, read, write] string ErrorSubCode;
	[key, read, write] string ErrorText;
	[key, read, write] string ErrorSubcodeText;
	[key, read, write] string FileSupportOnly;
};

[provider("IIS__PROVIDER"),Locale(1033)]
class HttpCustomHeader : IIsStructuredDataClass
{
	[key, read, write] string Keyname;
	[key, read, write] string Value;
};

[provider("IIS__PROVIDER"),Locale(1033)]
class HttpError : IIsStructuredDataClass
{
	[key, read, write] string HttpErrorCode;
	[key, read, write] string HttpErrorSubcode;
	[key, read, write] string HandlerType;
	[key, read, write] string HandlerLocation;
};

[provider("IIS__PROVIDER"),Locale(1033)]
class ScriptMap : IIsStructuredDataClass
{
	[key, read, write] string Extensions;
	[key, read, write] string ScriptProcessor;
	[key, read, write] string Flags;
	[key, read, write] string IncludedVerbs;
};

[provider("IIS__PROVIDER"),Locale(1033)]
class SecureBinding : IIsStructuredDataClass
{
	[key, read, write] string IP;
	[key, read, write] string Port;
};

[provider("IIS__PROVIDER"),Locale(1033)]
class ServerBinding : IIsStructuredDataClass
{
	[key, read, write] string IP;
	[key, read, write] string Port;
	[key, read, write] string Hostname;
};

[provider("IIS__PROVIDER"),Locale(1033)]
class ApplicationDependency : IIsStructuredDataClass
{
	[key, read, write] string AppName;
	[key, read, write] string Extensions;
};

[provider("IIS__PROVIDER"),Locale(1033)]
class WebSvcExtRestrictionList : IIsStructuredDataClass
{
	[key, read, write] string Access;
	[key, read, write] string FilePath;
	[key, read, write] string Deletable;
	[key, read, write] string ServerExtension;
	[key, read, write] string Description;
};

[provider("IIS__PROVIDER"),Locale(1033)]
class MimeMap : IIsStructuredDataClass
{
	[key, read, write] string Extension;
	[key, read, write] string MimeType;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpSessions : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3VirtualDirSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string Path;
	[read, write] string UNCUserName;
	[read, write] string UNCPassword;
	[read, write] sint32 Win32Error;
	[read, write] boolean DontLog;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] sint32 Pop3ExpireMail;
	[read, write] sint32 Pop3MailExpirationTime;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages metabase key values that apply to a file in a Web directory for a Web server.")]
class IIsWebFileSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string AnonymousUserName;
	[read, write] string AnonymousUserPass;
	[read, write] boolean AnonymousPasswordSync;
	[read, write] boolean UseDigestSSP;
	[read, write] sint32 CGITimeout;
	[read, write] string DefaultLogonDomain;
	[read, write] sint32 LogonMethod;
	[read, write] string Realm;
	[read, write] MimeMap MimeMap[];
	[read, write] boolean DontLog;
	[read, write] string HttpExpires;
	[read, write] string HttpPics[];
	[read, write] HttpCustomHeader HttpCustomHeaders[];
	[read, write] HttpError HttpErrors[];
	[read, write] boolean EnableDocFooter;
	[read, write] string DefaultDocFooter;
	[read, write] string HttpRedirect;
	[read, write] sint32 CacheControlMaxAge;
	[read, write] boolean CacheControlNoCache;
	[read, write] string CacheControlCustom;
	[read, write] boolean CreateProcessAsUser;
	[read, write] sint32 PoolIdcTimeout;
	[read, write] string RedirectHeaders[];
	[read, write] sint32 UploadReadAheadSize;
	[read, write] sint32 AuthFlags;
	[read, write] boolean AuthAnonymous;
	[read, write] boolean AuthBasic;
	[read, write] boolean AuthNTLM;
	[read, write] boolean AuthMD5;
	[read, write] boolean AuthPassport;
	[read, write] sint32 AuthPersistence;
	[read, write] boolean AuthPersistSingleRequest;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] boolean DisableStaticFileCache;
	[read, write] ScriptMap ScriptMaps[];
	[read, write] boolean SSIExecDisable;
	[read, write] boolean EnableReverseDns;
	[read, write] boolean CreateCGIWithNewConsole;
	[read, write] boolean DoStaticCompression;
	[read, write] boolean DoDynamicCompression;
	[read, write] boolean AzEnable;
	[read, write] string AzStoreName;
	[read, write] string AzScopeName;
	[read, write] sint32 AzImpersonationLevel;
	[read, write] uint8 AdminACLBin[];
	[read, write] sint32 MaxRequestEntityAllowed;
	[read, write] sint32 PassportRequireADMapping;
	[read, write] string NTAuthenticationProviders;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpGroupsSetting : IIsSetting
{
	[Key] string Name;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3RoutingSourceSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string Pop3RoutingTableType;
	[read, write] string Pop3DsDataDirectory;
	[read, write] string Pop3DsDefaultMailRoot;
	[read, write] string Pop3DsBindType;
	[read, write] string Pop3DsSchemaType;
	[read, write] string Pop3DsHost;
	[read, write] string Pop3DsNamingContext;
	[read, write] string Pop3DsAccount;
	[read, write] string Pop3DsPassword;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages metabase properties that apply to one or all FTP virtual directories for an FTP server.")]
class IIsFtpVirtualDir : IIsDirectory
{
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsLogModuleSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string LogModuleId;
	[read, write] string LogModuleUiId;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpInfo : CIM_LogicalElement
{
	[Key] string Name;
	[read, write(FALSE)] sint32 MajorIIsVersionNumber;
	[read, write(FALSE)] sint32 MinorIIsVersionNumber;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpSessionsSetting : IIsSetting
{
	[Key] string Name;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpServiceSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 MaxBandwidth;
	[read, write] sint32 MaxConnections;
	[read, write] string ServerComment;
	[read, write] sint32 ConnectionTimeout;
	[read, write] sint32 ServerListenTimeout;
	[read, write] sint32 MaxEndpointConnections;
	[read, write] boolean ServerAutoStart;
	[read, write] uint8 AdminACLBin[];
	[read, write] boolean DontLog;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] sint32 AuthFlags;
	[read, write] boolean AuthAnonymous;
	[read, write] boolean AuthBasic;
	[read, write] boolean AuthNTLM;
	[read, write] boolean AuthMD5;
	[read, write] boolean AuthPassport;
	[read, write] sint32 LogType;
	[read, write] sint32 LogFilePeriod;
	[read, write] string LogPluginClsid;
	[read, write] string LogModuleList;
	[read, write] string LogFileDirectory;
	[read, write] sint32 LogFileTruncateSize;
	[read, write] sint32 LogExtFileFlags;
	[read, write] boolean LogExtFileDate;
	[read, write] boolean LogExtFileTime;
	[read, write] boolean LogExtFileClientIp;
	[read, write] boolean LogExtFileUserName;
	[read, write] boolean LogExtFileSiteName;
	[read, write] boolean LogExtFileComputerName;
	[read, write] boolean LogExtFileServerIp;
	[read, write] boolean LogExtFileMethod;
	[read, write] boolean LogExtFileUriStem;
	[read, write] boolean LogExtFileUriQuery;
	[read, write] boolean LogExtFileHttpStatus;
	[read, write] boolean LogExtFileWin32Status;
	[read, write] boolean LogExtFileBytesSent;
	[read, write] boolean LogExtFileBytesRecv;
	[read, write] boolean LogExtFileTimeTaken;
	[read, write] boolean LogExtFileServerPort;
	[read, write] boolean LogExtFileUserAgent;
	[read, write] boolean LogExtFileCookie;
	[read, write] boolean LogExtFileReferer;
	[read, write] boolean LogExtFileProtocolVersion;
	[read, write] boolean LogExtFileHost;
	[read, write] boolean LogExtFileHttpSubStatus;
	[read, write] string LogOdbcDataSource;
	[read, write] string LogOdbcTableName;
	[read, write] string LogOdbcUserName;
	[read, write] string LogOdbcPassword;
	[read, write] boolean EnableReverseDnsLookup;
	[read, write] boolean ShouldDeliver;
	[read, write] boolean AlwaysUseSsl;
	[read, write] boolean LimitRemoteConnections;
	[read, write] sint32 SmartHostType;
	[read, write] boolean DoMasquerade;
	[read, write] sint32 RemoteSmtpPort;
	[read, write] sint32 RemoteSmtpSecurePort;
	[read, write] sint32 HopCount;
	[read, write] sint32 MaxOutConnections;
	[read, write] sint32 MaxOutConnectionsPerDomain;
	[read, write] sint32 RemoteTimeout;
	[read, write] sint32 MaxMessageSize;
	[read, write] sint32 MaxSessionSize;
	[read, write] sint32 MaxRecipients;
	[read, write] sint32 LocalRetryInterval;
	[read, write] sint32 RemoteRetryInterval;
	[read, write] sint32 LocalRetryAttempts;
	[read, write] sint32 RemoteRetryAttempts;
	[read, write] sint32 EtrnDays;
	[read, write] sint32 MaxBatchedMessages;
	[read, write] string SmartHost;
	[read, write] string FullyQualifiedDomainName;
	[read, write] string DefaultDomain;
	[read, write] string DropDirectory;
	[read, write] string BadMailDirectory;
	[read, write] string PickupDirectory;
	[read, write] string QueueDirectory;
	[read, write] string MasqueradeDomain;
	[read, write] string SendNdrTo;
	[read, write] string SendBadTo;
	[read, write] string RoutingDll;
	[read, write] sint32 RouteAction;
	[read, write] string RouteUserName;
	[read, write] string RoutePassword;
	[read, write] string SaslLogonDomain;
	[read, write] string SmtpClearTextProvider;
	[read, write] string NTAuthenticationProviders;
	[read, write] string SmtpRemoteProgressiveRetry;
	[read, write] sint32 SmtpLocalDelayExpireMinutes;
	[read, write] sint32 SmtpLocalNDRExpireMinutes;
	[read, write] sint32 SmtpRemoteDelayExpireMinutes;
	[read, write] sint32 SmtpRemoteNDRExpireMinutes;
	[read, write] sint32 SmtpRemoteRetryThreshold;
	[read, write] sint32 SmtpDSNOptions;
	[read, write] sint32 SmtpDSNLanguageID;
	[read, write] string SmtpAdvQueueDll;
	[read, write] sint32 SmtpInboundCommandSupportOptions;
	[read, write] sint32 SmtpOutboundCommandSupportOptions;
	[read, write] sint32 SmtpCommandLogMask;
	[read, write] sint32 SmtpFlushMailFile;
	[read, write] uint8 RelayIpList[];
	[read, write] sint32 RelayForAuth;
	[read, write] sint32 SmtpConnectTimeout;
	[read, write] sint32 SmtpMailFromTimeout;
	[read, write] sint32 SmtpRcptToTimeout;
	[read, write] sint32 SmtpDataTimeout;
	[read, write] sint32 SmtpBdatTimeout;
	[read, write] sint32 SmtpAuthTimeout;
	[read, write] sint32 SmtpSaslTimeout;
	[read, write] sint32 SmtpTurnTimeout;
	[read, write] sint32 SmtpRsetTimeout;
	[read, write] sint32 SmtpHeloTimeout;
	[read, write] string AnonymousUserPass;
	[read, write] boolean DisableSocketPooling;
	[read, write] sint32 SmtpUseTcpDns;
	[read, write] boolean SmtpDotStuffPickupDirFiles;
	[read, write] sint32 SmtpDomainValidationFlags;
	[read, write] boolean SmtpSSLRequireTrustedCA;
	[read, write] boolean SmtpSSLCertHostnameValidation;
	[read, write] sint32 MaxMailObjects;
	[read, write] boolean ShouldPickupMail;
	[read, write] sint32 MaxDirChangeIOSize;
	[read, write] sint32 NameResolutionType;
	[read, write] sint32 MaxSmtpErrors;
	[read, write] boolean ShouldPipelineIn;
	[read, write] boolean ShouldPipelineOut;
	[read, write] string ConnectResponse;
	[read, write] boolean UpdatedFQDN;
	[read, write] boolean UpdatedDefaultDomain;
	[read, write] boolean EtrnSubdomains;
	[read, write] sint32 SmtpMaxRemoteQThreads;
	[read, write] boolean SmtpDisableRelay;
	[read, write] boolean SmtpHeloNoDomain;
	[read, write] boolean SmtpMailNoHelo;
	[read, write] sint32 SmtpAqueueWait;
	[read, write] boolean AddNoHeaders;
	[read, write] sint32 SmtpEventlogLevel;
	[read, write] boolean AllowAnonymous;
	[read, write] boolean AnonymousOnly;
	[read, write] boolean AnonymousPasswordSync;
	[read, write] string AnonymousUserName;
	[read, write] string Realm;
	[read, write] string DefaultLogonDomain;
	[read, write] sint32 SmtpIpRestrictionFlag;
	[read, write] boolean AzEnable;
	[read, write] string AzStoreName;
	[read, write] string AzScopeName;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages metabase properties that apply to one or all FTP virtual directories for an FTP server.")]
class IIsFtpVirtualDirSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string Path;
	[read, write] string UNCUserName;
	[read, write] string UNCPassword;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] boolean DontLog;
	[read, write] boolean FtpDirBrowseShowLongDate;
	[read, write] sint32 Win32Error;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpExpireSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 ExpireSpace;
	[read, write] sint32 ExpireTime;
	[read, write] string ExpireNewsgroups[];
	[read, write] string ExpirePolicyName;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapServerSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 MaxBandwidth;
	[read, write] sint32 MaxConnections;
	[read, write] string ServerComment;
	[read, write] sint32 ConnectionTimeout;
	[read, write] sint32 ServerListenTimeout;
	[read, write] sint32 MaxEndpointConnections;
	[read, write] boolean ServerAutoStart;
	[read, write] ServerBinding ServerBindings[];
	[read, write] SecureBinding SecureBindings[];
	[read, write] uint8 AdminACLBin[];
	[read, write] boolean DontLog;
	[read, write] sint32 AuthFlags;
	[read, write] boolean AuthAnonymous;
	[read, write] boolean AuthBasic;
	[read, write] boolean AuthNTLM;
	[read, write] boolean AuthMD5;
	[read, write] boolean AuthPassport;
	[read, write] string DefaultLogonDomain;
	[read, write] string NTAuthenticationProviders;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] sint32 LogType;
	[read, write] string LogPluginClsid;
	[read, write] string LogFileDirectory;
	[read, write] sint32 LogFilePeriod;
	[read, write] sint32 LogFileTruncateSize;
	[read, write] sint32 LogExtFileFlags;
	[read, write] boolean LogExtFileDate;
	[read, write] boolean LogExtFileTime;
	[read, write] boolean LogExtFileClientIp;
	[read, write] boolean LogExtFileUserName;
	[read, write] boolean LogExtFileSiteName;
	[read, write] boolean LogExtFileComputerName;
	[read, write] boolean LogExtFileServerIp;
	[read, write] boolean LogExtFileMethod;
	[read, write] boolean LogExtFileUriStem;
	[read, write] boolean LogExtFileUriQuery;
	[read, write] boolean LogExtFileHttpStatus;
	[read, write] boolean LogExtFileWin32Status;
	[read, write] boolean LogExtFileBytesSent;
	[read, write] boolean LogExtFileBytesRecv;
	[read, write] boolean LogExtFileTimeTaken;
	[read, write] boolean LogExtFileServerPort;
	[read, write] boolean LogExtFileUserAgent;
	[read, write] boolean LogExtFileCookie;
	[read, write] boolean LogExtFileReferer;
	[read, write] boolean LogExtFileProtocolVersion;
	[read, write] boolean LogExtFileHost;
	[read, write] boolean LogExtFileHttpSubStatus;
	[read, write] string LogOdbcDataSource;
	[read, write] string LogOdbcTableName;
	[read, write] string LogOdbcUserName;
	[read, write] string LogOdbcPassword;
	[read, write] sint32 ServerListenBacklog;
	[read, write] sint32 Win32Error;
	[read, write] sint32 ImapExpireMail;
	[read, write] sint32 ImapExpireDelay;
	[read, write] sint32 ImapExpireStart;
	[read, write] sint32 ImapMailExpirationTime;
	[read, write] string ImapClearTextProvider;
	[read, write] string ImapDefaultDomain;
	[read, write] string ImapRoutingDll;
	[read, write] boolean AzEnable;
	[read, write] string AzStoreName;
	[read, write] string AzScopeName;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpDomainSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 RouteAction;
	[read, write] string RouteActionString;
	[read, write] string RouteUserName;
	[read, write] string RoutePassword;
	[read, write] uint8 RelayIpList[];
	[read, write] sint32 RelayForAuth;
	[read, write] string AuthTurnList[];
	[read, write] string CSideEtrnDomains;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpExpiration : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsApplicationPool : CIM_LogicalElement
{
	[Key] string Name;
	[Implemented,bypass_getobject,Description("Determine which applications are currently routed to the given application pool")] void EnumAppsInPool([OUT] string Applications[]);
	[Implemented,bypass_getobject,Description("Recycle an already enabled application pool on demand")] void Recycle();
	[Implemented,bypass_getobject,Description("Starts an application pool")] void Start();
	[Implemented,bypass_getobject,Description("Stops an application pool")] void Stop();
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapServer : CIM_LogicalElement
{
	[Key] string Name;
	[read, write(FALSE)] sint32 ServerState;
	[read, write(FALSE)] sint32 ImapServiceVersion;
	[read, write(FALSE)] string ImapRoutingSources[];
	[read, write(FALSE)] uint8 SSLCertHash[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpUserSetting : IIsSetting
{
	[Key] string Name;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Server : CIM_LogicalElement
{
	[Key] string Name;
	[read, write(FALSE)] sint32 ServerState;
	[read, write(FALSE)] sint32 Pop3ServiceVersion;
	[read, write(FALSE)] string Pop3RoutingSources[];
	[read, write(FALSE)] uint8 SSLCertHash[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpService : Win32_Service
{
	[read, write(FALSE)] sint32 SmtpServiceVersion;
	[read, write(FALSE)] string RoutingSources[];
	[read, write(FALSE)] string DomainRouting[];
	[read, write(FALSE)] string LocalDomains[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebInfoSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 ServerConfigFlags;
	[read, write] boolean ServerConfigSSL40;
	[read, write] boolean ServerConfigSSL128;
	[read, write] boolean ServerConfigSSLAllowEncrypt;
	[read, write] boolean ServerConfigAutoPWSync;
	[read, write] CustomErrorDescription CustomErrorDescriptions[];
	[read, write] string AdminServer;
	[read, write] string LogModuleList;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpDL : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpExpirationSetting : IIsSetting
{
	[Key] string Name;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsObjectSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string KeyType;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapVirtualDirSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string Path;
	[read, write] string UNCUserName;
	[read, write] string UNCPassword;
	[read, write] sint32 Win32Error;
	[read, write] boolean DontLog;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] sint32 ImapExpireMail;
	[read, write] sint32 ImapMailExpirationTime;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages inheritable metabase properties for Web sites and Web virtual directories.")]
class IIsWebServiceSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 MaxBandwidth;
	[read, write] sint32 MaxConnections;
	[read, write] MimeMap MimeMap[];
	[read, write] string AnonymousUserName;
	[read, write] string AnonymousUserPass;
	[read, write] boolean UseDigestSSP;
	[read, write] sint32 ServerListenBacklog;
	[read, write] string ServerComment;
	[read, write] ServerBinding ServerBindings[];
	[read, write] sint32 ConnectionTimeout;
	[read, write] sint32 ServerListenTimeout;
	[read, write] sint32 MaxEndpointConnections;
	[read, write] boolean ServerAutoStart;
	[read, write] boolean AllowKeepAlive;
	[read, write] sint32 ServerSize;
	[read, write] boolean DisableSocketPooling;
	[read, write] boolean AnonymousPasswordSync;
	[read, write] string DefaultLogonDomain;
	[read, write] uint8 AdminACLBin[];
	[read, write] boolean DontLog;
	[read, write] string Realm;
	[read, write] string DefaultDoc;
	[read, write] string HttpExpires;
	[read, write] string HttpPics[];
	[read, write] HttpCustomHeader HttpCustomHeaders[];
	[read, write] HttpError HttpErrors[];
	[read, write] boolean EnableDocFooter;
	[read, write] string DefaultDocFooter;
	[read, write] sint32 LogonMethod;
	[read, write] boolean CacheISAPI;
	[read, write] sint32 CGITimeout;
	[read, write] sint32 DirectoryLevelsToScan;
	[read, write] boolean ContentIndexed;
	[read, write] string NTAuthenticationProviders;
	[read, write] sint32 CertCheckMode;
	[read, write] sint32 DownlevelAdminInstance;
	[read, write] boolean AspBufferingOn;
	[read, write] boolean AspLogErrorRequests;
	[read, write] boolean AspScriptErrorSentToBrowser;
	[read, write] string AspScriptErrorMessage;
	[read, write] boolean AspAllowOutOfProcComponents;
	[read, write] sint32 AspScriptFileCacheSize;
	[read, write] string AspDiskTemplateCacheDirectory;
	[read, write] sint32 AspMaxDiskTemplateCacheFiles;
	[read, write] sint32 AspScriptEngineCacheMax;
	[read, write] sint32 AspScriptTimeout;
	[read, write] sint32 AspSessionTimeout;
	[read, write] boolean AspEnableParentPaths;
	[read, write] boolean AspAllowSessionState;
	[read, write] string AspScriptLanguage;
	[read, write] boolean AspExceptionCatchEnable;
	[read, write] sint32 AspCodepage;
	[read, write] sint32 AspLCID;
	[read, write] sint32 AspQueueTimeout;
	[read, write] boolean AspEnableAspHtmlFallback;
	[read, write] boolean AspEnableChunkedEncoding;
	[read, write] boolean AspEnableTypelibCache;
	[read, write] boolean AspErrorsToNTLog;
	[read, write] sint32 AspProcessorThreadMax;
	[read, write] boolean AspTrackThreadingModel;
	[read, write] sint32 AspRequestQueueMax;
	[read, write] boolean AspEnableApplicationRestart;
	[read, write] sint32 AspQueueConnectionTestTime;
	[read, write] sint32 AspSessionMax;
	[read, write] string AppFriendlyName;
	[read, write] boolean AppAllowDebugging;
	[read, write] boolean AppAllowClientDebug;
	[read, write] sint32 CacheControlMaxAge;
	[read, write] boolean CacheControlNoCache;
	[read, write] string CacheControlCustom;
	[read, write] boolean CreateProcessAsUser;
	[read, write] sint32 PoolIdcTimeout;
	[read, write] string RedirectHeaders[];
	[read, write] sint32 UploadReadAheadSize;
	[read, write] sint32 PasswordExpirePrenotifyDays;
	[read, write] sint32 PasswordCacheTTL;
	[read, write] sint32 PasswordChangeFlags;
	[read, write] boolean AuthChangeUnsecure;
	[read, write] boolean AuthChangeDisable;
	[read, write] boolean AuthAdvNotifyDisable;
	[read, write] string AppWamClsid;
	[read, write] sint32 DirBrowseFlags;
	[read, write] boolean DirBrowseShowDate;
	[read, write] boolean DirBrowseShowTime;
	[read, write] boolean DirBrowseShowSize;
	[read, write] boolean DirBrowseShowExtension;
	[read, write] boolean DirBrowseShowLongDate;
	[read, write] boolean EnableDefaultDoc;
	[read, write] boolean EnableDirBrowsing;
	[read, write] sint32 AuthFlags;
	[read, write] boolean AuthAnonymous;
	[read, write] boolean AuthBasic;
	[read, write] boolean AuthNTLM;
	[read, write] boolean AuthMD5;
	[read, write] boolean AuthPassport;
	[read, write] sint32 AuthPersistence;
	[read, write] boolean AuthPersistSingleRequest;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] boolean DisableStaticFileCache;
	[read, write] ScriptMap ScriptMaps[];
	[read, write] boolean SSIExecDisable;
	[read, write] boolean EnableReverseDns;
	[read, write] boolean CreateCGIWithNewConsole;
	[read, write] boolean ProcessNTCRIfLoggedOn;
	[read, write] boolean AllowPathInfoForScriptMappings;
	[read, write] string InProcessIsapiApps[];
	[read, write] sint32 LogType;
	[read, write] sint32 LogFilePeriod;
	[read, write] boolean LogFileLocaltimeRollover;
	[read, write] string LogPluginClsid;
	[read, write] string LogModuleList;
	[read, write] string LogFileDirectory;
	[read, write] sint32 LogFileTruncateSize;
	[read, write] sint32 LogExtFileFlags;
	[read, write] boolean LogExtFileDate;
	[read, write] boolean LogExtFileTime;
	[read, write] boolean LogExtFileClientIp;
	[read, write] boolean LogExtFileUserName;
	[read, write] boolean LogExtFileSiteName;
	[read, write] boolean LogExtFileComputerName;
	[read, write] boolean LogExtFileServerIp;
	[read, write] boolean LogExtFileMethod;
	[read, write] boolean LogExtFileUriStem;
	[read, write] boolean LogExtFileUriQuery;
	[read, write] boolean LogExtFileHttpStatus;
	[read, write] boolean LogExtFileWin32Status;
	[read, write] boolean LogExtFileBytesSent;
	[read, write] boolean LogExtFileBytesRecv;
	[read, write] boolean LogExtFileTimeTaken;
	[read, write] boolean LogExtFileServerPort;
	[read, write] boolean LogExtFileUserAgent;
	[read, write] boolean LogExtFileCookie;
	[read, write] boolean LogExtFileReferer;
	[read, write] boolean LogExtFileProtocolVersion;
	[read, write] boolean LogExtFileHost;
	[read, write] boolean LogExtFileHttpSubStatus;
	[read, write] string LogOdbcDataSource;
	[read, write] string LogOdbcTableName;
	[read, write] string LogOdbcUserName;
	[read, write] string LogOdbcPassword;
	[read, write] boolean SslUseDsMapper;
	[read, write] boolean SSLAlwaysNegoClientCert;
	[read, write] string WAMUserName;
	[read, write] string WAMUserPass;
	[read, write] sint32 ShutdownTimeLimit;
	[read, write] string SSLStoreName;
	[read, write] string AuthChangeURL;
	[read, write] string AuthExpiredURL;
	[read, write] string AuthNotifyPwdExpURL;
	[read, write] string AuthExpiredUnsecureURL;
	[read, write] string AuthNotifyPwdExpUnsecureURL;
	[read, write] string AdminServer;
	[read, write] string AppPoolId;
	[read, write] boolean DoStaticCompression;
	[read, write] boolean DoDynamicCompression;
	[read, write] boolean IIs5IsolationModeEnabled;
	[read, write] sint32 MaxGlobalBandwidth;
	[read, write] sint32 MinFileBytesPerSec;
	[read, write] sint32 HeaderWaitTimeout;
	[read, write] boolean LogInUTF8;
	[read, write] sint32 RapidFailProtectionInterval;
	[read, write] sint32 RapidFailProtectionMaxCrashes;
	[read, write] string AspPartitionID;
	[read, write] string AspSxsName;
	[read, write] sint32 AspAppServiceFlags;
	[read, write] boolean AspEnableTracker;
	[read, write] boolean AspEnableSxs;
	[read, write] boolean AspUsePartition;
	[read, write] sint32 AspKeepSessionIDSecure;
	[read, write] sint32 RevocationFreshnessTime;
	[read, write] sint32 RevocationURLRetrievalTimeout;
	[read, write] sint32 AspExecuteInMTA;
	[read, write] boolean CentralBinaryLoggingEnabled;
	[read, write] boolean AspRunOnEndAnonymously;
	[read, write] sint32 AspBufferingLimit;
	[read, write] boolean AzEnable;
	[read, write] string AzStoreName;
	[read, write] string AzScopeName;
	[read, write] sint32 AzImpersonationLevel;
	[read, write] boolean AspCalcLineNumber;
	[read, write] ApplicationDependency ApplicationDependencies[];
	[read, write] WebSvcExtRestrictionList WebSvcExtRestrictionList[];
	[read, write] sint32 AspMaxRequestEntityAllowed;
	[read, write] sint32 MaxRequestEntityAllowed;
	[read, write] sint32 DemandStartThreshold;
	[read, write] sint32 PassportRequireADMapping;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages inheritable metabase properties for Web sites and Web virtual directories.")]
class IIsWebService : Win32_Service
{
	[read, write(FALSE)] string AppRoot;
	[read, write(FALSE)] sint32 AppIsolated;
	[read, write(FALSE)] string AppPackageID;
	[read, write(FALSE)] string AppPackageName;
	[read, write(FALSE)] uint8 SSLCertHash[];
	[Implemented,bypass_getobject,Description("Lists WebSvcExtRestrictionList property.")] void ListExtensionFiles([OUT] string ExtensionFiles[]);
	[Implemented,bypass_getobject,Description("Modifies WebSvcExtRestrictionList property.")] void AddExtensionFile([IN] string ExtensionFile, [IN] boolean bEnable, [IN] string GroupID, [IN] boolean bCanDelete, [IN] string Description);
	[Implemented,bypass_getobject,Description("Modifies WebSvcExtRestrictionList property.")] void DeleteExtensionFileRecord([IN] string ExtensionFile);
	[Implemented,bypass_getobject,Description("Modifies WebSvcExtRestrictionList property.")] void EnableExtensionFile([IN] string ExtensionFile);
	[Implemented,bypass_getobject,Description("Modifies WebSvcExtRestrictionList property.")] void DisableExtensionFile([IN] string ExtensionFile);
	[Implemented,bypass_getobject,Description("Modifies WebSvcExtRestrictionList property.")] void EnableWebServiceExtension([IN] string Extension);
	[Implemented,bypass_getobject,Description("Modifies WebSvcExtRestrictionList property.")] void DisableWebServiceExtension([IN] string Extension);
	[Implemented,bypass_getobject,Description("Lists WebSvcExtRestrictionList property.")] void ListWebServiceExtensions([OUT] string Extensions[]);
	[Implemented,bypass_getobject,Description("Modifies ApplicationDependencies property.")] void EnableApplication([IN] string Application);
	[Implemented,bypass_getobject,Description("Modifies ApplicationDependencies property.")] void RemoveApplication([IN] string Application);
	[Implemented,bypass_getobject,Description("Lists ApplicationDependencies property.")] void ListApplications([OUT] string Applications[]);
	[Implemented,bypass_getobject,Description("Lists Applications that depends on the given GroupID.")] void QueryGroupIDStatus([IN] string GroupID, [OUT] string Applications[]);
	[Implemented,bypass_getobject,Description("Modifies ApplicationDependencies property.")] void AddDependency([IN] string Application, [IN] string GroupID);
	[Implemented,bypass_getobject,Description("Modifies ApplicationDependencies property.")] void RemoveDependency([IN] string Application, [IN] string GroupID);
	[Implemented,bypass_getobject,Description("Creates a new site.")] string CreateNewSite([IN] string ServerComment, [IN] ServerBinding ServerBindings[], [IN] string PathOfRootVirtualDir, [IN,OPTIONAL] sint32 ServerId);
	[Implemented,bypass_getobject,Description("Returns what mode -- Full Isolation (= 1) or Shared Isolation (= 0) -- the W3SVC is running in.")] sint32 GetCurrentMode();
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFiltersSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string FilterLoadOrder;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpRebuild : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages the metabase properties that control FTP sites and FTP virtual directories.")]
class IIsFtpServiceSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 MaxConnections;
	[read, write] string AnonymousUserName;
	[read, write] string AnonymousUserPass;
	[read, write] sint32 ServerListenBacklog;
	[read, write] boolean LogAnonymous;
	[read, write] boolean LogNonAnonymous;
	[read, write] string ServerComment;
	[read, write] ServerBinding ServerBindings[];
	[read, write] sint32 ConnectionTimeout;
	[read, write] sint32 ServerListenTimeout;
	[read, write] sint32 MaxEndpointConnections;
	[read, write] boolean ServerAutoStart;
	[read, write] string ExitMessage;
	[read, write] string GreetingMessage[];
	[read, write] string MaxClientsMessage;
	[read, write] boolean AnonymousOnly;
	[read, write] boolean MSDOSDirOutput;
	[read, write] sint32 ServerSize;
	[read, write] boolean DisableSocketPooling;
	[read, write] boolean AnonymousPasswordSync;
	[read, write] boolean AllowAnonymous;
	[read, write] string DefaultLogonDomain;
	[read, write] uint8 AdminACLBin[];
	[read, write] boolean DontLog;
	[read, write] sint32 DirectoryLevelsToScan;
	[read, write] string Realm;
	[read, write] sint32 LogType;
	[read, write] sint32 LogFilePeriod;
	[read, write] boolean LogFileLocaltimeRollover;
	[read, write] string LogPluginClsid;
	[read, write] string LogModuleList;
	[read, write] string LogFileDirectory;
	[read, write] sint32 LogFileTruncateSize;
	[read, write] sint32 LogExtFileFlags;
	[read, write] boolean LogExtFileDate;
	[read, write] boolean LogExtFileTime;
	[read, write] boolean LogExtFileClientIp;
	[read, write] boolean LogExtFileUserName;
	[read, write] boolean LogExtFileSiteName;
	[read, write] boolean LogExtFileComputerName;
	[read, write] boolean LogExtFileServerIp;
	[read, write] boolean LogExtFileMethod;
	[read, write] boolean LogExtFileUriStem;
	[read, write] boolean LogExtFileUriQuery;
	[read, write] boolean LogExtFileHttpStatus;
	[read, write] boolean LogExtFileWin32Status;
	[read, write] boolean LogExtFileBytesSent;
	[read, write] boolean LogExtFileBytesRecv;
	[read, write] boolean LogExtFileTimeTaken;
	[read, write] boolean LogExtFileServerPort;
	[read, write] boolean LogExtFileUserAgent;
	[read, write] boolean LogExtFileCookie;
	[read, write] boolean LogExtFileReferer;
	[read, write] boolean LogExtFileProtocolVersion;
	[read, write] boolean LogExtFileHost;
	[read, write] boolean LogExtFileHttpSubStatus;
	[read, write] string LogOdbcDataSource;
	[read, write] string LogOdbcTableName;
	[read, write] string LogOdbcUserName;
	[read, write] string LogOdbcPassword;
	[read, write] boolean FtpDirBrowseShowLongDate;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 DownlevelAdminInstance;
	[read, write] string BannerMessage[];
	[read, write] sint32 UserIsolationMode;
	[read, write] boolean FtpLogInUtf8;
	[read, write] string ADConnectionsUserName;
	[read, write] string ADConnectionsPassword;
	[read, write] sint32 ServerCommand;
	[read, write] string PassivePortRange;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages metabase properties that apply to one or all virtual directories for a Web site.")]
class IIsWebVirtualDirSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string AnonymousUserName;
	[read, write] string AnonymousUserPass;
	[read, write] boolean AnonymousPasswordSync;
	[read, write] boolean UseDigestSSP;
	[read, write] string AppFriendlyName;
	[read, write] sint32 AppOopRecoverLimit;
	[read, write] boolean CacheISAPI;
	[read, write] boolean AppAllowDebugging;
	[read, write] boolean AppAllowClientDebug;
	[read, write] string DefaultLogonDomain;
	[read, write] sint32 LogonMethod;
	[read, write] sint32 CGITimeout;
	[read, write] string Realm;
	[read, write] boolean DontLog;
	[read, write] string HttpExpires;
	[read, write] string HttpPics[];
	[read, write] HttpCustomHeader HttpCustomHeaders[];
	[read, write] HttpError HttpErrors[];
	[read, write] boolean EnableDocFooter;
	[read, write] string DefaultDocFooter;
	[read, write] string HttpRedirect;
	[read, write] string DefaultDoc;
	[read, write] boolean ContentIndexed;
	[read, write] sint32 CacheControlMaxAge;
	[read, write] boolean CacheControlNoCache;
	[read, write] string CacheControlCustom;
	[read, write] boolean CreateProcessAsUser;
	[read, write] sint32 PoolIdcTimeout;
	[read, write] string RedirectHeaders[];
	[read, write] sint32 UploadReadAheadSize;
	[read, write] boolean FrontPageWeb;
	[read, write] string Path;
	[read, write] string UNCUserName;
	[read, write] string UNCPassword;
	[read, write] boolean DisableStaticFileCache;
	[read, write] string AppWamClsid;
	[read, write] sint32 AuthPersistence;
	[read, write] boolean AuthPersistSingleRequest;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] ScriptMap ScriptMaps[];
	[read, write] boolean SSIExecDisable;
	[read, write] boolean EnableReverseDns;
	[read, write] boolean CreateCGIWithNewConsole;
	[read, write] boolean AspBufferingOn;
	[read, write] boolean AspLogErrorRequests;
	[read, write] boolean AspScriptErrorSentToBrowser;
	[read, write] string AspScriptErrorMessage;
	[read, write] boolean AspAllowOutOfProcComponents;
	[read, write] sint32 AspScriptFileCacheSize;
	[read, write] string AspDiskTemplateCacheDirectory;
	[read, write] sint32 AspMaxDiskTemplateCacheFiles;
	[read, write] sint32 AspScriptEngineCacheMax;
	[read, write] sint32 AspScriptTimeout;
	[read, write] sint32 AspSessionTimeout;
	[read, write] boolean AspEnableParentPaths;
	[read, write] boolean AspAllowSessionState;
	[read, write] string AspScriptLanguage;
	[read, write] boolean AspExceptionCatchEnable;
	[read, write] sint32 AspCodepage;
	[read, write] sint32 AspLCID;
	[read, write] MimeMap MimeMap[];
	[read, write] sint32 AspQueueTimeout;
	[read, write] boolean AspEnableAspHtmlFallback;
	[read, write] boolean AspEnableChunkedEncoding;
	[read, write] boolean AspEnableTypelibCache;
	[read, write] boolean AspErrorsToNTLog;
	[read, write] sint32 AspProcessorThreadMax;
	[read, write] boolean AspTrackThreadingModel;
	[read, write] sint32 AspRequestQueueMax;
	[read, write] boolean AspEnableApplicationRestart;
	[read, write] sint32 AspQueueConnectionTestTime;
	[read, write] sint32 AspSessionMax;
	[read, write] sint32 ShutdownTimeLimit;
	[read, write] sint32 DirBrowseFlags;
	[read, write] boolean DirBrowseShowDate;
	[read, write] boolean DirBrowseShowTime;
	[read, write] boolean DirBrowseShowSize;
	[read, write] boolean DirBrowseShowExtension;
	[read, write] boolean DirBrowseShowLongDate;
	[read, write] boolean EnableDefaultDoc;
	[read, write] boolean EnableDirBrowsing;
	[read, write] sint32 AuthFlags;
	[read, write] boolean AuthAnonymous;
	[read, write] boolean AuthBasic;
	[read, write] boolean AuthNTLM;
	[read, write] boolean AuthMD5;
	[read, write] boolean AuthPassport;
	[read, write] sint32 Win32Error;
	[read, write] string AppPoolId;
	[read, write] boolean DoStaticCompression;
	[read, write] boolean DoDynamicCompression;
	[read, write] string AspPartitionID;
	[read, write] string AspSxsName;
	[read, write] sint32 AspAppServiceFlags;
	[read, write] boolean AspEnableTracker;
	[read, write] boolean AspEnableSxs;
	[read, write] boolean AspUsePartition;
	[read, write] sint32 AspKeepSessionIDSecure;
	[read, write] sint32 AspExecuteInMTA;
	[read, write] boolean AspRunOnEndAnonymously;
	[read, write] sint32 AspBufferingLimit;
	[read, write] boolean AzEnable;
	[read, write] string AzStoreName;
	[read, write] string AzScopeName;
	[read, write] sint32 AzImpersonationLevel;
	[read, write] boolean AspCalcLineNumber;
	[read, write] uint8 AdminACLBin[];
	[read, write] sint32 AspMaxRequestEntityAllowed;
	[read, write] sint32 MaxRequestEntityAllowed;
	[read, write] sint32 PassportRequireADMapping;
	[read, write] string NTAuthenticationProviders;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Service : Win32_Service
{
	[read, write(FALSE)] sint32 Pop3ServiceVersion;
	[read, write(FALSE)] string Pop3RoutingSources[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsLogModules : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpFeedsSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string FeedPeerTempDirectory;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages metabase properties that apply to one or all virtual directories for a Web site.")]
class IIsWebVirtualDir : IIsDirectory
{
	[read, write(FALSE)] string AppRoot;
	[read, write(FALSE)] sint32 AppIsolated;
	[read, write(FALSE)] string AppPackageName;
	[read, write(FALSE)] string AppPackageID;
	[Implemented,bypass_getobject,Description("Creates an application at the specified metabase key(parameter is a Boolean).")] void AppCreate([IN] boolean InProcFlag);
	[Implemented,bypass_getobject,Description("Creates an application at the specified metabase key(parameter is a Long).")] void AppCreate2([IN] sint32 AppMode);
	[Implemented,bypass_getobject,Description("Creates an application at the specified metabase key.")] void AppCreate3([IN] sint32 AppMode, [IN] string AppPoolName, [IN] boolean bCreate);
	[Implemented,bypass_getobject,Description("Deletes an application definition at the specified key (and its subkeys).")] void AppDelete([IN] boolean Recursive);
	[Implemented,bypass_getobject,Description("Unloads an application at the specified key (and its subkeys).")] void AppUnLoad([IN] boolean Recursive);
	[Implemented,bypass_getobject] void AppDisable([IN] boolean Recursive);
	[Implemented,bypass_getobject] void AppEnable([IN] boolean Recursive);
	[Implemented,bypass_getobject] uint32 AppGetStatus();
	[Implemented,bypass_getobject,Description("Restarts the ASP application that invoked it.")] void AspAppRestart();
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Sessions : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3SessionsSetting : IIsSetting
{
	[Key] string Name;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Is used to set metabase properties that apply to one or more Web directories for a Web server.")]
class IIsWebDirectory : IIsDirectory
{
	[read, write(FALSE)] string AppRoot;
	[read, write(FALSE)] sint32 AppIsolated;
	[read, write(FALSE)] string AppPackageName;
	[read, write(FALSE)] string AppPackageID;
	[Implemented,bypass_getobject,Description("Creates an application at the specified metabase key(parameter is a Boolean).")] void AppCreate([IN] boolean InProcFlag);
	[Implemented,bypass_getobject,Description("Creates an application at the specified metabase key(parameter is a Long).")] void AppCreate2([IN] sint32 AppMode);
	[Implemented,bypass_getobject,Description("Creates an application at the specified metabase key.")] void AppCreate3([IN] sint32 AppMode, [IN] string AppPoolName, [IN] boolean bCreate);
	[Implemented,bypass_getobject,Description("Deletes an application definition at the specified key (and its subkeys).")] void AppDelete([IN] boolean Recursive);
	[Implemented,bypass_getobject,Description("Unloads an application at the specified key (and its subkeys).")] void AppUnLoad([IN] boolean Recursive);
	[Implemented,bypass_getobject] void AppDisable([IN] boolean Recursive);
	[Implemented,bypass_getobject] void AppEnable([IN] boolean Recursive);
	[Implemented,bypass_getobject] uint32 AppGetStatus();
	[Implemented,bypass_getobject,Description("Restarts the ASP application that invoked it.")] void AspAppRestart();
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpVirtualDirSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string Path;
	[read, write] string UNCUserName;
	[read, write] string UNCPassword;
	[read, write] sint32 Win32Error;
	[read, write] boolean DontLog;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpFeeds : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsObject : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3InfoSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string LogModuleList;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Is used to set metabase properties that apply to one or more Web directories for a Web server.")]
class IIsWebDirectorySetting : IIsSetting
{
	[Key] string Name;
	[read, write] string AnonymousUserName;
	[read, write] string AnonymousUserPass;
	[read, write] boolean AnonymousPasswordSync;
	[read, write] boolean UseDigestSSP;
	[read, write] string AppFriendlyName;
	[read, write] sint32 AppOopRecoverLimit;
	[read, write] boolean CacheISAPI;
	[read, write] boolean AppAllowDebugging;
	[read, write] boolean AppAllowClientDebug;
	[read, write] string DefaultLogonDomain;
	[read, write] sint32 LogonMethod;
	[read, write] sint32 CGITimeout;
	[read, write] string Realm;
	[read, write] boolean DontLog;
	[read, write] string HttpExpires;
	[read, write] string HttpPics[];
	[read, write] HttpCustomHeader HttpCustomHeaders[];
	[read, write] HttpError HttpErrors[];
	[read, write] boolean EnableDocFooter;
	[read, write] string DefaultDocFooter;
	[read, write] string HttpRedirect;
	[read, write] string DefaultDoc;
	[read, write] boolean ContentIndexed;
	[read, write] sint32 CacheControlMaxAge;
	[read, write] boolean CacheControlNoCache;
	[read, write] string CacheControlCustom;
	[read, write] boolean CreateProcessAsUser;
	[read, write] sint32 PoolIdcTimeout;
	[read, write] string RedirectHeaders[];
	[read, write] sint32 UploadReadAheadSize;
	[read, write] boolean FrontPageWeb;
	[read, write] string AppWamClsid;
	[read, write] sint32 AuthPersistence;
	[read, write] boolean AuthPersistSingleRequest;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] boolean DisableStaticFileCache;
	[read, write] ScriptMap ScriptMaps[];
	[read, write] boolean SSIExecDisable;
	[read, write] boolean EnableReverseDns;
	[read, write] boolean CreateCGIWithNewConsole;
	[read, write] boolean AspBufferingOn;
	[read, write] boolean AspLogErrorRequests;
	[read, write] boolean AspScriptErrorSentToBrowser;
	[read, write] string AspScriptErrorMessage;
	[read, write] boolean AspAllowOutOfProcComponents;
	[read, write] sint32 AspScriptFileCacheSize;
	[read, write] string AspDiskTemplateCacheDirectory;
	[read, write] sint32 AspMaxDiskTemplateCacheFiles;
	[read, write] sint32 AspScriptEngineCacheMax;
	[read, write] sint32 AspScriptTimeout;
	[read, write] sint32 AspSessionTimeout;
	[read, write] boolean AspEnableParentPaths;
	[read, write] boolean AspAllowSessionState;
	[read, write] string AspScriptLanguage;
	[read, write] boolean AspExceptionCatchEnable;
	[read, write] sint32 AspCodepage;
	[read, write] sint32 AspLCID;
	[read, write] MimeMap MimeMap[];
	[read, write] sint32 AspQueueTimeout;
	[read, write] boolean AspEnableAspHtmlFallback;
	[read, write] boolean AspEnableChunkedEncoding;
	[read, write] boolean AspEnableTypelibCache;
	[read, write] boolean AspErrorsToNTLog;
	[read, write] sint32 AspProcessorThreadMax;
	[read, write] boolean AspTrackThreadingModel;
	[read, write] sint32 AspRequestQueueMax;
	[read, write] boolean AspEnableApplicationRestart;
	[read, write] sint32 AspQueueConnectionTestTime;
	[read, write] sint32 AspSessionMax;
	[read, write] sint32 ShutdownTimeLimit;
	[read, write] sint32 DirBrowseFlags;
	[read, write] boolean DirBrowseShowDate;
	[read, write] boolean DirBrowseShowTime;
	[read, write] boolean DirBrowseShowSize;
	[read, write] boolean DirBrowseShowExtension;
	[read, write] boolean DirBrowseShowLongDate;
	[read, write] boolean EnableDefaultDoc;
	[read, write] boolean EnableDirBrowsing;
	[read, write] sint32 AuthFlags;
	[read, write] boolean AuthAnonymous;
	[read, write] boolean AuthBasic;
	[read, write] boolean AuthNTLM;
	[read, write] boolean AuthMD5;
	[read, write] boolean AuthPassport;
	[read, write] string AppPoolId;
	[read, write] boolean DoStaticCompression;
	[read, write] boolean DoDynamicCompression;
	[read, write] string AspPartitionID;
	[read, write] string AspSxsName;
	[read, write] sint32 AspAppServiceFlags;
	[read, write] boolean AspEnableTracker;
	[read, write] boolean AspEnableSxs;
	[read, write] boolean AspUsePartition;
	[read, write] sint32 AspKeepSessionIDSecure;
	[read, write] sint32 AspExecuteInMTA;
	[read, write] boolean AspRunOnEndAnonymously;
	[read, write] sint32 AspBufferingLimit;
	[read, write] boolean AzEnable;
	[read, write] string AzStoreName;
	[read, write] string AzScopeName;
	[read, write] sint32 AzImpersonationLevel;
	[read, write] boolean AspCalcLineNumber;
	[read, write] uint8 AdminACLBin[];
	[read, write] sint32 AspMaxRequestEntityAllowed;
	[read, write] sint32 MaxRequestEntityAllowed;
	[read, write] sint32 PassportRequireADMapping;
	[read, write] string NTAuthenticationProviders;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpSessionsSetting : IIsSetting
{
	[Key] string Name;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsApplicationPoolSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 PeriodicRestartTime;
	[read, write] sint32 PeriodicRestartRequests;
	[read, write] sint32 MaxProcesses;
	[read, write] boolean PingingEnabled;
	[read, write] sint32 IdleTimeout;
	[read, write] boolean RapidFailProtection;
	[read, write] boolean SMPAffinitized;
	[read, write] sint32 SMPProcessorAffinityMask;
	[read, write] sint32 StartupTimeLimit;
	[read, write] sint32 ShutdownTimeLimit;
	[read, write] sint32 PingInterval;
	[read, write] sint32 PingResponseTime;
	[read, write] boolean DisallowOverlappingRotation;
	[read, write] boolean DisallowRotationOnConfigChange;
	[read, write] boolean OrphanWorkerProcess;
	[read, write] sint32 AppPoolQueueLength;
	[read, write] sint32 CPUAction;
	[read, write] sint32 CPULimit;
	[read, write] sint32 CPUResetInterval;
	[read, write] sint32 AppPoolIdentityType;
	[read, write] string WAMUserName;
	[read, write] string WAMUserPass;
	[read, write] sint32 LogonMethod;
	[read, write] sint32 PeriodicRestartMemory;
	[read, write] sint32 PeriodicRestartPrivateMemory;
	[read, write] sint32 AppPoolCommand;
	[read, write] sint32 AppPoolState;
	[read, write] boolean AppPoolAutoStart;
	[read, write] string PeriodicRestartSchedule[];
	[read, write] sint32 RapidFailProtectionInterval;
	[read, write] sint32 RapidFailProtectionMaxCrashes;
	[read, write] sint32 Win32Error;
	[read, write] string OrphanActionExe;
	[read, write] string OrphanActionParams;
	[read, write] sint32 LoadBalancerCapabilities;
	[read, write] string AutoShutdownAppPoolExe;
	[read, write] string AutoShutdownAppPoolParams;
	[read, write] sint32 LogEventOnRecycle;
	[read, write] boolean AppPoolRecycleTime;
	[read, write] boolean AppPoolRecycleRequests;
	[read, write] boolean AppPoolRecycleSchedule;
	[read, write] boolean AppPoolRecycleMemory;
	[read, write] boolean AppPoolRecycleIsapiUnhealthy;
	[read, write] boolean AppPoolRecycleOnDemand;
	[read, write] boolean AppPoolRecycleConfigChange;
	[read, write] boolean AppPoolRecyclePrivateMemory;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages global metabase properties that determine how IIS operates")]
class IIsComputer : CIM_ApplicationSystem
{
	[Key] string Name;
	[Implemented,bypass_getobject,Description("Explicitly saves the metabase data to disk.")] void SaveData();
	[Implemented,bypass_getobject,Description("Saves the metabase to long-term storage.")] void BackupWithPassword([IN] string BackupLocation, [IN] sint32 BackupVersion, [IN] sint32 BackupFlags, [IN] string Password);
	[Implemented,bypass_getobject,Description("Deletes a metabase backup from long-term storage.")] void DeleteBackup([IN] string BackupLocation, [IN] sint32 BackupVersion);
	[Implemented,bypass_getobject,Description("Enumerates metabase backups in long-term storage.")] void EnumBackups([IN,OUT] string BackupLocation, [IN] sint32 IndexIn, [OUT] sint32 BackupVersionOut, [OUT] datetime BackupDateTimeOut);
	[Implemented,bypass_getobject,Description("Restores a metabase backup from long-term storage.")] void RestoreWithPassword([IN] string BackupLocation, [IN] sint32 BackupVersion, [IN] sint32 BackupFlags, [IN] string Password);
	[Implemented,bypass_getobject] void Export([IN] string Passwd, [IN] string FileName, [IN] string SourcePath, [IN] sint32 MDFlags);
	[Implemented,bypass_getobject] void Import([IN] string Passwd, [IN] string FileName, [IN] string SourcePath, [IN] string DestPath, [IN] sint32 MDFlags);
	[Implemented,bypass_getobject] void RestoreHistory([IN] string MDHistoryLocation, [IN] sint32 MajorVersion, [IN] sint32 MinorVersion, [IN] sint32 MDFlags);
	[Implemented,bypass_getobject] void EnumHistory([IN,OUT] string MDHistoryLocation, [OUT] sint32 MajorVersion, [OUT] sint32 MinorVersion, [OUT] datetime HistoryTime, [IN] sint32 EnumIndex);
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCompressionScheme : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCustomLogModuleSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string LogCustomPropertyName;
	[read, write] string LogCustomPropertyHeader;
	[read, write] sint32 LogCustomPropertyID;
	[read, write] sint32 LogCustomPropertyMask;
	[read, write] sint32 LogCustomPropertyDataType;
	[read, write] string LogCustomPropertyServicesString[];
	[read, write] sint32 LogCustomPropertyNodeID;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFilter : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages metabase properties that apply to a specific FTP server and to set inheritable metabase properties for FTP virtual directories.")]
class IIsFtpServerSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 MaxConnections;
	[read, write] string AnonymousUserName;
	[read, write] string AnonymousUserPass;
	[read, write] sint32 ServerListenBacklog;
	[read, write] boolean DisableSocketPooling;
	[read, write] boolean LogAnonymous;
	[read, write] boolean LogNonAnonymous;
	[read, write] string ServerComment;
	[read, write] ServerBinding ServerBindings[];
	[read, write] sint32 ConnectionTimeout;
	[read, write] sint32 ServerListenTimeout;
	[read, write] sint32 MaxEndpointConnections;
	[read, write] boolean ServerAutoStart;
	[read, write] string ExitMessage;
	[read, write] string GreetingMessage[];
	[read, write] string MaxClientsMessage;
	[read, write] boolean AnonymousOnly;
	[read, write] boolean MSDOSDirOutput;
	[read, write] sint32 ServerSize;
	[read, write] boolean AnonymousPasswordSync;
	[read, write] boolean AllowAnonymous;
	[read, write] string DefaultLogonDomain;
	[read, write] uint8 AdminACLBin[];
	[read, write] boolean DontLog;
	[read, write] string Realm;
	[read, write] boolean ClusterEnabled;
	[read, write] sint32 LogType;
	[read, write] string LogPluginClsid;
	[read, write] string LogFileDirectory;
	[read, write] sint32 LogFilePeriod;
	[read, write] boolean LogFileLocaltimeRollover;
	[read, write] sint32 LogFileTruncateSize;
	[read, write] sint32 LogExtFileFlags;
	[read, write] boolean LogExtFileDate;
	[read, write] boolean LogExtFileTime;
	[read, write] boolean LogExtFileClientIp;
	[read, write] boolean LogExtFileUserName;
	[read, write] boolean LogExtFileSiteName;
	[read, write] boolean LogExtFileComputerName;
	[read, write] boolean LogExtFileServerIp;
	[read, write] boolean LogExtFileMethod;
	[read, write] boolean LogExtFileUriStem;
	[read, write] boolean LogExtFileUriQuery;
	[read, write] boolean LogExtFileHttpStatus;
	[read, write] boolean LogExtFileWin32Status;
	[read, write] boolean LogExtFileBytesSent;
	[read, write] boolean LogExtFileBytesRecv;
	[read, write] boolean LogExtFileTimeTaken;
	[read, write] boolean LogExtFileServerPort;
	[read, write] boolean LogExtFileUserAgent;
	[read, write] boolean LogExtFileCookie;
	[read, write] boolean LogExtFileReferer;
	[read, write] boolean LogExtFileProtocolVersion;
	[read, write] boolean LogExtFileHost;
	[read, write] boolean LogExtFileHttpSubStatus;
	[read, write] string LogOdbcDataSource;
	[read, write] string LogOdbcTableName;
	[read, write] string LogOdbcUserName;
	[read, write] string LogOdbcPassword;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 Win32Error;
	[read, write] boolean FtpDirBrowseShowLongDate;
	[read, write] string BannerMessage[];
	[read, write] sint32 UserIsolationMode;
	[read, write] boolean FtpLogInUtf8;
	[read, write] string ADConnectionsUserName;
	[read, write] string ADConnectionsPassword;
	[read, write] sint32 ServerCommand;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapVirtualDir : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsApplicationPools : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapService : Win32_Service
{
	[read, write(FALSE)] sint32 ImapServiceVersion;
	[read, write(FALSE)] string ImapRoutingSources[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapRoutingSource : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3RoutingSource : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpServer : CIM_LogicalElement
{
	[Key] string Name;
	[read, write(FALSE)] sint32 ServerState;
	[read, write(FALSE)] sint32 NntpServiceVersion;
	[read, write(FALSE)] uint8 SSLCertHash[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpServiceSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 MaxBandwidth;
	[read, write] sint32 MaxConnections;
	[read, write] string AnonymousUserName;
	[read, write] string AnonymousUserPass;
	[read, write] boolean AllowAnonymous;
	[read, write] sint32 DirectoryLevelsToScan;
	[read, write] string ServerComment;
	[read, write] sint32 ConnectionTimeout;
	[read, write] sint32 ServerListenTimeout;
	[read, write] sint32 MaxEndpointConnections;
	[read, write] boolean ServerAutoStart;
	[read, write] boolean AnonymousPasswordSync;
	[read, write] uint8 AdminACLBin[];
	[read, write] boolean DontLog;
	[read, write] boolean ContentIndexed;
	[read, write] sint32 AuthFlags;
	[read, write] boolean AuthAnonymous;
	[read, write] boolean AuthBasic;
	[read, write] boolean AuthNTLM;
	[read, write] boolean AuthMD5;
	[read, write] boolean AuthPassport;
	[read, write] sint32 ServerListenBacklog;
	[read, write] boolean HonorClientMsgIds;
	[read, write] string SmtpServer;
	[read, write] string AdminEmail;
	[read, write] string AdminName;
	[read, write] boolean AllowClientPosts;
	[read, write] boolean AllowFeedPosts;
	[read, write] boolean AllowControlMsgs;
	[read, write] string DefaultModeratorDomain;
	[read, write] sint32 NntpCommandLogMask;
	[read, write] boolean DisableNewNews;
	[read, write] sint32 ClientPostHardLimit;
	[read, write] sint32 ClientPostSoftLimit;
	[read, write] sint32 FeedPostHardLimit;
	[read, write] sint32 FeedPostSoftLimit;
	[read, write] sint32 LogType;
	[read, write] sint32 LogFilePeriod;
	[read, write] string LogPluginClsid;
	[read, write] string LogModuleList;
	[read, write] string LogFileDirectory;
	[read, write] sint32 LogFileTruncateSize;
	[read, write] sint32 LogExtFileFlags;
	[read, write] boolean LogExtFileDate;
	[read, write] boolean LogExtFileTime;
	[read, write] boolean LogExtFileClientIp;
	[read, write] boolean LogExtFileUserName;
	[read, write] boolean LogExtFileSiteName;
	[read, write] boolean LogExtFileComputerName;
	[read, write] boolean LogExtFileServerIp;
	[read, write] boolean LogExtFileMethod;
	[read, write] boolean LogExtFileUriStem;
	[read, write] boolean LogExtFileUriQuery;
	[read, write] boolean LogExtFileHttpStatus;
	[read, write] boolean LogExtFileWin32Status;
	[read, write] boolean LogExtFileBytesSent;
	[read, write] boolean LogExtFileBytesRecv;
	[read, write] boolean LogExtFileTimeTaken;
	[read, write] boolean LogExtFileServerPort;
	[read, write] boolean LogExtFileUserAgent;
	[read, write] boolean LogExtFileCookie;
	[read, write] boolean LogExtFileReferer;
	[read, write] boolean LogExtFileProtocolVersion;
	[read, write] boolean LogExtFileHost;
	[read, write] boolean LogExtFileHttpSubStatus;
	[read, write] string LogOdbcDataSource;
	[read, write] string LogOdbcTableName;
	[read, write] string LogOdbcUserName;
	[read, write] string LogOdbcPassword;
	[read, write] sint32 FeedReportPeriod;
	[read, write] sint32 MaxSearchResults;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 ShutdownLatency;
	[read, write] sint32 ArticleTimeLimit;
	[read, write] sint32 HistoryExpiration;
	[read, write] sint32 NewsCrawlerTime;
	[read, write] string GroupVarListFile;
	[read, write] string NTAuthenticationProviders;
	[read, write] boolean AzEnable;
	[read, write] string AzStoreName;
	[read, write] string AzScopeName;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3ServiceSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 MaxBandwidth;
	[read, write] sint32 MaxConnections;
	[read, write] string ServerComment;
	[read, write] sint32 ConnectionTimeout;
	[read, write] sint32 ServerListenTimeout;
	[read, write] sint32 MaxEndpointConnections;
	[read, write] boolean ServerAutoStart;
	[read, write] uint8 AdminACLBin[];
	[read, write] boolean DontLog;
	[read, write] sint32 AuthFlags;
	[read, write] boolean AuthAnonymous;
	[read, write] boolean AuthBasic;
	[read, write] boolean AuthNTLM;
	[read, write] boolean AuthMD5;
	[read, write] boolean AuthPassport;
	[read, write] sint32 ServerListenBacklog;
	[read, write] string DefaultLogonDomain;
	[read, write] string NTAuthenticationProviders;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] sint32 LogType;
	[read, write] sint32 LogFilePeriod;
	[read, write] string LogPluginClsid;
	[read, write] string LogModuleList;
	[read, write] string LogFileDirectory;
	[read, write] sint32 LogFileTruncateSize;
	[read, write] sint32 LogExtFileFlags;
	[read, write] boolean LogExtFileDate;
	[read, write] boolean LogExtFileTime;
	[read, write] boolean LogExtFileClientIp;
	[read, write] boolean LogExtFileUserName;
	[read, write] boolean LogExtFileSiteName;
	[read, write] boolean LogExtFileComputerName;
	[read, write] boolean LogExtFileServerIp;
	[read, write] boolean LogExtFileMethod;
	[read, write] boolean LogExtFileUriStem;
	[read, write] boolean LogExtFileUriQuery;
	[read, write] boolean LogExtFileHttpStatus;
	[read, write] boolean LogExtFileWin32Status;
	[read, write] boolean LogExtFileBytesSent;
	[read, write] boolean LogExtFileBytesRecv;
	[read, write] boolean LogExtFileTimeTaken;
	[read, write] boolean LogExtFileServerPort;
	[read, write] boolean LogExtFileUserAgent;
	[read, write] boolean LogExtFileCookie;
	[read, write] boolean LogExtFileReferer;
	[read, write] boolean LogExtFileProtocolVersion;
	[read, write] boolean LogExtFileHost;
	[read, write] boolean LogExtFileHttpSubStatus;
	[read, write] string LogOdbcDataSource;
	[read, write] string LogOdbcTableName;
	[read, write] string LogOdbcUserName;
	[read, write] string LogOdbcPassword;
	[read, write] sint32 Pop3ExpireMail;
	[read, write] sint32 Pop3ExpireDelay;
	[read, write] sint32 Pop3ExpireStart;
	[read, write] sint32 Pop3MailExpirationTime;
	[read, write] string Pop3ClearTextProvider;
	[read, write] string Pop3DefaultDomain;
	[read, write] string Pop3RoutingDll;
	[read, write] boolean AzEnable;
	[read, write] string AzStoreName;
	[read, write] string AzScopeName;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpVirtualDirSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string Path;
	[read, write] string UNCUserName;
	[read, write] string UNCPassword;
	[read, write] sint32 Win32Error;
	[read, write] boolean ContentIndexed;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] boolean VrDoExpire;
	[read, write] sint32 VrUseAccount;
	[read, write] boolean VrOwnModerator;
	[read, write] string VrDriverProgid;
	[read, write] string FsPropertyPath;
	[read, write] string ExMdbGuid;
	[read, write] boolean DontLog;
	[read, write] string VrDriverClsid;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCompressionSchemesSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string HcCompressionDirectory;
	[read, write] string HcCacheControlHeader;
	[read, write] string HcExpiresHeader;
	[read, write] boolean HcDoDynamicCompression;
	[read, write] boolean HcDoStaticCompression;
	[read, write] boolean HcDoOnDemandCompression;
	[read, write] boolean HcDoDiskSpaceLimiting;
	[read, write] boolean HcNoCompressionForHttp10;
	[read, write] boolean HcNoCompressionForProxies;
	[read, write] boolean HcNoCompressionForRange;
	[read, write] boolean HcSendCacheHeaders;
	[read, write] sint32 HcMaxDiskSpaceUsage;
	[read, write] sint32 HcIoBufferSize;
	[read, write] sint32 HcCompressionBufferSize;
	[read, write] sint32 HcMaxQueueLength;
	[read, write] sint32 HcFilesDeletedPerDiskFree;
	[read, write] sint32 HcMinFileSizeForComp;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCompressionSchemes : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsMimeMapSetting : IIsSetting
{
	[Key] string Name;
	[read, write] MimeMap MimeMap[];
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpInfo : CIM_LogicalElement
{
	[Key] string Name;
	[read, write(FALSE)] sint32 MajorIIsVersionNumber;
	[read, write(FALSE)] sint32 MinorIIsVersionNumber;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpInfo : CIM_LogicalElement
{
	[Key] string Name;
	[read, write(FALSE)] sint32 MajorIIsVersionNumber;
	[read, write(FALSE)] sint32 MinorIIsVersionNumber;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebInfo : CIM_LogicalElement
{
	[Key] string Name;
	[read, write(FALSE)] sint32 MajorIIsVersionNumber;
	[read, write(FALSE)] sint32 MinorIIsVersionNumber;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Info : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpService : Win32_Service
{
	[read, write(FALSE)] sint32 NntpServiceVersion;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapInfo : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapSessionsSetting : IIsSetting
{
	[Key] string Name;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFilters : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpServer : CIM_LogicalElement
{
	[Key] string Name;
	[read, write(FALSE)] sint32 ServerState;
	[read, write(FALSE)] sint32 SmtpServiceVersion;
	[read, write(FALSE)] string RoutingSources[];
	[read, write(FALSE)] string DomainRouting[];
	[read, write(FALSE)] string PostmasterName;
	[read, write(FALSE)] string PostmasterEmail;
	[read, write(FALSE)] string LocalDomains[];
	[read, write(FALSE)] uint8 SSLCertHash[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsMimeMap : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsApplicationPoolsSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 PeriodicRestartTime;
	[read, write] sint32 PeriodicRestartRequests;
	[read, write] sint32 MaxProcesses;
	[read, write] boolean PingingEnabled;
	[read, write] sint32 IdleTimeout;
	[read, write] boolean RapidFailProtection;
	[read, write] boolean SMPAffinitized;
	[read, write] sint32 SMPProcessorAffinityMask;
	[read, write] sint32 StartupTimeLimit;
	[read, write] sint32 ShutdownTimeLimit;
	[read, write] sint32 PingInterval;
	[read, write] sint32 PingResponseTime;
	[read, write] boolean DisallowOverlappingRotation;
	[read, write] boolean DisallowRotationOnConfigChange;
	[read, write] boolean OrphanWorkerProcess;
	[read, write] sint32 AppPoolQueueLength;
	[read, write] sint32 CPUAction;
	[read, write] sint32 CPULimit;
	[read, write] sint32 CPUResetInterval;
	[read, write] sint32 AppPoolIdentityType;
	[read, write] string WAMUserName;
	[read, write] string WAMUserPass;
	[read, write] sint32 LogonMethod;
	[read, write] sint32 PeriodicRestartMemory;
	[read, write] sint32 PeriodicRestartPrivateMemory;
	[read, write] boolean AppPoolAutoStart;
	[read, write] string PeriodicRestartSchedule[];
	[read, write] sint32 RapidFailProtectionInterval;
	[read, write] sint32 RapidFailProtectionMaxCrashes;
	[read, write] sint32 Win32Error;
	[read, write] string OrphanActionExe;
	[read, write] string OrphanActionParams;
	[read, write] sint32 LoadBalancerCapabilities;
	[read, write] string AutoShutdownAppPoolExe;
	[read, write] string AutoShutdownAppPoolParams;
	[read, write] sint32 LogEventOnRecycle;
	[read, write] boolean AppPoolRecycleTime;
	[read, write] boolean AppPoolRecycleRequests;
	[read, write] boolean AppPoolRecycleSchedule;
	[read, write] boolean AppPoolRecycleMemory;
	[read, write] boolean AppPoolRecycleIsapiUnhealthy;
	[read, write] boolean AppPoolRecycleOnDemand;
	[read, write] boolean AppPoolRecycleConfigChange;
	[read, write] boolean AppPoolRecyclePrivateMemory;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCompressionSchemeSetting : IIsSetting
{
	[Key] string Name;
	[read, write] boolean HcDoDynamicCompression;
	[read, write] boolean HcDoStaticCompression;
	[read, write] boolean HcDoOnDemandCompression;
	[read, write] string HcCompressionDll;
	[read, write] string HcFileExtensions[];
	[read, write] string HcScriptFileExtensions[];
	[read, write] sint32 HcPriority;
	[read, write] sint32 HcDynamicCompressionLevel;
	[read, write] sint32 HcOnDemandCompLevel;
	[read, write] sint32 HcCreateFlags;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpGroups : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpRoutingSourceSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string SmtpRoutingTableType;
	[read, write] string SmtpDsDataDirectory;
	[read, write] string SmtpDsDefaultMailRoot;
	[read, write] string SmtpDsBindType;
	[read, write] string SmtpDsSchemaType;
	[read, write] string SmtpDsHost;
	[read, write] string SmtpDsNamingContext;
	[read, write] string SmtpDsAccount;
	[read, write] string SmtpDsPassword;
	[read, write] sint32 SmtpDsUseCat;
	[read, write] sint32 SmtpDsPort;
	[read, write] string SmtpDsDomain;
	[read, write] sint32 SmtpDsFlags;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3ServerSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 MaxBandwidth;
	[read, write] sint32 MaxConnections;
	[read, write] string ServerComment;
	[read, write] sint32 ConnectionTimeout;
	[read, write] sint32 ServerListenTimeout;
	[read, write] sint32 MaxEndpointConnections;
	[read, write] boolean ServerAutoStart;
	[read, write] ServerBinding ServerBindings[];
	[read, write] SecureBinding SecureBindings[];
	[read, write] uint8 AdminACLBin[];
	[read, write] boolean DontLog;
	[read, write] sint32 AuthFlags;
	[read, write] boolean AuthAnonymous;
	[read, write] boolean AuthBasic;
	[read, write] boolean AuthNTLM;
	[read, write] boolean AuthMD5;
	[read, write] boolean AuthPassport;
	[read, write] string DefaultLogonDomain;
	[read, write] string NTAuthenticationProviders;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] sint32 ServerListenBacklog;
	[read, write] sint32 Win32Error;
	[read, write] sint32 LogType;
	[read, write] string LogPluginClsid;
	[read, write] string LogFileDirectory;
	[read, write] sint32 LogFilePeriod;
	[read, write] sint32 LogFileTruncateSize;
	[read, write] sint32 LogExtFileFlags;
	[read, write] boolean LogExtFileDate;
	[read, write] boolean LogExtFileTime;
	[read, write] boolean LogExtFileClientIp;
	[read, write] boolean LogExtFileUserName;
	[read, write] boolean LogExtFileSiteName;
	[read, write] boolean LogExtFileComputerName;
	[read, write] boolean LogExtFileServerIp;
	[read, write] boolean LogExtFileMethod;
	[read, write] boolean LogExtFileUriStem;
	[read, write] boolean LogExtFileUriQuery;
	[read, write] boolean LogExtFileHttpStatus;
	[read, write] boolean LogExtFileWin32Status;
	[read, write] boolean LogExtFileBytesSent;
	[read, write] boolean LogExtFileBytesRecv;
	[read, write] boolean LogExtFileTimeTaken;
	[read, write] boolean LogExtFileServerPort;
	[read, write] boolean LogExtFileUserAgent;
	[read, write] boolean LogExtFileCookie;
	[read, write] boolean LogExtFileReferer;
	[read, write] boolean LogExtFileProtocolVersion;
	[read, write] boolean LogExtFileHost;
	[read, write] boolean LogExtFileHttpSubStatus;
	[read, write] string LogOdbcDataSource;
	[read, write] string LogOdbcTableName;
	[read, write] string LogOdbcUserName;
	[read, write] string LogOdbcPassword;
	[read, write] sint32 Pop3ExpireMail;
	[read, write] sint32 Pop3ExpireDelay;
	[read, write] sint32 Pop3ExpireStart;
	[read, write] sint32 Pop3MailExpirationTime;
	[read, write] string Pop3ClearTextProvider;
	[read, write] string Pop3DefaultDomain;
	[read, write] string Pop3RoutingDll;
	[read, write] boolean AzEnable;
	[read, write] string AzStoreName;
	[read, write] string AzScopeName;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFilterSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string FilterPath;
	[read, write] string FilterDescription;
	[read, write] sint32 FilterFlags;
	[read, write] boolean NotifySecurePort;
	[read, write] boolean NotifyNonSecurePort;
	[read, write] boolean NotifySendResponse;
	[read, write] boolean NotifyEndOfRequest;
	[read, write] boolean NotifyEndOfNetSession;
	[read, write] boolean NotifyLog;
	[read, write] boolean NotifySendRawData;
	[read, write] boolean NotifyAccessDenied;
	[read, write] boolean NotifyUrlMap;
	[read, write] boolean NotifyAuthentication;
	[read, write] boolean NotifyPreProcHeaders;
	[read, write] boolean NotifyReadRawData;
	[read, write] boolean NotifyOrderLow;
	[read, write] boolean NotifyOrderMedium;
	[read, write] boolean NotifyOrderHigh;
	[read, write] boolean NotifyAuthComplete;
	[read, write] sint32 FilterState;
	[read, write] boolean FilterEnabled;
	[read, write] boolean FilterEnableCache;
	[read, write] sint32 Win32Error;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages metabase properties that apply to a specific FTP server and to set inheritable metabase properties for FTP virtual directories.")]
class IIsFtpServer : CIM_LogicalElement
{
	[Key] string Name;
	[read, write(FALSE)] sint32 ServerState;
	[Implemented,bypass_getobject,Description("Starts the server.")] void Start();
	[Implemented,bypass_getobject,Description("Stops the server.")] void Stop();
	[Implemented,bypass_getobject,Description("Continues the server.")] void Continue();
	[Implemented,bypass_getobject,Description("Pauses the server.")] void Pause();
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapInfoSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string LogModuleList;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpServerSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 MaxBandwidth;
	[read, write] sint32 MaxConnections;
	[read, write] string AnonymousUserName;
	[read, write] string AnonymousUserPass;
	[read, write] string ServerComment;
	[read, write] sint32 ConnectionTimeout;
	[read, write] sint32 ServerListenTimeout;
	[read, write] sint32 MaxEndpointConnections;
	[read, write] boolean ServerAutoStart;
	[read, write] ServerBinding ServerBindings[];
	[read, write] SecureBinding SecureBindings[];
	[read, write] boolean ClusterEnabled;
	[read, write] boolean AnonymousPasswordSync;
	[read, write] uint8 AdminACLBin[];
	[read, write] boolean DontLog;
	[read, write] boolean ContentIndexed;
	[read, write] sint32 AuthFlags;
	[read, write] boolean AuthAnonymous;
	[read, write] boolean AuthBasic;
	[read, write] boolean AuthNTLM;
	[read, write] boolean AuthMD5;
	[read, write] boolean AuthPassport;
	[read, write] sint32 ServerListenBacklog;
	[read, write] sint32 Win32Error;
	[read, write] boolean HonorClientMsgIds;
	[read, write] string SmtpServer;
	[read, write] string AdminEmail;
	[read, write] string AdminName;
	[read, write] boolean AllowClientPosts;
	[read, write] boolean AllowFeedPosts;
	[read, write] boolean AllowControlMsgs;
	[read, write] string DefaultModeratorDomain;
	[read, write] sint32 NntpCommandLogMask;
	[read, write] boolean DisableNewNews;
	[read, write] sint32 ClientPostHardLimit;
	[read, write] sint32 ClientPostSoftLimit;
	[read, write] sint32 FeedPostHardLimit;
	[read, write] sint32 FeedPostSoftLimit;
	[read, write] string NewsPickupDirectory;
	[read, write] string NewsFailedPickupDirectory;
	[read, write] string NewsDropDirectory;
	[read, write] sint32 LogType;
	[read, write] string LogPluginClsid;
	[read, write] string LogFileDirectory;
	[read, write] sint32 LogFilePeriod;
	[read, write] sint32 LogFileTruncateSize;
	[read, write] sint32 LogExtFileFlags;
	[read, write] boolean LogExtFileDate;
	[read, write] boolean LogExtFileTime;
	[read, write] boolean LogExtFileClientIp;
	[read, write] boolean LogExtFileUserName;
	[read, write] boolean LogExtFileSiteName;
	[read, write] boolean LogExtFileComputerName;
	[read, write] boolean LogExtFileServerIp;
	[read, write] boolean LogExtFileMethod;
	[read, write] boolean LogExtFileUriStem;
	[read, write] boolean LogExtFileUriQuery;
	[read, write] boolean LogExtFileHttpStatus;
	[read, write] boolean LogExtFileWin32Status;
	[read, write] boolean LogExtFileBytesSent;
	[read, write] boolean LogExtFileBytesRecv;
	[read, write] boolean LogExtFileTimeTaken;
	[read, write] boolean LogExtFileServerPort;
	[read, write] boolean LogExtFileUserAgent;
	[read, write] boolean LogExtFileCookie;
	[read, write] boolean LogExtFileReferer;
	[read, write] boolean LogExtFileProtocolVersion;
	[read, write] boolean LogExtFileHost;
	[read, write] boolean LogExtFileHttpSubStatus;
	[read, write] string LogOdbcDataSource;
	[read, write] string LogOdbcTableName;
	[read, write] string LogOdbcUserName;
	[read, write] string LogOdbcPassword;
	[read, write] sint32 FeedReportPeriod;
	[read, write] sint32 MaxSearchResults;
	[read, write] string NntpUucpName;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] string GroupHelpFile;
	[read, write] string GroupListFile;
	[read, write] string ArticleTableFile;
	[read, write] string HistoryTableFile;
	[read, write] string ListFile;
	[read, write] string ModeratorFile;
	[read, write] string XoverTableFile;
	[read, write] string PrettyNamesFile;
	[read, write] string GroupVarListFile;
	[read, write] sint32 ArticleTimeLimit;
	[read, write] sint32 HistoryExpiration;
	[read, write] sint32 NewsCrawlerTime;
	[read, write] sint32 ShutdownLatency;
	[read, write] string NntpOrganization;
	[read, write] string NntpClearTextProvider;
	[read, write] string NTAuthenticationProviders;
	[read, write] boolean AzEnable;
	[read, write] string AzStoreName;
	[read, write] string AzScopeName;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpRoutingSource : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages metabase properties that apply to a specific Web virtual server, and to set inheritable metabase properties for virtual directories, Web directories, and Web files.")]
class IIsWebServer : CIM_LogicalElement
{
	[Key] string Name;
	[read, write(FALSE)] sint32 ServerState;
	[read, write(FALSE)] string AppRoot;
	[read, write(FALSE)] sint32 AppIsolated;
	[read, write(FALSE)] string AppPackageID;
	[read, write(FALSE)] string AppPackageName;
	[read, write(FALSE)] uint8 SSLCertHash[];
	[Implemented,bypass_getobject,Description("Starts the server.")] void Start();
	[Implemented,bypass_getobject,Description("Stops the server.")] void Stop();
	[Implemented,bypass_getobject,Description("Continues the server.")] void Continue();
	[Implemented,bypass_getobject,Description("Pauses the server.")] void Pause();
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpInfoSetting : IIsSetting
{
	[Key] string Name;
	[read, write] uint8 AdminACLBin[];
	[read, write] string LogModuleList;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpVirtualDir : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpDLSetting : IIsSetting
{
	[Key] string Name;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpFeed : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages the metabase properties that control FTP sites and FTP virtual directories.")]
class IIsFtpService : Win32_Service
{
	[Implemented,bypass_getobject,Description("Creates a new site.")] string CreateNewSite([IN] string ServerComment, [IN] ServerBinding ServerBindings[], [IN] string PathOfRootVirtualDir, [IN,OPTIONAL] sint32 ServerId);
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3VirtualDir : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpInfoSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string LogModuleList;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCustomLogModule : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapSessions : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpInfoSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string LogModuleList;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpVirtualDir : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpDomain : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpUser : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages metabase properties that apply to a specific Web virtual server, and to set inheritable metabase properties for virtual directories, Web directories, and Web files.")]
class IIsWebServerSetting : IIsSetting
{
	[Key] string Name;
	[read, write] boolean ContentIndexed;
	[read, write] string ServerComment;
	[read, write] sint32 MaxBandwidth;
	[read, write] boolean ServerAutoStart;
	[read, write] sint32 ServerSize;
	[read, write] boolean DisableSocketPooling;
	[read, write] sint32 ServerListenBacklog;
	[read, write] sint32 ServerListenTimeout;
	[read, write] ServerBinding ServerBindings[];
	[read, write] SecureBinding SecureBindings[];
	[read, write] sint32 MaxConnections;
	[read, write] sint32 ConnectionTimeout;
	[read, write] boolean AllowKeepAlive;
	[read, write] sint32 CGITimeout;
	[read, write] sint32 MaxEndpointConnections;
	[read, write] boolean UseDigestSSP;
	[read, write] boolean CacheISAPI;
	[read, write] MimeMap MimeMap[];
	[read, write] string AnonymousUserName;
	[read, write] string AnonymousUserPass;
	[read, write] boolean FrontPageWeb;
	[read, write] boolean AnonymousPasswordSync;
	[read, write] string DefaultLogonDomain;
	[read, write] uint8 AdminACLBin[];
	[read, write] boolean DontLog;
	[read, write] string Realm;
	[read, write] string DefaultDoc;
	[read, write] string HttpExpires;
	[read, write] string HttpPics[];
	[read, write] HttpCustomHeader HttpCustomHeaders[];
	[read, write] HttpError HttpErrors[];
	[read, write] boolean EnableDocFooter;
	[read, write] string DefaultDocFooter;
	[read, write] sint32 LogonMethod;
	[read, write] string NTAuthenticationProviders;
	[read, write] sint32 CertCheckMode;
	[read, write] boolean AspBufferingOn;
	[read, write] boolean AspLogErrorRequests;
	[read, write] boolean AspScriptErrorSentToBrowser;
	[read, write] string AspScriptErrorMessage;
	[read, write] boolean AspAllowOutOfProcComponents;
	[read, write] sint32 AspScriptFileCacheSize;
	[read, write] string AspDiskTemplateCacheDirectory;
	[read, write] sint32 AspMaxDiskTemplateCacheFiles;
	[read, write] sint32 AspScriptEngineCacheMax;
	[read, write] sint32 AspScriptTimeout;
	[read, write] boolean AspEnableParentPaths;
	[read, write] boolean AspAllowSessionState;
	[read, write] string AspScriptLanguage;
	[read, write] boolean AspExceptionCatchEnable;
	[read, write] sint32 AspCodepage;
	[read, write] sint32 AspLCID;
	[read, write] sint32 AspSessionTimeout;
	[read, write] sint32 AspQueueTimeout;
	[read, write] boolean AspEnableAspHtmlFallback;
	[read, write] boolean AspEnableChunkedEncoding;
	[read, write] boolean AspEnableTypelibCache;
	[read, write] boolean AspErrorsToNTLog;
	[read, write] sint32 AspProcessorThreadMax;
	[read, write] boolean AspTrackThreadingModel;
	[read, write] sint32 AspRequestQueueMax;
	[read, write] boolean AspEnableApplicationRestart;
	[read, write] sint32 AspQueueConnectionTestTime;
	[read, write] sint32 AspSessionMax;
	[read, write] string AppFriendlyName;
	[read, write] sint32 AppOopRecoverLimit;
	[read, write] boolean AppAllowDebugging;
	[read, write] boolean AppAllowClientDebug;
	[read, write] boolean ClusterEnabled;
	[read, write] sint32 CacheControlMaxAge;
	[read, write] boolean CacheControlNoCache;
	[read, write] string CacheControlCustom;
	[read, write] boolean CreateProcessAsUser;
	[read, write] sint32 PoolIdcTimeout;
	[read, write] string RedirectHeaders[];
	[read, write] sint32 UploadReadAheadSize;
	[read, write] sint32 PasswordExpirePrenotifyDays;
	[read, write] sint32 PasswordCacheTTL;
	[read, write] sint32 PasswordChangeFlags;
	[read, write] boolean AuthChangeUnsecure;
	[read, write] boolean AuthChangeDisable;
	[read, write] boolean AuthAdvNotifyDisable;
	[read, write] sint32 MaxBandwidthBlocked;
	[read, write] string AppWamClsid;
	[read, write] sint32 DirBrowseFlags;
	[read, write] boolean DirBrowseShowDate;
	[read, write] boolean DirBrowseShowTime;
	[read, write] boolean DirBrowseShowSize;
	[read, write] boolean DirBrowseShowExtension;
	[read, write] boolean DirBrowseShowLongDate;
	[read, write] boolean EnableDefaultDoc;
	[read, write] boolean EnableDirBrowsing;
	[read, write] sint32 AuthFlags;
	[read, write] boolean AuthAnonymous;
	[read, write] boolean AuthBasic;
	[read, write] boolean AuthNTLM;
	[read, write] boolean AuthMD5;
	[read, write] boolean AuthPassport;
	[read, write] sint32 AuthPersistence;
	[read, write] boolean AuthPersistSingleRequest;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] boolean DisableStaticFileCache;
	[read, write] ScriptMap ScriptMaps[];
	[read, write] boolean SSIExecDisable;
	[read, write] boolean EnableReverseDns;
	[read, write] boolean CreateCGIWithNewConsole;
	[read, write] sint32 LogType;
	[read, write] string LogPluginClsid;
	[read, write] string LogFileDirectory;
	[read, write] sint32 LogFilePeriod;
	[read, write] boolean LogFileLocaltimeRollover;
	[read, write] sint32 LogFileTruncateSize;
	[read, write] sint32 LogExtFileFlags;
	[read, write] boolean LogExtFileDate;
	[read, write] boolean LogExtFileTime;
	[read, write] boolean LogExtFileClientIp;
	[read, write] boolean LogExtFileUserName;
	[read, write] boolean LogExtFileSiteName;
	[read, write] boolean LogExtFileComputerName;
	[read, write] boolean LogExtFileServerIp;
	[read, write] boolean LogExtFileMethod;
	[read, write] boolean LogExtFileUriStem;
	[read, write] boolean LogExtFileUriQuery;
	[read, write] boolean LogExtFileHttpStatus;
	[read, write] boolean LogExtFileWin32Status;
	[read, write] boolean LogExtFileBytesSent;
	[read, write] boolean LogExtFileBytesRecv;
	[read, write] boolean LogExtFileTimeTaken;
	[read, write] boolean LogExtFileServerPort;
	[read, write] boolean LogExtFileUserAgent;
	[read, write] boolean LogExtFileCookie;
	[read, write] boolean LogExtFileReferer;
	[read, write] boolean LogExtFileProtocolVersion;
	[read, write] boolean LogExtFileHost;
	[read, write] boolean LogExtFileHttpSubStatus;
	[read, write] string LogOdbcDataSource;
	[read, write] string LogOdbcTableName;
	[read, write] string LogOdbcUserName;
	[read, write] string LogOdbcPassword;
	[read, write] sint32 ShutdownTimeLimit;
	[read, write] string SSLStoreName;
	[read, write] boolean SSLAlwaysNegoClientCert;
	[read, write] boolean ProcessNTCRIfLoggedOn;
	[read, write] boolean AllowPathInfoForScriptMappings;
	[read, write] sint32 ServerCommand;
	[read, write] sint32 Win32Error;
	[read, write] string AppPoolId;
	[read, write] boolean DoStaticCompression;
	[read, write] boolean DoDynamicCompression;
	[read, write] string AspPartitionID;
	[read, write] string AspSxsName;
	[read, write] sint32 AspAppServiceFlags;
	[read, write] boolean AspEnableTracker;
	[read, write] boolean AspEnableSxs;
	[read, write] boolean AspUsePartition;
	[read, write] sint32 AspKeepSessionIDSecure;
	[read, write] sint32 RevocationFreshnessTime;
	[read, write] sint32 RevocationURLRetrievalTimeout;
	[read, write] sint32 AspExecuteInMTA;
	[read, write] boolean AspRunOnEndAnonymously;
	[read, write] sint32 AspBufferingLimit;
	[read, write] boolean AzEnable;
	[read, write] string AzStoreName;
	[read, write] string AzScopeName;
	[read, write] sint32 AzImpersonationLevel;
	[read, write] boolean AspCalcLineNumber;
	[read, write] sint32 AspMaxRequestEntityAllowed;
	[read, write] sint32 MaxRequestEntityAllowed;
	[read, write] string SslCtlIdentifier;
	[read, write] string SslCtlStoreName;
	[read, write] sint32 PassportRequireADMapping;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages global metabase properties that determine how IIS operates")]
class IIsComputerSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 MaxBandwidth;
	[read, write] sint32 MaxBandwidthBlocked;
	[read, write] MimeMap MimeMap[];
	[read, write] sint32 EnableHistory;
	[read, write] sint32 MaxHistoryFiles;
	[read, write] sint32 EnableEditWhileRunning;
	[read, write] sint32 MaxErrorFiles;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapRoutingSourceSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string ImapRoutingTableType;
	[read, write] string ImapDsDataDirectory;
	[read, write] string ImapDsDefaultMailRoot;
	[read, write] string ImapDsBindType;
	[read, write] string ImapDsSchemaType;
	[read, write] string ImapDsHost;
	[read, write] string ImapDsNamingContext;
	[read, write] string ImapDsAccount;
	[read, write] string ImapDsPassword;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpExpire : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Maps client certificates to Windows user accounts.")]
class IIsCertMapper : CIM_LogicalElement
{
	[Key] string Name;
	[Implemented,bypass_getobject,Description("Maps a certificate to a Windows account.")] void CreateMapping([IN] string vCert, [IN] string NtAcct, [IN] string NtPwd, [IN] string strName, [IN] boolean IEnabled);
	[Implemented,bypass_getobject,Description("Deletes an existing certificate mapping.")] void DeleteMapping([IN] sint32 IMethod, [IN] string vKey);
	[Implemented,bypass_getobject,Description("Retrieves a certificate and the mapping data from an existing certificate mapping.")] void GetMapping([IN] sint32 IMethod, [IN] string vKey, [OUT] string vCert, [OUT] string NtAcct, [OUT] string NtPwd, [OUT] string strName, [OUT] boolean IEnabled);
	[Implemented,bypass_getobject,Description("Sets a new value for the Windows account string in an existing certificate mapping.")] void SetAcct([IN] sint32 IMethod, [IN] string vKey, [IN] string NtAcct);
	[Implemented,bypass_getobject,Description("Enables or disables an existing certificate mapping.")] void SetEnabled([IN] sint32 IMethod, [IN] string vKey, [IN] boolean IEnabled);
	[Implemented,bypass_getobject,Description("Sets a new value for the name string in an existing certificate mapping.")] void SetName([IN] sint32 IMethod, [IN] string vKey, [IN] string strName);
	[Implemented,bypass_getobject,Description("Sets a new value for the Windows password string in an existing certificate mapping.")] void SetPwd([IN] sint32 IMethod, [IN] string vKey, [IN] string NtPwd);
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsLogModule : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapServiceSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 MaxBandwidth;
	[read, write] sint32 MaxConnections;
	[read, write] string ServerComment;
	[read, write] sint32 ConnectionTimeout;
	[read, write] sint32 ServerListenTimeout;
	[read, write] sint32 MaxEndpointConnections;
	[read, write] boolean ServerAutoStart;
	[read, write] uint8 AdminACLBin[];
	[read, write] boolean DontLog;
	[read, write] sint32 AuthFlags;
	[read, write] boolean AuthAnonymous;
	[read, write] boolean AuthBasic;
	[read, write] boolean AuthNTLM;
	[read, write] boolean AuthMD5;
	[read, write] boolean AuthPassport;
	[read, write] sint32 ServerListenBacklog;
	[read, write] string DefaultLogonDomain;
	[read, write] string NTAuthenticationProviders;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] sint32 LogType;
	[read, write] sint32 LogFilePeriod;
	[read, write] string LogPluginClsid;
	[read, write] string LogModuleList;
	[read, write] string LogFileDirectory;
	[read, write] sint32 LogFileTruncateSize;
	[read, write] sint32 LogExtFileFlags;
	[read, write] boolean LogExtFileDate;
	[read, write] boolean LogExtFileTime;
	[read, write] boolean LogExtFileClientIp;
	[read, write] boolean LogExtFileUserName;
	[read, write] boolean LogExtFileSiteName;
	[read, write] boolean LogExtFileComputerName;
	[read, write] boolean LogExtFileServerIp;
	[read, write] boolean LogExtFileMethod;
	[read, write] boolean LogExtFileUriStem;
	[read, write] boolean LogExtFileUriQuery;
	[read, write] boolean LogExtFileHttpStatus;
	[read, write] boolean LogExtFileWin32Status;
	[read, write] boolean LogExtFileBytesSent;
	[read, write] boolean LogExtFileBytesRecv;
	[read, write] boolean LogExtFileTimeTaken;
	[read, write] boolean LogExtFileServerPort;
	[read, write] boolean LogExtFileUserAgent;
	[read, write] boolean LogExtFileCookie;
	[read, write] boolean LogExtFileReferer;
	[read, write] boolean LogExtFileProtocolVersion;
	[read, write] boolean LogExtFileHost;
	[read, write] boolean LogExtFileHttpSubStatus;
	[read, write] string LogOdbcDataSource;
	[read, write] string LogOdbcTableName;
	[read, write] string LogOdbcUserName;
	[read, write] string LogOdbcPassword;
	[read, write] sint32 ImapExpireMail;
	[read, write] sint32 ImapExpireDelay;
	[read, write] sint32 ImapExpireStart;
	[read, write] sint32 ImapMailExpirationTime;
	[read, write] string ImapClearTextProvider;
	[read, write] string ImapDefaultDomain;
	[read, write] string ImapRoutingDll;
	[read, write] boolean AzEnable;
	[read, write] string AzStoreName;
	[read, write] string AzScopeName;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpServerSetting : IIsSetting
{
	[Key] string Name;
	[read, write] sint32 MaxBandwidth;
	[read, write] sint32 MaxConnections;
	[read, write] string ServerComment;
	[read, write] sint32 ConnectionTimeout;
	[read, write] sint32 ServerListenTimeout;
	[read, write] sint32 MaxEndpointConnections;
	[read, write] boolean ServerAutoStart;
	[read, write] ServerBinding ServerBindings[];
	[read, write] SecureBinding SecureBindings[];
	[read, write] boolean ClusterEnabled;
	[read, write] uint8 AdminACLBin[];
	[read, write] boolean DontLog;
	[read, write] sint32 AuthFlags;
	[read, write] boolean AuthAnonymous;
	[read, write] boolean AuthBasic;
	[read, write] boolean AuthNTLM;
	[read, write] boolean AuthMD5;
	[read, write] boolean AuthPassport;
	[read, write] sint32 AccessFlags;
	[read, write] boolean AccessRead;
	[read, write] boolean AccessWrite;
	[read, write] boolean AccessExecute;
	[read, write] boolean AccessSource;
	[read, write] boolean AccessScript;
	[read, write] boolean AccessNoRemoteWrite;
	[read, write] boolean AccessNoRemoteRead;
	[read, write] boolean AccessNoRemoteExecute;
	[read, write] boolean AccessNoRemoteScript;
	[read, write] boolean AccessNoPhysicalDir;
	[read, write] sint32 AccessSSLFlags;
	[read, write] boolean AccessSSL;
	[read, write] boolean AccessSSLNegotiateCert;
	[read, write] boolean AccessSSLRequireCert;
	[read, write] boolean AccessSSLMapCert;
	[read, write] boolean AccessSSL128;
	[read, write] sint32 ServerListenBacklog;
	[read, write] sint32 Win32Error;
	[read, write] sint32 LogType;
	[read, write] string LogPluginClsid;
	[read, write] string LogFileDirectory;
	[read, write] sint32 LogFilePeriod;
	[read, write] sint32 LogFileTruncateSize;
	[read, write] sint32 LogExtFileFlags;
	[read, write] boolean LogExtFileDate;
	[read, write] boolean LogExtFileTime;
	[read, write] boolean LogExtFileClientIp;
	[read, write] boolean LogExtFileUserName;
	[read, write] boolean LogExtFileSiteName;
	[read, write] boolean LogExtFileComputerName;
	[read, write] boolean LogExtFileServerIp;
	[read, write] boolean LogExtFileMethod;
	[read, write] boolean LogExtFileUriStem;
	[read, write] boolean LogExtFileUriQuery;
	[read, write] boolean LogExtFileHttpStatus;
	[read, write] boolean LogExtFileWin32Status;
	[read, write] boolean LogExtFileBytesSent;
	[read, write] boolean LogExtFileBytesRecv;
	[read, write] boolean LogExtFileTimeTaken;
	[read, write] boolean LogExtFileServerPort;
	[read, write] boolean LogExtFileUserAgent;
	[read, write] boolean LogExtFileCookie;
	[read, write] boolean LogExtFileReferer;
	[read, write] boolean LogExtFileProtocolVersion;
	[read, write] boolean LogExtFileHost;
	[read, write] boolean LogExtFileHttpSubStatus;
	[read, write] string LogOdbcDataSource;
	[read, write] string LogOdbcTableName;
	[read, write] string LogOdbcUserName;
	[read, write] string LogOdbcPassword;
	[read, write] boolean EnableReverseDnsLookup;
	[read, write] boolean ShouldDeliver;
	[read, write] boolean AlwaysUseSsl;
	[read, write] boolean LimitRemoteConnections;
	[read, write] sint32 SmartHostType;
	[read, write] boolean DoMasquerade;
	[read, write] sint32 RemoteSmtpPort;
	[read, write] sint32 RemoteSmtpSecurePort;
	[read, write] sint32 HopCount;
	[read, write] sint32 MaxOutConnections;
	[read, write] sint32 MaxOutConnectionsPerDomain;
	[read, write] sint32 RemoteTimeout;
	[read, write] sint32 MaxMessageSize;
	[read, write] sint32 MaxSessionSize;
	[read, write] sint32 MaxRecipients;
	[read, write] sint32 LocalRetryInterval;
	[read, write] sint32 RemoteRetryInterval;
	[read, write] sint32 LocalRetryAttempts;
	[read, write] sint32 RemoteRetryAttempts;
	[read, write] sint32 EtrnDays;
	[read, write] sint32 MaxBatchedMessages;
	[read, write] string SmartHost;
	[read, write] string FullyQualifiedDomainName;
	[read, write] string DefaultDomain;
	[read, write] string DropDirectory;
	[read, write] string BadMailDirectory;
	[read, write] string PickupDirectory;
	[read, write] string QueueDirectory;
	[read, write] string MasqueradeDomain;
	[read, write] string SendNdrTo;
	[read, write] string SendBadTo;
	[read, write] string RoutingDll;
	[read, write] sint32 RouteAction;
	[read, write] string RouteUserName;
	[read, write] string RoutePassword;
	[read, write] string SaslLogonDomain;
	[read, write] string SmtpClearTextProvider;
	[read, write] string NTAuthenticationProviders;
	[read, write] string SmtpRemoteProgressiveRetry;
	[read, write] sint32 SmtpLocalDelayExpireMinutes;
	[read, write] sint32 SmtpLocalNDRExpireMinutes;
	[read, write] sint32 SmtpRemoteDelayExpireMinutes;
	[read, write] sint32 SmtpRemoteNDRExpireMinutes;
	[read, write] sint32 SmtpRemoteRetryThreshold;
	[read, write] sint32 SmtpDSNOptions;
	[read, write] sint32 SmtpDSNLanguageID;
	[read, write] sint32 SmtpInboundCommandSupportOptions;
	[read, write] sint32 SmtpOutboundCommandSupportOptions;
	[read, write] uint8 RelayIpList[];
	[read, write] sint32 RelayForAuth;
	[read, write] sint32 SmtpConnectTimeout;
	[read, write] sint32 SmtpMailFromTimeout;
	[read, write] sint32 SmtpRcptToTimeout;
	[read, write] sint32 SmtpDataTimeout;
	[read, write] sint32 SmtpBdatTimeout;
	[read, write] sint32 SmtpAuthTimeout;
	[read, write] sint32 SmtpSaslTimeout;
	[read, write] sint32 SmtpTurnTimeout;
	[read, write] sint32 SmtpRsetTimeout;
	[read, write] sint32 SmtpHeloTimeout;
	[read, write] boolean DisableSocketPooling;
	[read, write] sint32 SmtpUseTcpDns;
	[read, write] boolean SmtpDotStuffPickupDirFiles;
	[read, write] sint32 SmtpDomainValidationFlags;
	[read, write] boolean SmtpSSLRequireTrustedCA;
	[read, write] boolean SmtpSSLCertHostnameValidation;
	[read, write] sint32 MaxMailObjects;
	[read, write] boolean ShouldPickupMail;
	[read, write] sint32 MaxDirChangeIOSize;
	[read, write] sint32 NameResolutionType;
	[read, write] sint32 MaxSmtpErrors;
	[read, write] boolean ShouldPipelineIn;
	[read, write] boolean ShouldPipelineOut;
	[read, write] string ConnectResponse;
	[read, write] boolean UpdatedFQDN;
	[read, write] boolean UpdatedDefaultDomain;
	[read, write] boolean EtrnSubdomains;
	[read, write] sint32 SmtpMaxRemoteQThreads;
	[read, write] boolean SmtpDisableRelay;
	[read, write] boolean SmtpHeloNoDomain;
	[read, write] boolean SmtpMailNoHelo;
	[read, write] sint32 SmtpAqueueWait;
	[read, write] boolean AddNoHeaders;
	[read, write] sint32 SmtpEventlogLevel;
	[read, write] boolean AllowAnonymous;
	[read, write] boolean AnonymousOnly;
	[read, write] boolean AnonymousPasswordSync;
	[read, write] string AnonymousUserName;
	[read, write] string Realm;
	[read, write] string DefaultLogonDomain;
	[read, write] sint32 SmtpIpRestrictionFlag;
	[read, write] boolean AzEnable;
	[read, write] string AzStoreName;
	[read, write] string AzScopeName;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Manages metabase key values that apply to a file in a Web directory for a Web server.")]
class IIsWebFile : IIsDirectory
{
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033),Description("Maps client certificates to Windows user accounts.")]
class IIsCertMapperSetting : IIsSetting
{
	[Key] string Name;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpSessions : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpFeedSetting : IIsSetting
{
	[Key] string Name;
	[read, write] string FeedServerName;
	[read, write] sint32 FeedType;
	[read, write] string FeedNewsgroups[];
	[read, write] sint32 FeedSecurityType;
	[read, write] sint32 FeedAuthenticationType;
	[read, write] string FeedAccountName;
	[read, write] string FeedPassword;
	[read, write] sint32 FeedStartTimeHigh;
	[read, write] sint32 FeedStartTimeLow;
	[read, write] sint32 FeedInterval;
	[read, write] sint32 FeedAllowControlMsgs;
	[read, write] sint32 FeedCreateAutomatically;
	[read, write] sint32 FeedDisabled;
	[read, write] string FeedDistribution[];
	[read, write] sint32 FeedConcurrentSessions;
	[read, write] sint32 FeedMaxConnectionAttempts;
	[read, write] string FeedUucpName;
	[read, write] string FeedTempDirectory;
	[read, write] sint32 FeedNextPullHigh;
	[read, write] sint32 FeedNextPullLow;
	[read, write] string FeedPeerTempDirectory;
	[read, write] sint32 FeedPeerGapSize;
	[read, write] sint32 FeedOutgoingPort;
	[read, write] sint32 FeedFeedpairId;
	[read, write] sint32 FeedHandshake;
	[read, write] sint32 FeedAdminError;
	[read, write] sint32 FeedErrParmMask;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpAlias : CIM_LogicalElement
{
	[Key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsLogModulesSetting : IIsSetting
{
	[Key] string Name;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpRebuildSetting : IIsSetting
{
	[Key] string Name;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpAliasSetting : IIsSetting
{
	[Key] string Name;
	[read, write] uint8 AdminACLBin[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpServer_IIsSmtpRoutingSource : CIM_Component
{
	[key] IIsSmtpServer ref GroupComponent = NULL;
	[key] IIsSmtpRoutingSource ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Info_IIsPop3InfoSetting : CIM_ElementSetting
{
	[key] IIsPop3Info ref Element = NULL;
	[key] IIsPop3InfoSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpExpiration_IIsNntpExpire : CIM_Component
{
	[key] IIsNntpExpiration ref GroupComponent = NULL;
	[key] IIsNntpExpire ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpServer_IIsAdminACL : CIM_Component
{
	[key] IIsFtpServer ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebService_IIsWebServiceSetting : CIM_ElementSetting
{
	[key] IIsWebService ref Element = NULL;
	[key] IIsWebServiceSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpService_IIsSmtpServer : CIM_Component
{
	[key] IIsSmtpService ref GroupComponent = NULL;
	[key] IIsSmtpServer ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsLogModule_IIsAdminACL : CIM_Component
{
	[key] IIsLogModule ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpServer_IIsObject : CIM_Component
{
	[key] IIsFtpServer ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsComputer_IIsMimeMap : CIM_Component
{
	[key] IIsComputer ref GroupComponent = NULL;
	[key] IIsMimeMap ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapServer_IIsAdminACL : CIM_Component
{
	[key] IIsImapServer ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpAlias_IIsSmtpAliasSetting : CIM_ElementSetting
{
	[key] IIsSmtpAlias ref Element = NULL;
	[key] IIsSmtpAliasSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebDirectory_IIsAdminACL : CIM_Component
{
	[key] IIsWebDirectory ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpDomain_IIsSmtpDomain : CIM_Component
{
	[key] IIsSmtpDomain ref GroupComponent = NULL;
	[key] IIsSmtpDomain ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpSessions_IIsSmtpSessionsSetting : CIM_ElementSetting
{
	[key] IIsSmtpSessions ref Element = NULL;
	[key] IIsSmtpSessionsSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebFile_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsWebFile ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpService_IIsFtpServer : CIM_Component
{
	[key] IIsFtpService ref GroupComponent = NULL;
	[key] IIsFtpServer ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebFile_IIsAdminACL : CIM_Component
{
	[key] IIsWebFile ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpInfo_IIsAdminACL : CIM_Component
{
	[key] IIsFtpInfo ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFilters_IIsFiltersSetting : CIM_ElementSetting
{
	[key] IIsFilters ref Element = NULL;
	[key] IIsFiltersSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebService_IIsApplicationPools : CIM_Component
{
	[key] IIsWebService ref GroupComponent = NULL;
	[key] IIsApplicationPools ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapVirtualDir_IIsAdminACL : CIM_Component
{
	[key] IIsImapVirtualDir ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsLogModules_IIsAdminACL : CIM_Component
{
	[key] IIsLogModules ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpServer_IIsNntpFeeds : CIM_Component
{
	[key] IIsNntpServer ref GroupComponent = NULL;
	[key] IIsNntpFeeds ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpServer_IIsNntpExpiration : CIM_Component
{
	[key] IIsNntpServer ref GroupComponent = NULL;
	[key] IIsNntpExpiration ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebInfo_IIsObject : CIM_Component
{
	[key] IIsWebInfo ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCustomLogModule_IIsCustomLogModuleSetting : CIM_ElementSetting
{
	[key] IIsCustomLogModule ref Element = NULL;
	[key] IIsCustomLogModuleSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCompressionSchemes_IIsCompressionSchemesSetting : CIM_ElementSetting
{
	[key] IIsCompressionSchemes ref Element = NULL;
	[key] IIsCompressionSchemesSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapServer_IIsImapRoutingSource : CIM_Component
{
	[key] IIsImapServer ref GroupComponent = NULL;
	[key] IIsImapRoutingSource ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebServer_IIsFilters : CIM_Component
{
	[key] IIsWebServer ref GroupComponent = NULL;
	[key] IIsFilters ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebVirtualDir_IIsWebVirtualDirSetting : CIM_ElementSetting
{
	[key] IIsWebVirtualDir ref Element = NULL;
	[key] IIsWebVirtualDirSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpInfo_IIsObject : CIM_Component
{
	[key] IIsFtpInfo ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebVirtualDir_IIsWebVirtualDir : CIM_Component
{
	[key] IIsWebVirtualDir ref GroupComponent = NULL;
	[key] IIsWebVirtualDir ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebService_IIsAdminACL : CIM_Component
{
	[key] IIsWebService ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebDirectory_IIsObject : CIM_Component
{
	[key] IIsWebDirectory ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCompressionScheme_IIsAdminACL : CIM_Component
{
	[key] IIsCompressionScheme ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsComputer_IIsObject : CIM_Component
{
	[key] IIsComputer ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpService_IIsNntpServer : CIM_Component
{
	[key] IIsNntpService ref GroupComponent = NULL;
	[key] IIsNntpServer ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapService_IIsImapServiceSetting : CIM_ElementSetting
{
	[key] IIsImapService ref Element = NULL;
	[key] IIsImapServiceSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpFeed_IIsNntpFeedSetting : CIM_ElementSetting
{
	[key] IIsNntpFeed ref Element = NULL;
	[key] IIsNntpFeedSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpInfo_IIsFtpInfoSetting : CIM_ElementSetting
{
	[key] IIsFtpInfo ref Element = NULL;
	[key] IIsFtpInfoSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsComputer_IIsAdminACL : CIM_Component
{
	[key] IIsComputer ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpService_IIsAdminACL : CIM_Component
{
	[key] IIsFtpService ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebVirtualDir_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsWebVirtualDir ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsAdminACL_IIsACE : CIM_Component
{
	[key] IIsAdminACL ref GroupComponent = NULL;
	[key] IIsACE ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Service_IIsObject : CIM_Component
{
	[key] IIsPop3Service ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpServer_IIsSmtpDomain : CIM_Component
{
	[key] IIsSmtpServer ref GroupComponent = NULL;
	[key] IIsSmtpDomain ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpFeeds_IIsNntpFeed : CIM_Component
{
	[key] IIsNntpFeeds ref GroupComponent = NULL;
	[key] IIsNntpFeed ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpServer_IIsObject : CIM_Component
{
	[key] IIsSmtpServer ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpServer_IIsNntpRebuild : CIM_Component
{
	[key] IIsNntpServer ref GroupComponent = NULL;
	[key] IIsNntpRebuild ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpServer_IIsNntpServerSetting : CIM_ElementSetting
{
	[key] IIsNntpServer ref Element = NULL;
	[key] IIsNntpServerSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpUser_IIsSmtpUserSetting : CIM_ElementSetting
{
	[key] IIsSmtpUser ref Element = NULL;
	[key] IIsSmtpUserSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpService_IIsObject : CIM_Component
{
	[key] IIsFtpService ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpServer_IIsNntpVirtualDir : CIM_Component
{
	[key] IIsNntpServer ref GroupComponent = NULL;
	[key] IIsNntpVirtualDir ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFilters_IIsFilter : CIM_Component
{
	[key] IIsFilters ref GroupComponent = NULL;
	[key] IIsFilter ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpVirtualDir_IIsObject : CIM_Component
{
	[key] IIsSmtpVirtualDir ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebService_IIsFilters : CIM_Component
{
	[key] IIsWebService ref GroupComponent = NULL;
	[key] IIsFilters ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpExpiration_IIsAdminACL : CIM_Component
{
	[key] IIsNntpExpiration ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCompressionScheme_IIsCompressionSchemeSetting : CIM_ElementSetting
{
	[key] IIsCompressionScheme ref Element = NULL;
	[key] IIsCompressionSchemeSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsLogModules_IIsCustomLogModule : CIM_Component
{
	[key] IIsLogModules ref GroupComponent = NULL;
	[key] IIsCustomLogModule ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapInfo_IIsObject : CIM_Component
{
	[key] IIsImapInfo ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpFeeds_IIsAdminACL : CIM_Component
{
	[key] IIsNntpFeeds ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpService_IIsNntpServiceSetting : CIM_ElementSetting
{
	[key] IIsNntpService ref Element = NULL;
	[key] IIsNntpServiceSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsComputer_IIsPop3Service : CIM_Component
{
	[key] IIsComputer ref GroupComponent = NULL;
	[key] IIsPop3Service ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpRoutingSource_IIsAdminACL : CIM_Component
{
	[key] IIsSmtpRoutingSource ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebServer_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsWebServer ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsLogModules_IIsLogModulesSetting : CIM_ElementSetting
{
	[key] IIsLogModules ref Element = NULL;
	[key] IIsLogModulesSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCompressionSchemes_IIsObject : CIM_Component
{
	[key] IIsCompressionSchemes ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapRoutingSource_IIsImapRoutingSourceSetting : CIM_ElementSetting
{
	[key] IIsImapRoutingSource ref Element = NULL;
	[key] IIsImapRoutingSourceSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebServer_IIsObject : CIM_Component
{
	[key] IIsWebServer ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Server_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsPop3Server ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsComputer_IIsWebService : CIM_Component
{
	[key] IIsComputer ref GroupComponent = NULL;
	[key] IIsWebService ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpServer_IIsAdminACL : CIM_Component
{
	[key] IIsNntpServer ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpDL_IIsAdminACL : CIM_Component
{
	[key] IIsSmtpDL ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Service_IIsPop3Info : CIM_Component
{
	[key] IIsPop3Service ref GroupComponent = NULL;
	[key] IIsPop3Info ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpSessions_IIsAdminACL : CIM_Component
{
	[key] IIsNntpSessions ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpServer_IIsNntpSessions : CIM_Component
{
	[key] IIsNntpServer ref GroupComponent = NULL;
	[key] IIsNntpSessions ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpFeeds_IIsNntpFeedsSetting : CIM_ElementSetting
{
	[key] IIsNntpFeeds ref Element = NULL;
	[key] IIsNntpFeedsSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapServer_IIsObject : CIM_Component
{
	[key] IIsImapServer ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebServer_IIsCertMapper : CIM_Component
{
	[key] IIsWebServer ref GroupComponent = NULL;
	[key] IIsCertMapper ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapSessions_IIsAdminACL : CIM_Component
{
	[key] IIsImapSessions ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapVirtualDir_IIsImapVirtualDirSetting : CIM_ElementSetting
{
	[key] IIsImapVirtualDir ref Element = NULL;
	[key] IIsImapVirtualDirSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsApplicationPool_IIsApplicationPoolSetting : CIM_ElementSetting
{
	[key] IIsApplicationPool ref Element = NULL;
	[key] IIsApplicationPoolSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpVirtualDir_IIsAdminACL : CIM_Component
{
	[key] IIsFtpVirtualDir ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Info_IIsAdminACL : CIM_Component
{
	[key] IIsPop3Info ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCompressionSchemes_IIsCompressionScheme : CIM_Component
{
	[key] IIsCompressionSchemes ref GroupComponent = NULL;
	[key] IIsCompressionScheme ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebVirtualDir_IIsAdminACL : CIM_Component
{
	[key] IIsWebVirtualDir ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpInfo_IIsObject : CIM_Component
{
	[key] IIsNntpInfo ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Info_IIsObject : CIM_Component
{
	[key] IIsPop3Info ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebDirectory_IIsWebDirectory : CIM_Component
{
	[key] IIsWebDirectory ref GroupComponent = NULL;
	[key] IIsWebDirectory ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebServer_IIsWebVirtualDir : CIM_Component
{
	[key] IIsWebServer ref GroupComponent = NULL;
	[key] IIsWebVirtualDir ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapSessions_IIsImapSessionsSetting : CIM_ElementSetting
{
	[key] IIsImapSessions ref Element = NULL;
	[key] IIsImapSessionsSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Server_IIsPop3ServerSetting : CIM_ElementSetting
{
	[key] IIsPop3Server ref Element = NULL;
	[key] IIsPop3ServerSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapService_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsImapService ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFilter_IIsFilter : CIM_Component
{
	[key] IIsFilter ref GroupComponent = NULL;
	[key] IIsFilter ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFilter_IIsCompressionScheme : CIM_Component
{
	[key] IIsFilter ref GroupComponent = NULL;
	[key] IIsCompressionScheme ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsApplicationPools_IIsApplicationPool : CIM_Component
{
	[key] IIsApplicationPools ref GroupComponent = NULL;
	[key] IIsApplicationPool ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpRebuild_IIsNntpRebuildSetting : CIM_ElementSetting
{
	[key] IIsNntpRebuild ref Element = NULL;
	[key] IIsNntpRebuildSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpService_IIsFtpInfo : CIM_Component
{
	[key] IIsFtpService ref GroupComponent = NULL;
	[key] IIsFtpInfo ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebVirtualDir_IIsWebFile : CIM_Component
{
	[key] IIsWebVirtualDir ref GroupComponent = NULL;
	[key] IIsWebFile ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpVirtualDir_IIsNntpVirtualDirSetting : CIM_ElementSetting
{
	[key] IIsNntpVirtualDir ref Element = NULL;
	[key] IIsNntpVirtualDirSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpVirtualDir_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsFtpVirtualDir ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpExpire_IIsAdminACL : CIM_Component
{
	[key] IIsNntpExpire ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpVirtualDir_IIsSmtpVirtualDir : CIM_Component
{
	[key] IIsSmtpVirtualDir ref GroupComponent = NULL;
	[key] IIsSmtpVirtualDir ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsComputer_IIsImapService : CIM_Component
{
	[key] IIsComputer ref GroupComponent = NULL;
	[key] IIsImapService ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Sessions_IIsPop3SessionsSetting : CIM_ElementSetting
{
	[key] IIsPop3Sessions ref Element = NULL;
	[key] IIsPop3SessionsSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapVirtualDir_IIsObject : CIM_Component
{
	[key] IIsImapVirtualDir ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsLogModules_IIsObject : CIM_Component
{
	[key] IIsLogModules ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpExpire_IIsNntpExpireSetting : CIM_ElementSetting
{
	[key] IIsNntpExpire ref Element = NULL;
	[key] IIsNntpExpireSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Service_IIsPop3Server : CIM_Component
{
	[key] IIsPop3Service ref GroupComponent = NULL;
	[key] IIsPop3Server ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpServer_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsNntpServer ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Service_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsPop3Service ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebVirtualDir_IIsWebDirectory : CIM_Component
{
	[key] IIsWebVirtualDir ref GroupComponent = NULL;
	[key] IIsWebDirectory ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpUser_IIsAdminACL : CIM_Component
{
	[key] IIsSmtpUser ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsApplicationPool_IIsAdminACL : CIM_Component
{
	[key] IIsApplicationPool ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpVirtualDir_IIsAdminACL : CIM_Component
{
	[key] IIsNntpVirtualDir ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsApplicationPools_IIsApplicationPoolsSetting : CIM_ElementSetting
{
	[key] IIsApplicationPools ref Element = NULL;
	[key] IIsApplicationPoolsSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpServer_IIsSmtpSessions : CIM_Component
{
	[key] IIsSmtpServer ref GroupComponent = NULL;
	[key] IIsSmtpSessions ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpInfo_IIsSmtpInfoSetting : CIM_ElementSetting
{
	[key] IIsSmtpInfo ref Element = NULL;
	[key] IIsSmtpInfoSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebService_IIsWebServer : CIM_Component
{
	[key] IIsWebService ref GroupComponent = NULL;
	[key] IIsWebServer ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpExpiration_IIsNntpExpirationSetting : CIM_ElementSetting
{
	[key] IIsNntpExpiration ref Element = NULL;
	[key] IIsNntpExpirationSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebInfo_IIsWebInfoSetting : CIM_ElementSetting
{
	[key] IIsWebInfo ref Element = NULL;
	[key] IIsWebInfoSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapService_IIsAdminACL : CIM_Component
{
	[key] IIsImapService ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsMimeMap_IIsMimeMapSetting : CIM_ElementSetting
{
	[key] IIsMimeMap ref Element = NULL;
	[key] IIsMimeMapSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpSessions_IIsNntpSessionsSetting : CIM_ElementSetting
{
	[key] IIsNntpSessions ref Element = NULL;
	[key] IIsNntpSessionsSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Sessions_IIsAdminACL : CIM_Component
{
	[key] IIsPop3Sessions ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpService_IIsNntpInfo : CIM_Component
{
	[key] IIsNntpService ref GroupComponent = NULL;
	[key] IIsNntpInfo ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Server_IIsAdminACL : CIM_Component
{
	[key] IIsPop3Server ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsComputer_IIsNntpService : CIM_Component
{
	[key] IIsComputer ref GroupComponent = NULL;
	[key] IIsNntpService ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsLogModules_IIsLogModule : CIM_Component
{
	[key] IIsLogModules ref GroupComponent = NULL;
	[key] IIsLogModule ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Server_IIsPop3Sessions : CIM_Component
{
	[key] IIsPop3Server ref GroupComponent = NULL;
	[key] IIsPop3Sessions ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFilter_IIsAdminACL : CIM_Component
{
	[key] IIsFilter ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFilters_IIsAdminACL : CIM_Component
{
	[key] IIsFilters ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3VirtualDir_IIsPop3VirtualDirSetting : CIM_ElementSetting
{
	[key] IIsPop3VirtualDir ref Element = NULL;
	[key] IIsPop3VirtualDirSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFilter_IIsFilterSetting : CIM_ElementSetting
{
	[key] IIsFilter ref Element = NULL;
	[key] IIsFilterSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebDirectory_IIsWebVirtualDir : CIM_Component
{
	[key] IIsWebDirectory ref GroupComponent = NULL;
	[key] IIsWebVirtualDir ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3VirtualDir_IIsPop3VirtualDir : CIM_Component
{
	[key] IIsPop3VirtualDir ref GroupComponent = NULL;
	[key] IIsPop3VirtualDir ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpVirtualDir_IIsAdminACL : CIM_Component
{
	[key] IIsSmtpVirtualDir ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3RoutingSource_IIsAdminACL : CIM_Component
{
	[key] IIsPop3RoutingSource ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpServer_IIsSmtpServerSetting : CIM_ElementSetting
{
	[key] IIsSmtpServer ref Element = NULL;
	[key] IIsSmtpServerSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpSessions_IIsAdminACL : CIM_Component
{
	[key] IIsSmtpSessions ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Server_IIsPop3VirtualDir : CIM_Component
{
	[key] IIsPop3Server ref GroupComponent = NULL;
	[key] IIsPop3VirtualDir ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpService_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsFtpService ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpService_IIsObject : CIM_Component
{
	[key] IIsNntpService ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpDomain_IIsAdminACL : CIM_Component
{
	[key] IIsSmtpDomain ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3VirtualDir_IIsObject : CIM_Component
{
	[key] IIsPop3VirtualDir ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsComputer_IIsSmtpService : CIM_Component
{
	[key] IIsComputer ref GroupComponent = NULL;
	[key] IIsSmtpService ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Service_IIsAdminACL : CIM_Component
{
	[key] IIsPop3Service ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpServer_IIsNntpGroups : CIM_Component
{
	[key] IIsNntpServer ref GroupComponent = NULL;
	[key] IIsNntpGroups ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFilters_IIsObject : CIM_Component
{
	[key] IIsFilters ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapServer_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsImapServer ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpRebuild_IIsAdminACL : CIM_Component
{
	[key] IIsNntpRebuild ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpService_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsNntpService ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCertMapper_IIsAdminACL : CIM_Component
{
	[key] IIsCertMapper ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebDirectory_IIsWebDirectorySetting : CIM_ElementSetting
{
	[key] IIsWebDirectory ref Element = NULL;
	[key] IIsWebDirectorySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapVirtualDir_IIsImapVirtualDir : CIM_Component
{
	[key] IIsImapVirtualDir ref GroupComponent = NULL;
	[key] IIsImapVirtualDir ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpInfo_IIsNntpInfoSetting : CIM_ElementSetting
{
	[key] IIsNntpInfo ref Element = NULL;
	[key] IIsNntpInfoSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpServer_IIsObject : CIM_Component
{
	[key] IIsNntpServer ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpServer_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsFtpServer ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebService_IIsWebInfo : CIM_Component
{
	[key] IIsWebService ref GroupComponent = NULL;
	[key] IIsWebInfo ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpGroups_IIsAdminACL : CIM_Component
{
	[key] IIsNntpGroups ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpInfo_IIsAdminACL : CIM_Component
{
	[key] IIsSmtpInfo ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsObject_IIsObject : CIM_Component
{
	[key] IIsObject ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpService_IIsSmtpServiceSetting : CIM_ElementSetting
{
	[key] IIsSmtpService ref Element = NULL;
	[key] IIsSmtpServiceSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebDirectory_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsWebDirectory ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpServer_IIsFtpVirtualDir : CIM_Component
{
	[key] IIsFtpServer ref GroupComponent = NULL;
	[key] IIsFtpVirtualDir ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpAlias_IIsAdminACL : CIM_Component
{
	[key] IIsSmtpAlias ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpInfo_IIsAdminACL : CIM_Component
{
	[key] IIsNntpInfo ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapService_IIsImapInfo : CIM_Component
{
	[key] IIsImapService ref GroupComponent = NULL;
	[key] IIsImapInfo ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpDL_IIsSmtpDLSetting : CIM_ElementSetting
{
	[key] IIsSmtpDL ref Element = NULL;
	[key] IIsSmtpDLSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapServer_IIsImapVirtualDir : CIM_Component
{
	[key] IIsImapServer ref GroupComponent = NULL;
	[key] IIsImapVirtualDir ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebDirectory_IIsWebFile : CIM_Component
{
	[key] IIsWebDirectory ref GroupComponent = NULL;
	[key] IIsWebFile ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpServer_IIsFtpServerSetting : CIM_ElementSetting
{
	[key] IIsFtpServer ref Element = NULL;
	[key] IIsFtpServerSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsLogModule_IIsLogModuleSetting : CIM_ElementSetting
{
	[key] IIsLogModule ref Element = NULL;
	[key] IIsLogModuleSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpGroups_IIsNntpGroupsSetting : CIM_ElementSetting
{
	[key] IIsNntpGroups ref Element = NULL;
	[key] IIsNntpGroupsSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFilter_IIsCompressionSchemes : CIM_Component
{
	[key] IIsFilter ref GroupComponent = NULL;
	[key] IIsCompressionSchemes ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Service_IIsPop3ServiceSetting : CIM_ElementSetting
{
	[key] IIsPop3Service ref Element = NULL;
	[key] IIsPop3ServiceSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapServer_IIsImapServerSetting : CIM_ElementSetting
{
	[key] IIsImapServer ref Element = NULL;
	[key] IIsImapServerSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpVirtualDir_IIsNntpVirtualDir : CIM_Component
{
	[key] IIsNntpVirtualDir ref GroupComponent = NULL;
	[key] IIsNntpVirtualDir ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsApplicationPools_IIsAdminACL : CIM_Component
{
	[key] IIsApplicationPools ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpServer_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsSmtpServer ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Server_IIsPop3RoutingSource : CIM_Component
{
	[key] IIsPop3Server ref GroupComponent = NULL;
	[key] IIsPop3RoutingSource ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCertMapper_IIsCertMapperSetting : CIM_ElementSetting
{
	[key] IIsCertMapper ref Element = NULL;
	[key] IIsCertMapperSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebServer_IIsAdminACL : CIM_Component
{
	[key] IIsWebServer ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpService_IIsAdminACL : CIM_Component
{
	[key] IIsSmtpService ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapServer_IIsImapSessions : CIM_Component
{
	[key] IIsImapServer ref GroupComponent = NULL;
	[key] IIsImapSessions ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpVirtualDir_IIsFtpVirtualDir : CIM_Component
{
	[key] IIsFtpVirtualDir ref GroupComponent = NULL;
	[key] IIsFtpVirtualDir ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCompressionSchemes_IIsAdminACL : CIM_Component
{
	[key] IIsCompressionSchemes ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebServer_IIsWebServerSetting : CIM_ElementSetting
{
	[key] IIsWebServer ref Element = NULL;
	[key] IIsWebServerSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpFeed_IIsAdminACL : CIM_Component
{
	[key] IIsNntpFeed ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3RoutingSource_IIsPop3RoutingSourceSetting : CIM_ElementSetting
{
	[key] IIsPop3RoutingSource ref Element = NULL;
	[key] IIsPop3RoutingSourceSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsMimeMap_IIsAdminACL : CIM_Component
{
	[key] IIsMimeMap ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpService_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsSmtpService ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebService_IIsIPSecuritySetting : CIM_ElementSetting
{
	[key] IIsWebService ref Element = NULL;
	[key] IIsIPSecuritySetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapService_IIsObject : CIM_Component
{
	[key] IIsImapService ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3Server_IIsObject : CIM_Component
{
	[key] IIsPop3Server ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsObject_IIsObjectSetting : CIM_ElementSetting
{
	[key] IIsObject ref Element = NULL;
	[key] IIsObjectSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapRoutingSource_IIsAdminACL : CIM_Component
{
	[key] IIsImapRoutingSource ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpVirtualDir_IIsSmtpVirtualDirSetting : CIM_ElementSetting
{
	[key] IIsSmtpVirtualDir ref Element = NULL;
	[key] IIsSmtpVirtualDirSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebInfo_IIsAdminACL : CIM_Component
{
	[key] IIsWebInfo ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsComputer_IIsComputerSetting : CIM_ElementSetting
{
	[key] IIsComputer ref Element = NULL;
	[key] IIsComputerSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsPop3VirtualDir_IIsAdminACL : CIM_Component
{
	[key] IIsPop3VirtualDir ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpServer_IIsAdminACL : CIM_Component
{
	[key] IIsSmtpServer ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpDomain_IIsSmtpDomainSetting : CIM_ElementSetting
{
	[key] IIsSmtpDomain ref Element = NULL;
	[key] IIsSmtpDomainSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpRoutingSource_IIsSmtpRoutingSourceSetting : CIM_ElementSetting
{
	[key] IIsSmtpRoutingSource ref Element = NULL;
	[key] IIsSmtpRoutingSourceSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpService_IIsFtpServiceSetting : CIM_ElementSetting
{
	[key] IIsFtpService ref Element = NULL;
	[key] IIsFtpServiceSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsComputer_IIsFtpService : CIM_Component
{
	[key] IIsComputer ref GroupComponent = NULL;
	[key] IIsFtpService ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapInfo_IIsImapInfoSetting : CIM_ElementSetting
{
	[key] IIsImapInfo ref Element = NULL;
	[key] IIsImapInfoSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebService_IIsObject : CIM_Component
{
	[key] IIsWebService ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpService_IIsAdminACL : CIM_Component
{
	[key] IIsNntpService ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebVirtualDir_IIsObject : CIM_Component
{
	[key] IIsWebVirtualDir ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsCustomLogModule_IIsAdminACL : CIM_Component
{
	[key] IIsCustomLogModule ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapInfo_IIsAdminACL : CIM_Component
{
	[key] IIsImapInfo ref GroupComponent = NULL;
	[key] IIsAdminACL ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFtpVirtualDir_IIsFtpVirtualDirSetting : CIM_ElementSetting
{
	[key] IIsFtpVirtualDir ref Element = NULL;
	[key] IIsFtpVirtualDirSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpServer_IIsSmtpVirtualDir : CIM_Component
{
	[key] IIsSmtpServer ref GroupComponent = NULL;
	[key] IIsSmtpVirtualDir ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpInfo_IIsObject : CIM_Component
{
	[key] IIsSmtpInfo ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsNntpVirtualDir_IIsObject : CIM_Component
{
	[key] IIsNntpVirtualDir ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpService_IIsSmtpInfo : CIM_Component
{
	[key] IIsSmtpService ref GroupComponent = NULL;
	[key] IIsSmtpInfo ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsSmtpService_IIsObject : CIM_Component
{
	[key] IIsSmtpService ref GroupComponent = NULL;
	[key] IIsObject ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsWebFile_IIsWebFileSetting : CIM_ElementSetting
{
	[key] IIsWebFile ref Element = NULL;
	[key] IIsWebFileSetting ref Setting = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsFilters_IIsCompressionSchemes : CIM_Component
{
	[key] IIsFilters ref GroupComponent = NULL;
	[key] IIsCompressionSchemes ref PartComponent = NULL;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)]
class IIsImapService_IIsImapServer : CIM_Component
{
	[key] IIsImapService ref GroupComponent = NULL;
	[key] IIsImapServer ref PartComponent = NULL;
};

instance of __ClassProviderRegistration
{
  InteractionType = 1;
  Provider = $IISProv;
  SupportsGet = "TRUE";
  SupportsEnumeration = "TRUE";
  SupportsPut = "FALSE";
  SupportsDelete = "FALSE";
};