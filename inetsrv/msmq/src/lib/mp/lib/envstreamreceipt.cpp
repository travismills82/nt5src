/*++

Copyright (c) 1995-97  Microsoft Corporation

Module Name:
    envstreamreceipt.cpp

Abstract:
    Implements serialization\deserialization of the stream receipt  element to\from the  srmp envelop.

Author:
    Gil Shafriri(gilsh) 11-DEC-00

--*/

#include <libpch.h>
#include <qmpkt.h>
#include <xml.h>
#include <proptopkt.h>
#include <mp.h>
#include "envstreamreceipt.h"
#include "envcommon.h"
#include "mpp.h"
#include "envparser.h"

#include "envstreamreceipt.tmh"

using namespace std;


class AckedStreamIdElement
{
public:
	AckedStreamIdElement(const CQmPacket& pkt):m_pkt(pkt){}
	friend wostream& operator<<(wostream& wstr, const AckedStreamIdElement& AckedStreamId)
	{
		const CQmPacket& pkt = 	AckedStreamId.m_pkt;
		const WCHAR* pStreamid = reinterpret_cast<const WCHAR*>(pkt.GetPointerToEodAckStreamId()); 

		wstr<<OpenTag(xStreamId)
			<<pStreamid;
 		//
		// If the streamid was generated by MSMQ we should append to it the seqid
		//
		if(pkt.GetEodAckSeqId() != xNoneMSMQSeqId)
		{
			wstr<<xSlash<<Int64Value(pkt.GetEodAckSeqId());
		}

		wstr<<CloseTag(xStreamId);
		return wstr;
 	}


private:
	const CQmPacket& m_pkt;
};



class AckedStreamNumberElement
{
public:
	AckedStreamNumberElement(const CQmPacket& pkt):m_pkt(pkt){}
	friend wostream& operator<<(wostream& wstr, const AckedStreamNumberElement& AckedStreamNumber)
	{
		wstr<<OpenTag(xlastOrdinal)
			<<Int64Value(AckedStreamNumber.m_pkt.GetEodAckSeqNum())
			<<CloseTag(xlastOrdinal);

		return wstr;
 	}

private:
	const CQmPacket& m_pkt;
};



wostream& operator<<(wostream& wstr, const StreamReceiptElement& StreamReceipt)
{
		const CQmPacket& pkt = 	StreamReceipt.m_pkt;
		
		if ( !pkt.IsEodAckIncluded() )
			return wstr;
			

		wstr<<OpenTag(xStreamReceipt)
			<<AckedStreamIdElement(pkt)		
			<<AckedStreamNumberElement(pkt)
	   		<<CloseTag(xStreamReceipt);

		return wstr;

}


static void AckedStreamIdToProps(XmlNode& node, CMessageProperties* pProps)
{
	if(node.m_values.empty())
	{
		TrERROR(SRMP, "Illegal empty Acked Stream id node"); 
		throw bad_srmp();
	}

	const xwcs_t AckedStreamid = node.m_values.front().m_value;
 
	//
	// The stream id was sent by MSMQ so it of the format xxx\\seqid
	// we should extract the seqid from it.
	//
	bool fParsed = BreakMsmqStreamId(AckedStreamid, &pProps->EodAckStreamId, &pProps->EodAckSeqId);
	if(!fParsed)
	{
		TrERROR(SRMP, "Wrong formatted  stream id '%.*ls' accepted in stream receipt element", LOG_XWCS(AckedStreamid));       
		throw bad_srmp();
	}
}


static void AckedStreamNumberToProps(XmlNode& node, CMessageProperties* pProps)
{
	if(node.m_values.empty())
	{
		TrERROR(SRMP, "Illegal empty Acked stream sequence number node"); 
		throw bad_srmp();
	}

	const xwcs_t AckedSeqNumber = node.m_values.front().m_value;

	pProps->EodAckSeqNo = _wtoi64(AckedSeqNumber.Buffer());
	ASSERT(pProps->EodAckSeqNo  != 0);
}







void StreamReceiptToProps(
	 XmlNode& StreamReceipt, 
	CMessageProperties* pMessageProperties
	)
/*++

Routine Description:
    Parse SRMP Stream Receipt element into MSMQ properties.

Arguments:
	StreamReceipt - Stream Receipt element in SRMP reperesenation (xml).
	pMessageProperties - Received the parsed properties.

Returned Value:
	None.   

--*/
{
	pMessageProperties->fStreamReceiptSectionIncluded = true;

	CParseElement ParseElements[] =	{
										CParseElement(S_XWCS(xreceivedAt),SRMP_NAMESPACE, EmptyNodeToProps,0 ,1),
										CParseElement(S_XWCS(xStreamId),SRMP_NAMESPACE,  AckedStreamIdToProps,1 ,1),
										CParseElement(S_XWCS(xlastOrdinal),SRMP_NAMESPACE,  AckedStreamNumberToProps, 1, 1),
										CParseElement(S_XWCS(xId), SRMP_NAMESPACE, EmptyNodeToProps, 0, 1),
									};	

	NodeToProps(StreamReceipt, ParseElements, TABLE_SIZE(ParseElements), pMessageProperties);
}


