/*++

Copyright (c) 1995 Microsoft Corporation

Module Name:

    qmrt.idl

Abstract:


Author:

    Erez Haba (erezh) 10-Jan-96

Revision History:
--*/

import "mqtypes.idl";

[
uuid(fdb3a030-065f-11d1-bb9b-00a024ea5525),
version(1.0),
pointer_default(unique)
]
interface qmcomm
{

#include "qformat.h"

cpp_quote("#ifndef __transact_h__")
cpp_quote("#ifndef __xactdefs_h__")
cpp_quote("#define __xactdefs_h__")
#include "xactdefs.h"
cpp_quote("#endif")
cpp_quote("#endif")


//
// Transfer Buffer definition.
// These structures are used only for backwards compatibility with MSMQ
// dependent client 1.0 and 2.0.  (ShaiK, 11-May-2000)
//

struct CACCreateRemoteCursor {
	//
	//  Parameters for creating a remote cursor.
	//
    //  CACCreateLocalCursor (in acdef.h) defines parameters for creating a
	//  local cursor.
	//
	ULONG hCursor;
	ULONG srv_hACQueue;
	ULONG cli_pQMQueue;

};


enum TRANSFER_TYPE {
    CACTB_SEND = 0,
    CACTB_RECEIVE,
    CACTB_CREATECURSOR,
};


struct CACTransferBufferV1 {
    //
	// This structure is used by MSMQ 1.0 dependent clients.
	//

    [range(0,2)] ULONG uTransferType;
    [switch_is(uTransferType)]

    union {

        [case(CACTB_SEND)]
        struct {
            //
            //  MQSendMessage parameters
            //
            struct QUEUE_FORMAT* pAdminQueueFormat;
            struct QUEUE_FORMAT* pResponseQueueFormat;
        } Send;

        [case(CACTB_RECEIVE)]
        struct {
            //
            //  MQReceiveMessage parameters
            //

            ULONG RequestTimeout;
            ULONG Action;
            ULONG Asynchronous;
            ULONG Cursor;

            //
            // Important note:
            // In the following xxxFormatName properties, the value
            // "ulxxxFormatNameLen" is the size of the buffer on input.
            // This value MUST NOT be changed by the driver or QM. This
            // value tell the RPC run-time how many bytes to transfer
            // across process/machine boundaries.
            // The value "pulxxxFormatNameLenProp" is the property passed
            // by caller. This value IS changed and returned to caller to
            // indicate the length of the string.
            //
            [range(0,1024)] ULONG   ulResponseFormatNameLen ;
            [size_is(,ulResponseFormatNameLen)]
            WCHAR** ppResponseFormatName;
            ULONG*  pulResponseFormatNameLenProp;

            [range(0,1024)] ULONG   ulAdminFormatNameLen ;
            [size_is(,ulAdminFormatNameLen)]
            WCHAR** ppAdminFormatName;
            ULONG*  pulAdminFormatNameLenProp;

            [range(0,1024)] ULONG   ulDestFormatNameLen;
            [size_is(,ulDestFormatNameLen)]
            WCHAR** ppDestFormatName;
            ULONG*  pulDestFormatNameLenProp;

            [range(0,1024)] ULONG   ulOrderingFormatNameLen;
            [size_is(,ulOrderingFormatNameLen)]
            WCHAR** ppOrderingFormatName;
            ULONG*  pulOrderingFormatNameLenProp;
        } Receive;

        [case(CACTB_CREATECURSOR)]
        struct CACCreateRemoteCursor CreateCursor;
    };

    //
    //  Message properties pointers
    //
    USHORT* pClass;
    OBJECTID** ppMessageID;

    //
    //  BUGBUG: 20 must match PROPID_M_CORRELATIONID_SIZE
    //
    [size_is(,20), length_is(,20)]
    UCHAR** ppCorrelationID;

    ULONG* pSentTime;
    ULONG* pArrivedTime;
    UCHAR* pPriority;
    UCHAR* pDelivery;
    UCHAR* pAcknowledge;
    UCHAR* pAuditing;
    ULONG* pApplicationTag;

	[size_is(,ulAllocBodyBufferInBytes),
	length_is(,ulBodyBufferSizeInBytes)]
    UCHAR** ppBody;
    ULONG ulBodyBufferSizeInBytes;
    ULONG ulAllocBodyBufferInBytes;
    ULONG* pBodySize;

	//
	//  don't use [string] for *ppTitle, it is not
	//  initialized for RPC, thus we say how much to marshul.
	//
	[size_is(,ulTitleBufferSizeInWCHARs),
	length_is(,ulTitleBufferSizeInWCHARs)]
    WCHAR** ppTitle;
    ULONG   ulTitleBufferSizeInWCHARs;
    ULONG*  pulTitleBufferSizeInWCHARs;

    ULONG ulAbsoluteTimeToQueue;
    ULONG* pulRelativeTimeToQueue;

    ULONG ulRelativeTimeToLive;
    ULONG* pulRelativeTimeToLive;

    UCHAR* pTrace;
    ULONG* pulSenderIDType;

    [size_is(,uSenderIDLen)]
    UCHAR** ppSenderID;
    ULONG* pulSenderIDLenProp;

    ULONG* pulPrivLevel;
    ULONG  ulAuthLevel;
    UCHAR* pAuthenticated;
    ULONG* pulHashAlg;
    ULONG* pulEncryptAlg;

    [size_is(,ulSenderCertLen)]
    UCHAR** ppSenderCert;
    ULONG ulSenderCertLen;
    ULONG* pulSenderCertLenProp;

    [size_is(,ulProvNameLen)]
    WCHAR** ppwcsProvName;
    ULONG   ulProvNameLen;
    //
    // on msmq1.0 this was called "pulProvNameLenProp" and it was used only
    // on receive, to get the length of the authentication provider name
    // (PROPID_M_PROV_NAME_LEN). On send, the length was determined by the
    // length of the ppwcsProvName string, using wcslen().
    // On msmq2.0, we add one more signature to the security section. On send,
    // the mqrt determine the length of the "provider name" and pass it to
    // the driver using this property. it's the driver that allocate the
    // packet, using this value. See also phsecure.h
    //
    ULONG*  pulAuthProvNameLenProp;

    ULONG*  pulProvType;
    BOOL    fDefaultProvider;

    [size_is(,ulSymmKeysSize)]
    UCHAR** ppSymmKeys;
    ULONG   ulSymmKeysSize;
    ULONG*  pulSymmKeysSizeProp;

    UCHAR bEncrypted;
    UCHAR bAuthenticated;
    USHORT uSenderIDLen;

    [size_is(,ulSignatureSize)]
    UCHAR** ppSignature;
    //
    // On msmq2.0, the ppSignature buffer may hold both signature: the
    // "legacy" msmq1.0 one and the new (enhanced) signature. First come
    // the msmq1.0 signature, then the new one. If the msmq1.0 signature
    // is not computed, then it's replaced with a zero value dword.
    //
    ULONG   ulSignatureSize;
    ULONG*  pulSignatureSizeProp;

    GUID** ppSrcQMID;

    XACTUOW* pUow;

	[size_is(,ulMsgExtensionBufferInBytes),
	length_is(,ulMsgExtensionBufferInBytes)]
    UCHAR** ppMsgExtension;
    ULONG ulMsgExtensionBufferInBytes;
    ULONG* pMsgExtensionSize;
    GUID** ppConnectorType;
    ULONG* pulBodyType;
    ULONG* pulVersion;

}; //  CACTransferBufferV1


struct CACTransferBufferV2 {
    //
	// This structure is used by MSMQ 2.0 dependent clients.
	//

	struct CACTransferBufferV1 old;
    UCHAR* pbFirstInXact;
    UCHAR* pbLastInXact;
    OBJECTID** ppXactID;

}; // CACTransferBufferV2






const ULONG MQQM_QUEUE               = 1;
const ULONG MQQM_QUEUE_LOCAL_PRIVATE = 2;

struct OBJECT_FORMAT {
    [range(1,2)] DWORD ObjType;
        [switch_is(ObjType)] union
        {
            [case(MQQM_QUEUE)]
                struct QUEUE_FORMAT* pQueueFormat;
        };
};

typedef [context_handle] void* PCTX_OPENREMOTE_HANDLE_TYPE;

typedef [context_handle] void* RPC_QUEUE_HANDLE;
typedef [context_handle] void* RPC_INT_XACT_HANDLE;

/*===========================================================================================
    QMCOMM functions
=============================================================================================*/
[call_as(S_QMOpenQueue)]
HRESULT
R_QMOpenQueue(
    [in]  handle_t       hBind,
    [in, range(0, 131072)]  ULONG          nMqf,
    [in, size_is (nMqf)] struct QUEUE_FORMAT mqf[],
    [in]  DWORD          dwCallingProcessID,
    [in]  DWORD          dwDesiredAccess,
    [in]  DWORD          dwShareMode,
    [out] DWORD*         phQueue
    );

[call_as(S_QMGetRemoteQueueName)]
HRESULT
R_QMGetRemoteQueueName(
    [in]  handle_t                hBind,
    [in]  DWORD                   pQueue,
    [in, out, ptr, string] LPWSTR *lplpRemoteQueueName
    );

[call_as(S_QMOpenRemoteQueue)]
HRESULT
R_QMOpenRemoteQueue(
    [in] handle_t                      hBind,
    [out] PCTX_OPENREMOTE_HANDLE_TYPE  *pphContext,
    [out] DWORD                        *pdwContext,
    [in, unique]  struct QUEUE_FORMAT* pQueueFormat,
    [in]  DWORD                        dwCallingProcessID,
    [in]  DWORD                        dwDesiredAccess,
    [in]  DWORD                        dwShareMode,
    [in]  GUID*                        pLicGuid,
    [in]  DWORD                        dwMQS,
    [out] DWORD                        *dwpQueue,
    [out] DWORD                        *phQueue
    );

[call_as(S_QMCloseRemoteQueueContext)]
void
R_QMCloseRemoteQueueContext(
    [in, out] PCTX_OPENREMOTE_HANDLE_TYPE  *pphContext
    );

[call_as(S_QMCreateRemoteCursor)]
HRESULT
R_QMCreateRemoteCursor(
    [in]  handle_t                     hBind,
    [in]  struct CACTransferBufferV1 * ptb1,
    [in]  DWORD                        hQueue,
    [out] DWORD *                      phCursor
    );

[call_as(S_QMSendMessageInternal)]
HRESULT
R_QMSendMessageInternal(
    [in] handle_t                     hBind,
    [in] struct QUEUE_FORMAT*         pQueueFormat,
    [in] struct CACTransferBufferV1 * ptb1
    );

[call_as(S_QMCreateObjectInternal)]
HRESULT
R_QMCreateObjectInternal(
    [in] handle_t                                 hBind,
    [in] DWORD                                    dwObjectType,
    [in] LPCWSTR                                  lpwcsPathName,
    [in, range(0, 524288)] DWORD                  SDSize,
    [in, unique, size_is (SDSize)]  unsigned char *pSecurityDescriptor,
    [in, range(1, 128)] DWORD                     cp,
    [in, size_is (cp)]  PROPID                    aProp[],
    [in, size_is (cp)]  PROPVARIANT               apVar[]
    );

typedef ULONG SECURITY_INFORMATION;

[call_as(S_QMSetObjectSecurityInternal)]
HRESULT
R_QMSetObjectSecurityInternal(
    [in] handle_t                                 hBind,
    [in] struct OBJECT_FORMAT*                    pObjectFormat,
    [in] SECURITY_INFORMATION                     SecurityInformation,
    [in, range(0, 524288)] DWORD                  SDSize,
    [in, unique, size_is (SDSize)]  unsigned char *pSecurityDescriptor);

[call_as(S_QMGetObjectSecurityInternal)]
HRESULT
R_QMGetObjectSecurityInternal(
    [in] handle_t                           hBind,
    [in] struct OBJECT_FORMAT*              pObjectFormat,
    [in] SECURITY_INFORMATION               RequestedInformation,
    [out, size_is (nLength)]  unsigned char *pSecurityDescriptor,
    [in, range(0, 524288)] DWORD            nLength,
    [out]  LPDWORD                          lpnLengthNeeded
    );

cpp_quote("#define R_QMGetObjectSecurity(hBind, of, si, sd, l , ln) \\")
cpp_quote("    R_QMGetObjectSecurityInternal(hBind, of, si, (unsigned char *)(sd), l , ln)")

[call_as(S_QMDeleteObject)]
HRESULT
R_QMDeleteObject(
     [in] handle_t hBind,
     [in] struct OBJECT_FORMAT*  pObjectFormat
     );

[call_as(S_QMGetObjectProperties)]
HRESULT
R_QMGetObjectProperties(
    [in] handle_t                        hBind,
    [in] struct OBJECT_FORMAT*           pObjectFormat,
    [in, range(1, 128)] DWORD            cp,
    [in, size_is (cp )]  PROPID          aProp[],
    [in, out, size_is(cp )]  PROPVARIANT apVar[]
    );

[call_as(S_QMSetObjectProperties)]
HRESULT
R_QMSetObjectProperties(
    [in] handle_t                            hBind,
    [in] struct OBJECT_FORMAT*               pObjectFormat,
    [in, range(1, 128)] DWORD                cp,
    [in, unique, size_is (cp )]  PROPID      aProp[],
    [in, unique, size_is(cp )]  PROPVARIANT  apVar[]
    );

[call_as(S_QMObjectPathToObjectFormat)]
HRESULT
R_QMObjectPathToObjectFormat(
    [in] handle_t hBind,
    [in] LPCWSTR lpwcsPathName,
    [in, out] struct OBJECT_FORMAT *pObjectFormat
    );

[call_as(S_QMAttachProcess)]
HRESULT
R_QMAttachProcess(
    [in] handle_t                      hBind,
    [in] DWORD                         dwProcessId,
    [in, range(0,512)] DWORD           cSid,
    [out, size_is(cSid)] unsigned char *pSid,
    [out] LPDWORD                      cReqSid
    );

[call_as(S_QMGetTmWhereabouts)]
HRESULT
R_QMGetTmWhereabouts(
    [in]  handle_t                      hBind,
    [in, range(0, 131072)]  DWORD       cbBufSize,
    [out, size_is (cbBufSize)]          UCHAR* pbWhereabouts,
    [out] DWORD                         *pcbWhereabouts
    );

[call_as(S_QMEnlistTransaction)]
HRESULT
R_QMEnlistTransaction(
    [in] handle_t                       hBind,
    [in] XACTUOW*                       pUow,
    [in, range(0, 131072)] DWORD        cbCookie,
    [in, size_is (cbCookie)]  UCHAR*    pbCookie
    );

[call_as(S_QMEnlistInternalTransaction)]
HRESULT
R_QMEnlistInternalTransaction(
    [in]  handle_t hBind,
    [in]  XACTUOW* pUow,
    [out] RPC_INT_XACT_HANDLE* phIntXact
	);

[call_as(S_QMCommitTransaction)]
HRESULT
R_QMCommitTransaction(
    [in, out] RPC_INT_XACT_HANDLE* phIntXact
    );

[call_as(S_QMAbortTransaction)]
HRESULT
R_QMAbortTransaction(
    [in, out] RPC_INT_XACT_HANDLE* phIntXact
    );

[call_as(S_rpc_QMOpenQueueInternal)]
HRESULT
rpc_QMOpenQueueInternal(
    [in]  handle_t      hBind,
    [in]  struct QUEUE_FORMAT* pQueueFormat,
    [in]  DWORD         dwDesiredAccess,
    [in]  DWORD         dwShareMode,
    [in]  DWORD         hRemoteQueue,
    [in, out, ptr] LPWSTR*  lplpRemoteQueueName,
    [in]  DWORD*            dwpQueue,
    [in]  GUID*             pLicGuid,
    [in]  LPWSTR            lpClientName,
    [out] DWORD*            pdwQMContext,
    [out] RPC_QUEUE_HANDLE* phQueue,
    [in]  DWORD             dwRemoteProtocol,
    [in]  DWORD             dwpRemoteContext
    );

[call_as(S_rpc_ACCloseHandle)]
HRESULT
rpc_ACCloseHandle(
    [in, out] RPC_QUEUE_HANDLE* phQueue
    );

[call_as(S_rpc_ACCreateCursor)]
HRESULT
rpc_ACCreateCursor(
    [in] RPC_QUEUE_HANDLE                  hQueue,
    [in, out] struct CACTransferBufferV1 * ptb1
    );

[call_as(S_rpc_ACCloseCursor)]
HRESULT
rpc_ACCloseCursor(
    [in] RPC_QUEUE_HANDLE hQueue,
    [in] ULONG hCursor
    );

[call_as(S_rpc_ACSetCursorProperties)]
HRESULT
rpc_ACSetCursorProperties(
    [in] RPC_QUEUE_HANDLE hProxy,
    [in] ULONG hCursor,
    [in] ULONG hRemoteCursor
    );

[call_as(S_rpc_ACSendMessage)]
HRESULT
rpc_ACSendMessage(
    [in] RPC_QUEUE_HANDLE             hQueue,
    [in] struct CACTransferBufferV1 * ptb1,
    [in, out, unique] OBJECTID *      pMessageID
    );

[call_as(S_rpc_ACReceiveMessage)]
HRESULT
rpc_ACReceiveMessage(
    [in] handle_t                          hBind,
    [in] DWORD                             hQMContext,
    [in, out] struct CACTransferBufferV1 * ptb1
    );

[call_as(S_rpc_ACHandleToFormatName)]
HRESULT
rpc_ACHandleToFormatName(
    [in] RPC_QUEUE_HANDLE hQueue,
    [in, range(0, 524288)] DWORD dwFormatNameRPCBufferLen,
    [in, out, unique,
     size_is(dwFormatNameRPCBufferLen), length_is(dwFormatNameRPCBufferLen)] WCHAR* lpwcsFormatName,
    [in, out] LPDWORD pdwLength
    );

[call_as(S_rpc_ACPurgeQueue)]
HRESULT
rpc_ACPurgeQueue(
    [in] RPC_QUEUE_HANDLE hQueue
    );

cpp_quote("#define  QueryRemoteQM_MQISServers     1")
cpp_quote("#define  QueryRemoteQM_LongLiveDefault 2")
cpp_quote("#define  QueryRemoteQM_EnterpriseGUID  3")
cpp_quote("#define  QueryRemoteQM_QMVersion       4")
cpp_quote("#define  QueryRemoteQM_ServerQmGUID    5")

[call_as(S_QMQueryQMRegistryInternal)]
HRESULT
R_QMQueryQMRegistryInternal(
    [in]  handle_t         hBind,
    [in]  DWORD            dwQueryType,
    [out, string] LPWSTR   *lplpMQISServer
    );

[call_as(S_QMListInternalQueues)]
HRESULT
R_QMListInternalQueues(
    [in] handle_t hBind,
    [in, out, unique,
        size_is(,*pdwFormatLen), length_is(,*pdwFormatLen)] WCHAR* *ppFormatName,
    [in, out] LPDWORD pdwFormatLen,
    [in, out, unique,
        size_is(,*pdwDisplayLen), length_is(,*pdwDisplayLen)] WCHAR* *ppDisplayName,
    [in, out] LPDWORD pdwDisplayLen
    );

[call_as(S_QMCorrectOutSequence)]
HRESULT
R_QMCorrectOutSequence(
	[in] handle_t hBind,
	[in] DWORD dwSeqID1,
	[in] DWORD dwSeqID2,
	[in] ULONG ulSeqN
    );

[call_as(S_QMGetRTQMServerPort)]
DWORD
R_QMGetRTQMServerPort(
	[in] handle_t hBind,
	[in] DWORD fIP
	);

[call_as(S_QMGetMsmqServiceName)]
HRESULT
R_QMGetMsmqServiceName(
    [in]  handle_t                hBind,
    [in, out, ptr, string] LPWSTR *lplpService
    );

[call_as(S_QMCreateDSObjectInternal)]
HRESULT
R_QMCreateDSObjectInternal(
    [in] handle_t                                 hBind,
    [in] DWORD                                    dwObjectType,
    [in] LPCWSTR                                  lpwcsPathName,
    [in, range(0, 524288)] DWORD                  SDSize,
    [in, unique, size_is (SDSize)]  unsigned char *pSecurityDescriptor,
    [in, range(1, 128)] DWORD                     cp,
    [in, size_is (cp)]  PROPID                    aProp[],
    [in, size_is (cp)]  PROPVARIANT               apVar[],
    [in, out, unique]   GUID                     *pObjGuid );

}





[
uuid(76d12b80-3467-11d3-91ff-0090272f9ea3),
version(1.0),
pointer_default(unique)
]
interface qmcomm2
{

[call_as(S_QMSendMessageInternalEx)]
HRESULT
QMSendMessageInternalEx(
    [in] handle_t                     hBind,
    [in] struct QUEUE_FORMAT* pQueueFormat,
    [in] struct CACTransferBufferV2 * ptb2,
    [in, out, unique] OBJECTID *      pMessageID	
    );

[call_as(S_rpc_ACSendMessageEx)]
HRESULT
rpc_ACSendMessageEx(
    [in] RPC_QUEUE_HANDLE             hQueue,
    [in] struct CACTransferBufferV2 * ptb2,
    [in, out, unique] OBJECTID *      pMessageID
    );

[call_as(S_rpc_ACReceiveMessageEx)]
HRESULT
rpc_ACReceiveMessageEx(
    [in] handle_t                          hBind,
    [in] DWORD                             hQMContext,
    [in, out] struct CACTransferBufferV2 * ptb2
    );

[call_as(S_rpc_ACCreateCursorEx)]
HRESULT
rpc_ACCreateCursorEx(
    [in] RPC_QUEUE_HANDLE                    hQueue,
    [in, out] struct CACCreateRemoteCursor * pcc
    );

}

