//+---------------------------------------------------------------------------
//
//  Copyright (C) 2002 - 2002 Microsoft Corporation.
//
//  File:       specchar.cxx
//
//  Contents:   Table that maps special characters to Unicode
//
//  Classes:    CSpecialCharTable
//
//----------------------------------------------------------------------------

#include <pch.cxx>
#pragma hdrstop

struct SStringCharEntry
{
    WCHAR const * pwcString;
    WCHAR         wcChar;
};

const SStringCharEntry g_aCharMap[] =
{
    { L"AElig",   0xC6 },
    { L"AMP",     0x26 },
    { L"Aacute",  0xC1 },
    { L"Abreve",  0x102 },
    { L"Acirc",   0xC2 },
    { L"Agrave",  0xC0 },
    { L"Alpha",   913 },
    { L"Amacr",   0x100 },
    { L"Aogon",   0x104 },
    { L"Aring",   0xC5 },
    { L"Atilde",  0xC3 },
    { L"Auml",    0xC4 },
    { L"Beta",    914 },
    { L"COPY",    0xA9 },
    { L"Cacute",  0x106 },
    { L"Ccaron",  0x10C },
    { L"Ccedil",  0xC7 },
    { L"Ccirc",   0x108 },
    { L"Cdot",    0x10A },
    { L"Chi",     935 },
    { L"Dagger",  8225 },
    { L"Dcaron",  0x10E },
    { L"Delta",   916 },
    { L"Dstrok",  0x110 },
    { L"ENG",     0x14A },
    { L"ETH",     0xD0 },
    { L"Eacute",  0xC9 },
    { L"Ebreve",  0x114 },
    { L"Ecaron",  0x11A },
    { L"Ecirc",   0xCA },
    { L"Edot",    0x116 },
    { L"Egrave",  0xC8 },
    { L"Emacr",   0x112 },
    { L"Eogon",   0x118 },
    { L"Epsilon", 917 },
    { L"Eta",     919 },
    { L"Euml",    0xCB },
    { L"GT",      PRIVATE_USE_MAPPING_FOR_GT },
    { L"Gamma",   915 },
    { L"Gbreve",  0x11E },
    { L"Gcedil",  0x122 },
    { L"Gcirc",   0x11C },
    { L"Gdot",    0x120 },
    { L"Iacute",  0xCD },
    { L"Icirc",   0xCE },
    { L"Idot",    0x130 },
    { L"Igrave",  0xCC },
    { L"Imacr",   0x12A },
    { L"Iogon",   0x12E },
    { L"Iota",    921 },
    { L"Itilde",  0x128 },
    { L"Iuml",    0xCF },
    { L"Kappa",   922 },
    { L"Kcedil",  0x136 },
    { L"LT",      PRIVATE_USE_MAPPING_FOR_LT },
    { L"Lacute",  0x139 },
    { L"Lambda",  923 },
    { L"Lcaron",  0x13D },
    { L"Lcedil",  0x13B },
    { L"Lstrok",  0x141 },
    { L"Mu",      924 },
    { L"Nacute",  0x143 },
    { L"Ncaron",  0x147 },
    { L"Ncedil",  0x145 },
    { L"Ntilde",  0xD1 },
    { L"Nu",      925 },
    { L"OElig",   0x152 },
    { L"Oacute",  0xD3 },
    { L"Ocirc",   0xD4 },
    { L"Odblac",  0x150 },
    { L"Ograve",  0xD2 },
    { L"Omacr",   0x14C },
    { L"Omega",   937 },
    { L"Omicron", 927 },
    { L"Oslash",  0xD8 },
    { L"Otilde",  0xD5 },
    { L"Ouml",    0xD6 },
    { L"Phi",     934 },
    { L"Pi",      928 },
    { L"Prime",   8243 },
    { L"Psi",     936 },
    { L"QUOT",    PRIVATE_USE_MAPPING_FOR_QUOT },
    { L"REG",     0xAE },
    { L"Racute",  0x154 },
    { L"Rcaron",  0x158 },
    { L"Rho",     929 },
    { L"Sacute",  0x15A },
    { L"Scaron",  0x160 },
    { L"Scedil",  0x15E },
    { L"Sigma",   931 },
    { L"THORN",   0xDE },
    { L"TRADE",   8482 },
    { L"Tau",     932 },
    { L"Tcaron",  0x164 },
    { L"Tcedil",  0x162 },
    { L"Theta",   920 },
    { L"Tstrok",  0x166 },
    { L"Uacute",  0xDA },
    { L"Ucirc",   0xDB },
    { L"Udblac",  0x170 },
    { L"Ugrave",  0xD9 },
    { L"Umacr",   0x16A },
    { L"Uogon",   0x172 },
    { L"Upsilon", 933 },
    { L"Uring",   0x16E },
    { L"Utilde",  0x168 },
    { L"Uuml",    0xDC },
    { L"Xi",      926 },
    { L"Yacute",  0xDD },
    { L"Yuml",    0x178 },
    { L"Zacute",  0x179 },
    { L"Zcaron",  0x17D },
    { L"Zdot",    0x17B },
    { L"Zeta",    918 },
    { L"aacute",  0xE1 },
    { L"aafs",    8301 },
    { L"abreve",  0x103 },
    { L"acirc",   0xE2 },
    { L"acute",   0xB4 },
    { L"aelig",   0xE6 },
    { L"agrave",  0xE0 },
    { L"alefsym", 8501 },
    { L"alpha",   945 },
    { L"amacr",   0x101 },
    { L"amp",     0x26 },
    { L"and",     8743 },
    { L"ang",     8736 },
    { L"aogon",   0x105 },
    { L"apos",    0x27 },
    { L"aring",   0xE5 },
    { L"ass",     8299 },
    { L"asymp",   8776 },
    { L"atilde",  0xE3 },
    { L"auml",    0xE4 },
    { L"bdquo",   8222 },
    { L"beta",    946 },
    { L"breve",   0x2D8 },
    { L"brvbar",  0xA6 },
    { L"bull",    8226 },
    { L"cacute",  0x107 },
    { L"cap",     8745 },
    { L"caron",   0x2C7 },
    { L"ccaron",  0x10D },
    { L"ccedil",  0xE7 },
    { L"ccirc",   0x109 },
    { L"cdot",    0x10B },
    { L"cedil",   0xB8 },
    { L"cent",    0xA2 },
    { L"chi",     967 },
    { L"circ",    710 },
    { L"clubs",   9827 },
    { L"colon",   0x3A },
    { L"comma",   0x2C },
    { L"cong",    8773 },
    { L"copy",    0xA9 },
    { L"crarr",   8629 },
    { L"cup",     8746 },
    { L"curren",  0xA4 },
    { L"dArr",    8659 },
    { L"dagger",  8224 },
    { L"darr",    8595 },
    { L"dblacc",  0x2DD },
    { L"dcaron",  0x10F },
    { L"deg",     0xB0 },
    { L"delta",   948 },
    { L"diams",   9830 },
    { L"divide",  0xF7 },
    { L"dot",     0x2D9 },
    { L"dstrok",  0x111 },
    { L"eacute",  0xE9 },
    { L"ebreve",  0x115 },
    { L"ecaron",  0x11B },
    { L"ecirc",   0xEA },
    { L"edot",    0x117 },
    { L"egrave",  0xE8 },
    { L"emacr",   0x113 },
    { L"empty",   8709 },
    { L"emsp",    8195 },
    { L"eng",     0x14B },
    { L"ensp",    8194 },
    { L"eogon",   0x119 },
    { L"epsilon", 949 },
    { L"equals",  0x3D },
    { L"equiv",   8801 },
    { L"eta",     951 },
    { L"eth",     0xF0 },
    { L"euml",    0xEB },
    { L"euro",    8364 },
    { L"excl",    0x21 },
    { L"exist",   8707 },
    { L"fnof",    402 },
    { L"forall",  8704 },
    { L"frac12",  0xBD },
    { L"frac14",  0xBC },
    { L"frac34",  0xBE },
    { L"frasl",   8260 },
    { L"gamma",   947 },
    { L"gbreve",  0x11F },
    { L"gcedil",  0x123 },
    { L"gcirc",   0x11D },
    { L"gdot",    0x121 },
    { L"ge",      8805 },
    { L"grave",   0x60 },
    { L"gt",      PRIVATE_USE_MAPPING_FOR_GT },
    { L"hArr",    8660 },
    { L"harr",    8596 },
    { L"hearts",  9829 },
    { L"hellip",  8230 },
    { L"iacute",  0xED },
    { L"iafs",    8300 },
    { L"icirc",   0xEE },
    { L"iexcl",   0xA1 },
    { L"igrave",  0xEC },
    { L"imacr",   0x12B },
    { L"image",   8465 },
    { L"infin",   8734 },
    { L"inodot",  0x131 },
    { L"int",     8747 },
    { L"iogon",   0x12F },
    { L"iota",    953 },
    { L"iquest",  0xBF },
    { L"isin",    8712 },
    { L"iss",     8298 },
    { L"itilde",  0x129 },
    { L"iuml",    0xEF },
    { L"kappa",   954 },
    { L"kcedil",  0x137 },
    { L"kra",     0x138 },
    { L"lArr",    8656 },
    { L"lacute",  0x13A },
    { L"lambda",  955 },
    { L"lang",    9001 },
    { L"laquo",   0xAB },
    { L"larr",    8592 },
    { L"lcaron",  0x13E },
    { L"lcedil",  0x13C },
    { L"lceil",   8968 },
    { L"ldquo",   8220 },
    { L"le",      8804 },
    { L"lfloor",  8970 },
    { L"lowast",  8727 },
    { L"lowbar",  0x5F },
    { L"loz",     9674 },
    { L"lre",     8234 },
    { L"lrm",     8206 },
    { L"lro",     8237 },
    { L"lsaquo",  8249 },
    { L"lsqb",    0x5B },
    { L"lsquo",   8216 },
    { L"lstrok",  0x142 },
    { L"lt",      PRIVATE_USE_MAPPING_FOR_LT },
    { L"macr",    0xAF },
    { L"mdash",   8212 },
    { L"micro",   0xB5 },
    { L"middot",  0xB7 },
    { L"minus",   8722 },
    { L"mu",      956 },
    { L"nabla",   8711 },
    { L"nacute",  0x144 },
    { L"nads",    8302 },
    { L"nbsp",    0xA0 },
    { L"ncaron",  0x148 },
    { L"ncedil",  0x146 },
    { L"ndash",   8211 },
    { L"ne",      8800 },
    { L"ni",      8715 },
    { L"nods",    8303 },
    { L"not",     0xAC },
    { L"notin",   8713 },
    { L"nsub",    8836 },
    { L"ntilde",  0xF1 },
    { L"nu",      957 },
    { L"oacute",  0xF3 },
    { L"ocirc",   0xF4 },
    { L"odblac",  0x151 },
    { L"oelig",   0x153 },
    { L"ogon",    0x2DB },
    { L"ograve",  0xF2 },
    { L"oline",   8254 },
    { L"omacr",   0x14D },
    { L"omega",   969 },
    { L"omicron", 959 },
    { L"oplus",   8853 },
    { L"or",      8744 },
    { L"ordf",    0xAA },
    { L"ordm",    0xBA },
    { L"oslash",  0xF8 },
    { L"otilde",  0xF5 },
    { L"otimes",  8855 },
    { L"ouml",    0xF6 },
    { L"para",    0xB6 },
    { L"part",    8706 },
    { L"pdf",     8236 },
    { L"period",  0x2E },
    { L"permil",  8240 },
    { L"perp",    8869 },
    { L"phi",     966 },
    { L"pi",      960 },
    { L"piv",     982 },
    { L"plus",    0x2B },
    { L"plusmn",  0xB1 },
    { L"pound",   0xA3 },
    { L"prime",   8242 },
    { L"prod",    8719 },
    { L"prop",    8733 },
    { L"psi",     968 },
    { L"quest",   0x3F },
    { L"quot",    PRIVATE_USE_MAPPING_FOR_QUOT },
    { L"rArr",    8658 },
    { L"racute",  0x155 },
    { L"radic",   8730 },
    { L"rang",    9002 },
    { L"raquo",   0xBB },
    { L"rarr",    8594 },
    { L"rcaron",  0x159 },
    { L"rceil",   8969 },
    { L"rdquo",   8221 },
    { L"real",    8476 },
    { L"reg",     0xAE },
    { L"rfloor",  8971 },
    { L"rho",     961 },
    { L"rle",     8235 },
    { L"rlm",     8207 },
    { L"rlo",     8238 },
    { L"rsaquo",  8250 },
    { L"rsqb",    0x5D },
    { L"rsquo",   8217 },
    { L"sacute",  0x15B },
    { L"sbquo",   8218 },
    { L"scaron",  0x161 },
    { L"scedil",  0x15F },
    { L"sdot",    8901 },
    { L"sect",    0xA7 },
    { L"semi",    0x3B },
    { L"shy",     0xAD },
    { L"sigma",   963 },
    { L"sigmaf",  962 },
    { L"sim",     8764 },
    { L"spades",  9824 },
    { L"sub",     8834 },
    { L"sube",    8838 },
    { L"sum",     8721 },
    { L"sup",     8835 },
    { L"sup1",    0xB9 },
    { L"sup2",    0xB2 },
    { L"sup3",    0xB3 },
    { L"supe",    8839 },
    { L"supl",    0xB9 },
    { L"szlig",   0xDF },
    { L"tau",     964 },
    { L"tcaron",  0x165 },
    { L"tcedil",  0x163 },
    { L"there4",  8756 },
    { L"theta",   952 },
    { L"thetasym",977 },
    { L"thinsp",  8201 },
    { L"thorn",   0xFE },
    { L"tilde",   0x2DC },
    { L"times",   0xD7 },
    { L"trade",   8482 },
    { L"tstrok",  0x167 },
    { L"uArr",    8657 },
    { L"uacute",  0xFA },
    { L"uarr",    8593 },
    { L"ucirc",   0xFB },
    { L"udblac",  0x171 },
    { L"ugrave",  0xF9 },
    { L"umacr",   0x16B },
    { L"uml",     0xA8 },
    { L"uogon",   0x173 },
    { L"upsih",   978 },
    { L"upsilon", 965 },
    { L"uring",   0x16F },
    { L"utilde",  0x169 },
    { L"uuml",    0xFC },
    { L"weierp",  8472 },
    { L"xi",      958 },
    { L"yacute",  0xFD },
    { L"yen",     0xA5 },
    { L"yuml",    0xFF },
    { L"zacute",  0x17A },
    { L"zcaron",  0x17E },
    { L"zdot",    0x17C },
    { L"zeta",    950 },
    { L"zwj",     8205 },
    { L"zwnj",    8204 },
    { L"zwsp",    8203 },
};

#define ArraySize(x) ( sizeof( x ) / sizeof( x[0] ) )

const ULONG g_cCharMap = ArraySize( g_aCharMap );

int __cdecl StringCharEntryCompare(
    WCHAR const *            pwcKey,
    SStringCharEntry const * pEntry )
{
    return wcscmp( pwcKey, pEntry->pwcString );
} //StringCharEntryCompare

BOOL LookupSpecialChar( WCHAR const * pwcTag, ULONG cwcTag, WCHAR & wc )
{
    WCHAR awc[ 50 ];

    if ( cwcTag >= ArraySize( awc ) )
        return FALSE;

    memcpy( awc, pwcTag, cwcTag * sizeof WCHAR );
    awc[ cwcTag ] = 0;

    SStringCharEntry * pEntry = (SStringCharEntry *)
                                bsearch( awc,
                                         g_aCharMap,
                                         g_cCharMap,
                                         sizeof SStringCharEntry,
                                         (int (__cdecl *)(const void *, const void *) )
                                             StringCharEntryCompare );

    if ( 0 != pEntry )
    {
        wc = pEntry->wcChar;
        return TRUE;
    }

    return FALSE;
} //LookupSpecialChar


